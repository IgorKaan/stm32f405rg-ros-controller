
stm32f405rg-ros-core-controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  0800fa40  0800fa40  0001fa40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080100d8  080100d8  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  080100d8  080100d8  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080100e0  080100e0  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080100e0  080100e0  000200e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080100e8  080100e8  000200e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080100ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068f0  200001f4  080102e0  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006ae4  080102e0  00036ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030e79  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005de3  00000000  00000000  0006109d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001fb0  00000000  00000000  00066e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d88  00000000  00000000  00068e30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002937c  00000000  00000000  0006abb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b56e  00000000  00000000  00093f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dd015  00000000  00000000  000af4a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018c4b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088e4  00000000  00000000  0018c534  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fa28 	.word	0x0800fa28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800fa28 	.word	0x0800fa28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000210 	.word	0x20000210
 8000510:	20000264 	.word	0x20000264

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b0aa      	sub	sp, #168	; 0xa8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f004 fd5f 	bl	8004fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f907 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f9d3 	bl	80008cc <MX_GPIO_Init>
  MX_CAN1_Init();
 8000526:	f000 f96d 	bl	8000804 <MX_CAN1_Init>
  MX_I2C1_Init();
 800052a:	f000 f9a1 	bl	8000870 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ctrl = read_id();
 800052e:	f000 fc1f 	bl	8000d70 <read_id>
 8000532:	4603      	mov	r3, r0
 8000534:	461a      	mov	r2, r3
 8000536:	4b6b      	ldr	r3, [pc, #428]	; (80006e4 <main+0x1d0>)
 8000538:	701a      	strb	r2, [r3, #0]
  MPU9250_calibrate();
 800053a:	f000 fc4f 	bl	8000ddc <MPU9250_calibrate>

  HAL_Delay(2000);
 800053e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000542:	f004 fd8d 	bl	8005060 <HAL_Delay>
  MPU9250_init();
 8000546:	f000 fc27 	bl	8000d98 <MPU9250_init>
  HAL_Delay(500);
 800054a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800054e:	f004 fd87 	bl	8005060 <HAL_Delay>
  init_ROS();
 8000552:	f003 fb6b 	bl	8003c2c <init_ROS>
  HAL_Delay(500);
 8000556:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800055a:	f004 fd81 	bl	8005060 <HAL_Delay>

  rightFront_wheelHeader.DLC = 4;
 800055e:	4b62      	ldr	r3, [pc, #392]	; (80006e8 <main+0x1d4>)
 8000560:	2204      	movs	r2, #4
 8000562:	611a      	str	r2, [r3, #16]
  rightFront_wheelHeader.IDE = CAN_ID_STD;
 8000564:	4b60      	ldr	r3, [pc, #384]	; (80006e8 <main+0x1d4>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  rightFront_wheelHeader.RTR = CAN_RTR_DATA;
 800056a:	4b5f      	ldr	r3, [pc, #380]	; (80006e8 <main+0x1d4>)
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]
  rightFront_wheelHeader.StdId = 0x3F;
 8000570:	4b5d      	ldr	r3, [pc, #372]	; (80006e8 <main+0x1d4>)
 8000572:	223f      	movs	r2, #63	; 0x3f
 8000574:	601a      	str	r2, [r3, #0]

  leftFront_wheelHeader.DLC = 4;
 8000576:	4b5d      	ldr	r3, [pc, #372]	; (80006ec <main+0x1d8>)
 8000578:	2204      	movs	r2, #4
 800057a:	611a      	str	r2, [r3, #16]
  leftFront_wheelHeader.IDE = CAN_ID_STD;
 800057c:	4b5b      	ldr	r3, [pc, #364]	; (80006ec <main+0x1d8>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  leftFront_wheelHeader.RTR = CAN_RTR_DATA;
 8000582:	4b5a      	ldr	r3, [pc, #360]	; (80006ec <main+0x1d8>)
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  leftFront_wheelHeader.StdId = 0xF;
 8000588:	4b58      	ldr	r3, [pc, #352]	; (80006ec <main+0x1d8>)
 800058a:	220f      	movs	r2, #15
 800058c:	601a      	str	r2, [r3, #0]

  leftBack_wheelHeader.DLC = 4;
 800058e:	4b58      	ldr	r3, [pc, #352]	; (80006f0 <main+0x1dc>)
 8000590:	2204      	movs	r2, #4
 8000592:	611a      	str	r2, [r3, #16]
  leftBack_wheelHeader.IDE = CAN_ID_STD;
 8000594:	4b56      	ldr	r3, [pc, #344]	; (80006f0 <main+0x1dc>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  leftBack_wheelHeader.RTR = CAN_RTR_DATA;
 800059a:	4b55      	ldr	r3, [pc, #340]	; (80006f0 <main+0x1dc>)
 800059c:	2200      	movs	r2, #0
 800059e:	60da      	str	r2, [r3, #12]
  leftBack_wheelHeader.StdId = 0x1F;
 80005a0:	4b53      	ldr	r3, [pc, #332]	; (80006f0 <main+0x1dc>)
 80005a2:	221f      	movs	r2, #31
 80005a4:	601a      	str	r2, [r3, #0]

  rightBack_wheelHeader.DLC = 4;
 80005a6:	4b53      	ldr	r3, [pc, #332]	; (80006f4 <main+0x1e0>)
 80005a8:	2204      	movs	r2, #4
 80005aa:	611a      	str	r2, [r3, #16]
  rightBack_wheelHeader.IDE = CAN_ID_STD;
 80005ac:	4b51      	ldr	r3, [pc, #324]	; (80006f4 <main+0x1e0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  rightBack_wheelHeader.RTR = CAN_RTR_DATA;
 80005b2:	4b50      	ldr	r3, [pc, #320]	; (80006f4 <main+0x1e0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	60da      	str	r2, [r3, #12]
  rightBack_wheelHeader.StdId = 0x2F;
 80005b8:	4b4e      	ldr	r3, [pc, #312]	; (80006f4 <main+0x1e0>)
 80005ba:	222f      	movs	r2, #47	; 0x2f
 80005bc:	601a      	str	r2, [r3, #0]

  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80005be:	4b4e      	ldr	r3, [pc, #312]	; (80006f8 <main+0x1e4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0;
 80005c4:	4b4c      	ldr	r3, [pc, #304]	; (80006f8 <main+0x1e4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 80005ca:	4b4b      	ldr	r3, [pc, #300]	; (80006f8 <main+0x1e4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 80005d0:	4b49      	ldr	r3, [pc, #292]	; (80006f8 <main+0x1e4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 80005d6:	4b48      	ldr	r3, [pc, #288]	; (80006f8 <main+0x1e4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005dc:	4b46      	ldr	r3, [pc, #280]	; (80006f8 <main+0x1e4>)
 80005de:	2201      	movs	r2, #1
 80005e0:	61da      	str	r2, [r3, #28]
  //sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterActivation = ENABLE;
 80005e2:	4b45      	ldr	r3, [pc, #276]	; (80006f8 <main+0x1e4>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80005e8:	4943      	ldr	r1, [pc, #268]	; (80006f8 <main+0x1e4>)
 80005ea:	4844      	ldr	r0, [pc, #272]	; (80006fc <main+0x1e8>)
 80005ec:	f004 fe56 	bl	800529c <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1);
 80005f0:	4842      	ldr	r0, [pc, #264]	; (80006fc <main+0x1e8>)
 80005f2:	f004 ff33 	bl	800545c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005f6:	2102      	movs	r1, #2
 80005f8:	4840      	ldr	r0, [pc, #256]	; (80006fc <main+0x1e8>)
 80005fa:	f005 f960 	bl	80058be <HAL_CAN_ActivateNotification>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005fe:	4b40      	ldr	r3, [pc, #256]	; (8000700 <main+0x1ec>)
 8000600:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000604:	461d      	mov	r5, r3
 8000606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000612:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f00d f939 	bl	800d890 <osThreadCreate>
 800061e:	4602      	mov	r2, r0
 8000620:	4b38      	ldr	r3, [pc, #224]	; (8000704 <main+0x1f0>)
 8000622:	601a      	str	r2, [r3, #0]

  /* definition and creation of task1 */
  osThreadDef(task1, StartTask02, osPriorityNormal, 0, 128);
 8000624:	4b38      	ldr	r3, [pc, #224]	; (8000708 <main+0x1f4>)
 8000626:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800062a:	461d      	mov	r5, r3
 800062c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 8000638:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f00d f926 	bl	800d890 <osThreadCreate>
 8000644:	4602      	mov	r2, r0
 8000646:	4b31      	ldr	r3, [pc, #196]	; (800070c <main+0x1f8>)
 8000648:	601a      	str	r2, [r3, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, StartTask03, osPriorityHigh, 0, 128);
 800064a:	4b31      	ldr	r3, [pc, #196]	; (8000710 <main+0x1fc>)
 800064c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000650:	461d      	mov	r5, r3
 8000652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000656:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 800065e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f00d f913 	bl	800d890 <osThreadCreate>
 800066a:	4602      	mov	r2, r0
 800066c:	4b29      	ldr	r3, [pc, #164]	; (8000714 <main+0x200>)
 800066e:	601a      	str	r2, [r3, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, StartTask04, osPriorityNormal, 0, 128);
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <main+0x204>)
 8000672:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000676:	461d      	mov	r5, r3
 8000678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000680:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3), NULL);
 8000684:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f00d f900 	bl	800d890 <osThreadCreate>
 8000690:	4602      	mov	r2, r0
 8000692:	4b22      	ldr	r3, [pc, #136]	; (800071c <main+0x208>)
 8000694:	601a      	str	r2, [r3, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, StartTask05, osPriorityIdle, 0, 128);
 8000696:	4b22      	ldr	r3, [pc, #136]	; (8000720 <main+0x20c>)
 8000698:	f107 041c 	add.w	r4, r7, #28
 800069c:	461d      	mov	r5, r3
 800069e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task4Handle = osThreadCreate(osThread(task4), NULL);
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f00d f8ed 	bl	800d890 <osThreadCreate>
 80006b6:	4602      	mov	r2, r0
 80006b8:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <main+0x210>)
 80006ba:	601a      	str	r2, [r3, #0]

  /* definition and creation of task5 */
  osThreadDef(task5, StartTask06, osPriorityIdle, 0, 128);
 80006bc:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <main+0x214>)
 80006be:	463c      	mov	r4, r7
 80006c0:	461d      	mov	r5, r3
 80006c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task5Handle = osThreadCreate(osThread(task5), NULL);
 80006ce:	463b      	mov	r3, r7
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f00d f8dc 	bl	800d890 <osThreadCreate>
 80006d8:	4602      	mov	r2, r0
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <main+0x218>)
 80006dc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006de:	f00d f8d0 	bl	800d882 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <main+0x1ce>
 80006e4:	20000464 	.word	0x20000464
 80006e8:	20004d20 	.word	0x20004d20
 80006ec:	20004cfc 	.word	0x20004cfc
 80006f0:	200051a4 	.word	0x200051a4
 80006f4:	20004cdc 	.word	0x20004cdc
 80006f8:	20004bfc 	.word	0x20004bfc
 80006fc:	2000516c 	.word	0x2000516c
 8000700:	0800fa4c 	.word	0x0800fa4c
 8000704:	20004c28 	.word	0x20004c28
 8000708:	0800fa70 	.word	0x0800fa70
 800070c:	20004c9c 	.word	0x20004c9c
 8000710:	0800fa94 	.word	0x0800fa94
 8000714:	200051c0 	.word	0x200051c0
 8000718:	0800fab8 	.word	0x0800fab8
 800071c:	20004d18 	.word	0x20004d18
 8000720:	0800fadc 	.word	0x0800fadc
 8000724:	20004ccc 	.word	0x20004ccc
 8000728:	0800fb00 	.word	0x0800fb00
 800072c:	20004ca4 	.word	0x20004ca4

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2230      	movs	r2, #48	; 0x30
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f00f f835 	bl	800f7ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b28      	ldr	r3, [pc, #160]	; (80007fc <SystemClock_Config+0xcc>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a27      	ldr	r2, [pc, #156]	; (80007fc <SystemClock_Config+0xcc>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b25      	ldr	r3, [pc, #148]	; (80007fc <SystemClock_Config+0xcc>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <SystemClock_Config+0xd0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a21      	ldr	r2, [pc, #132]	; (8000800 <SystemClock_Config+0xd0>)
 800077a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <SystemClock_Config+0xd0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078c:	2301      	movs	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007a4:	23a8      	movs	r3, #168	; 0xa8
 80007a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007ac:	2307      	movs	r3, #7
 80007ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	f107 0320 	add.w	r3, r7, #32
 80007b4:	4618      	mov	r0, r3
 80007b6:	f009 fa5d 	bl	8009c74 <HAL_RCC_OscConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c0:	f000 fa4a 	bl	8000c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	230f      	movs	r3, #15
 80007c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c8:	2302      	movs	r3, #2
 80007ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2105      	movs	r1, #5
 80007e2:	4618      	mov	r0, r3
 80007e4:	f009 fcb6 	bl	800a154 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ee:	f000 fa33 	bl	8000c58 <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3750      	adds	r7, #80	; 0x50
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800
 8000800:	40007000 	.word	0x40007000

08000804 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_CAN1_Init+0x64>)
 800080a:	4a18      	ldr	r2, [pc, #96]	; (800086c <MX_CAN1_Init+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_CAN1_Init+0x64>)
 8000810:	2203      	movs	r2, #3
 8000812:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_CAN1_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_CAN1_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_CAN1_Init+0x64>)
 8000822:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000826:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_CAN1_Init+0x64>)
 800082a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800082e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <MX_CAN1_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_CAN1_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_CAN1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_CAN1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_CAN1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_CAN1_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_CAN1_Init+0x64>)
 8000856:	f004 fc25 	bl	80050a4 <HAL_CAN_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000860:	f000 f9fa 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000516c 	.word	0x2000516c
 800086c:	40006400 	.word	0x40006400

08000870 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2C1_Init+0x50>)
 8000876:	4a13      	ldr	r2, [pc, #76]	; (80008c4 <MX_I2C1_Init+0x54>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_I2C1_Init+0x50>)
 800087c:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <MX_I2C1_Init+0x58>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_I2C1_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_I2C1_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_I2C1_Init+0x50>)
 800088e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000892:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_I2C1_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_I2C1_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_I2C1_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_I2C1_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_I2C1_Init+0x50>)
 80008ae:	f005 fd1d 	bl	80062ec <HAL_I2C_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008b8:	f000 f9ce 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20004c40 	.word	0x20004c40
 80008c4:	40005400 	.word	0x40005400
 80008c8:	00061a80 	.word	0x00061a80

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_GPIO_Init+0x68>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a16      	ldr	r2, [pc, #88]	; (8000934 <MX_GPIO_Init+0x68>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_GPIO_Init+0x68>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_GPIO_Init+0x68>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <MX_GPIO_Init+0x68>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <MX_GPIO_Init+0x68>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_GPIO_Init+0x68>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <MX_GPIO_Init+0x68>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_GPIO_Init+0x68>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

}
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &wheel_RxHeader, canRXData);
 8000940:	4b68      	ldr	r3, [pc, #416]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000942:	4a69      	ldr	r2, [pc, #420]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000944:	2100      	movs	r1, #0
 8000946:	4869      	ldr	r0, [pc, #420]	; (8000aec <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000948:	f004 fea7 	bl	800569a <HAL_CAN_GetRxMessage>

	if (wheel_RxHeader.StdId == 0xA) {
 800094c:	4b66      	ldr	r3, [pc, #408]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b0a      	cmp	r3, #10
 8000952:	d108      	bne.n	8000966 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
		speedRXDataLeftFrontWheel = canRXData[0];
 8000954:	4b63      	ldr	r3, [pc, #396]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000956:	781a      	ldrb	r2, [r3, #0]
 8000958:	4b65      	ldr	r3, [pc, #404]	; (8000af0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 800095a:	701a      	strb	r2, [r3, #0]
		sideRXDataLeftFrontWheel = canRXData[1];
 800095c:	4b61      	ldr	r3, [pc, #388]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800095e:	785a      	ldrb	r2, [r3, #1]
 8000960:	4b64      	ldr	r3, [pc, #400]	; (8000af4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8000962:	701a      	strb	r2, [r3, #0]
 8000964:	e025      	b.n	80009b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
	}
	else if (wheel_RxHeader.StdId == 0x3A) {
 8000966:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b3a      	cmp	r3, #58	; 0x3a
 800096c:	d108      	bne.n	8000980 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
		speedRXDataRightFrontWheel = canRXData[0];
 800096e:	4b5d      	ldr	r3, [pc, #372]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000970:	781a      	ldrb	r2, [r3, #0]
 8000972:	4b61      	ldr	r3, [pc, #388]	; (8000af8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8000974:	701a      	strb	r2, [r3, #0]
		sideRXDataRightFrontWheel = canRXData[1];
 8000976:	4b5b      	ldr	r3, [pc, #364]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000978:	785a      	ldrb	r2, [r3, #1]
 800097a:	4b60      	ldr	r3, [pc, #384]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	e018      	b.n	80009b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
	}
	else if (wheel_RxHeader.StdId == 0x2A) {
 8000980:	4b59      	ldr	r3, [pc, #356]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b2a      	cmp	r3, #42	; 0x2a
 8000986:	d108      	bne.n	800099a <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
		speedRXDataRightBackWheel = canRXData[0];
 8000988:	4b56      	ldr	r3, [pc, #344]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800098a:	781a      	ldrb	r2, [r3, #0]
 800098c:	4b5c      	ldr	r3, [pc, #368]	; (8000b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800098e:	701a      	strb	r2, [r3, #0]
		sideRXDataRightBackWheel = canRXData[1];
 8000990:	4b54      	ldr	r3, [pc, #336]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000992:	785a      	ldrb	r2, [r3, #1]
 8000994:	4b5b      	ldr	r3, [pc, #364]	; (8000b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	e00b      	b.n	80009b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>

	}
	else if (wheel_RxHeader.StdId == 0x1A) {
 800099a:	4b53      	ldr	r3, [pc, #332]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b1a      	cmp	r3, #26
 80009a0:	d107      	bne.n	80009b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
		speedRXDataLeftBackWheel = canRXData[0];
 80009a2:	4b50      	ldr	r3, [pc, #320]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80009a4:	781a      	ldrb	r2, [r3, #0]
 80009a6:	4b58      	ldr	r3, [pc, #352]	; (8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80009a8:	701a      	strb	r2, [r3, #0]
		sideRXDataLeftBackWheel = canRXData[1];
 80009aa:	4b4e      	ldr	r3, [pc, #312]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80009ac:	785a      	ldrb	r2, [r3, #1]
 80009ae:	4b57      	ldr	r3, [pc, #348]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 80009b0:	701a      	strb	r2, [r3, #0]
	}
	if (wheel_RxHeader.StdId == 0x1D) {
 80009b2:	4b4d      	ldr	r3, [pc, #308]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b1d      	cmp	r3, #29
 80009b8:	d104      	bne.n	80009c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
		laser_sensor_data[0] = canRXData[0];
 80009ba:	4b4a      	ldr	r3, [pc, #296]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	4b54      	ldr	r3, [pc, #336]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 80009c0:	701a      	strb	r2, [r3, #0]
 80009c2:	e087      	b.n	8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
	}
	else if (wheel_RxHeader.StdId == 0x2D) {
 80009c4:	4b48      	ldr	r3, [pc, #288]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b2d      	cmp	r3, #45	; 0x2d
 80009ca:	d104      	bne.n	80009d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
		laser_sensor_data[1] = canRXData[0];
 80009cc:	4b45      	ldr	r3, [pc, #276]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80009ce:	781a      	ldrb	r2, [r3, #0]
 80009d0:	4b4f      	ldr	r3, [pc, #316]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 80009d2:	705a      	strb	r2, [r3, #1]
 80009d4:	e07e      	b.n	8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
	}
	else if (wheel_RxHeader.StdId == 0x3D) {
 80009d6:	4b44      	ldr	r3, [pc, #272]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b3d      	cmp	r3, #61	; 0x3d
 80009dc:	d104      	bne.n	80009e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
		laser_sensor_data[2] = canRXData[0];
 80009de:	4b41      	ldr	r3, [pc, #260]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	4b4b      	ldr	r3, [pc, #300]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 80009e4:	709a      	strb	r2, [r3, #2]
 80009e6:	e075      	b.n	8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
	}
	else if (wheel_RxHeader.StdId == 0x4D) {
 80009e8:	4b3f      	ldr	r3, [pc, #252]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b4d      	cmp	r3, #77	; 0x4d
 80009ee:	d104      	bne.n	80009fa <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
		laser_sensor_data[3] = canRXData[0];
 80009f0:	4b3c      	ldr	r3, [pc, #240]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80009f2:	781a      	ldrb	r2, [r3, #0]
 80009f4:	4b46      	ldr	r3, [pc, #280]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 80009f6:	70da      	strb	r2, [r3, #3]
 80009f8:	e06c      	b.n	8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
	}
	else if (wheel_RxHeader.StdId == 0x5D) {
 80009fa:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b5d      	cmp	r3, #93	; 0x5d
 8000a00:	d104      	bne.n	8000a0c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>
		laser_sensor_data[4] = canRXData[0];
 8000a02:	4b38      	ldr	r3, [pc, #224]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	4b42      	ldr	r3, [pc, #264]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000a08:	711a      	strb	r2, [r3, #4]
 8000a0a:	e063      	b.n	8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
	}
	else if (wheel_RxHeader.StdId == 0x6D) {
 8000a0c:	4b36      	ldr	r3, [pc, #216]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b6d      	cmp	r3, #109	; 0x6d
 8000a12:	d104      	bne.n	8000a1e <HAL_CAN_RxFifo0MsgPendingCallback+0xe6>
		laser_sensor_data[5] = canRXData[0];
 8000a14:	4b33      	ldr	r3, [pc, #204]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	4b3d      	ldr	r3, [pc, #244]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000a1a:	715a      	strb	r2, [r3, #5]
 8000a1c:	e05a      	b.n	8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
	}
	else if (wheel_RxHeader.StdId == 0x7D) {
 8000a1e:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b7d      	cmp	r3, #125	; 0x7d
 8000a24:	d104      	bne.n	8000a30 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>
		laser_sensor_data[6] = canRXData[0];
 8000a26:	4b2f      	ldr	r3, [pc, #188]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	4b39      	ldr	r3, [pc, #228]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000a2c:	719a      	strb	r2, [r3, #6]
 8000a2e:	e051      	b.n	8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
	}
	else if (wheel_RxHeader.StdId == 0x8D) {
 8000a30:	4b2d      	ldr	r3, [pc, #180]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b8d      	cmp	r3, #141	; 0x8d
 8000a36:	d104      	bne.n	8000a42 <HAL_CAN_RxFifo0MsgPendingCallback+0x10a>
		laser_sensor_data[7] = canRXData[0];
 8000a38:	4b2a      	ldr	r3, [pc, #168]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000a3a:	781a      	ldrb	r2, [r3, #0]
 8000a3c:	4b34      	ldr	r3, [pc, #208]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000a3e:	71da      	strb	r2, [r3, #7]
 8000a40:	e048      	b.n	8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
	}
	else if (wheel_RxHeader.StdId == 0x9D) {
 8000a42:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b9d      	cmp	r3, #157	; 0x9d
 8000a48:	d104      	bne.n	8000a54 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
		laser_sensor_data[8] = canRXData[0];
 8000a4a:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000a4c:	781a      	ldrb	r2, [r3, #0]
 8000a4e:	4b30      	ldr	r3, [pc, #192]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000a50:	721a      	strb	r2, [r3, #8]
 8000a52:	e03f      	b.n	8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
	}
	else if (wheel_RxHeader.StdId == 0xAD) {
 8000a54:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2bad      	cmp	r3, #173	; 0xad
 8000a5a:	d104      	bne.n	8000a66 <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
		laser_sensor_data[9] = canRXData[0];
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000a62:	725a      	strb	r2, [r3, #9]
 8000a64:	e036      	b.n	8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
	}
	else if (wheel_RxHeader.StdId == 0xBD) {
 8000a66:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2bbd      	cmp	r3, #189	; 0xbd
 8000a6c:	d104      	bne.n	8000a78 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>
		laser_sensor_data[10] = canRXData[0];
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000a70:	781a      	ldrb	r2, [r3, #0]
 8000a72:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000a74:	729a      	strb	r2, [r3, #10]
 8000a76:	e02d      	b.n	8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
	}
	else if (wheel_RxHeader.StdId == 0xCD) {
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2bcd      	cmp	r3, #205	; 0xcd
 8000a7e:	d104      	bne.n	8000a8a <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
		laser_sensor_data[11] = canRXData[0];
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000a86:	72da      	strb	r2, [r3, #11]
 8000a88:	e024      	b.n	8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
	}
	else if (wheel_RxHeader.StdId == 0xDD) {
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2bdd      	cmp	r3, #221	; 0xdd
 8000a90:	d104      	bne.n	8000a9c <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
		laser_sensor_data[12] = canRXData[0];
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000a98:	731a      	strb	r2, [r3, #12]
 8000a9a:	e01b      	b.n	8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
	}
	else if (wheel_RxHeader.StdId == 0xED) {
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2bed      	cmp	r3, #237	; 0xed
 8000aa2:	d104      	bne.n	8000aae <HAL_CAN_RxFifo0MsgPendingCallback+0x176>
		laser_sensor_data[13] = canRXData[0];
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000aa6:	781a      	ldrb	r2, [r3, #0]
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000aaa:	735a      	strb	r2, [r3, #13]
 8000aac:	e012      	b.n	8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
	}
	else if (wheel_RxHeader.StdId == 0xFD) {
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2bfd      	cmp	r3, #253	; 0xfd
 8000ab4:	d104      	bne.n	8000ac0 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>
		laser_sensor_data[14] = canRXData[0];
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000ab8:	781a      	ldrb	r2, [r3, #0]
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000abc:	739a      	strb	r2, [r3, #14]
 8000abe:	e009      	b.n	8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
	}
	else if (wheel_RxHeader.StdId == 0x10D) {
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f240 120d 	movw	r2, #269	; 0x10d
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d103      	bne.n	8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
		laser_sensor_data[15] = canRXData[0];
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000ace:	781a      	ldrb	r2, [r3, #0]
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000ad2:	73da      	strb	r2, [r3, #15]
	}
	wheel_RxHeader.StdId = 0x0000;
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]

}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20005138 	.word	0x20005138
 8000ae8:	20004ca8 	.word	0x20004ca8
 8000aec:	2000516c 	.word	0x2000516c
 8000af0:	20004cc4 	.word	0x20004cc4
 8000af4:	20005160 	.word	0x20005160
 8000af8:	20005168 	.word	0x20005168
 8000afc:	20005144 	.word	0x20005144
 8000b00:	20004d1c 	.word	0x20004d1c
 8000b04:	20004c30 	.word	0x20004c30
 8000b08:	20004cd0 	.word	0x20004cd0
 8000b0c:	20004cf8 	.word	0x20004cf8
 8000b10:	20000470 	.word	0x20000470

08000b14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000b1c:	f00e f8b8 	bl	800ec90 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  gyro_handler();
 8000b20:	f003 f96e 	bl	8003e00 <gyro_handler>
	  osDelay(4);
 8000b24:	2004      	movs	r0, #4
 8000b26:	f00c feff 	bl	800d928 <osDelay>
	  accel_handler();
 8000b2a:	f003 f997 	bl	8003e5c <accel_handler>
	  osDelay(4);
 8000b2e:	2004      	movs	r0, #4
 8000b30:	f00c fefa 	bl	800d928 <osDelay>
	  gyro_handler();
 8000b34:	e7f4      	b.n	8000b20 <StartDefaultTask+0xc>
	...

08000b38 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  MPU9250_getAllData(allData);
 8000b40:	4805      	ldr	r0, [pc, #20]	; (8000b58 <StartTask02+0x20>)
 8000b42:	f000 fb63 	bl	800120c <MPU9250_getAllData>
	  osDelay(10);
 8000b46:	200a      	movs	r0, #10
 8000b48:	f00c feee 	bl	800d928 <osDelay>
	  imucount++;
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <StartTask02+0x24>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	4a02      	ldr	r2, [pc, #8]	; (8000b5c <StartTask02+0x24>)
 8000b54:	6013      	str	r3, [r2, #0]
	  MPU9250_getAllData(allData);
 8000b56:	e7f3      	b.n	8000b40 <StartTask02+0x8>
 8000b58:	20005154 	.word	0x20005154
 8000b5c:	20005198 	.word	0x20005198

08000b60 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  l_front_wheel_data[0] = sideDataLeftBackWheel;
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <StartTask03+0x68>)
 8000b6a:	f993 3000 	ldrsb.w	r3, [r3]
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <StartTask03+0x6c>)
 8000b72:	701a      	strb	r2, [r3, #0]
	  l_front_wheel_data[1] = speedDataLeftBackWheel;
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <StartTask03+0x70>)
 8000b76:	f993 3000 	ldrsb.w	r3, [r3]
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <StartTask03+0x6c>)
 8000b7e:	705a      	strb	r2, [r3, #1]
	  l_front_wheel_data[2] = sideDataRightBackWheel;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <StartTask03+0x74>)
 8000b82:	f993 3000 	ldrsb.w	r3, [r3]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <StartTask03+0x6c>)
 8000b8a:	709a      	strb	r2, [r3, #2]
	  l_front_wheel_data[3] = speedDataRightBackWheel;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <StartTask03+0x78>)
 8000b8e:	f993 3000 	ldrsb.w	r3, [r3]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <StartTask03+0x6c>)
 8000b96:	70da      	strb	r2, [r3, #3]
//	  l_back_wheel_data[1] = speedDataLeftBackWheel;
//	  r_back_wheel_data[0] = sideDataRightBackWheel;
//	  r_back_wheel_data[1] = speedDataRightBackWheel;
//	  r_front_wheel_data[0] = sideDataRightFrontWheel;
//	  r_front_wheel_data[1] = speedDataRightFrontWheel;
	  if (HAL_CAN_AddTxMessage(&hcan1, &leftFront_wheelHeader, l_front_wheel_data, &TxMailbox)==HAL_OK) {
 8000b98:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <StartTask03+0x7c>)
 8000b9a:	4a0c      	ldr	r2, [pc, #48]	; (8000bcc <StartTask03+0x6c>)
 8000b9c:	4910      	ldr	r1, [pc, #64]	; (8000be0 <StartTask03+0x80>)
 8000b9e:	4811      	ldr	r0, [pc, #68]	; (8000be4 <StartTask03+0x84>)
 8000ba0:	f004 fca0 	bl	80054e4 <HAL_CAN_AddTxMessage>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d104      	bne.n	8000bb4 <StartTask03+0x54>
		  can2++;
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <StartTask03+0x88>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <StartTask03+0x88>)
 8000bb2:	6013      	str	r3, [r2, #0]
//	  l_front_wheel_data[2] = 0;
//	  l_front_wheel_data[3] = 40;
	  //if (HAL_CAN_AddTxMessage(&hcan1, &leftFront_wheelHeader, l_front_wheel_data, &TxMailbox)==HAL_OK) {
		//  can2++;
	  //}
	  osDelay(20);
 8000bb4:	2014      	movs	r0, #20
 8000bb6:	f00c feb7 	bl	800d928 <osDelay>
//	  osDelay(1);
//	  HAL_CAN_AddTxMessage(&hcan1, &leftBack_wheelHeader, l_back_wheel_data, &TxMailbox);
//      osDelay(1);
//	  HAL_CAN_AddTxMessage(&hcan1, &rightFront_wheelHeader, r_front_wheel_data, &TxMailbox);
//	  osDelay(1);
	  rpm_left_front_handler();
 8000bba:	f003 f8e7 	bl	8003d8c <rpm_left_front_handler>
	  osDelay(1);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f00c feb2 	bl	800d928 <osDelay>
	  l_front_wheel_data[0] = sideDataLeftBackWheel;
 8000bc4:	e7d0      	b.n	8000b68 <StartTask03+0x8>
 8000bc6:	bf00      	nop
 8000bc8:	2000046c 	.word	0x2000046c
 8000bcc:	20000480 	.word	0x20000480
 8000bd0:	20000468 	.word	0x20000468
 8000bd4:	2000046b 	.word	0x2000046b
 8000bd8:	20000467 	.word	0x20000467
 8000bdc:	20005148 	.word	0x20005148
 8000be0:	20004cfc 	.word	0x20004cfc
 8000be4:	2000516c 	.word	0x2000516c
 8000be8:	20004c94 	.word	0x20004c94

08000bec <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	  laser_sensors_data_handler();
 8000bf4:	f003 f8a6 	bl	8003d44 <laser_sensors_data_handler>
	  osDelay(50);
 8000bf8:	2032      	movs	r0, #50	; 0x32
 8000bfa:	f00c fe95 	bl	800d928 <osDelay>
	  laser_sensors_data_handler();
 8000bfe:	e7f9      	b.n	8000bf4 <StartTask04+0x8>

08000c00 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
	  spinOnce();
 8000c08:	f003 f956 	bl	8003eb8 <spinOnce>
	  osDelay(10);
 8000c0c:	200a      	movs	r0, #10
 8000c0e:	f00c fe8b 	bl	800d928 <osDelay>
	  spinOnce();
 8000c12:	e7f9      	b.n	8000c08 <StartTask05+0x8>

08000c14 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void const * argument)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 8000c1c:	200a      	movs	r0, #10
 8000c1e:	f00c fe83 	bl	800d928 <osDelay>
 8000c22:	e7fb      	b.n	8000c1c <StartTask06+0x8>

08000c24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d107      	bne.n	8000c46 <HAL_TIM_PeriodElapsedCallback+0x22>
    HAL_IncTick();
 8000c36:	f004 f9f3 	bl	8005020 <HAL_IncTick>
    ++tick;
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000c44:	801a      	strh	r2, [r3, #0]

  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40000400 	.word	0x40000400
 8000c54:	20004d14 	.word	0x20004d14

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <error>:
void delay(uint32_t delayTime){
	uint32_t startTime =  sysTick_Time;
	while ( (sysTick_Time - startTime) < delayTime );
}

void error(void) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000c6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c70:	481d      	ldr	r0, [pc, #116]	; (8000ce8 <error+0x80>)
 8000c72:	f005 fb1f 	bl	80062b4 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000c76:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c7a:	f004 f9f1 	bl	8005060 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000c7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c82:	4819      	ldr	r0, [pc, #100]	; (8000ce8 <error+0x80>)
 8000c84:	f005 fb16 	bl	80062b4 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000c88:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c8c:	f004 f9e8 	bl	8005060 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000c90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c94:	4814      	ldr	r0, [pc, #80]	; (8000ce8 <error+0x80>)
 8000c96:	f005 fb0d 	bl	80062b4 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000c9a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c9e:	f004 f9df 	bl	8005060 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000ca2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca6:	4810      	ldr	r0, [pc, #64]	; (8000ce8 <error+0x80>)
 8000ca8:	f005 fb04 	bl	80062b4 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000cac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cb0:	f004 f9d6 	bl	8005060 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000cb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb8:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <error+0x80>)
 8000cba:	f005 fafb 	bl	80062b4 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000cbe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cc2:	f004 f9cd 	bl	8005060 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000cc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cca:	4807      	ldr	r0, [pc, #28]	; (8000ce8 <error+0x80>)
 8000ccc:	f005 faf2 	bl	80062b4 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000cd0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cd4:	f004 f9c4 	bl	8005060 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000cd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <error+0x80>)
 8000cde:	f005 fae9 	bl	80062b4 <HAL_GPIO_TogglePin>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000

08000cec <sensor_io_read>:

uint8_t sensor_io_read(uint16_t DeviceAddr, uint8_t RegisterAddr) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	460a      	mov	r2, r1
 8000cf6:	80fb      	strh	r3, [r7, #6]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	717b      	strb	r3, [r7, #5]
	return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8000cfc:	797a      	ldrb	r2, [r7, #5]
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f806 	bl	8000d14 <I2Cx_ReadData>
 8000d08:	4603      	mov	r3, r0
	return HAL_OK;
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <I2Cx_ReadData>:
uint8_t sensor_io_write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value) {
	I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
	return HAL_OK;
}

uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af04      	add	r7, sp, #16
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	460a      	mov	r2, r1
 8000d1e:	80fb      	strh	r3, [r7, #6]
 8000d20:	4613      	mov	r3, r2
 8000d22:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]
	value = 0;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <I2Cx_ReadData+0x54>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	b299      	uxth	r1, r3
 8000d34:	797b      	ldrb	r3, [r7, #5]
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d3c:	9302      	str	r3, [sp, #8]
 8000d3e:	2301      	movs	r3, #1
 8000d40:	9301      	str	r3, [sp, #4]
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <I2Cx_ReadData+0x54>)
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2301      	movs	r3, #1
 8000d48:	4808      	ldr	r0, [pc, #32]	; (8000d6c <I2Cx_ReadData+0x58>)
 8000d4a:	f005 fd05 	bl	8006758 <HAL_I2C_Mem_Read>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <I2Cx_ReadData+0x48>
	{
	    error();
 8000d58:	f7ff ff86 	bl	8000c68 <error>
	}
	return value;
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <I2Cx_ReadData+0x54>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200004c0 	.word	0x200004c0
 8000d6c:	20004c40 	.word	0x20004c40

08000d70 <read_id>:
	if ((read_id()==0xFF)||(read_id()==0x70)||(read_id()==0x48)) {

	}
}

uint8_t read_id(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	ctrl = 0x00;
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <read_id+0x24>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
	ctrl = sensor_io_read(0x68, 0x75);
 8000d7a:	2175      	movs	r1, #117	; 0x75
 8000d7c:	2068      	movs	r0, #104	; 0x68
 8000d7e:	f7ff ffb5 	bl	8000cec <sensor_io_read>
 8000d82:	4603      	mov	r3, r0
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <read_id+0x24>)
 8000d88:	701a      	strb	r2, [r3, #0]
	return ctrl;
 8000d8a:	4b02      	ldr	r3, [pc, #8]	; (8000d94 <read_id+0x24>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000464 	.word	0x20000464

08000d98 <MPU9250_init>:

void MPU9250_init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	//power up gyro
	MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	216b      	movs	r1, #107	; 0x6b
 8000da0:	2068      	movs	r0, #104	; 0x68
 8000da2:	f000 fbb3 	bl	800150c <MPU9250_writeReg>
	//delay(100);
	MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8000da6:	2201      	movs	r2, #1
 8000da8:	216b      	movs	r1, #107	; 0x6b
 8000daa:	2068      	movs	r0, #104	; 0x68
 8000dac:	f000 fbae 	bl	800150c <MPU9250_writeReg>

	MPU9250_writeReg(MPU9250_ADDRESS, CONFIG, 0x03);
 8000db0:	2203      	movs	r2, #3
 8000db2:	211a      	movs	r1, #26
 8000db4:	2068      	movs	r0, #104	; 0x68
 8000db6:	f000 fba9 	bl	800150c <MPU9250_writeReg>

	MPU9250_writeReg(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);
 8000dba:	2204      	movs	r2, #4
 8000dbc:	2119      	movs	r1, #25
 8000dbe:	2068      	movs	r0, #104	; 0x68
 8000dc0:	f000 fba4 	bl	800150c <MPU9250_writeReg>
	//MPU6050_SMPLRT_DIV
	//gyro config 500

	MPU9250_writeReg(MPU9250_ADDRESS, GYRO_CONFIG, 0x08);
 8000dc4:	2208      	movs	r2, #8
 8000dc6:	211b      	movs	r1, #27
 8000dc8:	2068      	movs	r0, #104	; 0x68
 8000dca:	f000 fb9f 	bl	800150c <MPU9250_writeReg>
	//accel config 8g
	MPU9250_writeReg(MPU9250_ADDRESS, ACCEL_CONFIG, 0x10);
 8000dce:	2210      	movs	r2, #16
 8000dd0:	211c      	movs	r1, #28
 8000dd2:	2068      	movs	r0, #104	; 0x68
 8000dd4:	f000 fb9a 	bl	800150c <MPU9250_writeReg>

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <MPU9250_calibrate>:

//void calibrateMPU9250(float * dest1, float * dest2)
void MPU9250_calibrate()
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
    uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
    uint16_t ii, packet_count, fifo_count;
    //int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};

    // reset device
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8000de2:	2280      	movs	r2, #128	; 0x80
 8000de4:	216b      	movs	r1, #107	; 0x6b
 8000de6:	2068      	movs	r0, #104	; 0x68
 8000de8:	f000 fb90 	bl	800150c <MPU9250_writeReg>
    HAL_Delay(100);
 8000dec:	2064      	movs	r0, #100	; 0x64
 8000dee:	f004 f937 	bl	8005060 <HAL_Delay>

    // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
    // else use the internal oscillator, bits 2:0 = 001
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8000df2:	2201      	movs	r2, #1
 8000df4:	216b      	movs	r1, #107	; 0x6b
 8000df6:	2068      	movs	r0, #104	; 0x68
 8000df8:	f000 fb88 	bl	800150c <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	216c      	movs	r1, #108	; 0x6c
 8000e00:	2068      	movs	r0, #104	; 0x68
 8000e02:	f000 fb83 	bl	800150c <MPU9250_writeReg>
    HAL_Delay(200);
 8000e06:	20c8      	movs	r0, #200	; 0xc8
 8000e08:	f004 f92a 	bl	8005060 <HAL_Delay>

    // Configure device for bias calculation
    MPU9250_writeReg(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2138      	movs	r1, #56	; 0x38
 8000e10:	2068      	movs	r0, #104	; 0x68
 8000e12:	f000 fb7b 	bl	800150c <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 8000e16:	2200      	movs	r2, #0
 8000e18:	2123      	movs	r1, #35	; 0x23
 8000e1a:	2068      	movs	r0, #104	; 0x68
 8000e1c:	f000 fb76 	bl	800150c <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8000e20:	2200      	movs	r2, #0
 8000e22:	216b      	movs	r1, #107	; 0x6b
 8000e24:	2068      	movs	r0, #104	; 0x68
 8000e26:	f000 fb71 	bl	800150c <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2124      	movs	r1, #36	; 0x24
 8000e2e:	2068      	movs	r0, #104	; 0x68
 8000e30:	f000 fb6c 	bl	800150c <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8000e34:	2200      	movs	r2, #0
 8000e36:	216a      	movs	r1, #106	; 0x6a
 8000e38:	2068      	movs	r0, #104	; 0x68
 8000e3a:	f000 fb67 	bl	800150c <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8000e3e:	220c      	movs	r2, #12
 8000e40:	216a      	movs	r1, #106	; 0x6a
 8000e42:	2068      	movs	r0, #104	; 0x68
 8000e44:	f000 fb62 	bl	800150c <MPU9250_writeReg>
    HAL_Delay(15);
 8000e48:	200f      	movs	r0, #15
 8000e4a:	f004 f909 	bl	8005060 <HAL_Delay>

    // Configure MPU6050 gyro and accelerometer for bias calculation
    MPU9250_writeReg(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8000e4e:	2201      	movs	r2, #1
 8000e50:	211a      	movs	r1, #26
 8000e52:	2068      	movs	r0, #104	; 0x68
 8000e54:	f000 fb5a 	bl	800150c <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2119      	movs	r1, #25
 8000e5c:	2068      	movs	r0, #104	; 0x68
 8000e5e:	f000 fb55 	bl	800150c <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8000e62:	2200      	movs	r2, #0
 8000e64:	211b      	movs	r1, #27
 8000e66:	2068      	movs	r0, #104	; 0x68
 8000e68:	f000 fb50 	bl	800150c <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	211c      	movs	r1, #28
 8000e70:	2068      	movs	r0, #104	; 0x68
 8000e72:	f000 fb4b 	bl	800150c <MPU9250_writeReg>

    //uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
    uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8000e76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e7a:	84bb      	strh	r3, [r7, #36]	; 0x24

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
    MPU9250_writeReg(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 8000e7c:	2240      	movs	r2, #64	; 0x40
 8000e7e:	216a      	movs	r1, #106	; 0x6a
 8000e80:	2068      	movs	r0, #104	; 0x68
 8000e82:	f000 fb43 	bl	800150c <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8000e86:	2278      	movs	r2, #120	; 0x78
 8000e88:	2123      	movs	r1, #35	; 0x23
 8000e8a:	2068      	movs	r0, #104	; 0x68
 8000e8c:	f000 fb3e 	bl	800150c <MPU9250_writeReg>
    HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8000e90:	2028      	movs	r0, #40	; 0x28
 8000e92:	f004 f8e5 	bl	8005060 <HAL_Delay>

    // At end of sample accumulation, turn off FIFO sensor read
    MPU9250_writeReg(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8000e96:	2200      	movs	r2, #0
 8000e98:	2123      	movs	r1, #35	; 0x23
 8000e9a:	2068      	movs	r0, #104	; 0x68
 8000e9c:	f000 fb36 	bl	800150c <MPU9250_writeReg>
    //readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
    fifo_count = MPU9250_readReg16Bit(MPU9250_ADDRESS, FIFO_COUNTH);
 8000ea0:	2172      	movs	r1, #114	; 0x72
 8000ea2:	2068      	movs	r0, #104	; 0x68
 8000ea4:	f000 fb72 	bl	800158c <MPU9250_readReg16Bit>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	847b      	strh	r3, [r7, #34]	; 0x22
    packet_count = fifo_count / 12;// How many sets of full gyro and accelerometer data for averaging
 8000eac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000eae:	4a58      	ldr	r2, [pc, #352]	; (8001010 <MPU9250_calibrate+0x234>)
 8000eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb4:	08db      	lsrs	r3, r3, #3
 8000eb6:	843b      	strh	r3, [r7, #32]

    for (ii = 0; ii < packet_count; ii++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000ebc:	e06f      	b.n	8000f9e <MPU9250_calibrate+0x1c2>
    {
        int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	813b      	strh	r3, [r7, #8]
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	817b      	strh	r3, [r7, #10]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	81bb      	strh	r3, [r7, #12]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	803b      	strh	r3, [r7, #0]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	807b      	strh	r3, [r7, #2]
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	80bb      	strh	r3, [r7, #4]
        MPU9250_readMulti(MPU9250_ADDRESS, FIFO_R_W, data, 12); // read data for averaging
 8000ed6:	f107 0214 	add.w	r2, r7, #20
 8000eda:	230c      	movs	r3, #12
 8000edc:	2174      	movs	r1, #116	; 0x74
 8000ede:	2068      	movs	r0, #104	; 0x68
 8000ee0:	f000 fb74 	bl	80015cc <MPU9250_readMulti>
        accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8000ee4:	7d3b      	ldrb	r3, [r7, #20]
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	b21a      	sxth	r2, r3
 8000eea:	7d7b      	ldrb	r3, [r7, #21]
 8000eec:	b21b      	sxth	r3, r3
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	b21b      	sxth	r3, r3
 8000ef2:	813b      	strh	r3, [r7, #8]
        accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8000ef4:	7dbb      	ldrb	r3, [r7, #22]
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	b21a      	sxth	r2, r3
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	4313      	orrs	r3, r2
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	817b      	strh	r3, [r7, #10]
        accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8000f04:	7e3b      	ldrb	r3, [r7, #24]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	7e7b      	ldrb	r3, [r7, #25]
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	81bb      	strh	r3, [r7, #12]
        gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8000f14:	7ebb      	ldrb	r3, [r7, #26]
 8000f16:	021b      	lsls	r3, r3, #8
 8000f18:	b21a      	sxth	r2, r3
 8000f1a:	7efb      	ldrb	r3, [r7, #27]
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	803b      	strh	r3, [r7, #0]
        gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8000f24:	7f3b      	ldrb	r3, [r7, #28]
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	7f7b      	ldrb	r3, [r7, #29]
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	b21b      	sxth	r3, r3
 8000f32:	807b      	strh	r3, [r7, #2]
        gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8000f34:	7fbb      	ldrb	r3, [r7, #30]
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	7ffb      	ldrb	r3, [r7, #31]
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	80bb      	strh	r3, [r7, #4]

        accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8000f44:	4b33      	ldr	r3, [pc, #204]	; (8001014 <MPU9250_calibrate+0x238>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a31      	ldr	r2, [pc, #196]	; (8001014 <MPU9250_calibrate+0x238>)
 8000f50:	6013      	str	r3, [r2, #0]
        accel_bias[1] += (int32_t) accel_temp[1];
 8000f52:	4b30      	ldr	r3, [pc, #192]	; (8001014 <MPU9250_calibrate+0x238>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a2d      	ldr	r2, [pc, #180]	; (8001014 <MPU9250_calibrate+0x238>)
 8000f5e:	6053      	str	r3, [r2, #4]
        accel_bias[2] += (int32_t) accel_temp[2];
 8000f60:	4b2c      	ldr	r3, [pc, #176]	; (8001014 <MPU9250_calibrate+0x238>)
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000f68:	4413      	add	r3, r2
 8000f6a:	4a2a      	ldr	r2, [pc, #168]	; (8001014 <MPU9250_calibrate+0x238>)
 8000f6c:	6093      	str	r3, [r2, #8]
        gyro_bias[0]  += (int32_t) gyro_temp[0];
 8000f6e:	4b2a      	ldr	r3, [pc, #168]	; (8001018 <MPU9250_calibrate+0x23c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a27      	ldr	r2, [pc, #156]	; (8001018 <MPU9250_calibrate+0x23c>)
 8000f7a:	6013      	str	r3, [r2, #0]
        gyro_bias[1]  += (int32_t) gyro_temp[1];
 8000f7c:	4b26      	ldr	r3, [pc, #152]	; (8001018 <MPU9250_calibrate+0x23c>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a24      	ldr	r2, [pc, #144]	; (8001018 <MPU9250_calibrate+0x23c>)
 8000f88:	6053      	str	r3, [r2, #4]
        gyro_bias[2]  += (int32_t) gyro_temp[2];
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <MPU9250_calibrate+0x23c>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a20      	ldr	r2, [pc, #128]	; (8001018 <MPU9250_calibrate+0x23c>)
 8000f96:	6093      	str	r3, [r2, #8]
    for (ii = 0; ii < packet_count; ii++)
 8000f98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f9e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000fa0:	8c3b      	ldrh	r3, [r7, #32]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d38b      	bcc.n	8000ebe <MPU9250_calibrate+0xe2>
    }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MPU9250_calibrate+0x238>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	8c3b      	ldrh	r3, [r7, #32]
 8000fac:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fb0:	4a18      	ldr	r2, [pc, #96]	; (8001014 <MPU9250_calibrate+0x238>)
 8000fb2:	6013      	str	r3, [r2, #0]
    accel_bias[1] /= (int32_t) packet_count;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <MPU9250_calibrate+0x238>)
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	8c3b      	ldrh	r3, [r7, #32]
 8000fba:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fbe:	4a15      	ldr	r2, [pc, #84]	; (8001014 <MPU9250_calibrate+0x238>)
 8000fc0:	6053      	str	r3, [r2, #4]
    accel_bias[2] /= (int32_t) packet_count;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <MPU9250_calibrate+0x238>)
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	8c3b      	ldrh	r3, [r7, #32]
 8000fc8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fcc:	4a11      	ldr	r2, [pc, #68]	; (8001014 <MPU9250_calibrate+0x238>)
 8000fce:	6093      	str	r3, [r2, #8]
    gyro_bias[0]  /= (int32_t) packet_count;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MPU9250_calibrate+0x23c>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	8c3b      	ldrh	r3, [r7, #32]
 8000fd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fda:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <MPU9250_calibrate+0x23c>)
 8000fdc:	6013      	str	r3, [r2, #0]
    gyro_bias[1]  /= (int32_t) packet_count;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MPU9250_calibrate+0x23c>)
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	8c3b      	ldrh	r3, [r7, #32]
 8000fe4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fe8:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <MPU9250_calibrate+0x23c>)
 8000fea:	6053      	str	r3, [r2, #4]
    gyro_bias[2]  /= (int32_t) packet_count;
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <MPU9250_calibrate+0x23c>)
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	8c3b      	ldrh	r3, [r7, #32]
 8000ff2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <MPU9250_calibrate+0x23c>)
 8000ff8:	6093      	str	r3, [r2, #8]

    if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MPU9250_calibrate+0x238>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	dd0c      	ble.n	800101c <MPU9250_calibrate+0x240>
 8001002:	4b04      	ldr	r3, [pc, #16]	; (8001014 <MPU9250_calibrate+0x238>)
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	4a02      	ldr	r2, [pc, #8]	; (8001014 <MPU9250_calibrate+0x238>)
 800100c:	6093      	str	r3, [r2, #8]
 800100e:	e00b      	b.n	8001028 <MPU9250_calibrate+0x24c>
 8001010:	aaaaaaab 	.word	0xaaaaaaab
 8001014:	20000490 	.word	0x20000490
 8001018:	20000484 	.word	0x20000484
    else {accel_bias[2] += (int32_t) accelsensitivity;}
 800101c:	4b78      	ldr	r3, [pc, #480]	; (8001200 <MPU9250_calibrate+0x424>)
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001022:	4413      	add	r3, r2
 8001024:	4a76      	ldr	r2, [pc, #472]	; (8001200 <MPU9250_calibrate+0x424>)
 8001026:	6093      	str	r3, [r2, #8]

    // Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
    data[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001028:	4b76      	ldr	r3, [pc, #472]	; (8001204 <MPU9250_calibrate+0x428>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	425b      	negs	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	da00      	bge.n	8001034 <MPU9250_calibrate+0x258>
 8001032:	3303      	adds	r3, #3
 8001034:	109b      	asrs	r3, r3, #2
 8001036:	121b      	asrs	r3, r3, #8
 8001038:	b2db      	uxtb	r3, r3
 800103a:	753b      	strb	r3, [r7, #20]
    data[1] = (-gyro_bias[0] / 4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 800103c:	4b71      	ldr	r3, [pc, #452]	; (8001204 <MPU9250_calibrate+0x428>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	425b      	negs	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	da00      	bge.n	8001048 <MPU9250_calibrate+0x26c>
 8001046:	3303      	adds	r3, #3
 8001048:	109b      	asrs	r3, r3, #2
 800104a:	b2db      	uxtb	r3, r3
 800104c:	757b      	strb	r3, [r7, #21]
    data[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 800104e:	4b6d      	ldr	r3, [pc, #436]	; (8001204 <MPU9250_calibrate+0x428>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	425b      	negs	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	da00      	bge.n	800105a <MPU9250_calibrate+0x27e>
 8001058:	3303      	adds	r3, #3
 800105a:	109b      	asrs	r3, r3, #2
 800105c:	121b      	asrs	r3, r3, #8
 800105e:	b2db      	uxtb	r3, r3
 8001060:	75bb      	strb	r3, [r7, #22]
    data[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8001062:	4b68      	ldr	r3, [pc, #416]	; (8001204 <MPU9250_calibrate+0x428>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	425b      	negs	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	da00      	bge.n	800106e <MPU9250_calibrate+0x292>
 800106c:	3303      	adds	r3, #3
 800106e:	109b      	asrs	r3, r3, #2
 8001070:	b2db      	uxtb	r3, r3
 8001072:	75fb      	strb	r3, [r7, #23]
    data[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8001074:	4b63      	ldr	r3, [pc, #396]	; (8001204 <MPU9250_calibrate+0x428>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	425b      	negs	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	da00      	bge.n	8001080 <MPU9250_calibrate+0x2a4>
 800107e:	3303      	adds	r3, #3
 8001080:	109b      	asrs	r3, r3, #2
 8001082:	121b      	asrs	r3, r3, #8
 8001084:	b2db      	uxtb	r3, r3
 8001086:	763b      	strb	r3, [r7, #24]
    data[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8001088:	4b5e      	ldr	r3, [pc, #376]	; (8001204 <MPU9250_calibrate+0x428>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	425b      	negs	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	da00      	bge.n	8001094 <MPU9250_calibrate+0x2b8>
 8001092:	3303      	adds	r3, #3
 8001094:	109b      	asrs	r3, r3, #2
 8001096:	b2db      	uxtb	r3, r3
 8001098:	767b      	strb	r3, [r7, #25]

    // Push gyro biases to hardware registers
    MPU9250_writeReg(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 800109a:	7d3b      	ldrb	r3, [r7, #20]
 800109c:	461a      	mov	r2, r3
 800109e:	2113      	movs	r1, #19
 80010a0:	2068      	movs	r0, #104	; 0x68
 80010a2:	f000 fa33 	bl	800150c <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 80010a6:	7d7b      	ldrb	r3, [r7, #21]
 80010a8:	461a      	mov	r2, r3
 80010aa:	2114      	movs	r1, #20
 80010ac:	2068      	movs	r0, #104	; 0x68
 80010ae:	f000 fa2d 	bl	800150c <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 80010b2:	7dbb      	ldrb	r3, [r7, #22]
 80010b4:	461a      	mov	r2, r3
 80010b6:	2115      	movs	r1, #21
 80010b8:	2068      	movs	r0, #104	; 0x68
 80010ba:	f000 fa27 	bl	800150c <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	461a      	mov	r2, r3
 80010c2:	2116      	movs	r1, #22
 80010c4:	2068      	movs	r0, #104	; 0x68
 80010c6:	f000 fa21 	bl	800150c <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 80010ca:	7e3b      	ldrb	r3, [r7, #24]
 80010cc:	461a      	mov	r2, r3
 80010ce:	2117      	movs	r1, #23
 80010d0:	2068      	movs	r0, #104	; 0x68
 80010d2:	f000 fa1b 	bl	800150c <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 80010d6:	7e7b      	ldrb	r3, [r7, #25]
 80010d8:	461a      	mov	r2, r3
 80010da:	2118      	movs	r1, #24
 80010dc:	2068      	movs	r0, #104	; 0x68
 80010de:	f000 fa15 	bl	800150c <MPU9250_writeReg>
    // the accelerometer biases calculated above must be divided by 8.


     //int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
     //readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
     data[0] = MPU9250_readReg(MPU9250_ADDRESS, XA_OFFSET_H);
 80010e2:	2177      	movs	r1, #119	; 0x77
 80010e4:	2068      	movs	r0, #104	; 0x68
 80010e6:	f000 fa31 	bl	800154c <MPU9250_readReg>
 80010ea:	4603      	mov	r3, r0
 80010ec:	753b      	strb	r3, [r7, #20]
     data[1] = MPU9250_readReg(MPU9250_ADDRESS, XA_OFFSET_L);
 80010ee:	2178      	movs	r1, #120	; 0x78
 80010f0:	2068      	movs	r0, #104	; 0x68
 80010f2:	f000 fa2b 	bl	800154c <MPU9250_readReg>
 80010f6:	4603      	mov	r3, r0
 80010f8:	757b      	strb	r3, [r7, #21]
     data[2] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_H);
 80010fa:	217a      	movs	r1, #122	; 0x7a
 80010fc:	2068      	movs	r0, #104	; 0x68
 80010fe:	f000 fa25 	bl	800154c <MPU9250_readReg>
 8001102:	4603      	mov	r3, r0
 8001104:	75bb      	strb	r3, [r7, #22]
     data[3] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_L);
 8001106:	217b      	movs	r1, #123	; 0x7b
 8001108:	2068      	movs	r0, #104	; 0x68
 800110a:	f000 fa1f 	bl	800154c <MPU9250_readReg>
 800110e:	4603      	mov	r3, r0
 8001110:	75fb      	strb	r3, [r7, #23]
     data[4] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_H);
 8001112:	217d      	movs	r1, #125	; 0x7d
 8001114:	2068      	movs	r0, #104	; 0x68
 8001116:	f000 fa19 	bl	800154c <MPU9250_readReg>
 800111a:	4603      	mov	r3, r0
 800111c:	763b      	strb	r3, [r7, #24]
     data[5] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_L);
 800111e:	217e      	movs	r1, #126	; 0x7e
 8001120:	2068      	movs	r0, #104	; 0x68
 8001122:	f000 fa13 	bl	800154c <MPU9250_readReg>
 8001126:	4603      	mov	r3, r0
 8001128:	767b      	strb	r3, [r7, #25]
     accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]  );
 800112a:	7d3b      	ldrb	r3, [r7, #20]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	7d7a      	ldrb	r2, [r7, #21]
 8001130:	4313      	orrs	r3, r2
 8001132:	4a35      	ldr	r2, [pc, #212]	; (8001208 <MPU9250_calibrate+0x42c>)
 8001134:	6013      	str	r3, [r2, #0]
     accel_bias_reg[1] = (int32_t) (((int16_t)data[2] << 8) | data[3]  );
 8001136:	7dbb      	ldrb	r3, [r7, #22]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	7dfa      	ldrb	r2, [r7, #23]
 800113c:	4313      	orrs	r3, r2
 800113e:	4a32      	ldr	r2, [pc, #200]	; (8001208 <MPU9250_calibrate+0x42c>)
 8001140:	6053      	str	r3, [r2, #4]
     accel_bias_reg[2] = (int32_t) (((int16_t)data[4] << 8) | data[5]  );
 8001142:	7e3b      	ldrb	r3, [r7, #24]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	7e7a      	ldrb	r2, [r7, #25]
 8001148:	4313      	orrs	r3, r2
 800114a:	4a2f      	ldr	r2, [pc, #188]	; (8001208 <MPU9250_calibrate+0x42c>)
 800114c:	6093      	str	r3, [r2, #8]
//     accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
//     readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
//     accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);

     //uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
     uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 800114e:	2300      	movs	r3, #0
 8001150:	743b      	strb	r3, [r7, #16]
 8001152:	2300      	movs	r3, #0
 8001154:	747b      	strb	r3, [r7, #17]
 8001156:	2300      	movs	r3, #0
 8001158:	74bb      	strb	r3, [r7, #18]
    // for(ii = 0; ii < 3; ii++) {
    //     if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
    // }

     // Construct total accelerometer bias, including calculated average accelerometer bias from above
     accel_bias_reg[0] -= (accel_bias[0] / 8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 800115a:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <MPU9250_calibrate+0x42c>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b28      	ldr	r3, [pc, #160]	; (8001200 <MPU9250_calibrate+0x424>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	da00      	bge.n	8001168 <MPU9250_calibrate+0x38c>
 8001166:	3307      	adds	r3, #7
 8001168:	10db      	asrs	r3, r3, #3
 800116a:	425b      	negs	r3, r3
 800116c:	4413      	add	r3, r2
 800116e:	4a26      	ldr	r2, [pc, #152]	; (8001208 <MPU9250_calibrate+0x42c>)
 8001170:	6013      	str	r3, [r2, #0]
     accel_bias_reg[1] -= (accel_bias[1] / 8);
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <MPU9250_calibrate+0x42c>)
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <MPU9250_calibrate+0x424>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	da00      	bge.n	8001180 <MPU9250_calibrate+0x3a4>
 800117e:	3307      	adds	r3, #7
 8001180:	10db      	asrs	r3, r3, #3
 8001182:	425b      	negs	r3, r3
 8001184:	4413      	add	r3, r2
 8001186:	4a20      	ldr	r2, [pc, #128]	; (8001208 <MPU9250_calibrate+0x42c>)
 8001188:	6053      	str	r3, [r2, #4]
     accel_bias_reg[2] -= (accel_bias[2] / 8);
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <MPU9250_calibrate+0x42c>)
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <MPU9250_calibrate+0x424>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	da00      	bge.n	8001198 <MPU9250_calibrate+0x3bc>
 8001196:	3307      	adds	r3, #7
 8001198:	10db      	asrs	r3, r3, #3
 800119a:	425b      	negs	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	4a1a      	ldr	r2, [pc, #104]	; (8001208 <MPU9250_calibrate+0x42c>)
 80011a0:	6093      	str	r3, [r2, #8]

     data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <MPU9250_calibrate+0x42c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	121b      	asrs	r3, r3, #8
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	753b      	strb	r3, [r7, #20]
     data[1] = (accel_bias_reg[0])      & 0xFF;
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MPU9250_calibrate+0x42c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	757b      	strb	r3, [r7, #21]
     data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80011b4:	7d7a      	ldrb	r2, [r7, #21]
 80011b6:	7c3b      	ldrb	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	757b      	strb	r3, [r7, #21]
     data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MPU9250_calibrate+0x42c>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	121b      	asrs	r3, r3, #8
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	75bb      	strb	r3, [r7, #22]
     data[3] = (accel_bias_reg[1])      & 0xFF;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MPU9250_calibrate+0x42c>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	75fb      	strb	r3, [r7, #23]
     data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80011d0:	7dfa      	ldrb	r2, [r7, #23]
 80011d2:	7c7b      	ldrb	r3, [r7, #17]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	75fb      	strb	r3, [r7, #23]
     data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <MPU9250_calibrate+0x42c>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	121b      	asrs	r3, r3, #8
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	763b      	strb	r3, [r7, #24]
     data[5] = (accel_bias_reg[2])      & 0xFF;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <MPU9250_calibrate+0x42c>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	767b      	strb	r3, [r7, #25]
     data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80011ec:	7e7a      	ldrb	r2, [r7, #25]
 80011ee:	7cbb      	ldrb	r3, [r7, #18]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	767b      	strb	r3, [r7, #25]
//     MPU9250_writeReg(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
//     MPU9250_writeReg(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
//     MPU9250_writeReg(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
//     MPU9250_writeReg(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);

}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	; 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000490 	.word	0x20000490
 8001204:	20000484 	.word	0x20000484
 8001208:	2000049c 	.word	0x2000049c

0800120c <MPU9250_getAllData>:

void MPU9250_getAllData(int16_t *Data)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	uint8_t buffer[12];
	buffer[0] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_XOUT_H);
 8001214:	2143      	movs	r1, #67	; 0x43
 8001216:	2068      	movs	r0, #104	; 0x68
 8001218:	f000 f998 	bl	800154c <MPU9250_readReg>
 800121c:	4603      	mov	r3, r0
 800121e:	733b      	strb	r3, [r7, #12]
	buffer[1] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_XOUT_L);
 8001220:	2144      	movs	r1, #68	; 0x44
 8001222:	2068      	movs	r0, #104	; 0x68
 8001224:	f000 f992 	bl	800154c <MPU9250_readReg>
 8001228:	4603      	mov	r3, r0
 800122a:	737b      	strb	r3, [r7, #13]
	buffer[2] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_YOUT_H);
 800122c:	2145      	movs	r1, #69	; 0x45
 800122e:	2068      	movs	r0, #104	; 0x68
 8001230:	f000 f98c 	bl	800154c <MPU9250_readReg>
 8001234:	4603      	mov	r3, r0
 8001236:	73bb      	strb	r3, [r7, #14]
	buffer[3] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_YOUT_L);
 8001238:	2146      	movs	r1, #70	; 0x46
 800123a:	2068      	movs	r0, #104	; 0x68
 800123c:	f000 f986 	bl	800154c <MPU9250_readReg>
 8001240:	4603      	mov	r3, r0
 8001242:	73fb      	strb	r3, [r7, #15]
	buffer[4] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_ZOUT_H);
 8001244:	2147      	movs	r1, #71	; 0x47
 8001246:	2068      	movs	r0, #104	; 0x68
 8001248:	f000 f980 	bl	800154c <MPU9250_readReg>
 800124c:	4603      	mov	r3, r0
 800124e:	743b      	strb	r3, [r7, #16]
	buffer[5] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_ZOUT_L);
 8001250:	2148      	movs	r1, #72	; 0x48
 8001252:	2068      	movs	r0, #104	; 0x68
 8001254:	f000 f97a 	bl	800154c <MPU9250_readReg>
 8001258:	4603      	mov	r3, r0
 800125a:	747b      	strb	r3, [r7, #17]
	buffer[6] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_XOUT_H);
 800125c:	213b      	movs	r1, #59	; 0x3b
 800125e:	2068      	movs	r0, #104	; 0x68
 8001260:	f000 f974 	bl	800154c <MPU9250_readReg>
 8001264:	4603      	mov	r3, r0
 8001266:	74bb      	strb	r3, [r7, #18]
	buffer[7] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_XOUT_L);
 8001268:	213c      	movs	r1, #60	; 0x3c
 800126a:	2068      	movs	r0, #104	; 0x68
 800126c:	f000 f96e 	bl	800154c <MPU9250_readReg>
 8001270:	4603      	mov	r3, r0
 8001272:	74fb      	strb	r3, [r7, #19]
	buffer[8] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_YOUT_H);
 8001274:	213d      	movs	r1, #61	; 0x3d
 8001276:	2068      	movs	r0, #104	; 0x68
 8001278:	f000 f968 	bl	800154c <MPU9250_readReg>
 800127c:	4603      	mov	r3, r0
 800127e:	753b      	strb	r3, [r7, #20]
	buffer[9] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_YOUT_L);
 8001280:	213e      	movs	r1, #62	; 0x3e
 8001282:	2068      	movs	r0, #104	; 0x68
 8001284:	f000 f962 	bl	800154c <MPU9250_readReg>
 8001288:	4603      	mov	r3, r0
 800128a:	757b      	strb	r3, [r7, #21]
	buffer[10] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_ZOUT_H);
 800128c:	213f      	movs	r1, #63	; 0x3f
 800128e:	2068      	movs	r0, #104	; 0x68
 8001290:	f000 f95c 	bl	800154c <MPU9250_readReg>
 8001294:	4603      	mov	r3, r0
 8001296:	75bb      	strb	r3, [r7, #22]
	buffer[11] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_ZOUT_L);
 8001298:	2140      	movs	r1, #64	; 0x40
 800129a:	2068      	movs	r0, #104	; 0x68
 800129c:	f000 f956 	bl	800154c <MPU9250_readReg>
 80012a0:	4603      	mov	r3, r0
 80012a2:	75fb      	strb	r3, [r7, #23]
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 80012a4:	7b3b      	ldrb	r3, [r7, #12]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	7b7b      	ldrb	r3, [r7, #13]
 80012ae:	4413      	add	r3, r2
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012b8:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001408 <MPU9250_getAllData+0x1fc>
 80012bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c0:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800140c <MPU9250_getAllData+0x200>
 80012c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012c8:	eddf 6a51 	vldr	s13, [pc, #324]	; 8001410 <MPU9250_getAllData+0x204>
 80012cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d0:	4b50      	ldr	r3, [pc, #320]	; (8001414 <MPU9250_getAllData+0x208>)
 80012d2:	edc3 7a00 	vstr	s15, [r3]
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 80012d6:	7bbb      	ldrb	r3, [r7, #14]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21b      	sxth	r3, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	4413      	add	r3, r2
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ea:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001408 <MPU9250_getAllData+0x1fc>
 80012ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f2:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800140c <MPU9250_getAllData+0x200>
 80012f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012fa:	eddf 6a45 	vldr	s13, [pc, #276]	; 8001410 <MPU9250_getAllData+0x204>
 80012fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001302:	4b45      	ldr	r3, [pc, #276]	; (8001418 <MPU9250_getAllData+0x20c>)
 8001304:	edc3 7a00 	vstr	s15, [r3]
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 8001308:	7c3b      	ldrb	r3, [r7, #16]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	b21b      	sxth	r3, r3
 800130e:	461a      	mov	r2, r3
 8001310:	7c7b      	ldrb	r3, [r7, #17]
 8001312:	4413      	add	r3, r2
 8001314:	ee07 3a90 	vmov	s15, r3
 8001318:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001408 <MPU9250_getAllData+0x1fc>
 8001320:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001324:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800140c <MPU9250_getAllData+0x200>
 8001328:	ee27 7a87 	vmul.f32	s14, s15, s14
 800132c:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001410 <MPU9250_getAllData+0x204>
 8001330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001334:	4b39      	ldr	r3, [pc, #228]	; (800141c <MPU9250_getAllData+0x210>)
 8001336:	edc3 7a00 	vstr	s15, [r3]
//	accelX=((((int16_t)((uint16_t)buffer[6] << 8) + buffer[7])))/4096.0f*9.8f;
//	accelY=((((int16_t)((uint16_t)buffer[8] << 8) + buffer[9])))/4096.0f*9.8f;
	accelX=((((int16_t)((uint16_t)buffer[6] << 8) + buffer[7])))/4096.0f*9.8f;
 800133a:	7cbb      	ldrb	r3, [r7, #18]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b21b      	sxth	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	7cfb      	ldrb	r3, [r7, #19]
 8001344:	4413      	add	r3, r2
 8001346:	ee07 3a90 	vmov	s15, r3
 800134a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800134e:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001420 <MPU9250_getAllData+0x214>
 8001352:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001356:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001424 <MPU9250_getAllData+0x218>
 800135a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135e:	4b32      	ldr	r3, [pc, #200]	; (8001428 <MPU9250_getAllData+0x21c>)
 8001360:	edc3 7a00 	vstr	s15, [r3]
	accelY=((((int16_t)((uint16_t)buffer[8] << 8) + buffer[9])))/4096.0f*9.8f;
 8001364:	7d3b      	ldrb	r3, [r7, #20]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	b21b      	sxth	r3, r3
 800136a:	461a      	mov	r2, r3
 800136c:	7d7b      	ldrb	r3, [r7, #21]
 800136e:	4413      	add	r3, r2
 8001370:	ee07 3a90 	vmov	s15, r3
 8001374:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001378:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001420 <MPU9250_getAllData+0x214>
 800137c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001380:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001424 <MPU9250_getAllData+0x218>
 8001384:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001388:	4b28      	ldr	r3, [pc, #160]	; (800142c <MPU9250_getAllData+0x220>)
 800138a:	edc3 7a00 	vstr	s15, [r3]
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 800138e:	7dbb      	ldrb	r3, [r7, #22]
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	b21b      	sxth	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	7dfb      	ldrb	r3, [r7, #23]
 8001398:	4413      	add	r3, r2
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001420 <MPU9250_getAllData+0x214>
 80013a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013aa:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001424 <MPU9250_getAllData+0x218>
 80013ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b2:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <MPU9250_getAllData+0x224>)
 80013b4:	edc3 7a00 	vstr	s15, [r3]
	gyroX_filtered = filter(gyroX);
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <MPU9250_getAllData+0x208>)
 80013ba:	edd3 7a00 	vldr	s15, [r3]
 80013be:	eeb0 0a67 	vmov.f32	s0, s15
 80013c2:	f000 f83d 	bl	8001440 <filter>
 80013c6:	eef0 7a40 	vmov.f32	s15, s0
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <MPU9250_getAllData+0x228>)
 80013cc:	edc3 7a00 	vstr	s15, [r3]
	gyroY_filtered = filter(gyroY);
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MPU9250_getAllData+0x20c>)
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	eeb0 0a67 	vmov.f32	s0, s15
 80013da:	f000 f831 	bl	8001440 <filter>
 80013de:	eef0 7a40 	vmov.f32	s15, s0
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <MPU9250_getAllData+0x22c>)
 80013e4:	edc3 7a00 	vstr	s15, [r3]
	gyroZ_filtered = filter(gyroZ);
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MPU9250_getAllData+0x210>)
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	eeb0 0a67 	vmov.f32	s0, s15
 80013f2:	f000 f825 	bl	8001440 <filter>
 80013f6:	eef0 7a40 	vmov.f32	s15, s0
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <MPU9250_getAllData+0x230>)
 80013fc:	edc3 7a00 	vstr	s15, [r3]
//	accelX=((((int16_t)((uint16_t)buffer[6] << 8) + buffer[7])));
//	accelY=((((int16_t)((uint16_t)buffer[8] << 8) + buffer[9])));
//	accelZ=((((int16_t)((uint16_t)buffer[10] << 8) + buffer[11])));
	//accelX_offset=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
}
 8001400:	bf00      	nop
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	42830000 	.word	0x42830000
 800140c:	4048f5c3 	.word	0x4048f5c3
 8001410:	43340000 	.word	0x43340000
 8001414:	20004c98 	.word	0x20004c98
 8001418:	20005194 	.word	0x20005194
 800141c:	20004cd4 	.word	0x20004cd4
 8001420:	45800000 	.word	0x45800000
 8001424:	411ccccd 	.word	0x411ccccd
 8001428:	20004c2c 	.word	0x20004c2c
 800142c:	20004c24 	.word	0x20004c24
 8001430:	2000514c 	.word	0x2000514c
 8001434:	20005150 	.word	0x20005150
 8001438:	20005140 	.word	0x20005140
 800143c:	2000519c 	.word	0x2000519c

08001440 <filter>:

float filter(float val) { //функция фильтрации
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	ed87 0a01 	vstr	s0, [r7, #4]
	Pc = P + varProcess;
 800144a:	4b28      	ldr	r3, [pc, #160]	; (80014ec <filter+0xac>)
 800144c:	ed93 7a00 	vldr	s14, [r3]
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <filter+0xb0>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145a:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <filter+0xb4>)
 800145c:	edc3 7a00 	vstr	s15, [r3]
	G = Pc/(Pc + varVolt);
 8001460:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <filter+0xb4>)
 8001462:	edd3 6a00 	vldr	s13, [r3]
 8001466:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <filter+0xb4>)
 8001468:	ed93 7a00 	vldr	s14, [r3]
 800146c:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <filter+0xb8>)
 800146e:	edd3 7a00 	vldr	s15, [r3]
 8001472:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <filter+0xbc>)
 800147c:	edc3 7a00 	vstr	s15, [r3]
	P = (1-G)*Pc;
 8001480:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <filter+0xbc>)
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800148a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <filter+0xb4>)
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <filter+0xac>)
 800149a:	edc3 7a00 	vstr	s15, [r3]
	Xp = Xe;
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <filter+0xc0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a18      	ldr	r2, [pc, #96]	; (8001504 <filter+0xc4>)
 80014a4:	6013      	str	r3, [r2, #0]
	Zp = Xp;
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <filter+0xc4>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a17      	ldr	r2, [pc, #92]	; (8001508 <filter+0xc8>)
 80014ac:	6013      	str	r3, [r2, #0]
	Xe = G*(val-Zp)+Xp; // "фильтрованное" значение
 80014ae:	4b16      	ldr	r3, [pc, #88]	; (8001508 <filter+0xc8>)
 80014b0:	edd3 7a00 	vldr	s15, [r3]
 80014b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80014b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <filter+0xbc>)
 80014be:	edd3 7a00 	vldr	s15, [r3]
 80014c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <filter+0xc4>)
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <filter+0xc0>)
 80014d2:	edc3 7a00 	vstr	s15, [r3]
return(Xe);
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <filter+0xc0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	ee07 3a90 	vmov	s15, r3
}
 80014de:	eeb0 0a67 	vmov.f32	s0, s15
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	20000004 	.word	0x20000004
 80014f0:	20000000 	.word	0x20000000
 80014f4:	200004ac 	.word	0x200004ac
 80014f8:	200004a8 	.word	0x200004a8
 80014fc:	200004b0 	.word	0x200004b0
 8001500:	200004bc 	.word	0x200004bc
 8001504:	200004b4 	.word	0x200004b4
 8001508:	200004b8 	.word	0x200004b8

0800150c <MPU9250_writeReg>:

void MPU9250_writeReg(uint16_t Addr, uint8_t reg, uint8_t value)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af02      	add	r7, sp, #8
 8001512:	4603      	mov	r3, r0
 8001514:	80fb      	strh	r3, [r7, #6]
 8001516:	460b      	mov	r3, r1
 8001518:	717b      	strb	r3, [r7, #5]
 800151a:	4613      	mov	r3, r2
 800151c:	713b      	strb	r3, [r7, #4]
	uint8_t buf[2];
	buf[0] = reg;
 800151e:	797b      	ldrb	r3, [r7, #5]
 8001520:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 8001522:	793b      	ldrb	r3, [r7, #4]
 8001524:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	b299      	uxth	r1, r3
 800152c:	f107 020c 	add.w	r2, r7, #12
 8001530:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2302      	movs	r3, #2
 8001538:	4803      	ldr	r0, [pc, #12]	; (8001548 <MPU9250_writeReg+0x3c>)
 800153a:	f005 f80f 	bl	800655c <HAL_I2C_Master_Transmit>
}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20004c40 	.word	0x20004c40

0800154c <MPU9250_readReg>:
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 5, 1000);
}

// Read an 8-bit register
uint8_t MPU9250_readReg(uint16_t Addr, uint8_t reg)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af04      	add	r7, sp, #16
 8001552:	4603      	mov	r3, r0
 8001554:	460a      	mov	r2, r1
 8001556:	80fb      	strh	r3, [r7, #6]
 8001558:	4613      	mov	r3, r2
 800155a:	717b      	strb	r3, [r7, #5]
  uint8_t value;
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	b299      	uxth	r1, r3
 8001562:	797b      	ldrb	r3, [r7, #5]
 8001564:	b29a      	uxth	r2, r3
 8001566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156a:	9302      	str	r3, [sp, #8]
 800156c:	2301      	movs	r3, #1
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	f107 030f 	add.w	r3, r7, #15
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2301      	movs	r3, #1
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <MPU9250_readReg+0x3c>)
 800157a:	f005 f8ed 	bl	8006758 <HAL_I2C_Mem_Read>
  return value;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20004c40 	.word	0x20004c40

0800158c <MPU9250_readReg16Bit>:

// Read a 16-bit register
uint16_t MPU9250_readReg16Bit(uint16_t Addr, uint8_t reg)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	460a      	mov	r2, r1
 8001596:	80fb      	strh	r3, [r7, #6]
 8001598:	4613      	mov	r3, r2
 800159a:	717b      	strb	r3, [r7, #5]
  uint16_t value;
  uint8_t buff[2];
  MPU9250_readMulti(Addr, reg, buff, 2);
 800159c:	f107 0208 	add.w	r2, r7, #8
 80015a0:	7979      	ldrb	r1, [r7, #5]
 80015a2:	88f8      	ldrh	r0, [r7, #6]
 80015a4:	2302      	movs	r3, #2
 80015a6:	f000 f811 	bl	80015cc <MPU9250_readMulti>
  uint16_t tmp;
  tmp = buff[0];
 80015aa:	7a3b      	ldrb	r3, [r7, #8]
 80015ac:	81fb      	strh	r3, [r7, #14]
  tmp <<= 8;
 80015ae:	89fb      	ldrh	r3, [r7, #14]
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	81fb      	strh	r3, [r7, #14]
  tmp |= buff[1];
 80015b4:	7a7b      	ldrb	r3, [r7, #9]
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	89fb      	ldrh	r3, [r7, #14]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	81fb      	strh	r3, [r7, #14]
  value = tmp;
 80015be:	89fb      	ldrh	r3, [r7, #14]
 80015c0:	81bb      	strh	r3, [r7, #12]
  return value;
 80015c2:	89bb      	ldrh	r3, [r7, #12]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <MPU9250_readMulti>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void MPU9250_readMulti(uint16_t Addr, uint8_t reg, uint8_t * dst, uint8_t count)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af04      	add	r7, sp, #16
 80015d2:	603a      	str	r2, [r7, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
 80015da:	460b      	mov	r3, r1
 80015dc:	717b      	strb	r3, [r7, #5]
 80015de:	4613      	mov	r3, r2
 80015e0:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, dst, count, 1000);
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	b299      	uxth	r1, r3
 80015e8:	797b      	ldrb	r3, [r7, #5]
 80015ea:	b298      	uxth	r0, r3
 80015ec:	793b      	ldrb	r3, [r7, #4]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015f4:	9202      	str	r2, [sp, #8]
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2301      	movs	r3, #1
 80015fe:	4602      	mov	r2, r0
 8001600:	4803      	ldr	r0, [pc, #12]	; (8001610 <MPU9250_readMulti+0x44>)
 8001602:	f005 f8a9 	bl	8006758 <HAL_I2C_Mem_Read>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20004c40 	.word	0x20004c40

08001614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <HAL_MspInit+0x58>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <HAL_MspInit+0x58>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001628:	6453      	str	r3, [r2, #68]	; 0x44
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_MspInit+0x58>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_MspInit+0x58>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a0b      	ldr	r2, [pc, #44]	; (800166c <HAL_MspInit+0x58>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_MspInit+0x58>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	2005      	movs	r0, #5
 8001658:	f004 fc38 	bl	8005ecc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800165c:	2005      	movs	r0, #5
 800165e:	f004 fc51 	bl	8005f04 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800

08001670 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a21      	ldr	r2, [pc, #132]	; (8001714 <HAL_CAN_MspInit+0xa4>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d13c      	bne.n	800170c <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <HAL_CAN_MspInit+0xa8>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a1f      	ldr	r2, [pc, #124]	; (8001718 <HAL_CAN_MspInit+0xa8>)
 800169c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <HAL_CAN_MspInit+0xa8>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <HAL_CAN_MspInit+0xa8>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a18      	ldr	r2, [pc, #96]	; (8001718 <HAL_CAN_MspInit+0xa8>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <HAL_CAN_MspInit+0xa8>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016dc:	2309      	movs	r3, #9
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	480d      	ldr	r0, [pc, #52]	; (800171c <HAL_CAN_MspInit+0xac>)
 80016e8:	f004 fc4a 	bl	8005f80 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2100      	movs	r1, #0
 80016f0:	2014      	movs	r0, #20
 80016f2:	f004 fbeb 	bl	8005ecc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80016f6:	2014      	movs	r0, #20
 80016f8:	f004 fc04 	bl	8005f04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2100      	movs	r1, #0
 8001700:	2015      	movs	r0, #21
 8001702:	f004 fbe3 	bl	8005ecc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001706:	2015      	movs	r0, #21
 8001708:	f004 fbfc 	bl	8005f04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800170c:	bf00      	nop
 800170e:	3728      	adds	r7, #40	; 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40006400 	.word	0x40006400
 8001718:	40023800 	.word	0x40023800
 800171c:	40020400 	.word	0x40020400

08001720 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	; 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1d      	ldr	r2, [pc, #116]	; (80017b4 <HAL_I2C_MspInit+0x94>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d133      	bne.n	80017aa <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	4b1c      	ldr	r3, [pc, #112]	; (80017b8 <HAL_I2C_MspInit+0x98>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a1b      	ldr	r2, [pc, #108]	; (80017b8 <HAL_I2C_MspInit+0x98>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <HAL_I2C_MspInit+0x98>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800175e:	23c0      	movs	r3, #192	; 0xc0
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001762:	2312      	movs	r3, #18
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001766:	2301      	movs	r3, #1
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800176e:	2304      	movs	r3, #4
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	4810      	ldr	r0, [pc, #64]	; (80017bc <HAL_I2C_MspInit+0x9c>)
 800177a:	f004 fc01 	bl	8005f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <HAL_I2C_MspInit+0x98>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a0c      	ldr	r2, [pc, #48]	; (80017b8 <HAL_I2C_MspInit+0x98>)
 8001788:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <HAL_I2C_MspInit+0x98>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	201f      	movs	r0, #31
 80017a0:	f004 fb94 	bl	8005ecc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017a4:	201f      	movs	r0, #31
 80017a6:	f004 fbad 	bl	8005f04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017aa:	bf00      	nop
 80017ac:	3728      	adds	r7, #40	; 0x28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40005400 	.word	0x40005400
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020400 	.word	0x40020400

080017c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08c      	sub	sp, #48	; 0x30
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	201d      	movs	r0, #29
 80017d6:	f004 fb79 	bl	8005ecc <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017da:	201d      	movs	r0, #29
 80017dc:	f004 fb92 	bl	8005f04 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <HAL_InitTick+0xa4>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	4a1e      	ldr	r2, [pc, #120]	; (8001864 <HAL_InitTick+0xa4>)
 80017ea:	f043 0302 	orr.w	r3, r3, #2
 80017ee:	6413      	str	r3, [r2, #64]	; 0x40
 80017f0:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <HAL_InitTick+0xa4>)
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017fc:	f107 0210 	add.w	r2, r7, #16
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f008 fe82 	bl	800a510 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800180c:	f008 fe6c 	bl	800a4e8 <HAL_RCC_GetPCLK1Freq>
 8001810:	4603      	mov	r3, r0
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001818:	4a13      	ldr	r2, [pc, #76]	; (8001868 <HAL_InitTick+0xa8>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	0c9b      	lsrs	r3, r3, #18
 8001820:	3b01      	subs	r3, #1
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_InitTick+0xac>)
 8001826:	4a12      	ldr	r2, [pc, #72]	; (8001870 <HAL_InitTick+0xb0>)
 8001828:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_InitTick+0xac>)
 800182c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001830:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001832:	4a0e      	ldr	r2, [pc, #56]	; (800186c <HAL_InitTick+0xac>)
 8001834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001836:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <HAL_InitTick+0xac>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_InitTick+0xac>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001844:	4809      	ldr	r0, [pc, #36]	; (800186c <HAL_InitTick+0xac>)
 8001846:	f008 fe95 	bl	800a574 <HAL_TIM_Base_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d104      	bne.n	800185a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001850:	4806      	ldr	r0, [pc, #24]	; (800186c <HAL_InitTick+0xac>)
 8001852:	f008 fec4 	bl	800a5de <HAL_TIM_Base_Start_IT>
 8001856:	4603      	mov	r3, r0
 8001858:	e000      	b.n	800185c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3730      	adds	r7, #48	; 0x30
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40023800 	.word	0x40023800
 8001868:	431bde83 	.word	0x431bde83
 800186c:	200051c4 	.word	0x200051c4
 8001870:	40000400 	.word	0x40000400

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <HardFault_Handler+0x4>

08001888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <MemManage_Handler+0x4>

0800188e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <BusFault_Handler+0x4>

08001894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <UsageFault_Handler+0x4>

0800189a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <CAN1_RX0_IRQHandler+0x10>)
 80018be:	f004 f824 	bl	800590a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000516c 	.word	0x2000516c

080018cc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <CAN1_RX1_IRQHandler+0x10>)
 80018d2:	f004 f81a 	bl	800590a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	2000516c 	.word	0x2000516c

080018e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <TIM3_IRQHandler+0x10>)
 80018e6:	f008 fe9e 	bl	800a626 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200051c4 	.word	0x200051c4

080018f4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <I2C1_EV_IRQHandler+0x10>)
 80018fa:	f005 f953 	bl	8006ba4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20004c40 	.word	0x20004c40

08001908 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <OTG_FS_IRQHandler+0x10>)
 800190e:	f007 f97d 	bl	8008c0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200066d8 	.word	0x200066d8

0800191c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
	return 1;
 8001920:	2301      	movs	r3, #1
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_kill>:

int _kill(int pid, int sig)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001936:	f00d fef5 	bl	800f724 <__errno>
 800193a:	4602      	mov	r2, r0
 800193c:	2316      	movs	r3, #22
 800193e:	6013      	str	r3, [r2, #0]
	return -1;
 8001940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <_exit>:

void _exit (int status)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001954:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ffe7 	bl	800192c <_kill>
	while (1) {}		/* Make sure we hang here */
 800195e:	e7fe      	b.n	800195e <_exit+0x12>

08001960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001968:	4a14      	ldr	r2, [pc, #80]	; (80019bc <_sbrk+0x5c>)
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <_sbrk+0x60>)
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d102      	bne.n	8001982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <_sbrk+0x64>)
 800197e:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <_sbrk+0x68>)
 8001980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	429a      	cmp	r2, r3
 800198e:	d207      	bcs.n	80019a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001990:	f00d fec8 	bl	800f724 <__errno>
 8001994:	4602      	mov	r2, r0
 8001996:	230c      	movs	r3, #12
 8001998:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800199e:	e009      	b.n	80019b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <_sbrk+0x64>)
 80019b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20020000 	.word	0x20020000
 80019c0:	00000400 	.word	0x00000400
 80019c4:	200004c4 	.word	0x200004c4
 80019c8:	20006ae8 	.word	0x20006ae8

080019cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <SystemInit+0x28>)
 80019d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d6:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <SystemInit+0x28>)
 80019d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <SystemInit+0x28>)
 80019e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019e6:	609a      	str	r2, [r3, #8]
#endif
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019fe:	e003      	b.n	8001a08 <LoopCopyDataInit>

08001a00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a06:	3104      	adds	r1, #4

08001a08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a08:	480b      	ldr	r0, [pc, #44]	; (8001a38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a10:	d3f6      	bcc.n	8001a00 <CopyDataInit>
  ldr  r2, =_sbss
 8001a12:	4a0b      	ldr	r2, [pc, #44]	; (8001a40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a14:	e002      	b.n	8001a1c <LoopFillZerobss>

08001a16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a18:	f842 3b04 	str.w	r3, [r2], #4

08001a1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a20:	d3f9      	bcc.n	8001a16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a22:	f7ff ffd3 	bl	80019cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a26:	f00d fe83 	bl	800f730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a2a:	f7fe fd73 	bl	8000514 <main>
  bx  lr    
 8001a2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a30:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a34:	080100ec 	.word	0x080100ec
  ldr  r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a3c:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8001a40:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8001a44:	20006ae4 	.word	0x20006ae4

08001a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC_IRQHandler>
	...

08001a4c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	0a5a      	lsrs	r2, r3, #9
 8001a5c:	490f      	ldr	r1, [pc, #60]	; (8001a9c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8001a5e:	fba1 1202 	umull	r1, r2, r1, r2
 8001a62:	09d2      	lsrs	r2, r2, #7
 8001a64:	490e      	ldr	r1, [pc, #56]	; (8001aa0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8001a66:	fb01 f202 	mul.w	r2, r1, r2
 8001a6a:	1a9b      	subs	r3, r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	0a5b      	lsrs	r3, r3, #9
 8001a74:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	09db      	lsrs	r3, r3, #7
 8001a7c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	441a      	add	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	601a      	str	r2, [r3, #0]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	00044b83 	.word	0x00044b83
 8001aa0:	3b9aca00 	.word	0x3b9aca00

08001aa4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	ed87 0a00 	vstr	s0, [r7]
  {
    const int32_t* val = (int32_t*) &f;
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	613b      	str	r3, [r7, #16]
    int32_t exp = ((*val >> 23) & 255);
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	15db      	asrs	r3, r3, #23
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	617b      	str	r3, [r7, #20]
    if (exp != 0)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x28>
    {
      exp += 1023 - 127;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8001aca:	617b      	str	r3, [r7, #20]
    }

    int32_t sig = *val;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]
    *(outbuffer++) = 0;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig << 5) & 0xff;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	0159      	lsls	r1, r3, #5
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	b2ca      	uxtb	r2, r1
 8001afc:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	10d9      	asrs	r1, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	b2ca      	uxtb	r2, r1
 8001b0a:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 11) & 0xff;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	12d9      	asrs	r1, r3, #11
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	b2ca      	uxtb	r2, r1
 8001b18:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	b25a      	sxtb	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	14db      	asrs	r3, r3, #19
 8001b24:	b25b      	sxtb	r3, r3
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	b25b      	sxtb	r3, r3
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	b259      	sxtb	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	b2ca      	uxtb	r2, r1
 8001b38:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	111b      	asrs	r3, r3, #4
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	1c59      	adds	r1, r3, #1
 8001b44:	6079      	str	r1, [r7, #4]
 8001b46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8001b4e:	edd7 7a00 	vldr	s15, [r7]
 8001b52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5a:	d508      	bpl.n	8001b6e <_ZN3ros3Msg19serializeAvrFloat64EPhf+0xca>
    {
      *(outbuffer - 1) |= 0x80;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	781a      	ldrb	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8001b6e:	2308      	movs	r3, #8
  }
 8001b70:	4618      	mov	r0, r3
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  {
    uint32_t* val = (uint32_t*)f;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	60fb      	str	r3, [r7, #12]
    inbuffer += 3;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3303      	adds	r3, #3
 8001b8e:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	095b      	lsrs	r3, r3, #5
 8001b9a:	f003 0207 	and.w	r2, r3, #7
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	607a      	str	r2, [r7, #4]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	00da      	lsls	r2, r3, #3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	02da      	lsls	r2, r3, #11
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	04db      	lsls	r3, r3, #19
 8001bd4:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	601a      	str	r2, [r3, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	091b      	lsrs	r3, r3, #4
 8001be8:	f003 030f 	and.w	r3, r3, #15
 8001bec:	60bb      	str	r3, [r7, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	f403 62fe 	and.w	r2, r3, #2032	; 0x7f0
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60bb      	str	r3, [r7, #8]
    if (exp != 0)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x9a>
    {
      *val |= ((exp) - 1023 + 127) << 23;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8001c0e:	05db      	lsls	r3, r3, #23
 8001c10:	431a      	orrs	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	601a      	str	r2, [r3, #0]
    }

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	061b      	lsls	r3, r3, #24
 8001c20:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	601a      	str	r2, [r3, #0]

    return 8;
 8001c2e:	2308      	movs	r3, #8
  }
 8001c30:	4618      	mov	r0, r3
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <_ZN3ros3MsgC1Ev>:
class Msg
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <_ZN3ros3MsgC1Ev+0x1c>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	080100c8 	.word	0x080100c8

08001c80 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
      data()
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ffe8 	bl	8001c60 <_ZN3ros3MsgC1Ev>
 8001c90:	4a06      	ldr	r2, [pc, #24]	; (8001cac <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ffce 	bl	8001c3c <_ZN3ros4TimeC1Ev>
    {
    }
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	080100b0 	.word	0x080100b0

08001cb0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6859      	ldr	r1, [r3, #4]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	b2ca      	uxtb	r2, r1
 8001cca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	0a19      	lsrs	r1, r3, #8
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	4413      	add	r3, r2
 8001cda:	b2ca      	uxtb	r2, r1
 8001cdc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	0c19      	lsrs	r1, r3, #16
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	b2ca      	uxtb	r2, r1
 8001cee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	0e19      	lsrs	r1, r3, #24
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3303      	adds	r3, #3
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	b2ca      	uxtb	r2, r1
 8001d00:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3304      	adds	r3, #4
 8001d06:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6899      	ldr	r1, [r3, #8]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	4413      	add	r3, r2
 8001d12:	b2ca      	uxtb	r2, r1
 8001d14:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	0a19      	lsrs	r1, r3, #8
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	4413      	add	r3, r2
 8001d24:	b2ca      	uxtb	r2, r1
 8001d26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	0c19      	lsrs	r1, r3, #16
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3302      	adds	r3, #2
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	4413      	add	r3, r2
 8001d36:	b2ca      	uxtb	r2, r1
 8001d38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	0e19      	lsrs	r1, r3, #24
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	3303      	adds	r3, #3
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	b2ca      	uxtb	r2, r1
 8001d4a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	60fb      	str	r3, [r7, #12]
      return offset;
 8001d52:	68fb      	ldr	r3, [r7, #12]
    }
 8001d54:	4618      	mov	r0, r3
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3301      	adds	r3, #1
 8001d84:	6839      	ldr	r1, [r7, #0]
 8001d86:	440b      	add	r3, r1
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	021b      	lsls	r3, r3, #8
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3302      	adds	r3, #2
 8001d9a:	6839      	ldr	r1, [r7, #0]
 8001d9c:	440b      	add	r3, r1
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	041b      	lsls	r3, r3, #16
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	3303      	adds	r3, #3
 8001db0:	6839      	ldr	r1, [r7, #0]
 8001db2:	440b      	add	r3, r1
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	061b      	lsls	r3, r3, #24
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	4413      	add	r3, r2
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	6839      	ldr	r1, [r7, #0]
 8001ddc:	440b      	add	r3, r1
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3302      	adds	r3, #2
 8001df0:	6839      	ldr	r1, [r7, #0]
 8001df2:	440b      	add	r3, r1
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	041b      	lsls	r3, r3, #16
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3303      	adds	r3, #3
 8001e06:	6839      	ldr	r1, [r7, #0]
 8001e08:	440b      	add	r3, r1
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	061b      	lsls	r3, r3, #24
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	3304      	adds	r3, #4
 8001e18:	60fb      	str	r3, [r7, #12]
     return offset;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    }
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	0800fb1c 	.word	0x0800fb1c

08001e44 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	0800fb2c 	.word	0x0800fb2c

08001e60 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fef8 	bl	8001c60 <_ZN3ros3MsgC1Ev>
 8001e70:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	809a      	strh	r2, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a06      	ldr	r2, [pc, #24]	; (8001ea4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001e8c:	611a      	str	r2, [r3, #16]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	615a      	str	r2, [r3, #20]
    {
    }
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	08010098 	.word	0x08010098
 8001ea4:	0800fb50 	.word	0x0800fb50

08001ea8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	8899      	ldrh	r1, [r3, #4]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	b2ca      	uxtb	r2, r1
 8001ec2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	889b      	ldrh	r3, [r3, #4]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	b299      	uxth	r1, r3
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	b2ca      	uxtb	r2, r1
 8001ed6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	3302      	adds	r3, #2
 8001edc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe f974 	bl	80001d0 <strlen>
 8001ee8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	69b9      	ldr	r1, [r7, #24]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f001 fff2 	bl	8003edc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	3304      	adds	r3, #4
 8001efc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	18d0      	adds	r0, r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f00d fc44 	bl	800f798 <memcpy>
      offset += length_topic_name;
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	4413      	add	r3, r2
 8001f16:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe f957 	bl	80001d0 <strlen>
 8001f22:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	4413      	add	r3, r2
 8001f2a:	6979      	ldr	r1, [r7, #20]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f001 ffd5 	bl	8003edc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3304      	adds	r3, #4
 8001f36:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	18d0      	adds	r0, r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4619      	mov	r1, r3
 8001f46:	f00d fc27 	bl	800f798 <memcpy>
      offset += length_message_type;
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	4413      	add	r3, r2
 8001f50:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe f93a 	bl	80001d0 <strlen>
 8001f5c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	6939      	ldr	r1, [r7, #16]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f001 ffb8 	bl	8003edc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	18d0      	adds	r0, r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f00d fc0a 	bl	800f798 <memcpy>
      offset += length_md5sum;
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4413      	add	r3, r2
 8001f8a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001f92:	68f9      	ldr	r1, [r7, #12]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	4413      	add	r3, r2
 8001f9a:	b2ca      	uxtb	r2, r1
 8001f9c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	0a19      	lsrs	r1, r3, #8
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	4413      	add	r3, r2
 8001faa:	b2ca      	uxtb	r2, r1
 8001fac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	0c19      	lsrs	r1, r3, #16
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	b2ca      	uxtb	r2, r1
 8001fbc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	0e19      	lsrs	r1, r3, #24
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3303      	adds	r3, #3
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	4413      	add	r3, r2
 8001fca:	b2ca      	uxtb	r2, r1
 8001fcc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	61fb      	str	r3, [r7, #28]
      return offset;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
    }
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3720      	adds	r7, #32
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b08a      	sub	sp, #40	; 0x28
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	889b      	ldrh	r3, [r3, #4]
 8001ffe:	b21a      	sxth	r2, r3
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	3301      	adds	r3, #1
 8002004:	6839      	ldr	r1, [r7, #0]
 8002006:	440b      	add	r3, r1
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	b21b      	sxth	r3, r3
 800200e:	4313      	orrs	r3, r2
 8002010:	b21b      	sxth	r3, r3
 8002012:	b29a      	uxth	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	3302      	adds	r3, #2
 800201c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	441a      	add	r2, r3
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	4611      	mov	r1, r2
 800202a:	4618      	mov	r0, r3
 800202c:	f001 ff74 	bl	8003f18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	3304      	adds	r3, #4
 8002034:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	4413      	add	r3, r2
 8002040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002042:	429a      	cmp	r2, r3
 8002044:	d20c      	bcs.n	8002060 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	441a      	add	r2, r3
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	3b01      	subs	r3, #1
 8002050:	6839      	ldr	r1, [r7, #0]
 8002052:	440b      	add	r3, r1
 8002054:	7812      	ldrb	r2, [r2, #0]
 8002056:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	3301      	adds	r3, #1
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
 800205e:	e7ec      	b.n	800203a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	4413      	add	r3, r2
 8002066:	3b01      	subs	r3, #1
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	4413      	add	r3, r2
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	3b01      	subs	r3, #1
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	441a      	add	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	4413      	add	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	441a      	add	r2, r3
 800208a:	f107 0310 	add.w	r3, r7, #16
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f001 ff41 	bl	8003f18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	3304      	adds	r3, #4
 800209a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	623b      	str	r3, [r7, #32]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4413      	add	r3, r2
 80020a6:	6a3a      	ldr	r2, [r7, #32]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d20c      	bcs.n	80020c6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	441a      	add	r2, r3
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	6839      	ldr	r1, [r7, #0]
 80020b8:	440b      	add	r3, r1
 80020ba:	7812      	ldrb	r2, [r2, #0]
 80020bc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	3301      	adds	r3, #1
 80020c2:	623b      	str	r3, [r7, #32]
 80020c4:	e7ec      	b.n	80020a0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4413      	add	r3, r2
 80020cc:	3b01      	subs	r3, #1
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	4413      	add	r3, r2
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	3b01      	subs	r3, #1
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	441a      	add	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4413      	add	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	441a      	add	r2, r3
 80020f0:	f107 030c 	add.w	r3, r7, #12
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f001 ff0e 	bl	8003f18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	3304      	adds	r3, #4
 8002100:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4413      	add	r3, r2
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	429a      	cmp	r2, r3
 8002110:	d20c      	bcs.n	800212c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	441a      	add	r2, r3
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	3b01      	subs	r3, #1
 800211c:	6839      	ldr	r1, [r7, #0]
 800211e:	440b      	add	r3, r1
 8002120:	7812      	ldrb	r2, [r2, #0]
 8002122:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	3301      	adds	r3, #1
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e7ec      	b.n	8002106 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4413      	add	r3, r2
 8002132:	3b01      	subs	r3, #1
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	4413      	add	r3, r2
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	3b01      	subs	r3, #1
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	441a      	add	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	4413      	add	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	6839      	ldr	r1, [r7, #0]
 800215a:	440a      	add	r2, r1
 800215c:	7812      	ldrb	r2, [r2, #0]
 800215e:	4313      	orrs	r3, r2
 8002160:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	3301      	adds	r3, #1
 8002168:	6839      	ldr	r1, [r7, #0]
 800216a:	440b      	add	r3, r1
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	4313      	orrs	r3, r2
 8002172:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	3302      	adds	r3, #2
 800217a:	6839      	ldr	r1, [r7, #0]
 800217c:	440b      	add	r3, r1
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	041b      	lsls	r3, r3, #16
 8002182:	4313      	orrs	r3, r2
 8002184:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	3303      	adds	r3, #3
 800218c:	6839      	ldr	r1, [r7, #0]
 800218e:	440b      	add	r3, r1
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	061b      	lsls	r3, r3, #24
 8002194:	4313      	orrs	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	3304      	adds	r3, #4
 80021a2:	61bb      	str	r3, [r7, #24]
     return offset;
 80021a4:	69bb      	ldr	r3, [r7, #24]
    }
 80021a6:	4618      	mov	r0, r3
 80021a8:	3728      	adds	r7, #40	; 0x28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	0800fb54 	.word	0x0800fb54

080021cc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	0800fb70 	.word	0x0800fb70

080021e8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fd34 	bl	8001c60 <_ZN3ros3MsgC1Ev>
 80021f8:	4a06      	ldr	r2, [pc, #24]	; (8002214 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	711a      	strb	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a04      	ldr	r2, [pc, #16]	; (8002218 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002208:	609a      	str	r2, [r3, #8]
    {
    }
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	08010080 	.word	0x08010080
 8002218:	0800fb50 	.word	0x0800fb50

0800221c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	4413      	add	r3, r2
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	7912      	ldrb	r2, [r2, #4]
 8002234:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	3301      	adds	r3, #1
 800223a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4618      	mov	r0, r3
 8002242:	f7fd ffc5 	bl	80001d0 <strlen>
 8002246:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	4413      	add	r3, r2
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	4618      	mov	r0, r3
 8002252:	f001 fe43 	bl	8003edc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	3304      	adds	r3, #4
 800225a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	18d0      	adds	r0, r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	4619      	mov	r1, r3
 800226a:	f00d fa95 	bl	800f798 <memcpy>
      offset += length_msg;
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	4413      	add	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
      return offset;
 8002276:	68fb      	ldr	r3, [r7, #12]
    }
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	4413      	add	r3, r2
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	3301      	adds	r3, #1
 800229e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	441a      	add	r2, r3
 80022a6:	f107 030c 	add.w	r3, r7, #12
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f001 fe33 	bl	8003f18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	3304      	adds	r3, #4
 80022b6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4413      	add	r3, r2
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d20c      	bcs.n	80022e2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	441a      	add	r2, r3
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	6839      	ldr	r1, [r7, #0]
 80022d4:	440b      	add	r3, r1
 80022d6:	7812      	ldrb	r2, [r2, #0]
 80022d8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3301      	adds	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	e7ec      	b.n	80022bc <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4413      	add	r3, r2
 80022e8:	3b01      	subs	r3, #1
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	4413      	add	r3, r2
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	441a      	add	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
     return offset;
 8002306:	693b      	ldr	r3, [r7, #16]
    }
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	0800fb94 	.word	0x0800fb94

0800232c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	0800fba8 	.word	0x0800fba8

08002348 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fc84 	bl	8001c60 <_ZN3ros3MsgC1Ev>
 8002358:	4a0c      	ldr	r2, [pc, #48]	; (800238c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	619a      	str	r2, [r3, #24]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	61da      	str	r2, [r3, #28]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4618      	mov	r0, r3
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	08010068 	.word	0x08010068

08002390 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	; 0x28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6859      	ldr	r1, [r3, #4]
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	4413      	add	r3, r2
 80023a8:	b2ca      	uxtb	r2, r1
 80023aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	0a19      	lsrs	r1, r3, #8
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	3301      	adds	r3, #1
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	4413      	add	r3, r2
 80023ba:	b2ca      	uxtb	r2, r1
 80023bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	0c19      	lsrs	r1, r3, #16
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	3302      	adds	r3, #2
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	b2ca      	uxtb	r2, r1
 80023ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	0e19      	lsrs	r1, r3, #24
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	3303      	adds	r3, #3
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	4413      	add	r3, r2
 80023de:	b2ca      	uxtb	r2, r1
 80023e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	3304      	adds	r3, #4
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80023e8:	2300      	movs	r3, #0
 80023ea:	623b      	str	r3, [r7, #32]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	6a3a      	ldr	r2, [r7, #32]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d22b      	bcs.n	800244e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002404:	6939      	ldr	r1, [r7, #16]
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	4413      	add	r3, r2
 800240c:	b2ca      	uxtb	r2, r1
 800240e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	0a19      	lsrs	r1, r3, #8
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	3301      	adds	r3, #1
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	4413      	add	r3, r2
 800241c:	b2ca      	uxtb	r2, r1
 800241e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	0c19      	lsrs	r1, r3, #16
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	3302      	adds	r3, #2
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	4413      	add	r3, r2
 800242c:	b2ca      	uxtb	r2, r1
 800242e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	0e19      	lsrs	r1, r3, #24
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	3303      	adds	r3, #3
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	4413      	add	r3, r2
 800243c:	b2ca      	uxtb	r2, r1
 800243e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	3304      	adds	r3, #4
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	3301      	adds	r3, #1
 800244a:	623b      	str	r3, [r7, #32]
 800244c:	e7ce      	b.n	80023ec <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6919      	ldr	r1, [r3, #16]
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	4413      	add	r3, r2
 8002458:	b2ca      	uxtb	r2, r1
 800245a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	0a19      	lsrs	r1, r3, #8
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	3301      	adds	r3, #1
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	4413      	add	r3, r2
 800246a:	b2ca      	uxtb	r2, r1
 800246c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	0c19      	lsrs	r1, r3, #16
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	3302      	adds	r3, #2
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	4413      	add	r3, r2
 800247c:	b2ca      	uxtb	r2, r1
 800247e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	0e19      	lsrs	r1, r3, #24
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	3303      	adds	r3, #3
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	4413      	add	r3, r2
 800248e:	b2ca      	uxtb	r2, r1
 8002490:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	3304      	adds	r3, #4
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002498:	2300      	movs	r3, #0
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d22b      	bcs.n	80024fe <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80024b4:	68f9      	ldr	r1, [r7, #12]
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	b2ca      	uxtb	r2, r1
 80024be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	0a19      	lsrs	r1, r3, #8
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	3301      	adds	r3, #1
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	b2ca      	uxtb	r2, r1
 80024ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	0c19      	lsrs	r1, r3, #16
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	3302      	adds	r3, #2
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	b2ca      	uxtb	r2, r1
 80024de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	0e19      	lsrs	r1, r3, #24
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	3303      	adds	r3, #3
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	b2ca      	uxtb	r2, r1
 80024ee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	3304      	adds	r3, #4
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3301      	adds	r3, #1
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	e7ce      	b.n	800249c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69d9      	ldr	r1, [r3, #28]
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	4413      	add	r3, r2
 8002508:	b2ca      	uxtb	r2, r1
 800250a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	0a19      	lsrs	r1, r3, #8
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	3301      	adds	r3, #1
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	4413      	add	r3, r2
 800251a:	b2ca      	uxtb	r2, r1
 800251c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	0c19      	lsrs	r1, r3, #16
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	3302      	adds	r3, #2
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	4413      	add	r3, r2
 800252c:	b2ca      	uxtb	r2, r1
 800252e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	0e19      	lsrs	r1, r3, #24
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	3303      	adds	r3, #3
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	4413      	add	r3, r2
 800253e:	b2ca      	uxtb	r2, r1
 8002540:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	3304      	adds	r3, #4
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002548:	2300      	movs	r3, #0
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	429a      	cmp	r2, r3
 8002554:	d228      	bcs.n	80025a8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fd fe34 	bl	80001d0 <strlen>
 8002568:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	4413      	add	r3, r2
 8002570:	6979      	ldr	r1, [r7, #20]
 8002572:	4618      	mov	r0, r3
 8002574:	f001 fcb2 	bl	8003edc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	3304      	adds	r3, #4
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	18d0      	adds	r0, r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	4619      	mov	r1, r3
 8002594:	f00d f900 	bl	800f798 <memcpy>
      offset += length_stringsi;
 8002598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	4413      	add	r3, r2
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	3301      	adds	r3, #1
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	e7d1      	b.n	800254c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80025aa:	4618      	mov	r0, r3
 80025ac:	3728      	adds	r7, #40	; 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b08e      	sub	sp, #56	; 0x38
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80025c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	4413      	add	r3, r2
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80025ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025cc:	3301      	adds	r3, #1
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	4413      	add	r3, r2
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	021b      	lsls	r3, r3, #8
 80025d6:	6a3a      	ldr	r2, [r7, #32]
 80025d8:	4313      	orrs	r3, r2
 80025da:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80025dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025de:	3302      	adds	r3, #2
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	4413      	add	r3, r2
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	041b      	lsls	r3, r3, #16
 80025e8:	6a3a      	ldr	r2, [r7, #32]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80025ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f0:	3303      	adds	r3, #3
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	061b      	lsls	r3, r3, #24
 80025fa:	6a3a      	ldr	r2, [r7, #32]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002602:	3304      	adds	r3, #4
 8002604:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	6a3a      	ldr	r2, [r7, #32]
 800260c:	429a      	cmp	r2, r3
 800260e:	d90a      	bls.n	8002626 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4619      	mov	r1, r3
 800261a:	4610      	mov	r0, r2
 800261c:	f00d f978 	bl	800f910 <realloc>
 8002620:	4602      	mov	r2, r0
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a3a      	ldr	r2, [r7, #32]
 800262a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800262c:	2300      	movs	r3, #0
 800262e:	633b      	str	r3, [r7, #48]	; 0x30
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002636:	429a      	cmp	r2, r3
 8002638:	d236      	bcs.n	80026a8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002642:	6839      	ldr	r1, [r7, #0]
 8002644:	440a      	add	r2, r1
 8002646:	7812      	ldrb	r2, [r2, #0]
 8002648:	4313      	orrs	r3, r2
 800264a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002650:	3301      	adds	r3, #1
 8002652:	6839      	ldr	r1, [r7, #0]
 8002654:	440b      	add	r3, r1
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	021b      	lsls	r3, r3, #8
 800265a:	4313      	orrs	r3, r2
 800265c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002662:	3302      	adds	r3, #2
 8002664:	6839      	ldr	r1, [r7, #0]
 8002666:	440b      	add	r3, r1
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	041b      	lsls	r3, r3, #16
 800266c:	4313      	orrs	r3, r2
 800266e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002674:	3303      	adds	r3, #3
 8002676:	6839      	ldr	r1, [r7, #0]
 8002678:	440b      	add	r3, r1
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	061b      	lsls	r3, r3, #24
 800267e:	4313      	orrs	r3, r2
 8002680:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268a:	3304      	adds	r3, #4
 800268c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	3208      	adds	r2, #8
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80026a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a2:	3301      	adds	r3, #1
 80026a4:	633b      	str	r3, [r7, #48]	; 0x30
 80026a6:	e7c3      	b.n	8002630 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80026a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	4413      	add	r3, r2
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80026b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b4:	3301      	adds	r3, #1
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	4413      	add	r3, r2
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	69fa      	ldr	r2, [r7, #28]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80026c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c6:	3302      	adds	r3, #2
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	4413      	add	r3, r2
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	041b      	lsls	r3, r3, #16
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80026d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d8:	3303      	adds	r3, #3
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	4413      	add	r3, r2
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	061b      	lsls	r3, r3, #24
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80026e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ea:	3304      	adds	r3, #4
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	69fa      	ldr	r2, [r7, #28]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d90a      	bls.n	800270e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699a      	ldr	r2, [r3, #24]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4619      	mov	r1, r3
 8002702:	4610      	mov	r0, r2
 8002704:	f00d f904 	bl	800f910 <realloc>
 8002708:	4602      	mov	r2, r0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002714:	2300      	movs	r3, #0
 8002716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800271e:	429a      	cmp	r2, r3
 8002720:	d236      	bcs.n	8002790 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800272a:	6839      	ldr	r1, [r7, #0]
 800272c:	440a      	add	r2, r1
 800272e:	7812      	ldrb	r2, [r2, #0]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002738:	3301      	adds	r3, #1
 800273a:	6839      	ldr	r1, [r7, #0]
 800273c:	440b      	add	r3, r1
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274a:	3302      	adds	r3, #2
 800274c:	6839      	ldr	r1, [r7, #0]
 800274e:	440b      	add	r3, r1
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	041b      	lsls	r3, r3, #16
 8002754:	4313      	orrs	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275c:	3303      	adds	r3, #3
 800275e:	6839      	ldr	r1, [r7, #0]
 8002760:	440b      	add	r3, r1
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	061b      	lsls	r3, r3, #24
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002772:	3304      	adds	r3, #4
 8002774:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699a      	ldr	r2, [r3, #24]
 800277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	3214      	adds	r2, #20
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278a:	3301      	adds	r3, #1
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800278e:	e7c3      	b.n	8002718 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	4413      	add	r3, r2
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800279a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279c:	3301      	adds	r3, #1
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	4413      	add	r3, r2
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	021b      	lsls	r3, r3, #8
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80027ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ae:	3302      	adds	r3, #2
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	4413      	add	r3, r2
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	041b      	lsls	r3, r3, #16
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80027be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c0:	3303      	adds	r3, #3
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	4413      	add	r3, r2
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	061b      	lsls	r3, r3, #24
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80027d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d2:	3304      	adds	r3, #4
 80027d4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d90a      	bls.n	80027f6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4619      	mov	r1, r3
 80027ea:	4610      	mov	r0, r2
 80027ec:	f00d f890 	bl	800f910 <realloc>
 80027f0:	4602      	mov	r2, r0
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80027fc:	2300      	movs	r3, #0
 80027fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002806:	429a      	cmp	r2, r3
 8002808:	d23f      	bcs.n	800288a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800280a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	441a      	add	r2, r3
 8002810:	f107 030c 	add.w	r3, r7, #12
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f001 fb7e 	bl	8003f18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800281c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281e:	3304      	adds	r3, #4
 8002820:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
 8002826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4413      	add	r3, r2
 800282c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282e:	429a      	cmp	r2, r3
 8002830:	d20c      	bcs.n	800284c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	441a      	add	r2, r3
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	3b01      	subs	r3, #1
 800283c:	6839      	ldr	r1, [r7, #0]
 800283e:	440b      	add	r3, r1
 8002840:	7812      	ldrb	r2, [r2, #0]
 8002842:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	3301      	adds	r3, #1
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
 800284a:	e7ec      	b.n	8002826 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800284c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4413      	add	r3, r2
 8002852:	3b01      	subs	r3, #1
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	4413      	add	r3, r2
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800285c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285e:	3b01      	subs	r3, #1
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	441a      	add	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002868:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4413      	add	r3, r2
 800286e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	3220      	adds	r2, #32
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002884:	3301      	adds	r3, #1
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
 8002888:	e7ba      	b.n	8002800 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800288a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800288c:	4618      	mov	r0, r3
 800288e:	3738      	adds	r7, #56	; 0x38
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	0800ff2c 	.word	0x0800ff2c

080028b0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	0800fbcc 	.word	0x0800fbcc

080028cc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	611a      	str	r2, [r3, #16]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68d8      	ldr	r0, [r3, #12]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6891      	ldr	r1, [r2, #8]
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	4798      	blx	r3
 8002918:	4603      	mov	r3, r0
  };
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
  }
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <_ZN13STM32HardwareC1Ev>:
extern struct ringbuffer rb;

class STM32Hardware
{
public:
	STM32Hardware() {
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
	}
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <_ZN13STM32Hardware4initEv>:

	void init() {
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <_ZN13STM32Hardware4readEv>:

	// Read a byte of data from ROS connection.
	// If no data , returns -1
	int read()
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	{
		uint32_t r;
		uint8_t ch = -1;
 800296c:	23ff      	movs	r3, #255	; 0xff
 800296e:	72fb      	strb	r3, [r7, #11]

		r = ringbuffer_getchar(&rb, &ch);
 8002970:	f107 030b 	add.w	r3, r7, #11
 8002974:	4619      	mov	r1, r3
 8002976:	4807      	ldr	r0, [pc, #28]	; (8002994 <_ZN13STM32Hardware4readEv+0x30>)
 8002978:	f002 faa8 	bl	8004ecc <_Z18ringbuffer_getcharP10ringbufferPh>
 800297c:	60f8      	str	r0, [r7, #12]

		if (1 == r)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <_ZN13STM32Hardware4readEv+0x24>
			return ch;
 8002984:	7afb      	ldrb	r3, [r7, #11]
 8002986:	e001      	b.n	800298c <_ZN13STM32Hardware4readEv+0x28>
		else
			return -1;
 8002988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	200004c8 	.word	0x200004c8

08002998 <_ZN13STM32Hardware5writeEPhi>:


	// Send a byte of data to ROS connection
	void write(uint8_t* data, int length)
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
	{
		CDC_Transmit_FS(data, length);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	4619      	mov	r1, r3
 80029aa:	68b8      	ldr	r0, [r7, #8]
 80029ac:	f00c fa5c 	bl	800ee68 <CDC_Transmit_FS>
	}
 80029b0:	bf00      	nop
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_ZN13STM32Hardware4timeEv>:

	// Returns milliseconds since start of program
	unsigned long time(void)
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	{
		return HAL_GetTick();
 80029c0:	f002 fb42 	bl	8005048 <HAL_GetTick>
 80029c4:	4603      	mov	r3, r0
	}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <_ZN8std_msgs4Int8C1Ev>:
  {
    public:
      typedef int8_t _data_type;
      _data_type data;

    Int8():
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
      data(0)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff f940 	bl	8001c60 <_ZN3ros3MsgC1Ev>
 80029e0:	4a05      	ldr	r2, [pc, #20]	; (80029f8 <_ZN8std_msgs4Int8C1Ev+0x28>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	711a      	strb	r2, [r3, #4]
    {
    }
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	08010024 	.word	0x08010024

080029fc <_ZNK8std_msgs4Int89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002a10:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	7a3a      	ldrb	r2, [r7, #8]
 8002a1a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	60fb      	str	r3, [r7, #12]
      return offset;
 8002a22:	68fb      	ldr	r3, [r7, #12]
    }
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <_ZN8std_msgs4Int811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a42:	7a3a      	ldrb	r2, [r7, #8]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6839      	ldr	r1, [r7, #0]
 8002a48:	440b      	add	r3, r1
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8002a52:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
     return offset;
 8002a60:	68fb      	ldr	r3, [r7, #12]
    }
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <_ZN8std_msgs4Int87getTypeEv>:

    const char * getType(){ return "std_msgs/Int8"; };
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <_ZN8std_msgs4Int87getTypeEv+0x18>)
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	0800fbf0 	.word	0x0800fbf0

08002a8c <_ZN8std_msgs4Int86getMD5Ev>:
    const char * getMD5(){ return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <_ZN8std_msgs4Int86getMD5Ev+0x18>)
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	0800fc00 	.word	0x0800fc00

08002aa8 <_ZN8std_msgs5UInt8C1Ev>:
  {
    public:
      typedef uint8_t _data_type;
      _data_type data;

    UInt8():
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
      data(0)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff f8d4 	bl	8001c60 <_ZN3ros3MsgC1Ev>
 8002ab8:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <_ZN8std_msgs5UInt8C1Ev+0x28>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	711a      	strb	r2, [r3, #4]
    {
    }
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	0801000c 	.word	0x0801000c

08002ad4 <_ZNK8std_msgs5UInt89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	7912      	ldrb	r2, [r2, #4]
 8002aec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	3301      	adds	r3, #1
 8002af2:	60fb      	str	r3, [r7, #12]
      return offset;
 8002af4:	68fb      	ldr	r3, [r7, #12]
    }
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	4413      	add	r3, r2
 8002b16:	781a      	ldrb	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	60fb      	str	r3, [r7, #12]
     return offset;
 8002b22:	68fb      	ldr	r3, [r7, #12]
    }
 8002b24:	4618      	mov	r0, r3
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <_ZN8std_msgs5UInt87getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8"; };
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	4b03      	ldr	r3, [pc, #12]	; (8002b48 <_ZN8std_msgs5UInt87getTypeEv+0x18>)
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	0800fc24 	.word	0x0800fc24

08002b4c <_ZN8std_msgs5UInt86getMD5Ev>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <_ZN8std_msgs5UInt86getMD5Ev+0x18>)
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	0800fc34 	.word	0x0800fc34

08002b68 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff f874 	bl	8001c60 <_ZN3ros3MsgC1Ev>
 8002b78:	4a08      	ldr	r2, [pc, #32]	; (8002b9c <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a07      	ldr	r2, [pc, #28]	; (8002ba0 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	60da      	str	r2, [r3, #12]
    {
    }
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	0800fff4 	.word	0x0800fff4
 8002ba0:	0800fb50 	.word	0x0800fb50

08002ba4 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fd fb0a 	bl	80001d0 <strlen>
 8002bbc:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f001 f988 	bl	8003edc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	18d0      	adds	r0, r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	4619      	mov	r1, r3
 8002be0:	f00c fdda 	bl	800f798 <memcpy>
      offset += length_label;
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	4413      	add	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6899      	ldr	r1, [r3, #8]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	b2ca      	uxtb	r2, r1
 8002bf8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	0a19      	lsrs	r1, r3, #8
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3301      	adds	r3, #1
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	4413      	add	r3, r2
 8002c08:	b2ca      	uxtb	r2, r1
 8002c0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	0c19      	lsrs	r1, r3, #16
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	3302      	adds	r3, #2
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	4413      	add	r3, r2
 8002c1a:	b2ca      	uxtb	r2, r1
 8002c1c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	0e19      	lsrs	r1, r3, #24
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3303      	adds	r3, #3
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	b2ca      	uxtb	r2, r1
 8002c2e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	3304      	adds	r3, #4
 8002c34:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68d9      	ldr	r1, [r3, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	4413      	add	r3, r2
 8002c40:	b2ca      	uxtb	r2, r1
 8002c42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	0a19      	lsrs	r1, r3, #8
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	4413      	add	r3, r2
 8002c52:	b2ca      	uxtb	r2, r1
 8002c54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	0c19      	lsrs	r1, r3, #16
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	3302      	adds	r3, #2
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	4413      	add	r3, r2
 8002c64:	b2ca      	uxtb	r2, r1
 8002c66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	0e19      	lsrs	r1, r3, #24
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3303      	adds	r3, #3
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	4413      	add	r3, r2
 8002c76:	b2ca      	uxtb	r2, r1
 8002c78:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c80:	68fb      	ldr	r3, [r7, #12]
    }
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b086      	sub	sp, #24
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	441a      	add	r2, r3
 8002c9e:	f107 030c 	add.w	r3, r7, #12
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f001 f937 	bl	8003f18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	3304      	adds	r3, #4
 8002cae:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4413      	add	r3, r2
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d20c      	bcs.n	8002cda <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	441a      	add	r2, r3
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	6839      	ldr	r1, [r7, #0]
 8002ccc:	440b      	add	r3, r1
 8002cce:	7812      	ldrb	r2, [r2, #0]
 8002cd0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	e7ec      	b.n	8002cb4 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_label-1]=0;
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4413      	add	r3, r2
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	441a      	add	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	4413      	add	r3, r2
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	3301      	adds	r3, #1
 8002d14:	6839      	ldr	r1, [r7, #0]
 8002d16:	440b      	add	r3, r1
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	3302      	adds	r3, #2
 8002d2a:	6839      	ldr	r1, [r7, #0]
 8002d2c:	440b      	add	r3, r1
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	041b      	lsls	r3, r3, #16
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	3303      	adds	r3, #3
 8002d40:	6839      	ldr	r1, [r7, #0]
 8002d42:	440b      	add	r3, r1
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	061b      	lsls	r3, r3, #24
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	3304      	adds	r3, #4
 8002d52:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	4413      	add	r3, r2
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	6839      	ldr	r1, [r7, #0]
 8002d6c:	440b      	add	r3, r1
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	3302      	adds	r3, #2
 8002d80:	6839      	ldr	r1, [r7, #0]
 8002d82:	440b      	add	r3, r1
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	041b      	lsls	r3, r3, #16
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	3303      	adds	r3, #3
 8002d96:	6839      	ldr	r1, [r7, #0]
 8002d98:	440b      	add	r3, r1
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	061b      	lsls	r3, r3, #24
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	3304      	adds	r3, #4
 8002da8:	613b      	str	r3, [r7, #16]
     return offset;
 8002daa:	693b      	ldr	r3, [r7, #16]
    }
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	0800fc58 	.word	0x0800fc58

08002dd0 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	0800fc78 	.word	0x0800fc78

08002dec <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe ff32 	bl	8001c60 <_ZN3ros3MsgC1Ev>
 8002dfc:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	605a      	str	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3308      	adds	r3, #8
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff feab 	bl	8002b68 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	619a      	str	r2, [r3, #24]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	61da      	str	r2, [r3, #28]
    {
    }
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	0800ffdc 	.word	0x0800ffdc

08002e2c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6859      	ldr	r1, [r3, #4]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	4413      	add	r3, r2
 8002e44:	b2ca      	uxtb	r2, r1
 8002e46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	0a19      	lsrs	r1, r3, #8
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	3301      	adds	r3, #1
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	4413      	add	r3, r2
 8002e56:	b2ca      	uxtb	r2, r1
 8002e58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	0c19      	lsrs	r1, r3, #16
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3302      	adds	r3, #2
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	4413      	add	r3, r2
 8002e68:	b2ca      	uxtb	r2, r1
 8002e6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	0e19      	lsrs	r1, r3, #24
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3303      	adds	r3, #3
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	4413      	add	r3, r2
 8002e7a:	b2ca      	uxtb	r2, r1
 8002e7c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	3304      	adds	r3, #4
 8002e82:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002e84:	2300      	movs	r3, #0
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d218      	bcs.n	8002ec4 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x98>
      offset += this->dim[i].serialize(outbuffer + offset);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	18d0      	adds	r0, r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699a      	ldr	r2, [r3, #24]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	4413      	add	r3, r2
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	6839      	ldr	r1, [r7, #0]
 8002eae:	440a      	add	r2, r1
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4798      	blx	r3
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4413      	add	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	e7e1      	b.n	8002e88 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69d9      	ldr	r1, [r3, #28]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	4413      	add	r3, r2
 8002ece:	b2ca      	uxtb	r2, r1
 8002ed0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	0a19      	lsrs	r1, r3, #8
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3301      	adds	r3, #1
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	4413      	add	r3, r2
 8002ee0:	b2ca      	uxtb	r2, r1
 8002ee2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	0c19      	lsrs	r1, r3, #16
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	3302      	adds	r3, #2
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	b2ca      	uxtb	r2, r1
 8002ef4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	0e19      	lsrs	r1, r3, #24
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3303      	adds	r3, #3
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	b2ca      	uxtb	r2, r1
 8002f06:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	60fb      	str	r3, [r7, #12]
      return offset;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
    }
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	3301      	adds	r3, #1
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	4413      	add	r3, r2
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	021b      	lsls	r3, r3, #8
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	3302      	adds	r3, #2
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	4413      	add	r3, r2
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	041b      	lsls	r3, r3, #16
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3303      	adds	r3, #3
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	061b      	lsls	r3, r3, #24
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d90a      	bls.n	8002f8c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4610      	mov	r0, r2
 8002f82:	f00c fcc5 	bl	800f910 <realloc>
 8002f86:	4602      	mov	r2, r0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8002f92:	2300      	movs	r3, #0
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d21b      	bcs.n	8002fd8 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xc0>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f103 0008 	add.w	r0, r3, #8
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	4619      	mov	r1, r3
 8002fae:	f7ff fe6c 	bl	8002c8a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	18d0      	adds	r0, r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3308      	adds	r3, #8
 8002fc8:	2210      	movs	r2, #16
 8002fca:	4619      	mov	r1, r3
 8002fcc:	f00c fbe4 	bl	800f798 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	e7de      	b.n	8002f96 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7e>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	4413      	add	r3, r2
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69da      	ldr	r2, [r3, #28]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	3301      	adds	r3, #1
 8002fee:	6839      	ldr	r1, [r7, #0]
 8002ff0:	440b      	add	r3, r1
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	3302      	adds	r3, #2
 8003004:	6839      	ldr	r1, [r7, #0]
 8003006:	440b      	add	r3, r1
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	041b      	lsls	r3, r3, #16
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69da      	ldr	r2, [r3, #28]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	3303      	adds	r3, #3
 800301a:	6839      	ldr	r1, [r7, #0]
 800301c:	440b      	add	r3, r1
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	061b      	lsls	r3, r3, #24
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	3304      	adds	r3, #4
 800302c:	617b      	str	r3, [r7, #20]
     return offset;
 800302e:	697b      	ldr	r3, [r7, #20]
    }
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	4b03      	ldr	r3, [pc, #12]	; (8003050 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	0800fc9c 	.word	0x0800fc9c

08003054 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	4b03      	ldr	r3, [pc, #12]	; (800306c <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 800305e:	4618      	mov	r0, r3
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	0800fcb8 	.word	0x0800fcb8

08003070 <_ZN8std_msgs15UInt8MultiArrayC1Ev>:
      uint32_t data_length;
      typedef uint8_t _data_type;
      _data_type st_data;
      _data_type * data;

    UInt8MultiArray():
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), data(NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe fdf0 	bl	8001c60 <_ZN3ros3MsgC1Ev>
 8003080:	4a09      	ldr	r2, [pc, #36]	; (80030a8 <_ZN8std_msgs15UInt8MultiArrayC1Ev+0x38>)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3304      	adds	r3, #4
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff feae 	bl	8002dec <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	625a      	str	r2, [r3, #36]	; 0x24
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	0800ffc4 	.word	0x0800ffc4

080030ac <_ZNK8std_msgs15UInt8MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
      offset += this->layout.serialize(outbuffer + offset);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	1d18      	adds	r0, r3, #4
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	4413      	add	r3, r2
 80030c4:	4619      	mov	r1, r3
 80030c6:	f7ff feb1 	bl	8002e2c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 80030ca:	4602      	mov	r2, r0
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4413      	add	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	4413      	add	r3, r2
 80030dc:	b2ca      	uxtb	r2, r1
 80030de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	0a19      	lsrs	r1, r3, #8
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	3301      	adds	r3, #1
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	4413      	add	r3, r2
 80030ee:	b2ca      	uxtb	r2, r1
 80030f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	0c19      	lsrs	r1, r3, #16
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3302      	adds	r3, #2
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	4413      	add	r3, r2
 8003100:	b2ca      	uxtb	r2, r1
 8003102:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	0e19      	lsrs	r1, r3, #24
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3303      	adds	r3, #3
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	4413      	add	r3, r2
 8003112:	b2ca      	uxtb	r2, r1
 8003114:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3304      	adds	r3, #4
 800311a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < data_length; i++){
 800311c:	2300      	movs	r3, #0
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	429a      	cmp	r2, r3
 8003128:	d20f      	bcs.n	800314a <_ZNK8std_msgs15UInt8MultiArray9serializeEPh+0x9e>
      *(outbuffer + offset + 0) = (this->data[i] >> (8 * 0)) & 0xFF;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	441a      	add	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6839      	ldr	r1, [r7, #0]
 8003136:	440b      	add	r3, r1
 8003138:	7812      	ldrb	r2, [r2, #0]
 800313a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3301      	adds	r3, #1
 8003140:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < data_length; i++){
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	3301      	adds	r3, #1
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	e7ea      	b.n	8003120 <_ZNK8std_msgs15UInt8MultiArray9serializeEPh+0x74>
      }
      return offset;
 800314a:	68fb      	ldr	r3, [r7, #12]
    }
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	1d18      	adds	r0, r3, #4
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	4413      	add	r3, r2
 800316c:	4619      	mov	r1, r3
 800316e:	f7ff fed3 	bl	8002f18 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8003172:	4602      	mov	r2, r0
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	4413      	add	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	4413      	add	r3, r2
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	3301      	adds	r3, #1
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	4413      	add	r3, r2
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	3302      	adds	r3, #2
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	4413      	add	r3, r2
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	041b      	lsls	r3, r3, #16
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	3303      	adds	r3, #3
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	4413      	add	r3, r2
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	061b      	lsls	r3, r3, #24
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	3304      	adds	r3, #4
 80031be:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d908      	bls.n	80031dc <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0x88>
        this->data = (uint8_t*)realloc(this->data, data_lengthT * sizeof(uint8_t));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ce:	68f9      	ldr	r1, [r7, #12]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f00c fb9d 	bl	800f910 <realloc>
 80031d6:	4602      	mov	r2, r0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d215      	bcs.n	800321c <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0xc8>
      this->st_data =  ((uint8_t) (*(inbuffer + offset)));
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	4413      	add	r3, r2
 80031f6:	781a      	ldrb	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	3301      	adds	r3, #1
 8003202:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(uint8_t));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4413      	add	r3, r2
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	3228      	adds	r2, #40	; 0x28
 8003210:	7812      	ldrb	r2, [r2, #0]
 8003212:	701a      	strb	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	3301      	adds	r3, #1
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	e7e4      	b.n	80031e6 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0x92>
      }
     return offset;
 800321c:	697b      	ldr	r3, [r7, #20]
    }
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <_ZN8std_msgs15UInt8MultiArray7getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8MultiArray"; };
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	4b03      	ldr	r3, [pc, #12]	; (8003240 <_ZN8std_msgs15UInt8MultiArray7getTypeEv+0x18>)
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	0800fcdc 	.word	0x0800fcdc

08003244 <_ZN8std_msgs15UInt8MultiArray6getMD5Ev>:
    const char * getMD5(){ return "82373f1612381bb6ee473b5cd6f5d89c"; };
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <_ZN8std_msgs15UInt8MultiArray6getMD5Ev+0x18>)
 800324e:	4618      	mov	r0, r3
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	0800fcf8 	.word	0x0800fcf8

08003260 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe fcf8 	bl	8001c60 <_ZN3ros3MsgC1Ev>
 8003270:	4a09      	ldr	r2, [pc, #36]	; (8003298 <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	609a      	str	r2, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	60da      	str	r2, [r3, #12]
    {
    }
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4618      	mov	r0, r3
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	0800ffac 	.word	0x0800ffac

0800329c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	441a      	add	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80032b6:	eeb0 0a67 	vmov.f32	s0, s15
 80032ba:	4610      	mov	r0, r2
 80032bc:	f7fe fbf2 	bl	8001aa4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80032c0:	4602      	mov	r2, r0
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4413      	add	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	441a      	add	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80032d4:	eeb0 0a67 	vmov.f32	s0, s15
 80032d8:	4610      	mov	r0, r2
 80032da:	f7fe fbe3 	bl	8001aa4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80032de:	4602      	mov	r2, r0
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	441a      	add	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80032f2:	eeb0 0a67 	vmov.f32	s0, s15
 80032f6:	4610      	mov	r0, r2
 80032f8:	f7fe fbd4 	bl	8001aa4 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4413      	add	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
      return offset;
 8003304:	68fb      	ldr	r3, [r7, #12]
    }
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800330e:	b580      	push	{r7, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	441a      	add	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3304      	adds	r3, #4
 8003326:	4619      	mov	r1, r3
 8003328:	4610      	mov	r0, r2
 800332a:	f7fe fc27 	bl	8001b7c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800332e:	4602      	mov	r2, r0
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4413      	add	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	441a      	add	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3308      	adds	r3, #8
 8003340:	4619      	mov	r1, r3
 8003342:	4610      	mov	r0, r2
 8003344:	f7fe fc1a 	bl	8001b7c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4413      	add	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	441a      	add	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	330c      	adds	r3, #12
 800335a:	4619      	mov	r1, r3
 800335c:	4610      	mov	r0, r2
 800335e:	f7fe fc0d 	bl	8001b7c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003362:	4602      	mov	r2, r0
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
     return offset;
 800336a:	68fb      	ldr	r3, [r7, #12]
    }
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	4b03      	ldr	r3, [pc, #12]	; (800338c <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800337e:	4618      	mov	r0, r3
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	0800fd1c 	.word	0x0800fd1c

08003390 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	4b03      	ldr	r3, [pc, #12]	; (80033a8 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	0800fd34 	.word	0x0800fd34

080033ac <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fe fc52 	bl	8001c60 <_ZN3ros3MsgC1Ev>
 80033bc:	4a09      	ldr	r2, [pc, #36]	; (80033e4 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	605a      	str	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3308      	adds	r3, #8
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fe fc35 	bl	8001c3c <_ZN3ros4TimeC1Ev>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 80033d6:	611a      	str	r2, [r3, #16]
    {
    }
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	0800ff94 	.word	0x0800ff94
 80033e8:	0800fb50 	.word	0x0800fb50

080033ec <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6859      	ldr	r1, [r3, #4]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	4413      	add	r3, r2
 8003404:	b2ca      	uxtb	r2, r1
 8003406:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	0a19      	lsrs	r1, r3, #8
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	3301      	adds	r3, #1
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	4413      	add	r3, r2
 8003416:	b2ca      	uxtb	r2, r1
 8003418:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	0c19      	lsrs	r1, r3, #16
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3302      	adds	r3, #2
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	4413      	add	r3, r2
 8003428:	b2ca      	uxtb	r2, r1
 800342a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	0e19      	lsrs	r1, r3, #24
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3303      	adds	r3, #3
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	4413      	add	r3, r2
 800343a:	b2ca      	uxtb	r2, r1
 800343c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3304      	adds	r3, #4
 8003442:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6899      	ldr	r1, [r3, #8]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	4413      	add	r3, r2
 800344e:	b2ca      	uxtb	r2, r1
 8003450:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	0a19      	lsrs	r1, r3, #8
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3301      	adds	r3, #1
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	4413      	add	r3, r2
 8003460:	b2ca      	uxtb	r2, r1
 8003462:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	0c19      	lsrs	r1, r3, #16
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	3302      	adds	r3, #2
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	4413      	add	r3, r2
 8003472:	b2ca      	uxtb	r2, r1
 8003474:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	0e19      	lsrs	r1, r3, #24
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3303      	adds	r3, #3
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	4413      	add	r3, r2
 8003484:	b2ca      	uxtb	r2, r1
 8003486:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	3304      	adds	r3, #4
 800348c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68d9      	ldr	r1, [r3, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	4413      	add	r3, r2
 8003498:	b2ca      	uxtb	r2, r1
 800349a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	0a19      	lsrs	r1, r3, #8
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3301      	adds	r3, #1
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	4413      	add	r3, r2
 80034aa:	b2ca      	uxtb	r2, r1
 80034ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	0c19      	lsrs	r1, r3, #16
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3302      	adds	r3, #2
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	4413      	add	r3, r2
 80034bc:	b2ca      	uxtb	r2, r1
 80034be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	0e19      	lsrs	r1, r3, #24
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3303      	adds	r3, #3
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	4413      	add	r3, r2
 80034ce:	b2ca      	uxtb	r2, r1
 80034d0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	3304      	adds	r3, #4
 80034d6:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fc fe77 	bl	80001d0 <strlen>
 80034e2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	4413      	add	r3, r2
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fcf5 	bl	8003edc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	3304      	adds	r3, #4
 80034f6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	18d0      	adds	r0, r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	4619      	mov	r1, r3
 8003506:	f00c f947 	bl	800f798 <memcpy>
      offset += length_frame_id;
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4413      	add	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
      return offset;
 8003512:	68fb      	ldr	r3, [r7, #12]
    }
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003526:	2300      	movs	r3, #0
 8003528:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	4413      	add	r3, r2
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	3301      	adds	r3, #1
 8003540:	6839      	ldr	r1, [r7, #0]
 8003542:	440b      	add	r3, r1
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	3302      	adds	r3, #2
 8003556:	6839      	ldr	r1, [r7, #0]
 8003558:	440b      	add	r3, r1
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	041b      	lsls	r3, r3, #16
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	3303      	adds	r3, #3
 800356c:	6839      	ldr	r1, [r7, #0]
 800356e:	440b      	add	r3, r1
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	061b      	lsls	r3, r3, #24
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	3304      	adds	r3, #4
 800357e:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	4413      	add	r3, r2
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	461a      	mov	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	3301      	adds	r3, #1
 8003596:	6839      	ldr	r1, [r7, #0]
 8003598:	440b      	add	r3, r1
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	3302      	adds	r3, #2
 80035ac:	6839      	ldr	r1, [r7, #0]
 80035ae:	440b      	add	r3, r1
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	041b      	lsls	r3, r3, #16
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	3303      	adds	r3, #3
 80035c2:	6839      	ldr	r1, [r7, #0]
 80035c4:	440b      	add	r3, r1
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	061b      	lsls	r3, r3, #24
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	3304      	adds	r3, #4
 80035d4:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	4413      	add	r3, r2
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	3301      	adds	r3, #1
 80035ec:	6839      	ldr	r1, [r7, #0]
 80035ee:	440b      	add	r3, r1
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	3302      	adds	r3, #2
 8003602:	6839      	ldr	r1, [r7, #0]
 8003604:	440b      	add	r3, r1
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	041b      	lsls	r3, r3, #16
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	3303      	adds	r3, #3
 8003618:	6839      	ldr	r1, [r7, #0]
 800361a:	440b      	add	r3, r1
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	061b      	lsls	r3, r3, #24
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	3304      	adds	r3, #4
 800362a:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	441a      	add	r2, r3
 8003632:	f107 030c 	add.w	r3, r7, #12
 8003636:	4611      	mov	r1, r2
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fc6d 	bl	8003f18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	3304      	adds	r3, #4
 8003642:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4413      	add	r3, r2
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	429a      	cmp	r2, r3
 8003652:	d20c      	bcs.n	800366e <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	441a      	add	r2, r3
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	3b01      	subs	r3, #1
 800365e:	6839      	ldr	r1, [r7, #0]
 8003660:	440b      	add	r3, r1
 8003662:	7812      	ldrb	r2, [r2, #0]
 8003664:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	3301      	adds	r3, #1
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	e7ec      	b.n	8003648 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4413      	add	r3, r2
 8003674:	3b01      	subs	r3, #1
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	4413      	add	r3, r2
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	3b01      	subs	r3, #1
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	441a      	add	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
     return offset;
 8003692:	693b      	ldr	r3, [r7, #16]
    }
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	4b03      	ldr	r3, [pc, #12]	; (80036b4 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	0800fd58 	.word	0x0800fd58

080036b8 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	4b03      	ldr	r3, [pc, #12]	; (80036d0 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	0800fd68 	.word	0x0800fd68

080036d4 <_ZN11sensor_msgs5RangeC1Ev>:
      typedef float _range_type;
      _range_type range;
      enum { ULTRASOUND = 0 };
      enum { INFRARED = 1 };

    Range():
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
      header(),
      radiation_type(0),
      field_of_view(0),
      min_range(0),
      max_range(0),
      range(0)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe fabe 	bl	8001c60 <_ZN3ros3MsgC1Ev>
 80036e4:	4a0f      	ldr	r2, [pc, #60]	; (8003724 <_ZN11sensor_msgs5RangeC1Ev+0x50>)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3304      	adds	r3, #4
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff fe5c 	bl	80033ac <_ZN8std_msgs6HeaderC1Ev>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	761a      	strb	r2, [r3, #24]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	61da      	str	r2, [r3, #28]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	621a      	str	r2, [r3, #32]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	625a      	str	r2, [r3, #36]	; 0x24
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	0800ff7c 	.word	0x0800ff7c

08003728 <_ZNK11sensor_msgs5Range9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
      offset += this->header.serialize(outbuffer + offset);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	1d18      	adds	r0, r3, #4
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	4413      	add	r3, r2
 8003740:	4619      	mov	r1, r3
 8003742:	f7ff fe53 	bl	80033ec <_ZNK8std_msgs6Header9serializeEPh>
 8003746:	4602      	mov	r2, r0
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	4413      	add	r3, r2
 800374c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->radiation_type >> (8 * 0)) & 0xFF;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	4413      	add	r3, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	7e12      	ldrb	r2, [r2, #24]
 8003758:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->radiation_type);
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3301      	adds	r3, #1
 800375e:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_field_of_view;
      u_field_of_view.real = this->field_of_view;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	61bb      	str	r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_field_of_view.base >> (8 * 0)) & 0xFF;
 8003766:	69b9      	ldr	r1, [r7, #24]
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	4413      	add	r3, r2
 800376e:	b2ca      	uxtb	r2, r1
 8003770:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_field_of_view.base >> (8 * 1)) & 0xFF;
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	0a19      	lsrs	r1, r3, #8
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3301      	adds	r3, #1
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	4413      	add	r3, r2
 800377e:	b2ca      	uxtb	r2, r1
 8003780:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_field_of_view.base >> (8 * 2)) & 0xFF;
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	0c19      	lsrs	r1, r3, #16
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3302      	adds	r3, #2
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	4413      	add	r3, r2
 800378e:	b2ca      	uxtb	r2, r1
 8003790:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_field_of_view.base >> (8 * 3)) & 0xFF;
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	0e19      	lsrs	r1, r3, #24
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	3303      	adds	r3, #3
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	4413      	add	r3, r2
 800379e:	b2ca      	uxtb	r2, r1
 80037a0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->field_of_view);
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3304      	adds	r3, #4
 80037a6:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_min_range;
      u_min_range.real = this->min_range;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_min_range.base >> (8 * 0)) & 0xFF;
 80037ae:	6979      	ldr	r1, [r7, #20]
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	4413      	add	r3, r2
 80037b6:	b2ca      	uxtb	r2, r1
 80037b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_min_range.base >> (8 * 1)) & 0xFF;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	0a19      	lsrs	r1, r3, #8
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	3301      	adds	r3, #1
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	4413      	add	r3, r2
 80037c6:	b2ca      	uxtb	r2, r1
 80037c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_min_range.base >> (8 * 2)) & 0xFF;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	0c19      	lsrs	r1, r3, #16
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3302      	adds	r3, #2
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	4413      	add	r3, r2
 80037d6:	b2ca      	uxtb	r2, r1
 80037d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_min_range.base >> (8 * 3)) & 0xFF;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	0e19      	lsrs	r1, r3, #24
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3303      	adds	r3, #3
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	4413      	add	r3, r2
 80037e6:	b2ca      	uxtb	r2, r1
 80037e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->min_range);
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	3304      	adds	r3, #4
 80037ee:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_max_range;
      u_max_range.real = this->max_range;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_max_range.base >> (8 * 0)) & 0xFF;
 80037f6:	6939      	ldr	r1, [r7, #16]
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	4413      	add	r3, r2
 80037fe:	b2ca      	uxtb	r2, r1
 8003800:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_max_range.base >> (8 * 1)) & 0xFF;
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	0a19      	lsrs	r1, r3, #8
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3301      	adds	r3, #1
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	4413      	add	r3, r2
 800380e:	b2ca      	uxtb	r2, r1
 8003810:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_max_range.base >> (8 * 2)) & 0xFF;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	0c19      	lsrs	r1, r3, #16
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3302      	adds	r3, #2
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	4413      	add	r3, r2
 800381e:	b2ca      	uxtb	r2, r1
 8003820:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_max_range.base >> (8 * 3)) & 0xFF;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	0e19      	lsrs	r1, r3, #24
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3303      	adds	r3, #3
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	4413      	add	r3, r2
 800382e:	b2ca      	uxtb	r2, r1
 8003830:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->max_range);
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	3304      	adds	r3, #4
 8003836:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_range;
      u_range.real = this->range;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_range.base >> (8 * 0)) & 0xFF;
 800383e:	68f9      	ldr	r1, [r7, #12]
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	4413      	add	r3, r2
 8003846:	b2ca      	uxtb	r2, r1
 8003848:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_range.base >> (8 * 1)) & 0xFF;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	0a19      	lsrs	r1, r3, #8
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3301      	adds	r3, #1
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	4413      	add	r3, r2
 8003856:	b2ca      	uxtb	r2, r1
 8003858:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_range.base >> (8 * 2)) & 0xFF;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	0c19      	lsrs	r1, r3, #16
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	3302      	adds	r3, #2
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	4413      	add	r3, r2
 8003866:	b2ca      	uxtb	r2, r1
 8003868:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_range.base >> (8 * 3)) & 0xFF;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	0e19      	lsrs	r1, r3, #24
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3303      	adds	r3, #3
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	4413      	add	r3, r2
 8003876:	b2ca      	uxtb	r2, r1
 8003878:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->range);
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3304      	adds	r3, #4
 800387e:	61fb      	str	r3, [r7, #28]
      return offset;
 8003880:	69fb      	ldr	r3, [r7, #28]
    }
 8003882:	4618      	mov	r0, r3
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <_ZN11sensor_msgs5Range11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800388a:	b580      	push	{r7, lr}
 800388c:	b088      	sub	sp, #32
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	61fb      	str	r3, [r7, #28]
      offset += this->header.deserialize(inbuffer + offset);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	1d18      	adds	r0, r3, #4
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	4413      	add	r3, r2
 80038a2:	4619      	mov	r1, r3
 80038a4:	f7ff fe3a 	bl	800351c <_ZN8std_msgs6Header11deserializeEPh>
 80038a8:	4602      	mov	r2, r0
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	4413      	add	r3, r2
 80038ae:	61fb      	str	r3, [r7, #28]
      this->radiation_type =  ((uint8_t) (*(inbuffer + offset)));
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	4413      	add	r3, r2
 80038b6:	781a      	ldrb	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	761a      	strb	r2, [r3, #24]
      offset += sizeof(this->radiation_type);
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	3301      	adds	r3, #1
 80038c0:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_field_of_view;
      u_field_of_view.base = 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61bb      	str	r3, [r7, #24]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	6839      	ldr	r1, [r7, #0]
 80038cc:	440a      	add	r2, r1
 80038ce:	7812      	ldrb	r2, [r2, #0]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3301      	adds	r3, #1
 80038da:	6839      	ldr	r1, [r7, #0]
 80038dc:	440b      	add	r3, r1
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	021b      	lsls	r3, r3, #8
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	3302      	adds	r3, #2
 80038ec:	6839      	ldr	r1, [r7, #0]
 80038ee:	440b      	add	r3, r1
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	041b      	lsls	r3, r3, #16
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3303      	adds	r3, #3
 80038fe:	6839      	ldr	r1, [r7, #0]
 8003900:	440b      	add	r3, r1
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	061b      	lsls	r3, r3, #24
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
      this->field_of_view = u_field_of_view.real;
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->field_of_view);
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	3304      	adds	r3, #4
 8003914:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_min_range;
      u_min_range.base = 0;
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	6839      	ldr	r1, [r7, #0]
 8003920:	440a      	add	r2, r1
 8003922:	7812      	ldrb	r2, [r2, #0]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	3301      	adds	r3, #1
 800392e:	6839      	ldr	r1, [r7, #0]
 8003930:	440b      	add	r3, r1
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	4313      	orrs	r3, r2
 8003938:	617b      	str	r3, [r7, #20]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	3302      	adds	r3, #2
 8003940:	6839      	ldr	r1, [r7, #0]
 8003942:	440b      	add	r3, r1
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	041b      	lsls	r3, r3, #16
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	3303      	adds	r3, #3
 8003952:	6839      	ldr	r1, [r7, #0]
 8003954:	440b      	add	r3, r1
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	061b      	lsls	r3, r3, #24
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]
      this->min_range = u_min_range.real;
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	621a      	str	r2, [r3, #32]
      offset += sizeof(this->min_range);
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	3304      	adds	r3, #4
 8003968:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_max_range;
      u_max_range.base = 0;
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	69fa      	ldr	r2, [r7, #28]
 8003972:	6839      	ldr	r1, [r7, #0]
 8003974:	440a      	add	r2, r1
 8003976:	7812      	ldrb	r2, [r2, #0]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	3301      	adds	r3, #1
 8003982:	6839      	ldr	r1, [r7, #0]
 8003984:	440b      	add	r3, r1
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	3302      	adds	r3, #2
 8003994:	6839      	ldr	r1, [r7, #0]
 8003996:	440b      	add	r3, r1
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	041b      	lsls	r3, r3, #16
 800399c:	4313      	orrs	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	3303      	adds	r3, #3
 80039a6:	6839      	ldr	r1, [r7, #0]
 80039a8:	440b      	add	r3, r1
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	061b      	lsls	r3, r3, #24
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
      this->max_range = u_max_range.real;
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24
      offset += sizeof(this->max_range);
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	3304      	adds	r3, #4
 80039bc:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_range;
      u_range.base = 0;
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	6839      	ldr	r1, [r7, #0]
 80039c8:	440a      	add	r2, r1
 80039ca:	7812      	ldrb	r2, [r2, #0]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3301      	adds	r3, #1
 80039d6:	6839      	ldr	r1, [r7, #0]
 80039d8:	440b      	add	r3, r1
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	3302      	adds	r3, #2
 80039e8:	6839      	ldr	r1, [r7, #0]
 80039ea:	440b      	add	r3, r1
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	041b      	lsls	r3, r3, #16
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	3303      	adds	r3, #3
 80039fa:	6839      	ldr	r1, [r7, #0]
 80039fc:	440b      	add	r3, r1
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	061b      	lsls	r3, r3, #24
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
      this->range = u_range.real;
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->range);
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	3304      	adds	r3, #4
 8003a10:	61fb      	str	r3, [r7, #28]
     return offset;
 8003a12:	69fb      	ldr	r3, [r7, #28]
    }
 8003a14:	4618      	mov	r0, r3
 8003a16:	3720      	adds	r7, #32
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <_ZN11sensor_msgs5Range7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Range"; };
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	4b03      	ldr	r3, [pc, #12]	; (8003a34 <_ZN11sensor_msgs5Range7getTypeEv+0x18>)
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	0800fd8c 	.word	0x0800fd8c

08003a38 <_ZN11sensor_msgs5Range6getMD5Ev>:
    const char * getMD5(){ return "c005c34273dc426c67a020a87bc24148"; };
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	4b03      	ldr	r3, [pc, #12]	; (8003a50 <_ZN11sensor_msgs5Range6getMD5Ev+0x18>)
 8003a42:	4618      	mov	r0, r3
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	0800fda0 	.word	0x0800fda0

08003a54 <rpm_rightFront_subCb>:
//static nbt_t sensor14_data_nbt;
//static nbt_t sensor15_data_nbt;
//static nbt_t sensor16_data_nbt;

extern "C" void rpm_rightFront_subCb(const std_msgs::Int8& msg)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	dd08      	ble.n	8003a78 <rpm_rightFront_subCb+0x24>
		speedDataRightFrontWheel = msg.data;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8003a6c:	4b14      	ldr	r3, [pc, #80]	; (8003ac0 <rpm_rightFront_subCb+0x6c>)
 8003a6e:	701a      	strb	r2, [r3, #0]
		sideDataRightFrontWheel = 0; //CW
 8003a70:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <rpm_rightFront_subCb+0x70>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	701a      	strb	r2, [r3, #0]
	}
	else if (msg.data == 0) {
		speedDataRightFrontWheel = 0;
		sideDataRightFrontWheel = 2;
	}
}
 8003a76:	e01d      	b.n	8003ab4 <rpm_rightFront_subCb+0x60>
	else if (msg.data <= -6) {
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003a7e:	f113 0f05 	cmn.w	r3, #5
 8003a82:	da0c      	bge.n	8003a9e <rpm_rightFront_subCb+0x4a>
		speedDataRightFrontWheel = -(msg.data);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	425b      	negs	r3, r3
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	b25a      	sxtb	r2, r3
 8003a92:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <rpm_rightFront_subCb+0x6c>)
 8003a94:	701a      	strb	r2, [r3, #0]
		sideDataRightFrontWheel = 1; //CCW
 8003a96:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <rpm_rightFront_subCb+0x70>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	701a      	strb	r2, [r3, #0]
}
 8003a9c:	e00a      	b.n	8003ab4 <rpm_rightFront_subCb+0x60>
	else if (msg.data == 0) {
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d105      	bne.n	8003ab4 <rpm_rightFront_subCb+0x60>
		speedDataRightFrontWheel = 0;
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <rpm_rightFront_subCb+0x6c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
		sideDataRightFrontWheel = 2;
 8003aae:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <rpm_rightFront_subCb+0x70>)
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	701a      	strb	r2, [r3, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	20000465 	.word	0x20000465
 8003ac4:	20000469 	.word	0x20000469

08003ac8 <rpm_leftFront_subCb>:

extern "C" void rpm_leftFront_subCb(const std_msgs::Int8& msg)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003ad6:	2b05      	cmp	r3, #5
 8003ad8:	dd08      	ble.n	8003aec <rpm_leftFront_subCb+0x24>
		speedDataLeftFrontWheel = msg.data;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8003ae0:	4b12      	ldr	r3, [pc, #72]	; (8003b2c <rpm_leftFront_subCb+0x64>)
 8003ae2:	701a      	strb	r2, [r3, #0]
		sideDataLeftFrontWheel = 1; //CCW
 8003ae4:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <rpm_leftFront_subCb+0x68>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	701a      	strb	r2, [r3, #0]
	}
	else {
		speedDataLeftFrontWheel = 0;
		sideDataLeftFrontWheel = 2;
	}
}
 8003aea:	e018      	b.n	8003b1e <rpm_leftFront_subCb+0x56>
	else if (msg.data <= -6) {
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003af2:	f113 0f05 	cmn.w	r3, #5
 8003af6:	da0c      	bge.n	8003b12 <rpm_leftFront_subCb+0x4a>
		speedDataLeftFrontWheel = -(msg.data);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	425b      	negs	r3, r3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	b25a      	sxtb	r2, r3
 8003b06:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <rpm_leftFront_subCb+0x64>)
 8003b08:	701a      	strb	r2, [r3, #0]
		sideDataLeftFrontWheel = 0; //CW
 8003b0a:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <rpm_leftFront_subCb+0x68>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]
}
 8003b10:	e005      	b.n	8003b1e <rpm_leftFront_subCb+0x56>
		speedDataLeftFrontWheel = 0;
 8003b12:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <rpm_leftFront_subCb+0x64>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	701a      	strb	r2, [r3, #0]
		sideDataLeftFrontWheel = 2;
 8003b18:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <rpm_leftFront_subCb+0x68>)
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	701a      	strb	r2, [r3, #0]
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20000466 	.word	0x20000466
 8003b30:	2000046a 	.word	0x2000046a

08003b34 <rpm_rightBack_subCb>:

extern "C" void rpm_rightBack_subCb(const std_msgs::Int8& msg)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003b42:	2b05      	cmp	r3, #5
 8003b44:	dd08      	ble.n	8003b58 <rpm_rightBack_subCb+0x24>
		speedDataRightBackWheel = msg.data;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8003b4c:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <rpm_rightBack_subCb+0x64>)
 8003b4e:	701a      	strb	r2, [r3, #0]
		sideDataRightBackWheel = 0; //CW
 8003b50:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <rpm_rightBack_subCb+0x68>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	701a      	strb	r2, [r3, #0]
	}
	else {
		speedDataRightBackWheel = 0;
		sideDataRightBackWheel = 2;
	}
}
 8003b56:	e018      	b.n	8003b8a <rpm_rightBack_subCb+0x56>
	else if (msg.data <= -6) {
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003b5e:	f113 0f05 	cmn.w	r3, #5
 8003b62:	da0c      	bge.n	8003b7e <rpm_rightBack_subCb+0x4a>
		speedDataRightBackWheel = -(msg.data);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	425b      	negs	r3, r3
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	b25a      	sxtb	r2, r3
 8003b72:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <rpm_rightBack_subCb+0x64>)
 8003b74:	701a      	strb	r2, [r3, #0]
		sideDataRightBackWheel = 1; //CCW
 8003b76:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <rpm_rightBack_subCb+0x68>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	701a      	strb	r2, [r3, #0]
}
 8003b7c:	e005      	b.n	8003b8a <rpm_rightBack_subCb+0x56>
		speedDataRightBackWheel = 0;
 8003b7e:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <rpm_rightBack_subCb+0x64>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	701a      	strb	r2, [r3, #0]
		sideDataRightBackWheel = 2;
 8003b84:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <rpm_rightBack_subCb+0x68>)
 8003b86:	2202      	movs	r2, #2
 8003b88:	701a      	strb	r2, [r3, #0]
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000467 	.word	0x20000467
 8003b9c:	2000046b 	.word	0x2000046b

08003ba0 <rpm_leftBack_subCb>:

extern "C" void rpm_leftBack_subCb(const std_msgs::Int8& msg)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003bae:	2b05      	cmp	r3, #5
 8003bb0:	dd08      	ble.n	8003bc4 <rpm_leftBack_subCb+0x24>
		speedDataLeftBackWheel = msg.data;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8003bb8:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <rpm_leftBack_subCb+0x64>)
 8003bba:	701a      	strb	r2, [r3, #0]
		sideDataLeftBackWheel = 1; //CCW
 8003bbc:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <rpm_leftBack_subCb+0x68>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	701a      	strb	r2, [r3, #0]
	}
	else {
		speedDataLeftBackWheel = 0;
		sideDataLeftBackWheel = 2;
	}
}
 8003bc2:	e018      	b.n	8003bf6 <rpm_leftBack_subCb+0x56>
	else if (msg.data <= -6) {
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003bca:	f113 0f05 	cmn.w	r3, #5
 8003bce:	da0c      	bge.n	8003bea <rpm_leftBack_subCb+0x4a>
		speedDataLeftBackWheel = -(msg.data);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	425b      	negs	r3, r3
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	b25a      	sxtb	r2, r3
 8003bde:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <rpm_leftBack_subCb+0x64>)
 8003be0:	701a      	strb	r2, [r3, #0]
		sideDataLeftBackWheel = 0; //CW
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <rpm_leftBack_subCb+0x68>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
}
 8003be8:	e005      	b.n	8003bf6 <rpm_leftBack_subCb+0x56>
		speedDataLeftBackWheel = 0;
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <rpm_leftBack_subCb+0x64>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
		sideDataLeftBackWheel = 2;
 8003bf0:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <rpm_leftBack_subCb+0x68>)
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	701a      	strb	r2, [r3, #0]
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000468 	.word	0x20000468
 8003c08:	2000046c 	.word	0x2000046c

08003c0c <cdc_receive_put>:

extern "C" void cdc_receive_put(uint8_t value)
	{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	71fb      	strb	r3, [r7, #7]
		ringbuffer_putchar(&rb, value);
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4803      	ldr	r0, [pc, #12]	; (8003c28 <cdc_receive_put+0x1c>)
 8003c1c:	f001 f901 	bl	8004e22 <_Z18ringbuffer_putcharP10ringbufferh>
	}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	200004c8 	.word	0x200004c8

08003c2c <init_ROS>:
extern "C" void init_ROS(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
	ringbuffer_init(&rb, RxBuffer, RxBufferSize);
 8003c30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c34:	492c      	ldr	r1, [pc, #176]	; (8003ce8 <init_ROS+0xbc>)
 8003c36:	482d      	ldr	r0, [pc, #180]	; (8003cec <init_ROS+0xc0>)
 8003c38:	f001 f999 	bl	8004f6e <_Z15ringbuffer_initP10ringbufferPhs>
	// Initialize ROS
	nh.initNode();
 8003c3c:	482c      	ldr	r0, [pc, #176]	; (8003cf0 <init_ROS+0xc4>)
 8003c3e:	f000 fa53 	bl	80040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

	nh.subscribe(rpm_rightFront_sub);
 8003c42:	492c      	ldr	r1, [pc, #176]	; (8003cf4 <init_ROS+0xc8>)
 8003c44:	482a      	ldr	r0, [pc, #168]	; (8003cf0 <init_ROS+0xc4>)
 8003c46:	f000 fa6c 	bl	8004122 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.subscribe(rpm_leftFront_sub);
 8003c4a:	492b      	ldr	r1, [pc, #172]	; (8003cf8 <init_ROS+0xcc>)
 8003c4c:	4828      	ldr	r0, [pc, #160]	; (8003cf0 <init_ROS+0xc4>)
 8003c4e:	f000 fa68 	bl	8004122 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.subscribe(rpm_rightBack_sub);
 8003c52:	492a      	ldr	r1, [pc, #168]	; (8003cfc <init_ROS+0xd0>)
 8003c54:	4826      	ldr	r0, [pc, #152]	; (8003cf0 <init_ROS+0xc4>)
 8003c56:	f000 fa64 	bl	8004122 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.subscribe(rpm_leftBack_sub);
 8003c5a:	4929      	ldr	r1, [pc, #164]	; (8003d00 <init_ROS+0xd4>)
 8003c5c:	4824      	ldr	r0, [pc, #144]	; (8003cf0 <init_ROS+0xc4>)
 8003c5e:	f000 fa60 	bl	8004122 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>

	nh.advertise(stm);
 8003c62:	4928      	ldr	r1, [pc, #160]	; (8003d04 <init_ROS+0xd8>)
 8003c64:	4822      	ldr	r0, [pc, #136]	; (8003cf0 <init_ROS+0xc4>)
 8003c66:	f000 fa89 	bl	800417c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(gyro);
 8003c6a:	4927      	ldr	r1, [pc, #156]	; (8003d08 <init_ROS+0xdc>)
 8003c6c:	4820      	ldr	r0, [pc, #128]	; (8003cf0 <init_ROS+0xc4>)
 8003c6e:	f000 fa85 	bl	800417c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(accel);
 8003c72:	4926      	ldr	r1, [pc, #152]	; (8003d0c <init_ROS+0xe0>)
 8003c74:	481e      	ldr	r0, [pc, #120]	; (8003cf0 <init_ROS+0xc4>)
 8003c76:	f000 fa81 	bl	800417c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_left_front);
 8003c7a:	4925      	ldr	r1, [pc, #148]	; (8003d10 <init_ROS+0xe4>)
 8003c7c:	481c      	ldr	r0, [pc, #112]	; (8003cf0 <init_ROS+0xc4>)
 8003c7e:	f000 fa7d 	bl	800417c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_right_front);
 8003c82:	4924      	ldr	r1, [pc, #144]	; (8003d14 <init_ROS+0xe8>)
 8003c84:	481a      	ldr	r0, [pc, #104]	; (8003cf0 <init_ROS+0xc4>)
 8003c86:	f000 fa79 	bl	800417c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_left_back);
 8003c8a:	4923      	ldr	r1, [pc, #140]	; (8003d18 <init_ROS+0xec>)
 8003c8c:	4818      	ldr	r0, [pc, #96]	; (8003cf0 <init_ROS+0xc4>)
 8003c8e:	f000 fa75 	bl	800417c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_right_back);
 8003c92:	4922      	ldr	r1, [pc, #136]	; (8003d1c <init_ROS+0xf0>)
 8003c94:	4816      	ldr	r0, [pc, #88]	; (8003cf0 <init_ROS+0xc4>)
 8003c96:	f000 fa71 	bl	800417c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	nh.advertise(laser_sensors_data);
 8003c9a:	4921      	ldr	r1, [pc, #132]	; (8003d20 <init_ROS+0xf4>)
 8003c9c:	4814      	ldr	r0, [pc, #80]	; (8003cf0 <init_ROS+0xc4>)
 8003c9e:	f000 fa6d 	bl	800417c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
//	nh.advertise(laser_sensor_data_13);
//	nh.advertise(laser_sensor_data_14);
//	nh.advertise(laser_sensor_data_15);
//	nh.advertise(laser_sensor_data_16);

	NBT_init(&rpm_left_front_nbt, 9);
 8003ca2:	2109      	movs	r1, #9
 8003ca4:	481f      	ldr	r0, [pc, #124]	; (8003d24 <init_ROS+0xf8>)
 8003ca6:	f001 f820 	bl	8004cea <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_right_front_nbt, 9);
 8003caa:	2109      	movs	r1, #9
 8003cac:	481e      	ldr	r0, [pc, #120]	; (8003d28 <init_ROS+0xfc>)
 8003cae:	f001 f81c 	bl	8004cea <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_left_back_nbt, 9);
 8003cb2:	2109      	movs	r1, #9
 8003cb4:	481d      	ldr	r0, [pc, #116]	; (8003d2c <init_ROS+0x100>)
 8003cb6:	f001 f818 	bl	8004cea <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_right_back_nbt, 9);
 8003cba:	2109      	movs	r1, #9
 8003cbc:	481c      	ldr	r0, [pc, #112]	; (8003d30 <init_ROS+0x104>)
 8003cbe:	f001 f814 	bl	8004cea <_Z8NBT_initP5nbt_tm>

	NBT_init(&laser_sensors_data_nbt, 9);
 8003cc2:	2109      	movs	r1, #9
 8003cc4:	481b      	ldr	r0, [pc, #108]	; (8003d34 <init_ROS+0x108>)
 8003cc6:	f001 f810 	bl	8004cea <_Z8NBT_initP5nbt_tm>

	//NBT_init(&state_nbt, 9);

	NBT_init(&gyro_nbt, 5);
 8003cca:	2105      	movs	r1, #5
 8003ccc:	481a      	ldr	r0, [pc, #104]	; (8003d38 <init_ROS+0x10c>)
 8003cce:	f001 f80c 	bl	8004cea <_Z8NBT_initP5nbt_tm>
	NBT_init(&accel_nbt, 5);
 8003cd2:	2105      	movs	r1, #5
 8003cd4:	4819      	ldr	r0, [pc, #100]	; (8003d3c <init_ROS+0x110>)
 8003cd6:	f001 f808 	bl	8004cea <_Z8NBT_initP5nbt_tm>

	NBT_init(&ros_nbt, 1);
 8003cda:	2101      	movs	r1, #1
 8003cdc:	4818      	ldr	r0, [pc, #96]	; (8003d40 <init_ROS+0x114>)
 8003cde:	f001 f804 	bl	8004cea <_Z8NBT_initP5nbt_tm>
//	NBT_init(&sensor12_data_nbt, 5);
//	NBT_init(&sensor13_data_nbt, 5);
//	NBT_init(&sensor14_data_nbt, 5);
//	NBT_init(&sensor15_data_nbt, 5);
//	NBT_init(&sensor16_data_nbt, 5);
}
 8003ce2:	bf00      	nop
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	200060d8 	.word	0x200060d8
 8003cec:	200004c8 	.word	0x200004c8
 8003cf0:	200004d4 	.word	0x200004d4
 8003cf4:	20000dc8 	.word	0x20000dc8
 8003cf8:	20000de4 	.word	0x20000de4
 8003cfc:	20000e00 	.word	0x20000e00
 8003d00:	20000e1c 	.word	0x20000e1c
 8003d04:	20000d3c 	.word	0x20000d3c
 8003d08:	20000d50 	.word	0x20000d50
 8003d0c:	20000d64 	.word	0x20000d64
 8003d10:	20000d8c 	.word	0x20000d8c
 8003d14:	20000d78 	.word	0x20000d78
 8003d18:	20000db4 	.word	0x20000db4
 8003d1c:	20000da0 	.word	0x20000da0
 8003d20:	20000e38 	.word	0x20000e38
 8003d24:	20000e78 	.word	0x20000e78
 8003d28:	20000e70 	.word	0x20000e70
 8003d2c:	20000e88 	.word	0x20000e88
 8003d30:	20000e80 	.word	0x20000e80
 8003d34:	20000e98 	.word	0x20000e98
 8003d38:	20000e60 	.word	0x20000e60
 8003d3c:	20000e68 	.word	0x20000e68
 8003d40:	20000e90 	.word	0x20000e90

08003d44 <laser_sensors_data_handler>:

extern "C" void laser_sensors_data_handler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
	if (NBT_handler(&laser_sensors_data_nbt)) {
 8003d48:	480b      	ldr	r0, [pc, #44]	; (8003d78 <laser_sensors_data_handler+0x34>)
 8003d4a:	f000 ffdf 	bl	8004d0c <_Z11NBT_handlerP5nbt_t>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00f      	beq.n	8003d74 <laser_sensors_data_handler+0x30>
		laser_sensors_data_array.data_length = 16;
 8003d54:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <laser_sensors_data_handler+0x38>)
 8003d56:	2210      	movs	r2, #16
 8003d58:	625a      	str	r2, [r3, #36]	; 0x24
		laser_sensors_data_array.data = laser_sensor_data;
 8003d5a:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <laser_sensors_data_handler+0x38>)
 8003d5c:	4a08      	ldr	r2, [pc, #32]	; (8003d80 <laser_sensors_data_handler+0x3c>)
 8003d5e:	62da      	str	r2, [r3, #44]	; 0x2c
    	if (nh.connected()) {
 8003d60:	4808      	ldr	r0, [pc, #32]	; (8003d84 <laser_sensors_data_handler+0x40>)
 8003d62:	f000 fa39 	bl	80041d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <laser_sensors_data_handler+0x30>
    		laser_sensors_data.publish(&laser_sensors_data_array);
 8003d6c:	4903      	ldr	r1, [pc, #12]	; (8003d7c <laser_sensors_data_handler+0x38>)
 8003d6e:	4806      	ldr	r0, [pc, #24]	; (8003d88 <laser_sensors_data_handler+0x44>)
 8003d70:	f7fe fdc3 	bl	80028fa <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
	}
}
 8003d74:	bf00      	nop
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	20000e98 	.word	0x20000e98
 8003d7c:	20000a24 	.word	0x20000a24
 8003d80:	20000470 	.word	0x20000470
 8003d84:	200004d4 	.word	0x200004d4
 8003d88:	20000e38 	.word	0x20000e38

08003d8c <rpm_left_front_handler>:
    	}
	}
}

extern "C" void rpm_left_front_handler(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
	if (NBT_handler(&rpm_left_front_nbt))
 8003d90:	4815      	ldr	r0, [pc, #84]	; (8003de8 <rpm_left_front_handler+0x5c>)
 8003d92:	f000 ffbb 	bl	8004d0c <_Z11NBT_handlerP5nbt_t>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d022      	beq.n	8003de2 <rpm_left_front_handler+0x56>
	{
		if (sideRXDataLeftFrontWheel == 1) {
 8003d9c:	4b13      	ldr	r3, [pc, #76]	; (8003dec <rpm_left_front_handler+0x60>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d105      	bne.n	8003db0 <rpm_left_front_handler+0x24>
		    uint_msg_left_front.data = speedRXDataLeftFrontWheel;
 8003da4:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <rpm_left_front_handler+0x64>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	b25a      	sxtb	r2, r3
 8003daa:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <rpm_left_front_handler+0x68>)
 8003dac:	711a      	strb	r2, [r3, #4]
 8003dae:	e00e      	b.n	8003dce <rpm_left_front_handler+0x42>
		}
		else if (sideRXDataLeftFrontWheel == 2) {
 8003db0:	4b0e      	ldr	r3, [pc, #56]	; (8003dec <rpm_left_front_handler+0x60>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d107      	bne.n	8003dc8 <rpm_left_front_handler+0x3c>
		  	uint_msg_left_front.data = -speedRXDataLeftFrontWheel;
 8003db8:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <rpm_left_front_handler+0x64>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	425b      	negs	r3, r3
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	b25a      	sxtb	r2, r3
 8003dc2:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <rpm_left_front_handler+0x68>)
 8003dc4:	711a      	strb	r2, [r3, #4]
 8003dc6:	e002      	b.n	8003dce <rpm_left_front_handler+0x42>
		}
		else {
		  	uint_msg_left_front.data = 0;
 8003dc8:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <rpm_left_front_handler+0x68>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	711a      	strb	r2, [r3, #4]
		}
    	if (nh.connected()) {
 8003dce:	480a      	ldr	r0, [pc, #40]	; (8003df8 <rpm_left_front_handler+0x6c>)
 8003dd0:	f000 fa02 	bl	80041d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <rpm_left_front_handler+0x56>
    		rpm_left_front.publish(&uint_msg_left_front);
 8003dda:	4906      	ldr	r1, [pc, #24]	; (8003df4 <rpm_left_front_handler+0x68>)
 8003ddc:	4807      	ldr	r0, [pc, #28]	; (8003dfc <rpm_left_front_handler+0x70>)
 8003dde:	f7fe fd8c 	bl	80028fa <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
	}
}
 8003de2:	bf00      	nop
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000e78 	.word	0x20000e78
 8003dec:	20005160 	.word	0x20005160
 8003df0:	20004cc4 	.word	0x20004cc4
 8003df4:	20000a0c 	.word	0x20000a0c
 8003df8:	200004d4 	.word	0x200004d4
 8003dfc:	20000d8c 	.word	0x20000d8c

08003e00 <gyro_handler>:
		}
	}
}

extern "C" void gyro_handler(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
    gyro_msg.x = gyroX;
 8003e04:	4b0e      	ldr	r3, [pc, #56]	; (8003e40 <gyro_handler+0x40>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a0e      	ldr	r2, [pc, #56]	; (8003e44 <gyro_handler+0x44>)
 8003e0a:	6053      	str	r3, [r2, #4]
    gyro_msg.y = gyroY;
 8003e0c:	4b0e      	ldr	r3, [pc, #56]	; (8003e48 <gyro_handler+0x48>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a0c      	ldr	r2, [pc, #48]	; (8003e44 <gyro_handler+0x44>)
 8003e12:	6093      	str	r3, [r2, #8]
    gyro_msg.z = gyroZ;
 8003e14:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <gyro_handler+0x4c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a0a      	ldr	r2, [pc, #40]	; (8003e44 <gyro_handler+0x44>)
 8003e1a:	60d3      	str	r3, [r2, #12]
    if (nh.connected()) {
 8003e1c:	480c      	ldr	r0, [pc, #48]	; (8003e50 <gyro_handler+0x50>)
 8003e1e:	f000 f9db 	bl	80041d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d009      	beq.n	8003e3c <gyro_handler+0x3c>
    	if (NBT_handler(&gyro_nbt))
 8003e28:	480a      	ldr	r0, [pc, #40]	; (8003e54 <gyro_handler+0x54>)
 8003e2a:	f000 ff6f 	bl	8004d0c <_Z11NBT_handlerP5nbt_t>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <gyro_handler+0x3c>
    	{
    		gyro.publish(&gyro_msg);
 8003e34:	4903      	ldr	r1, [pc, #12]	; (8003e44 <gyro_handler+0x44>)
 8003e36:	4808      	ldr	r0, [pc, #32]	; (8003e58 <gyro_handler+0x58>)
 8003e38:	f7fe fd5f 	bl	80028fa <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
    }
}
 8003e3c:	bf00      	nop
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	20004c98 	.word	0x20004c98
 8003e44:	20000a5c 	.word	0x20000a5c
 8003e48:	20005194 	.word	0x20005194
 8003e4c:	20004cd4 	.word	0x20004cd4
 8003e50:	200004d4 	.word	0x200004d4
 8003e54:	20000e60 	.word	0x20000e60
 8003e58:	20000d50 	.word	0x20000d50

08003e5c <accel_handler>:

extern "C" void accel_handler(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
    accel_msg.x = accelX;
 8003e60:	4b0e      	ldr	r3, [pc, #56]	; (8003e9c <accel_handler+0x40>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <accel_handler+0x44>)
 8003e66:	6053      	str	r3, [r2, #4]
    accel_msg.y = accelY;
 8003e68:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <accel_handler+0x48>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a0c      	ldr	r2, [pc, #48]	; (8003ea0 <accel_handler+0x44>)
 8003e6e:	6093      	str	r3, [r2, #8]
    accel_msg.z = accelZ;
 8003e70:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <accel_handler+0x4c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a0a      	ldr	r2, [pc, #40]	; (8003ea0 <accel_handler+0x44>)
 8003e76:	60d3      	str	r3, [r2, #12]
    if (nh.connected()) {
 8003e78:	480c      	ldr	r0, [pc, #48]	; (8003eac <accel_handler+0x50>)
 8003e7a:	f000 f9ad 	bl	80041d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d009      	beq.n	8003e98 <accel_handler+0x3c>
    	if (NBT_handler(&accel_nbt))
 8003e84:	480a      	ldr	r0, [pc, #40]	; (8003eb0 <accel_handler+0x54>)
 8003e86:	f000 ff41 	bl	8004d0c <_Z11NBT_handlerP5nbt_t>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <accel_handler+0x3c>
    	{
    		accel.publish(&accel_msg);
 8003e90:	4903      	ldr	r1, [pc, #12]	; (8003ea0 <accel_handler+0x44>)
 8003e92:	4808      	ldr	r0, [pc, #32]	; (8003eb4 <accel_handler+0x58>)
 8003e94:	f7fe fd31 	bl	80028fa <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
    }
}
 8003e98:	bf00      	nop
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20004c2c 	.word	0x20004c2c
 8003ea0:	20000a6c 	.word	0x20000a6c
 8003ea4:	20004c24 	.word	0x20004c24
 8003ea8:	2000514c 	.word	0x2000514c
 8003eac:	200004d4 	.word	0x200004d4
 8003eb0:	20000e68 	.word	0x20000e68
 8003eb4:	20000d64 	.word	0x20000d64

08003eb8 <spinOnce>:


extern "C" void spinOnce(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
	if (NBT_handler(&ros_nbt))	{
 8003ebc:	4805      	ldr	r0, [pc, #20]	; (8003ed4 <spinOnce+0x1c>)
 8003ebe:	f000 ff25 	bl	8004d0c <_Z11NBT_handlerP5nbt_t>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <spinOnce+0x16>
		nh.spinOnce();
 8003ec8:	4803      	ldr	r0, [pc, #12]	; (8003ed8 <spinOnce+0x20>)
 8003eca:	f000 f992 	bl	80041f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	}
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000e90 	.word	0x20000e90
 8003ed8:	200004d4 	.word	0x200004d4

08003edc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d80d      	bhi.n	8003f0c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	fa22 f103 	lsr.w	r1, r2, r3
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4413      	add	r3, r2
 8003f00:	b2ca      	uxtb	r2, r1
 8003f02:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	3301      	adds	r3, #1
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	e7ee      	b.n	8003eea <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d811      	bhi.n	8003f56 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6839      	ldr	r1, [r7, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	440a      	add	r2, r1
 8003f3c:	7812      	ldrb	r2, [r2, #0]
 8003f3e:	4611      	mov	r1, r2
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	00d2      	lsls	r2, r2, #3
 8003f44:	fa01 f202 	lsl.w	r2, r1, r2
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3301      	adds	r3, #1
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	e7ea      	b.n	8003f2c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	4a04      	ldr	r2, [pc, #16]	; (8003f80 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4618      	mov	r0, r3
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	08010054 	.word	0x08010054

08003f84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff ffe8 	bl	8003f64 <_ZN3ros15NodeHandleBase_C1Ev>
 8003f94:	4a39      	ldr	r2, [pc, #228]	; (800407c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xf8>)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fe fccb 	bl	800293a <_ZN13STM32HardwareC1Ev>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe f9c8 	bl	8002348 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003fb8:	2300      	movs	r3, #0
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2b18      	cmp	r3, #24
 8003fc0:	d80a      	bhi.n	8003fd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003fca:	2100      	movs	r1, #0
 8003fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	e7f1      	b.n	8003fbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003fd8:	2300      	movs	r3, #0
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	2b18      	cmp	r3, #24
 8003fe0:	d80b      	bhi.n	8003ffa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	2200      	movs	r2, #0
 8003ff0:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	613b      	str	r3, [r7, #16]
 8003ff8:	e7f0      	b.n	8003fdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004004:	d209      	bcs.n	800401a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x96>
      message_in[i] = 0;
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4413      	add	r3, r2
 800400c:	3318      	adds	r3, #24
 800400e:	2200      	movs	r2, #0
 8004010:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3301      	adds	r3, #1
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	e7f1      	b.n	8003ffe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800401a:	2300      	movs	r3, #0
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004024:	d20a      	bcs.n	800403c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xb8>
      message_out[i] = 0;
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4413      	add	r3, r2
 800402c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8004030:	2200      	movs	r2, #0
 8004032:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	3301      	adds	r3, #1
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	e7f0      	b.n	800401e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    req_param_resp.floats_length = 0;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    req_param_resp.floats = NULL;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    req_param_resp.ints_length = 0;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514

    spin_timeout_ = 0;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	615a      	str	r2, [r3, #20]
  }
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	0800ff68 	.word	0x0800ff68

08004080 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	4a04      	ldr	r2, [pc, #16]	; (800409c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4618      	mov	r0, r3
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	0801003c 	.word	0x0801003c

080040a0 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff ffe5 	bl	8004080 <_ZN3ros11Subscriber_C1Ev>
 80040b6:	4a0b      	ldr	r2, [pc, #44]	; (80040e4 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei+0x44>)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	330c      	adds	r3, #12
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fe fc85 	bl	80029d0 <_ZN8std_msgs4Int8C1Ev>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	615a      	str	r2, [r3, #20]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	609a      	str	r2, [r3, #8]
  };
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	0800ff50 	.word	0x0800ff50

080040e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3304      	adds	r3, #4
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fe fc2b 	bl	8002950 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 800411a:	bf00      	nop
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8004122:	b480      	push	{r7}
 8004124:	b085      	sub	sp, #20
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b18      	cmp	r3, #24
 8004134:	dc1b      	bgt.n	800416e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10e      	bne.n	8004166 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	605a      	str	r2, [r3, #4]
        return true;
 8004162:	2301      	movs	r3, #1
 8004164:	e004      	b.n	8004170 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	3301      	adds	r3, #1
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	e7e0      	b.n	8004130 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0xe>
      }
    }
    return false;
 800416e:	2300      	movs	r3, #0
  }
 8004170:	4618      	mov	r0, r3
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2b18      	cmp	r3, #24
 800418e:	dc1c      	bgt.n	80041ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4e>
      if (publishers[i] == 0) // empty slot
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d110      	bne.n	80041c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80041a8:	6839      	ldr	r1, [r7, #0]
 80041aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	60da      	str	r2, [r3, #12]
        return true;
 80041be:	2301      	movs	r3, #1
 80041c0:	e004      	b.n	80041cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	3301      	adds	r3, #1
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	e7df      	b.n	800418a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80041ca:	2300      	movs	r3, #0
  }
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
    return configured_;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 80041e6:	4618      	mov	r0, r3
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3304      	adds	r3, #4
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe fbda 	bl	80029b8 <_ZN13STM32Hardware4timeEv>
 8004204:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004214:	4293      	cmp	r3, r2
 8004216:	d903      	bls.n	8004220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	429a      	cmp	r2, r3
 8004234:	d903      	bls.n	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d013      	beq.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3304      	adds	r3, #4
 800424a:	4618      	mov	r0, r3
 800424c:	f7fe fbb4 	bl	80029b8 <_ZN13STM32Hardware4timeEv>
 8004250:	4602      	mov	r2, r0
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	1ad2      	subs	r2, r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	429a      	cmp	r2, r3
 800425c:	bf8c      	ite	hi
 800425e:	2301      	movhi	r3, #1
 8004260:	2300      	movls	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8004268:	f06f 0301 	mvn.w	r3, #1
 800426c:	e193      	b.n	8004596 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      int data = hardware_.read();
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3304      	adds	r3, #4
 8004272:	4618      	mov	r0, r3
 8004274:	f7fe fb76 	bl	8002964 <_ZN13STM32Hardware4readEv>
 8004278:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	f2c0 8173 	blt.w	8004568 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x376>
      checksum_ += data;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	441a      	add	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004298:	2b07      	cmp	r3, #7
 800429a:	d11d      	bne.n	80042d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80042a2:	1c59      	adds	r1, r3, #1
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	b2d1      	uxtb	r1, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	4413      	add	r3, r2
 80042b2:	460a      	mov	r2, r1
 80042b4:	761a      	strb	r2, [r3, #24]
        bytes_--;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80042bc:	1e5a      	subs	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1b7      	bne.n	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2208      	movs	r2, #8
 80042d2:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80042d6:	e7b2      	b.n	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d128      	bne.n	8004334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2bff      	cmp	r3, #255	; 0xff
 80042e6:	d10d      	bne.n	8004304 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f103 0214 	add.w	r2, r3, #20
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8004302:	e79c      	b.n	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3304      	adds	r3, #4
 8004308:	4618      	mov	r0, r3
 800430a:	f7fe fb55 	bl	80029b8 <_ZN13STM32Hardware4timeEv>
 800430e:	4602      	mov	r2, r0
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f241 3288 	movw	r2, #5000	; 0x1388
 8004318:	4293      	cmp	r3, r2
 800431a:	bf8c      	ite	hi
 800431c:	2301      	movhi	r3, #1
 800431e:	2300      	movls	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d08b      	beq.n	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 800432e:	f06f 0301 	mvn.w	r3, #1
 8004332:	e130      	b.n	8004596 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800433a:	2b01      	cmp	r3, #1
 800433c:	d11b      	bne.n	8004376 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2bfe      	cmp	r3, #254	; 0xfe
 8004342:	d107      	bne.n	8004354 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004352:	e774      	b.n	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004362:	f083 0301 	eor.w	r3, r3, #1
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	f43f af68 	beq.w	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f915 	bl	800459e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004374:	e763      	b.n	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800437c:	2b02      	cmp	r3, #2
 800437e:	d113      	bne.n	80043a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 80043a6:	e74a      	b.n	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d110      	bne.n	80043d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	441a      	add	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80043d2:	e734      	b.n	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d116      	bne.n	800440c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80043e4:	425a      	negs	r2, r3
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	bf58      	it	pl
 80043ec:	4253      	negpl	r3, r2
 80043ee:	2bff      	cmp	r3, #255	; 0xff
 80043f0:	d107      	bne.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004400:	e71d      	b.n	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800440a:	e718      	b.n	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004412:	2b05      	cmp	r3, #5
 8004414:	d10f      	bne.n	8004436 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8004434:	e703      	b.n	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800443c:	2b06      	cmp	r3, #6
 800443e:	d117      	bne.n	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	021b      	lsls	r3, r3, #8
 800444a:	441a      	add	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2207      	movs	r2, #7
 8004456:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8004460:	2b00      	cmp	r3, #0
 8004462:	f47f aeec 	bne.w	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2208      	movs	r2, #8
 800446a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800446e:	e6e6      	b.n	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004476:	2b08      	cmp	r3, #8
 8004478:	f47f aee1 	bne.w	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800448a:	425a      	negs	r2, r3
 800448c:	b2db      	uxtb	r3, r3
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	bf58      	it	pl
 8004492:	4253      	negpl	r3, r2
 8004494:	2bff      	cmp	r3, #255	; 0xff
 8004496:	f47f aed2 	bne.w	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d110      	bne.n	80044c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f87a 	bl	800459e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f894 	bl	80045d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 80044c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044c4:	e067      	b.n	8004596 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
          else if (topic_ == TopicInfo::ID_TIME)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80044cc:	2b0a      	cmp	r3, #10
 80044ce:	d106      	bne.n	80044de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ec>
            syncTime(message_in);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3318      	adds	r3, #24
 80044d4:	4619      	mov	r1, r3
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f964 	bl	80047a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80044dc:	e6af      	b.n	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80044e4:	2b06      	cmp	r3, #6
 80044e6:	d10d      	bne.n	8004504 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
            req_param_resp.deserialize(message_in);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3318      	adds	r3, #24
 80044f2:	4619      	mov	r1, r3
 80044f4:	4610      	mov	r0, r2
 80044f6:	f7fe f85c 	bl	80025b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8004502:	e69c      	b.n	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800450a:	2b0b      	cmp	r3, #11
 800450c:	d104      	bne.n	8004518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x326>
            configured_ = false;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8004516:	e692      	b.n	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800451e:	3b64      	subs	r3, #100	; 0x64
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	f43f ae86 	beq.w	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004538:	3b64      	subs	r3, #100	; 0x64
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	6858      	ldr	r0, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800454c:	3b64      	subs	r3, #100	; 0x64
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	3218      	adds	r2, #24
 8004562:	4611      	mov	r1, r2
 8004564:	4798      	blx	r3
    while (true)
 8004566:	e66a      	b.n	800423e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004568:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00f      	beq.n	8004594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004582:	4293      	cmp	r3, r2
 8004584:	d906      	bls.n	8004594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
      requestSyncTime();
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f809 	bl	800459e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 8004594:	2300      	movs	r3, #0
  }
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800459e:	b580      	push	{r7, lr}
 80045a0:	b086      	sub	sp, #24
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80045a6:	f107 030c 	add.w	r3, r7, #12
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fd fb68 	bl	8001c80 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f107 020c 	add.w	r2, r7, #12
 80045ba:	210a      	movs	r1, #10
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	4798      	blx	r3
    rt_time = hardware_.time();
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3304      	adds	r3, #4
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fe f9f7 	bl	80029b8 <_ZN13STM32Hardware4timeEv>
 80045ca:	4602      	mov	r2, r0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	609a      	str	r2, [r3, #8]
  }
 80045d0:	bf00      	nop
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80045d8:	b590      	push	{r4, r7, lr}
 80045da:	b08b      	sub	sp, #44	; 0x2c
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80045e0:	f107 030c 	add.w	r3, r7, #12
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fd fc3b 	bl	8001e60 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80045ea:	2300      	movs	r3, #0
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	2b18      	cmp	r3, #24
 80045f2:	dc5e      	bgt.n	80046b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
    {
      if (publishers[i] != 0) // non-empty slot
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f8:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80045fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d052      	beq.n	80046aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd2>
      {
        ti.topic_id = publishers[i]->id_;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004608:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800460c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	b29b      	uxth	r3, r3
 8004614:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800461e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800462e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004632:	6859      	ldr	r1, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004638:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800463c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3308      	adds	r3, #8
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4608      	mov	r0, r1
 800464a:	4798      	blx	r3
 800464c:	4603      	mov	r3, r0
 800464e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004654:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800465c:	6859      	ldr	r1, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004662:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	330c      	adds	r3, #12
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4608      	mov	r0, r1
 8004674:	4798      	blx	r3
 8004676:	4603      	mov	r3, r0
 8004678:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800467a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800467e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681c      	ldr	r4, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800468a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800468e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004692:	4618      	mov	r0, r3
 8004694:	f7fe f945 	bl	8002922 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004698:	4601      	mov	r1, r0
 800469a:	f107 030c 	add.w	r3, r7, #12
 800469e:	461a      	mov	r2, r3
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	47a0      	blx	r4
        HAL_Delay(10);
 80046a4:	200a      	movs	r0, #10
 80046a6:	f000 fcdb 	bl	8005060 <HAL_Delay>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	3301      	adds	r3, #1
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
 80046b0:	e79d      	b.n	80045ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80046b2:	2300      	movs	r3, #0
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	2b18      	cmp	r3, #24
 80046ba:	dc6b      	bgt.n	8004794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1bc>
    {
      if (subscribers[i] != 0) // non-empty slot
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d05e      	beq.n	800478c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b4>
      {
        ti.topic_id = subscribers[i]->id_;
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	6859      	ldr	r1, [r3, #4]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3308      	adds	r3, #8
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4608      	mov	r0, r1
 8004718:	4798      	blx	r3
 800471a:	4603      	mov	r3, r0
 800471c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	6859      	ldr	r1, [r3, #4]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	330c      	adds	r3, #12
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4608      	mov	r0, r1
 8004742:	4798      	blx	r3
 8004744:	4603      	mov	r3, r0
 8004746:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004748:	f44f 7300 	mov.w	r3, #512	; 0x200
 800474c:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681c      	ldr	r4, [r3, #0]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	6859      	ldr	r1, [r3, #4]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3304      	adds	r3, #4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4608      	mov	r0, r1
 8004778:	4798      	blx	r3
 800477a:	4601      	mov	r1, r0
 800477c:	f107 030c 	add.w	r3, r7, #12
 8004780:	461a      	mov	r2, r3
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	47a0      	blx	r4
        HAL_Delay(10);
 8004786:	200a      	movs	r0, #10
 8004788:	f000 fc6a 	bl	8005060 <HAL_Delay>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	3301      	adds	r3, #1
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
 8004792:	e790      	b.n	80046b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
      }
    }
    configured_ = true;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 800479c:	bf00      	nop
 800479e:	372c      	adds	r7, #44	; 0x2c
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd90      	pop	{r4, r7, pc}

080047a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80047ae:	f107 0308 	add.w	r3, r7, #8
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fd fa64 	bl	8001c80 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3304      	adds	r3, #4
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fe f8fb 	bl	80029b8 <_ZN13STM32Hardware4timeEv>
 80047c2:	4602      	mov	r2, r0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80047cc:	f107 0308 	add.w	r3, r7, #8
 80047d0:	6839      	ldr	r1, [r7, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fd fac4 	bl	8001d60 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	4914      	ldr	r1, [pc, #80]	; (8004830 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 80047de:	fba1 1303 	umull	r1, r3, r1, r3
 80047e2:	099b      	lsrs	r3, r3, #6
 80047e4:	4413      	add	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80047e8:	6939      	ldr	r1, [r7, #16]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4b10      	ldr	r3, [pc, #64]	; (8004830 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 80047ee:	fba3 0302 	umull	r0, r3, r3, r2
 80047f2:	099b      	lsrs	r3, r3, #6
 80047f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047f8:	fb00 f303 	mul.w	r3, r0, r3
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	4a0d      	ldr	r2, [pc, #52]	; (8004834 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004800:	fb02 f303 	mul.w	r3, r2, r3
 8004804:	440b      	add	r3, r1
 8004806:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004808:	f107 0308 	add.w	r3, r7, #8
 800480c:	3304      	adds	r3, #4
 800480e:	4619      	mov	r1, r3
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f8a3 	bl	800495c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	3304      	adds	r3, #4
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe f8cc 	bl	80029b8 <_ZN13STM32Hardware4timeEv>
 8004820:	4602      	mov	r2, r0
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 8004828:	bf00      	nop
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	10624dd3 	.word	0x10624dd3
 8004834:	000f4240 	.word	0x000f4240

08004838 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2b63      	cmp	r3, #99	; 0x63
 8004848:	dd09      	ble.n	800485e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004850:	f083 0301 	eor.w	r3, r3, #1
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800485a:	2300      	movs	r3, #0
 800485c:	e077      	b.n	800494e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	f502 7206 	add.w	r2, r2, #536	; 0x218
 800486a:	3207      	adds	r2, #7
 800486c:	4611      	mov	r1, r2
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	4798      	blx	r3
 8004872:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	22ff      	movs	r2, #255	; 0xff
 8004878:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	22fe      	movs	r2, #254	; 0xfe
 8004880:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	b2da      	uxtb	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	b29b      	uxth	r3, r3
 8004892:	121b      	asrs	r3, r3, #8
 8004894:	b2da      	uxtb	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 80048a8:	4413      	add	r3, r2
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	43db      	mvns	r3, r3
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	b21b      	sxth	r3, r3
 80048c4:	121b      	asrs	r3, r3, #8
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 80048ce:	2300      	movs	r3, #0
 80048d0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80048d2:	2305      	movs	r3, #5
 80048d4:	61bb      	str	r3, [r7, #24]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	3307      	adds	r3, #7
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	429a      	cmp	r2, r3
 80048de:	da0d      	bge.n	80048fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	461a      	mov	r2, r3
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	4413      	add	r3, r2
 80048f2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	3301      	adds	r3, #1
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	e7ec      	b.n	80048d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	3307      	adds	r3, #7
 8004900:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	425a      	negs	r2, r3
 8004906:	b2db      	uxtb	r3, r3
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	bf58      	it	pl
 800490c:	4253      	negpl	r3, r2
 800490e:	b2da      	uxtb	r2, r3
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	1c59      	adds	r1, r3, #1
 8004914:	6179      	str	r1, [r7, #20]
 8004916:	43d2      	mvns	r2, r2
 8004918:	b2d1      	uxtb	r1, r2
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4413      	add	r3, r2
 800491e:	460a      	mov	r2, r1
 8004920:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800492a:	dc0a      	bgt.n	8004942 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	1d18      	adds	r0, r3, #4
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4619      	mov	r1, r3
 800493a:	f7fe f82d 	bl	8002998 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	e005      	b.n	800494e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004942:	4905      	ldr	r1, [pc, #20]	; (8004958 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 f847 	bl	80049d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800494a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 800494e:	4618      	mov	r0, r3
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	0800fdc4 	.word	0x0800fdc4

0800495c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3304      	adds	r3, #4
 800496a:	4618      	mov	r0, r3
 800496c:	f7fe f824 	bl	80029b8 <_ZN13STM32Hardware4timeEv>
 8004970:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4914      	ldr	r1, [pc, #80]	; (80049cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 800497a:	fba1 1303 	umull	r1, r3, r1, r3
 800497e:	099b      	lsrs	r3, r3, #6
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	1e5a      	subs	r2, r3, #1
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	6859      	ldr	r1, [r3, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4b0f      	ldr	r3, [pc, #60]	; (80049cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 8004990:	fba3 0302 	umull	r0, r3, r3, r2
 8004994:	099b      	lsrs	r3, r3, #6
 8004996:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800499a:	fb00 f303 	mul.w	r3, r0, r3
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	4a0b      	ldr	r2, [pc, #44]	; (80049d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	1aca      	subs	r2, r1, r3
 80049a8:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80049aa:	4413      	add	r3, r2
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f103 020c 	add.w	r2, r3, #12
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3310      	adds	r3, #16
 80049ba:	4619      	mov	r1, r3
 80049bc:	4610      	mov	r0, r2
 80049be:	f7fd f845 	bl	8001a4c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80049c2:	bf00      	nop
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	10624dd3 	.word	0x10624dd3
 80049d0:	000f4240 	.word	0x000f4240
 80049d4:	3b9aca00 	.word	0x3b9aca00

080049d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	2103      	movs	r1, #3
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f804 	bl	80049f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80049ec:	bf00      	nop
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	460b      	mov	r3, r1
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004a02:	f107 0314 	add.w	r3, r7, #20
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fd fbee 	bl	80021e8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004a0c:	7afb      	ldrb	r3, [r7, #11]
 8004a0e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f107 0214 	add.w	r2, r7, #20
 8004a1e:	2107      	movs	r1, #7
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	4798      	blx	r3
  }
 8004a24:	bf00      	nop
 8004a26:	3720      	adds	r7, #32
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <_Z41__static_initialization_and_destruction_0ii>:
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	f040 809f 	bne.w	8004b7c <_Z41__static_initialization_and_destruction_0ii+0x150>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a44:	4293      	cmp	r3, r2
 8004a46:	f040 8099 	bne.w	8004b7c <_Z41__static_initialization_and_destruction_0ii+0x150>
ros::NodeHandle nh;
 8004a4a:	484e      	ldr	r0, [pc, #312]	; (8004b84 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004a4c:	f7ff fa9a 	bl	8003f84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int8 uint_msg_right_front;
 8004a50:	484d      	ldr	r0, [pc, #308]	; (8004b88 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004a52:	f7fd ffbd 	bl	80029d0 <_ZN8std_msgs4Int8C1Ev>
std_msgs::Int8 uint_msg_left_front;
 8004a56:	484d      	ldr	r0, [pc, #308]	; (8004b8c <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8004a58:	f7fd ffba 	bl	80029d0 <_ZN8std_msgs4Int8C1Ev>
std_msgs::Int8 uint_msg_right_back;
 8004a5c:	484c      	ldr	r0, [pc, #304]	; (8004b90 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004a5e:	f7fd ffb7 	bl	80029d0 <_ZN8std_msgs4Int8C1Ev>
std_msgs::Int8 uint_msg_left_back;
 8004a62:	484c      	ldr	r0, [pc, #304]	; (8004b94 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004a64:	f7fd ffb4 	bl	80029d0 <_ZN8std_msgs4Int8C1Ev>
std_msgs::UInt8MultiArray laser_sensors_data_array;
 8004a68:	484b      	ldr	r0, [pc, #300]	; (8004b98 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004a6a:	f7fe fb01 	bl	8003070 <_ZN8std_msgs15UInt8MultiArrayC1Ev>
std_msgs::UInt8 state_data_msg;
 8004a6e:	484b      	ldr	r0, [pc, #300]	; (8004b9c <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004a70:	f7fe f81a 	bl	8002aa8 <_ZN8std_msgs5UInt8C1Ev>
geometry_msgs::Vector3 gyro_msg;
 8004a74:	484a      	ldr	r0, [pc, #296]	; (8004ba0 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004a76:	f7fe fbf3 	bl	8003260 <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 accel_msg;
 8004a7a:	484a      	ldr	r0, [pc, #296]	; (8004ba4 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004a7c:	f7fe fbf0 	bl	8003260 <_ZN13geometry_msgs7Vector3C1Ev>
sensor_msgs::Range laser_sensor_msg_1;
 8004a80:	4849      	ldr	r0, [pc, #292]	; (8004ba8 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004a82:	f7fe fe27 	bl	80036d4 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_2;
 8004a86:	4849      	ldr	r0, [pc, #292]	; (8004bac <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004a88:	f7fe fe24 	bl	80036d4 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_3;
 8004a8c:	4848      	ldr	r0, [pc, #288]	; (8004bb0 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004a8e:	f7fe fe21 	bl	80036d4 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_4;
 8004a92:	4848      	ldr	r0, [pc, #288]	; (8004bb4 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004a94:	f7fe fe1e 	bl	80036d4 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_5;
 8004a98:	4847      	ldr	r0, [pc, #284]	; (8004bb8 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004a9a:	f7fe fe1b 	bl	80036d4 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_6;
 8004a9e:	4847      	ldr	r0, [pc, #284]	; (8004bbc <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8004aa0:	f7fe fe18 	bl	80036d4 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_7;
 8004aa4:	4846      	ldr	r0, [pc, #280]	; (8004bc0 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004aa6:	f7fe fe15 	bl	80036d4 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_8;
 8004aaa:	4846      	ldr	r0, [pc, #280]	; (8004bc4 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8004aac:	f7fe fe12 	bl	80036d4 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_9;
 8004ab0:	4845      	ldr	r0, [pc, #276]	; (8004bc8 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004ab2:	f7fe fe0f 	bl	80036d4 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_10;
 8004ab6:	4845      	ldr	r0, [pc, #276]	; (8004bcc <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8004ab8:	f7fe fe0c 	bl	80036d4 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_11;
 8004abc:	4844      	ldr	r0, [pc, #272]	; (8004bd0 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8004abe:	f7fe fe09 	bl	80036d4 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_12;
 8004ac2:	4844      	ldr	r0, [pc, #272]	; (8004bd4 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8004ac4:	f7fe fe06 	bl	80036d4 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_13;
 8004ac8:	4843      	ldr	r0, [pc, #268]	; (8004bd8 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8004aca:	f7fe fe03 	bl	80036d4 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_14;
 8004ace:	4843      	ldr	r0, [pc, #268]	; (8004bdc <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8004ad0:	f7fe fe00 	bl	80036d4 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_15;
 8004ad4:	4842      	ldr	r0, [pc, #264]	; (8004be0 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8004ad6:	f7fe fdfd 	bl	80036d4 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_16;
 8004ada:	4842      	ldr	r0, [pc, #264]	; (8004be4 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8004adc:	f7fe fdfa 	bl	80036d4 <_ZN11sensor_msgs5RangeC1Ev>
ros::Publisher stm("stm", &gyro_msg);
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	4a2f      	ldr	r2, [pc, #188]	; (8004ba0 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004ae4:	4940      	ldr	r1, [pc, #256]	; (8004be8 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8004ae6:	4841      	ldr	r0, [pc, #260]	; (8004bec <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8004ae8:	f7fd fef0 	bl	80028cc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher gyro("gyro", &gyro_msg);
 8004aec:	2300      	movs	r3, #0
 8004aee:	4a2c      	ldr	r2, [pc, #176]	; (8004ba0 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004af0:	493f      	ldr	r1, [pc, #252]	; (8004bf0 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8004af2:	4840      	ldr	r0, [pc, #256]	; (8004bf4 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8004af4:	f7fd feea 	bl	80028cc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher accel("accel", &accel_msg);
 8004af8:	2300      	movs	r3, #0
 8004afa:	4a2a      	ldr	r2, [pc, #168]	; (8004ba4 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004afc:	493e      	ldr	r1, [pc, #248]	; (8004bf8 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8004afe:	483f      	ldr	r0, [pc, #252]	; (8004bfc <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8004b00:	f7fd fee4 	bl	80028cc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_right_front("rpm_right_front", &uint_msg_right_front);
 8004b04:	2300      	movs	r3, #0
 8004b06:	4a20      	ldr	r2, [pc, #128]	; (8004b88 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004b08:	493d      	ldr	r1, [pc, #244]	; (8004c00 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8004b0a:	483e      	ldr	r0, [pc, #248]	; (8004c04 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8004b0c:	f7fd fede 	bl	80028cc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_left_front("rpm_left_front", &uint_msg_left_front);
 8004b10:	2300      	movs	r3, #0
 8004b12:	4a1e      	ldr	r2, [pc, #120]	; (8004b8c <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8004b14:	493c      	ldr	r1, [pc, #240]	; (8004c08 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8004b16:	483d      	ldr	r0, [pc, #244]	; (8004c0c <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8004b18:	f7fd fed8 	bl	80028cc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_right_back("rpm_right_back", &uint_msg_right_back);
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	4a1c      	ldr	r2, [pc, #112]	; (8004b90 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004b20:	493b      	ldr	r1, [pc, #236]	; (8004c10 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8004b22:	483c      	ldr	r0, [pc, #240]	; (8004c14 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8004b24:	f7fd fed2 	bl	80028cc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_left_back("rpm_left_back", &uint_msg_left_back);
 8004b28:	2300      	movs	r3, #0
 8004b2a:	4a1a      	ldr	r2, [pc, #104]	; (8004b94 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004b2c:	493a      	ldr	r1, [pc, #232]	; (8004c18 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8004b2e:	483b      	ldr	r0, [pc, #236]	; (8004c1c <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8004b30:	f7fd fecc 	bl	80028cc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int8> rpm_rightFront_sub("rpm_rightFront_sub", rpm_rightFront_subCb);
 8004b34:	2301      	movs	r3, #1
 8004b36:	4a3a      	ldr	r2, [pc, #232]	; (8004c20 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8004b38:	493a      	ldr	r1, [pc, #232]	; (8004c24 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8004b3a:	483b      	ldr	r0, [pc, #236]	; (8004c28 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8004b3c:	f7ff fab0 	bl	80040a0 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> rpm_leftFront_sub("rpm_leftFront_sub", rpm_leftFront_subCb);
 8004b40:	2301      	movs	r3, #1
 8004b42:	4a3a      	ldr	r2, [pc, #232]	; (8004c2c <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8004b44:	493a      	ldr	r1, [pc, #232]	; (8004c30 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8004b46:	483b      	ldr	r0, [pc, #236]	; (8004c34 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8004b48:	f7ff faaa 	bl	80040a0 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> rpm_rightBack_sub("rpm_rightBack_sub", rpm_rightBack_subCb);
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	4a3a      	ldr	r2, [pc, #232]	; (8004c38 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8004b50:	493a      	ldr	r1, [pc, #232]	; (8004c3c <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8004b52:	483b      	ldr	r0, [pc, #236]	; (8004c40 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8004b54:	f7ff faa4 	bl	80040a0 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> rpm_leftBack_sub("rpm_leftBack_sub", rpm_leftBack_subCb);
 8004b58:	2301      	movs	r3, #1
 8004b5a:	4a3a      	ldr	r2, [pc, #232]	; (8004c44 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8004b5c:	493a      	ldr	r1, [pc, #232]	; (8004c48 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8004b5e:	483b      	ldr	r0, [pc, #236]	; (8004c4c <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8004b60:	f7ff fa9e 	bl	80040a0 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Publisher laser_sensors_data("laser_sensors_data", &laser_sensors_data_array);
 8004b64:	2300      	movs	r3, #0
 8004b66:	4a0c      	ldr	r2, [pc, #48]	; (8004b98 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004b68:	4939      	ldr	r1, [pc, #228]	; (8004c50 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8004b6a:	483a      	ldr	r0, [pc, #232]	; (8004c54 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8004b6c:	f7fd feae 	bl	80028cc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher state_data("state_data", &state_data_msg);
 8004b70:	2300      	movs	r3, #0
 8004b72:	4a0a      	ldr	r2, [pc, #40]	; (8004b9c <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004b74:	4938      	ldr	r1, [pc, #224]	; (8004c58 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8004b76:	4839      	ldr	r0, [pc, #228]	; (8004c5c <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8004b78:	f7fd fea8 	bl	80028cc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	200004d4 	.word	0x200004d4
 8004b88:	20000a04 	.word	0x20000a04
 8004b8c:	20000a0c 	.word	0x20000a0c
 8004b90:	20000a14 	.word	0x20000a14
 8004b94:	20000a1c 	.word	0x20000a1c
 8004b98:	20000a24 	.word	0x20000a24
 8004b9c:	20000a54 	.word	0x20000a54
 8004ba0:	20000a5c 	.word	0x20000a5c
 8004ba4:	20000a6c 	.word	0x20000a6c
 8004ba8:	20000a7c 	.word	0x20000a7c
 8004bac:	20000aa8 	.word	0x20000aa8
 8004bb0:	20000ad4 	.word	0x20000ad4
 8004bb4:	20000b00 	.word	0x20000b00
 8004bb8:	20000b2c 	.word	0x20000b2c
 8004bbc:	20000b58 	.word	0x20000b58
 8004bc0:	20000b84 	.word	0x20000b84
 8004bc4:	20000bb0 	.word	0x20000bb0
 8004bc8:	20000bdc 	.word	0x20000bdc
 8004bcc:	20000c08 	.word	0x20000c08
 8004bd0:	20000c34 	.word	0x20000c34
 8004bd4:	20000c60 	.word	0x20000c60
 8004bd8:	20000c8c 	.word	0x20000c8c
 8004bdc:	20000cb8 	.word	0x20000cb8
 8004be0:	20000ce4 	.word	0x20000ce4
 8004be4:	20000d10 	.word	0x20000d10
 8004be8:	0800fe00 	.word	0x0800fe00
 8004bec:	20000d3c 	.word	0x20000d3c
 8004bf0:	0800fe04 	.word	0x0800fe04
 8004bf4:	20000d50 	.word	0x20000d50
 8004bf8:	0800fe0c 	.word	0x0800fe0c
 8004bfc:	20000d64 	.word	0x20000d64
 8004c00:	0800fe14 	.word	0x0800fe14
 8004c04:	20000d78 	.word	0x20000d78
 8004c08:	0800fe24 	.word	0x0800fe24
 8004c0c:	20000d8c 	.word	0x20000d8c
 8004c10:	0800fe34 	.word	0x0800fe34
 8004c14:	20000da0 	.word	0x20000da0
 8004c18:	0800fe44 	.word	0x0800fe44
 8004c1c:	20000db4 	.word	0x20000db4
 8004c20:	08003a55 	.word	0x08003a55
 8004c24:	0800fe54 	.word	0x0800fe54
 8004c28:	20000dc8 	.word	0x20000dc8
 8004c2c:	08003ac9 	.word	0x08003ac9
 8004c30:	0800fe68 	.word	0x0800fe68
 8004c34:	20000de4 	.word	0x20000de4
 8004c38:	08003b35 	.word	0x08003b35
 8004c3c:	0800fe7c 	.word	0x0800fe7c
 8004c40:	20000e00 	.word	0x20000e00
 8004c44:	08003ba1 	.word	0x08003ba1
 8004c48:	0800fe90 	.word	0x0800fe90
 8004c4c:	20000e1c 	.word	0x20000e1c
 8004c50:	0800fea4 	.word	0x0800fea4
 8004c54:	20000e38 	.word	0x20000e38
 8004c58:	0800feb8 	.word	0x0800feb8
 8004c5c:	20000e4c 	.word	0x20000e4c

08004c60 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	330c      	adds	r3, #12
 8004c6e:	6839      	ldr	r1, [r7, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fd fedd 	bl	8002a30 <_ZN8std_msgs4Int811deserializeEPh>
    this->cb_(msg);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	320c      	adds	r2, #12
 8004c7e:	4610      	mov	r0, r2
 8004c80:	4798      	blx	r3
  }
 8004c82:	bf00      	nop
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <_ZN3ros10SubscriberIN8std_msgs4Int8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
  }
 8004c96:	4618      	mov	r0, r3
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	330c      	adds	r3, #12
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fd fede 	bl	8002a70 <_ZN8std_msgs4Int87getTypeEv>
 8004cb4:	4603      	mov	r3, r0
  }
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	330c      	adds	r3, #12
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fd fede 	bl	8002a8c <_ZN8std_msgs4Int86getMD5Ev>
 8004cd0:	4603      	mov	r3, r0
  }
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <_GLOBAL__sub_I_rb>:
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ce2:	2001      	movs	r0, #1
 8004ce4:	f7ff fea2 	bl	8004a2c <_Z41__static_initialization_and_destruction_0ii>
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <_Z8NBT_initP5nbt_tm>:
#include "stm32f4xx_hal.h"
#include "nbt.h"

//NBT - Non Blocking Timer
void NBT_init(nbt_t * nbt, uint32_t interval)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b082      	sub	sp, #8
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	6039      	str	r1, [r7, #0]
	nbt->timeout = interval;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	601a      	str	r2, [r3, #0]
	nbt->previousMillis = HAL_GetTick();
 8004cfa:	f000 f9a5 	bl	8005048 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	605a      	str	r2, [r3, #4]
}
 8004d04:	bf00      	nop
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <_Z11NBT_handlerP5nbt_t>:

bool NBT_handler(nbt_t * nbt)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
	if(HAL_GetTick()-nbt->previousMillis>nbt->timeout){
 8004d14:	f000 f998 	bl	8005048 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	1ad2      	subs	r2, r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	bf8c      	ite	hi
 8004d28:	2301      	movhi	r3, #1
 8004d2a:	2300      	movls	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d006      	beq.n	8004d40 <_Z11NBT_handlerP5nbt_t+0x34>
		nbt->previousMillis = HAL_GetTick();
 8004d32:	f000 f989 	bl	8005048 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	605a      	str	r2, [r3, #4]
		return true;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e000      	b.n	8004d42 <_Z11NBT_handlerP5nbt_t+0x36>
	}

	return false;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <_Z17ringbuffer_statusP10ringbuffer>:
#include <string.h>

#define ASSERT(EX)                                                         \

__inline enum ringbuffer_state  ringbuffer_status(struct  ringbuffer *rb)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
	if (rb->read_index == rb->write_index) {
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	889b      	ldrh	r3, [r3, #4]
 8004d56:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	88db      	ldrh	r3, [r3, #6]
 8004d60:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d10f      	bne.n	8004d8a <_Z17ringbuffer_statusP10ringbuffer+0x40>
		if (rb->read_mirror == rb->write_mirror)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	791b      	ldrb	r3, [r3, #4]
 8004d6e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	799b      	ldrb	r3, [r3, #6]
 8004d78:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d101      	bne.n	8004d86 <_Z17ringbuffer_statusP10ringbuffer+0x3c>
			return RT_RINGBUFFER_EMPTY;
 8004d82:	2300      	movs	r3, #0
 8004d84:	e002      	b.n	8004d8c <_Z17ringbuffer_statusP10ringbuffer+0x42>
		else
			return RT_RINGBUFFER_FULL;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <_Z17ringbuffer_statusP10ringbuffer+0x42>
	}
	return RT_RINGBUFFER_HALFFULL;
 8004d8a:	2302      	movs	r3, #2
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <_Z19ringbuffer_data_lenP10ringbuffer>:

/** return the size of data in rb */
uint16_t  ringbuffer_data_len(struct  ringbuffer *rb)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
	switch ( ringbuffer_status(rb)) {
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7ff ffd2 	bl	8004d4a <_Z17ringbuffer_statusP10ringbuffer>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <_Z19ringbuffer_data_lenP10ringbuffer+0x1a>
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d002      	beq.n	8004db6 <_Z19ringbuffer_data_lenP10ringbuffer+0x1e>
 8004db0:	e006      	b.n	8004dc0 <_Z19ringbuffer_data_lenP10ringbuffer+0x28>
	case RT_RINGBUFFER_EMPTY:
		return 0;
 8004db2:	2300      	movs	r3, #0
 8004db4:	e031      	b.n	8004e1a <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
	case RT_RINGBUFFER_FULL:
		return rb->buffer_size;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	e02c      	b.n	8004e1a <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
	case RT_RINGBUFFER_HALFFULL:
	default:
		if (rb->write_index > rb->read_index)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	88db      	ldrh	r3, [r3, #6]
 8004dc4:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	889b      	ldrh	r3, [r3, #4]
 8004dce:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d90d      	bls.n	8004df4 <_Z19ringbuffer_data_lenP10ringbuffer+0x5c>
			return rb->write_index - rb->read_index;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	88db      	ldrh	r3, [r3, #6]
 8004ddc:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	461a      	mov	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	889b      	ldrh	r3, [r3, #4]
 8004de8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	e012      	b.n	8004e1a <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
		else
			return rb->buffer_size - (rb->read_index - rb->write_index);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	88db      	ldrh	r3, [r3, #6]
 8004e00:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	4619      	mov	r1, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	889b      	ldrh	r3, [r3, #4]
 8004e0c:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	1acb      	subs	r3, r1, r3
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	4413      	add	r3, r2
 8004e18:	b29b      	uxth	r3, r3
	};
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <_Z18ringbuffer_putcharP10ringbufferh>:

/**
 * put a character into ring buffer
 */
uint32_t  ringbuffer_putchar(struct  ringbuffer *rb, const uint8_t ch)
{
 8004e22:	b590      	push	{r4, r7, lr}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	70fb      	strb	r3, [r7, #3]
    ASSERT(rb != NULL);

    /* whether has enough space */
	if (! ringbuffer_empty_space(rb))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e34:	461c      	mov	r4, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7ff ffad 	bl	8004d98 <_Z19ringbuffer_data_lenP10ringbuffer>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	429c      	cmp	r4, r3
 8004e42:	bf0c      	ite	eq
 8004e44:	2301      	moveq	r3, #1
 8004e46:	2300      	movne	r3, #0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <_Z18ringbuffer_putcharP10ringbufferh+0x30>
		return 0;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	e038      	b.n	8004ec4 <_Z18ringbuffer_putcharP10ringbufferh+0xa2>

	rb->buffer_ptr[rb->write_index] = ch;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	88d2      	ldrh	r2, [r2, #6]
 8004e5a:	f3c2 024e 	ubfx	r2, r2, #1, #15
 8004e5e:	b292      	uxth	r2, r2
 8004e60:	4413      	add	r3, r2
 8004e62:	78fa      	ldrb	r2, [r7, #3]
 8004e64:	701a      	strb	r2, [r3, #0]

	/* flip mirror */
	if (rb->write_index == rb->buffer_size - 1) {
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	88db      	ldrh	r3, [r3, #6]
 8004e6a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d114      	bne.n	8004ea8 <_Z18ringbuffer_putcharP10ringbufferh+0x86>
		rb->write_mirror = ~rb->write_mirror;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	799b      	ldrb	r3, [r3, #6]
 8004e82:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	b2d9      	uxtb	r1, r3
 8004e94:	7993      	ldrb	r3, [r2, #6]
 8004e96:	f361 0300 	bfi	r3, r1, #0, #1
 8004e9a:	7193      	strb	r3, [r2, #6]
		rb->write_index = 0;
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	88d3      	ldrh	r3, [r2, #6]
 8004ea0:	f36f 034f 	bfc	r3, #1, #15
 8004ea4:	80d3      	strh	r3, [r2, #6]
 8004ea6:	e00c      	b.n	8004ec2 <_Z18ringbuffer_putcharP10ringbufferh+0xa0>
	} else {
		rb->write_index++;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	88da      	ldrh	r2, [r3, #6]
 8004eac:	f3c2 024e 	ubfx	r2, r2, #1, #15
 8004eb0:	b292      	uxth	r2, r2
 8004eb2:	3201      	adds	r2, #1
 8004eb4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004eb8:	b291      	uxth	r1, r2
 8004eba:	88da      	ldrh	r2, [r3, #6]
 8004ebc:	f361 024f 	bfi	r2, r1, #1, #15
 8004ec0:	80da      	strh	r2, [r3, #6]
	}

	return 1;
 8004ec2:	2301      	movs	r3, #1
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd90      	pop	{r4, r7, pc}

08004ecc <_Z18ringbuffer_getcharP10ringbufferPh>:

/**
 * get a character from a ringbuffer
 */
uint32_t  ringbuffer_getchar(struct  ringbuffer *rb, uint8_t *ch)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
    ASSERT(rb != NULL);

    /* ringbuffer is empty */
    if (! ringbuffer_data_len(rb))
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7ff ff5e 	bl	8004d98 <_Z19ringbuffer_data_lenP10ringbuffer>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	bf0c      	ite	eq
 8004ee2:	2301      	moveq	r3, #1
 8004ee4:	2300      	movne	r3, #0
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <_Z18ringbuffer_getcharP10ringbufferPh+0x24>
        return 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	e03a      	b.n	8004f66 <_Z18ringbuffer_getcharP10ringbufferPh+0x9a>

    /* put character */
    *ch = rb->buffer_ptr[rb->read_index];
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	8892      	ldrh	r2, [r2, #4]
 8004ef8:	f3c2 024e 	ubfx	r2, r2, #1, #15
 8004efc:	b292      	uxth	r2, r2
 8004efe:	4413      	add	r3, r2
 8004f00:	781a      	ldrb	r2, [r3, #0]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	701a      	strb	r2, [r3, #0]

    if (rb->read_index == rb->buffer_size-1)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	889b      	ldrh	r3, [r3, #4]
 8004f0a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d114      	bne.n	8004f48 <_Z18ringbuffer_getcharP10ringbufferPh+0x7c>
    {
        rb->read_mirror = ~rb->read_mirror;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	791b      	ldrb	r3, [r3, #4]
 8004f22:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	b2d9      	uxtb	r1, r3
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	7913      	ldrb	r3, [r2, #4]
 8004f36:	f361 0300 	bfi	r3, r1, #0, #1
 8004f3a:	7113      	strb	r3, [r2, #4]
        rb->read_index = 0;
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	8893      	ldrh	r3, [r2, #4]
 8004f40:	f36f 034f 	bfc	r3, #1, #15
 8004f44:	8093      	strh	r3, [r2, #4]
 8004f46:	e00d      	b.n	8004f64 <_Z18ringbuffer_getcharP10ringbufferPh+0x98>
    }
    else
    {
        rb->read_index++;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	889b      	ldrh	r3, [r3, #4]
 8004f4c:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3301      	adds	r3, #1
 8004f54:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004f58:	b299      	uxth	r1, r3
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	8893      	ldrh	r3, [r2, #4]
 8004f5e:	f361 034f 	bfi	r3, r1, #1, #15
 8004f62:	8093      	strh	r3, [r2, #4]
    }

    return 1;
 8004f64:	2301      	movs	r3, #1
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <_Z15ringbuffer_initP10ringbufferPhs>:
}

void  ringbuffer_init(struct  ringbuffer *rb,
                        uint8_t           *pool,
                        int16_t            size)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	80fb      	strh	r3, [r7, #6]
    ASSERT(rb != NULL);
    ASSERT(size > 0);

    /* initialize read and write index */
    rb->read_mirror = rb->read_index = 0;
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	8893      	ldrh	r3, [r2, #4]
 8004f80:	f36f 034f 	bfc	r3, #1, #15
 8004f84:	8093      	strh	r3, [r2, #4]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	889b      	ldrh	r3, [r3, #4]
 8004f8a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	b2d9      	uxtb	r1, r3
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	7913      	ldrb	r3, [r2, #4]
 8004f9a:	f361 0300 	bfi	r3, r1, #0, #1
 8004f9e:	7113      	strb	r3, [r2, #4]
    rb->write_mirror = rb->write_index = 0;
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	88d3      	ldrh	r3, [r2, #6]
 8004fa4:	f36f 034f 	bfc	r3, #1, #15
 8004fa8:	80d3      	strh	r3, [r2, #6]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	88db      	ldrh	r3, [r3, #6]
 8004fae:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	b2d9      	uxtb	r1, r3
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	7993      	ldrb	r3, [r2, #6]
 8004fbe:	f361 0300 	bfi	r3, r1, #0, #1
 8004fc2:	7193      	strb	r3, [r2, #6]

    /* set buffer pool and size */
    rb->buffer_ptr = pool;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	601a      	str	r2, [r3, #0]
    rb->buffer_size = size; //ALIGN_DOWN(size, ALIGN_SIZE);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	88fa      	ldrh	r2, [r7, #6]
 8004fce:	811a      	strh	r2, [r3, #8]
}
 8004fd0:	bf00      	nop
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004fe0:	4b0e      	ldr	r3, [pc, #56]	; (800501c <HAL_Init+0x40>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a0d      	ldr	r2, [pc, #52]	; (800501c <HAL_Init+0x40>)
 8004fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004fec:	4b0b      	ldr	r3, [pc, #44]	; (800501c <HAL_Init+0x40>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a0a      	ldr	r2, [pc, #40]	; (800501c <HAL_Init+0x40>)
 8004ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ff6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ff8:	4b08      	ldr	r3, [pc, #32]	; (800501c <HAL_Init+0x40>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a07      	ldr	r2, [pc, #28]	; (800501c <HAL_Init+0x40>)
 8004ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005004:	2003      	movs	r0, #3
 8005006:	f000 ff56 	bl	8005eb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800500a:	2000      	movs	r0, #0
 800500c:	f7fc fbd8 	bl	80017c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005010:	f7fc fb00 	bl	8001614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40023c00 	.word	0x40023c00

08005020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005024:	4b06      	ldr	r3, [pc, #24]	; (8005040 <HAL_IncTick+0x20>)
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	461a      	mov	r2, r3
 800502a:	4b06      	ldr	r3, [pc, #24]	; (8005044 <HAL_IncTick+0x24>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4413      	add	r3, r2
 8005030:	4a04      	ldr	r2, [pc, #16]	; (8005044 <HAL_IncTick+0x24>)
 8005032:	6013      	str	r3, [r2, #0]
}
 8005034:	bf00      	nop
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	20000010 	.word	0x20000010
 8005044:	20005204 	.word	0x20005204

08005048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  return uwTick;
 800504c:	4b03      	ldr	r3, [pc, #12]	; (800505c <HAL_GetTick+0x14>)
 800504e:	681b      	ldr	r3, [r3, #0]
}
 8005050:	4618      	mov	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	20005204 	.word	0x20005204

08005060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005068:	f7ff ffee 	bl	8005048 <HAL_GetTick>
 800506c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005078:	d005      	beq.n	8005086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800507a:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <HAL_Delay+0x40>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4413      	add	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005086:	bf00      	nop
 8005088:	f7ff ffde 	bl	8005048 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	429a      	cmp	r2, r3
 8005096:	d8f7      	bhi.n	8005088 <HAL_Delay+0x28>
  {
  }
}
 8005098:	bf00      	nop
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20000010 	.word	0x20000010

080050a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e0ed      	b.n	8005292 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d102      	bne.n	80050c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7fc fad4 	bl	8001670 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0202 	bic.w	r2, r2, #2
 80050d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050d8:	f7ff ffb6 	bl	8005048 <HAL_GetTick>
 80050dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80050de:	e012      	b.n	8005106 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80050e0:	f7ff ffb2 	bl	8005048 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b0a      	cmp	r3, #10
 80050ec:	d90b      	bls.n	8005106 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2205      	movs	r2, #5
 80050fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e0c5      	b.n	8005292 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1e5      	bne.n	80050e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005124:	f7ff ff90 	bl	8005048 <HAL_GetTick>
 8005128:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800512a:	e012      	b.n	8005152 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800512c:	f7ff ff8c 	bl	8005048 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b0a      	cmp	r3, #10
 8005138:	d90b      	bls.n	8005152 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2205      	movs	r2, #5
 800514a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e09f      	b.n	8005292 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0e5      	beq.n	800512c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	7e1b      	ldrb	r3, [r3, #24]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d108      	bne.n	800517a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	e007      	b.n	800518a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005188:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	7e5b      	ldrb	r3, [r3, #25]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d108      	bne.n	80051a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	e007      	b.n	80051b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	7e9b      	ldrb	r3, [r3, #26]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d108      	bne.n	80051ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0220 	orr.w	r2, r2, #32
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	e007      	b.n	80051de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0220 	bic.w	r2, r2, #32
 80051dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	7edb      	ldrb	r3, [r3, #27]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d108      	bne.n	80051f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0210 	bic.w	r2, r2, #16
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e007      	b.n	8005208 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0210 	orr.w	r2, r2, #16
 8005206:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	7f1b      	ldrb	r3, [r3, #28]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d108      	bne.n	8005222 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0208 	orr.w	r2, r2, #8
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	e007      	b.n	8005232 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0208 	bic.w	r2, r2, #8
 8005230:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	7f5b      	ldrb	r3, [r3, #29]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d108      	bne.n	800524c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0204 	orr.w	r2, r2, #4
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	e007      	b.n	800525c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0204 	bic.w	r2, r2, #4
 800525a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	ea42 0103 	orr.w	r1, r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	1e5a      	subs	r2, r3, #1
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052b2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80052b4:	7cfb      	ldrb	r3, [r7, #19]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d003      	beq.n	80052c2 <HAL_CAN_ConfigFilter+0x26>
 80052ba:	7cfb      	ldrb	r3, [r7, #19]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	f040 80be 	bne.w	800543e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80052c2:	4b65      	ldr	r3, [pc, #404]	; (8005458 <HAL_CAN_ConfigFilter+0x1bc>)
 80052c4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052cc:	f043 0201 	orr.w	r2, r3, #1
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	021b      	lsls	r3, r3, #8
 80052f2:	431a      	orrs	r2, r3
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f003 031f 	and.w	r3, r3, #31
 8005302:	2201      	movs	r2, #1
 8005304:	fa02 f303 	lsl.w	r3, r2, r3
 8005308:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	43db      	mvns	r3, r3
 8005314:	401a      	ands	r2, r3
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d123      	bne.n	800536c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	43db      	mvns	r3, r3
 800532e:	401a      	ands	r2, r3
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005346:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	3248      	adds	r2, #72	; 0x48
 800534c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005360:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005362:	6979      	ldr	r1, [r7, #20]
 8005364:	3348      	adds	r3, #72	; 0x48
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	440b      	add	r3, r1
 800536a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d122      	bne.n	80053ba <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	431a      	orrs	r2, r3
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005394:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	3248      	adds	r2, #72	; 0x48
 800539a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80053ae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80053b0:	6979      	ldr	r1, [r7, #20]
 80053b2:	3348      	adds	r3, #72	; 0x48
 80053b4:	00db      	lsls	r3, r3, #3
 80053b6:	440b      	add	r3, r1
 80053b8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	43db      	mvns	r3, r3
 80053cc:	401a      	ands	r2, r3
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80053d4:	e007      	b.n	80053e6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	431a      	orrs	r2, r3
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d109      	bne.n	8005402 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	43db      	mvns	r3, r3
 80053f8:	401a      	ands	r2, r3
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005400:	e007      	b.n	8005412 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	431a      	orrs	r2, r3
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d107      	bne.n	800542a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	431a      	orrs	r2, r3
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005430:	f023 0201 	bic.w	r2, r3, #1
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	e006      	b.n	800544c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
  }
}
 800544c:	4618      	mov	r0, r3
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	40006400 	.word	0x40006400

0800545c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 3020 	ldrb.w	r3, [r3, #32]
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b01      	cmp	r3, #1
 800546e:	d12e      	bne.n	80054ce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0201 	bic.w	r2, r2, #1
 8005486:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005488:	f7ff fdde 	bl	8005048 <HAL_GetTick>
 800548c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800548e:	e012      	b.n	80054b6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005490:	f7ff fdda 	bl	8005048 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b0a      	cmp	r3, #10
 800549c:	d90b      	bls.n	80054b6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2205      	movs	r2, #5
 80054ae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e012      	b.n	80054dc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1e5      	bne.n	8005490 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	e006      	b.n	80054dc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
  }
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b089      	sub	sp, #36	; 0x24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054f8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005502:	7ffb      	ldrb	r3, [r7, #31]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d003      	beq.n	8005510 <HAL_CAN_AddTxMessage+0x2c>
 8005508:	7ffb      	ldrb	r3, [r7, #31]
 800550a:	2b02      	cmp	r3, #2
 800550c:	f040 80b8 	bne.w	8005680 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10a      	bne.n	8005530 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005520:	2b00      	cmp	r3, #0
 8005522:	d105      	bne.n	8005530 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 80a0 	beq.w	8005670 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	0e1b      	lsrs	r3, r3, #24
 8005534:	f003 0303 	and.w	r3, r3, #3
 8005538:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b02      	cmp	r3, #2
 800553e:	d907      	bls.n	8005550 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e09e      	b.n	800568e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005550:	2201      	movs	r2, #1
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	409a      	lsls	r2, r3
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10d      	bne.n	800557e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800556c:	68f9      	ldr	r1, [r7, #12]
 800556e:	6809      	ldr	r1, [r1, #0]
 8005570:	431a      	orrs	r2, r3
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	3318      	adds	r3, #24
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	440b      	add	r3, r1
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	e00f      	b.n	800559e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005588:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800558e:	68f9      	ldr	r1, [r7, #12]
 8005590:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005592:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	3318      	adds	r3, #24
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	440b      	add	r3, r1
 800559c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6819      	ldr	r1, [r3, #0]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	691a      	ldr	r2, [r3, #16]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	3318      	adds	r3, #24
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	440b      	add	r3, r1
 80055ae:	3304      	adds	r3, #4
 80055b0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	7d1b      	ldrb	r3, [r3, #20]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d111      	bne.n	80055de <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	3318      	adds	r3, #24
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	4413      	add	r3, r2
 80055c6:	3304      	adds	r3, #4
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	6811      	ldr	r1, [r2, #0]
 80055ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	3318      	adds	r3, #24
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	440b      	add	r3, r1
 80055da:	3304      	adds	r3, #4
 80055dc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	3307      	adds	r3, #7
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	061a      	lsls	r2, r3, #24
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3306      	adds	r3, #6
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	041b      	lsls	r3, r3, #16
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3305      	adds	r3, #5
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	021b      	lsls	r3, r3, #8
 80055f8:	4313      	orrs	r3, r2
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	3204      	adds	r2, #4
 80055fe:	7812      	ldrb	r2, [r2, #0]
 8005600:	4610      	mov	r0, r2
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	6811      	ldr	r1, [r2, #0]
 8005606:	ea43 0200 	orr.w	r2, r3, r0
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	440b      	add	r3, r1
 8005610:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005614:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	3303      	adds	r3, #3
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	061a      	lsls	r2, r3, #24
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3302      	adds	r3, #2
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	041b      	lsls	r3, r3, #16
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3301      	adds	r3, #1
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	021b      	lsls	r3, r3, #8
 8005630:	4313      	orrs	r3, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	7812      	ldrb	r2, [r2, #0]
 8005636:	4610      	mov	r0, r2
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	6811      	ldr	r1, [r2, #0]
 800563c:	ea43 0200 	orr.w	r2, r3, r0
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	440b      	add	r3, r1
 8005646:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800564a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	3318      	adds	r3, #24
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	4413      	add	r3, r2
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	6811      	ldr	r1, [r2, #0]
 800565e:	f043 0201 	orr.w	r2, r3, #1
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	3318      	adds	r3, #24
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	440b      	add	r3, r1
 800566a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	e00e      	b.n	800568e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e006      	b.n	800568e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
  }
}
 800568e:	4618      	mov	r0, r3
 8005690:	3724      	adds	r7, #36	; 0x24
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800569a:	b480      	push	{r7}
 800569c:	b087      	sub	sp, #28
 800569e:	af00      	add	r7, sp, #0
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	607a      	str	r2, [r7, #4]
 80056a6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056ae:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80056b0:	7dfb      	ldrb	r3, [r7, #23]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d003      	beq.n	80056be <HAL_CAN_GetRxMessage+0x24>
 80056b6:	7dfb      	ldrb	r3, [r7, #23]
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	f040 80f3 	bne.w	80058a4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10e      	bne.n	80056e2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d116      	bne.n	8005700 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e0e7      	b.n	80058b2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	f003 0303 	and.w	r3, r3, #3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d107      	bne.n	8005700 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e0d8      	b.n	80058b2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	331b      	adds	r3, #27
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	4413      	add	r3, r2
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0204 	and.w	r2, r3, #4
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10c      	bne.n	8005738 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	331b      	adds	r3, #27
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	4413      	add	r3, r2
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	0d5b      	lsrs	r3, r3, #21
 800572e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	e00b      	b.n	8005750 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	331b      	adds	r3, #27
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	4413      	add	r3, r2
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	08db      	lsrs	r3, r3, #3
 8005748:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	331b      	adds	r3, #27
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	4413      	add	r3, r2
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0202 	and.w	r2, r3, #2
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	331b      	adds	r3, #27
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	4413      	add	r3, r2
 8005772:	3304      	adds	r3, #4
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 020f 	and.w	r2, r3, #15
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	331b      	adds	r3, #27
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	4413      	add	r3, r2
 800578a:	3304      	adds	r3, #4
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	0a1b      	lsrs	r3, r3, #8
 8005790:	b2da      	uxtb	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	331b      	adds	r3, #27
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	4413      	add	r3, r2
 80057a2:	3304      	adds	r3, #4
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	0c1b      	lsrs	r3, r3, #16
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	0a1a      	lsrs	r2, r3, #8
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	3301      	adds	r3, #1
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	0c1a      	lsrs	r2, r3, #16
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	3302      	adds	r3, #2
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	011b      	lsls	r3, r3, #4
 8005800:	4413      	add	r3, r2
 8005802:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	0e1a      	lsrs	r2, r3, #24
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	3303      	adds	r3, #3
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	4413      	add	r3, r2
 800581c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	3304      	adds	r3, #4
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	011b      	lsls	r3, r3, #4
 8005832:	4413      	add	r3, r2
 8005834:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	0a1a      	lsrs	r2, r3, #8
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	3305      	adds	r3, #5
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	4413      	add	r3, r2
 800584e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	0c1a      	lsrs	r2, r3, #16
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	3306      	adds	r3, #6
 800585a:	b2d2      	uxtb	r2, r2
 800585c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	011b      	lsls	r3, r3, #4
 8005866:	4413      	add	r3, r2
 8005868:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	0e1a      	lsrs	r2, r3, #24
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	3307      	adds	r3, #7
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d108      	bne.n	8005890 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0220 	orr.w	r2, r2, #32
 800588c:	60da      	str	r2, [r3, #12]
 800588e:	e007      	b.n	80058a0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691a      	ldr	r2, [r3, #16]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0220 	orr.w	r2, r2, #32
 800589e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e006      	b.n	80058b2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
  }
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	371c      	adds	r7, #28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80058be:	b480      	push	{r7}
 80058c0:	b085      	sub	sp, #20
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058ce:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80058d0:	7bfb      	ldrb	r3, [r7, #15]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d002      	beq.n	80058dc <HAL_CAN_ActivateNotification+0x1e>
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d109      	bne.n	80058f0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6959      	ldr	r1, [r3, #20]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	e006      	b.n	80058fe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
  }
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b08a      	sub	sp, #40	; 0x28
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005912:	2300      	movs	r3, #0
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	d07c      	beq.n	8005a4a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d023      	beq.n	80059a2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2201      	movs	r2, #1
 8005960:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f97d 	bl	8005c6c <HAL_CAN_TxMailbox0CompleteCallback>
 8005972:	e016      	b.n	80059a2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	d004      	beq.n	8005988 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
 8005986:	e00c      	b.n	80059a2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d004      	beq.n	800599c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
 800599a:	e002      	b.n	80059a2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f983 	bl	8005ca8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d024      	beq.n	80059f6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f95d 	bl	8005c80 <HAL_CAN_TxMailbox1CompleteCallback>
 80059c6:	e016      	b.n	80059f6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d004      	beq.n	80059dc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
 80059da:	e00c      	b.n	80059f6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d004      	beq.n	80059f0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
 80059ee:	e002      	b.n	80059f6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f963 	bl	8005cbc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d024      	beq.n	8005a4a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005a08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f93d 	bl	8005c94 <HAL_CAN_TxMailbox2CompleteCallback>
 8005a1a:	e016      	b.n	8005a4a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d004      	beq.n	8005a30 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a2e:	e00c      	b.n	8005a4a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d004      	beq.n	8005a44 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a40:	627b      	str	r3, [r7, #36]	; 0x24
 8005a42:	e002      	b.n	8005a4a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f943 	bl	8005cd0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	f003 0308 	and.w	r3, r3, #8
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00c      	beq.n	8005a6e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f003 0310 	and.w	r3, r3, #16
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d007      	beq.n	8005a6e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2210      	movs	r2, #16
 8005a6c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00b      	beq.n	8005a90 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f003 0308 	and.w	r3, r3, #8
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d006      	beq.n	8005a90 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2208      	movs	r2, #8
 8005a88:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f92a 	bl	8005ce4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d009      	beq.n	8005aae <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0303 	and.w	r3, r3, #3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7fa ff45 	bl	8000938 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00c      	beq.n	8005ad2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f003 0310 	and.w	r3, r3, #16
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d007      	beq.n	8005ad2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2210      	movs	r2, #16
 8005ad0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00b      	beq.n	8005af4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d006      	beq.n	8005af4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2208      	movs	r2, #8
 8005aec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f90c 	bl	8005d0c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	f003 0310 	and.w	r3, r3, #16
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d009      	beq.n	8005b12 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	f003 0303 	and.w	r3, r3, #3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f8f3 	bl	8005cf8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00b      	beq.n	8005b34 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	f003 0310 	and.w	r3, r3, #16
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d006      	beq.n	8005b34 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2210      	movs	r2, #16
 8005b2c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f8f6 	bl	8005d20 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00b      	beq.n	8005b56 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d006      	beq.n	8005b56 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2208      	movs	r2, #8
 8005b4e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f8ef 	bl	8005d34 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d075      	beq.n	8005c4c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f003 0304 	and.w	r3, r3, #4
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d06c      	beq.n	8005c44 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	f043 0301 	orr.w	r3, r3, #1
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	f043 0302 	orr.w	r3, r3, #2
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d008      	beq.n	8005bbe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	f043 0304 	orr.w	r3, r3, #4
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d03d      	beq.n	8005c44 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d038      	beq.n	8005c44 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bd8:	2b30      	cmp	r3, #48	; 0x30
 8005bda:	d017      	beq.n	8005c0c <HAL_CAN_IRQHandler+0x302>
 8005bdc:	2b30      	cmp	r3, #48	; 0x30
 8005bde:	d804      	bhi.n	8005bea <HAL_CAN_IRQHandler+0x2e0>
 8005be0:	2b10      	cmp	r3, #16
 8005be2:	d009      	beq.n	8005bf8 <HAL_CAN_IRQHandler+0x2ee>
 8005be4:	2b20      	cmp	r3, #32
 8005be6:	d00c      	beq.n	8005c02 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005be8:	e024      	b.n	8005c34 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8005bea:	2b50      	cmp	r3, #80	; 0x50
 8005bec:	d018      	beq.n	8005c20 <HAL_CAN_IRQHandler+0x316>
 8005bee:	2b60      	cmp	r3, #96	; 0x60
 8005bf0:	d01b      	beq.n	8005c2a <HAL_CAN_IRQHandler+0x320>
 8005bf2:	2b40      	cmp	r3, #64	; 0x40
 8005bf4:	d00f      	beq.n	8005c16 <HAL_CAN_IRQHandler+0x30c>
            break;
 8005bf6:	e01d      	b.n	8005c34 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	f043 0308 	orr.w	r3, r3, #8
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c00:	e018      	b.n	8005c34 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	f043 0310 	orr.w	r3, r3, #16
 8005c08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c0a:	e013      	b.n	8005c34 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	f043 0320 	orr.w	r3, r3, #32
 8005c12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c14:	e00e      	b.n	8005c34 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c1e:	e009      	b.n	8005c34 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c28:	e004      	b.n	8005c34 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c32:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005c42:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2204      	movs	r2, #4
 8005c4a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d008      	beq.n	8005c64 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f872 	bl	8005d48 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005c64:	bf00      	nop
 8005c66:	3728      	adds	r7, #40	; 0x28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d6c:	4b0c      	ldr	r3, [pc, #48]	; (8005da0 <__NVIC_SetPriorityGrouping+0x44>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d78:	4013      	ands	r3, r2
 8005d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d8e:	4a04      	ldr	r2, [pc, #16]	; (8005da0 <__NVIC_SetPriorityGrouping+0x44>)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	60d3      	str	r3, [r2, #12]
}
 8005d94:	bf00      	nop
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	e000ed00 	.word	0xe000ed00

08005da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005da8:	4b04      	ldr	r3, [pc, #16]	; (8005dbc <__NVIC_GetPriorityGrouping+0x18>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	0a1b      	lsrs	r3, r3, #8
 8005dae:	f003 0307 	and.w	r3, r3, #7
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	e000ed00 	.word	0xe000ed00

08005dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	db0b      	blt.n	8005dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005dd2:	79fb      	ldrb	r3, [r7, #7]
 8005dd4:	f003 021f 	and.w	r2, r3, #31
 8005dd8:	4907      	ldr	r1, [pc, #28]	; (8005df8 <__NVIC_EnableIRQ+0x38>)
 8005dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	2001      	movs	r0, #1
 8005de2:	fa00 f202 	lsl.w	r2, r0, r2
 8005de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	e000e100 	.word	0xe000e100

08005dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4603      	mov	r3, r0
 8005e04:	6039      	str	r1, [r7, #0]
 8005e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	db0a      	blt.n	8005e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	490c      	ldr	r1, [pc, #48]	; (8005e48 <__NVIC_SetPriority+0x4c>)
 8005e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e1a:	0112      	lsls	r2, r2, #4
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	440b      	add	r3, r1
 8005e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e24:	e00a      	b.n	8005e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	4908      	ldr	r1, [pc, #32]	; (8005e4c <__NVIC_SetPriority+0x50>)
 8005e2c:	79fb      	ldrb	r3, [r7, #7]
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	3b04      	subs	r3, #4
 8005e34:	0112      	lsls	r2, r2, #4
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	440b      	add	r3, r1
 8005e3a:	761a      	strb	r2, [r3, #24]
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	e000e100 	.word	0xe000e100
 8005e4c:	e000ed00 	.word	0xe000ed00

08005e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b089      	sub	sp, #36	; 0x24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f1c3 0307 	rsb	r3, r3, #7
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	bf28      	it	cs
 8005e6e:	2304      	movcs	r3, #4
 8005e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	3304      	adds	r3, #4
 8005e76:	2b06      	cmp	r3, #6
 8005e78:	d902      	bls.n	8005e80 <NVIC_EncodePriority+0x30>
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	3b03      	subs	r3, #3
 8005e7e:	e000      	b.n	8005e82 <NVIC_EncodePriority+0x32>
 8005e80:	2300      	movs	r3, #0
 8005e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8e:	43da      	mvns	r2, r3
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	401a      	ands	r2, r3
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea2:	43d9      	mvns	r1, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ea8:	4313      	orrs	r3, r2
         );
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3724      	adds	r7, #36	; 0x24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff ff4c 	bl	8005d5c <__NVIC_SetPriorityGrouping>
}
 8005ec4:	bf00      	nop
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ede:	f7ff ff61 	bl	8005da4 <__NVIC_GetPriorityGrouping>
 8005ee2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	68b9      	ldr	r1, [r7, #8]
 8005ee8:	6978      	ldr	r0, [r7, #20]
 8005eea:	f7ff ffb1 	bl	8005e50 <NVIC_EncodePriority>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff ff80 	bl	8005dfc <__NVIC_SetPriority>
}
 8005efc:	bf00      	nop
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7ff ff54 	bl	8005dc0 <__NVIC_EnableIRQ>
}
 8005f18:	bf00      	nop
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d004      	beq.n	8005f3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2280      	movs	r2, #128	; 0x80
 8005f38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e00c      	b.n	8005f58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2205      	movs	r2, #5
 8005f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0201 	bic.w	r2, r2, #1
 8005f54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f72:	b2db      	uxtb	r3, r3
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b089      	sub	sp, #36	; 0x24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f96:	2300      	movs	r3, #0
 8005f98:	61fb      	str	r3, [r7, #28]
 8005f9a:	e16b      	b.n	8006274 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4013      	ands	r3, r2
 8005fae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	f040 815a 	bne.w	800626e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d00b      	beq.n	8005fda <HAL_GPIO_Init+0x5a>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d007      	beq.n	8005fda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005fce:	2b11      	cmp	r3, #17
 8005fd0:	d003      	beq.n	8005fda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2b12      	cmp	r3, #18
 8005fd8:	d130      	bne.n	800603c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	005b      	lsls	r3, r3, #1
 8005fe4:	2203      	movs	r2, #3
 8005fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fea:	43db      	mvns	r3, r3
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	4313      	orrs	r3, r2
 8006002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006010:	2201      	movs	r2, #1
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	43db      	mvns	r3, r3
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	4013      	ands	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	091b      	lsrs	r3, r3, #4
 8006026:	f003 0201 	and.w	r2, r3, #1
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	4313      	orrs	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	2203      	movs	r2, #3
 8006048:	fa02 f303 	lsl.w	r3, r2, r3
 800604c:	43db      	mvns	r3, r3
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	4013      	ands	r3, r2
 8006052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	fa02 f303 	lsl.w	r3, r2, r3
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	4313      	orrs	r3, r2
 8006064:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2b02      	cmp	r3, #2
 8006072:	d003      	beq.n	800607c <HAL_GPIO_Init+0xfc>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	2b12      	cmp	r3, #18
 800607a:	d123      	bne.n	80060c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	08da      	lsrs	r2, r3, #3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3208      	adds	r2, #8
 8006084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006088:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	f003 0307 	and.w	r3, r3, #7
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	220f      	movs	r2, #15
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	43db      	mvns	r3, r3
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	4013      	ands	r3, r2
 800609e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	08da      	lsrs	r2, r3, #3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	3208      	adds	r2, #8
 80060be:	69b9      	ldr	r1, [r7, #24]
 80060c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	2203      	movs	r2, #3
 80060d0:	fa02 f303 	lsl.w	r3, r2, r3
 80060d4:	43db      	mvns	r3, r3
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	4013      	ands	r3, r2
 80060da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f003 0203 	and.w	r2, r3, #3
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 80b4 	beq.w	800626e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006106:	2300      	movs	r3, #0
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	4b5f      	ldr	r3, [pc, #380]	; (8006288 <HAL_GPIO_Init+0x308>)
 800610c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610e:	4a5e      	ldr	r2, [pc, #376]	; (8006288 <HAL_GPIO_Init+0x308>)
 8006110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006114:	6453      	str	r3, [r2, #68]	; 0x44
 8006116:	4b5c      	ldr	r3, [pc, #368]	; (8006288 <HAL_GPIO_Init+0x308>)
 8006118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006122:	4a5a      	ldr	r2, [pc, #360]	; (800628c <HAL_GPIO_Init+0x30c>)
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	089b      	lsrs	r3, r3, #2
 8006128:	3302      	adds	r3, #2
 800612a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800612e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	220f      	movs	r2, #15
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	43db      	mvns	r3, r3
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	4013      	ands	r3, r2
 8006144:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a51      	ldr	r2, [pc, #324]	; (8006290 <HAL_GPIO_Init+0x310>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d02b      	beq.n	80061a6 <HAL_GPIO_Init+0x226>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a50      	ldr	r2, [pc, #320]	; (8006294 <HAL_GPIO_Init+0x314>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d025      	beq.n	80061a2 <HAL_GPIO_Init+0x222>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a4f      	ldr	r2, [pc, #316]	; (8006298 <HAL_GPIO_Init+0x318>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d01f      	beq.n	800619e <HAL_GPIO_Init+0x21e>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a4e      	ldr	r2, [pc, #312]	; (800629c <HAL_GPIO_Init+0x31c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d019      	beq.n	800619a <HAL_GPIO_Init+0x21a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a4d      	ldr	r2, [pc, #308]	; (80062a0 <HAL_GPIO_Init+0x320>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d013      	beq.n	8006196 <HAL_GPIO_Init+0x216>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a4c      	ldr	r2, [pc, #304]	; (80062a4 <HAL_GPIO_Init+0x324>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d00d      	beq.n	8006192 <HAL_GPIO_Init+0x212>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a4b      	ldr	r2, [pc, #300]	; (80062a8 <HAL_GPIO_Init+0x328>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d007      	beq.n	800618e <HAL_GPIO_Init+0x20e>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a4a      	ldr	r2, [pc, #296]	; (80062ac <HAL_GPIO_Init+0x32c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d101      	bne.n	800618a <HAL_GPIO_Init+0x20a>
 8006186:	2307      	movs	r3, #7
 8006188:	e00e      	b.n	80061a8 <HAL_GPIO_Init+0x228>
 800618a:	2308      	movs	r3, #8
 800618c:	e00c      	b.n	80061a8 <HAL_GPIO_Init+0x228>
 800618e:	2306      	movs	r3, #6
 8006190:	e00a      	b.n	80061a8 <HAL_GPIO_Init+0x228>
 8006192:	2305      	movs	r3, #5
 8006194:	e008      	b.n	80061a8 <HAL_GPIO_Init+0x228>
 8006196:	2304      	movs	r3, #4
 8006198:	e006      	b.n	80061a8 <HAL_GPIO_Init+0x228>
 800619a:	2303      	movs	r3, #3
 800619c:	e004      	b.n	80061a8 <HAL_GPIO_Init+0x228>
 800619e:	2302      	movs	r3, #2
 80061a0:	e002      	b.n	80061a8 <HAL_GPIO_Init+0x228>
 80061a2:	2301      	movs	r3, #1
 80061a4:	e000      	b.n	80061a8 <HAL_GPIO_Init+0x228>
 80061a6:	2300      	movs	r3, #0
 80061a8:	69fa      	ldr	r2, [r7, #28]
 80061aa:	f002 0203 	and.w	r2, r2, #3
 80061ae:	0092      	lsls	r2, r2, #2
 80061b0:	4093      	lsls	r3, r2
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061b8:	4934      	ldr	r1, [pc, #208]	; (800628c <HAL_GPIO_Init+0x30c>)
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	089b      	lsrs	r3, r3, #2
 80061be:	3302      	adds	r3, #2
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061c6:	4b3a      	ldr	r3, [pc, #232]	; (80062b0 <HAL_GPIO_Init+0x330>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	43db      	mvns	r3, r3
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	4013      	ands	r3, r2
 80061d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80061ea:	4a31      	ldr	r2, [pc, #196]	; (80062b0 <HAL_GPIO_Init+0x330>)
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80061f0:	4b2f      	ldr	r3, [pc, #188]	; (80062b0 <HAL_GPIO_Init+0x330>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	43db      	mvns	r3, r3
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	4013      	ands	r3, r2
 80061fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d003      	beq.n	8006214 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	4313      	orrs	r3, r2
 8006212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006214:	4a26      	ldr	r2, [pc, #152]	; (80062b0 <HAL_GPIO_Init+0x330>)
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800621a:	4b25      	ldr	r3, [pc, #148]	; (80062b0 <HAL_GPIO_Init+0x330>)
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	43db      	mvns	r3, r3
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	4013      	ands	r3, r2
 8006228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800623e:	4a1c      	ldr	r2, [pc, #112]	; (80062b0 <HAL_GPIO_Init+0x330>)
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006244:	4b1a      	ldr	r3, [pc, #104]	; (80062b0 <HAL_GPIO_Init+0x330>)
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	43db      	mvns	r3, r3
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	4013      	ands	r3, r2
 8006252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d003      	beq.n	8006268 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	4313      	orrs	r3, r2
 8006266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006268:	4a11      	ldr	r2, [pc, #68]	; (80062b0 <HAL_GPIO_Init+0x330>)
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	3301      	adds	r3, #1
 8006272:	61fb      	str	r3, [r7, #28]
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	2b0f      	cmp	r3, #15
 8006278:	f67f ae90 	bls.w	8005f9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800627c:	bf00      	nop
 800627e:	3724      	adds	r7, #36	; 0x24
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	40023800 	.word	0x40023800
 800628c:	40013800 	.word	0x40013800
 8006290:	40020000 	.word	0x40020000
 8006294:	40020400 	.word	0x40020400
 8006298:	40020800 	.word	0x40020800
 800629c:	40020c00 	.word	0x40020c00
 80062a0:	40021000 	.word	0x40021000
 80062a4:	40021400 	.word	0x40021400
 80062a8:	40021800 	.word	0x40021800
 80062ac:	40021c00 	.word	0x40021c00
 80062b0:	40013c00 	.word	0x40013c00

080062b4 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	460b      	mov	r3, r1
 80062be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	695a      	ldr	r2, [r3, #20]
 80062c4:	887b      	ldrh	r3, [r7, #2]
 80062c6:	401a      	ands	r2, r3
 80062c8:	887b      	ldrh	r3, [r7, #2]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d104      	bne.n	80062d8 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80062ce:	887b      	ldrh	r3, [r7, #2]
 80062d0:	041a      	lsls	r2, r3, #16
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80062d6:	e002      	b.n	80062de <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80062d8:	887a      	ldrh	r2, [r7, #2]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	619a      	str	r2, [r3, #24]
}
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
	...

080062ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e11f      	b.n	800653e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d106      	bne.n	8006318 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7fb fa04 	bl	8001720 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2224      	movs	r2, #36	; 0x24
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0201 	bic.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800633e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800634e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006350:	f004 f8ca 	bl	800a4e8 <HAL_RCC_GetPCLK1Freq>
 8006354:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	4a7b      	ldr	r2, [pc, #492]	; (8006548 <HAL_I2C_Init+0x25c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d807      	bhi.n	8006370 <HAL_I2C_Init+0x84>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4a7a      	ldr	r2, [pc, #488]	; (800654c <HAL_I2C_Init+0x260>)
 8006364:	4293      	cmp	r3, r2
 8006366:	bf94      	ite	ls
 8006368:	2301      	movls	r3, #1
 800636a:	2300      	movhi	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	e006      	b.n	800637e <HAL_I2C_Init+0x92>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4a77      	ldr	r2, [pc, #476]	; (8006550 <HAL_I2C_Init+0x264>)
 8006374:	4293      	cmp	r3, r2
 8006376:	bf94      	ite	ls
 8006378:	2301      	movls	r3, #1
 800637a:	2300      	movhi	r3, #0
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e0db      	b.n	800653e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4a72      	ldr	r2, [pc, #456]	; (8006554 <HAL_I2C_Init+0x268>)
 800638a:	fba2 2303 	umull	r2, r3, r2, r3
 800638e:	0c9b      	lsrs	r3, r3, #18
 8006390:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	4a64      	ldr	r2, [pc, #400]	; (8006548 <HAL_I2C_Init+0x25c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d802      	bhi.n	80063c0 <HAL_I2C_Init+0xd4>
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	3301      	adds	r3, #1
 80063be:	e009      	b.n	80063d4 <HAL_I2C_Init+0xe8>
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80063c6:	fb02 f303 	mul.w	r3, r2, r3
 80063ca:	4a63      	ldr	r2, [pc, #396]	; (8006558 <HAL_I2C_Init+0x26c>)
 80063cc:	fba2 2303 	umull	r2, r3, r2, r3
 80063d0:	099b      	lsrs	r3, r3, #6
 80063d2:	3301      	adds	r3, #1
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6812      	ldr	r2, [r2, #0]
 80063d8:	430b      	orrs	r3, r1
 80063da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80063e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	4956      	ldr	r1, [pc, #344]	; (8006548 <HAL_I2C_Init+0x25c>)
 80063f0:	428b      	cmp	r3, r1
 80063f2:	d80d      	bhi.n	8006410 <HAL_I2C_Init+0x124>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	1e59      	subs	r1, r3, #1
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006402:	3301      	adds	r3, #1
 8006404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006408:	2b04      	cmp	r3, #4
 800640a:	bf38      	it	cc
 800640c:	2304      	movcc	r3, #4
 800640e:	e04f      	b.n	80064b0 <HAL_I2C_Init+0x1c4>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d111      	bne.n	800643c <HAL_I2C_Init+0x150>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	1e58      	subs	r0, r3, #1
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6859      	ldr	r1, [r3, #4]
 8006420:	460b      	mov	r3, r1
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	440b      	add	r3, r1
 8006426:	fbb0 f3f3 	udiv	r3, r0, r3
 800642a:	3301      	adds	r3, #1
 800642c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006430:	2b00      	cmp	r3, #0
 8006432:	bf0c      	ite	eq
 8006434:	2301      	moveq	r3, #1
 8006436:	2300      	movne	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	e012      	b.n	8006462 <HAL_I2C_Init+0x176>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	1e58      	subs	r0, r3, #1
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6859      	ldr	r1, [r3, #4]
 8006444:	460b      	mov	r3, r1
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	440b      	add	r3, r1
 800644a:	0099      	lsls	r1, r3, #2
 800644c:	440b      	add	r3, r1
 800644e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006452:	3301      	adds	r3, #1
 8006454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006458:	2b00      	cmp	r3, #0
 800645a:	bf0c      	ite	eq
 800645c:	2301      	moveq	r3, #1
 800645e:	2300      	movne	r3, #0
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <HAL_I2C_Init+0x17e>
 8006466:	2301      	movs	r3, #1
 8006468:	e022      	b.n	80064b0 <HAL_I2C_Init+0x1c4>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10e      	bne.n	8006490 <HAL_I2C_Init+0x1a4>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	1e58      	subs	r0, r3, #1
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6859      	ldr	r1, [r3, #4]
 800647a:	460b      	mov	r3, r1
 800647c:	005b      	lsls	r3, r3, #1
 800647e:	440b      	add	r3, r1
 8006480:	fbb0 f3f3 	udiv	r3, r0, r3
 8006484:	3301      	adds	r3, #1
 8006486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800648a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800648e:	e00f      	b.n	80064b0 <HAL_I2C_Init+0x1c4>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	1e58      	subs	r0, r3, #1
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6859      	ldr	r1, [r3, #4]
 8006498:	460b      	mov	r3, r1
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	440b      	add	r3, r1
 800649e:	0099      	lsls	r1, r3, #2
 80064a0:	440b      	add	r3, r1
 80064a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80064a6:	3301      	adds	r3, #1
 80064a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064b0:	6879      	ldr	r1, [r7, #4]
 80064b2:	6809      	ldr	r1, [r1, #0]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	69da      	ldr	r2, [r3, #28]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80064de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6911      	ldr	r1, [r2, #16]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	68d2      	ldr	r2, [r2, #12]
 80064ea:	4311      	orrs	r1, r2
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	6812      	ldr	r2, [r2, #0]
 80064f0:	430b      	orrs	r3, r1
 80064f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	695a      	ldr	r2, [r3, #20]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0201 	orr.w	r2, r2, #1
 800651e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	000186a0 	.word	0x000186a0
 800654c:	001e847f 	.word	0x001e847f
 8006550:	003d08ff 	.word	0x003d08ff
 8006554:	431bde83 	.word	0x431bde83
 8006558:	10624dd3 	.word	0x10624dd3

0800655c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af02      	add	r7, sp, #8
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	607a      	str	r2, [r7, #4]
 8006566:	461a      	mov	r2, r3
 8006568:	460b      	mov	r3, r1
 800656a:	817b      	strh	r3, [r7, #10]
 800656c:	4613      	mov	r3, r2
 800656e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006570:	f7fe fd6a 	bl	8005048 <HAL_GetTick>
 8006574:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b20      	cmp	r3, #32
 8006580:	f040 80e0 	bne.w	8006744 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	2319      	movs	r3, #25
 800658a:	2201      	movs	r2, #1
 800658c:	4970      	ldr	r1, [pc, #448]	; (8006750 <HAL_I2C_Master_Transmit+0x1f4>)
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f001 ffc2 	bl	8008518 <I2C_WaitOnFlagUntilTimeout>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800659a:	2302      	movs	r3, #2
 800659c:	e0d3      	b.n	8006746 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_I2C_Master_Transmit+0x50>
 80065a8:	2302      	movs	r3, #2
 80065aa:	e0cc      	b.n	8006746 <HAL_I2C_Master_Transmit+0x1ea>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d007      	beq.n	80065d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f042 0201 	orr.w	r2, r2, #1
 80065d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2221      	movs	r2, #33	; 0x21
 80065e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2210      	movs	r2, #16
 80065ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	893a      	ldrh	r2, [r7, #8]
 8006602:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006608:	b29a      	uxth	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4a50      	ldr	r2, [pc, #320]	; (8006754 <HAL_I2C_Master_Transmit+0x1f8>)
 8006612:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006614:	8979      	ldrh	r1, [r7, #10]
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	6a3a      	ldr	r2, [r7, #32]
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f001 fd6a 	bl	80080f4 <I2C_MasterRequestWrite>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e08d      	b.n	8006746 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800662a:	2300      	movs	r3, #0
 800662c:	613b      	str	r3, [r7, #16]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006640:	e066      	b.n	8006710 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	6a39      	ldr	r1, [r7, #32]
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f002 f83c 	bl	80086c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00d      	beq.n	800666e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	2b04      	cmp	r3, #4
 8006658:	d107      	bne.n	800666a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006668:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e06b      	b.n	8006746 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	781a      	ldrb	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006688:	b29b      	uxth	r3, r3
 800668a:	3b01      	subs	r3, #1
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006696:	3b01      	subs	r3, #1
 8006698:	b29a      	uxth	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	f003 0304 	and.w	r3, r3, #4
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d11b      	bne.n	80066e4 <HAL_I2C_Master_Transmit+0x188>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d017      	beq.n	80066e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b8:	781a      	ldrb	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066dc:	3b01      	subs	r3, #1
 80066de:	b29a      	uxth	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	6a39      	ldr	r1, [r7, #32]
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f002 f82c 	bl	8008746 <I2C_WaitOnBTFFlagUntilTimeout>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00d      	beq.n	8006710 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	d107      	bne.n	800670c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800670a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e01a      	b.n	8006746 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006714:	2b00      	cmp	r3, #0
 8006716:	d194      	bne.n	8006642 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2220      	movs	r2, #32
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	e000      	b.n	8006746 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006744:	2302      	movs	r3, #2
  }
}
 8006746:	4618      	mov	r0, r3
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	00100002 	.word	0x00100002
 8006754:	ffff0000 	.word	0xffff0000

08006758 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08c      	sub	sp, #48	; 0x30
 800675c:	af02      	add	r7, sp, #8
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	4608      	mov	r0, r1
 8006762:	4611      	mov	r1, r2
 8006764:	461a      	mov	r2, r3
 8006766:	4603      	mov	r3, r0
 8006768:	817b      	strh	r3, [r7, #10]
 800676a:	460b      	mov	r3, r1
 800676c:	813b      	strh	r3, [r7, #8]
 800676e:	4613      	mov	r3, r2
 8006770:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006772:	f7fe fc69 	bl	8005048 <HAL_GetTick>
 8006776:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b20      	cmp	r3, #32
 8006782:	f040 8208 	bne.w	8006b96 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	2319      	movs	r3, #25
 800678c:	2201      	movs	r2, #1
 800678e:	497b      	ldr	r1, [pc, #492]	; (800697c <HAL_I2C_Mem_Read+0x224>)
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f001 fec1 	bl	8008518 <I2C_WaitOnFlagUntilTimeout>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800679c:	2302      	movs	r3, #2
 800679e:	e1fb      	b.n	8006b98 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d101      	bne.n	80067ae <HAL_I2C_Mem_Read+0x56>
 80067aa:	2302      	movs	r3, #2
 80067ac:	e1f4      	b.n	8006b98 <HAL_I2C_Mem_Read+0x440>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d007      	beq.n	80067d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0201 	orr.w	r2, r2, #1
 80067d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2222      	movs	r2, #34	; 0x22
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2240      	movs	r2, #64	; 0x40
 80067f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006804:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800680a:	b29a      	uxth	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4a5b      	ldr	r2, [pc, #364]	; (8006980 <HAL_I2C_Mem_Read+0x228>)
 8006814:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006816:	88f8      	ldrh	r0, [r7, #6]
 8006818:	893a      	ldrh	r2, [r7, #8]
 800681a:	8979      	ldrh	r1, [r7, #10]
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	9301      	str	r3, [sp, #4]
 8006820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	4603      	mov	r3, r0
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f001 fce6 	bl	80081f8 <I2C_RequestMemoryRead>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e1b0      	b.n	8006b98 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800683a:	2b00      	cmp	r3, #0
 800683c:	d113      	bne.n	8006866 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800683e:	2300      	movs	r3, #0
 8006840:	623b      	str	r3, [r7, #32]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	623b      	str	r3, [r7, #32]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	623b      	str	r3, [r7, #32]
 8006852:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	e184      	b.n	8006b70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686a:	2b01      	cmp	r3, #1
 800686c:	d11b      	bne.n	80068a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800687c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800687e:	2300      	movs	r3, #0
 8006880:	61fb      	str	r3, [r7, #28]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	61fb      	str	r3, [r7, #28]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	61fb      	str	r3, [r7, #28]
 8006892:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	e164      	b.n	8006b70 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d11b      	bne.n	80068e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ce:	2300      	movs	r3, #0
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	61bb      	str	r3, [r7, #24]
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	e144      	b.n	8006b70 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068e6:	2300      	movs	r3, #0
 80068e8:	617b      	str	r3, [r7, #20]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	617b      	str	r3, [r7, #20]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80068fc:	e138      	b.n	8006b70 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006902:	2b03      	cmp	r3, #3
 8006904:	f200 80f1 	bhi.w	8006aea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800690c:	2b01      	cmp	r3, #1
 800690e:	d123      	bne.n	8006958 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006912:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f001 ff89 	bl	800882c <I2C_WaitOnRXNEFlagUntilTimeout>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d001      	beq.n	8006924 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e139      	b.n	8006b98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	691a      	ldr	r2, [r3, #16]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	b2d2      	uxtb	r2, r2
 8006930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	1c5a      	adds	r2, r3, #1
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006940:	3b01      	subs	r3, #1
 8006942:	b29a      	uxth	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006956:	e10b      	b.n	8006b70 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695c:	2b02      	cmp	r3, #2
 800695e:	d14e      	bne.n	80069fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006966:	2200      	movs	r2, #0
 8006968:	4906      	ldr	r1, [pc, #24]	; (8006984 <HAL_I2C_Mem_Read+0x22c>)
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f001 fdd4 	bl	8008518 <I2C_WaitOnFlagUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d008      	beq.n	8006988 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e10e      	b.n	8006b98 <HAL_I2C_Mem_Read+0x440>
 800697a:	bf00      	nop
 800697c:	00100002 	.word	0x00100002
 8006980:	ffff0000 	.word	0xffff0000
 8006984:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006996:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	691a      	ldr	r2, [r3, #16]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	b2d2      	uxtb	r2, r2
 80069a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	1c5a      	adds	r2, r3, #1
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	691a      	ldr	r2, [r3, #16]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	b2d2      	uxtb	r2, r2
 80069d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	3b01      	subs	r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069fc:	e0b8      	b.n	8006b70 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a04:	2200      	movs	r2, #0
 8006a06:	4966      	ldr	r1, [pc, #408]	; (8006ba0 <HAL_I2C_Mem_Read+0x448>)
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f001 fd85 	bl	8008518 <I2C_WaitOnFlagUntilTimeout>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e0bf      	b.n	8006b98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691a      	ldr	r2, [r3, #16]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a44:	3b01      	subs	r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	3b01      	subs	r3, #1
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a60:	2200      	movs	r2, #0
 8006a62:	494f      	ldr	r1, [pc, #316]	; (8006ba0 <HAL_I2C_Mem_Read+0x448>)
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f001 fd57 	bl	8008518 <I2C_WaitOnFlagUntilTimeout>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e091      	b.n	8006b98 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	691a      	ldr	r2, [r3, #16]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	b2d2      	uxtb	r2, r2
 8006a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	b2d2      	uxtb	r2, r2
 8006ac2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ae8:	e042      	b.n	8006b70 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f001 fe9c 	bl	800882c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e04c      	b.n	8006b98 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	691a      	ldr	r2, [r3, #16]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	b2d2      	uxtb	r2, r2
 8006b0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	1c5a      	adds	r2, r3, #1
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	d118      	bne.n	8006b70 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	b2d2      	uxtb	r2, r2
 8006b4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f47f aec2 	bne.w	80068fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	e000      	b.n	8006b98 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006b96:	2302      	movs	r3, #2
  }
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3728      	adds	r7, #40	; 0x28
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	00010004 	.word	0x00010004

08006ba4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b088      	sub	sp, #32
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bc4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bcc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006bce:	7bfb      	ldrb	r3, [r7, #15]
 8006bd0:	2b10      	cmp	r3, #16
 8006bd2:	d003      	beq.n	8006bdc <HAL_I2C_EV_IRQHandler+0x38>
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	2b40      	cmp	r3, #64	; 0x40
 8006bd8:	f040 80bd 	bne.w	8006d56 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10d      	bne.n	8006c12 <HAL_I2C_EV_IRQHandler+0x6e>
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006bfc:	d003      	beq.n	8006c06 <HAL_I2C_EV_IRQHandler+0x62>
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006c04:	d101      	bne.n	8006c0a <HAL_I2C_EV_IRQHandler+0x66>
 8006c06:	2301      	movs	r3, #1
 8006c08:	e000      	b.n	8006c0c <HAL_I2C_EV_IRQHandler+0x68>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	f000 812e 	beq.w	8006e6e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00c      	beq.n	8006c36 <HAL_I2C_EV_IRQHandler+0x92>
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	0a5b      	lsrs	r3, r3, #9
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d006      	beq.n	8006c36 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 fe84 	bl	8008936 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fcbb 	bl	80075aa <I2C_Master_SB>
 8006c34:	e08e      	b.n	8006d54 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	08db      	lsrs	r3, r3, #3
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d009      	beq.n	8006c56 <HAL_I2C_EV_IRQHandler+0xb2>
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	0a5b      	lsrs	r3, r3, #9
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fd31 	bl	80076b6 <I2C_Master_ADD10>
 8006c54:	e07e      	b.n	8006d54 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	085b      	lsrs	r3, r3, #1
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d009      	beq.n	8006c76 <HAL_I2C_EV_IRQHandler+0xd2>
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	0a5b      	lsrs	r3, r3, #9
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fd4b 	bl	800770a <I2C_Master_ADDR>
 8006c74:	e06e      	b.n	8006d54 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	089b      	lsrs	r3, r3, #2
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d037      	beq.n	8006cf2 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c90:	f000 80ef 	beq.w	8006e72 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	09db      	lsrs	r3, r3, #7
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00f      	beq.n	8006cc0 <HAL_I2C_EV_IRQHandler+0x11c>
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	0a9b      	lsrs	r3, r3, #10
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d009      	beq.n	8006cc0 <HAL_I2C_EV_IRQHandler+0x11c>
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	089b      	lsrs	r3, r3, #2
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d103      	bne.n	8006cc0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f948 	bl	8006f4e <I2C_MasterTransmit_TXE>
 8006cbe:	e049      	b.n	8006d54 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	089b      	lsrs	r3, r3, #2
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 80d2 	beq.w	8006e72 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	0a5b      	lsrs	r3, r3, #9
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 80cb 	beq.w	8006e72 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
 8006cde:	2b10      	cmp	r3, #16
 8006ce0:	d103      	bne.n	8006cea <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f9cf 	bl	8007086 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ce8:	e0c3      	b.n	8006e72 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fa33 	bl	8007156 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cf0:	e0bf      	b.n	8006e72 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d00:	f000 80b7 	beq.w	8006e72 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	099b      	lsrs	r3, r3, #6
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00f      	beq.n	8006d30 <HAL_I2C_EV_IRQHandler+0x18c>
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	0a9b      	lsrs	r3, r3, #10
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d009      	beq.n	8006d30 <HAL_I2C_EV_IRQHandler+0x18c>
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	089b      	lsrs	r3, r3, #2
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d103      	bne.n	8006d30 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 faa3 	bl	8007274 <I2C_MasterReceive_RXNE>
 8006d2e:	e011      	b.n	8006d54 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	089b      	lsrs	r3, r3, #2
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 809a 	beq.w	8006e72 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	0a5b      	lsrs	r3, r3, #9
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 8093 	beq.w	8006e72 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fb42 	bl	80073d6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d52:	e08e      	b.n	8006e72 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006d54:	e08d      	b.n	8006e72 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d004      	beq.n	8006d68 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	61fb      	str	r3, [r7, #28]
 8006d66:	e007      	b.n	8006d78 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	085b      	lsrs	r3, r3, #1
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d012      	beq.n	8006daa <HAL_I2C_EV_IRQHandler+0x206>
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	0a5b      	lsrs	r3, r3, #9
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00c      	beq.n	8006daa <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d003      	beq.n	8006da0 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006da0:	69b9      	ldr	r1, [r7, #24]
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 ff00 	bl	8007ba8 <I2C_Slave_ADDR>
 8006da8:	e066      	b.n	8006e78 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	091b      	lsrs	r3, r3, #4
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d009      	beq.n	8006dca <HAL_I2C_EV_IRQHandler+0x226>
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	0a5b      	lsrs	r3, r3, #9
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 ff34 	bl	8007c30 <I2C_Slave_STOPF>
 8006dc8:	e056      	b.n	8006e78 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006dca:	7bbb      	ldrb	r3, [r7, #14]
 8006dcc:	2b21      	cmp	r3, #33	; 0x21
 8006dce:	d002      	beq.n	8006dd6 <HAL_I2C_EV_IRQHandler+0x232>
 8006dd0:	7bbb      	ldrb	r3, [r7, #14]
 8006dd2:	2b29      	cmp	r3, #41	; 0x29
 8006dd4:	d125      	bne.n	8006e22 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	09db      	lsrs	r3, r3, #7
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00f      	beq.n	8006e02 <HAL_I2C_EV_IRQHandler+0x25e>
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	0a9b      	lsrs	r3, r3, #10
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d009      	beq.n	8006e02 <HAL_I2C_EV_IRQHandler+0x25e>
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	089b      	lsrs	r3, r3, #2
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d103      	bne.n	8006e02 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fe16 	bl	8007a2c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e00:	e039      	b.n	8006e76 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	089b      	lsrs	r3, r3, #2
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d033      	beq.n	8006e76 <HAL_I2C_EV_IRQHandler+0x2d2>
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	0a5b      	lsrs	r3, r3, #9
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d02d      	beq.n	8006e76 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fe43 	bl	8007aa6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e20:	e029      	b.n	8006e76 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	099b      	lsrs	r3, r3, #6
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00f      	beq.n	8006e4e <HAL_I2C_EV_IRQHandler+0x2aa>
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	0a9b      	lsrs	r3, r3, #10
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d009      	beq.n	8006e4e <HAL_I2C_EV_IRQHandler+0x2aa>
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	089b      	lsrs	r3, r3, #2
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d103      	bne.n	8006e4e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fe4e 	bl	8007ae8 <I2C_SlaveReceive_RXNE>
 8006e4c:	e014      	b.n	8006e78 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	089b      	lsrs	r3, r3, #2
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00e      	beq.n	8006e78 <HAL_I2C_EV_IRQHandler+0x2d4>
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	0a5b      	lsrs	r3, r3, #9
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d008      	beq.n	8006e78 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fe7c 	bl	8007b64 <I2C_SlaveReceive_BTF>
 8006e6c:	e004      	b.n	8006e78 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8006e6e:	bf00      	nop
 8006e70:	e002      	b.n	8006e78 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e72:	bf00      	nop
 8006e74:	e000      	b.n	8006e78 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e76:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006e78:	3720      	adds	r7, #32
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006e86:	bf00      	nop
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b083      	sub	sp, #12
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b083      	sub	sp, #12
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006eae:	bf00      	nop
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b083      	sub	sp, #12
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	70fb      	strb	r3, [r7, #3]
 8006eda:	4613      	mov	r3, r2
 8006edc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006ede:	bf00      	nop
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b083      	sub	sp, #12
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006ef2:	bf00      	nop
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b083      	sub	sp, #12
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b083      	sub	sp, #12
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006f1a:	bf00      	nop
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006f2e:	bf00      	nop
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006f42:	bf00      	nop
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b084      	sub	sp, #16
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f64:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d150      	bne.n	8007016 <I2C_MasterTransmit_TXE+0xc8>
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
 8006f76:	2b21      	cmp	r3, #33	; 0x21
 8006f78:	d14d      	bne.n	8007016 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d01d      	beq.n	8006fbc <I2C_MasterTransmit_TXE+0x6e>
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b20      	cmp	r3, #32
 8006f84:	d01a      	beq.n	8006fbc <I2C_MasterTransmit_TXE+0x6e>
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f8c:	d016      	beq.n	8006fbc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f9c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2211      	movs	r2, #17
 8006fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7ff ff62 	bl	8006e7e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fba:	e060      	b.n	800707e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fca:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fda:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b40      	cmp	r3, #64	; 0x40
 8006ff4:	d107      	bne.n	8007006 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff ff7d 	bl	8006efe <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007004:	e03b      	b.n	800707e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7ff ff35 	bl	8006e7e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007014:	e033      	b.n	800707e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	2b21      	cmp	r3, #33	; 0x21
 800701a:	d005      	beq.n	8007028 <I2C_MasterTransmit_TXE+0xda>
 800701c:	7bbb      	ldrb	r3, [r7, #14]
 800701e:	2b40      	cmp	r3, #64	; 0x40
 8007020:	d12d      	bne.n	800707e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007022:	7bfb      	ldrb	r3, [r7, #15]
 8007024:	2b22      	cmp	r3, #34	; 0x22
 8007026:	d12a      	bne.n	800707e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800702c:	b29b      	uxth	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d108      	bne.n	8007044 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685a      	ldr	r2, [r3, #4]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007040:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007042:	e01c      	b.n	800707e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b40      	cmp	r3, #64	; 0x40
 800704e:	d103      	bne.n	8007058 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f880 	bl	8007156 <I2C_MemoryTransmit_TXE_BTF>
}
 8007056:	e012      	b.n	800707e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	781a      	ldrb	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007072:	b29b      	uxth	r3, r3
 8007074:	3b01      	subs	r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800707c:	e7ff      	b.n	800707e <I2C_MasterTransmit_TXE+0x130>
 800707e:	bf00      	nop
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007092:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b21      	cmp	r3, #33	; 0x21
 800709e:	d156      	bne.n	800714e <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d012      	beq.n	80070d0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	781a      	ldrb	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	3b01      	subs	r3, #1
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80070ce:	e03e      	b.n	800714e <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b08      	cmp	r3, #8
 80070d4:	d01d      	beq.n	8007112 <I2C_MasterTransmit_BTF+0x8c>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2b20      	cmp	r3, #32
 80070da:	d01a      	beq.n	8007112 <I2C_MasterTransmit_BTF+0x8c>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80070e2:	d016      	beq.n	8007112 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070f2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2211      	movs	r2, #17
 80070f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2220      	movs	r2, #32
 8007106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7ff feb7 	bl	8006e7e <HAL_I2C_MasterTxCpltCallback>
}
 8007110:	e01d      	b.n	800714e <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007120:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007130:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2220      	movs	r2, #32
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7ff fe98 	bl	8006e7e <HAL_I2C_MasterTxCpltCallback>
}
 800714e:	bf00      	nop
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007164:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800716a:	2b00      	cmp	r3, #0
 800716c:	d11d      	bne.n	80071aa <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007172:	2b01      	cmp	r3, #1
 8007174:	d10b      	bne.n	800718e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800717a:	b2da      	uxtb	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007186:	1c9a      	adds	r2, r3, #2
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800718c:	e06e      	b.n	800726c <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007192:	b29b      	uxth	r3, r3
 8007194:	121b      	asrs	r3, r3, #8
 8007196:	b2da      	uxtb	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80071a8:	e060      	b.n	800726c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d10b      	bne.n	80071ca <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80071c8:	e050      	b.n	800726c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d14c      	bne.n	800726c <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80071d2:	7bfb      	ldrb	r3, [r7, #15]
 80071d4:	2b22      	cmp	r3, #34	; 0x22
 80071d6:	d108      	bne.n	80071ea <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071e6:	601a      	str	r2, [r3, #0]
}
 80071e8:	e040      	b.n	800726c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d015      	beq.n	8007220 <I2C_MemoryTransmit_TXE_BTF+0xca>
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
 80071f6:	2b21      	cmp	r3, #33	; 0x21
 80071f8:	d112      	bne.n	8007220 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fe:	781a      	ldrb	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007214:	b29b      	uxth	r3, r3
 8007216:	3b01      	subs	r3, #1
 8007218:	b29a      	uxth	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800721e:	e025      	b.n	800726c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007224:	b29b      	uxth	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d120      	bne.n	800726c <I2C_MemoryTransmit_TXE_BTF+0x116>
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	2b21      	cmp	r3, #33	; 0x21
 800722e:	d11d      	bne.n	800726c <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800723e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800724e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7ff fe49 	bl	8006efe <HAL_I2C_MemTxCpltCallback>
}
 800726c:	bf00      	nop
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b22      	cmp	r3, #34	; 0x22
 8007286:	f040 80a2 	bne.w	80073ce <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800728e:	b29b      	uxth	r3, r3
 8007290:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b03      	cmp	r3, #3
 8007296:	d921      	bls.n	80072dc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691a      	ldr	r2, [r3, #16]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	b2d2      	uxtb	r2, r2
 80072a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	3b01      	subs	r3, #1
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	f040 8082 	bne.w	80073ce <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072d8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80072da:	e078      	b.n	80073ce <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d074      	beq.n	80073ce <I2C_MasterReceive_RXNE+0x15a>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d002      	beq.n	80072f0 <I2C_MasterReceive_RXNE+0x7c>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d16e      	bne.n	80073ce <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f001 fa69 	bl	80087c8 <I2C_WaitOnSTOPRequestThroughIT>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d142      	bne.n	8007382 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800730a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800731a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	691a      	ldr	r2, [r3, #16]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007326:	b2d2      	uxtb	r2, r2
 8007328:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007338:	b29b      	uxth	r3, r3
 800733a:	3b01      	subs	r3, #1
 800733c:	b29a      	uxth	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2220      	movs	r2, #32
 8007346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b40      	cmp	r3, #64	; 0x40
 8007354:	d10a      	bne.n	800736c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7ff fdd4 	bl	8006f12 <HAL_I2C_MemRxCpltCallback>
}
 800736a:	e030      	b.n	80073ce <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2212      	movs	r2, #18
 8007378:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7ff fd89 	bl	8006e92 <HAL_I2C_MasterRxCpltCallback>
}
 8007380:	e025      	b.n	80073ce <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007390:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	691a      	ldr	r2, [r3, #16]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	b2d2      	uxtb	r2, r2
 800739e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	3b01      	subs	r3, #1
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2220      	movs	r2, #32
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7ff fdac 	bl	8006f26 <HAL_I2C_ErrorCallback>
}
 80073ce:	bf00      	nop
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	d11b      	bne.n	8007426 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073fc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	691a      	ldr	r2, [r3, #16]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	b2d2      	uxtb	r2, r2
 800740a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800741a:	b29b      	uxth	r3, r3
 800741c:	3b01      	subs	r3, #1
 800741e:	b29a      	uxth	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007424:	e0bd      	b.n	80075a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800742a:	b29b      	uxth	r3, r3
 800742c:	2b03      	cmp	r3, #3
 800742e:	d129      	bne.n	8007484 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800743e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b04      	cmp	r3, #4
 8007444:	d00a      	beq.n	800745c <I2C_MasterReceive_BTF+0x86>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b02      	cmp	r3, #2
 800744a:	d007      	beq.n	800745c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800745a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	691a      	ldr	r2, [r3, #16]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	b2d2      	uxtb	r2, r2
 8007468:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	1c5a      	adds	r2, r3, #1
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007478:	b29b      	uxth	r3, r3
 800747a:	3b01      	subs	r3, #1
 800747c:	b29a      	uxth	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007482:	e08e      	b.n	80075a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b02      	cmp	r3, #2
 800748c:	d176      	bne.n	800757c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d002      	beq.n	800749a <I2C_MasterReceive_BTF+0xc4>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2b10      	cmp	r3, #16
 8007498:	d108      	bne.n	80074ac <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a8:	601a      	str	r2, [r3, #0]
 80074aa:	e019      	b.n	80074e0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b04      	cmp	r3, #4
 80074b0:	d002      	beq.n	80074b8 <I2C_MasterReceive_BTF+0xe2>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d108      	bne.n	80074ca <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074c6:	601a      	str	r2, [r3, #0]
 80074c8:	e00a      	b.n	80074e0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b10      	cmp	r3, #16
 80074ce:	d007      	beq.n	80074e0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691a      	ldr	r2, [r3, #16]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	b29a      	uxth	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	691a      	ldr	r2, [r3, #16]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007510:	b2d2      	uxtb	r2, r2
 8007512:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007522:	b29b      	uxth	r3, r3
 8007524:	3b01      	subs	r3, #1
 8007526:	b29a      	uxth	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685a      	ldr	r2, [r3, #4]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800753a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2220      	movs	r2, #32
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b40      	cmp	r3, #64	; 0x40
 800754e:	d10a      	bne.n	8007566 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff fcd7 	bl	8006f12 <HAL_I2C_MemRxCpltCallback>
}
 8007564:	e01d      	b.n	80075a2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2212      	movs	r2, #18
 8007572:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7ff fc8c 	bl	8006e92 <HAL_I2C_MasterRxCpltCallback>
}
 800757a:	e012      	b.n	80075a2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	691a      	ldr	r2, [r3, #16]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	1c5a      	adds	r2, r3, #1
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007598:	b29b      	uxth	r3, r3
 800759a:	3b01      	subs	r3, #1
 800759c:	b29a      	uxth	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80075a2:	bf00      	nop
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b083      	sub	sp, #12
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b40      	cmp	r3, #64	; 0x40
 80075bc:	d117      	bne.n	80075ee <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d109      	bne.n	80075da <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	461a      	mov	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80075d6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80075d8:	e067      	b.n	80076aa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	f043 0301 	orr.w	r3, r3, #1
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	611a      	str	r2, [r3, #16]
}
 80075ec:	e05d      	b.n	80076aa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075f6:	d133      	bne.n	8007660 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b21      	cmp	r3, #33	; 0x21
 8007602:	d109      	bne.n	8007618 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007608:	b2db      	uxtb	r3, r3
 800760a:	461a      	mov	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007614:	611a      	str	r2, [r3, #16]
 8007616:	e008      	b.n	800762a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761c:	b2db      	uxtb	r3, r3
 800761e:	f043 0301 	orr.w	r3, r3, #1
 8007622:	b2da      	uxtb	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800762e:	2b00      	cmp	r3, #0
 8007630:	d004      	beq.n	800763c <I2C_Master_SB+0x92>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007638:	2b00      	cmp	r3, #0
 800763a:	d108      	bne.n	800764e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007640:	2b00      	cmp	r3, #0
 8007642:	d032      	beq.n	80076aa <I2C_Master_SB+0x100>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764a:	2b00      	cmp	r3, #0
 800764c:	d02d      	beq.n	80076aa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800765c:	605a      	str	r2, [r3, #4]
}
 800765e:	e024      	b.n	80076aa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10e      	bne.n	8007686 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766c:	b29b      	uxth	r3, r3
 800766e:	11db      	asrs	r3, r3, #7
 8007670:	b2db      	uxtb	r3, r3
 8007672:	f003 0306 	and.w	r3, r3, #6
 8007676:	b2db      	uxtb	r3, r3
 8007678:	f063 030f 	orn	r3, r3, #15
 800767c:	b2da      	uxtb	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	611a      	str	r2, [r3, #16]
}
 8007684:	e011      	b.n	80076aa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768a:	2b01      	cmp	r3, #1
 800768c:	d10d      	bne.n	80076aa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007692:	b29b      	uxth	r3, r3
 8007694:	11db      	asrs	r3, r3, #7
 8007696:	b2db      	uxtb	r3, r3
 8007698:	f003 0306 	and.w	r3, r3, #6
 800769c:	b2db      	uxtb	r3, r3
 800769e:	f063 030e 	orn	r3, r3, #14
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	611a      	str	r2, [r3, #16]
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d103      	bne.n	80076da <I2C_Master_ADD10+0x24>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d011      	beq.n	80076fe <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d104      	bne.n	80076ee <I2C_Master_ADD10+0x38>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d007      	beq.n	80076fe <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076fc:	605a      	str	r2, [r3, #4]
    }
  }
}
 80076fe:	bf00      	nop
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800770a:	b480      	push	{r7}
 800770c:	b091      	sub	sp, #68	; 0x44
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007718:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007720:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007726:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b22      	cmp	r3, #34	; 0x22
 8007732:	f040 8169 	bne.w	8007a08 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10f      	bne.n	800775e <I2C_Master_ADDR+0x54>
 800773e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007742:	2b40      	cmp	r3, #64	; 0x40
 8007744:	d10b      	bne.n	800775e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007746:	2300      	movs	r3, #0
 8007748:	633b      	str	r3, [r7, #48]	; 0x30
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	633b      	str	r3, [r7, #48]	; 0x30
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	633b      	str	r3, [r7, #48]	; 0x30
 800775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775c:	e160      	b.n	8007a20 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007762:	2b00      	cmp	r3, #0
 8007764:	d11d      	bne.n	80077a2 <I2C_Master_ADDR+0x98>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800776e:	d118      	bne.n	80077a2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007770:	2300      	movs	r3, #0
 8007772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007784:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007794:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	651a      	str	r2, [r3, #80]	; 0x50
 80077a0:	e13e      	b.n	8007a20 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d113      	bne.n	80077d4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077ac:	2300      	movs	r3, #0
 80077ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	e115      	b.n	8007a00 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d8:	b29b      	uxth	r3, r3
 80077da:	2b01      	cmp	r3, #1
 80077dc:	f040 808a 	bne.w	80078f4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80077e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077e6:	d137      	bne.n	8007858 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077f6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007806:	d113      	bne.n	8007830 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007816:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007818:	2300      	movs	r3, #0
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	627b      	str	r3, [r7, #36]	; 0x24
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	e0e7      	b.n	8007a00 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007830:	2300      	movs	r3, #0
 8007832:	623b      	str	r3, [r7, #32]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	623b      	str	r3, [r7, #32]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	623b      	str	r3, [r7, #32]
 8007844:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	e0d3      	b.n	8007a00 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785a:	2b08      	cmp	r3, #8
 800785c:	d02e      	beq.n	80078bc <I2C_Master_ADDR+0x1b2>
 800785e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007860:	2b20      	cmp	r3, #32
 8007862:	d02b      	beq.n	80078bc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007866:	2b12      	cmp	r3, #18
 8007868:	d102      	bne.n	8007870 <I2C_Master_ADDR+0x166>
 800786a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786c:	2b01      	cmp	r3, #1
 800786e:	d125      	bne.n	80078bc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007872:	2b04      	cmp	r3, #4
 8007874:	d00e      	beq.n	8007894 <I2C_Master_ADDR+0x18a>
 8007876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007878:	2b02      	cmp	r3, #2
 800787a:	d00b      	beq.n	8007894 <I2C_Master_ADDR+0x18a>
 800787c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787e:	2b10      	cmp	r3, #16
 8007880:	d008      	beq.n	8007894 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	e007      	b.n	80078a4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078a2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078a4:	2300      	movs	r3, #0
 80078a6:	61fb      	str	r3, [r7, #28]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	61fb      	str	r3, [r7, #28]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	61fb      	str	r3, [r7, #28]
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	e0a1      	b.n	8007a00 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078ca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078cc:	2300      	movs	r3, #0
 80078ce:	61bb      	str	r3, [r7, #24]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	61bb      	str	r3, [r7, #24]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	61bb      	str	r3, [r7, #24]
 80078e0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	e085      	b.n	8007a00 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d14d      	bne.n	800799a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80078fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007900:	2b04      	cmp	r3, #4
 8007902:	d016      	beq.n	8007932 <I2C_Master_ADDR+0x228>
 8007904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007906:	2b02      	cmp	r3, #2
 8007908:	d013      	beq.n	8007932 <I2C_Master_ADDR+0x228>
 800790a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790c:	2b10      	cmp	r3, #16
 800790e:	d010      	beq.n	8007932 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800791e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	e007      	b.n	8007942 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007940:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800794c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007950:	d117      	bne.n	8007982 <I2C_Master_ADDR+0x278>
 8007952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007954:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007958:	d00b      	beq.n	8007972 <I2C_Master_ADDR+0x268>
 800795a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795c:	2b01      	cmp	r3, #1
 800795e:	d008      	beq.n	8007972 <I2C_Master_ADDR+0x268>
 8007960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007962:	2b08      	cmp	r3, #8
 8007964:	d005      	beq.n	8007972 <I2C_Master_ADDR+0x268>
 8007966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007968:	2b10      	cmp	r3, #16
 800796a:	d002      	beq.n	8007972 <I2C_Master_ADDR+0x268>
 800796c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796e:	2b20      	cmp	r3, #32
 8007970:	d107      	bne.n	8007982 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007980:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007982:	2300      	movs	r3, #0
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	695b      	ldr	r3, [r3, #20]
 800798c:	617b      	str	r3, [r7, #20]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	e032      	b.n	8007a00 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079a8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079b8:	d117      	bne.n	80079ea <I2C_Master_ADDR+0x2e0>
 80079ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079c0:	d00b      	beq.n	80079da <I2C_Master_ADDR+0x2d0>
 80079c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d008      	beq.n	80079da <I2C_Master_ADDR+0x2d0>
 80079c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ca:	2b08      	cmp	r3, #8
 80079cc:	d005      	beq.n	80079da <I2C_Master_ADDR+0x2d0>
 80079ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d0:	2b10      	cmp	r3, #16
 80079d2:	d002      	beq.n	80079da <I2C_Master_ADDR+0x2d0>
 80079d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d6:	2b20      	cmp	r3, #32
 80079d8:	d107      	bne.n	80079ea <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079e8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079ea:	2300      	movs	r3, #0
 80079ec:	613b      	str	r3, [r7, #16]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	613b      	str	r3, [r7, #16]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	613b      	str	r3, [r7, #16]
 80079fe:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007a06:	e00b      	b.n	8007a20 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
}
 8007a1e:	e7ff      	b.n	8007a20 <I2C_Master_ADDR+0x316>
 8007a20:	bf00      	nop
 8007a22:	3744      	adds	r7, #68	; 0x44
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a3a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d02b      	beq.n	8007a9e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4a:	781a      	ldrb	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	3b01      	subs	r3, #1
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d114      	bne.n	8007a9e <I2C_SlaveTransmit_TXE+0x72>
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
 8007a76:	2b29      	cmp	r3, #41	; 0x29
 8007a78:	d111      	bne.n	8007a9e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a88:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2221      	movs	r2, #33	; 0x21
 8007a8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2228      	movs	r2, #40	; 0x28
 8007a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7ff fa04 	bl	8006ea6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007a9e:	bf00      	nop
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d011      	beq.n	8007adc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	781a      	ldrb	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d02c      	beq.n	8007b5c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	691a      	ldr	r2, [r3, #16]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	b2d2      	uxtb	r2, r2
 8007b0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b14:	1c5a      	adds	r2, r3, #1
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	3b01      	subs	r3, #1
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d114      	bne.n	8007b5c <I2C_SlaveReceive_RXNE+0x74>
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	2b2a      	cmp	r3, #42	; 0x2a
 8007b36:	d111      	bne.n	8007b5c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b46:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2222      	movs	r2, #34	; 0x22
 8007b4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2228      	movs	r2, #40	; 0x28
 8007b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7ff f9af 	bl	8006eba <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007b5c:	bf00      	nop
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d012      	beq.n	8007b9c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	691a      	ldr	r2, [r3, #16]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b80:	b2d2      	uxtb	r2, r2
 8007b82:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	3b01      	subs	r3, #1
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007bc2:	2b28      	cmp	r3, #40	; 0x28
 8007bc4:	d127      	bne.n	8007c16 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bd4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	089b      	lsrs	r3, r3, #2
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007be2:	2301      	movs	r3, #1
 8007be4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	09db      	lsrs	r3, r3, #7
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d103      	bne.n	8007bfa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	81bb      	strh	r3, [r7, #12]
 8007bf8:	e002      	b.n	8007c00 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007c08:	89ba      	ldrh	r2, [r7, #12]
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7ff f95d 	bl	8006ece <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007c14:	e008      	b.n	8007c28 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f06f 0202 	mvn.w	r2, #2
 8007c1e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007c28:	bf00      	nop
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c3e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c4e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007c50:	2300      	movs	r3, #0
 8007c52:	60bb      	str	r3, [r7, #8]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	60bb      	str	r3, [r7, #8]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f042 0201 	orr.w	r2, r2, #1
 8007c6a:	601a      	str	r2, [r3, #0]
 8007c6c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c7c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c8c:	d172      	bne.n	8007d74 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007c8e:	7bfb      	ldrb	r3, [r7, #15]
 8007c90:	2b22      	cmp	r3, #34	; 0x22
 8007c92:	d002      	beq.n	8007c9a <I2C_Slave_STOPF+0x6a>
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	2b2a      	cmp	r3, #42	; 0x2a
 8007c98:	d135      	bne.n	8007d06 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d005      	beq.n	8007cbe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb6:	f043 0204 	orr.w	r2, r3, #4
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ccc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fe f946 	bl	8005f64 <HAL_DMA_GetState>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d049      	beq.n	8007d72 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce2:	4a69      	ldr	r2, [pc, #420]	; (8007e88 <I2C_Slave_STOPF+0x258>)
 8007ce4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fe f918 	bl	8005f20 <HAL_DMA_Abort_IT>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d03d      	beq.n	8007d72 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d00:	4610      	mov	r0, r2
 8007d02:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d04:	e035      	b.n	8007d72 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d005      	beq.n	8007d2a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	f043 0204 	orr.w	r2, r3, #4
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fe f910 	bl	8005f64 <HAL_DMA_GetState>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d014      	beq.n	8007d74 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4e:	4a4e      	ldr	r2, [pc, #312]	; (8007e88 <I2C_Slave_STOPF+0x258>)
 8007d50:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fe f8e2 	bl	8005f20 <HAL_DMA_Abort_IT>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d008      	beq.n	8007d74 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	4798      	blx	r3
 8007d70:	e000      	b.n	8007d74 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d72:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d03e      	beq.n	8007dfc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	695b      	ldr	r3, [r3, #20]
 8007d84:	f003 0304 	and.w	r3, r3, #4
 8007d88:	2b04      	cmp	r3, #4
 8007d8a:	d112      	bne.n	8007db2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	691a      	ldr	r2, [r3, #16]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d96:	b2d2      	uxtb	r2, r2
 8007d98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	3b01      	subs	r3, #1
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dbc:	2b40      	cmp	r3, #64	; 0x40
 8007dbe:	d112      	bne.n	8007de6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	691a      	ldr	r2, [r3, #16]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	b2d2      	uxtb	r2, r2
 8007dcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	3b01      	subs	r3, #1
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d005      	beq.n	8007dfc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df4:	f043 0204 	orr.w	r2, r3, #4
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d003      	beq.n	8007e0c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f843 	bl	8007e90 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007e0a:	e039      	b.n	8007e80 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
 8007e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8007e10:	d109      	bne.n	8007e26 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2228      	movs	r2, #40	; 0x28
 8007e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7ff f84a 	bl	8006eba <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b28      	cmp	r3, #40	; 0x28
 8007e30:	d111      	bne.n	8007e56 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a15      	ldr	r2, [pc, #84]	; (8007e8c <I2C_Slave_STOPF+0x25c>)
 8007e36:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7ff f84b 	bl	8006eea <HAL_I2C_ListenCpltCallback>
}
 8007e54:	e014      	b.n	8007e80 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5a:	2b22      	cmp	r3, #34	; 0x22
 8007e5c:	d002      	beq.n	8007e64 <I2C_Slave_STOPF+0x234>
 8007e5e:	7bfb      	ldrb	r3, [r7, #15]
 8007e60:	2b22      	cmp	r3, #34	; 0x22
 8007e62:	d10d      	bne.n	8007e80 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7ff f81d 	bl	8006eba <HAL_I2C_SlaveRxCpltCallback>
}
 8007e80:	bf00      	nop
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	080083c9 	.word	0x080083c9
 8007e8c:	ffff0000 	.word	0xffff0000

08007e90 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e9e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ea6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007ea8:	7bbb      	ldrb	r3, [r7, #14]
 8007eaa:	2b10      	cmp	r3, #16
 8007eac:	d002      	beq.n	8007eb4 <I2C_ITError+0x24>
 8007eae:	7bbb      	ldrb	r3, [r7, #14]
 8007eb0:	2b40      	cmp	r3, #64	; 0x40
 8007eb2:	d10a      	bne.n	8007eca <I2C_ITError+0x3a>
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	2b22      	cmp	r3, #34	; 0x22
 8007eb8:	d107      	bne.n	8007eca <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ec8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007eca:	7bfb      	ldrb	r3, [r7, #15]
 8007ecc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ed0:	2b28      	cmp	r3, #40	; 0x28
 8007ed2:	d107      	bne.n	8007ee4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2228      	movs	r2, #40	; 0x28
 8007ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007ee2:	e015      	b.n	8007f10 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ef2:	d00a      	beq.n	8007f0a <I2C_ITError+0x7a>
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	2b60      	cmp	r3, #96	; 0x60
 8007ef8:	d007      	beq.n	8007f0a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2220      	movs	r2, #32
 8007efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f1e:	d162      	bne.n	8007fe6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f2e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d020      	beq.n	8007f80 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f42:	4a6a      	ldr	r2, [pc, #424]	; (80080ec <I2C_ITError+0x25c>)
 8007f44:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fd ffe8 	bl	8005f20 <HAL_DMA_Abort_IT>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 8089 	beq.w	800806a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 0201 	bic.w	r2, r2, #1
 8007f66:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2220      	movs	r2, #32
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	4798      	blx	r3
 8007f7e:	e074      	b.n	800806a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f84:	4a59      	ldr	r2, [pc, #356]	; (80080ec <I2C_ITError+0x25c>)
 8007f86:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fd ffc7 	bl	8005f20 <HAL_DMA_Abort_IT>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d068      	beq.n	800806a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa2:	2b40      	cmp	r3, #64	; 0x40
 8007fa4:	d10b      	bne.n	8007fbe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	691a      	ldr	r2, [r3, #16]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb0:	b2d2      	uxtb	r2, r2
 8007fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb8:	1c5a      	adds	r2, r3, #1
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f022 0201 	bic.w	r2, r2, #1
 8007fcc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007fe0:	4610      	mov	r0, r2
 8007fe2:	4798      	blx	r3
 8007fe4:	e041      	b.n	800806a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b60      	cmp	r3, #96	; 0x60
 8007ff0:	d125      	bne.n	800803e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800a:	2b40      	cmp	r3, #64	; 0x40
 800800c:	d10b      	bne.n	8008026 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	691a      	ldr	r2, [r3, #16]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008018:	b2d2      	uxtb	r2, r2
 800801a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	1c5a      	adds	r2, r3, #1
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f022 0201 	bic.w	r2, r2, #1
 8008034:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7fe ff7f 	bl	8006f3a <HAL_I2C_AbortCpltCallback>
 800803c:	e015      	b.n	800806a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008048:	2b40      	cmp	r3, #64	; 0x40
 800804a:	d10b      	bne.n	8008064 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	691a      	ldr	r2, [r3, #16]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008056:	b2d2      	uxtb	r2, r2
 8008058:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7fe ff5e 	bl	8006f26 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10e      	bne.n	8008098 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008080:	2b00      	cmp	r3, #0
 8008082:	d109      	bne.n	8008098 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800808a:	2b00      	cmp	r3, #0
 800808c:	d104      	bne.n	8008098 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008094:	2b00      	cmp	r3, #0
 8008096:	d007      	beq.n	80080a8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685a      	ldr	r2, [r3, #4]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80080a6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ae:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b4:	f003 0304 	and.w	r3, r3, #4
 80080b8:	2b04      	cmp	r3, #4
 80080ba:	d113      	bne.n	80080e4 <I2C_ITError+0x254>
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
 80080be:	2b28      	cmp	r3, #40	; 0x28
 80080c0:	d110      	bne.n	80080e4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a0a      	ldr	r2, [pc, #40]	; (80080f0 <I2C_ITError+0x260>)
 80080c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2220      	movs	r2, #32
 80080d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7fe ff03 	bl	8006eea <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80080e4:	bf00      	nop
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	080083c9 	.word	0x080083c9
 80080f0:	ffff0000 	.word	0xffff0000

080080f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b088      	sub	sp, #32
 80080f8:	af02      	add	r7, sp, #8
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	607a      	str	r2, [r7, #4]
 80080fe:	603b      	str	r3, [r7, #0]
 8008100:	460b      	mov	r3, r1
 8008102:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008108:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	2b08      	cmp	r3, #8
 800810e:	d006      	beq.n	800811e <I2C_MasterRequestWrite+0x2a>
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d003      	beq.n	800811e <I2C_MasterRequestWrite+0x2a>
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800811c:	d108      	bne.n	8008130 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	e00b      	b.n	8008148 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008134:	2b12      	cmp	r3, #18
 8008136:	d107      	bne.n	8008148 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008146:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f000 f9df 	bl	8008518 <I2C_WaitOnFlagUntilTimeout>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00d      	beq.n	800817c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800816a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800816e:	d103      	bne.n	8008178 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008176:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e035      	b.n	80081e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008184:	d108      	bne.n	8008198 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008186:	897b      	ldrh	r3, [r7, #10]
 8008188:	b2db      	uxtb	r3, r3
 800818a:	461a      	mov	r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008194:	611a      	str	r2, [r3, #16]
 8008196:	e01b      	b.n	80081d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008198:	897b      	ldrh	r3, [r7, #10]
 800819a:	11db      	asrs	r3, r3, #7
 800819c:	b2db      	uxtb	r3, r3
 800819e:	f003 0306 	and.w	r3, r3, #6
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	f063 030f 	orn	r3, r3, #15
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	490e      	ldr	r1, [pc, #56]	; (80081f0 <I2C_MasterRequestWrite+0xfc>)
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f000 fa05 	bl	80085c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e010      	b.n	80081e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80081c6:	897b      	ldrh	r3, [r7, #10]
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	4907      	ldr	r1, [pc, #28]	; (80081f4 <I2C_MasterRequestWrite+0x100>)
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f000 f9f5 	bl	80085c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e000      	b.n	80081e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3718      	adds	r7, #24
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	00010008 	.word	0x00010008
 80081f4:	00010002 	.word	0x00010002

080081f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b088      	sub	sp, #32
 80081fc:	af02      	add	r7, sp, #8
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	4608      	mov	r0, r1
 8008202:	4611      	mov	r1, r2
 8008204:	461a      	mov	r2, r3
 8008206:	4603      	mov	r3, r0
 8008208:	817b      	strh	r3, [r7, #10]
 800820a:	460b      	mov	r3, r1
 800820c:	813b      	strh	r3, [r7, #8]
 800820e:	4613      	mov	r3, r2
 8008210:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008220:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008230:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	2200      	movs	r2, #0
 800823a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f000 f96a 	bl	8008518 <I2C_WaitOnFlagUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00d      	beq.n	8008266 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008258:	d103      	bne.n	8008262 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008260:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008262:	2303      	movs	r3, #3
 8008264:	e0aa      	b.n	80083bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008266:	897b      	ldrh	r3, [r7, #10]
 8008268:	b2db      	uxtb	r3, r3
 800826a:	461a      	mov	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008274:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	6a3a      	ldr	r2, [r7, #32]
 800827a:	4952      	ldr	r1, [pc, #328]	; (80083c4 <I2C_RequestMemoryRead+0x1cc>)
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f000 f9a2 	bl	80085c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e097      	b.n	80083bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800828c:	2300      	movs	r3, #0
 800828e:	617b      	str	r3, [r7, #20]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	617b      	str	r3, [r7, #20]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	617b      	str	r3, [r7, #20]
 80082a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082a4:	6a39      	ldr	r1, [r7, #32]
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 fa0c 	bl	80086c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00d      	beq.n	80082ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b6:	2b04      	cmp	r3, #4
 80082b8:	d107      	bne.n	80082ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e076      	b.n	80083bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082ce:	88fb      	ldrh	r3, [r7, #6]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d105      	bne.n	80082e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80082d4:	893b      	ldrh	r3, [r7, #8]
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	611a      	str	r2, [r3, #16]
 80082de:	e021      	b.n	8008324 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80082e0:	893b      	ldrh	r3, [r7, #8]
 80082e2:	0a1b      	lsrs	r3, r3, #8
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082f0:	6a39      	ldr	r1, [r7, #32]
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 f9e6 	bl	80086c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00d      	beq.n	800831a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008302:	2b04      	cmp	r3, #4
 8008304:	d107      	bne.n	8008316 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008314:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e050      	b.n	80083bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800831a:	893b      	ldrh	r3, [r7, #8]
 800831c:	b2da      	uxtb	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008326:	6a39      	ldr	r1, [r7, #32]
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f000 f9cb 	bl	80086c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00d      	beq.n	8008350 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008338:	2b04      	cmp	r3, #4
 800833a:	d107      	bne.n	800834c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800834a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e035      	b.n	80083bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800835e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	2200      	movs	r2, #0
 8008368:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f000 f8d3 	bl	8008518 <I2C_WaitOnFlagUntilTimeout>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00d      	beq.n	8008394 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008386:	d103      	bne.n	8008390 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800838e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e013      	b.n	80083bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008394:	897b      	ldrh	r3, [r7, #10]
 8008396:	b2db      	uxtb	r3, r3
 8008398:	f043 0301 	orr.w	r3, r3, #1
 800839c:	b2da      	uxtb	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	6a3a      	ldr	r2, [r7, #32]
 80083a8:	4906      	ldr	r1, [pc, #24]	; (80083c4 <I2C_RequestMemoryRead+0x1cc>)
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 f90b 	bl	80085c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e000      	b.n	80083bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3718      	adds	r7, #24
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	00010002 	.word	0x00010002

080083c8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083e0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80083e2:	4b4b      	ldr	r3, [pc, #300]	; (8008510 <I2C_DMAAbort+0x148>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	08db      	lsrs	r3, r3, #3
 80083e8:	4a4a      	ldr	r2, [pc, #296]	; (8008514 <I2C_DMAAbort+0x14c>)
 80083ea:	fba2 2303 	umull	r2, r3, r2, r3
 80083ee:	0a1a      	lsrs	r2, r3, #8
 80083f0:	4613      	mov	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	00da      	lsls	r2, r3, #3
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d106      	bne.n	8008410 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008406:	f043 0220 	orr.w	r2, r3, #32
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800840e:	e00a      	b.n	8008426 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	3b01      	subs	r3, #1
 8008414:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008424:	d0ea      	beq.n	80083fc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800842a:	2b00      	cmp	r3, #0
 800842c:	d003      	beq.n	8008436 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008432:	2200      	movs	r2, #0
 8008434:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843a:	2b00      	cmp	r3, #0
 800843c:	d003      	beq.n	8008446 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008442:	2200      	movs	r2, #0
 8008444:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008454:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2200      	movs	r2, #0
 800845a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008460:	2b00      	cmp	r3, #0
 8008462:	d003      	beq.n	800846c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008468:	2200      	movs	r2, #0
 800846a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008478:	2200      	movs	r2, #0
 800847a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f022 0201 	bic.w	r2, r2, #1
 800848a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b60      	cmp	r3, #96	; 0x60
 8008496:	d10e      	bne.n	80084b6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	2220      	movs	r2, #32
 800849c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	2200      	movs	r2, #0
 80084ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80084ae:	6978      	ldr	r0, [r7, #20]
 80084b0:	f7fe fd43 	bl	8006f3a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80084b4:	e027      	b.n	8008506 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80084b6:	7cfb      	ldrb	r3, [r7, #19]
 80084b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80084bc:	2b28      	cmp	r3, #40	; 0x28
 80084be:	d117      	bne.n	80084f0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f042 0201 	orr.w	r2, r2, #1
 80084ce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	2200      	movs	r2, #0
 80084e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2228      	movs	r2, #40	; 0x28
 80084ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80084ee:	e007      	b.n	8008500 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2220      	movs	r2, #32
 80084f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008500:	6978      	ldr	r0, [r7, #20]
 8008502:	f7fe fd10 	bl	8006f26 <HAL_I2C_ErrorCallback>
}
 8008506:	bf00      	nop
 8008508:	3718      	adds	r7, #24
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20000008 	.word	0x20000008
 8008514:	14f8b589 	.word	0x14f8b589

08008518 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	603b      	str	r3, [r7, #0]
 8008524:	4613      	mov	r3, r2
 8008526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008528:	e025      	b.n	8008576 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008530:	d021      	beq.n	8008576 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008532:	f7fc fd89 	bl	8005048 <HAL_GetTick>
 8008536:	4602      	mov	r2, r0
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	429a      	cmp	r2, r3
 8008540:	d302      	bcc.n	8008548 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d116      	bne.n	8008576 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2220      	movs	r2, #32
 8008552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008562:	f043 0220 	orr.w	r2, r3, #32
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e023      	b.n	80085be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	0c1b      	lsrs	r3, r3, #16
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b01      	cmp	r3, #1
 800857e:	d10d      	bne.n	800859c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	43da      	mvns	r2, r3
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	4013      	ands	r3, r2
 800858c:	b29b      	uxth	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	bf0c      	ite	eq
 8008592:	2301      	moveq	r3, #1
 8008594:	2300      	movne	r3, #0
 8008596:	b2db      	uxtb	r3, r3
 8008598:	461a      	mov	r2, r3
 800859a:	e00c      	b.n	80085b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	43da      	mvns	r2, r3
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	4013      	ands	r3, r2
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	bf0c      	ite	eq
 80085ae:	2301      	moveq	r3, #1
 80085b0:	2300      	movne	r3, #0
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	461a      	mov	r2, r3
 80085b6:	79fb      	ldrb	r3, [r7, #7]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d0b6      	beq.n	800852a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	60f8      	str	r0, [r7, #12]
 80085ce:	60b9      	str	r1, [r7, #8]
 80085d0:	607a      	str	r2, [r7, #4]
 80085d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80085d4:	e051      	b.n	800867a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085e4:	d123      	bne.n	800862e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80085fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2220      	movs	r2, #32
 800860a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861a:	f043 0204 	orr.w	r2, r3, #4
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e046      	b.n	80086bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008634:	d021      	beq.n	800867a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008636:	f7fc fd07 	bl	8005048 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	429a      	cmp	r2, r3
 8008644:	d302      	bcc.n	800864c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d116      	bne.n	800867a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2220      	movs	r2, #32
 8008656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008666:	f043 0220 	orr.w	r2, r3, #32
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	e020      	b.n	80086bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	0c1b      	lsrs	r3, r3, #16
 800867e:	b2db      	uxtb	r3, r3
 8008680:	2b01      	cmp	r3, #1
 8008682:	d10c      	bne.n	800869e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	43da      	mvns	r2, r3
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	4013      	ands	r3, r2
 8008690:	b29b      	uxth	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	bf14      	ite	ne
 8008696:	2301      	movne	r3, #1
 8008698:	2300      	moveq	r3, #0
 800869a:	b2db      	uxtb	r3, r3
 800869c:	e00b      	b.n	80086b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	43da      	mvns	r2, r3
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	4013      	ands	r3, r2
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	bf14      	ite	ne
 80086b0:	2301      	movne	r3, #1
 80086b2:	2300      	moveq	r3, #0
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d18d      	bne.n	80085d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086d0:	e02d      	b.n	800872e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f000 f900 	bl	80088d8 <I2C_IsAcknowledgeFailed>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e02d      	b.n	800873e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086e8:	d021      	beq.n	800872e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086ea:	f7fc fcad 	bl	8005048 <HAL_GetTick>
 80086ee:	4602      	mov	r2, r0
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d302      	bcc.n	8008700 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d116      	bne.n	800872e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2220      	movs	r2, #32
 800870a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871a:	f043 0220 	orr.w	r2, r3, #32
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e007      	b.n	800873e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008738:	2b80      	cmp	r3, #128	; 0x80
 800873a:	d1ca      	bne.n	80086d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b084      	sub	sp, #16
 800874a:	af00      	add	r7, sp, #0
 800874c:	60f8      	str	r0, [r7, #12]
 800874e:	60b9      	str	r1, [r7, #8]
 8008750:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008752:	e02d      	b.n	80087b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f000 f8bf 	bl	80088d8 <I2C_IsAcknowledgeFailed>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d001      	beq.n	8008764 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e02d      	b.n	80087c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800876a:	d021      	beq.n	80087b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800876c:	f7fc fc6c 	bl	8005048 <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	429a      	cmp	r2, r3
 800877a:	d302      	bcc.n	8008782 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d116      	bne.n	80087b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2220      	movs	r2, #32
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879c:	f043 0220 	orr.w	r2, r3, #32
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e007      	b.n	80087c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	f003 0304 	and.w	r3, r3, #4
 80087ba:	2b04      	cmp	r3, #4
 80087bc:	d1ca      	bne.n	8008754 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80087d4:	4b13      	ldr	r3, [pc, #76]	; (8008824 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	08db      	lsrs	r3, r3, #3
 80087da:	4a13      	ldr	r2, [pc, #76]	; (8008828 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80087dc:	fba2 2303 	umull	r2, r3, r2, r3
 80087e0:	0a1a      	lsrs	r2, r3, #8
 80087e2:	4613      	mov	r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3b01      	subs	r3, #1
 80087ee:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d107      	bne.n	8008806 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fa:	f043 0220 	orr.w	r2, r3, #32
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e008      	b.n	8008818 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008814:	d0e9      	beq.n	80087ea <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3714      	adds	r7, #20
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr
 8008824:	20000008 	.word	0x20000008
 8008828:	14f8b589 	.word	0x14f8b589

0800882c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008838:	e042      	b.n	80088c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	695b      	ldr	r3, [r3, #20]
 8008840:	f003 0310 	and.w	r3, r3, #16
 8008844:	2b10      	cmp	r3, #16
 8008846:	d119      	bne.n	800887c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f06f 0210 	mvn.w	r2, #16
 8008850:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2220      	movs	r2, #32
 800885c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	e029      	b.n	80088d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800887c:	f7fc fbe4 	bl	8005048 <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	429a      	cmp	r2, r3
 800888a:	d302      	bcc.n	8008892 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d116      	bne.n	80088c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2220      	movs	r2, #32
 800889c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ac:	f043 0220 	orr.w	r2, r3, #32
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e007      	b.n	80088d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ca:	2b40      	cmp	r3, #64	; 0x40
 80088cc:	d1b5      	bne.n	800883a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088ee:	d11b      	bne.n	8008928 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2220      	movs	r2, #32
 8008904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008914:	f043 0204 	orr.w	r2, r3, #4
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e000      	b.n	800892a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008936:	b480      	push	{r7}
 8008938:	b083      	sub	sp, #12
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008942:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008946:	d103      	bne.n	8008950 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800894e:	e007      	b.n	8008960 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008954:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008958:	d102      	bne.n	8008960 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2208      	movs	r2, #8
 800895e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800896c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800896e:	b08f      	sub	sp, #60	; 0x3c
 8008970:	af0a      	add	r7, sp, #40	; 0x28
 8008972:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d101      	bne.n	800897e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e10f      	b.n	8008b9e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b00      	cmp	r3, #0
 800898e:	d106      	bne.n	800899e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f006 fbab 	bl	800f0f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2203      	movs	r2, #3
 80089a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d102      	bne.n	80089b8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4618      	mov	r0, r3
 80089be:	f002 f92c 	bl	800ac1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	687e      	ldr	r6, [r7, #4]
 80089ca:	466d      	mov	r5, sp
 80089cc:	f106 0410 	add.w	r4, r6, #16
 80089d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80089d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80089d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80089d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80089d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80089dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80089e0:	1d33      	adds	r3, r6, #4
 80089e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089e4:	6838      	ldr	r0, [r7, #0]
 80089e6:	f002 f803 	bl	800a9f0 <USB_CoreInit>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d005      	beq.n	80089fc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2202      	movs	r2, #2
 80089f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e0d0      	b.n	8008b9e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2100      	movs	r1, #0
 8008a02:	4618      	mov	r0, r3
 8008a04:	f002 f91a 	bl	800ac3c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73fb      	strb	r3, [r7, #15]
 8008a0c:	e04a      	b.n	8008aa4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008a0e:	7bfa      	ldrb	r2, [r7, #15]
 8008a10:	6879      	ldr	r1, [r7, #4]
 8008a12:	4613      	mov	r3, r2
 8008a14:	00db      	lsls	r3, r3, #3
 8008a16:	1a9b      	subs	r3, r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	440b      	add	r3, r1
 8008a1c:	333d      	adds	r3, #61	; 0x3d
 8008a1e:	2201      	movs	r2, #1
 8008a20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008a22:	7bfa      	ldrb	r2, [r7, #15]
 8008a24:	6879      	ldr	r1, [r7, #4]
 8008a26:	4613      	mov	r3, r2
 8008a28:	00db      	lsls	r3, r3, #3
 8008a2a:	1a9b      	subs	r3, r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	440b      	add	r3, r1
 8008a30:	333c      	adds	r3, #60	; 0x3c
 8008a32:	7bfa      	ldrb	r2, [r7, #15]
 8008a34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008a36:	7bfa      	ldrb	r2, [r7, #15]
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
 8008a3a:	b298      	uxth	r0, r3
 8008a3c:	6879      	ldr	r1, [r7, #4]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	00db      	lsls	r3, r3, #3
 8008a42:	1a9b      	subs	r3, r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	440b      	add	r3, r1
 8008a48:	3342      	adds	r3, #66	; 0x42
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008a4e:	7bfa      	ldrb	r2, [r7, #15]
 8008a50:	6879      	ldr	r1, [r7, #4]
 8008a52:	4613      	mov	r3, r2
 8008a54:	00db      	lsls	r3, r3, #3
 8008a56:	1a9b      	subs	r3, r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	440b      	add	r3, r1
 8008a5c:	333f      	adds	r3, #63	; 0x3f
 8008a5e:	2200      	movs	r2, #0
 8008a60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008a62:	7bfa      	ldrb	r2, [r7, #15]
 8008a64:	6879      	ldr	r1, [r7, #4]
 8008a66:	4613      	mov	r3, r2
 8008a68:	00db      	lsls	r3, r3, #3
 8008a6a:	1a9b      	subs	r3, r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	440b      	add	r3, r1
 8008a70:	3344      	adds	r3, #68	; 0x44
 8008a72:	2200      	movs	r2, #0
 8008a74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008a76:	7bfa      	ldrb	r2, [r7, #15]
 8008a78:	6879      	ldr	r1, [r7, #4]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	00db      	lsls	r3, r3, #3
 8008a7e:	1a9b      	subs	r3, r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	440b      	add	r3, r1
 8008a84:	3348      	adds	r3, #72	; 0x48
 8008a86:	2200      	movs	r2, #0
 8008a88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008a8a:	7bfa      	ldrb	r2, [r7, #15]
 8008a8c:	6879      	ldr	r1, [r7, #4]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	00db      	lsls	r3, r3, #3
 8008a92:	1a9b      	subs	r3, r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	440b      	add	r3, r1
 8008a98:	3350      	adds	r3, #80	; 0x50
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	73fb      	strb	r3, [r7, #15]
 8008aa4:	7bfa      	ldrb	r2, [r7, #15]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d3af      	bcc.n	8008a0e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73fb      	strb	r3, [r7, #15]
 8008ab2:	e044      	b.n	8008b3e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008ab4:	7bfa      	ldrb	r2, [r7, #15]
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	00db      	lsls	r3, r3, #3
 8008abc:	1a9b      	subs	r3, r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	440b      	add	r3, r1
 8008ac2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008aca:	7bfa      	ldrb	r2, [r7, #15]
 8008acc:	6879      	ldr	r1, [r7, #4]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	00db      	lsls	r3, r3, #3
 8008ad2:	1a9b      	subs	r3, r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	440b      	add	r3, r1
 8008ad8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008adc:	7bfa      	ldrb	r2, [r7, #15]
 8008ade:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008ae0:	7bfa      	ldrb	r2, [r7, #15]
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	00db      	lsls	r3, r3, #3
 8008ae8:	1a9b      	subs	r3, r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	440b      	add	r3, r1
 8008aee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008af2:	2200      	movs	r2, #0
 8008af4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008af6:	7bfa      	ldrb	r2, [r7, #15]
 8008af8:	6879      	ldr	r1, [r7, #4]
 8008afa:	4613      	mov	r3, r2
 8008afc:	00db      	lsls	r3, r3, #3
 8008afe:	1a9b      	subs	r3, r3, r2
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	440b      	add	r3, r1
 8008b04:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008b08:	2200      	movs	r2, #0
 8008b0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008b0c:	7bfa      	ldrb	r2, [r7, #15]
 8008b0e:	6879      	ldr	r1, [r7, #4]
 8008b10:	4613      	mov	r3, r2
 8008b12:	00db      	lsls	r3, r3, #3
 8008b14:	1a9b      	subs	r3, r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	440b      	add	r3, r1
 8008b1a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008b1e:	2200      	movs	r2, #0
 8008b20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008b22:	7bfa      	ldrb	r2, [r7, #15]
 8008b24:	6879      	ldr	r1, [r7, #4]
 8008b26:	4613      	mov	r3, r2
 8008b28:	00db      	lsls	r3, r3, #3
 8008b2a:	1a9b      	subs	r3, r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	440b      	add	r3, r1
 8008b30:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008b34:	2200      	movs	r2, #0
 8008b36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	73fb      	strb	r3, [r7, #15]
 8008b3e:	7bfa      	ldrb	r2, [r7, #15]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d3b5      	bcc.n	8008ab4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	603b      	str	r3, [r7, #0]
 8008b4e:	687e      	ldr	r6, [r7, #4]
 8008b50:	466d      	mov	r5, sp
 8008b52:	f106 0410 	add.w	r4, r6, #16
 8008b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008b62:	e885 0003 	stmia.w	r5, {r0, r1}
 8008b66:	1d33      	adds	r3, r6, #4
 8008b68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b6a:	6838      	ldr	r0, [r7, #0]
 8008b6c:	f002 f890 	bl	800ac90 <USB_DevInit>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d005      	beq.n	8008b82 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2202      	movs	r2, #2
 8008b7a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e00d      	b.n	8008b9e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f003 f8d8 	bl	800bd4c <USB_DevDisconnect>

  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3714      	adds	r7, #20
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ba6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b084      	sub	sp, #16
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d101      	bne.n	8008bc2 <HAL_PCD_Start+0x1c>
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	e020      	b.n	8008c04 <HAL_PCD_Start+0x5e>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d109      	bne.n	8008be6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d005      	beq.n	8008be6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f002 f804 	bl	800abf8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f003 f888 	bl	800bd0a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008c0c:	b590      	push	{r4, r7, lr}
 8008c0e:	b08d      	sub	sp, #52	; 0x34
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c1a:	6a3b      	ldr	r3, [r7, #32]
 8008c1c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f003 f946 	bl	800beb4 <USB_GetMode>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f040 839d 	bne.w	800936a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f003 f8aa 	bl	800bd8e <USB_ReadInterrupts>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 8393 	beq.w	8009368 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f003 f8a1 	bl	800bd8e <USB_ReadInterrupts>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	f003 0302 	and.w	r3, r3, #2
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d107      	bne.n	8008c66 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	695a      	ldr	r2, [r3, #20]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f002 0202 	and.w	r2, r2, #2
 8008c64:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f003 f88f 	bl	800bd8e <USB_ReadInterrupts>
 8008c70:	4603      	mov	r3, r0
 8008c72:	f003 0310 	and.w	r3, r3, #16
 8008c76:	2b10      	cmp	r3, #16
 8008c78:	d161      	bne.n	8008d3e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	699a      	ldr	r2, [r3, #24]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f022 0210 	bic.w	r2, r2, #16
 8008c88:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	f003 020f 	and.w	r2, r3, #15
 8008c96:	4613      	mov	r3, r2
 8008c98:	00db      	lsls	r3, r3, #3
 8008c9a:	1a9b      	subs	r3, r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	0c5b      	lsrs	r3, r3, #17
 8008cae:	f003 030f 	and.w	r3, r3, #15
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d124      	bne.n	8008d00 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d035      	beq.n	8008d2e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	091b      	lsrs	r3, r3, #4
 8008cca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008ccc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	6a38      	ldr	r0, [r7, #32]
 8008cd6:	f002 fef5 	bl	800bac4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	68da      	ldr	r2, [r3, #12]
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	091b      	lsrs	r3, r3, #4
 8008ce2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ce6:	441a      	add	r2, r3
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	699a      	ldr	r2, [r3, #24]
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	091b      	lsrs	r3, r3, #4
 8008cf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008cf8:	441a      	add	r2, r3
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	619a      	str	r2, [r3, #24]
 8008cfe:	e016      	b.n	8008d2e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	0c5b      	lsrs	r3, r3, #17
 8008d04:	f003 030f 	and.w	r3, r3, #15
 8008d08:	2b06      	cmp	r3, #6
 8008d0a:	d110      	bne.n	8008d2e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008d12:	2208      	movs	r2, #8
 8008d14:	4619      	mov	r1, r3
 8008d16:	6a38      	ldr	r0, [r7, #32]
 8008d18:	f002 fed4 	bl	800bac4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	699a      	ldr	r2, [r3, #24]
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	091b      	lsrs	r3, r3, #4
 8008d24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d28:	441a      	add	r2, r3
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	699a      	ldr	r2, [r3, #24]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f042 0210 	orr.w	r2, r2, #16
 8008d3c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f003 f823 	bl	800bd8e <USB_ReadInterrupts>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d4e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008d52:	d16e      	bne.n	8008e32 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008d54:	2300      	movs	r3, #0
 8008d56:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f003 f829 	bl	800bdb4 <USB_ReadDevAllOutEpInterrupt>
 8008d62:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008d64:	e062      	b.n	8008e2c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d68:	f003 0301 	and.w	r3, r3, #1
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d057      	beq.n	8008e20 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d76:	b2d2      	uxtb	r2, r2
 8008d78:	4611      	mov	r1, r2
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f003 f84e 	bl	800be1c <USB_ReadDevOutEPInterrupt>
 8008d80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	f003 0301 	and.w	r3, r3, #1
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00c      	beq.n	8008da6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	015a      	lsls	r2, r3, #5
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d98:	461a      	mov	r2, r3
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008d9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fdb1 	bl	8009908 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	f003 0308 	and.w	r3, r3, #8
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00c      	beq.n	8008dca <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	015a      	lsls	r2, r3, #5
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	4413      	add	r3, r2
 8008db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	2308      	movs	r3, #8
 8008dc0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008dc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 feab 	bl	8009b20 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f003 0310 	and.w	r3, r3, #16
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d008      	beq.n	8008de6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	015a      	lsls	r2, r3, #5
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	4413      	add	r3, r2
 8008ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de0:	461a      	mov	r2, r3
 8008de2:	2310      	movs	r3, #16
 8008de4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	f003 0320 	and.w	r3, r3, #32
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d008      	beq.n	8008e02 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	015a      	lsls	r2, r3, #5
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	2320      	movs	r3, #32
 8008e00:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d009      	beq.n	8008e20 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0e:	015a      	lsls	r2, r3, #5
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	4413      	add	r3, r2
 8008e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e18:	461a      	mov	r2, r3
 8008e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e1e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	3301      	adds	r3, #1
 8008e24:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e28:	085b      	lsrs	r3, r3, #1
 8008e2a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d199      	bne.n	8008d66 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4618      	mov	r0, r3
 8008e38:	f002 ffa9 	bl	800bd8e <USB_ReadInterrupts>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e46:	f040 80c0 	bne.w	8008fca <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f002 ffca 	bl	800bde8 <USB_ReadDevAllInEpInterrupt>
 8008e54:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008e56:	2300      	movs	r3, #0
 8008e58:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008e5a:	e0b2      	b.n	8008fc2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5e:	f003 0301 	and.w	r3, r3, #1
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f000 80a7 	beq.w	8008fb6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e6e:	b2d2      	uxtb	r2, r2
 8008e70:	4611      	mov	r1, r2
 8008e72:	4618      	mov	r0, r3
 8008e74:	f002 fff0 	bl	800be58 <USB_ReadDevInEPInterrupt>
 8008e78:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	f003 0301 	and.w	r3, r3, #1
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d057      	beq.n	8008f34 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e86:	f003 030f 	and.w	r3, r3, #15
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e90:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	43db      	mvns	r3, r3
 8008e9e:	69f9      	ldr	r1, [r7, #28]
 8008ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	015a      	lsls	r2, r3, #5
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d132      	bne.n	8008f28 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008ec2:	6879      	ldr	r1, [r7, #4]
 8008ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	00db      	lsls	r3, r3, #3
 8008eca:	1a9b      	subs	r3, r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	440b      	add	r3, r1
 8008ed0:	3348      	adds	r3, #72	; 0x48
 8008ed2:	6819      	ldr	r1, [r3, #0]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed8:	4613      	mov	r3, r2
 8008eda:	00db      	lsls	r3, r3, #3
 8008edc:	1a9b      	subs	r3, r3, r2
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4403      	add	r3, r0
 8008ee2:	3344      	adds	r3, #68	; 0x44
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4419      	add	r1, r3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eec:	4613      	mov	r3, r2
 8008eee:	00db      	lsls	r3, r3, #3
 8008ef0:	1a9b      	subs	r3, r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4403      	add	r3, r0
 8008ef6:	3348      	adds	r3, #72	; 0x48
 8008ef8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d113      	bne.n	8008f28 <HAL_PCD_IRQHandler+0x31c>
 8008f00:	6879      	ldr	r1, [r7, #4]
 8008f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f04:	4613      	mov	r3, r2
 8008f06:	00db      	lsls	r3, r3, #3
 8008f08:	1a9b      	subs	r3, r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	440b      	add	r3, r1
 8008f0e:	3350      	adds	r3, #80	; 0x50
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d108      	bne.n	8008f28 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6818      	ldr	r0, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008f20:	461a      	mov	r2, r3
 8008f22:	2101      	movs	r1, #1
 8008f24:	f002 fff8 	bl	800bf18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f006 f961 	bl	800f1f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	f003 0308 	and.w	r3, r3, #8
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d008      	beq.n	8008f50 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	015a      	lsls	r2, r3, #5
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	4413      	add	r3, r2
 8008f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	2308      	movs	r3, #8
 8008f4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	f003 0310 	and.w	r3, r3, #16
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d008      	beq.n	8008f6c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f66:	461a      	mov	r2, r3
 8008f68:	2310      	movs	r3, #16
 8008f6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d008      	beq.n	8008f88 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f82:	461a      	mov	r2, r3
 8008f84:	2340      	movs	r3, #64	; 0x40
 8008f86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	f003 0302 	and.w	r3, r3, #2
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d008      	beq.n	8008fa4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f94:	015a      	lsls	r2, r3, #5
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	4413      	add	r3, r2
 8008f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d003      	beq.n	8008fb6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008fae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 fc1b 	bl	80097ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb8:	3301      	adds	r3, #1
 8008fba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbe:	085b      	lsrs	r3, r3, #1
 8008fc0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f47f af49 	bne.w	8008e5c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f002 fedd 	bl	800bd8e <USB_ReadInterrupts>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fde:	d122      	bne.n	8009026 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	69fa      	ldr	r2, [r7, #28]
 8008fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fee:	f023 0301 	bic.w	r3, r3, #1
 8008ff2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d108      	bne.n	8009010 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009006:	2100      	movs	r1, #0
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fe27 	bl	8009c5c <HAL_PCDEx_LPM_Callback>
 800900e:	e002      	b.n	8009016 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f006 f967 	bl	800f2e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	695a      	ldr	r2, [r3, #20]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009024:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4618      	mov	r0, r3
 800902c:	f002 feaf 	bl	800bd8e <USB_ReadInterrupts>
 8009030:	4603      	mov	r3, r0
 8009032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800903a:	d112      	bne.n	8009062 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	f003 0301 	and.w	r3, r3, #1
 8009048:	2b01      	cmp	r3, #1
 800904a:	d102      	bne.n	8009052 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f006 f923 	bl	800f298 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	695a      	ldr	r2, [r3, #20]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009060:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4618      	mov	r0, r3
 8009068:	f002 fe91 	bl	800bd8e <USB_ReadInterrupts>
 800906c:	4603      	mov	r3, r0
 800906e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009076:	f040 80c7 	bne.w	8009208 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	69fa      	ldr	r2, [r7, #28]
 8009084:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009088:	f023 0301 	bic.w	r3, r3, #1
 800908c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2110      	movs	r1, #16
 8009094:	4618      	mov	r0, r3
 8009096:	f001 ff5f 	bl	800af58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800909a:	2300      	movs	r3, #0
 800909c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800909e:	e056      	b.n	800914e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80090a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a2:	015a      	lsls	r2, r3, #5
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	4413      	add	r3, r2
 80090a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ac:	461a      	mov	r2, r3
 80090ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80090b2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80090b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090c4:	0151      	lsls	r1, r2, #5
 80090c6:	69fa      	ldr	r2, [r7, #28]
 80090c8:	440a      	add	r2, r1
 80090ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80090d2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80090d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090e4:	0151      	lsls	r1, r2, #5
 80090e6:	69fa      	ldr	r2, [r7, #28]
 80090e8:	440a      	add	r2, r1
 80090ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80090f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f6:	015a      	lsls	r2, r3, #5
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	4413      	add	r3, r2
 80090fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009100:	461a      	mov	r2, r3
 8009102:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009106:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	4413      	add	r3, r2
 8009110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009118:	0151      	lsls	r1, r2, #5
 800911a:	69fa      	ldr	r2, [r7, #28]
 800911c:	440a      	add	r2, r1
 800911e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009122:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009126:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009138:	0151      	lsls	r1, r2, #5
 800913a:	69fa      	ldr	r2, [r7, #28]
 800913c:	440a      	add	r2, r1
 800913e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009142:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009146:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914a:	3301      	adds	r3, #1
 800914c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009154:	429a      	cmp	r2, r3
 8009156:	d3a3      	bcc.n	80090a0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800915e:	69db      	ldr	r3, [r3, #28]
 8009160:	69fa      	ldr	r2, [r7, #28]
 8009162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009166:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800916a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009170:	2b00      	cmp	r3, #0
 8009172:	d016      	beq.n	80091a2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800917a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800917e:	69fa      	ldr	r2, [r7, #28]
 8009180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009184:	f043 030b 	orr.w	r3, r3, #11
 8009188:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009194:	69fa      	ldr	r2, [r7, #28]
 8009196:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800919a:	f043 030b 	orr.w	r3, r3, #11
 800919e:	6453      	str	r3, [r2, #68]	; 0x44
 80091a0:	e015      	b.n	80091ce <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091a8:	695b      	ldr	r3, [r3, #20]
 80091aa:	69fa      	ldr	r2, [r7, #28]
 80091ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80091b4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80091b8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	69fa      	ldr	r2, [r7, #28]
 80091c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091c8:	f043 030b 	orr.w	r3, r3, #11
 80091cc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	69fa      	ldr	r2, [r7, #28]
 80091d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80091e0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6818      	ldr	r0, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80091f2:	461a      	mov	r2, r3
 80091f4:	f002 fe90 	bl	800bf18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	695a      	ldr	r2, [r3, #20]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009206:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4618      	mov	r0, r3
 800920e:	f002 fdbe 	bl	800bd8e <USB_ReadInterrupts>
 8009212:	4603      	mov	r3, r0
 8009214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800921c:	d124      	bne.n	8009268 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4618      	mov	r0, r3
 8009224:	f002 fe54 	bl	800bed0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4618      	mov	r0, r3
 800922e:	f001 fef4 	bl	800b01a <USB_GetDevSpeed>
 8009232:	4603      	mov	r3, r0
 8009234:	461a      	mov	r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681c      	ldr	r4, [r3, #0]
 800923e:	f001 f947 	bl	800a4d0 <HAL_RCC_GetHCLKFreq>
 8009242:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009248:	b2db      	uxtb	r3, r3
 800924a:	461a      	mov	r2, r3
 800924c:	4620      	mov	r0, r4
 800924e:	f001 fc31 	bl	800aab4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f005 fff7 	bl	800f246 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	695a      	ldr	r2, [r3, #20]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009266:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4618      	mov	r0, r3
 800926e:	f002 fd8e 	bl	800bd8e <USB_ReadInterrupts>
 8009272:	4603      	mov	r3, r0
 8009274:	f003 0308 	and.w	r3, r3, #8
 8009278:	2b08      	cmp	r3, #8
 800927a:	d10a      	bne.n	8009292 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f005 ffd4 	bl	800f22a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	695a      	ldr	r2, [r3, #20]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f002 0208 	and.w	r2, r2, #8
 8009290:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4618      	mov	r0, r3
 8009298:	f002 fd79 	bl	800bd8e <USB_ReadInterrupts>
 800929c:	4603      	mov	r3, r0
 800929e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092a6:	d10f      	bne.n	80092c8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80092a8:	2300      	movs	r3, #0
 80092aa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	4619      	mov	r1, r3
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f006 f836 	bl	800f324 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	695a      	ldr	r2, [r3, #20]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80092c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4618      	mov	r0, r3
 80092ce:	f002 fd5e 	bl	800bd8e <USB_ReadInterrupts>
 80092d2:	4603      	mov	r3, r0
 80092d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092dc:	d10f      	bne.n	80092fe <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80092de:	2300      	movs	r3, #0
 80092e0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f006 f809 	bl	800f300 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	695a      	ldr	r2, [r3, #20]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80092fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4618      	mov	r0, r3
 8009304:	f002 fd43 	bl	800bd8e <USB_ReadInterrupts>
 8009308:	4603      	mov	r3, r0
 800930a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800930e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009312:	d10a      	bne.n	800932a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f006 f817 	bl	800f348 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	695a      	ldr	r2, [r3, #20]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009328:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4618      	mov	r0, r3
 8009330:	f002 fd2d 	bl	800bd8e <USB_ReadInterrupts>
 8009334:	4603      	mov	r3, r0
 8009336:	f003 0304 	and.w	r3, r3, #4
 800933a:	2b04      	cmp	r3, #4
 800933c:	d115      	bne.n	800936a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	f003 0304 	and.w	r3, r3, #4
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f006 f807 	bl	800f364 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	6859      	ldr	r1, [r3, #4]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	69ba      	ldr	r2, [r7, #24]
 8009362:	430a      	orrs	r2, r1
 8009364:	605a      	str	r2, [r3, #4]
 8009366:	e000      	b.n	800936a <HAL_PCD_IRQHandler+0x75e>
      return;
 8009368:	bf00      	nop
    }
  }
}
 800936a:	3734      	adds	r7, #52	; 0x34
 800936c:	46bd      	mov	sp, r7
 800936e:	bd90      	pop	{r4, r7, pc}

08009370 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	460b      	mov	r3, r1
 800937a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009382:	2b01      	cmp	r3, #1
 8009384:	d101      	bne.n	800938a <HAL_PCD_SetAddress+0x1a>
 8009386:	2302      	movs	r3, #2
 8009388:	e013      	b.n	80093b2 <HAL_PCD_SetAddress+0x42>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2201      	movs	r2, #1
 800938e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	78fa      	ldrb	r2, [r7, #3]
 8009396:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	78fa      	ldrb	r2, [r7, #3]
 80093a0:	4611      	mov	r1, r2
 80093a2:	4618      	mov	r0, r3
 80093a4:	f002 fc8b 	bl	800bcbe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b084      	sub	sp, #16
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	4608      	mov	r0, r1
 80093c4:	4611      	mov	r1, r2
 80093c6:	461a      	mov	r2, r3
 80093c8:	4603      	mov	r3, r0
 80093ca:	70fb      	strb	r3, [r7, #3]
 80093cc:	460b      	mov	r3, r1
 80093ce:	803b      	strh	r3, [r7, #0]
 80093d0:	4613      	mov	r3, r2
 80093d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80093d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	da0f      	bge.n	8009400 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093e0:	78fb      	ldrb	r3, [r7, #3]
 80093e2:	f003 020f 	and.w	r2, r3, #15
 80093e6:	4613      	mov	r3, r2
 80093e8:	00db      	lsls	r3, r3, #3
 80093ea:	1a9b      	subs	r3, r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	3338      	adds	r3, #56	; 0x38
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	4413      	add	r3, r2
 80093f4:	3304      	adds	r3, #4
 80093f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2201      	movs	r2, #1
 80093fc:	705a      	strb	r2, [r3, #1]
 80093fe:	e00f      	b.n	8009420 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	f003 020f 	and.w	r2, r3, #15
 8009406:	4613      	mov	r3, r2
 8009408:	00db      	lsls	r3, r3, #3
 800940a:	1a9b      	subs	r3, r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	4413      	add	r3, r2
 8009416:	3304      	adds	r3, #4
 8009418:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009420:	78fb      	ldrb	r3, [r7, #3]
 8009422:	f003 030f 	and.w	r3, r3, #15
 8009426:	b2da      	uxtb	r2, r3
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800942c:	883a      	ldrh	r2, [r7, #0]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	78ba      	ldrb	r2, [r7, #2]
 8009436:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	785b      	ldrb	r3, [r3, #1]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d004      	beq.n	800944a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	b29a      	uxth	r2, r3
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800944a:	78bb      	ldrb	r3, [r7, #2]
 800944c:	2b02      	cmp	r3, #2
 800944e:	d102      	bne.n	8009456 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800945c:	2b01      	cmp	r3, #1
 800945e:	d101      	bne.n	8009464 <HAL_PCD_EP_Open+0xaa>
 8009460:	2302      	movs	r3, #2
 8009462:	e00e      	b.n	8009482 <HAL_PCD_EP_Open+0xc8>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68f9      	ldr	r1, [r7, #12]
 8009472:	4618      	mov	r0, r3
 8009474:	f001 fdf6 	bl	800b064 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009480:	7afb      	ldrb	r3, [r7, #11]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b084      	sub	sp, #16
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	460b      	mov	r3, r1
 8009494:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800949a:	2b00      	cmp	r3, #0
 800949c:	da0f      	bge.n	80094be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800949e:	78fb      	ldrb	r3, [r7, #3]
 80094a0:	f003 020f 	and.w	r2, r3, #15
 80094a4:	4613      	mov	r3, r2
 80094a6:	00db      	lsls	r3, r3, #3
 80094a8:	1a9b      	subs	r3, r3, r2
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	3338      	adds	r3, #56	; 0x38
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	4413      	add	r3, r2
 80094b2:	3304      	adds	r3, #4
 80094b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2201      	movs	r2, #1
 80094ba:	705a      	strb	r2, [r3, #1]
 80094bc:	e00f      	b.n	80094de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094be:	78fb      	ldrb	r3, [r7, #3]
 80094c0:	f003 020f 	and.w	r2, r3, #15
 80094c4:	4613      	mov	r3, r2
 80094c6:	00db      	lsls	r3, r3, #3
 80094c8:	1a9b      	subs	r3, r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	4413      	add	r3, r2
 80094d4:	3304      	adds	r3, #4
 80094d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80094de:	78fb      	ldrb	r3, [r7, #3]
 80094e0:	f003 030f 	and.w	r3, r3, #15
 80094e4:	b2da      	uxtb	r2, r3
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d101      	bne.n	80094f8 <HAL_PCD_EP_Close+0x6e>
 80094f4:	2302      	movs	r3, #2
 80094f6:	e00e      	b.n	8009516 <HAL_PCD_EP_Close+0x8c>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68f9      	ldr	r1, [r7, #12]
 8009506:	4618      	mov	r0, r3
 8009508:	f001 fe34 	bl	800b174 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b086      	sub	sp, #24
 8009522:	af00      	add	r7, sp, #0
 8009524:	60f8      	str	r0, [r7, #12]
 8009526:	607a      	str	r2, [r7, #4]
 8009528:	603b      	str	r3, [r7, #0]
 800952a:	460b      	mov	r3, r1
 800952c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800952e:	7afb      	ldrb	r3, [r7, #11]
 8009530:	f003 020f 	and.w	r2, r3, #15
 8009534:	4613      	mov	r3, r2
 8009536:	00db      	lsls	r3, r3, #3
 8009538:	1a9b      	subs	r3, r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	4413      	add	r3, r2
 8009544:	3304      	adds	r3, #4
 8009546:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	683a      	ldr	r2, [r7, #0]
 8009552:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	2200      	movs	r2, #0
 8009558:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	2200      	movs	r2, #0
 800955e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009560:	7afb      	ldrb	r3, [r7, #11]
 8009562:	f003 030f 	and.w	r3, r3, #15
 8009566:	b2da      	uxtb	r2, r3
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d102      	bne.n	800957a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800957a:	7afb      	ldrb	r3, [r7, #11]
 800957c:	f003 030f 	and.w	r3, r3, #15
 8009580:	2b00      	cmp	r3, #0
 8009582:	d109      	bne.n	8009598 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6818      	ldr	r0, [r3, #0]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	b2db      	uxtb	r3, r3
 800958e:	461a      	mov	r2, r3
 8009590:	6979      	ldr	r1, [r7, #20]
 8009592:	f002 f90f 	bl	800b7b4 <USB_EP0StartXfer>
 8009596:	e008      	b.n	80095aa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6818      	ldr	r0, [r3, #0]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	461a      	mov	r2, r3
 80095a4:	6979      	ldr	r1, [r7, #20]
 80095a6:	f001 fec1 	bl	800b32c <USB_EPStartXfer>
  }

  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3718      	adds	r7, #24
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	460b      	mov	r3, r1
 80095be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80095c0:	78fb      	ldrb	r3, [r7, #3]
 80095c2:	f003 020f 	and.w	r2, r3, #15
 80095c6:	6879      	ldr	r1, [r7, #4]
 80095c8:	4613      	mov	r3, r2
 80095ca:	00db      	lsls	r3, r3, #3
 80095cc:	1a9b      	subs	r3, r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	440b      	add	r3, r1
 80095d2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80095d6:	681b      	ldr	r3, [r3, #0]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b086      	sub	sp, #24
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	607a      	str	r2, [r7, #4]
 80095ee:	603b      	str	r3, [r7, #0]
 80095f0:	460b      	mov	r3, r1
 80095f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095f4:	7afb      	ldrb	r3, [r7, #11]
 80095f6:	f003 020f 	and.w	r2, r3, #15
 80095fa:	4613      	mov	r3, r2
 80095fc:	00db      	lsls	r3, r3, #3
 80095fe:	1a9b      	subs	r3, r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	3338      	adds	r3, #56	; 0x38
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	4413      	add	r3, r2
 8009608:	3304      	adds	r3, #4
 800960a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	683a      	ldr	r2, [r7, #0]
 8009616:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	2200      	movs	r2, #0
 800961c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	2201      	movs	r2, #1
 8009622:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009624:	7afb      	ldrb	r3, [r7, #11]
 8009626:	f003 030f 	and.w	r3, r3, #15
 800962a:	b2da      	uxtb	r2, r3
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d102      	bne.n	800963e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800963e:	7afb      	ldrb	r3, [r7, #11]
 8009640:	f003 030f 	and.w	r3, r3, #15
 8009644:	2b00      	cmp	r3, #0
 8009646:	d109      	bne.n	800965c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6818      	ldr	r0, [r3, #0]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	b2db      	uxtb	r3, r3
 8009652:	461a      	mov	r2, r3
 8009654:	6979      	ldr	r1, [r7, #20]
 8009656:	f002 f8ad 	bl	800b7b4 <USB_EP0StartXfer>
 800965a:	e008      	b.n	800966e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6818      	ldr	r0, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	b2db      	uxtb	r3, r3
 8009666:	461a      	mov	r2, r3
 8009668:	6979      	ldr	r1, [r7, #20]
 800966a:	f001 fe5f 	bl	800b32c <USB_EPStartXfer>
  }

  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3718      	adds	r7, #24
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009684:	78fb      	ldrb	r3, [r7, #3]
 8009686:	f003 020f 	and.w	r2, r3, #15
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	429a      	cmp	r2, r3
 8009690:	d901      	bls.n	8009696 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e050      	b.n	8009738 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800969a:	2b00      	cmp	r3, #0
 800969c:	da0f      	bge.n	80096be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800969e:	78fb      	ldrb	r3, [r7, #3]
 80096a0:	f003 020f 	and.w	r2, r3, #15
 80096a4:	4613      	mov	r3, r2
 80096a6:	00db      	lsls	r3, r3, #3
 80096a8:	1a9b      	subs	r3, r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	3338      	adds	r3, #56	; 0x38
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	4413      	add	r3, r2
 80096b2:	3304      	adds	r3, #4
 80096b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2201      	movs	r2, #1
 80096ba:	705a      	strb	r2, [r3, #1]
 80096bc:	e00d      	b.n	80096da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80096be:	78fa      	ldrb	r2, [r7, #3]
 80096c0:	4613      	mov	r3, r2
 80096c2:	00db      	lsls	r3, r3, #3
 80096c4:	1a9b      	subs	r3, r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	4413      	add	r3, r2
 80096d0:	3304      	adds	r3, #4
 80096d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2200      	movs	r2, #0
 80096d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2201      	movs	r2, #1
 80096de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80096e0:	78fb      	ldrb	r3, [r7, #3]
 80096e2:	f003 030f 	and.w	r3, r3, #15
 80096e6:	b2da      	uxtb	r2, r3
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d101      	bne.n	80096fa <HAL_PCD_EP_SetStall+0x82>
 80096f6:	2302      	movs	r3, #2
 80096f8:	e01e      	b.n	8009738 <HAL_PCD_EP_SetStall+0xc0>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2201      	movs	r2, #1
 80096fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	68f9      	ldr	r1, [r7, #12]
 8009708:	4618      	mov	r0, r3
 800970a:	f002 fa04 	bl	800bb16 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800970e:	78fb      	ldrb	r3, [r7, #3]
 8009710:	f003 030f 	and.w	r3, r3, #15
 8009714:	2b00      	cmp	r3, #0
 8009716:	d10a      	bne.n	800972e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6818      	ldr	r0, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	b2d9      	uxtb	r1, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009728:	461a      	mov	r2, r3
 800972a:	f002 fbf5 	bl	800bf18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3710      	adds	r7, #16
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	460b      	mov	r3, r1
 800974a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800974c:	78fb      	ldrb	r3, [r7, #3]
 800974e:	f003 020f 	and.w	r2, r3, #15
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	429a      	cmp	r2, r3
 8009758:	d901      	bls.n	800975e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e042      	b.n	80097e4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800975e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009762:	2b00      	cmp	r3, #0
 8009764:	da0f      	bge.n	8009786 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009766:	78fb      	ldrb	r3, [r7, #3]
 8009768:	f003 020f 	and.w	r2, r3, #15
 800976c:	4613      	mov	r3, r2
 800976e:	00db      	lsls	r3, r3, #3
 8009770:	1a9b      	subs	r3, r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	3338      	adds	r3, #56	; 0x38
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	4413      	add	r3, r2
 800977a:	3304      	adds	r3, #4
 800977c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2201      	movs	r2, #1
 8009782:	705a      	strb	r2, [r3, #1]
 8009784:	e00f      	b.n	80097a6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009786:	78fb      	ldrb	r3, [r7, #3]
 8009788:	f003 020f 	and.w	r2, r3, #15
 800978c:	4613      	mov	r3, r2
 800978e:	00db      	lsls	r3, r3, #3
 8009790:	1a9b      	subs	r3, r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	4413      	add	r3, r2
 800979c:	3304      	adds	r3, #4
 800979e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80097ac:	78fb      	ldrb	r3, [r7, #3]
 80097ae:	f003 030f 	and.w	r3, r3, #15
 80097b2:	b2da      	uxtb	r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d101      	bne.n	80097c6 <HAL_PCD_EP_ClrStall+0x86>
 80097c2:	2302      	movs	r3, #2
 80097c4:	e00e      	b.n	80097e4 <HAL_PCD_EP_ClrStall+0xa4>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68f9      	ldr	r1, [r7, #12]
 80097d4:	4618      	mov	r0, r3
 80097d6:	f002 fa0c 	bl	800bbf2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b08a      	sub	sp, #40	; 0x28
 80097f0:	af02      	add	r7, sp, #8
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009800:	683a      	ldr	r2, [r7, #0]
 8009802:	4613      	mov	r3, r2
 8009804:	00db      	lsls	r3, r3, #3
 8009806:	1a9b      	subs	r3, r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	3338      	adds	r3, #56	; 0x38
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	4413      	add	r3, r2
 8009810:	3304      	adds	r3, #4
 8009812:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	699a      	ldr	r2, [r3, #24]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	695b      	ldr	r3, [r3, #20]
 800981c:	429a      	cmp	r2, r3
 800981e:	d901      	bls.n	8009824 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	e06c      	b.n	80098fe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	695a      	ldr	r2, [r3, #20]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	69fa      	ldr	r2, [r7, #28]
 8009836:	429a      	cmp	r2, r3
 8009838:	d902      	bls.n	8009840 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	3303      	adds	r3, #3
 8009844:	089b      	lsrs	r3, r3, #2
 8009846:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009848:	e02b      	b.n	80098a2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	695a      	ldr	r2, [r3, #20]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	1ad3      	subs	r3, r2, r3
 8009854:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	69fa      	ldr	r2, [r7, #28]
 800985c:	429a      	cmp	r2, r3
 800985e:	d902      	bls.n	8009866 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	3303      	adds	r3, #3
 800986a:	089b      	lsrs	r3, r3, #2
 800986c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	68d9      	ldr	r1, [r3, #12]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	b2da      	uxtb	r2, r3
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800987e:	b2db      	uxtb	r3, r3
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	4603      	mov	r3, r0
 8009884:	6978      	ldr	r0, [r7, #20]
 8009886:	f002 f8e8 	bl	800ba5a <USB_WritePacket>

    ep->xfer_buff  += len;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	68da      	ldr	r2, [r3, #12]
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	441a      	add	r2, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	699a      	ldr	r2, [r3, #24]
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	441a      	add	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	015a      	lsls	r2, r3, #5
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	4413      	add	r3, r2
 80098aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	69ba      	ldr	r2, [r7, #24]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d809      	bhi.n	80098cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	699a      	ldr	r2, [r3, #24]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d203      	bcs.n	80098cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1be      	bne.n	800984a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	695a      	ldr	r2, [r3, #20]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	699b      	ldr	r3, [r3, #24]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d811      	bhi.n	80098fc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	f003 030f 	and.w	r3, r3, #15
 80098de:	2201      	movs	r2, #1
 80098e0:	fa02 f303 	lsl.w	r3, r2, r3
 80098e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	43db      	mvns	r3, r3
 80098f2:	6939      	ldr	r1, [r7, #16]
 80098f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098f8:	4013      	ands	r3, r2
 80098fa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3720      	adds	r7, #32
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
	...

08009908 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	333c      	adds	r3, #60	; 0x3c
 8009920:	3304      	adds	r3, #4
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	015a      	lsls	r2, r3, #5
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	4413      	add	r3, r2
 800992e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	2b01      	cmp	r3, #1
 800993c:	f040 80a0 	bne.w	8009a80 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	f003 0308 	and.w	r3, r3, #8
 8009946:	2b00      	cmp	r3, #0
 8009948:	d015      	beq.n	8009976 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	4a72      	ldr	r2, [pc, #456]	; (8009b18 <PCD_EP_OutXfrComplete_int+0x210>)
 800994e:	4293      	cmp	r3, r2
 8009950:	f240 80dd 	bls.w	8009b0e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800995a:	2b00      	cmp	r3, #0
 800995c:	f000 80d7 	beq.w	8009b0e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	015a      	lsls	r2, r3, #5
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	4413      	add	r3, r2
 8009968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800996c:	461a      	mov	r2, r3
 800996e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009972:	6093      	str	r3, [r2, #8]
 8009974:	e0cb      	b.n	8009b0e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	f003 0320 	and.w	r3, r3, #32
 800997c:	2b00      	cmp	r3, #0
 800997e:	d009      	beq.n	8009994 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	015a      	lsls	r2, r3, #5
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	4413      	add	r3, r2
 8009988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800998c:	461a      	mov	r2, r3
 800998e:	2320      	movs	r3, #32
 8009990:	6093      	str	r3, [r2, #8]
 8009992:	e0bc      	b.n	8009b0e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800999a:	2b00      	cmp	r3, #0
 800999c:	f040 80b7 	bne.w	8009b0e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	4a5d      	ldr	r2, [pc, #372]	; (8009b18 <PCD_EP_OutXfrComplete_int+0x210>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d90f      	bls.n	80099c8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00a      	beq.n	80099c8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	015a      	lsls	r2, r3, #5
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	4413      	add	r3, r2
 80099ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099be:	461a      	mov	r2, r3
 80099c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099c4:	6093      	str	r3, [r2, #8]
 80099c6:	e0a2      	b.n	8009b0e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80099c8:	6879      	ldr	r1, [r7, #4]
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	4613      	mov	r3, r2
 80099ce:	00db      	lsls	r3, r3, #3
 80099d0:	1a9b      	subs	r3, r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	440b      	add	r3, r1
 80099d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80099da:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	0159      	lsls	r1, r3, #5
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	440b      	add	r3, r1
 80099e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80099ee:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	4613      	mov	r3, r2
 80099f6:	00db      	lsls	r3, r3, #3
 80099f8:	1a9b      	subs	r3, r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4403      	add	r3, r0
 80099fe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009a02:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009a04:	6879      	ldr	r1, [r7, #4]
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	00db      	lsls	r3, r3, #3
 8009a0c:	1a9b      	subs	r3, r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	440b      	add	r3, r1
 8009a12:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009a16:	6819      	ldr	r1, [r3, #0]
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	683a      	ldr	r2, [r7, #0]
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	00db      	lsls	r3, r3, #3
 8009a20:	1a9b      	subs	r3, r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4403      	add	r3, r0
 8009a26:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4419      	add	r1, r3
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	683a      	ldr	r2, [r7, #0]
 8009a32:	4613      	mov	r3, r2
 8009a34:	00db      	lsls	r3, r3, #3
 8009a36:	1a9b      	subs	r3, r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	4403      	add	r3, r0
 8009a3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009a40:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d114      	bne.n	8009a72 <PCD_EP_OutXfrComplete_int+0x16a>
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	00db      	lsls	r3, r3, #3
 8009a50:	1a9b      	subs	r3, r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	440b      	add	r3, r1
 8009a56:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d108      	bne.n	8009a72 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6818      	ldr	r0, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	2101      	movs	r1, #1
 8009a6e:	f002 fa53 	bl	800bf18 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f005 fba1 	bl	800f1c0 <HAL_PCD_DataOutStageCallback>
 8009a7e:	e046      	b.n	8009b0e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	4a26      	ldr	r2, [pc, #152]	; (8009b1c <PCD_EP_OutXfrComplete_int+0x214>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d124      	bne.n	8009ad2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00a      	beq.n	8009aa8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	015a      	lsls	r2, r3, #5
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	4413      	add	r3, r2
 8009a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009aa4:	6093      	str	r3, [r2, #8]
 8009aa6:	e032      	b.n	8009b0e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	f003 0320 	and.w	r3, r3, #32
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d008      	beq.n	8009ac4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	015a      	lsls	r2, r3, #5
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	4413      	add	r3, r2
 8009aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009abe:	461a      	mov	r2, r3
 8009ac0:	2320      	movs	r3, #32
 8009ac2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	4619      	mov	r1, r3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f005 fb78 	bl	800f1c0 <HAL_PCD_DataOutStageCallback>
 8009ad0:	e01d      	b.n	8009b0e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d114      	bne.n	8009b02 <PCD_EP_OutXfrComplete_int+0x1fa>
 8009ad8:	6879      	ldr	r1, [r7, #4]
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	4613      	mov	r3, r2
 8009ade:	00db      	lsls	r3, r3, #3
 8009ae0:	1a9b      	subs	r3, r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	440b      	add	r3, r1
 8009ae6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d108      	bne.n	8009b02 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6818      	ldr	r0, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009afa:	461a      	mov	r2, r3
 8009afc:	2100      	movs	r1, #0
 8009afe:	f002 fa0b 	bl	800bf18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	4619      	mov	r1, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f005 fb59 	bl	800f1c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3718      	adds	r7, #24
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	4f54300a 	.word	0x4f54300a
 8009b1c:	4f54310a 	.word	0x4f54310a

08009b20 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	333c      	adds	r3, #60	; 0x3c
 8009b38:	3304      	adds	r3, #4
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	015a      	lsls	r2, r3, #5
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	4413      	add	r3, r2
 8009b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	4a15      	ldr	r2, [pc, #84]	; (8009ba8 <PCD_EP_OutSetupPacket_int+0x88>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d90e      	bls.n	8009b74 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d009      	beq.n	8009b74 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	015a      	lsls	r2, r3, #5
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	4413      	add	r3, r2
 8009b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b72:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f005 fb11 	bl	800f19c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	4a0a      	ldr	r2, [pc, #40]	; (8009ba8 <PCD_EP_OutSetupPacket_int+0x88>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d90c      	bls.n	8009b9c <PCD_EP_OutSetupPacket_int+0x7c>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d108      	bne.n	8009b9c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6818      	ldr	r0, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009b94:	461a      	mov	r2, r3
 8009b96:	2101      	movs	r1, #1
 8009b98:	f002 f9be 	bl	800bf18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3718      	adds	r7, #24
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	4f54300a 	.word	0x4f54300a

08009bac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	70fb      	strb	r3, [r7, #3]
 8009bb8:	4613      	mov	r3, r2
 8009bba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009bc4:	78fb      	ldrb	r3, [r7, #3]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d107      	bne.n	8009bda <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009bca:	883b      	ldrh	r3, [r7, #0]
 8009bcc:	0419      	lsls	r1, r3, #16
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	430a      	orrs	r2, r1
 8009bd6:	629a      	str	r2, [r3, #40]	; 0x28
 8009bd8:	e028      	b.n	8009c2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be0:	0c1b      	lsrs	r3, r3, #16
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	4413      	add	r3, r2
 8009be6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009be8:	2300      	movs	r3, #0
 8009bea:	73fb      	strb	r3, [r7, #15]
 8009bec:	e00d      	b.n	8009c0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	7bfb      	ldrb	r3, [r7, #15]
 8009bf4:	3340      	adds	r3, #64	; 0x40
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	0c1b      	lsrs	r3, r3, #16
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	4413      	add	r3, r2
 8009c02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009c04:	7bfb      	ldrb	r3, [r7, #15]
 8009c06:	3301      	adds	r3, #1
 8009c08:	73fb      	strb	r3, [r7, #15]
 8009c0a:	7bfa      	ldrb	r2, [r7, #15]
 8009c0c:	78fb      	ldrb	r3, [r7, #3]
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d3ec      	bcc.n	8009bee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009c14:	883b      	ldrh	r3, [r7, #0]
 8009c16:	0418      	lsls	r0, r3, #16
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6819      	ldr	r1, [r3, #0]
 8009c1c:	78fb      	ldrb	r3, [r7, #3]
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	4302      	orrs	r2, r0
 8009c24:	3340      	adds	r3, #64	; 0x40
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	440b      	add	r3, r1
 8009c2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3714      	adds	r7, #20
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b083      	sub	sp, #12
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	460b      	mov	r3, r1
 8009c44:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	887a      	ldrh	r2, [r7, #2]
 8009c4c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	460b      	mov	r3, r1
 8009c66:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d101      	bne.n	8009c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	e25b      	b.n	800a13e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d075      	beq.n	8009d7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009c92:	4ba3      	ldr	r3, [pc, #652]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	f003 030c 	and.w	r3, r3, #12
 8009c9a:	2b04      	cmp	r3, #4
 8009c9c:	d00c      	beq.n	8009cb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009c9e:	4ba0      	ldr	r3, [pc, #640]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009ca6:	2b08      	cmp	r3, #8
 8009ca8:	d112      	bne.n	8009cd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009caa:	4b9d      	ldr	r3, [pc, #628]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009cb6:	d10b      	bne.n	8009cd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009cb8:	4b99      	ldr	r3, [pc, #612]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d05b      	beq.n	8009d7c <HAL_RCC_OscConfig+0x108>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d157      	bne.n	8009d7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e236      	b.n	800a13e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cd8:	d106      	bne.n	8009ce8 <HAL_RCC_OscConfig+0x74>
 8009cda:	4b91      	ldr	r3, [pc, #580]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a90      	ldr	r2, [pc, #576]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ce4:	6013      	str	r3, [r2, #0]
 8009ce6:	e01d      	b.n	8009d24 <HAL_RCC_OscConfig+0xb0>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009cf0:	d10c      	bne.n	8009d0c <HAL_RCC_OscConfig+0x98>
 8009cf2:	4b8b      	ldr	r3, [pc, #556]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a8a      	ldr	r2, [pc, #552]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009cfc:	6013      	str	r3, [r2, #0]
 8009cfe:	4b88      	ldr	r3, [pc, #544]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a87      	ldr	r2, [pc, #540]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d08:	6013      	str	r3, [r2, #0]
 8009d0a:	e00b      	b.n	8009d24 <HAL_RCC_OscConfig+0xb0>
 8009d0c:	4b84      	ldr	r3, [pc, #528]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a83      	ldr	r2, [pc, #524]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d16:	6013      	str	r3, [r2, #0]
 8009d18:	4b81      	ldr	r3, [pc, #516]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a80      	ldr	r2, [pc, #512]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d013      	beq.n	8009d54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d2c:	f7fb f98c 	bl	8005048 <HAL_GetTick>
 8009d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d32:	e008      	b.n	8009d46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d34:	f7fb f988 	bl	8005048 <HAL_GetTick>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	1ad3      	subs	r3, r2, r3
 8009d3e:	2b64      	cmp	r3, #100	; 0x64
 8009d40:	d901      	bls.n	8009d46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009d42:	2303      	movs	r3, #3
 8009d44:	e1fb      	b.n	800a13e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d46:	4b76      	ldr	r3, [pc, #472]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d0f0      	beq.n	8009d34 <HAL_RCC_OscConfig+0xc0>
 8009d52:	e014      	b.n	8009d7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d54:	f7fb f978 	bl	8005048 <HAL_GetTick>
 8009d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d5a:	e008      	b.n	8009d6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d5c:	f7fb f974 	bl	8005048 <HAL_GetTick>
 8009d60:	4602      	mov	r2, r0
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	2b64      	cmp	r3, #100	; 0x64
 8009d68:	d901      	bls.n	8009d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009d6a:	2303      	movs	r3, #3
 8009d6c:	e1e7      	b.n	800a13e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d6e:	4b6c      	ldr	r3, [pc, #432]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1f0      	bne.n	8009d5c <HAL_RCC_OscConfig+0xe8>
 8009d7a:	e000      	b.n	8009d7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 0302 	and.w	r3, r3, #2
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d063      	beq.n	8009e52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009d8a:	4b65      	ldr	r3, [pc, #404]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f003 030c 	and.w	r3, r3, #12
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00b      	beq.n	8009dae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009d96:	4b62      	ldr	r3, [pc, #392]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009d9e:	2b08      	cmp	r3, #8
 8009da0:	d11c      	bne.n	8009ddc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009da2:	4b5f      	ldr	r3, [pc, #380]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d116      	bne.n	8009ddc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009dae:	4b5c      	ldr	r3, [pc, #368]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f003 0302 	and.w	r3, r3, #2
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d005      	beq.n	8009dc6 <HAL_RCC_OscConfig+0x152>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d001      	beq.n	8009dc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e1bb      	b.n	800a13e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009dc6:	4b56      	ldr	r3, [pc, #344]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	691b      	ldr	r3, [r3, #16]
 8009dd2:	00db      	lsls	r3, r3, #3
 8009dd4:	4952      	ldr	r1, [pc, #328]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009dda:	e03a      	b.n	8009e52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d020      	beq.n	8009e26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009de4:	4b4f      	ldr	r3, [pc, #316]	; (8009f24 <HAL_RCC_OscConfig+0x2b0>)
 8009de6:	2201      	movs	r2, #1
 8009de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dea:	f7fb f92d 	bl	8005048 <HAL_GetTick>
 8009dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009df0:	e008      	b.n	8009e04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009df2:	f7fb f929 	bl	8005048 <HAL_GetTick>
 8009df6:	4602      	mov	r2, r0
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	1ad3      	subs	r3, r2, r3
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	d901      	bls.n	8009e04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009e00:	2303      	movs	r3, #3
 8009e02:	e19c      	b.n	800a13e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e04:	4b46      	ldr	r3, [pc, #280]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 0302 	and.w	r3, r3, #2
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d0f0      	beq.n	8009df2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e10:	4b43      	ldr	r3, [pc, #268]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	00db      	lsls	r3, r3, #3
 8009e1e:	4940      	ldr	r1, [pc, #256]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009e20:	4313      	orrs	r3, r2
 8009e22:	600b      	str	r3, [r1, #0]
 8009e24:	e015      	b.n	8009e52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009e26:	4b3f      	ldr	r3, [pc, #252]	; (8009f24 <HAL_RCC_OscConfig+0x2b0>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e2c:	f7fb f90c 	bl	8005048 <HAL_GetTick>
 8009e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e32:	e008      	b.n	8009e46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009e34:	f7fb f908 	bl	8005048 <HAL_GetTick>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d901      	bls.n	8009e46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009e42:	2303      	movs	r3, #3
 8009e44:	e17b      	b.n	800a13e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e46:	4b36      	ldr	r3, [pc, #216]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f003 0302 	and.w	r3, r3, #2
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1f0      	bne.n	8009e34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f003 0308 	and.w	r3, r3, #8
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d030      	beq.n	8009ec0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	695b      	ldr	r3, [r3, #20]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d016      	beq.n	8009e94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e66:	4b30      	ldr	r3, [pc, #192]	; (8009f28 <HAL_RCC_OscConfig+0x2b4>)
 8009e68:	2201      	movs	r2, #1
 8009e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e6c:	f7fb f8ec 	bl	8005048 <HAL_GetTick>
 8009e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e72:	e008      	b.n	8009e86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e74:	f7fb f8e8 	bl	8005048 <HAL_GetTick>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d901      	bls.n	8009e86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e15b      	b.n	800a13e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e86:	4b26      	ldr	r3, [pc, #152]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e8a:	f003 0302 	and.w	r3, r3, #2
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d0f0      	beq.n	8009e74 <HAL_RCC_OscConfig+0x200>
 8009e92:	e015      	b.n	8009ec0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e94:	4b24      	ldr	r3, [pc, #144]	; (8009f28 <HAL_RCC_OscConfig+0x2b4>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e9a:	f7fb f8d5 	bl	8005048 <HAL_GetTick>
 8009e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ea0:	e008      	b.n	8009eb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ea2:	f7fb f8d1 	bl	8005048 <HAL_GetTick>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	1ad3      	subs	r3, r2, r3
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	d901      	bls.n	8009eb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e144      	b.n	800a13e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009eb4:	4b1a      	ldr	r3, [pc, #104]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eb8:	f003 0302 	and.w	r3, r3, #2
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d1f0      	bne.n	8009ea2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0304 	and.w	r3, r3, #4
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 80a0 	beq.w	800a00e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ed2:	4b13      	ldr	r3, [pc, #76]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d10f      	bne.n	8009efe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ede:	2300      	movs	r3, #0
 8009ee0:	60bb      	str	r3, [r7, #8]
 8009ee2:	4b0f      	ldr	r3, [pc, #60]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee6:	4a0e      	ldr	r2, [pc, #56]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009eec:	6413      	str	r3, [r2, #64]	; 0x40
 8009eee:	4b0c      	ldr	r3, [pc, #48]	; (8009f20 <HAL_RCC_OscConfig+0x2ac>)
 8009ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ef6:	60bb      	str	r3, [r7, #8]
 8009ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009efa:	2301      	movs	r3, #1
 8009efc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009efe:	4b0b      	ldr	r3, [pc, #44]	; (8009f2c <HAL_RCC_OscConfig+0x2b8>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d121      	bne.n	8009f4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009f0a:	4b08      	ldr	r3, [pc, #32]	; (8009f2c <HAL_RCC_OscConfig+0x2b8>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a07      	ldr	r2, [pc, #28]	; (8009f2c <HAL_RCC_OscConfig+0x2b8>)
 8009f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009f16:	f7fb f897 	bl	8005048 <HAL_GetTick>
 8009f1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f1c:	e011      	b.n	8009f42 <HAL_RCC_OscConfig+0x2ce>
 8009f1e:	bf00      	nop
 8009f20:	40023800 	.word	0x40023800
 8009f24:	42470000 	.word	0x42470000
 8009f28:	42470e80 	.word	0x42470e80
 8009f2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f30:	f7fb f88a 	bl	8005048 <HAL_GetTick>
 8009f34:	4602      	mov	r2, r0
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d901      	bls.n	8009f42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e0fd      	b.n	800a13e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f42:	4b81      	ldr	r3, [pc, #516]	; (800a148 <HAL_RCC_OscConfig+0x4d4>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0f0      	beq.n	8009f30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d106      	bne.n	8009f64 <HAL_RCC_OscConfig+0x2f0>
 8009f56:	4b7d      	ldr	r3, [pc, #500]	; (800a14c <HAL_RCC_OscConfig+0x4d8>)
 8009f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f5a:	4a7c      	ldr	r2, [pc, #496]	; (800a14c <HAL_RCC_OscConfig+0x4d8>)
 8009f5c:	f043 0301 	orr.w	r3, r3, #1
 8009f60:	6713      	str	r3, [r2, #112]	; 0x70
 8009f62:	e01c      	b.n	8009f9e <HAL_RCC_OscConfig+0x32a>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	2b05      	cmp	r3, #5
 8009f6a:	d10c      	bne.n	8009f86 <HAL_RCC_OscConfig+0x312>
 8009f6c:	4b77      	ldr	r3, [pc, #476]	; (800a14c <HAL_RCC_OscConfig+0x4d8>)
 8009f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f70:	4a76      	ldr	r2, [pc, #472]	; (800a14c <HAL_RCC_OscConfig+0x4d8>)
 8009f72:	f043 0304 	orr.w	r3, r3, #4
 8009f76:	6713      	str	r3, [r2, #112]	; 0x70
 8009f78:	4b74      	ldr	r3, [pc, #464]	; (800a14c <HAL_RCC_OscConfig+0x4d8>)
 8009f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f7c:	4a73      	ldr	r2, [pc, #460]	; (800a14c <HAL_RCC_OscConfig+0x4d8>)
 8009f7e:	f043 0301 	orr.w	r3, r3, #1
 8009f82:	6713      	str	r3, [r2, #112]	; 0x70
 8009f84:	e00b      	b.n	8009f9e <HAL_RCC_OscConfig+0x32a>
 8009f86:	4b71      	ldr	r3, [pc, #452]	; (800a14c <HAL_RCC_OscConfig+0x4d8>)
 8009f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f8a:	4a70      	ldr	r2, [pc, #448]	; (800a14c <HAL_RCC_OscConfig+0x4d8>)
 8009f8c:	f023 0301 	bic.w	r3, r3, #1
 8009f90:	6713      	str	r3, [r2, #112]	; 0x70
 8009f92:	4b6e      	ldr	r3, [pc, #440]	; (800a14c <HAL_RCC_OscConfig+0x4d8>)
 8009f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f96:	4a6d      	ldr	r2, [pc, #436]	; (800a14c <HAL_RCC_OscConfig+0x4d8>)
 8009f98:	f023 0304 	bic.w	r3, r3, #4
 8009f9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d015      	beq.n	8009fd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fa6:	f7fb f84f 	bl	8005048 <HAL_GetTick>
 8009faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fac:	e00a      	b.n	8009fc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009fae:	f7fb f84b 	bl	8005048 <HAL_GetTick>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d901      	bls.n	8009fc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	e0bc      	b.n	800a13e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fc4:	4b61      	ldr	r3, [pc, #388]	; (800a14c <HAL_RCC_OscConfig+0x4d8>)
 8009fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fc8:	f003 0302 	and.w	r3, r3, #2
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d0ee      	beq.n	8009fae <HAL_RCC_OscConfig+0x33a>
 8009fd0:	e014      	b.n	8009ffc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009fd2:	f7fb f839 	bl	8005048 <HAL_GetTick>
 8009fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009fd8:	e00a      	b.n	8009ff0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009fda:	f7fb f835 	bl	8005048 <HAL_GetTick>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d901      	bls.n	8009ff0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009fec:	2303      	movs	r3, #3
 8009fee:	e0a6      	b.n	800a13e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ff0:	4b56      	ldr	r3, [pc, #344]	; (800a14c <HAL_RCC_OscConfig+0x4d8>)
 8009ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff4:	f003 0302 	and.w	r3, r3, #2
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1ee      	bne.n	8009fda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ffc:	7dfb      	ldrb	r3, [r7, #23]
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d105      	bne.n	800a00e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a002:	4b52      	ldr	r3, [pc, #328]	; (800a14c <HAL_RCC_OscConfig+0x4d8>)
 800a004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a006:	4a51      	ldr	r2, [pc, #324]	; (800a14c <HAL_RCC_OscConfig+0x4d8>)
 800a008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a00c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	2b00      	cmp	r3, #0
 800a014:	f000 8092 	beq.w	800a13c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a018:	4b4c      	ldr	r3, [pc, #304]	; (800a14c <HAL_RCC_OscConfig+0x4d8>)
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f003 030c 	and.w	r3, r3, #12
 800a020:	2b08      	cmp	r3, #8
 800a022:	d05c      	beq.n	800a0de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	699b      	ldr	r3, [r3, #24]
 800a028:	2b02      	cmp	r3, #2
 800a02a:	d141      	bne.n	800a0b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a02c:	4b48      	ldr	r3, [pc, #288]	; (800a150 <HAL_RCC_OscConfig+0x4dc>)
 800a02e:	2200      	movs	r2, #0
 800a030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a032:	f7fb f809 	bl	8005048 <HAL_GetTick>
 800a036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a038:	e008      	b.n	800a04c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a03a:	f7fb f805 	bl	8005048 <HAL_GetTick>
 800a03e:	4602      	mov	r2, r0
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	1ad3      	subs	r3, r2, r3
 800a044:	2b02      	cmp	r3, #2
 800a046:	d901      	bls.n	800a04c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a048:	2303      	movs	r3, #3
 800a04a:	e078      	b.n	800a13e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a04c:	4b3f      	ldr	r3, [pc, #252]	; (800a14c <HAL_RCC_OscConfig+0x4d8>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1f0      	bne.n	800a03a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	69da      	ldr	r2, [r3, #28]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6a1b      	ldr	r3, [r3, #32]
 800a060:	431a      	orrs	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a066:	019b      	lsls	r3, r3, #6
 800a068:	431a      	orrs	r2, r3
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06e:	085b      	lsrs	r3, r3, #1
 800a070:	3b01      	subs	r3, #1
 800a072:	041b      	lsls	r3, r3, #16
 800a074:	431a      	orrs	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	061b      	lsls	r3, r3, #24
 800a07c:	4933      	ldr	r1, [pc, #204]	; (800a14c <HAL_RCC_OscConfig+0x4d8>)
 800a07e:	4313      	orrs	r3, r2
 800a080:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a082:	4b33      	ldr	r3, [pc, #204]	; (800a150 <HAL_RCC_OscConfig+0x4dc>)
 800a084:	2201      	movs	r2, #1
 800a086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a088:	f7fa ffde 	bl	8005048 <HAL_GetTick>
 800a08c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a08e:	e008      	b.n	800a0a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a090:	f7fa ffda 	bl	8005048 <HAL_GetTick>
 800a094:	4602      	mov	r2, r0
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d901      	bls.n	800a0a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	e04d      	b.n	800a13e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a0a2:	4b2a      	ldr	r3, [pc, #168]	; (800a14c <HAL_RCC_OscConfig+0x4d8>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d0f0      	beq.n	800a090 <HAL_RCC_OscConfig+0x41c>
 800a0ae:	e045      	b.n	800a13c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0b0:	4b27      	ldr	r3, [pc, #156]	; (800a150 <HAL_RCC_OscConfig+0x4dc>)
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0b6:	f7fa ffc7 	bl	8005048 <HAL_GetTick>
 800a0ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0bc:	e008      	b.n	800a0d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a0be:	f7fa ffc3 	bl	8005048 <HAL_GetTick>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d901      	bls.n	800a0d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a0cc:	2303      	movs	r3, #3
 800a0ce:	e036      	b.n	800a13e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0d0:	4b1e      	ldr	r3, [pc, #120]	; (800a14c <HAL_RCC_OscConfig+0x4d8>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1f0      	bne.n	800a0be <HAL_RCC_OscConfig+0x44a>
 800a0dc:	e02e      	b.n	800a13c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d101      	bne.n	800a0ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e029      	b.n	800a13e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a0ea:	4b18      	ldr	r3, [pc, #96]	; (800a14c <HAL_RCC_OscConfig+0x4d8>)
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	69db      	ldr	r3, [r3, #28]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d11c      	bne.n	800a138 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a108:	429a      	cmp	r2, r3
 800a10a:	d115      	bne.n	800a138 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a112:	4013      	ands	r3, r2
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a118:	4293      	cmp	r3, r2
 800a11a:	d10d      	bne.n	800a138 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a126:	429a      	cmp	r2, r3
 800a128:	d106      	bne.n	800a138 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a134:	429a      	cmp	r2, r3
 800a136:	d001      	beq.n	800a13c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	e000      	b.n	800a13e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3718      	adds	r7, #24
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	40007000 	.word	0x40007000
 800a14c:	40023800 	.word	0x40023800
 800a150:	42470060 	.word	0x42470060

0800a154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d101      	bne.n	800a168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	e0cc      	b.n	800a302 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a168:	4b68      	ldr	r3, [pc, #416]	; (800a30c <HAL_RCC_ClockConfig+0x1b8>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 030f 	and.w	r3, r3, #15
 800a170:	683a      	ldr	r2, [r7, #0]
 800a172:	429a      	cmp	r2, r3
 800a174:	d90c      	bls.n	800a190 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a176:	4b65      	ldr	r3, [pc, #404]	; (800a30c <HAL_RCC_ClockConfig+0x1b8>)
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	b2d2      	uxtb	r2, r2
 800a17c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a17e:	4b63      	ldr	r3, [pc, #396]	; (800a30c <HAL_RCC_ClockConfig+0x1b8>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f003 030f 	and.w	r3, r3, #15
 800a186:	683a      	ldr	r2, [r7, #0]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d001      	beq.n	800a190 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e0b8      	b.n	800a302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 0302 	and.w	r3, r3, #2
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d020      	beq.n	800a1de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 0304 	and.w	r3, r3, #4
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d005      	beq.n	800a1b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a1a8:	4b59      	ldr	r3, [pc, #356]	; (800a310 <HAL_RCC_ClockConfig+0x1bc>)
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	4a58      	ldr	r2, [pc, #352]	; (800a310 <HAL_RCC_ClockConfig+0x1bc>)
 800a1ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a1b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f003 0308 	and.w	r3, r3, #8
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d005      	beq.n	800a1cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a1c0:	4b53      	ldr	r3, [pc, #332]	; (800a310 <HAL_RCC_ClockConfig+0x1bc>)
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	4a52      	ldr	r2, [pc, #328]	; (800a310 <HAL_RCC_ClockConfig+0x1bc>)
 800a1c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a1ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1cc:	4b50      	ldr	r3, [pc, #320]	; (800a310 <HAL_RCC_ClockConfig+0x1bc>)
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	494d      	ldr	r1, [pc, #308]	; (800a310 <HAL_RCC_ClockConfig+0x1bc>)
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f003 0301 	and.w	r3, r3, #1
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d044      	beq.n	800a274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d107      	bne.n	800a202 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1f2:	4b47      	ldr	r3, [pc, #284]	; (800a310 <HAL_RCC_ClockConfig+0x1bc>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d119      	bne.n	800a232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	e07f      	b.n	800a302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	2b02      	cmp	r3, #2
 800a208:	d003      	beq.n	800a212 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a20e:	2b03      	cmp	r3, #3
 800a210:	d107      	bne.n	800a222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a212:	4b3f      	ldr	r3, [pc, #252]	; (800a310 <HAL_RCC_ClockConfig+0x1bc>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d109      	bne.n	800a232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	e06f      	b.n	800a302 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a222:	4b3b      	ldr	r3, [pc, #236]	; (800a310 <HAL_RCC_ClockConfig+0x1bc>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 0302 	and.w	r3, r3, #2
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d101      	bne.n	800a232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e067      	b.n	800a302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a232:	4b37      	ldr	r3, [pc, #220]	; (800a310 <HAL_RCC_ClockConfig+0x1bc>)
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	f023 0203 	bic.w	r2, r3, #3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	4934      	ldr	r1, [pc, #208]	; (800a310 <HAL_RCC_ClockConfig+0x1bc>)
 800a240:	4313      	orrs	r3, r2
 800a242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a244:	f7fa ff00 	bl	8005048 <HAL_GetTick>
 800a248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a24a:	e00a      	b.n	800a262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a24c:	f7fa fefc 	bl	8005048 <HAL_GetTick>
 800a250:	4602      	mov	r2, r0
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	1ad3      	subs	r3, r2, r3
 800a256:	f241 3288 	movw	r2, #5000	; 0x1388
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d901      	bls.n	800a262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a25e:	2303      	movs	r3, #3
 800a260:	e04f      	b.n	800a302 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a262:	4b2b      	ldr	r3, [pc, #172]	; (800a310 <HAL_RCC_ClockConfig+0x1bc>)
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	f003 020c 	and.w	r2, r3, #12
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	429a      	cmp	r2, r3
 800a272:	d1eb      	bne.n	800a24c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a274:	4b25      	ldr	r3, [pc, #148]	; (800a30c <HAL_RCC_ClockConfig+0x1b8>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f003 030f 	and.w	r3, r3, #15
 800a27c:	683a      	ldr	r2, [r7, #0]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d20c      	bcs.n	800a29c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a282:	4b22      	ldr	r3, [pc, #136]	; (800a30c <HAL_RCC_ClockConfig+0x1b8>)
 800a284:	683a      	ldr	r2, [r7, #0]
 800a286:	b2d2      	uxtb	r2, r2
 800a288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a28a:	4b20      	ldr	r3, [pc, #128]	; (800a30c <HAL_RCC_ClockConfig+0x1b8>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f003 030f 	and.w	r3, r3, #15
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	429a      	cmp	r2, r3
 800a296:	d001      	beq.n	800a29c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e032      	b.n	800a302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f003 0304 	and.w	r3, r3, #4
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d008      	beq.n	800a2ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a2a8:	4b19      	ldr	r3, [pc, #100]	; (800a310 <HAL_RCC_ClockConfig+0x1bc>)
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	4916      	ldr	r1, [pc, #88]	; (800a310 <HAL_RCC_ClockConfig+0x1bc>)
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f003 0308 	and.w	r3, r3, #8
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d009      	beq.n	800a2da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a2c6:	4b12      	ldr	r3, [pc, #72]	; (800a310 <HAL_RCC_ClockConfig+0x1bc>)
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	00db      	lsls	r3, r3, #3
 800a2d4:	490e      	ldr	r1, [pc, #56]	; (800a310 <HAL_RCC_ClockConfig+0x1bc>)
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a2da:	f000 f821 	bl	800a320 <HAL_RCC_GetSysClockFreq>
 800a2de:	4601      	mov	r1, r0
 800a2e0:	4b0b      	ldr	r3, [pc, #44]	; (800a310 <HAL_RCC_ClockConfig+0x1bc>)
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	091b      	lsrs	r3, r3, #4
 800a2e6:	f003 030f 	and.w	r3, r3, #15
 800a2ea:	4a0a      	ldr	r2, [pc, #40]	; (800a314 <HAL_RCC_ClockConfig+0x1c0>)
 800a2ec:	5cd3      	ldrb	r3, [r2, r3]
 800a2ee:	fa21 f303 	lsr.w	r3, r1, r3
 800a2f2:	4a09      	ldr	r2, [pc, #36]	; (800a318 <HAL_RCC_ClockConfig+0x1c4>)
 800a2f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a2f6:	4b09      	ldr	r3, [pc, #36]	; (800a31c <HAL_RCC_ClockConfig+0x1c8>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7f7 fa60 	bl	80017c0 <HAL_InitTick>

  return HAL_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	40023c00 	.word	0x40023c00
 800a310:	40023800 	.word	0x40023800
 800a314:	0800ff14 	.word	0x0800ff14
 800a318:	20000008 	.word	0x20000008
 800a31c:	2000000c 	.word	0x2000000c

0800a320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a320:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a326:	2300      	movs	r3, #0
 800a328:	607b      	str	r3, [r7, #4]
 800a32a:	2300      	movs	r3, #0
 800a32c:	60fb      	str	r3, [r7, #12]
 800a32e:	2300      	movs	r3, #0
 800a330:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a332:	2300      	movs	r3, #0
 800a334:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a336:	4b63      	ldr	r3, [pc, #396]	; (800a4c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	f003 030c 	and.w	r3, r3, #12
 800a33e:	2b04      	cmp	r3, #4
 800a340:	d007      	beq.n	800a352 <HAL_RCC_GetSysClockFreq+0x32>
 800a342:	2b08      	cmp	r3, #8
 800a344:	d008      	beq.n	800a358 <HAL_RCC_GetSysClockFreq+0x38>
 800a346:	2b00      	cmp	r3, #0
 800a348:	f040 80b4 	bne.w	800a4b4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a34c:	4b5e      	ldr	r3, [pc, #376]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a34e:	60bb      	str	r3, [r7, #8]
       break;
 800a350:	e0b3      	b.n	800a4ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a352:	4b5e      	ldr	r3, [pc, #376]	; (800a4cc <HAL_RCC_GetSysClockFreq+0x1ac>)
 800a354:	60bb      	str	r3, [r7, #8]
      break;
 800a356:	e0b0      	b.n	800a4ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a358:	4b5a      	ldr	r3, [pc, #360]	; (800a4c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a360:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a362:	4b58      	ldr	r3, [pc, #352]	; (800a4c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d04a      	beq.n	800a404 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a36e:	4b55      	ldr	r3, [pc, #340]	; (800a4c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	099b      	lsrs	r3, r3, #6
 800a374:	f04f 0400 	mov.w	r4, #0
 800a378:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a37c:	f04f 0200 	mov.w	r2, #0
 800a380:	ea03 0501 	and.w	r5, r3, r1
 800a384:	ea04 0602 	and.w	r6, r4, r2
 800a388:	4629      	mov	r1, r5
 800a38a:	4632      	mov	r2, r6
 800a38c:	f04f 0300 	mov.w	r3, #0
 800a390:	f04f 0400 	mov.w	r4, #0
 800a394:	0154      	lsls	r4, r2, #5
 800a396:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a39a:	014b      	lsls	r3, r1, #5
 800a39c:	4619      	mov	r1, r3
 800a39e:	4622      	mov	r2, r4
 800a3a0:	1b49      	subs	r1, r1, r5
 800a3a2:	eb62 0206 	sbc.w	r2, r2, r6
 800a3a6:	f04f 0300 	mov.w	r3, #0
 800a3aa:	f04f 0400 	mov.w	r4, #0
 800a3ae:	0194      	lsls	r4, r2, #6
 800a3b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a3b4:	018b      	lsls	r3, r1, #6
 800a3b6:	1a5b      	subs	r3, r3, r1
 800a3b8:	eb64 0402 	sbc.w	r4, r4, r2
 800a3bc:	f04f 0100 	mov.w	r1, #0
 800a3c0:	f04f 0200 	mov.w	r2, #0
 800a3c4:	00e2      	lsls	r2, r4, #3
 800a3c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a3ca:	00d9      	lsls	r1, r3, #3
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4614      	mov	r4, r2
 800a3d0:	195b      	adds	r3, r3, r5
 800a3d2:	eb44 0406 	adc.w	r4, r4, r6
 800a3d6:	f04f 0100 	mov.w	r1, #0
 800a3da:	f04f 0200 	mov.w	r2, #0
 800a3de:	0262      	lsls	r2, r4, #9
 800a3e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800a3e4:	0259      	lsls	r1, r3, #9
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	4614      	mov	r4, r2
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f04f 0400 	mov.w	r4, #0
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	4623      	mov	r3, r4
 800a3f8:	f7f5 fef2 	bl	80001e0 <__aeabi_uldivmod>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	460c      	mov	r4, r1
 800a400:	60fb      	str	r3, [r7, #12]
 800a402:	e049      	b.n	800a498 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a404:	4b2f      	ldr	r3, [pc, #188]	; (800a4c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	099b      	lsrs	r3, r3, #6
 800a40a:	f04f 0400 	mov.w	r4, #0
 800a40e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a412:	f04f 0200 	mov.w	r2, #0
 800a416:	ea03 0501 	and.w	r5, r3, r1
 800a41a:	ea04 0602 	and.w	r6, r4, r2
 800a41e:	4629      	mov	r1, r5
 800a420:	4632      	mov	r2, r6
 800a422:	f04f 0300 	mov.w	r3, #0
 800a426:	f04f 0400 	mov.w	r4, #0
 800a42a:	0154      	lsls	r4, r2, #5
 800a42c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a430:	014b      	lsls	r3, r1, #5
 800a432:	4619      	mov	r1, r3
 800a434:	4622      	mov	r2, r4
 800a436:	1b49      	subs	r1, r1, r5
 800a438:	eb62 0206 	sbc.w	r2, r2, r6
 800a43c:	f04f 0300 	mov.w	r3, #0
 800a440:	f04f 0400 	mov.w	r4, #0
 800a444:	0194      	lsls	r4, r2, #6
 800a446:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a44a:	018b      	lsls	r3, r1, #6
 800a44c:	1a5b      	subs	r3, r3, r1
 800a44e:	eb64 0402 	sbc.w	r4, r4, r2
 800a452:	f04f 0100 	mov.w	r1, #0
 800a456:	f04f 0200 	mov.w	r2, #0
 800a45a:	00e2      	lsls	r2, r4, #3
 800a45c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a460:	00d9      	lsls	r1, r3, #3
 800a462:	460b      	mov	r3, r1
 800a464:	4614      	mov	r4, r2
 800a466:	195b      	adds	r3, r3, r5
 800a468:	eb44 0406 	adc.w	r4, r4, r6
 800a46c:	f04f 0100 	mov.w	r1, #0
 800a470:	f04f 0200 	mov.w	r2, #0
 800a474:	02a2      	lsls	r2, r4, #10
 800a476:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a47a:	0299      	lsls	r1, r3, #10
 800a47c:	460b      	mov	r3, r1
 800a47e:	4614      	mov	r4, r2
 800a480:	4618      	mov	r0, r3
 800a482:	4621      	mov	r1, r4
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f04f 0400 	mov.w	r4, #0
 800a48a:	461a      	mov	r2, r3
 800a48c:	4623      	mov	r3, r4
 800a48e:	f7f5 fea7 	bl	80001e0 <__aeabi_uldivmod>
 800a492:	4603      	mov	r3, r0
 800a494:	460c      	mov	r4, r1
 800a496:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a498:	4b0a      	ldr	r3, [pc, #40]	; (800a4c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	0c1b      	lsrs	r3, r3, #16
 800a49e:	f003 0303 	and.w	r3, r3, #3
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	005b      	lsls	r3, r3, #1
 800a4a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4b0:	60bb      	str	r3, [r7, #8]
      break;
 800a4b2:	e002      	b.n	800a4ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a4b4:	4b04      	ldr	r3, [pc, #16]	; (800a4c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a4b6:	60bb      	str	r3, [r7, #8]
      break;
 800a4b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a4ba:	68bb      	ldr	r3, [r7, #8]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4c4:	40023800 	.word	0x40023800
 800a4c8:	00f42400 	.word	0x00f42400
 800a4cc:	007a1200 	.word	0x007a1200

0800a4d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a4d4:	4b03      	ldr	r3, [pc, #12]	; (800a4e4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	20000008 	.word	0x20000008

0800a4e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a4ec:	f7ff fff0 	bl	800a4d0 <HAL_RCC_GetHCLKFreq>
 800a4f0:	4601      	mov	r1, r0
 800a4f2:	4b05      	ldr	r3, [pc, #20]	; (800a508 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	0a9b      	lsrs	r3, r3, #10
 800a4f8:	f003 0307 	and.w	r3, r3, #7
 800a4fc:	4a03      	ldr	r2, [pc, #12]	; (800a50c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a4fe:	5cd3      	ldrb	r3, [r2, r3]
 800a500:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a504:	4618      	mov	r0, r3
 800a506:	bd80      	pop	{r7, pc}
 800a508:	40023800 	.word	0x40023800
 800a50c:	0800ff24 	.word	0x0800ff24

0800a510 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	220f      	movs	r2, #15
 800a51e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a520:	4b12      	ldr	r3, [pc, #72]	; (800a56c <HAL_RCC_GetClockConfig+0x5c>)
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	f003 0203 	and.w	r2, r3, #3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a52c:	4b0f      	ldr	r3, [pc, #60]	; (800a56c <HAL_RCC_GetClockConfig+0x5c>)
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a538:	4b0c      	ldr	r3, [pc, #48]	; (800a56c <HAL_RCC_GetClockConfig+0x5c>)
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a544:	4b09      	ldr	r3, [pc, #36]	; (800a56c <HAL_RCC_GetClockConfig+0x5c>)
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	08db      	lsrs	r3, r3, #3
 800a54a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a552:	4b07      	ldr	r3, [pc, #28]	; (800a570 <HAL_RCC_GetClockConfig+0x60>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f003 020f 	and.w	r2, r3, #15
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	601a      	str	r2, [r3, #0]
}
 800a55e:	bf00      	nop
 800a560:	370c      	adds	r7, #12
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	40023800 	.word	0x40023800
 800a570:	40023c00 	.word	0x40023c00

0800a574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e01d      	b.n	800a5c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d106      	bne.n	800a5a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 f815 	bl	800a5ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2202      	movs	r2, #2
 800a5a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	f000 f968 	bl	800a888 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a5ca:	b480      	push	{r7}
 800a5cc:	b083      	sub	sp, #12
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a5d2:	bf00      	nop
 800a5d4:	370c      	adds	r7, #12
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr

0800a5de <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a5de:	b480      	push	{r7}
 800a5e0:	b085      	sub	sp, #20
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	68da      	ldr	r2, [r3, #12]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f042 0201 	orr.w	r2, r2, #1
 800a5f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	f003 0307 	and.w	r3, r3, #7
 800a600:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2b06      	cmp	r3, #6
 800a606:	d007      	beq.n	800a618 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f042 0201 	orr.w	r2, r2, #1
 800a616:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3714      	adds	r7, #20
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b082      	sub	sp, #8
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	f003 0302 	and.w	r3, r3, #2
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d122      	bne.n	800a682 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	f003 0302 	and.w	r3, r3, #2
 800a646:	2b02      	cmp	r3, #2
 800a648:	d11b      	bne.n	800a682 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f06f 0202 	mvn.w	r2, #2
 800a652:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	699b      	ldr	r3, [r3, #24]
 800a660:	f003 0303 	and.w	r3, r3, #3
 800a664:	2b00      	cmp	r3, #0
 800a666:	d003      	beq.n	800a670 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f8ee 	bl	800a84a <HAL_TIM_IC_CaptureCallback>
 800a66e:	e005      	b.n	800a67c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 f8e0 	bl	800a836 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f8f1 	bl	800a85e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	f003 0304 	and.w	r3, r3, #4
 800a68c:	2b04      	cmp	r3, #4
 800a68e:	d122      	bne.n	800a6d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	f003 0304 	and.w	r3, r3, #4
 800a69a:	2b04      	cmp	r3, #4
 800a69c:	d11b      	bne.n	800a6d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f06f 0204 	mvn.w	r2, #4
 800a6a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2202      	movs	r2, #2
 800a6ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d003      	beq.n	800a6c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 f8c4 	bl	800a84a <HAL_TIM_IC_CaptureCallback>
 800a6c2:	e005      	b.n	800a6d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f8b6 	bl	800a836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f8c7 	bl	800a85e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	f003 0308 	and.w	r3, r3, #8
 800a6e0:	2b08      	cmp	r3, #8
 800a6e2:	d122      	bne.n	800a72a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	f003 0308 	and.w	r3, r3, #8
 800a6ee:	2b08      	cmp	r3, #8
 800a6f0:	d11b      	bne.n	800a72a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f06f 0208 	mvn.w	r2, #8
 800a6fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2204      	movs	r2, #4
 800a700:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	69db      	ldr	r3, [r3, #28]
 800a708:	f003 0303 	and.w	r3, r3, #3
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d003      	beq.n	800a718 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 f89a 	bl	800a84a <HAL_TIM_IC_CaptureCallback>
 800a716:	e005      	b.n	800a724 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 f88c 	bl	800a836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 f89d 	bl	800a85e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	691b      	ldr	r3, [r3, #16]
 800a730:	f003 0310 	and.w	r3, r3, #16
 800a734:	2b10      	cmp	r3, #16
 800a736:	d122      	bne.n	800a77e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	f003 0310 	and.w	r3, r3, #16
 800a742:	2b10      	cmp	r3, #16
 800a744:	d11b      	bne.n	800a77e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f06f 0210 	mvn.w	r2, #16
 800a74e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2208      	movs	r2, #8
 800a754:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	69db      	ldr	r3, [r3, #28]
 800a75c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a760:	2b00      	cmp	r3, #0
 800a762:	d003      	beq.n	800a76c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 f870 	bl	800a84a <HAL_TIM_IC_CaptureCallback>
 800a76a:	e005      	b.n	800a778 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 f862 	bl	800a836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 f873 	bl	800a85e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	f003 0301 	and.w	r3, r3, #1
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d10e      	bne.n	800a7aa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	f003 0301 	and.w	r3, r3, #1
 800a796:	2b01      	cmp	r3, #1
 800a798:	d107      	bne.n	800a7aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f06f 0201 	mvn.w	r2, #1
 800a7a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f7f6 fa3d 	bl	8000c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7b4:	2b80      	cmp	r3, #128	; 0x80
 800a7b6:	d10e      	bne.n	800a7d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7c2:	2b80      	cmp	r3, #128	; 0x80
 800a7c4:	d107      	bne.n	800a7d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a7ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 f903 	bl	800a9dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e0:	2b40      	cmp	r3, #64	; 0x40
 800a7e2:	d10e      	bne.n	800a802 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ee:	2b40      	cmp	r3, #64	; 0x40
 800a7f0:	d107      	bne.n	800a802 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a7fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 f838 	bl	800a872 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	f003 0320 	and.w	r3, r3, #32
 800a80c:	2b20      	cmp	r3, #32
 800a80e:	d10e      	bne.n	800a82e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	f003 0320 	and.w	r3, r3, #32
 800a81a:	2b20      	cmp	r3, #32
 800a81c:	d107      	bne.n	800a82e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f06f 0220 	mvn.w	r2, #32
 800a826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 f8cd 	bl	800a9c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a82e:	bf00      	nop
 800a830:	3708      	adds	r7, #8
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a836:	b480      	push	{r7}
 800a838:	b083      	sub	sp, #12
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a83e:	bf00      	nop
 800a840:	370c      	adds	r7, #12
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr

0800a84a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a84a:	b480      	push	{r7}
 800a84c:	b083      	sub	sp, #12
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a852:	bf00      	nop
 800a854:	370c      	adds	r7, #12
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr

0800a85e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a85e:	b480      	push	{r7}
 800a860:	b083      	sub	sp, #12
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a866:	bf00      	nop
 800a868:	370c      	adds	r7, #12
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr

0800a872 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a872:	b480      	push	{r7}
 800a874:	b083      	sub	sp, #12
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a87a:	bf00      	nop
 800a87c:	370c      	adds	r7, #12
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr
	...

0800a888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a40      	ldr	r2, [pc, #256]	; (800a99c <TIM_Base_SetConfig+0x114>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d013      	beq.n	800a8c8 <TIM_Base_SetConfig+0x40>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8a6:	d00f      	beq.n	800a8c8 <TIM_Base_SetConfig+0x40>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a3d      	ldr	r2, [pc, #244]	; (800a9a0 <TIM_Base_SetConfig+0x118>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d00b      	beq.n	800a8c8 <TIM_Base_SetConfig+0x40>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	4a3c      	ldr	r2, [pc, #240]	; (800a9a4 <TIM_Base_SetConfig+0x11c>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d007      	beq.n	800a8c8 <TIM_Base_SetConfig+0x40>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4a3b      	ldr	r2, [pc, #236]	; (800a9a8 <TIM_Base_SetConfig+0x120>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d003      	beq.n	800a8c8 <TIM_Base_SetConfig+0x40>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4a3a      	ldr	r2, [pc, #232]	; (800a9ac <TIM_Base_SetConfig+0x124>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d108      	bne.n	800a8da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4a2f      	ldr	r2, [pc, #188]	; (800a99c <TIM_Base_SetConfig+0x114>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d02b      	beq.n	800a93a <TIM_Base_SetConfig+0xb2>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8e8:	d027      	beq.n	800a93a <TIM_Base_SetConfig+0xb2>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4a2c      	ldr	r2, [pc, #176]	; (800a9a0 <TIM_Base_SetConfig+0x118>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d023      	beq.n	800a93a <TIM_Base_SetConfig+0xb2>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	4a2b      	ldr	r2, [pc, #172]	; (800a9a4 <TIM_Base_SetConfig+0x11c>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d01f      	beq.n	800a93a <TIM_Base_SetConfig+0xb2>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	4a2a      	ldr	r2, [pc, #168]	; (800a9a8 <TIM_Base_SetConfig+0x120>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d01b      	beq.n	800a93a <TIM_Base_SetConfig+0xb2>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	4a29      	ldr	r2, [pc, #164]	; (800a9ac <TIM_Base_SetConfig+0x124>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d017      	beq.n	800a93a <TIM_Base_SetConfig+0xb2>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4a28      	ldr	r2, [pc, #160]	; (800a9b0 <TIM_Base_SetConfig+0x128>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d013      	beq.n	800a93a <TIM_Base_SetConfig+0xb2>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4a27      	ldr	r2, [pc, #156]	; (800a9b4 <TIM_Base_SetConfig+0x12c>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d00f      	beq.n	800a93a <TIM_Base_SetConfig+0xb2>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4a26      	ldr	r2, [pc, #152]	; (800a9b8 <TIM_Base_SetConfig+0x130>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d00b      	beq.n	800a93a <TIM_Base_SetConfig+0xb2>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4a25      	ldr	r2, [pc, #148]	; (800a9bc <TIM_Base_SetConfig+0x134>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d007      	beq.n	800a93a <TIM_Base_SetConfig+0xb2>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a24      	ldr	r2, [pc, #144]	; (800a9c0 <TIM_Base_SetConfig+0x138>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d003      	beq.n	800a93a <TIM_Base_SetConfig+0xb2>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a23      	ldr	r2, [pc, #140]	; (800a9c4 <TIM_Base_SetConfig+0x13c>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d108      	bne.n	800a94c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	68fa      	ldr	r2, [r7, #12]
 800a948:	4313      	orrs	r3, r2
 800a94a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	695b      	ldr	r3, [r3, #20]
 800a956:	4313      	orrs	r3, r2
 800a958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	689a      	ldr	r2, [r3, #8]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	4a0a      	ldr	r2, [pc, #40]	; (800a99c <TIM_Base_SetConfig+0x114>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d003      	beq.n	800a980 <TIM_Base_SetConfig+0xf8>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	4a0c      	ldr	r2, [pc, #48]	; (800a9ac <TIM_Base_SetConfig+0x124>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d103      	bne.n	800a988 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	691a      	ldr	r2, [r3, #16]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	615a      	str	r2, [r3, #20]
}
 800a98e:	bf00      	nop
 800a990:	3714      	adds	r7, #20
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	40010000 	.word	0x40010000
 800a9a0:	40000400 	.word	0x40000400
 800a9a4:	40000800 	.word	0x40000800
 800a9a8:	40000c00 	.word	0x40000c00
 800a9ac:	40010400 	.word	0x40010400
 800a9b0:	40014000 	.word	0x40014000
 800a9b4:	40014400 	.word	0x40014400
 800a9b8:	40014800 	.word	0x40014800
 800a9bc:	40001800 	.word	0x40001800
 800a9c0:	40001c00 	.word	0x40001c00
 800a9c4:	40002000 	.word	0x40002000

0800a9c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a9d0:	bf00      	nop
 800a9d2:	370c      	adds	r7, #12
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr

0800a9dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a9e4:	bf00      	nop
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a9f0:	b084      	sub	sp, #16
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b084      	sub	sp, #16
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	f107 001c 	add.w	r0, r7, #28
 800a9fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aa02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d122      	bne.n	800aa4e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800aa1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aa30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d105      	bne.n	800aa42 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f001 fac6 	bl	800bfd4 <USB_CoreReset>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	73fb      	strb	r3, [r7, #15]
 800aa4c:	e01a      	b.n	800aa84 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f001 faba 	bl	800bfd4 <USB_CoreReset>
 800aa60:	4603      	mov	r3, r0
 800aa62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800aa64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d106      	bne.n	800aa78 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	639a      	str	r2, [r3, #56]	; 0x38
 800aa76:	e005      	b.n	800aa84 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800aa84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d10b      	bne.n	800aaa2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	f043 0206 	orr.w	r2, r3, #6
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	f043 0220 	orr.w	r2, r3, #32
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aaae:	b004      	add	sp, #16
 800aab0:	4770      	bx	lr
	...

0800aab4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b087      	sub	sp, #28
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	4613      	mov	r3, r2
 800aac0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800aac2:	79fb      	ldrb	r3, [r7, #7]
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d165      	bne.n	800ab94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	4a41      	ldr	r2, [pc, #260]	; (800abd0 <USB_SetTurnaroundTime+0x11c>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d906      	bls.n	800aade <USB_SetTurnaroundTime+0x2a>
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	4a40      	ldr	r2, [pc, #256]	; (800abd4 <USB_SetTurnaroundTime+0x120>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d802      	bhi.n	800aade <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800aad8:	230f      	movs	r3, #15
 800aada:	617b      	str	r3, [r7, #20]
 800aadc:	e062      	b.n	800aba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	4a3c      	ldr	r2, [pc, #240]	; (800abd4 <USB_SetTurnaroundTime+0x120>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d906      	bls.n	800aaf4 <USB_SetTurnaroundTime+0x40>
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	4a3b      	ldr	r2, [pc, #236]	; (800abd8 <USB_SetTurnaroundTime+0x124>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d802      	bhi.n	800aaf4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800aaee:	230e      	movs	r3, #14
 800aaf0:	617b      	str	r3, [r7, #20]
 800aaf2:	e057      	b.n	800aba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	4a38      	ldr	r2, [pc, #224]	; (800abd8 <USB_SetTurnaroundTime+0x124>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d906      	bls.n	800ab0a <USB_SetTurnaroundTime+0x56>
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	4a37      	ldr	r2, [pc, #220]	; (800abdc <USB_SetTurnaroundTime+0x128>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d802      	bhi.n	800ab0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ab04:	230d      	movs	r3, #13
 800ab06:	617b      	str	r3, [r7, #20]
 800ab08:	e04c      	b.n	800aba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	4a33      	ldr	r2, [pc, #204]	; (800abdc <USB_SetTurnaroundTime+0x128>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d906      	bls.n	800ab20 <USB_SetTurnaroundTime+0x6c>
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	4a32      	ldr	r2, [pc, #200]	; (800abe0 <USB_SetTurnaroundTime+0x12c>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d802      	bhi.n	800ab20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ab1a:	230c      	movs	r3, #12
 800ab1c:	617b      	str	r3, [r7, #20]
 800ab1e:	e041      	b.n	800aba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	4a2f      	ldr	r2, [pc, #188]	; (800abe0 <USB_SetTurnaroundTime+0x12c>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d906      	bls.n	800ab36 <USB_SetTurnaroundTime+0x82>
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	4a2e      	ldr	r2, [pc, #184]	; (800abe4 <USB_SetTurnaroundTime+0x130>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d802      	bhi.n	800ab36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ab30:	230b      	movs	r3, #11
 800ab32:	617b      	str	r3, [r7, #20]
 800ab34:	e036      	b.n	800aba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	4a2a      	ldr	r2, [pc, #168]	; (800abe4 <USB_SetTurnaroundTime+0x130>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d906      	bls.n	800ab4c <USB_SetTurnaroundTime+0x98>
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	4a29      	ldr	r2, [pc, #164]	; (800abe8 <USB_SetTurnaroundTime+0x134>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d802      	bhi.n	800ab4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ab46:	230a      	movs	r3, #10
 800ab48:	617b      	str	r3, [r7, #20]
 800ab4a:	e02b      	b.n	800aba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	4a26      	ldr	r2, [pc, #152]	; (800abe8 <USB_SetTurnaroundTime+0x134>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d906      	bls.n	800ab62 <USB_SetTurnaroundTime+0xae>
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	4a25      	ldr	r2, [pc, #148]	; (800abec <USB_SetTurnaroundTime+0x138>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d802      	bhi.n	800ab62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ab5c:	2309      	movs	r3, #9
 800ab5e:	617b      	str	r3, [r7, #20]
 800ab60:	e020      	b.n	800aba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	4a21      	ldr	r2, [pc, #132]	; (800abec <USB_SetTurnaroundTime+0x138>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d906      	bls.n	800ab78 <USB_SetTurnaroundTime+0xc4>
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	4a20      	ldr	r2, [pc, #128]	; (800abf0 <USB_SetTurnaroundTime+0x13c>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d802      	bhi.n	800ab78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ab72:	2308      	movs	r3, #8
 800ab74:	617b      	str	r3, [r7, #20]
 800ab76:	e015      	b.n	800aba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	4a1d      	ldr	r2, [pc, #116]	; (800abf0 <USB_SetTurnaroundTime+0x13c>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d906      	bls.n	800ab8e <USB_SetTurnaroundTime+0xda>
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	4a1c      	ldr	r2, [pc, #112]	; (800abf4 <USB_SetTurnaroundTime+0x140>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d802      	bhi.n	800ab8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ab88:	2307      	movs	r3, #7
 800ab8a:	617b      	str	r3, [r7, #20]
 800ab8c:	e00a      	b.n	800aba4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ab8e:	2306      	movs	r3, #6
 800ab90:	617b      	str	r3, [r7, #20]
 800ab92:	e007      	b.n	800aba4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ab94:	79fb      	ldrb	r3, [r7, #7]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d102      	bne.n	800aba0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ab9a:	2309      	movs	r3, #9
 800ab9c:	617b      	str	r3, [r7, #20]
 800ab9e:	e001      	b.n	800aba4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800aba0:	2309      	movs	r3, #9
 800aba2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	68da      	ldr	r2, [r3, #12]
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	029b      	lsls	r3, r3, #10
 800abb8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800abbc:	431a      	orrs	r2, r3
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800abc2:	2300      	movs	r3, #0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	371c      	adds	r7, #28
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr
 800abd0:	00d8acbf 	.word	0x00d8acbf
 800abd4:	00e4e1bf 	.word	0x00e4e1bf
 800abd8:	00f423ff 	.word	0x00f423ff
 800abdc:	0106737f 	.word	0x0106737f
 800abe0:	011a499f 	.word	0x011a499f
 800abe4:	01312cff 	.word	0x01312cff
 800abe8:	014ca43f 	.word	0x014ca43f
 800abec:	016e35ff 	.word	0x016e35ff
 800abf0:	01a6ab1f 	.word	0x01a6ab1f
 800abf4:	01e847ff 	.word	0x01e847ff

0800abf8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	f043 0201 	orr.w	r2, r3, #1
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	370c      	adds	r7, #12
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr

0800ac1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac1a:	b480      	push	{r7}
 800ac1c:	b083      	sub	sp, #12
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	f023 0201 	bic.w	r2, r3, #1
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ac2e:	2300      	movs	r3, #0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	460b      	mov	r3, r1
 800ac46:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ac54:	78fb      	ldrb	r3, [r7, #3]
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d106      	bne.n	800ac68 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	60da      	str	r2, [r3, #12]
 800ac66:	e00b      	b.n	800ac80 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ac68:	78fb      	ldrb	r3, [r7, #3]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d106      	bne.n	800ac7c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	60da      	str	r2, [r3, #12]
 800ac7a:	e001      	b.n	800ac80 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	e003      	b.n	800ac88 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ac80:	2032      	movs	r0, #50	; 0x32
 800ac82:	f7fa f9ed 	bl	8005060 <HAL_Delay>

  return HAL_OK;
 800ac86:	2300      	movs	r3, #0
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac90:	b084      	sub	sp, #16
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b086      	sub	sp, #24
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
 800ac9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ac9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aca2:	2300      	movs	r3, #0
 800aca4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800acaa:	2300      	movs	r3, #0
 800acac:	613b      	str	r3, [r7, #16]
 800acae:	e009      	b.n	800acc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	3340      	adds	r3, #64	; 0x40
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	4413      	add	r3, r2
 800acba:	2200      	movs	r2, #0
 800acbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	3301      	adds	r3, #1
 800acc2:	613b      	str	r3, [r7, #16]
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	2b0e      	cmp	r3, #14
 800acc8:	d9f2      	bls.n	800acb0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800acca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800accc:	2b00      	cmp	r3, #0
 800acce:	d11c      	bne.n	800ad0a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acde:	f043 0302 	orr.w	r3, r3, #2
 800ace2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad00:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	639a      	str	r2, [r3, #56]	; 0x38
 800ad08:	e00b      	b.n	800ad22 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad28:	461a      	mov	r2, r3
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad34:	4619      	mov	r1, r3
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	680b      	ldr	r3, [r1, #0]
 800ad40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ad42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d10c      	bne.n	800ad62 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ad48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d104      	bne.n	800ad58 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ad4e:	2100      	movs	r1, #0
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 f949 	bl	800afe8 <USB_SetDevSpeed>
 800ad56:	e008      	b.n	800ad6a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ad58:	2101      	movs	r1, #1
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f944 	bl	800afe8 <USB_SetDevSpeed>
 800ad60:	e003      	b.n	800ad6a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ad62:	2103      	movs	r1, #3
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 f93f 	bl	800afe8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ad6a:	2110      	movs	r1, #16
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 f8f3 	bl	800af58 <USB_FlushTxFifo>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d001      	beq.n	800ad7c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 f911 	bl	800afa4 <USB_FlushRxFifo>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad92:	461a      	mov	r2, r3
 800ad94:	2300      	movs	r3, #0
 800ad96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad9e:	461a      	mov	r2, r3
 800ada0:	2300      	movs	r3, #0
 800ada2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adaa:	461a      	mov	r2, r3
 800adac:	2300      	movs	r3, #0
 800adae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adb0:	2300      	movs	r3, #0
 800adb2:	613b      	str	r3, [r7, #16]
 800adb4:	e043      	b.n	800ae3e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	015a      	lsls	r2, r3, #5
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	4413      	add	r3, r2
 800adbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800adc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800adcc:	d118      	bne.n	800ae00 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d10a      	bne.n	800adea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	015a      	lsls	r2, r3, #5
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	4413      	add	r3, r2
 800addc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ade0:	461a      	mov	r2, r3
 800ade2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ade6:	6013      	str	r3, [r2, #0]
 800ade8:	e013      	b.n	800ae12 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	015a      	lsls	r2, r3, #5
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	4413      	add	r3, r2
 800adf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf6:	461a      	mov	r2, r3
 800adf8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800adfc:	6013      	str	r3, [r2, #0]
 800adfe:	e008      	b.n	800ae12 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	015a      	lsls	r2, r3, #5
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	4413      	add	r3, r2
 800ae08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	2300      	movs	r3, #0
 800ae10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	015a      	lsls	r2, r3, #5
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	4413      	add	r3, r2
 800ae1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae1e:	461a      	mov	r2, r3
 800ae20:	2300      	movs	r3, #0
 800ae22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	015a      	lsls	r2, r3, #5
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae30:	461a      	mov	r2, r3
 800ae32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ae36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	613b      	str	r3, [r7, #16]
 800ae3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae40:	693a      	ldr	r2, [r7, #16]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d3b7      	bcc.n	800adb6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae46:	2300      	movs	r3, #0
 800ae48:	613b      	str	r3, [r7, #16]
 800ae4a:	e043      	b.n	800aed4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	015a      	lsls	r2, r3, #5
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	4413      	add	r3, r2
 800ae54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae62:	d118      	bne.n	800ae96 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d10a      	bne.n	800ae80 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	015a      	lsls	r2, r3, #5
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	4413      	add	r3, r2
 800ae72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae76:	461a      	mov	r2, r3
 800ae78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae7c:	6013      	str	r3, [r2, #0]
 800ae7e:	e013      	b.n	800aea8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	015a      	lsls	r2, r3, #5
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	4413      	add	r3, r2
 800ae88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ae92:	6013      	str	r3, [r2, #0]
 800ae94:	e008      	b.n	800aea8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	015a      	lsls	r2, r3, #5
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea2:	461a      	mov	r2, r3
 800aea4:	2300      	movs	r3, #0
 800aea6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	015a      	lsls	r2, r3, #5
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	4413      	add	r3, r2
 800aeb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	015a      	lsls	r2, r3, #5
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	4413      	add	r3, r2
 800aec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec6:	461a      	mov	r2, r3
 800aec8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aecc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	3301      	adds	r3, #1
 800aed2:	613b      	str	r3, [r7, #16]
 800aed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed6:	693a      	ldr	r2, [r7, #16]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d3b7      	bcc.n	800ae4c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aee2:	691b      	ldr	r3, [r3, #16]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aeea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aeee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aefc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af00:	2b00      	cmp	r3, #0
 800af02:	d105      	bne.n	800af10 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	699b      	ldr	r3, [r3, #24]
 800af08:	f043 0210 	orr.w	r2, r3, #16
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	699a      	ldr	r2, [r3, #24]
 800af14:	4b0f      	ldr	r3, [pc, #60]	; (800af54 <USB_DevInit+0x2c4>)
 800af16:	4313      	orrs	r3, r2
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800af1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d005      	beq.n	800af2e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	699b      	ldr	r3, [r3, #24]
 800af26:	f043 0208 	orr.w	r2, r3, #8
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800af2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af30:	2b01      	cmp	r3, #1
 800af32:	d107      	bne.n	800af44 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	699b      	ldr	r3, [r3, #24]
 800af38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af3c:	f043 0304 	orr.w	r3, r3, #4
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800af44:	7dfb      	ldrb	r3, [r7, #23]
}
 800af46:	4618      	mov	r0, r3
 800af48:	3718      	adds	r7, #24
 800af4a:	46bd      	mov	sp, r7
 800af4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af50:	b004      	add	sp, #16
 800af52:	4770      	bx	lr
 800af54:	803c3800 	.word	0x803c3800

0800af58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800af62:	2300      	movs	r3, #0
 800af64:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	019b      	lsls	r3, r3, #6
 800af6a:	f043 0220 	orr.w	r2, r3, #32
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	3301      	adds	r3, #1
 800af76:	60fb      	str	r3, [r7, #12]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	4a09      	ldr	r2, [pc, #36]	; (800afa0 <USB_FlushTxFifo+0x48>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d901      	bls.n	800af84 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800af80:	2303      	movs	r3, #3
 800af82:	e006      	b.n	800af92 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	f003 0320 	and.w	r3, r3, #32
 800af8c:	2b20      	cmp	r3, #32
 800af8e:	d0f0      	beq.n	800af72 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3714      	adds	r7, #20
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	00030d40 	.word	0x00030d40

0800afa4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b085      	sub	sp, #20
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800afac:	2300      	movs	r3, #0
 800afae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2210      	movs	r2, #16
 800afb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	3301      	adds	r3, #1
 800afba:	60fb      	str	r3, [r7, #12]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	4a09      	ldr	r2, [pc, #36]	; (800afe4 <USB_FlushRxFifo+0x40>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d901      	bls.n	800afc8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800afc4:	2303      	movs	r3, #3
 800afc6:	e006      	b.n	800afd6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	f003 0310 	and.w	r3, r3, #16
 800afd0:	2b10      	cmp	r3, #16
 800afd2:	d0f0      	beq.n	800afb6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3714      	adds	r7, #20
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	00030d40 	.word	0x00030d40

0800afe8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800afe8:	b480      	push	{r7}
 800afea:	b085      	sub	sp, #20
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	460b      	mov	r3, r1
 800aff2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	78fb      	ldrb	r3, [r7, #3]
 800b002:	68f9      	ldr	r1, [r7, #12]
 800b004:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b008:	4313      	orrs	r3, r2
 800b00a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3714      	adds	r7, #20
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr

0800b01a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b01a:	b480      	push	{r7}
 800b01c:	b087      	sub	sp, #28
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	f003 0306 	and.w	r3, r3, #6
 800b032:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d102      	bne.n	800b040 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b03a:	2300      	movs	r3, #0
 800b03c:	75fb      	strb	r3, [r7, #23]
 800b03e:	e00a      	b.n	800b056 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2b02      	cmp	r3, #2
 800b044:	d002      	beq.n	800b04c <USB_GetDevSpeed+0x32>
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2b06      	cmp	r3, #6
 800b04a:	d102      	bne.n	800b052 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b04c:	2302      	movs	r3, #2
 800b04e:	75fb      	strb	r3, [r7, #23]
 800b050:	e001      	b.n	800b056 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b052:	230f      	movs	r3, #15
 800b054:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b056:	7dfb      	ldrb	r3, [r7, #23]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	371c      	adds	r7, #28
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	785b      	ldrb	r3, [r3, #1]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d13a      	bne.n	800b0f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b086:	69da      	ldr	r2, [r3, #28]
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	f003 030f 	and.w	r3, r3, #15
 800b090:	2101      	movs	r1, #1
 800b092:	fa01 f303 	lsl.w	r3, r1, r3
 800b096:	b29b      	uxth	r3, r3
 800b098:	68f9      	ldr	r1, [r7, #12]
 800b09a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	015a      	lsls	r2, r3, #5
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d155      	bne.n	800b164 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	015a      	lsls	r2, r3, #5
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	4413      	add	r3, r2
 800b0c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	78db      	ldrb	r3, [r3, #3]
 800b0d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b0d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	059b      	lsls	r3, r3, #22
 800b0da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	68ba      	ldr	r2, [r7, #8]
 800b0e0:	0151      	lsls	r1, r2, #5
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	440a      	add	r2, r1
 800b0e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0f2:	6013      	str	r3, [r2, #0]
 800b0f4:	e036      	b.n	800b164 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0fc:	69da      	ldr	r2, [r3, #28]
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	f003 030f 	and.w	r3, r3, #15
 800b106:	2101      	movs	r1, #1
 800b108:	fa01 f303 	lsl.w	r3, r1, r3
 800b10c:	041b      	lsls	r3, r3, #16
 800b10e:	68f9      	ldr	r1, [r7, #12]
 800b110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b114:	4313      	orrs	r3, r2
 800b116:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	015a      	lsls	r2, r3, #5
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	4413      	add	r3, r2
 800b120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d11a      	bne.n	800b164 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	015a      	lsls	r2, r3, #5
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	4413      	add	r3, r2
 800b136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	78db      	ldrb	r3, [r3, #3]
 800b148:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b14a:	430b      	orrs	r3, r1
 800b14c:	4313      	orrs	r3, r2
 800b14e:	68ba      	ldr	r2, [r7, #8]
 800b150:	0151      	lsls	r1, r2, #5
 800b152:	68fa      	ldr	r2, [r7, #12]
 800b154:	440a      	add	r2, r1
 800b156:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b15a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b15e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b162:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3714      	adds	r7, #20
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr
	...

0800b174 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	785b      	ldrb	r3, [r3, #1]
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d161      	bne.n	800b254 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	015a      	lsls	r2, r3, #5
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	4413      	add	r3, r2
 800b198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1a6:	d11f      	bne.n	800b1e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	015a      	lsls	r2, r3, #5
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	0151      	lsls	r1, r2, #5
 800b1ba:	68fa      	ldr	r2, [r7, #12]
 800b1bc:	440a      	add	r2, r1
 800b1be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b1c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	015a      	lsls	r2, r3, #5
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	68ba      	ldr	r2, [r7, #8]
 800b1d8:	0151      	lsls	r1, r2, #5
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	440a      	add	r2, r1
 800b1de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b1e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	f003 030f 	and.w	r3, r3, #15
 800b1f8:	2101      	movs	r1, #1
 800b1fa:	fa01 f303 	lsl.w	r3, r1, r3
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	43db      	mvns	r3, r3
 800b202:	68f9      	ldr	r1, [r7, #12]
 800b204:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b208:	4013      	ands	r3, r2
 800b20a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b212:	69da      	ldr	r2, [r3, #28]
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	f003 030f 	and.w	r3, r3, #15
 800b21c:	2101      	movs	r1, #1
 800b21e:	fa01 f303 	lsl.w	r3, r1, r3
 800b222:	b29b      	uxth	r3, r3
 800b224:	43db      	mvns	r3, r3
 800b226:	68f9      	ldr	r1, [r7, #12]
 800b228:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b22c:	4013      	ands	r3, r2
 800b22e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	015a      	lsls	r2, r3, #5
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	4413      	add	r3, r2
 800b238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	0159      	lsls	r1, r3, #5
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	440b      	add	r3, r1
 800b246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b24a:	4619      	mov	r1, r3
 800b24c:	4b35      	ldr	r3, [pc, #212]	; (800b324 <USB_DeactivateEndpoint+0x1b0>)
 800b24e:	4013      	ands	r3, r2
 800b250:	600b      	str	r3, [r1, #0]
 800b252:	e060      	b.n	800b316 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	015a      	lsls	r2, r3, #5
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	4413      	add	r3, r2
 800b25c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b266:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b26a:	d11f      	bne.n	800b2ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	015a      	lsls	r2, r3, #5
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	4413      	add	r3, r2
 800b274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	68ba      	ldr	r2, [r7, #8]
 800b27c:	0151      	lsls	r1, r2, #5
 800b27e:	68fa      	ldr	r2, [r7, #12]
 800b280:	440a      	add	r2, r1
 800b282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b286:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b28a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	015a      	lsls	r2, r3, #5
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	4413      	add	r3, r2
 800b294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	0151      	lsls	r1, r2, #5
 800b29e:	68fa      	ldr	r2, [r7, #12]
 800b2a0:	440a      	add	r2, r1
 800b2a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	f003 030f 	and.w	r3, r3, #15
 800b2bc:	2101      	movs	r1, #1
 800b2be:	fa01 f303 	lsl.w	r3, r1, r3
 800b2c2:	041b      	lsls	r3, r3, #16
 800b2c4:	43db      	mvns	r3, r3
 800b2c6:	68f9      	ldr	r1, [r7, #12]
 800b2c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2cc:	4013      	ands	r3, r2
 800b2ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2d6:	69da      	ldr	r2, [r3, #28]
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	f003 030f 	and.w	r3, r3, #15
 800b2e0:	2101      	movs	r1, #1
 800b2e2:	fa01 f303 	lsl.w	r3, r1, r3
 800b2e6:	041b      	lsls	r3, r3, #16
 800b2e8:	43db      	mvns	r3, r3
 800b2ea:	68f9      	ldr	r1, [r7, #12]
 800b2ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	015a      	lsls	r2, r3, #5
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	0159      	lsls	r1, r3, #5
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	440b      	add	r3, r1
 800b30a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b30e:	4619      	mov	r1, r3
 800b310:	4b05      	ldr	r3, [pc, #20]	; (800b328 <USB_DeactivateEndpoint+0x1b4>)
 800b312:	4013      	ands	r3, r2
 800b314:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3714      	adds	r7, #20
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr
 800b324:	ec337800 	.word	0xec337800
 800b328:	eff37800 	.word	0xeff37800

0800b32c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b08a      	sub	sp, #40	; 0x28
 800b330:	af02      	add	r7, sp, #8
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	60b9      	str	r1, [r7, #8]
 800b336:	4613      	mov	r3, r2
 800b338:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	785b      	ldrb	r3, [r3, #1]
 800b348:	2b01      	cmp	r3, #1
 800b34a:	f040 815c 	bne.w	800b606 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	695b      	ldr	r3, [r3, #20]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d132      	bne.n	800b3bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	015a      	lsls	r2, r3, #5
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	4413      	add	r3, r2
 800b35e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b362:	691b      	ldr	r3, [r3, #16]
 800b364:	69ba      	ldr	r2, [r7, #24]
 800b366:	0151      	lsls	r1, r2, #5
 800b368:	69fa      	ldr	r2, [r7, #28]
 800b36a:	440a      	add	r2, r1
 800b36c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b370:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b374:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b378:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	015a      	lsls	r2, r3, #5
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	4413      	add	r3, r2
 800b382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b386:	691b      	ldr	r3, [r3, #16]
 800b388:	69ba      	ldr	r2, [r7, #24]
 800b38a:	0151      	lsls	r1, r2, #5
 800b38c:	69fa      	ldr	r2, [r7, #28]
 800b38e:	440a      	add	r2, r1
 800b390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b394:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b398:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	015a      	lsls	r2, r3, #5
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3a6:	691b      	ldr	r3, [r3, #16]
 800b3a8:	69ba      	ldr	r2, [r7, #24]
 800b3aa:	0151      	lsls	r1, r2, #5
 800b3ac:	69fa      	ldr	r2, [r7, #28]
 800b3ae:	440a      	add	r2, r1
 800b3b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3b4:	0cdb      	lsrs	r3, r3, #19
 800b3b6:	04db      	lsls	r3, r3, #19
 800b3b8:	6113      	str	r3, [r2, #16]
 800b3ba:	e074      	b.n	800b4a6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	015a      	lsls	r2, r3, #5
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	69ba      	ldr	r2, [r7, #24]
 800b3cc:	0151      	lsls	r1, r2, #5
 800b3ce:	69fa      	ldr	r2, [r7, #28]
 800b3d0:	440a      	add	r2, r1
 800b3d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3d6:	0cdb      	lsrs	r3, r3, #19
 800b3d8:	04db      	lsls	r3, r3, #19
 800b3da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	015a      	lsls	r2, r3, #5
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3e8:	691b      	ldr	r3, [r3, #16]
 800b3ea:	69ba      	ldr	r2, [r7, #24]
 800b3ec:	0151      	lsls	r1, r2, #5
 800b3ee:	69fa      	ldr	r2, [r7, #28]
 800b3f0:	440a      	add	r2, r1
 800b3f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b3fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b3fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b400:	69bb      	ldr	r3, [r7, #24]
 800b402:	015a      	lsls	r2, r3, #5
 800b404:	69fb      	ldr	r3, [r7, #28]
 800b406:	4413      	add	r3, r2
 800b408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b40c:	691a      	ldr	r2, [r3, #16]
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	6959      	ldr	r1, [r3, #20]
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	440b      	add	r3, r1
 800b418:	1e59      	subs	r1, r3, #1
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	fbb1 f3f3 	udiv	r3, r1, r3
 800b422:	04d9      	lsls	r1, r3, #19
 800b424:	4b9d      	ldr	r3, [pc, #628]	; (800b69c <USB_EPStartXfer+0x370>)
 800b426:	400b      	ands	r3, r1
 800b428:	69b9      	ldr	r1, [r7, #24]
 800b42a:	0148      	lsls	r0, r1, #5
 800b42c:	69f9      	ldr	r1, [r7, #28]
 800b42e:	4401      	add	r1, r0
 800b430:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b434:	4313      	orrs	r3, r2
 800b436:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	015a      	lsls	r2, r3, #5
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	4413      	add	r3, r2
 800b440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b444:	691a      	ldr	r2, [r3, #16]
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	695b      	ldr	r3, [r3, #20]
 800b44a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b44e:	69b9      	ldr	r1, [r7, #24]
 800b450:	0148      	lsls	r0, r1, #5
 800b452:	69f9      	ldr	r1, [r7, #28]
 800b454:	4401      	add	r1, r0
 800b456:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b45a:	4313      	orrs	r3, r2
 800b45c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	78db      	ldrb	r3, [r3, #3]
 800b462:	2b01      	cmp	r3, #1
 800b464:	d11f      	bne.n	800b4a6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	015a      	lsls	r2, r3, #5
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	4413      	add	r3, r2
 800b46e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b472:	691b      	ldr	r3, [r3, #16]
 800b474:	69ba      	ldr	r2, [r7, #24]
 800b476:	0151      	lsls	r1, r2, #5
 800b478:	69fa      	ldr	r2, [r7, #28]
 800b47a:	440a      	add	r2, r1
 800b47c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b480:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b484:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	015a      	lsls	r2, r3, #5
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	4413      	add	r3, r2
 800b48e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b492:	691b      	ldr	r3, [r3, #16]
 800b494:	69ba      	ldr	r2, [r7, #24]
 800b496:	0151      	lsls	r1, r2, #5
 800b498:	69fa      	ldr	r2, [r7, #28]
 800b49a:	440a      	add	r2, r1
 800b49c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b4a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b4a6:	79fb      	ldrb	r3, [r7, #7]
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d14b      	bne.n	800b544 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	691b      	ldr	r3, [r3, #16]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d009      	beq.n	800b4c8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	015a      	lsls	r2, r3, #5
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	691b      	ldr	r3, [r3, #16]
 800b4c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	78db      	ldrb	r3, [r3, #3]
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d128      	bne.n	800b522 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b4d0:	69fb      	ldr	r3, [r7, #28]
 800b4d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d110      	bne.n	800b502 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b4e0:	69bb      	ldr	r3, [r7, #24]
 800b4e2:	015a      	lsls	r2, r3, #5
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	69ba      	ldr	r2, [r7, #24]
 800b4f0:	0151      	lsls	r1, r2, #5
 800b4f2:	69fa      	ldr	r2, [r7, #28]
 800b4f4:	440a      	add	r2, r1
 800b4f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b4fe:	6013      	str	r3, [r2, #0]
 800b500:	e00f      	b.n	800b522 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	015a      	lsls	r2, r3, #5
 800b506:	69fb      	ldr	r3, [r7, #28]
 800b508:	4413      	add	r3, r2
 800b50a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	69ba      	ldr	r2, [r7, #24]
 800b512:	0151      	lsls	r1, r2, #5
 800b514:	69fa      	ldr	r2, [r7, #28]
 800b516:	440a      	add	r2, r1
 800b518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b51c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b520:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	015a      	lsls	r2, r3, #5
 800b526:	69fb      	ldr	r3, [r7, #28]
 800b528:	4413      	add	r3, r2
 800b52a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	69ba      	ldr	r2, [r7, #24]
 800b532:	0151      	lsls	r1, r2, #5
 800b534:	69fa      	ldr	r2, [r7, #28]
 800b536:	440a      	add	r2, r1
 800b538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b53c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b540:	6013      	str	r3, [r2, #0]
 800b542:	e12f      	b.n	800b7a4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	015a      	lsls	r2, r3, #5
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	4413      	add	r3, r2
 800b54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	69ba      	ldr	r2, [r7, #24]
 800b554:	0151      	lsls	r1, r2, #5
 800b556:	69fa      	ldr	r2, [r7, #28]
 800b558:	440a      	add	r2, r1
 800b55a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b55e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b562:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	78db      	ldrb	r3, [r3, #3]
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d015      	beq.n	800b598 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	695b      	ldr	r3, [r3, #20]
 800b570:	2b00      	cmp	r3, #0
 800b572:	f000 8117 	beq.w	800b7a4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b57c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	f003 030f 	and.w	r3, r3, #15
 800b586:	2101      	movs	r1, #1
 800b588:	fa01 f303 	lsl.w	r3, r1, r3
 800b58c:	69f9      	ldr	r1, [r7, #28]
 800b58e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b592:	4313      	orrs	r3, r2
 800b594:	634b      	str	r3, [r1, #52]	; 0x34
 800b596:	e105      	b.n	800b7a4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d110      	bne.n	800b5ca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	015a      	lsls	r2, r3, #5
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	4413      	add	r3, r2
 800b5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	69ba      	ldr	r2, [r7, #24]
 800b5b8:	0151      	lsls	r1, r2, #5
 800b5ba:	69fa      	ldr	r2, [r7, #28]
 800b5bc:	440a      	add	r2, r1
 800b5be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b5c6:	6013      	str	r3, [r2, #0]
 800b5c8:	e00f      	b.n	800b5ea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b5ca:	69bb      	ldr	r3, [r7, #24]
 800b5cc:	015a      	lsls	r2, r3, #5
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	4413      	add	r3, r2
 800b5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	69ba      	ldr	r2, [r7, #24]
 800b5da:	0151      	lsls	r1, r2, #5
 800b5dc:	69fa      	ldr	r2, [r7, #28]
 800b5de:	440a      	add	r2, r1
 800b5e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	68d9      	ldr	r1, [r3, #12]
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	781a      	ldrb	r2, [r3, #0]
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	695b      	ldr	r3, [r3, #20]
 800b5f6:	b298      	uxth	r0, r3
 800b5f8:	79fb      	ldrb	r3, [r7, #7]
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	68f8      	ldr	r0, [r7, #12]
 800b600:	f000 fa2b 	bl	800ba5a <USB_WritePacket>
 800b604:	e0ce      	b.n	800b7a4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	015a      	lsls	r2, r3, #5
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	4413      	add	r3, r2
 800b60e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	69ba      	ldr	r2, [r7, #24]
 800b616:	0151      	lsls	r1, r2, #5
 800b618:	69fa      	ldr	r2, [r7, #28]
 800b61a:	440a      	add	r2, r1
 800b61c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b620:	0cdb      	lsrs	r3, r3, #19
 800b622:	04db      	lsls	r3, r3, #19
 800b624:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	015a      	lsls	r2, r3, #5
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	4413      	add	r3, r2
 800b62e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b632:	691b      	ldr	r3, [r3, #16]
 800b634:	69ba      	ldr	r2, [r7, #24]
 800b636:	0151      	lsls	r1, r2, #5
 800b638:	69fa      	ldr	r2, [r7, #28]
 800b63a:	440a      	add	r2, r1
 800b63c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b640:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b644:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b648:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d126      	bne.n	800b6a0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	015a      	lsls	r2, r3, #5
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	4413      	add	r3, r2
 800b65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b65e:	691a      	ldr	r2, [r3, #16]
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b668:	69b9      	ldr	r1, [r7, #24]
 800b66a:	0148      	lsls	r0, r1, #5
 800b66c:	69f9      	ldr	r1, [r7, #28]
 800b66e:	4401      	add	r1, r0
 800b670:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b674:	4313      	orrs	r3, r2
 800b676:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	015a      	lsls	r2, r3, #5
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	4413      	add	r3, r2
 800b680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	69ba      	ldr	r2, [r7, #24]
 800b688:	0151      	lsls	r1, r2, #5
 800b68a:	69fa      	ldr	r2, [r7, #28]
 800b68c:	440a      	add	r2, r1
 800b68e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b692:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b696:	6113      	str	r3, [r2, #16]
 800b698:	e036      	b.n	800b708 <USB_EPStartXfer+0x3dc>
 800b69a:	bf00      	nop
 800b69c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	695a      	ldr	r2, [r3, #20]
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	1e5a      	subs	r2, r3, #1
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	689b      	ldr	r3, [r3, #8]
 800b6b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6b4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	015a      	lsls	r2, r3, #5
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	4413      	add	r3, r2
 800b6be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6c2:	691a      	ldr	r2, [r3, #16]
 800b6c4:	8afb      	ldrh	r3, [r7, #22]
 800b6c6:	04d9      	lsls	r1, r3, #19
 800b6c8:	4b39      	ldr	r3, [pc, #228]	; (800b7b0 <USB_EPStartXfer+0x484>)
 800b6ca:	400b      	ands	r3, r1
 800b6cc:	69b9      	ldr	r1, [r7, #24]
 800b6ce:	0148      	lsls	r0, r1, #5
 800b6d0:	69f9      	ldr	r1, [r7, #28]
 800b6d2:	4401      	add	r1, r0
 800b6d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	015a      	lsls	r2, r3, #5
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	4413      	add	r3, r2
 800b6e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6e8:	691a      	ldr	r2, [r3, #16]
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	8af9      	ldrh	r1, [r7, #22]
 800b6f0:	fb01 f303 	mul.w	r3, r1, r3
 800b6f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6f8:	69b9      	ldr	r1, [r7, #24]
 800b6fa:	0148      	lsls	r0, r1, #5
 800b6fc:	69f9      	ldr	r1, [r7, #28]
 800b6fe:	4401      	add	r1, r0
 800b700:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b704:	4313      	orrs	r3, r2
 800b706:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b708:	79fb      	ldrb	r3, [r7, #7]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d10d      	bne.n	800b72a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d009      	beq.n	800b72a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	68d9      	ldr	r1, [r3, #12]
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	015a      	lsls	r2, r3, #5
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	4413      	add	r3, r2
 800b722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b726:	460a      	mov	r2, r1
 800b728:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	78db      	ldrb	r3, [r3, #3]
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d128      	bne.n	800b784 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d110      	bne.n	800b764 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	015a      	lsls	r2, r3, #5
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	4413      	add	r3, r2
 800b74a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	69ba      	ldr	r2, [r7, #24]
 800b752:	0151      	lsls	r1, r2, #5
 800b754:	69fa      	ldr	r2, [r7, #28]
 800b756:	440a      	add	r2, r1
 800b758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b75c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b760:	6013      	str	r3, [r2, #0]
 800b762:	e00f      	b.n	800b784 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	015a      	lsls	r2, r3, #5
 800b768:	69fb      	ldr	r3, [r7, #28]
 800b76a:	4413      	add	r3, r2
 800b76c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	69ba      	ldr	r2, [r7, #24]
 800b774:	0151      	lsls	r1, r2, #5
 800b776:	69fa      	ldr	r2, [r7, #28]
 800b778:	440a      	add	r2, r1
 800b77a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b77e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b782:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	015a      	lsls	r2, r3, #5
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	4413      	add	r3, r2
 800b78c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	69ba      	ldr	r2, [r7, #24]
 800b794:	0151      	lsls	r1, r2, #5
 800b796:	69fa      	ldr	r2, [r7, #28]
 800b798:	440a      	add	r2, r1
 800b79a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b79e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b7a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7a4:	2300      	movs	r3, #0
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3720      	adds	r7, #32
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	1ff80000 	.word	0x1ff80000

0800b7b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b087      	sub	sp, #28
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	4613      	mov	r3, r2
 800b7c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	785b      	ldrb	r3, [r3, #1]
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	f040 80cd 	bne.w	800b970 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	695b      	ldr	r3, [r3, #20]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d132      	bne.n	800b844 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	015a      	lsls	r2, r3, #5
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	693a      	ldr	r2, [r7, #16]
 800b7ee:	0151      	lsls	r1, r2, #5
 800b7f0:	697a      	ldr	r2, [r7, #20]
 800b7f2:	440a      	add	r2, r1
 800b7f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b7fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b800:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	015a      	lsls	r2, r3, #5
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	4413      	add	r3, r2
 800b80a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	693a      	ldr	r2, [r7, #16]
 800b812:	0151      	lsls	r1, r2, #5
 800b814:	697a      	ldr	r2, [r7, #20]
 800b816:	440a      	add	r2, r1
 800b818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b81c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b820:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	015a      	lsls	r2, r3, #5
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	4413      	add	r3, r2
 800b82a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b82e:	691b      	ldr	r3, [r3, #16]
 800b830:	693a      	ldr	r2, [r7, #16]
 800b832:	0151      	lsls	r1, r2, #5
 800b834:	697a      	ldr	r2, [r7, #20]
 800b836:	440a      	add	r2, r1
 800b838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b83c:	0cdb      	lsrs	r3, r3, #19
 800b83e:	04db      	lsls	r3, r3, #19
 800b840:	6113      	str	r3, [r2, #16]
 800b842:	e04e      	b.n	800b8e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	015a      	lsls	r2, r3, #5
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	4413      	add	r3, r2
 800b84c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b850:	691b      	ldr	r3, [r3, #16]
 800b852:	693a      	ldr	r2, [r7, #16]
 800b854:	0151      	lsls	r1, r2, #5
 800b856:	697a      	ldr	r2, [r7, #20]
 800b858:	440a      	add	r2, r1
 800b85a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b85e:	0cdb      	lsrs	r3, r3, #19
 800b860:	04db      	lsls	r3, r3, #19
 800b862:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	015a      	lsls	r2, r3, #5
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	4413      	add	r3, r2
 800b86c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b870:	691b      	ldr	r3, [r3, #16]
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	0151      	lsls	r1, r2, #5
 800b876:	697a      	ldr	r2, [r7, #20]
 800b878:	440a      	add	r2, r1
 800b87a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b87e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b882:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b886:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	695a      	ldr	r2, [r3, #20]
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	429a      	cmp	r2, r3
 800b892:	d903      	bls.n	800b89c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	689a      	ldr	r2, [r3, #8]
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	015a      	lsls	r2, r3, #5
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8a8:	691b      	ldr	r3, [r3, #16]
 800b8aa:	693a      	ldr	r2, [r7, #16]
 800b8ac:	0151      	lsls	r1, r2, #5
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	440a      	add	r2, r1
 800b8b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b8ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	015a      	lsls	r2, r3, #5
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8c8:	691a      	ldr	r2, [r3, #16]
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	695b      	ldr	r3, [r3, #20]
 800b8ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8d2:	6939      	ldr	r1, [r7, #16]
 800b8d4:	0148      	lsls	r0, r1, #5
 800b8d6:	6979      	ldr	r1, [r7, #20]
 800b8d8:	4401      	add	r1, r0
 800b8da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b8e2:	79fb      	ldrb	r3, [r7, #7]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d11e      	bne.n	800b926 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	691b      	ldr	r3, [r3, #16]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d009      	beq.n	800b904 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	015a      	lsls	r2, r3, #5
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	4413      	add	r3, r2
 800b8f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	691b      	ldr	r3, [r3, #16]
 800b902:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	015a      	lsls	r2, r3, #5
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	4413      	add	r3, r2
 800b90c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	693a      	ldr	r2, [r7, #16]
 800b914:	0151      	lsls	r1, r2, #5
 800b916:	697a      	ldr	r2, [r7, #20]
 800b918:	440a      	add	r2, r1
 800b91a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b91e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b922:	6013      	str	r3, [r2, #0]
 800b924:	e092      	b.n	800ba4c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	015a      	lsls	r2, r3, #5
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	4413      	add	r3, r2
 800b92e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	693a      	ldr	r2, [r7, #16]
 800b936:	0151      	lsls	r1, r2, #5
 800b938:	697a      	ldr	r2, [r7, #20]
 800b93a:	440a      	add	r2, r1
 800b93c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b940:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b944:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d07e      	beq.n	800ba4c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	f003 030f 	and.w	r3, r3, #15
 800b95e:	2101      	movs	r1, #1
 800b960:	fa01 f303 	lsl.w	r3, r1, r3
 800b964:	6979      	ldr	r1, [r7, #20]
 800b966:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b96a:	4313      	orrs	r3, r2
 800b96c:	634b      	str	r3, [r1, #52]	; 0x34
 800b96e:	e06d      	b.n	800ba4c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	015a      	lsls	r2, r3, #5
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	4413      	add	r3, r2
 800b978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b97c:	691b      	ldr	r3, [r3, #16]
 800b97e:	693a      	ldr	r2, [r7, #16]
 800b980:	0151      	lsls	r1, r2, #5
 800b982:	697a      	ldr	r2, [r7, #20]
 800b984:	440a      	add	r2, r1
 800b986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b98a:	0cdb      	lsrs	r3, r3, #19
 800b98c:	04db      	lsls	r3, r3, #19
 800b98e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	015a      	lsls	r2, r3, #5
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	4413      	add	r3, r2
 800b998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	693a      	ldr	r2, [r7, #16]
 800b9a0:	0151      	lsls	r1, r2, #5
 800b9a2:	697a      	ldr	r2, [r7, #20]
 800b9a4:	440a      	add	r2, r1
 800b9a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b9ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b9b2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	695b      	ldr	r3, [r3, #20]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d003      	beq.n	800b9c4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	689a      	ldr	r2, [r3, #8]
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	015a      	lsls	r2, r3, #5
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9d0:	691b      	ldr	r3, [r3, #16]
 800b9d2:	693a      	ldr	r2, [r7, #16]
 800b9d4:	0151      	lsls	r1, r2, #5
 800b9d6:	697a      	ldr	r2, [r7, #20]
 800b9d8:	440a      	add	r2, r1
 800b9da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b9e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	015a      	lsls	r2, r3, #5
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9f0:	691a      	ldr	r2, [r3, #16]
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9fa:	6939      	ldr	r1, [r7, #16]
 800b9fc:	0148      	lsls	r0, r1, #5
 800b9fe:	6979      	ldr	r1, [r7, #20]
 800ba00:	4401      	add	r1, r0
 800ba02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ba06:	4313      	orrs	r3, r2
 800ba08:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ba0a:	79fb      	ldrb	r3, [r7, #7]
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d10d      	bne.n	800ba2c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d009      	beq.n	800ba2c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	68d9      	ldr	r1, [r3, #12]
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	015a      	lsls	r2, r3, #5
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	4413      	add	r3, r2
 800ba24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba28:	460a      	mov	r2, r1
 800ba2a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	015a      	lsls	r2, r3, #5
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	4413      	add	r3, r2
 800ba34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	693a      	ldr	r2, [r7, #16]
 800ba3c:	0151      	lsls	r1, r2, #5
 800ba3e:	697a      	ldr	r2, [r7, #20]
 800ba40:	440a      	add	r2, r1
 800ba42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ba4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	371c      	adds	r7, #28
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ba5a:	b480      	push	{r7}
 800ba5c:	b089      	sub	sp, #36	; 0x24
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	60f8      	str	r0, [r7, #12]
 800ba62:	60b9      	str	r1, [r7, #8]
 800ba64:	4611      	mov	r1, r2
 800ba66:	461a      	mov	r2, r3
 800ba68:	460b      	mov	r3, r1
 800ba6a:	71fb      	strb	r3, [r7, #7]
 800ba6c:	4613      	mov	r3, r2
 800ba6e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ba78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d11a      	bne.n	800bab6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ba80:	88bb      	ldrh	r3, [r7, #4]
 800ba82:	3303      	adds	r3, #3
 800ba84:	089b      	lsrs	r3, r3, #2
 800ba86:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ba88:	2300      	movs	r3, #0
 800ba8a:	61bb      	str	r3, [r7, #24]
 800ba8c:	e00f      	b.n	800baae <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ba8e:	79fb      	ldrb	r3, [r7, #7]
 800ba90:	031a      	lsls	r2, r3, #12
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	4413      	add	r3, r2
 800ba96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	69fb      	ldr	r3, [r7, #28]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800baa2:	69fb      	ldr	r3, [r7, #28]
 800baa4:	3304      	adds	r3, #4
 800baa6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	3301      	adds	r3, #1
 800baac:	61bb      	str	r3, [r7, #24]
 800baae:	69ba      	ldr	r2, [r7, #24]
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d3eb      	bcc.n	800ba8e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bab6:	2300      	movs	r3, #0
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3724      	adds	r7, #36	; 0x24
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b089      	sub	sp, #36	; 0x24
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	4613      	mov	r3, r2
 800bad0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800bada:	88fb      	ldrh	r3, [r7, #6]
 800badc:	3303      	adds	r3, #3
 800bade:	089b      	lsrs	r3, r3, #2
 800bae0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800bae2:	2300      	movs	r3, #0
 800bae4:	61bb      	str	r3, [r7, #24]
 800bae6:	e00b      	b.n	800bb00 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	69fb      	ldr	r3, [r7, #28]
 800baf2:	601a      	str	r2, [r3, #0]
    pDest++;
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	3304      	adds	r3, #4
 800baf8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	3301      	adds	r3, #1
 800bafe:	61bb      	str	r3, [r7, #24]
 800bb00:	69ba      	ldr	r2, [r7, #24]
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d3ef      	bcc.n	800bae8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800bb08:	69fb      	ldr	r3, [r7, #28]
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3724      	adds	r7, #36	; 0x24
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr

0800bb16 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bb16:	b480      	push	{r7}
 800bb18:	b085      	sub	sp, #20
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
 800bb1e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	785b      	ldrb	r3, [r3, #1]
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d12c      	bne.n	800bb8c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	015a      	lsls	r2, r3, #5
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	4413      	add	r3, r2
 800bb3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	db12      	blt.n	800bb6a <USB_EPSetStall+0x54>
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00f      	beq.n	800bb6a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	015a      	lsls	r2, r3, #5
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	4413      	add	r3, r2
 800bb52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	0151      	lsls	r1, r2, #5
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	440a      	add	r2, r1
 800bb60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bb68:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	015a      	lsls	r2, r3, #5
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	4413      	add	r3, r2
 800bb72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	0151      	lsls	r1, r2, #5
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	440a      	add	r2, r1
 800bb80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bb88:	6013      	str	r3, [r2, #0]
 800bb8a:	e02b      	b.n	800bbe4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	015a      	lsls	r2, r3, #5
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	4413      	add	r3, r2
 800bb94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	db12      	blt.n	800bbc4 <USB_EPSetStall+0xae>
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00f      	beq.n	800bbc4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	015a      	lsls	r2, r3, #5
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	4413      	add	r3, r2
 800bbac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	68ba      	ldr	r2, [r7, #8]
 800bbb4:	0151      	lsls	r1, r2, #5
 800bbb6:	68fa      	ldr	r2, [r7, #12]
 800bbb8:	440a      	add	r2, r1
 800bbba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bbc2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	015a      	lsls	r2, r3, #5
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	4413      	add	r3, r2
 800bbcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	68ba      	ldr	r2, [r7, #8]
 800bbd4:	0151      	lsls	r1, r2, #5
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	440a      	add	r2, r1
 800bbda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bbe2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr

0800bbf2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bbf2:	b480      	push	{r7}
 800bbf4:	b085      	sub	sp, #20
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
 800bbfa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	785b      	ldrb	r3, [r3, #1]
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d128      	bne.n	800bc60 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	015a      	lsls	r2, r3, #5
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	4413      	add	r3, r2
 800bc16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	68ba      	ldr	r2, [r7, #8]
 800bc1e:	0151      	lsls	r1, r2, #5
 800bc20:	68fa      	ldr	r2, [r7, #12]
 800bc22:	440a      	add	r2, r1
 800bc24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bc2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	78db      	ldrb	r3, [r3, #3]
 800bc32:	2b03      	cmp	r3, #3
 800bc34:	d003      	beq.n	800bc3e <USB_EPClearStall+0x4c>
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	78db      	ldrb	r3, [r3, #3]
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	d138      	bne.n	800bcb0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	015a      	lsls	r2, r3, #5
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	4413      	add	r3, r2
 800bc46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	0151      	lsls	r1, r2, #5
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	440a      	add	r2, r1
 800bc54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc5c:	6013      	str	r3, [r2, #0]
 800bc5e:	e027      	b.n	800bcb0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	015a      	lsls	r2, r3, #5
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	4413      	add	r3, r2
 800bc68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	68ba      	ldr	r2, [r7, #8]
 800bc70:	0151      	lsls	r1, r2, #5
 800bc72:	68fa      	ldr	r2, [r7, #12]
 800bc74:	440a      	add	r2, r1
 800bc76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bc7e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	78db      	ldrb	r3, [r3, #3]
 800bc84:	2b03      	cmp	r3, #3
 800bc86:	d003      	beq.n	800bc90 <USB_EPClearStall+0x9e>
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	78db      	ldrb	r3, [r3, #3]
 800bc8c:	2b02      	cmp	r3, #2
 800bc8e:	d10f      	bne.n	800bcb0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	015a      	lsls	r2, r3, #5
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	4413      	add	r3, r2
 800bc98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	68ba      	ldr	r2, [r7, #8]
 800bca0:	0151      	lsls	r1, r2, #5
 800bca2:	68fa      	ldr	r2, [r7, #12]
 800bca4:	440a      	add	r2, r1
 800bca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcae:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3714      	adds	r7, #20
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr

0800bcbe <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	b085      	sub	sp, #20
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bcdc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bce0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	78fb      	ldrb	r3, [r7, #3]
 800bcec:	011b      	lsls	r3, r3, #4
 800bcee:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bcf2:	68f9      	ldr	r1, [r7, #12]
 800bcf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bcfc:	2300      	movs	r3, #0
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3714      	adds	r7, #20
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr

0800bd0a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bd0a:	b480      	push	{r7}
 800bd0c:	b085      	sub	sp, #20
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd24:	f023 0303 	bic.w	r3, r3, #3
 800bd28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd38:	f023 0302 	bic.w	r3, r3, #2
 800bd3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd3e:	2300      	movs	r3, #0
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3714      	adds	r7, #20
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b085      	sub	sp, #20
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	68fa      	ldr	r2, [r7, #12]
 800bd62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd66:	f023 0303 	bic.w	r3, r3, #3
 800bd6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd7a:	f043 0302 	orr.w	r3, r3, #2
 800bd7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd80:	2300      	movs	r3, #0
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3714      	adds	r7, #20
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr

0800bd8e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b085      	sub	sp, #20
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	695b      	ldr	r3, [r3, #20]
 800bd9a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	699b      	ldr	r3, [r3, #24]
 800bda0:	68fa      	ldr	r2, [r7, #12]
 800bda2:	4013      	ands	r3, r2
 800bda4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bda6:	68fb      	ldr	r3, [r7, #12]
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3714      	adds	r7, #20
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdc6:	699b      	ldr	r3, [r3, #24]
 800bdc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdd0:	69db      	ldr	r3, [r3, #28]
 800bdd2:	68ba      	ldr	r2, [r7, #8]
 800bdd4:	4013      	ands	r3, r2
 800bdd6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	0c1b      	lsrs	r3, r3, #16
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3714      	adds	r7, #20
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdfa:	699b      	ldr	r3, [r3, #24]
 800bdfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be04:	69db      	ldr	r3, [r3, #28]
 800be06:	68ba      	ldr	r2, [r7, #8]
 800be08:	4013      	ands	r3, r2
 800be0a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	b29b      	uxth	r3, r3
}
 800be10:	4618      	mov	r0, r3
 800be12:	3714      	adds	r7, #20
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	460b      	mov	r3, r1
 800be26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800be2c:	78fb      	ldrb	r3, [r7, #3]
 800be2e:	015a      	lsls	r2, r3, #5
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	4413      	add	r3, r2
 800be34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be42:	695b      	ldr	r3, [r3, #20]
 800be44:	68ba      	ldr	r2, [r7, #8]
 800be46:	4013      	ands	r3, r2
 800be48:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800be4a:	68bb      	ldr	r3, [r7, #8]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3714      	adds	r7, #20
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr

0800be58 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800be58:	b480      	push	{r7}
 800be5a:	b087      	sub	sp, #28
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	460b      	mov	r3, r1
 800be62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be6e:	691b      	ldr	r3, [r3, #16]
 800be70:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be7a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800be7c:	78fb      	ldrb	r3, [r7, #3]
 800be7e:	f003 030f 	and.w	r3, r3, #15
 800be82:	68fa      	ldr	r2, [r7, #12]
 800be84:	fa22 f303 	lsr.w	r3, r2, r3
 800be88:	01db      	lsls	r3, r3, #7
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	693a      	ldr	r2, [r7, #16]
 800be8e:	4313      	orrs	r3, r2
 800be90:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800be92:	78fb      	ldrb	r3, [r7, #3]
 800be94:	015a      	lsls	r2, r3, #5
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	4413      	add	r3, r2
 800be9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	693a      	ldr	r2, [r7, #16]
 800bea2:	4013      	ands	r3, r2
 800bea4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bea6:	68bb      	ldr	r3, [r7, #8]
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	371c      	adds	r7, #28
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	695b      	ldr	r3, [r3, #20]
 800bec0:	f003 0301 	and.w	r3, r3, #1
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	370c      	adds	r7, #12
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b085      	sub	sp, #20
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800beea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800beee:	f023 0307 	bic.w	r3, r3, #7
 800bef2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3714      	adds	r7, #20
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr
	...

0800bf18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b087      	sub	sp, #28
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	460b      	mov	r3, r1
 800bf22:	607a      	str	r2, [r7, #4]
 800bf24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	333c      	adds	r3, #60	; 0x3c
 800bf2e:	3304      	adds	r3, #4
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	4a26      	ldr	r2, [pc, #152]	; (800bfd0 <USB_EP0_OutStart+0xb8>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d90a      	bls.n	800bf52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf4c:	d101      	bne.n	800bf52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	e037      	b.n	800bfc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf58:	461a      	mov	r2, r3
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	697a      	ldr	r2, [r7, #20]
 800bf68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf78:	691b      	ldr	r3, [r3, #16]
 800bf7a:	697a      	ldr	r2, [r7, #20]
 800bf7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf80:	f043 0318 	orr.w	r3, r3, #24
 800bf84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf8c:	691b      	ldr	r3, [r3, #16]
 800bf8e:	697a      	ldr	r2, [r7, #20]
 800bf90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bf98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bf9a:	7afb      	ldrb	r3, [r7, #11]
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	d10f      	bne.n	800bfc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	697a      	ldr	r2, [r7, #20]
 800bfb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bfbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	371c      	adds	r7, #28
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr
 800bfce:	bf00      	nop
 800bfd0:	4f54300a 	.word	0x4f54300a

0800bfd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	60fb      	str	r3, [r7, #12]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	4a13      	ldr	r2, [pc, #76]	; (800c038 <USB_CoreReset+0x64>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d901      	bls.n	800bff2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bfee:	2303      	movs	r3, #3
 800bff0:	e01b      	b.n	800c02a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	691b      	ldr	r3, [r3, #16]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	daf2      	bge.n	800bfe0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bffa:	2300      	movs	r3, #0
 800bffc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	f043 0201 	orr.w	r2, r3, #1
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	3301      	adds	r3, #1
 800c00e:	60fb      	str	r3, [r7, #12]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	4a09      	ldr	r2, [pc, #36]	; (800c038 <USB_CoreReset+0x64>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d901      	bls.n	800c01c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c018:	2303      	movs	r3, #3
 800c01a:	e006      	b.n	800c02a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	691b      	ldr	r3, [r3, #16]
 800c020:	f003 0301 	and.w	r3, r3, #1
 800c024:	2b01      	cmp	r3, #1
 800c026:	d0f0      	beq.n	800c00a <USB_CoreReset+0x36>

  return HAL_OK;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3714      	adds	r7, #20
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	00030d40 	.word	0x00030d40

0800c03c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	460b      	mov	r3, r1
 800c046:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c048:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c04c:	f003 fb94 	bl	800f778 <malloc>
 800c050:	4603      	mov	r3, r0
 800c052:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d105      	bne.n	800c066 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2200      	movs	r2, #0
 800c05e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c062:	2302      	movs	r3, #2
 800c064:	e066      	b.n	800c134 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	7c1b      	ldrb	r3, [r3, #16]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d119      	bne.n	800c0aa <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c07a:	2202      	movs	r2, #2
 800c07c:	2181      	movs	r1, #129	; 0x81
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f003 f9e5 	bl	800f44e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2201      	movs	r2, #1
 800c088:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c08a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c08e:	2202      	movs	r2, #2
 800c090:	2101      	movs	r1, #1
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f003 f9db 	bl	800f44e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2201      	movs	r2, #1
 800c09c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2210      	movs	r2, #16
 800c0a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800c0a8:	e016      	b.n	800c0d8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c0aa:	2340      	movs	r3, #64	; 0x40
 800c0ac:	2202      	movs	r2, #2
 800c0ae:	2181      	movs	r1, #129	; 0x81
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f003 f9cc 	bl	800f44e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c0bc:	2340      	movs	r3, #64	; 0x40
 800c0be:	2202      	movs	r2, #2
 800c0c0:	2101      	movs	r1, #1
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f003 f9c3 	bl	800f44e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2210      	movs	r2, #16
 800c0d4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c0d8:	2308      	movs	r3, #8
 800c0da:	2203      	movs	r2, #3
 800c0dc:	2182      	movs	r1, #130	; 0x82
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f003 f9b5 	bl	800f44e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2200      	movs	r2, #0
 800c102:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	7c1b      	ldrb	r3, [r3, #16]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d109      	bne.n	800c122 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c114:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c118:	2101      	movs	r1, #1
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f003 fa86 	bl	800f62c <USBD_LL_PrepareReceive>
 800c120:	e007      	b.n	800c132 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c128:	2340      	movs	r3, #64	; 0x40
 800c12a:	2101      	movs	r1, #1
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f003 fa7d 	bl	800f62c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c132:	2300      	movs	r3, #0
}
 800c134:	4618      	mov	r0, r3
 800c136:	3710      	adds	r7, #16
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	460b      	mov	r3, r1
 800c146:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800c148:	2300      	movs	r3, #0
 800c14a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c14c:	2181      	movs	r1, #129	; 0x81
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f003 f9a3 	bl	800f49a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c15a:	2101      	movs	r1, #1
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f003 f99c 	bl	800f49a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c16a:	2182      	movs	r1, #130	; 0x82
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f003 f994 	bl	800f49a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00e      	beq.n	800c1aa <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c19c:	4618      	mov	r0, r3
 800c19e:	f003 faf3 	bl	800f788 <free>
    pdev->pClassData = NULL;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800c1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3710      	adds	r7, #16
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b086      	sub	sp, #24
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1c4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d03a      	beq.n	800c254 <USBD_CDC_Setup+0xa0>
 800c1de:	2b20      	cmp	r3, #32
 800c1e0:	f040 8097 	bne.w	800c312 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	88db      	ldrh	r3, [r3, #6]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d029      	beq.n	800c240 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	b25b      	sxtb	r3, r3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	da11      	bge.n	800c21a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	683a      	ldr	r2, [r7, #0]
 800c200:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800c202:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c204:	683a      	ldr	r2, [r7, #0]
 800c206:	88d2      	ldrh	r2, [r2, #6]
 800c208:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c20a:	6939      	ldr	r1, [r7, #16]
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	88db      	ldrh	r3, [r3, #6]
 800c210:	461a      	mov	r2, r3
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f001 fa9d 	bl	800d752 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800c218:	e082      	b.n	800c320 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	785a      	ldrb	r2, [r3, #1]
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	88db      	ldrh	r3, [r3, #6]
 800c228:	b2da      	uxtb	r2, r3
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c230:	6939      	ldr	r1, [r7, #16]
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	88db      	ldrh	r3, [r3, #6]
 800c236:	461a      	mov	r2, r3
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f001 fab6 	bl	800d7aa <USBD_CtlPrepareRx>
    break;
 800c23e:	e06f      	b.n	800c320 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	683a      	ldr	r2, [r7, #0]
 800c24a:	7850      	ldrb	r0, [r2, #1]
 800c24c:	2200      	movs	r2, #0
 800c24e:	6839      	ldr	r1, [r7, #0]
 800c250:	4798      	blx	r3
    break;
 800c252:	e065      	b.n	800c320 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	785b      	ldrb	r3, [r3, #1]
 800c258:	2b0b      	cmp	r3, #11
 800c25a:	d84f      	bhi.n	800c2fc <USBD_CDC_Setup+0x148>
 800c25c:	a201      	add	r2, pc, #4	; (adr r2, 800c264 <USBD_CDC_Setup+0xb0>)
 800c25e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c262:	bf00      	nop
 800c264:	0800c295 	.word	0x0800c295
 800c268:	0800c30b 	.word	0x0800c30b
 800c26c:	0800c2fd 	.word	0x0800c2fd
 800c270:	0800c2fd 	.word	0x0800c2fd
 800c274:	0800c2fd 	.word	0x0800c2fd
 800c278:	0800c2fd 	.word	0x0800c2fd
 800c27c:	0800c2fd 	.word	0x0800c2fd
 800c280:	0800c2fd 	.word	0x0800c2fd
 800c284:	0800c2fd 	.word	0x0800c2fd
 800c288:	0800c2fd 	.word	0x0800c2fd
 800c28c:	0800c2bd 	.word	0x0800c2bd
 800c290:	0800c2e5 	.word	0x0800c2e5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c29a:	2b03      	cmp	r3, #3
 800c29c:	d107      	bne.n	800c2ae <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c29e:	f107 030c 	add.w	r3, r7, #12
 800c2a2:	2202      	movs	r2, #2
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f001 fa53 	bl	800d752 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c2ac:	e030      	b.n	800c310 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800c2ae:	6839      	ldr	r1, [r7, #0]
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f001 f9dd 	bl	800d670 <USBD_CtlError>
        ret = USBD_FAIL;
 800c2b6:	2303      	movs	r3, #3
 800c2b8:	75fb      	strb	r3, [r7, #23]
      break;
 800c2ba:	e029      	b.n	800c310 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2c2:	2b03      	cmp	r3, #3
 800c2c4:	d107      	bne.n	800c2d6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c2c6:	f107 030f 	add.w	r3, r7, #15
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f001 fa3f 	bl	800d752 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c2d4:	e01c      	b.n	800c310 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800c2d6:	6839      	ldr	r1, [r7, #0]
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f001 f9c9 	bl	800d670 <USBD_CtlError>
        ret = USBD_FAIL;
 800c2de:	2303      	movs	r3, #3
 800c2e0:	75fb      	strb	r3, [r7, #23]
      break;
 800c2e2:	e015      	b.n	800c310 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2ea:	2b03      	cmp	r3, #3
 800c2ec:	d00f      	beq.n	800c30e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800c2ee:	6839      	ldr	r1, [r7, #0]
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f001 f9bd 	bl	800d670 <USBD_CtlError>
        ret = USBD_FAIL;
 800c2f6:	2303      	movs	r3, #3
 800c2f8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c2fa:	e008      	b.n	800c30e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f001 f9b6 	bl	800d670 <USBD_CtlError>
      ret = USBD_FAIL;
 800c304:	2303      	movs	r3, #3
 800c306:	75fb      	strb	r3, [r7, #23]
      break;
 800c308:	e002      	b.n	800c310 <USBD_CDC_Setup+0x15c>
      break;
 800c30a:	bf00      	nop
 800c30c:	e008      	b.n	800c320 <USBD_CDC_Setup+0x16c>
      break;
 800c30e:	bf00      	nop
    }
    break;
 800c310:	e006      	b.n	800c320 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800c312:	6839      	ldr	r1, [r7, #0]
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f001 f9ab 	bl	800d670 <USBD_CtlError>
    ret = USBD_FAIL;
 800c31a:	2303      	movs	r3, #3
 800c31c:	75fb      	strb	r3, [r7, #23]
    break;
 800c31e:	bf00      	nop
  }

  return (uint8_t)ret;
 800c320:	7dfb      	ldrb	r3, [r7, #23]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3718      	adds	r7, #24
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop

0800c32c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	460b      	mov	r3, r1
 800c336:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c33e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c346:	2b00      	cmp	r3, #0
 800c348:	d101      	bne.n	800c34e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c34a:	2303      	movs	r3, #3
 800c34c:	e049      	b.n	800c3e2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c354:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c356:	78fa      	ldrb	r2, [r7, #3]
 800c358:	6879      	ldr	r1, [r7, #4]
 800c35a:	4613      	mov	r3, r2
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	4413      	add	r3, r2
 800c360:	009b      	lsls	r3, r3, #2
 800c362:	440b      	add	r3, r1
 800c364:	3318      	adds	r3, #24
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d029      	beq.n	800c3c0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c36c:	78fa      	ldrb	r2, [r7, #3]
 800c36e:	6879      	ldr	r1, [r7, #4]
 800c370:	4613      	mov	r3, r2
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	4413      	add	r3, r2
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	440b      	add	r3, r1
 800c37a:	3318      	adds	r3, #24
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	78f9      	ldrb	r1, [r7, #3]
 800c380:	68f8      	ldr	r0, [r7, #12]
 800c382:	460b      	mov	r3, r1
 800c384:	00db      	lsls	r3, r3, #3
 800c386:	1a5b      	subs	r3, r3, r1
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	4403      	add	r3, r0
 800c38c:	3344      	adds	r3, #68	; 0x44
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	fbb2 f1f3 	udiv	r1, r2, r3
 800c394:	fb03 f301 	mul.w	r3, r3, r1
 800c398:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d110      	bne.n	800c3c0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c39e:	78fa      	ldrb	r2, [r7, #3]
 800c3a0:	6879      	ldr	r1, [r7, #4]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	4413      	add	r3, r2
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	440b      	add	r3, r1
 800c3ac:	3318      	adds	r3, #24
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c3b2:	78f9      	ldrb	r1, [r7, #3]
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f003 f916 	bl	800f5ea <USBD_LL_Transmit>
 800c3be:	e00f      	b.n	800c3e0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3ce:	691b      	ldr	r3, [r3, #16]
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c3d6:	68ba      	ldr	r2, [r7, #8]
 800c3d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c3dc:	78fa      	ldrb	r2, [r7, #3]
 800c3de:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800c3e0:	2300      	movs	r3, #0
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b084      	sub	sp, #16
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c404:	2b00      	cmp	r3, #0
 800c406:	d101      	bne.n	800c40c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c408:	2303      	movs	r3, #3
 800c40a:	e015      	b.n	800c438 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c40c:	78fb      	ldrb	r3, [r7, #3]
 800c40e:	4619      	mov	r1, r3
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f003 f92c 	bl	800f66e <USBD_LL_GetRxDataSize>
 800c416:	4602      	mov	r2, r0
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c424:	68db      	ldr	r3, [r3, #12]
 800c426:	68fa      	ldr	r2, [r7, #12]
 800c428:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c432:	4611      	mov	r1, r2
 800c434:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c436:	2300      	movs	r3, #0
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3710      	adds	r7, #16
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c44e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c456:	2b00      	cmp	r3, #0
 800c458:	d015      	beq.n	800c486 <USBD_CDC_EP0_RxReady+0x46>
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c460:	2bff      	cmp	r3, #255	; 0xff
 800c462:	d010      	beq.n	800c486 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c46a:	689b      	ldr	r3, [r3, #8]
 800c46c:	68fa      	ldr	r2, [r7, #12]
 800c46e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c472:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c474:	68fa      	ldr	r2, [r7, #12]
 800c476:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c47a:	b292      	uxth	r2, r2
 800c47c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	22ff      	movs	r2, #255	; 0xff
 800c482:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800c486:	2300      	movs	r3, #0
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3710      	adds	r7, #16
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c490:	b480      	push	{r7}
 800c492:	b083      	sub	sp, #12
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2243      	movs	r2, #67	; 0x43
 800c49c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c49e:	4b03      	ldr	r3, [pc, #12]	; (800c4ac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	370c      	adds	r7, #12
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr
 800c4ac:	2000009c 	.word	0x2000009c

0800c4b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b083      	sub	sp, #12
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2243      	movs	r2, #67	; 0x43
 800c4bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c4be:	4b03      	ldr	r3, [pc, #12]	; (800c4cc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	370c      	adds	r7, #12
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr
 800c4cc:	20000058 	.word	0x20000058

0800c4d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2243      	movs	r2, #67	; 0x43
 800c4dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c4de:	4b03      	ldr	r3, [pc, #12]	; (800c4ec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	370c      	adds	r7, #12
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr
 800c4ec:	200000e0 	.word	0x200000e0

0800c4f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	220a      	movs	r2, #10
 800c4fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c4fe:	4b03      	ldr	r3, [pc, #12]	; (800c50c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c500:	4618      	mov	r0, r3
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr
 800c50c:	20000014 	.word	0x20000014

0800c510 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d101      	bne.n	800c524 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c520:	2303      	movs	r3, #3
 800c522:	e004      	b.n	800c52e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	683a      	ldr	r2, [r7, #0]
 800c528:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c52c:	2300      	movs	r3, #0
}
 800c52e:	4618      	mov	r0, r3
 800c530:	370c      	adds	r7, #12
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr

0800c53a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c53a:	b480      	push	{r7}
 800c53c:	b087      	sub	sp, #28
 800c53e:	af00      	add	r7, sp, #0
 800c540:	60f8      	str	r0, [r7, #12]
 800c542:	60b9      	str	r1, [r7, #8]
 800c544:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c54c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	68ba      	ldr	r2, [r7, #8]
 800c552:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c55e:	2300      	movs	r3, #0
}
 800c560:	4618      	mov	r0, r3
 800c562:	371c      	adds	r7, #28
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b085      	sub	sp, #20
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c57c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	683a      	ldr	r2, [r7, #0]
 800c582:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c586:	2300      	movs	r3, #0
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3714      	adds	r7, #20
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c5a2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d101      	bne.n	800c5b6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	e01a      	b.n	800c5ec <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d114      	bne.n	800c5ea <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c5de:	2181      	movs	r1, #129	; 0x81
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f003 f802 	bl	800f5ea <USBD_LL_Transmit>

    ret = USBD_OK;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c5ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3710      	adds	r7, #16
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c602:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d101      	bne.n	800c612 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c60e:	2303      	movs	r3, #3
 800c610:	e016      	b.n	800c640 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	7c1b      	ldrb	r3, [r3, #16]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d109      	bne.n	800c62e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c620:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c624:	2101      	movs	r1, #1
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f003 f800 	bl	800f62c <USBD_LL_PrepareReceive>
 800c62c:	e007      	b.n	800c63e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c634:	2340      	movs	r3, #64	; 0x40
 800c636:	2101      	movs	r1, #1
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f002 fff7 	bl	800f62c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c63e:	2300      	movs	r3, #0
}
 800c640:	4618      	mov	r0, r3
 800c642:	3710      	adds	r7, #16
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b086      	sub	sp, #24
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	60b9      	str	r1, [r7, #8]
 800c652:	4613      	mov	r3, r2
 800c654:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d101      	bne.n	800c660 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c65c:	2303      	movs	r3, #3
 800c65e:	e025      	b.n	800c6ac <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c666:	2b00      	cmp	r3, #0
 800c668:	d003      	beq.n	800c672 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d003      	beq.n	800c684 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2200      	movs	r2, #0
 800c680:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d003      	beq.n	800c692 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	68ba      	ldr	r2, [r7, #8]
 800c68e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2201      	movs	r2, #1
 800c696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	79fa      	ldrb	r2, [r7, #7]
 800c69e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	f002 fe6d 	bl	800f380 <USBD_LL_Init>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c6aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3718      	adds	r7, #24
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d101      	bne.n	800c6cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c6c8:	2303      	movs	r3, #3
 800c6ca:	e010      	b.n	800c6ee <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	683a      	ldr	r2, [r7, #0]
 800c6d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6dc:	f107 020e 	add.w	r2, r7, #14
 800c6e0:	4610      	mov	r0, r2
 800c6e2:	4798      	blx	r3
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800c6ec:	2300      	movs	r3, #0
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3710      	adds	r7, #16
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c6f6:	b580      	push	{r7, lr}
 800c6f8:	b082      	sub	sp, #8
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f002 fe8a 	bl	800f418 <USBD_LL_Start>
 800c704:	4603      	mov	r3, r0
}
 800c706:	4618      	mov	r0, r3
 800c708:	3708      	adds	r7, #8
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}

0800c70e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c70e:	b480      	push	{r7}
 800c710:	b083      	sub	sp, #12
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c716:	2300      	movs	r3, #0
}
 800c718:	4618      	mov	r0, r3
 800c71a:	370c      	adds	r7, #12
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr

0800c724 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	460b      	mov	r3, r1
 800c72e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c730:	2303      	movs	r3, #3
 800c732:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d009      	beq.n	800c752 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	78fa      	ldrb	r2, [r7, #3]
 800c748:	4611      	mov	r1, r2
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	4798      	blx	r3
 800c74e:	4603      	mov	r3, r0
 800c750:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c752:	7bfb      	ldrb	r3, [r7, #15]
}
 800c754:	4618      	mov	r0, r3
 800c756:	3710      	adds	r7, #16
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	460b      	mov	r3, r1
 800c766:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d007      	beq.n	800c782 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	78fa      	ldrb	r2, [r7, #3]
 800c77c:	4611      	mov	r1, r2
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	4798      	blx	r3
  }

  return USBD_OK;
 800c782:	2300      	movs	r3, #0
}
 800c784:	4618      	mov	r0, r3
 800c786:	3708      	adds	r7, #8
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c79c:	6839      	ldr	r1, [r7, #0]
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f000 ff2c 	bl	800d5fc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c7c0:	f003 031f 	and.w	r3, r3, #31
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d00e      	beq.n	800c7e6 <USBD_LL_SetupStage+0x5a>
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d302      	bcc.n	800c7d2 <USBD_LL_SetupStage+0x46>
 800c7cc:	2b02      	cmp	r3, #2
 800c7ce:	d014      	beq.n	800c7fa <USBD_LL_SetupStage+0x6e>
 800c7d0:	e01d      	b.n	800c80e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c7d8:	4619      	mov	r1, r3
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 fa18 	bl	800cc10 <USBD_StdDevReq>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	73fb      	strb	r3, [r7, #15]
      break;
 800c7e4:	e020      	b.n	800c828 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 fa7c 	bl	800ccec <USBD_StdItfReq>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	73fb      	strb	r3, [r7, #15]
      break;
 800c7f8:	e016      	b.n	800c828 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c800:	4619      	mov	r1, r3
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 fab8 	bl	800cd78 <USBD_StdEPReq>
 800c808:	4603      	mov	r3, r0
 800c80a:	73fb      	strb	r3, [r7, #15]
      break;
 800c80c:	e00c      	b.n	800c828 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c814:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	4619      	mov	r1, r3
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f002 fe5b 	bl	800f4d8 <USBD_LL_StallEP>
 800c822:	4603      	mov	r3, r0
 800c824:	73fb      	strb	r3, [r7, #15]
      break;
 800c826:	bf00      	nop
  }

  return ret;
 800c828:	7bfb      	ldrb	r3, [r7, #15]
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b086      	sub	sp, #24
 800c836:	af00      	add	r7, sp, #0
 800c838:	60f8      	str	r0, [r7, #12]
 800c83a:	460b      	mov	r3, r1
 800c83c:	607a      	str	r2, [r7, #4]
 800c83e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c840:	7afb      	ldrb	r3, [r7, #11]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d137      	bne.n	800c8b6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c84c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c854:	2b03      	cmp	r3, #3
 800c856:	d14a      	bne.n	800c8ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	689a      	ldr	r2, [r3, #8]
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	68db      	ldr	r3, [r3, #12]
 800c860:	429a      	cmp	r2, r3
 800c862:	d913      	bls.n	800c88c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	689a      	ldr	r2, [r3, #8]
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	1ad2      	subs	r2, r2, r3
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	68da      	ldr	r2, [r3, #12]
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	689b      	ldr	r3, [r3, #8]
 800c87a:	4293      	cmp	r3, r2
 800c87c:	bf28      	it	cs
 800c87e:	4613      	movcs	r3, r2
 800c880:	461a      	mov	r2, r3
 800c882:	6879      	ldr	r1, [r7, #4]
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	f000 ffad 	bl	800d7e4 <USBD_CtlContinueRx>
 800c88a:	e030      	b.n	800c8ee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c892:	691b      	ldr	r3, [r3, #16]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d00a      	beq.n	800c8ae <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c89e:	2b03      	cmp	r3, #3
 800c8a0:	d105      	bne.n	800c8ae <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8a8:	691b      	ldr	r3, [r3, #16]
 800c8aa:	68f8      	ldr	r0, [r7, #12]
 800c8ac:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f000 ffa9 	bl	800d806 <USBD_CtlSendStatus>
 800c8b4:	e01b      	b.n	800c8ee <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8bc:	699b      	ldr	r3, [r3, #24]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d013      	beq.n	800c8ea <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c8c8:	2b03      	cmp	r3, #3
 800c8ca:	d10e      	bne.n	800c8ea <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8d2:	699b      	ldr	r3, [r3, #24]
 800c8d4:	7afa      	ldrb	r2, [r7, #11]
 800c8d6:	4611      	mov	r1, r2
 800c8d8:	68f8      	ldr	r0, [r7, #12]
 800c8da:	4798      	blx	r3
 800c8dc:	4603      	mov	r3, r0
 800c8de:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c8e0:	7dfb      	ldrb	r3, [r7, #23]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d003      	beq.n	800c8ee <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800c8e6:	7dfb      	ldrb	r3, [r7, #23]
 800c8e8:	e002      	b.n	800c8f0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c8ea:	2303      	movs	r3, #3
 800c8ec:	e000      	b.n	800c8f0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800c8ee:	2300      	movs	r3, #0
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3718      	adds	r7, #24
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b086      	sub	sp, #24
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	460b      	mov	r3, r1
 800c902:	607a      	str	r2, [r7, #4]
 800c904:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c906:	7afb      	ldrb	r3, [r7, #11]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d16a      	bne.n	800c9e2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	3314      	adds	r3, #20
 800c910:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c918:	2b02      	cmp	r3, #2
 800c91a:	d155      	bne.n	800c9c8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	689a      	ldr	r2, [r3, #8]
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	68db      	ldr	r3, [r3, #12]
 800c924:	429a      	cmp	r2, r3
 800c926:	d914      	bls.n	800c952 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	689a      	ldr	r2, [r3, #8]
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	68db      	ldr	r3, [r3, #12]
 800c930:	1ad2      	subs	r2, r2, r3
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	461a      	mov	r2, r3
 800c93c:	6879      	ldr	r1, [r7, #4]
 800c93e:	68f8      	ldr	r0, [r7, #12]
 800c940:	f000 ff22 	bl	800d788 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c944:	2300      	movs	r3, #0
 800c946:	2200      	movs	r2, #0
 800c948:	2100      	movs	r1, #0
 800c94a:	68f8      	ldr	r0, [r7, #12]
 800c94c:	f002 fe6e 	bl	800f62c <USBD_LL_PrepareReceive>
 800c950:	e03a      	b.n	800c9c8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	68da      	ldr	r2, [r3, #12]
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	689b      	ldr	r3, [r3, #8]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d11c      	bne.n	800c998 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	685a      	ldr	r2, [r3, #4]
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c966:	429a      	cmp	r2, r3
 800c968:	d316      	bcc.n	800c998 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	685a      	ldr	r2, [r3, #4]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c974:	429a      	cmp	r2, r3
 800c976:	d20f      	bcs.n	800c998 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c978:	2200      	movs	r2, #0
 800c97a:	2100      	movs	r1, #0
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f000 ff03 	bl	800d788 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2200      	movs	r2, #0
 800c986:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c98a:	2300      	movs	r3, #0
 800c98c:	2200      	movs	r2, #0
 800c98e:	2100      	movs	r1, #0
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	f002 fe4b 	bl	800f62c <USBD_LL_PrepareReceive>
 800c996:	e017      	b.n	800c9c8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c99e:	68db      	ldr	r3, [r3, #12]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d00a      	beq.n	800c9ba <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c9aa:	2b03      	cmp	r3, #3
 800c9ac:	d105      	bne.n	800c9ba <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	68f8      	ldr	r0, [r7, #12]
 800c9b8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9ba:	2180      	movs	r1, #128	; 0x80
 800c9bc:	68f8      	ldr	r0, [r7, #12]
 800c9be:	f002 fd8b 	bl	800f4d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f000 ff32 	bl	800d82c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d123      	bne.n	800ca1a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c9d2:	68f8      	ldr	r0, [r7, #12]
 800c9d4:	f7ff fe9b 	bl	800c70e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c9e0:	e01b      	b.n	800ca1a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9e8:	695b      	ldr	r3, [r3, #20]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d013      	beq.n	800ca16 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c9f4:	2b03      	cmp	r3, #3
 800c9f6:	d10e      	bne.n	800ca16 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9fe:	695b      	ldr	r3, [r3, #20]
 800ca00:	7afa      	ldrb	r2, [r7, #11]
 800ca02:	4611      	mov	r1, r2
 800ca04:	68f8      	ldr	r0, [r7, #12]
 800ca06:	4798      	blx	r3
 800ca08:	4603      	mov	r3, r0
 800ca0a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ca0c:	7dfb      	ldrb	r3, [r7, #23]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d003      	beq.n	800ca1a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
 800ca14:	e002      	b.n	800ca1c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ca16:	2303      	movs	r3, #3
 800ca18:	e000      	b.n	800ca1c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800ca1a:	2300      	movs	r3, #0
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3718      	adds	r7, #24
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2200      	movs	r2, #0
 800ca38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d009      	beq.n	800ca68 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	6852      	ldr	r2, [r2, #4]
 800ca60:	b2d2      	uxtb	r2, r2
 800ca62:	4611      	mov	r1, r2
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ca68:	2340      	movs	r3, #64	; 0x40
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f002 fced 	bl	800f44e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2201      	movs	r2, #1
 800ca78:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2240      	movs	r2, #64	; 0x40
 800ca80:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ca84:	2340      	movs	r3, #64	; 0x40
 800ca86:	2200      	movs	r2, #0
 800ca88:	2180      	movs	r1, #128	; 0x80
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f002 fcdf 	bl	800f44e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2201      	movs	r2, #1
 800ca94:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2240      	movs	r2, #64	; 0x40
 800ca9a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ca9c:	2300      	movs	r3, #0
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3708      	adds	r7, #8
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800caa6:	b480      	push	{r7}
 800caa8:	b083      	sub	sp, #12
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
 800caae:	460b      	mov	r3, r1
 800cab0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	78fa      	ldrb	r2, [r7, #3]
 800cab6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	370c      	adds	r7, #12
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr

0800cac6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cac6:	b480      	push	{r7}
 800cac8:	b083      	sub	sp, #12
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2204      	movs	r2, #4
 800cade:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cae2:	2300      	movs	r3, #0
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	370c      	adds	r7, #12
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr

0800caf0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cafe:	2b04      	cmp	r3, #4
 800cb00:	d105      	bne.n	800cb0e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cb0e:	2300      	movs	r3, #0
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr

0800cb1c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb2a:	2b03      	cmp	r3, #3
 800cb2c:	d10b      	bne.n	800cb46 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb34:	69db      	ldr	r3, [r3, #28]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d005      	beq.n	800cb46 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb40:	69db      	ldr	r3, [r3, #28]
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cb46:	2300      	movs	r3, #0
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b083      	sub	sp, #12
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	460b      	mov	r3, r1
 800cb5a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800cb5c:	2300      	movs	r3, #0
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	370c      	adds	r7, #12
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr

0800cb6a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cb6a:	b480      	push	{r7}
 800cb6c:	b083      	sub	sp, #12
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
 800cb72:	460b      	mov	r3, r1
 800cb74:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	370c      	adds	r7, #12
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr

0800cb84 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	370c      	adds	r7, #12
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr

0800cb9a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cb9a:	b580      	push	{r7, lr}
 800cb9c:	b082      	sub	sp, #8
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2201      	movs	r2, #1
 800cba6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d009      	beq.n	800cbc8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	6852      	ldr	r2, [r2, #4]
 800cbc0:	b2d2      	uxtb	r2, r2
 800cbc2:	4611      	mov	r1, r2
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	4798      	blx	r3
  }

  return USBD_OK;
 800cbc8:	2300      	movs	r3, #0
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3708      	adds	r7, #8
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}

0800cbd2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cbd2:	b480      	push	{r7}
 800cbd4:	b087      	sub	sp, #28
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cbf0:	8a3b      	ldrh	r3, [r7, #16]
 800cbf2:	021b      	lsls	r3, r3, #8
 800cbf4:	b21a      	sxth	r2, r3
 800cbf6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	b21b      	sxth	r3, r3
 800cbfe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cc00:	89fb      	ldrh	r3, [r7, #14]
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	371c      	adds	r7, #28
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr
	...

0800cc10 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cc26:	2b20      	cmp	r3, #32
 800cc28:	d004      	beq.n	800cc34 <USBD_StdDevReq+0x24>
 800cc2a:	2b40      	cmp	r3, #64	; 0x40
 800cc2c:	d002      	beq.n	800cc34 <USBD_StdDevReq+0x24>
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d00a      	beq.n	800cc48 <USBD_StdDevReq+0x38>
 800cc32:	e050      	b.n	800ccd6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	6839      	ldr	r1, [r7, #0]
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	4798      	blx	r3
 800cc42:	4603      	mov	r3, r0
 800cc44:	73fb      	strb	r3, [r7, #15]
    break;
 800cc46:	e04b      	b.n	800cce0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	785b      	ldrb	r3, [r3, #1]
 800cc4c:	2b09      	cmp	r3, #9
 800cc4e:	d83c      	bhi.n	800ccca <USBD_StdDevReq+0xba>
 800cc50:	a201      	add	r2, pc, #4	; (adr r2, 800cc58 <USBD_StdDevReq+0x48>)
 800cc52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc56:	bf00      	nop
 800cc58:	0800ccad 	.word	0x0800ccad
 800cc5c:	0800ccc1 	.word	0x0800ccc1
 800cc60:	0800cccb 	.word	0x0800cccb
 800cc64:	0800ccb7 	.word	0x0800ccb7
 800cc68:	0800cccb 	.word	0x0800cccb
 800cc6c:	0800cc8b 	.word	0x0800cc8b
 800cc70:	0800cc81 	.word	0x0800cc81
 800cc74:	0800cccb 	.word	0x0800cccb
 800cc78:	0800cca3 	.word	0x0800cca3
 800cc7c:	0800cc95 	.word	0x0800cc95
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800cc80:	6839      	ldr	r1, [r7, #0]
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 f9ce 	bl	800d024 <USBD_GetDescriptor>
      break;
 800cc88:	e024      	b.n	800ccd4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800cc8a:	6839      	ldr	r1, [r7, #0]
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 fb33 	bl	800d2f8 <USBD_SetAddress>
      break;
 800cc92:	e01f      	b.n	800ccd4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800cc94:	6839      	ldr	r1, [r7, #0]
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f000 fb70 	bl	800d37c <USBD_SetConfig>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	73fb      	strb	r3, [r7, #15]
      break;
 800cca0:	e018      	b.n	800ccd4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800cca2:	6839      	ldr	r1, [r7, #0]
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f000 fc0d 	bl	800d4c4 <USBD_GetConfig>
      break;
 800ccaa:	e013      	b.n	800ccd4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ccac:	6839      	ldr	r1, [r7, #0]
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 fc3c 	bl	800d52c <USBD_GetStatus>
      break;
 800ccb4:	e00e      	b.n	800ccd4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ccb6:	6839      	ldr	r1, [r7, #0]
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f000 fc6a 	bl	800d592 <USBD_SetFeature>
      break;
 800ccbe:	e009      	b.n	800ccd4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ccc0:	6839      	ldr	r1, [r7, #0]
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f000 fc79 	bl	800d5ba <USBD_ClrFeature>
      break;
 800ccc8:	e004      	b.n	800ccd4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ccca:	6839      	ldr	r1, [r7, #0]
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f000 fccf 	bl	800d670 <USBD_CtlError>
      break;
 800ccd2:	bf00      	nop
    }
    break;
 800ccd4:	e004      	b.n	800cce0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ccd6:	6839      	ldr	r1, [r7, #0]
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 fcc9 	bl	800d670 <USBD_CtlError>
    break;
 800ccde:	bf00      	nop
  }

  return ret;
 800cce0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3710      	adds	r7, #16
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}
 800ccea:	bf00      	nop

0800ccec <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd02:	2b20      	cmp	r3, #32
 800cd04:	d003      	beq.n	800cd0e <USBD_StdItfReq+0x22>
 800cd06:	2b40      	cmp	r3, #64	; 0x40
 800cd08:	d001      	beq.n	800cd0e <USBD_StdItfReq+0x22>
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d12a      	bne.n	800cd64 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd14:	3b01      	subs	r3, #1
 800cd16:	2b02      	cmp	r3, #2
 800cd18:	d81d      	bhi.n	800cd56 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	889b      	ldrh	r3, [r3, #4]
 800cd1e:	b2db      	uxtb	r3, r3
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d813      	bhi.n	800cd4c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd2a:	689b      	ldr	r3, [r3, #8]
 800cd2c:	6839      	ldr	r1, [r7, #0]
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	4798      	blx	r3
 800cd32:	4603      	mov	r3, r0
 800cd34:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	88db      	ldrh	r3, [r3, #6]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d110      	bne.n	800cd60 <USBD_StdItfReq+0x74>
 800cd3e:	7bfb      	ldrb	r3, [r7, #15]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d10d      	bne.n	800cd60 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f000 fd5e 	bl	800d806 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800cd4a:	e009      	b.n	800cd60 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800cd4c:	6839      	ldr	r1, [r7, #0]
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 fc8e 	bl	800d670 <USBD_CtlError>
      break;
 800cd54:	e004      	b.n	800cd60 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800cd56:	6839      	ldr	r1, [r7, #0]
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f000 fc89 	bl	800d670 <USBD_CtlError>
      break;
 800cd5e:	e000      	b.n	800cd62 <USBD_StdItfReq+0x76>
      break;
 800cd60:	bf00      	nop
    }
    break;
 800cd62:	e004      	b.n	800cd6e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800cd64:	6839      	ldr	r1, [r7, #0]
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 fc82 	bl	800d670 <USBD_CtlError>
    break;
 800cd6c:	bf00      	nop
  }

  return ret;
 800cd6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3710      	adds	r7, #16
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cd82:	2300      	movs	r3, #0
 800cd84:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	889b      	ldrh	r3, [r3, #4]
 800cd8a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd94:	2b20      	cmp	r3, #32
 800cd96:	d004      	beq.n	800cda2 <USBD_StdEPReq+0x2a>
 800cd98:	2b40      	cmp	r3, #64	; 0x40
 800cd9a:	d002      	beq.n	800cda2 <USBD_StdEPReq+0x2a>
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d00a      	beq.n	800cdb6 <USBD_StdEPReq+0x3e>
 800cda0:	e135      	b.n	800d00e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cda8:	689b      	ldr	r3, [r3, #8]
 800cdaa:	6839      	ldr	r1, [r7, #0]
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	4798      	blx	r3
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	73fb      	strb	r3, [r7, #15]
    break;
 800cdb4:	e130      	b.n	800d018 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	785b      	ldrb	r3, [r3, #1]
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d03e      	beq.n	800ce3c <USBD_StdEPReq+0xc4>
 800cdbe:	2b03      	cmp	r3, #3
 800cdc0:	d002      	beq.n	800cdc8 <USBD_StdEPReq+0x50>
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d077      	beq.n	800ceb6 <USBD_StdEPReq+0x13e>
 800cdc6:	e11c      	b.n	800d002 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdce:	2b02      	cmp	r3, #2
 800cdd0:	d002      	beq.n	800cdd8 <USBD_StdEPReq+0x60>
 800cdd2:	2b03      	cmp	r3, #3
 800cdd4:	d015      	beq.n	800ce02 <USBD_StdEPReq+0x8a>
 800cdd6:	e02b      	b.n	800ce30 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cdd8:	7bbb      	ldrb	r3, [r7, #14]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d00c      	beq.n	800cdf8 <USBD_StdEPReq+0x80>
 800cdde:	7bbb      	ldrb	r3, [r7, #14]
 800cde0:	2b80      	cmp	r3, #128	; 0x80
 800cde2:	d009      	beq.n	800cdf8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800cde4:	7bbb      	ldrb	r3, [r7, #14]
 800cde6:	4619      	mov	r1, r3
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f002 fb75 	bl	800f4d8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdee:	2180      	movs	r1, #128	; 0x80
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f002 fb71 	bl	800f4d8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800cdf6:	e020      	b.n	800ce3a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800cdf8:	6839      	ldr	r1, [r7, #0]
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 fc38 	bl	800d670 <USBD_CtlError>
        break;
 800ce00:	e01b      	b.n	800ce3a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	885b      	ldrh	r3, [r3, #2]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d10e      	bne.n	800ce28 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ce0a:	7bbb      	ldrb	r3, [r7, #14]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00b      	beq.n	800ce28 <USBD_StdEPReq+0xb0>
 800ce10:	7bbb      	ldrb	r3, [r7, #14]
 800ce12:	2b80      	cmp	r3, #128	; 0x80
 800ce14:	d008      	beq.n	800ce28 <USBD_StdEPReq+0xb0>
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	88db      	ldrh	r3, [r3, #6]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d104      	bne.n	800ce28 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce1e:	7bbb      	ldrb	r3, [r7, #14]
 800ce20:	4619      	mov	r1, r3
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f002 fb58 	bl	800f4d8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f000 fcec 	bl	800d806 <USBD_CtlSendStatus>

        break;
 800ce2e:	e004      	b.n	800ce3a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800ce30:	6839      	ldr	r1, [r7, #0]
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f000 fc1c 	bl	800d670 <USBD_CtlError>
        break;
 800ce38:	bf00      	nop
      }
      break;
 800ce3a:	e0e7      	b.n	800d00c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce42:	2b02      	cmp	r3, #2
 800ce44:	d002      	beq.n	800ce4c <USBD_StdEPReq+0xd4>
 800ce46:	2b03      	cmp	r3, #3
 800ce48:	d015      	beq.n	800ce76 <USBD_StdEPReq+0xfe>
 800ce4a:	e02d      	b.n	800cea8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce4c:	7bbb      	ldrb	r3, [r7, #14]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d00c      	beq.n	800ce6c <USBD_StdEPReq+0xf4>
 800ce52:	7bbb      	ldrb	r3, [r7, #14]
 800ce54:	2b80      	cmp	r3, #128	; 0x80
 800ce56:	d009      	beq.n	800ce6c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce58:	7bbb      	ldrb	r3, [r7, #14]
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f002 fb3b 	bl	800f4d8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce62:	2180      	movs	r1, #128	; 0x80
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f002 fb37 	bl	800f4d8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ce6a:	e023      	b.n	800ceb4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800ce6c:	6839      	ldr	r1, [r7, #0]
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 fbfe 	bl	800d670 <USBD_CtlError>
        break;
 800ce74:	e01e      	b.n	800ceb4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	885b      	ldrh	r3, [r3, #2]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d119      	bne.n	800ceb2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ce7e:	7bbb      	ldrb	r3, [r7, #14]
 800ce80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d004      	beq.n	800ce92 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ce88:	7bbb      	ldrb	r3, [r7, #14]
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f002 fb42 	bl	800f516 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 fcb7 	bl	800d806 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce9e:	689b      	ldr	r3, [r3, #8]
 800cea0:	6839      	ldr	r1, [r7, #0]
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	4798      	blx	r3
        }
        break;
 800cea6:	e004      	b.n	800ceb2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800cea8:	6839      	ldr	r1, [r7, #0]
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 fbe0 	bl	800d670 <USBD_CtlError>
        break;
 800ceb0:	e000      	b.n	800ceb4 <USBD_StdEPReq+0x13c>
        break;
 800ceb2:	bf00      	nop
      }
      break;
 800ceb4:	e0aa      	b.n	800d00c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cebc:	2b02      	cmp	r3, #2
 800cebe:	d002      	beq.n	800cec6 <USBD_StdEPReq+0x14e>
 800cec0:	2b03      	cmp	r3, #3
 800cec2:	d032      	beq.n	800cf2a <USBD_StdEPReq+0x1b2>
 800cec4:	e097      	b.n	800cff6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cec6:	7bbb      	ldrb	r3, [r7, #14]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d007      	beq.n	800cedc <USBD_StdEPReq+0x164>
 800cecc:	7bbb      	ldrb	r3, [r7, #14]
 800cece:	2b80      	cmp	r3, #128	; 0x80
 800ced0:	d004      	beq.n	800cedc <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800ced2:	6839      	ldr	r1, [r7, #0]
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 fbcb 	bl	800d670 <USBD_CtlError>
          break;
 800ceda:	e091      	b.n	800d000 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cedc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	da0b      	bge.n	800cefc <USBD_StdEPReq+0x184>
 800cee4:	7bbb      	ldrb	r3, [r7, #14]
 800cee6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ceea:	4613      	mov	r3, r2
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	4413      	add	r3, r2
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	3310      	adds	r3, #16
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	4413      	add	r3, r2
 800cef8:	3304      	adds	r3, #4
 800cefa:	e00b      	b.n	800cf14 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800cefc:	7bbb      	ldrb	r3, [r7, #14]
 800cefe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf02:	4613      	mov	r3, r2
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4413      	add	r3, r2
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cf0e:	687a      	ldr	r2, [r7, #4]
 800cf10:	4413      	add	r3, r2
 800cf12:	3304      	adds	r3, #4
 800cf14:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	2202      	movs	r2, #2
 800cf20:	4619      	mov	r1, r3
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 fc15 	bl	800d752 <USBD_CtlSendData>
        break;
 800cf28:	e06a      	b.n	800d000 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800cf2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	da11      	bge.n	800cf56 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cf32:	7bbb      	ldrb	r3, [r7, #14]
 800cf34:	f003 020f 	and.w	r2, r3, #15
 800cf38:	6879      	ldr	r1, [r7, #4]
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	4413      	add	r3, r2
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	440b      	add	r3, r1
 800cf44:	3324      	adds	r3, #36	; 0x24
 800cf46:	881b      	ldrh	r3, [r3, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d117      	bne.n	800cf7c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800cf4c:	6839      	ldr	r1, [r7, #0]
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f000 fb8e 	bl	800d670 <USBD_CtlError>
            break;
 800cf54:	e054      	b.n	800d000 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cf56:	7bbb      	ldrb	r3, [r7, #14]
 800cf58:	f003 020f 	and.w	r2, r3, #15
 800cf5c:	6879      	ldr	r1, [r7, #4]
 800cf5e:	4613      	mov	r3, r2
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	4413      	add	r3, r2
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	440b      	add	r3, r1
 800cf68:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cf6c:	881b      	ldrh	r3, [r3, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d104      	bne.n	800cf7c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800cf72:	6839      	ldr	r1, [r7, #0]
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f000 fb7b 	bl	800d670 <USBD_CtlError>
            break;
 800cf7a:	e041      	b.n	800d000 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	da0b      	bge.n	800cf9c <USBD_StdEPReq+0x224>
 800cf84:	7bbb      	ldrb	r3, [r7, #14]
 800cf86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf8a:	4613      	mov	r3, r2
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	4413      	add	r3, r2
 800cf90:	009b      	lsls	r3, r3, #2
 800cf92:	3310      	adds	r3, #16
 800cf94:	687a      	ldr	r2, [r7, #4]
 800cf96:	4413      	add	r3, r2
 800cf98:	3304      	adds	r3, #4
 800cf9a:	e00b      	b.n	800cfb4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800cf9c:	7bbb      	ldrb	r3, [r7, #14]
 800cf9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cfa2:	4613      	mov	r3, r2
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	4413      	add	r3, r2
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	3304      	adds	r3, #4
 800cfb4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cfb6:	7bbb      	ldrb	r3, [r7, #14]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d002      	beq.n	800cfc2 <USBD_StdEPReq+0x24a>
 800cfbc:	7bbb      	ldrb	r3, [r7, #14]
 800cfbe:	2b80      	cmp	r3, #128	; 0x80
 800cfc0:	d103      	bne.n	800cfca <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	601a      	str	r2, [r3, #0]
 800cfc8:	e00e      	b.n	800cfe8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cfca:	7bbb      	ldrb	r3, [r7, #14]
 800cfcc:	4619      	mov	r1, r3
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f002 fac0 	bl	800f554 <USBD_LL_IsStallEP>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d003      	beq.n	800cfe2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	2201      	movs	r2, #1
 800cfde:	601a      	str	r2, [r3, #0]
 800cfe0:	e002      	b.n	800cfe8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	2202      	movs	r2, #2
 800cfec:	4619      	mov	r1, r3
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f000 fbaf 	bl	800d752 <USBD_CtlSendData>
          break;
 800cff4:	e004      	b.n	800d000 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800cff6:	6839      	ldr	r1, [r7, #0]
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 fb39 	bl	800d670 <USBD_CtlError>
        break;
 800cffe:	bf00      	nop
      }
      break;
 800d000:	e004      	b.n	800d00c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800d002:	6839      	ldr	r1, [r7, #0]
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f000 fb33 	bl	800d670 <USBD_CtlError>
      break;
 800d00a:	bf00      	nop
    }
    break;
 800d00c:	e004      	b.n	800d018 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800d00e:	6839      	ldr	r1, [r7, #0]
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 fb2d 	bl	800d670 <USBD_CtlError>
    break;
 800d016:	bf00      	nop
  }

  return ret;
 800d018:	7bfb      	ldrb	r3, [r7, #15]
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
	...

0800d024 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d02e:	2300      	movs	r3, #0
 800d030:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d032:	2300      	movs	r3, #0
 800d034:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d036:	2300      	movs	r3, #0
 800d038:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	885b      	ldrh	r3, [r3, #2]
 800d03e:	0a1b      	lsrs	r3, r3, #8
 800d040:	b29b      	uxth	r3, r3
 800d042:	3b01      	subs	r3, #1
 800d044:	2b06      	cmp	r3, #6
 800d046:	f200 8128 	bhi.w	800d29a <USBD_GetDescriptor+0x276>
 800d04a:	a201      	add	r2, pc, #4	; (adr r2, 800d050 <USBD_GetDescriptor+0x2c>)
 800d04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d050:	0800d06d 	.word	0x0800d06d
 800d054:	0800d085 	.word	0x0800d085
 800d058:	0800d0c5 	.word	0x0800d0c5
 800d05c:	0800d29b 	.word	0x0800d29b
 800d060:	0800d29b 	.word	0x0800d29b
 800d064:	0800d23b 	.word	0x0800d23b
 800d068:	0800d267 	.word	0x0800d267
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	7c12      	ldrb	r2, [r2, #16]
 800d078:	f107 0108 	add.w	r1, r7, #8
 800d07c:	4610      	mov	r0, r2
 800d07e:	4798      	blx	r3
 800d080:	60f8      	str	r0, [r7, #12]
    break;
 800d082:	e112      	b.n	800d2aa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	7c1b      	ldrb	r3, [r3, #16]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d10d      	bne.n	800d0a8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d094:	f107 0208 	add.w	r2, r7, #8
 800d098:	4610      	mov	r0, r2
 800d09a:	4798      	blx	r3
 800d09c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	2202      	movs	r2, #2
 800d0a4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800d0a6:	e100      	b.n	800d2aa <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b0:	f107 0208 	add.w	r2, r7, #8
 800d0b4:	4610      	mov	r0, r2
 800d0b6:	4798      	blx	r3
 800d0b8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	3301      	adds	r3, #1
 800d0be:	2202      	movs	r2, #2
 800d0c0:	701a      	strb	r2, [r3, #0]
    break;
 800d0c2:	e0f2      	b.n	800d2aa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	885b      	ldrh	r3, [r3, #2]
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	2b05      	cmp	r3, #5
 800d0cc:	f200 80ac 	bhi.w	800d228 <USBD_GetDescriptor+0x204>
 800d0d0:	a201      	add	r2, pc, #4	; (adr r2, 800d0d8 <USBD_GetDescriptor+0xb4>)
 800d0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0d6:	bf00      	nop
 800d0d8:	0800d0f1 	.word	0x0800d0f1
 800d0dc:	0800d125 	.word	0x0800d125
 800d0e0:	0800d159 	.word	0x0800d159
 800d0e4:	0800d18d 	.word	0x0800d18d
 800d0e8:	0800d1c1 	.word	0x0800d1c1
 800d0ec:	0800d1f5 	.word	0x0800d1f5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d00b      	beq.n	800d114 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	7c12      	ldrb	r2, [r2, #16]
 800d108:	f107 0108 	add.w	r1, r7, #8
 800d10c:	4610      	mov	r0, r2
 800d10e:	4798      	blx	r3
 800d110:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d112:	e091      	b.n	800d238 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d114:	6839      	ldr	r1, [r7, #0]
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f000 faaa 	bl	800d670 <USBD_CtlError>
        err++;
 800d11c:	7afb      	ldrb	r3, [r7, #11]
 800d11e:	3301      	adds	r3, #1
 800d120:	72fb      	strb	r3, [r7, #11]
      break;
 800d122:	e089      	b.n	800d238 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00b      	beq.n	800d148 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d136:	689b      	ldr	r3, [r3, #8]
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	7c12      	ldrb	r2, [r2, #16]
 800d13c:	f107 0108 	add.w	r1, r7, #8
 800d140:	4610      	mov	r0, r2
 800d142:	4798      	blx	r3
 800d144:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d146:	e077      	b.n	800d238 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d148:	6839      	ldr	r1, [r7, #0]
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 fa90 	bl	800d670 <USBD_CtlError>
        err++;
 800d150:	7afb      	ldrb	r3, [r7, #11]
 800d152:	3301      	adds	r3, #1
 800d154:	72fb      	strb	r3, [r7, #11]
      break;
 800d156:	e06f      	b.n	800d238 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d15e:	68db      	ldr	r3, [r3, #12]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d00b      	beq.n	800d17c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d16a:	68db      	ldr	r3, [r3, #12]
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	7c12      	ldrb	r2, [r2, #16]
 800d170:	f107 0108 	add.w	r1, r7, #8
 800d174:	4610      	mov	r0, r2
 800d176:	4798      	blx	r3
 800d178:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d17a:	e05d      	b.n	800d238 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d17c:	6839      	ldr	r1, [r7, #0]
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 fa76 	bl	800d670 <USBD_CtlError>
        err++;
 800d184:	7afb      	ldrb	r3, [r7, #11]
 800d186:	3301      	adds	r3, #1
 800d188:	72fb      	strb	r3, [r7, #11]
      break;
 800d18a:	e055      	b.n	800d238 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d192:	691b      	ldr	r3, [r3, #16]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d00b      	beq.n	800d1b0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d19e:	691b      	ldr	r3, [r3, #16]
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	7c12      	ldrb	r2, [r2, #16]
 800d1a4:	f107 0108 	add.w	r1, r7, #8
 800d1a8:	4610      	mov	r0, r2
 800d1aa:	4798      	blx	r3
 800d1ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d1ae:	e043      	b.n	800d238 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d1b0:	6839      	ldr	r1, [r7, #0]
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 fa5c 	bl	800d670 <USBD_CtlError>
        err++;
 800d1b8:	7afb      	ldrb	r3, [r7, #11]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	72fb      	strb	r3, [r7, #11]
      break;
 800d1be:	e03b      	b.n	800d238 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1c6:	695b      	ldr	r3, [r3, #20]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d00b      	beq.n	800d1e4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1d2:	695b      	ldr	r3, [r3, #20]
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	7c12      	ldrb	r2, [r2, #16]
 800d1d8:	f107 0108 	add.w	r1, r7, #8
 800d1dc:	4610      	mov	r0, r2
 800d1de:	4798      	blx	r3
 800d1e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d1e2:	e029      	b.n	800d238 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d1e4:	6839      	ldr	r1, [r7, #0]
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 fa42 	bl	800d670 <USBD_CtlError>
        err++;
 800d1ec:	7afb      	ldrb	r3, [r7, #11]
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	72fb      	strb	r3, [r7, #11]
      break;
 800d1f2:	e021      	b.n	800d238 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1fa:	699b      	ldr	r3, [r3, #24]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d00b      	beq.n	800d218 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d206:	699b      	ldr	r3, [r3, #24]
 800d208:	687a      	ldr	r2, [r7, #4]
 800d20a:	7c12      	ldrb	r2, [r2, #16]
 800d20c:	f107 0108 	add.w	r1, r7, #8
 800d210:	4610      	mov	r0, r2
 800d212:	4798      	blx	r3
 800d214:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d216:	e00f      	b.n	800d238 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d218:	6839      	ldr	r1, [r7, #0]
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 fa28 	bl	800d670 <USBD_CtlError>
        err++;
 800d220:	7afb      	ldrb	r3, [r7, #11]
 800d222:	3301      	adds	r3, #1
 800d224:	72fb      	strb	r3, [r7, #11]
      break;
 800d226:	e007      	b.n	800d238 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800d228:	6839      	ldr	r1, [r7, #0]
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 fa20 	bl	800d670 <USBD_CtlError>
      err++;
 800d230:	7afb      	ldrb	r3, [r7, #11]
 800d232:	3301      	adds	r3, #1
 800d234:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800d236:	bf00      	nop
    }
    break;
 800d238:	e037      	b.n	800d2aa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	7c1b      	ldrb	r3, [r3, #16]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d109      	bne.n	800d256 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d24a:	f107 0208 	add.w	r2, r7, #8
 800d24e:	4610      	mov	r0, r2
 800d250:	4798      	blx	r3
 800d252:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800d254:	e029      	b.n	800d2aa <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800d256:	6839      	ldr	r1, [r7, #0]
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 fa09 	bl	800d670 <USBD_CtlError>
      err++;
 800d25e:	7afb      	ldrb	r3, [r7, #11]
 800d260:	3301      	adds	r3, #1
 800d262:	72fb      	strb	r3, [r7, #11]
    break;
 800d264:	e021      	b.n	800d2aa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	7c1b      	ldrb	r3, [r3, #16]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d10d      	bne.n	800d28a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d276:	f107 0208 	add.w	r2, r7, #8
 800d27a:	4610      	mov	r0, r2
 800d27c:	4798      	blx	r3
 800d27e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	3301      	adds	r3, #1
 800d284:	2207      	movs	r2, #7
 800d286:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800d288:	e00f      	b.n	800d2aa <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800d28a:	6839      	ldr	r1, [r7, #0]
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 f9ef 	bl	800d670 <USBD_CtlError>
      err++;
 800d292:	7afb      	ldrb	r3, [r7, #11]
 800d294:	3301      	adds	r3, #1
 800d296:	72fb      	strb	r3, [r7, #11]
    break;
 800d298:	e007      	b.n	800d2aa <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800d29a:	6839      	ldr	r1, [r7, #0]
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 f9e7 	bl	800d670 <USBD_CtlError>
    err++;
 800d2a2:	7afb      	ldrb	r3, [r7, #11]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	72fb      	strb	r3, [r7, #11]
    break;
 800d2a8:	bf00      	nop
  }

  if (err != 0U)
 800d2aa:	7afb      	ldrb	r3, [r7, #11]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d11e      	bne.n	800d2ee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	88db      	ldrh	r3, [r3, #6]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d016      	beq.n	800d2e6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800d2b8:	893b      	ldrh	r3, [r7, #8]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d00e      	beq.n	800d2dc <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	88da      	ldrh	r2, [r3, #6]
 800d2c2:	893b      	ldrh	r3, [r7, #8]
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	bf28      	it	cs
 800d2c8:	4613      	movcs	r3, r2
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800d2ce:	893b      	ldrh	r3, [r7, #8]
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	68f9      	ldr	r1, [r7, #12]
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f000 fa3c 	bl	800d752 <USBD_CtlSendData>
 800d2da:	e009      	b.n	800d2f0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800d2dc:	6839      	ldr	r1, [r7, #0]
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f000 f9c6 	bl	800d670 <USBD_CtlError>
 800d2e4:	e004      	b.n	800d2f0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 fa8d 	bl	800d806 <USBD_CtlSendStatus>
 800d2ec:	e000      	b.n	800d2f0 <USBD_GetDescriptor+0x2cc>
    return;
 800d2ee:	bf00      	nop
    }
  }
}
 800d2f0:	3710      	adds	r7, #16
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop

0800d2f8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	889b      	ldrh	r3, [r3, #4]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d130      	bne.n	800d36c <USBD_SetAddress+0x74>
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	88db      	ldrh	r3, [r3, #6]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d12c      	bne.n	800d36c <USBD_SetAddress+0x74>
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	885b      	ldrh	r3, [r3, #2]
 800d316:	2b7f      	cmp	r3, #127	; 0x7f
 800d318:	d828      	bhi.n	800d36c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	885b      	ldrh	r3, [r3, #2]
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d324:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d32c:	2b03      	cmp	r3, #3
 800d32e:	d104      	bne.n	800d33a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800d330:	6839      	ldr	r1, [r7, #0]
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 f99c 	bl	800d670 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d338:	e01c      	b.n	800d374 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	7bfa      	ldrb	r2, [r7, #15]
 800d33e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d342:	7bfb      	ldrb	r3, [r7, #15]
 800d344:	4619      	mov	r1, r3
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f002 f930 	bl	800f5ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 fa5a 	bl	800d806 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d352:	7bfb      	ldrb	r3, [r7, #15]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d004      	beq.n	800d362 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2202      	movs	r2, #2
 800d35c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d360:	e008      	b.n	800d374 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2201      	movs	r2, #1
 800d366:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d36a:	e003      	b.n	800d374 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d36c:	6839      	ldr	r1, [r7, #0]
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 f97e 	bl	800d670 <USBD_CtlError>
  }
}
 800d374:	bf00      	nop
 800d376:	3710      	adds	r7, #16
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d386:	2300      	movs	r3, #0
 800d388:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	885b      	ldrh	r3, [r3, #2]
 800d38e:	b2da      	uxtb	r2, r3
 800d390:	4b4b      	ldr	r3, [pc, #300]	; (800d4c0 <USBD_SetConfig+0x144>)
 800d392:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d394:	4b4a      	ldr	r3, [pc, #296]	; (800d4c0 <USBD_SetConfig+0x144>)
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d905      	bls.n	800d3a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d39c:	6839      	ldr	r1, [r7, #0]
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 f966 	bl	800d670 <USBD_CtlError>
    return USBD_FAIL;
 800d3a4:	2303      	movs	r3, #3
 800d3a6:	e087      	b.n	800d4b8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3ae:	2b02      	cmp	r3, #2
 800d3b0:	d002      	beq.n	800d3b8 <USBD_SetConfig+0x3c>
 800d3b2:	2b03      	cmp	r3, #3
 800d3b4:	d025      	beq.n	800d402 <USBD_SetConfig+0x86>
 800d3b6:	e071      	b.n	800d49c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800d3b8:	4b41      	ldr	r3, [pc, #260]	; (800d4c0 <USBD_SetConfig+0x144>)
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d01c      	beq.n	800d3fa <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800d3c0:	4b3f      	ldr	r3, [pc, #252]	; (800d4c0 <USBD_SetConfig+0x144>)
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800d3ca:	4b3d      	ldr	r3, [pc, #244]	; (800d4c0 <USBD_SetConfig+0x144>)
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f7ff f9a7 	bl	800c724 <USBD_SetClassConfig>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800d3da:	7bfb      	ldrb	r3, [r7, #15]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d004      	beq.n	800d3ea <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800d3e0:	6839      	ldr	r1, [r7, #0]
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 f944 	bl	800d670 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800d3e8:	e065      	b.n	800d4b6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f000 fa0b 	bl	800d806 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2203      	movs	r2, #3
 800d3f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800d3f8:	e05d      	b.n	800d4b6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f000 fa03 	bl	800d806 <USBD_CtlSendStatus>
    break;
 800d400:	e059      	b.n	800d4b6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800d402:	4b2f      	ldr	r3, [pc, #188]	; (800d4c0 <USBD_SetConfig+0x144>)
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d112      	bne.n	800d430 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2202      	movs	r2, #2
 800d40e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800d412:	4b2b      	ldr	r3, [pc, #172]	; (800d4c0 <USBD_SetConfig+0x144>)
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	461a      	mov	r2, r3
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d41c:	4b28      	ldr	r3, [pc, #160]	; (800d4c0 <USBD_SetConfig+0x144>)
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	4619      	mov	r1, r3
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f7ff f99a 	bl	800c75c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 f9ec 	bl	800d806 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800d42e:	e042      	b.n	800d4b6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800d430:	4b23      	ldr	r3, [pc, #140]	; (800d4c0 <USBD_SetConfig+0x144>)
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	461a      	mov	r2, r3
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d02a      	beq.n	800d494 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	b2db      	uxtb	r3, r3
 800d444:	4619      	mov	r1, r3
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f7ff f988 	bl	800c75c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800d44c:	4b1c      	ldr	r3, [pc, #112]	; (800d4c0 <USBD_SetConfig+0x144>)
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	461a      	mov	r2, r3
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800d456:	4b1a      	ldr	r3, [pc, #104]	; (800d4c0 <USBD_SetConfig+0x144>)
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	4619      	mov	r1, r3
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f7ff f961 	bl	800c724 <USBD_SetClassConfig>
 800d462:	4603      	mov	r3, r0
 800d464:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800d466:	7bfb      	ldrb	r3, [r7, #15]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d00f      	beq.n	800d48c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800d46c:	6839      	ldr	r1, [r7, #0]
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 f8fe 	bl	800d670 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	4619      	mov	r1, r3
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f7ff f96d 	bl	800c75c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2202      	movs	r2, #2
 800d486:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800d48a:	e014      	b.n	800d4b6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 f9ba 	bl	800d806 <USBD_CtlSendStatus>
    break;
 800d492:	e010      	b.n	800d4b6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f000 f9b6 	bl	800d806 <USBD_CtlSendStatus>
    break;
 800d49a:	e00c      	b.n	800d4b6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800d49c:	6839      	ldr	r1, [r7, #0]
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 f8e6 	bl	800d670 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d4a4:	4b06      	ldr	r3, [pc, #24]	; (800d4c0 <USBD_SetConfig+0x144>)
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f7ff f956 	bl	800c75c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800d4b0:	2303      	movs	r3, #3
 800d4b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d4b4:	bf00      	nop
  }

  return ret;
 800d4b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3710      	adds	r7, #16
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	20000ea0 	.word	0x20000ea0

0800d4c4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	88db      	ldrh	r3, [r3, #6]
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d004      	beq.n	800d4e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d4d6:	6839      	ldr	r1, [r7, #0]
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 f8c9 	bl	800d670 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800d4de:	e021      	b.n	800d524 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	db17      	blt.n	800d51a <USBD_GetConfig+0x56>
 800d4ea:	2b02      	cmp	r3, #2
 800d4ec:	dd02      	ble.n	800d4f4 <USBD_GetConfig+0x30>
 800d4ee:	2b03      	cmp	r3, #3
 800d4f0:	d00b      	beq.n	800d50a <USBD_GetConfig+0x46>
 800d4f2:	e012      	b.n	800d51a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	3308      	adds	r3, #8
 800d4fe:	2201      	movs	r2, #1
 800d500:	4619      	mov	r1, r3
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f000 f925 	bl	800d752 <USBD_CtlSendData>
      break;
 800d508:	e00c      	b.n	800d524 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	3304      	adds	r3, #4
 800d50e:	2201      	movs	r2, #1
 800d510:	4619      	mov	r1, r3
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 f91d 	bl	800d752 <USBD_CtlSendData>
      break;
 800d518:	e004      	b.n	800d524 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800d51a:	6839      	ldr	r1, [r7, #0]
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f000 f8a7 	bl	800d670 <USBD_CtlError>
      break;
 800d522:	bf00      	nop
}
 800d524:	bf00      	nop
 800d526:	3708      	adds	r7, #8
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}

0800d52c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b082      	sub	sp, #8
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d53c:	3b01      	subs	r3, #1
 800d53e:	2b02      	cmp	r3, #2
 800d540:	d81e      	bhi.n	800d580 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	88db      	ldrh	r3, [r3, #6]
 800d546:	2b02      	cmp	r3, #2
 800d548:	d004      	beq.n	800d554 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800d54a:	6839      	ldr	r1, [r7, #0]
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 f88f 	bl	800d670 <USBD_CtlError>
      break;
 800d552:	e01a      	b.n	800d58a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2201      	movs	r2, #1
 800d558:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d560:	2b00      	cmp	r3, #0
 800d562:	d005      	beq.n	800d570 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	f043 0202 	orr.w	r2, r3, #2
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	330c      	adds	r3, #12
 800d574:	2202      	movs	r2, #2
 800d576:	4619      	mov	r1, r3
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f000 f8ea 	bl	800d752 <USBD_CtlSendData>
    break;
 800d57e:	e004      	b.n	800d58a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800d580:	6839      	ldr	r1, [r7, #0]
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f000 f874 	bl	800d670 <USBD_CtlError>
    break;
 800d588:	bf00      	nop
  }
}
 800d58a:	bf00      	nop
 800d58c:	3708      	adds	r7, #8
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}

0800d592 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d592:	b580      	push	{r7, lr}
 800d594:	b082      	sub	sp, #8
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
 800d59a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	885b      	ldrh	r3, [r3, #2]
 800d5a0:	2b01      	cmp	r3, #1
 800d5a2:	d106      	bne.n	800d5b2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 f92a 	bl	800d806 <USBD_CtlSendStatus>
  }
}
 800d5b2:	bf00      	nop
 800d5b4:	3708      	adds	r7, #8
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b082      	sub	sp, #8
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
 800d5c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5ca:	3b01      	subs	r3, #1
 800d5cc:	2b02      	cmp	r3, #2
 800d5ce:	d80b      	bhi.n	800d5e8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	885b      	ldrh	r3, [r3, #2]
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d10c      	bne.n	800d5f2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f000 f910 	bl	800d806 <USBD_CtlSendStatus>
      }
      break;
 800d5e6:	e004      	b.n	800d5f2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d5e8:	6839      	ldr	r1, [r7, #0]
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 f840 	bl	800d670 <USBD_CtlError>
      break;
 800d5f0:	e000      	b.n	800d5f4 <USBD_ClrFeature+0x3a>
      break;
 800d5f2:	bf00      	nop
  }
}
 800d5f4:	bf00      	nop
 800d5f6:	3708      	adds	r7, #8
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	781a      	ldrb	r2, [r3, #0]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	3301      	adds	r3, #1
 800d616:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	781a      	ldrb	r2, [r3, #0]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	3301      	adds	r3, #1
 800d624:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d626:	68f8      	ldr	r0, [r7, #12]
 800d628:	f7ff fad3 	bl	800cbd2 <SWAPBYTE>
 800d62c:	4603      	mov	r3, r0
 800d62e:	461a      	mov	r2, r3
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	3301      	adds	r3, #1
 800d638:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	3301      	adds	r3, #1
 800d63e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f7ff fac6 	bl	800cbd2 <SWAPBYTE>
 800d646:	4603      	mov	r3, r0
 800d648:	461a      	mov	r2, r3
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	3301      	adds	r3, #1
 800d652:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	3301      	adds	r3, #1
 800d658:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d65a:	68f8      	ldr	r0, [r7, #12]
 800d65c:	f7ff fab9 	bl	800cbd2 <SWAPBYTE>
 800d660:	4603      	mov	r3, r0
 800d662:	461a      	mov	r2, r3
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	80da      	strh	r2, [r3, #6]
}
 800d668:	bf00      	nop
 800d66a:	3710      	adds	r7, #16
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d67a:	2180      	movs	r1, #128	; 0x80
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f001 ff2b 	bl	800f4d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d682:	2100      	movs	r1, #0
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f001 ff27 	bl	800f4d8 <USBD_LL_StallEP>
}
 800d68a:	bf00      	nop
 800d68c:	3708      	adds	r7, #8
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}

0800d692 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d692:	b580      	push	{r7, lr}
 800d694:	b086      	sub	sp, #24
 800d696:	af00      	add	r7, sp, #0
 800d698:	60f8      	str	r0, [r7, #12]
 800d69a:	60b9      	str	r1, [r7, #8]
 800d69c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d036      	beq.n	800d716 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d6ac:	6938      	ldr	r0, [r7, #16]
 800d6ae:	f000 f836 	bl	800d71e <USBD_GetLen>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	005b      	lsls	r3, r3, #1
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d6c0:	7dfb      	ldrb	r3, [r7, #23]
 800d6c2:	68ba      	ldr	r2, [r7, #8]
 800d6c4:	4413      	add	r3, r2
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	7812      	ldrb	r2, [r2, #0]
 800d6ca:	701a      	strb	r2, [r3, #0]
  idx++;
 800d6cc:	7dfb      	ldrb	r3, [r7, #23]
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d6d2:	7dfb      	ldrb	r3, [r7, #23]
 800d6d4:	68ba      	ldr	r2, [r7, #8]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	2203      	movs	r2, #3
 800d6da:	701a      	strb	r2, [r3, #0]
  idx++;
 800d6dc:	7dfb      	ldrb	r3, [r7, #23]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d6e2:	e013      	b.n	800d70c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d6e4:	7dfb      	ldrb	r3, [r7, #23]
 800d6e6:	68ba      	ldr	r2, [r7, #8]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	693a      	ldr	r2, [r7, #16]
 800d6ec:	7812      	ldrb	r2, [r2, #0]
 800d6ee:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	613b      	str	r3, [r7, #16]
    idx++;
 800d6f6:	7dfb      	ldrb	r3, [r7, #23]
 800d6f8:	3301      	adds	r3, #1
 800d6fa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d6fc:	7dfb      	ldrb	r3, [r7, #23]
 800d6fe:	68ba      	ldr	r2, [r7, #8]
 800d700:	4413      	add	r3, r2
 800d702:	2200      	movs	r2, #0
 800d704:	701a      	strb	r2, [r3, #0]
    idx++;
 800d706:	7dfb      	ldrb	r3, [r7, #23]
 800d708:	3301      	adds	r3, #1
 800d70a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d1e7      	bne.n	800d6e4 <USBD_GetString+0x52>
 800d714:	e000      	b.n	800d718 <USBD_GetString+0x86>
    return;
 800d716:	bf00      	nop
  }
}
 800d718:	3718      	adds	r7, #24
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}

0800d71e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d71e:	b480      	push	{r7}
 800d720:	b085      	sub	sp, #20
 800d722:	af00      	add	r7, sp, #0
 800d724:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d726:	2300      	movs	r3, #0
 800d728:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d72e:	e005      	b.n	800d73c <USBD_GetLen+0x1e>
  {
    len++;
 800d730:	7bfb      	ldrb	r3, [r7, #15]
 800d732:	3301      	adds	r3, #1
 800d734:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	3301      	adds	r3, #1
 800d73a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d1f5      	bne.n	800d730 <USBD_GetLen+0x12>
  }

  return len;
 800d744:	7bfb      	ldrb	r3, [r7, #15]
}
 800d746:	4618      	mov	r0, r3
 800d748:	3714      	adds	r7, #20
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr

0800d752 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d752:	b580      	push	{r7, lr}
 800d754:	b084      	sub	sp, #16
 800d756:	af00      	add	r7, sp, #0
 800d758:	60f8      	str	r0, [r7, #12]
 800d75a:	60b9      	str	r1, [r7, #8]
 800d75c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	2202      	movs	r2, #2
 800d762:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	687a      	ldr	r2, [r7, #4]
 800d76a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	68ba      	ldr	r2, [r7, #8]
 800d776:	2100      	movs	r1, #0
 800d778:	68f8      	ldr	r0, [r7, #12]
 800d77a:	f001 ff36 	bl	800f5ea <USBD_LL_Transmit>

  return USBD_OK;
 800d77e:	2300      	movs	r3, #0
}
 800d780:	4618      	mov	r0, r3
 800d782:	3710      	adds	r7, #16
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	60f8      	str	r0, [r7, #12]
 800d790:	60b9      	str	r1, [r7, #8]
 800d792:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	68ba      	ldr	r2, [r7, #8]
 800d798:	2100      	movs	r1, #0
 800d79a:	68f8      	ldr	r0, [r7, #12]
 800d79c:	f001 ff25 	bl	800f5ea <USBD_LL_Transmit>

  return USBD_OK;
 800d7a0:	2300      	movs	r3, #0
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3710      	adds	r7, #16
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}

0800d7aa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d7aa:	b580      	push	{r7, lr}
 800d7ac:	b084      	sub	sp, #16
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	60f8      	str	r0, [r7, #12]
 800d7b2:	60b9      	str	r1, [r7, #8]
 800d7b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2203      	movs	r2, #3
 800d7ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	687a      	ldr	r2, [r7, #4]
 800d7c2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	687a      	ldr	r2, [r7, #4]
 800d7ca:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	68ba      	ldr	r2, [r7, #8]
 800d7d2:	2100      	movs	r1, #0
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f001 ff29 	bl	800f62c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7da:	2300      	movs	r3, #0
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3710      	adds	r7, #16
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	60b9      	str	r1, [r7, #8]
 800d7ee:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	68ba      	ldr	r2, [r7, #8]
 800d7f4:	2100      	movs	r1, #0
 800d7f6:	68f8      	ldr	r0, [r7, #12]
 800d7f8:	f001 ff18 	bl	800f62c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7fc:	2300      	movs	r3, #0
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3710      	adds	r7, #16
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d806:	b580      	push	{r7, lr}
 800d808:	b082      	sub	sp, #8
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2204      	movs	r2, #4
 800d812:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d816:	2300      	movs	r3, #0
 800d818:	2200      	movs	r2, #0
 800d81a:	2100      	movs	r1, #0
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f001 fee4 	bl	800f5ea <USBD_LL_Transmit>

  return USBD_OK;
 800d822:	2300      	movs	r3, #0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2205      	movs	r2, #5
 800d838:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d83c:	2300      	movs	r3, #0
 800d83e:	2200      	movs	r2, #0
 800d840:	2100      	movs	r1, #0
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f001 fef2 	bl	800f62c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d848:	2300      	movs	r3, #0
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3708      	adds	r7, #8
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}

0800d852 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d852:	b480      	push	{r7}
 800d854:	b085      	sub	sp, #20
 800d856:	af00      	add	r7, sp, #0
 800d858:	4603      	mov	r3, r0
 800d85a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d85c:	2300      	movs	r3, #0
 800d85e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d860:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d864:	2b84      	cmp	r3, #132	; 0x84
 800d866:	d005      	beq.n	800d874 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d868:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	4413      	add	r3, r2
 800d870:	3303      	adds	r3, #3
 800d872:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d874:	68fb      	ldr	r3, [r7, #12]
}
 800d876:	4618      	mov	r0, r3
 800d878:	3714      	adds	r7, #20
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr

0800d882 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d882:	b580      	push	{r7, lr}
 800d884:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d886:	f000 fadb 	bl	800de40 <vTaskStartScheduler>
  
  return osOK;
 800d88a:	2300      	movs	r3, #0
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d890:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d892:	b089      	sub	sp, #36	; 0x24
 800d894:	af04      	add	r7, sp, #16
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	695b      	ldr	r3, [r3, #20]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d020      	beq.n	800d8e4 <osThreadCreate+0x54>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	699b      	ldr	r3, [r3, #24]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d01c      	beq.n	800d8e4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	685c      	ldr	r4, [r3, #4]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681d      	ldr	r5, [r3, #0]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	691e      	ldr	r6, [r3, #16]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7ff ffc8 	bl	800d852 <makeFreeRtosPriority>
 800d8c2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	695b      	ldr	r3, [r3, #20]
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d8cc:	9202      	str	r2, [sp, #8]
 800d8ce:	9301      	str	r3, [sp, #4]
 800d8d0:	9100      	str	r1, [sp, #0]
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	4632      	mov	r2, r6
 800d8d6:	4629      	mov	r1, r5
 800d8d8:	4620      	mov	r0, r4
 800d8da:	f000 f8ed 	bl	800dab8 <xTaskCreateStatic>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	60fb      	str	r3, [r7, #12]
 800d8e2:	e01c      	b.n	800d91e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	685c      	ldr	r4, [r3, #4]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d8f0:	b29e      	uxth	r6, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7ff ffaa 	bl	800d852 <makeFreeRtosPriority>
 800d8fe:	4602      	mov	r2, r0
 800d900:	f107 030c 	add.w	r3, r7, #12
 800d904:	9301      	str	r3, [sp, #4]
 800d906:	9200      	str	r2, [sp, #0]
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	4632      	mov	r2, r6
 800d90c:	4629      	mov	r1, r5
 800d90e:	4620      	mov	r0, r4
 800d910:	f000 f92c 	bl	800db6c <xTaskCreate>
 800d914:	4603      	mov	r3, r0
 800d916:	2b01      	cmp	r3, #1
 800d918:	d001      	beq.n	800d91e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d91a:	2300      	movs	r3, #0
 800d91c:	e000      	b.n	800d920 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d91e:	68fb      	ldr	r3, [r7, #12]
}
 800d920:	4618      	mov	r0, r3
 800d922:	3714      	adds	r7, #20
 800d924:	46bd      	mov	sp, r7
 800d926:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d928 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d001      	beq.n	800d93e <osDelay+0x16>
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	e000      	b.n	800d940 <osDelay+0x18>
 800d93e:	2301      	movs	r3, #1
 800d940:	4618      	mov	r0, r3
 800d942:	f000 fa49 	bl	800ddd8 <vTaskDelay>
  
  return osOK;
 800d946:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3710      	adds	r7, #16
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d950:	b480      	push	{r7}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f103 0208 	add.w	r2, r3, #8
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d968:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f103 0208 	add.w	r2, r3, #8
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f103 0208 	add.w	r2, r3, #8
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2200      	movs	r2, #0
 800d982:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d984:	bf00      	nop
 800d986:	370c      	adds	r7, #12
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr

0800d990 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d990:	b480      	push	{r7}
 800d992:	b083      	sub	sp, #12
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2200      	movs	r2, #0
 800d99c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d99e:	bf00      	nop
 800d9a0:	370c      	adds	r7, #12
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr

0800d9aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d9aa:	b480      	push	{r7}
 800d9ac:	b085      	sub	sp, #20
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
 800d9b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	68fa      	ldr	r2, [r7, #12]
 800d9be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	689a      	ldr	r2, [r3, #8]
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	689b      	ldr	r3, [r3, #8]
 800d9cc:	683a      	ldr	r2, [r7, #0]
 800d9ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	683a      	ldr	r2, [r7, #0]
 800d9d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	1c5a      	adds	r2, r3, #1
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	601a      	str	r2, [r3, #0]
}
 800d9e6:	bf00      	nop
 800d9e8:	3714      	adds	r7, #20
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr

0800d9f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d9f2:	b480      	push	{r7}
 800d9f4:	b085      	sub	sp, #20
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
 800d9fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da08:	d103      	bne.n	800da12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	691b      	ldr	r3, [r3, #16]
 800da0e:	60fb      	str	r3, [r7, #12]
 800da10:	e00c      	b.n	800da2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	3308      	adds	r3, #8
 800da16:	60fb      	str	r3, [r7, #12]
 800da18:	e002      	b.n	800da20 <vListInsert+0x2e>
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	60fb      	str	r3, [r7, #12]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	68ba      	ldr	r2, [r7, #8]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d2f6      	bcs.n	800da1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	685a      	ldr	r2, [r3, #4]
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	683a      	ldr	r2, [r7, #0]
 800da3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	68fa      	ldr	r2, [r7, #12]
 800da40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	683a      	ldr	r2, [r7, #0]
 800da46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	687a      	ldr	r2, [r7, #4]
 800da4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	1c5a      	adds	r2, r3, #1
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	601a      	str	r2, [r3, #0]
}
 800da58:	bf00      	nop
 800da5a:	3714      	adds	r7, #20
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr

0800da64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800da64:	b480      	push	{r7}
 800da66:	b085      	sub	sp, #20
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	691b      	ldr	r3, [r3, #16]
 800da70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	6892      	ldr	r2, [r2, #8]
 800da7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	689b      	ldr	r3, [r3, #8]
 800da80:	687a      	ldr	r2, [r7, #4]
 800da82:	6852      	ldr	r2, [r2, #4]
 800da84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	687a      	ldr	r2, [r7, #4]
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d103      	bne.n	800da98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	689a      	ldr	r2, [r3, #8]
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2200      	movs	r2, #0
 800da9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	1e5a      	subs	r2, r3, #1
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
}
 800daac:	4618      	mov	r0, r3
 800daae:	3714      	adds	r7, #20
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr

0800dab8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b08e      	sub	sp, #56	; 0x38
 800dabc:	af04      	add	r7, sp, #16
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	607a      	str	r2, [r7, #4]
 800dac4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d109      	bne.n	800dae0 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad0:	f383 8811 	msr	BASEPRI, r3
 800dad4:	f3bf 8f6f 	isb	sy
 800dad8:	f3bf 8f4f 	dsb	sy
 800dadc:	623b      	str	r3, [r7, #32]
 800dade:	e7fe      	b.n	800dade <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800dae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d109      	bne.n	800dafa <xTaskCreateStatic+0x42>
 800dae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daea:	f383 8811 	msr	BASEPRI, r3
 800daee:	f3bf 8f6f 	isb	sy
 800daf2:	f3bf 8f4f 	dsb	sy
 800daf6:	61fb      	str	r3, [r7, #28]
 800daf8:	e7fe      	b.n	800daf8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dafa:	2354      	movs	r3, #84	; 0x54
 800dafc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	2b54      	cmp	r3, #84	; 0x54
 800db02:	d009      	beq.n	800db18 <xTaskCreateStatic+0x60>
 800db04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db08:	f383 8811 	msr	BASEPRI, r3
 800db0c:	f3bf 8f6f 	isb	sy
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	61bb      	str	r3, [r7, #24]
 800db16:	e7fe      	b.n	800db16 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800db18:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800db1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d01e      	beq.n	800db5e <xTaskCreateStatic+0xa6>
 800db20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db22:	2b00      	cmp	r3, #0
 800db24:	d01b      	beq.n	800db5e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800db26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db28:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800db2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db2e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800db30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db32:	2202      	movs	r2, #2
 800db34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800db38:	2300      	movs	r3, #0
 800db3a:	9303      	str	r3, [sp, #12]
 800db3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3e:	9302      	str	r3, [sp, #8]
 800db40:	f107 0314 	add.w	r3, r7, #20
 800db44:	9301      	str	r3, [sp, #4]
 800db46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	687a      	ldr	r2, [r7, #4]
 800db4e:	68b9      	ldr	r1, [r7, #8]
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	f000 f850 	bl	800dbf6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db58:	f000 f8d4 	bl	800dd04 <prvAddNewTaskToReadyList>
 800db5c:	e001      	b.n	800db62 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800db5e:	2300      	movs	r3, #0
 800db60:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800db62:	697b      	ldr	r3, [r7, #20]
	}
 800db64:	4618      	mov	r0, r3
 800db66:	3728      	adds	r7, #40	; 0x28
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b08c      	sub	sp, #48	; 0x30
 800db70:	af04      	add	r7, sp, #16
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	603b      	str	r3, [r7, #0]
 800db78:	4613      	mov	r3, r2
 800db7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800db7c:	88fb      	ldrh	r3, [r7, #6]
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	4618      	mov	r0, r3
 800db82:	f000 feaf 	bl	800e8e4 <pvPortMalloc>
 800db86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d00e      	beq.n	800dbac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800db8e:	2054      	movs	r0, #84	; 0x54
 800db90:	f000 fea8 	bl	800e8e4 <pvPortMalloc>
 800db94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800db96:	69fb      	ldr	r3, [r7, #28]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d003      	beq.n	800dba4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800db9c:	69fb      	ldr	r3, [r7, #28]
 800db9e:	697a      	ldr	r2, [r7, #20]
 800dba0:	631a      	str	r2, [r3, #48]	; 0x30
 800dba2:	e005      	b.n	800dbb0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dba4:	6978      	ldr	r0, [r7, #20]
 800dba6:	f000 ff5f 	bl	800ea68 <vPortFree>
 800dbaa:	e001      	b.n	800dbb0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dbac:	2300      	movs	r3, #0
 800dbae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dbb0:	69fb      	ldr	r3, [r7, #28]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d017      	beq.n	800dbe6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dbb6:	69fb      	ldr	r3, [r7, #28]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dbbe:	88fa      	ldrh	r2, [r7, #6]
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	9303      	str	r3, [sp, #12]
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	9302      	str	r3, [sp, #8]
 800dbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbca:	9301      	str	r3, [sp, #4]
 800dbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbce:	9300      	str	r3, [sp, #0]
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	68b9      	ldr	r1, [r7, #8]
 800dbd4:	68f8      	ldr	r0, [r7, #12]
 800dbd6:	f000 f80e 	bl	800dbf6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dbda:	69f8      	ldr	r0, [r7, #28]
 800dbdc:	f000 f892 	bl	800dd04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	61bb      	str	r3, [r7, #24]
 800dbe4:	e002      	b.n	800dbec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dbe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dbea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dbec:	69bb      	ldr	r3, [r7, #24]
	}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3720      	adds	r7, #32
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}

0800dbf6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dbf6:	b580      	push	{r7, lr}
 800dbf8:	b088      	sub	sp, #32
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	60f8      	str	r0, [r7, #12]
 800dbfe:	60b9      	str	r1, [r7, #8]
 800dc00:	607a      	str	r2, [r7, #4]
 800dc02:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dc0e:	3b01      	subs	r3, #1
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	4413      	add	r3, r2
 800dc14:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dc16:	69bb      	ldr	r3, [r7, #24]
 800dc18:	f023 0307 	bic.w	r3, r3, #7
 800dc1c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dc1e:	69bb      	ldr	r3, [r7, #24]
 800dc20:	f003 0307 	and.w	r3, r3, #7
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d009      	beq.n	800dc3c <prvInitialiseNewTask+0x46>
 800dc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2c:	f383 8811 	msr	BASEPRI, r3
 800dc30:	f3bf 8f6f 	isb	sy
 800dc34:	f3bf 8f4f 	dsb	sy
 800dc38:	617b      	str	r3, [r7, #20]
 800dc3a:	e7fe      	b.n	800dc3a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d01f      	beq.n	800dc82 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc42:	2300      	movs	r3, #0
 800dc44:	61fb      	str	r3, [r7, #28]
 800dc46:	e012      	b.n	800dc6e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dc48:	68ba      	ldr	r2, [r7, #8]
 800dc4a:	69fb      	ldr	r3, [r7, #28]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	7819      	ldrb	r1, [r3, #0]
 800dc50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc52:	69fb      	ldr	r3, [r7, #28]
 800dc54:	4413      	add	r3, r2
 800dc56:	3334      	adds	r3, #52	; 0x34
 800dc58:	460a      	mov	r2, r1
 800dc5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dc5c:	68ba      	ldr	r2, [r7, #8]
 800dc5e:	69fb      	ldr	r3, [r7, #28]
 800dc60:	4413      	add	r3, r2
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d006      	beq.n	800dc76 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	61fb      	str	r3, [r7, #28]
 800dc6e:	69fb      	ldr	r3, [r7, #28]
 800dc70:	2b0f      	cmp	r3, #15
 800dc72:	d9e9      	bls.n	800dc48 <prvInitialiseNewTask+0x52>
 800dc74:	e000      	b.n	800dc78 <prvInitialiseNewTask+0x82>
			{
				break;
 800dc76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dc80:	e003      	b.n	800dc8a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc84:	2200      	movs	r2, #0
 800dc86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8c:	2b06      	cmp	r3, #6
 800dc8e:	d901      	bls.n	800dc94 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dc90:	2306      	movs	r3, #6
 800dc92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc9e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca2:	2200      	movs	r2, #0
 800dca4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca8:	3304      	adds	r3, #4
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7ff fe70 	bl	800d990 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dcb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb2:	3318      	adds	r3, #24
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7ff fe6b 	bl	800d990 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc2:	f1c3 0207 	rsb	r2, r3, #7
 800dcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dcd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd8:	2200      	movs	r2, #0
 800dcda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dcde:	683a      	ldr	r2, [r7, #0]
 800dce0:	68f9      	ldr	r1, [r7, #12]
 800dce2:	69b8      	ldr	r0, [r7, #24]
 800dce4:	f000 fbfe 	bl	800e4e4 <pxPortInitialiseStack>
 800dce8:	4602      	mov	r2, r0
 800dcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d002      	beq.n	800dcfa <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcfa:	bf00      	nop
 800dcfc:	3720      	adds	r7, #32
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
	...

0800dd04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dd0c:	f000 fd0e 	bl	800e72c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dd10:	4b2a      	ldr	r3, [pc, #168]	; (800ddbc <prvAddNewTaskToReadyList+0xb8>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	3301      	adds	r3, #1
 800dd16:	4a29      	ldr	r2, [pc, #164]	; (800ddbc <prvAddNewTaskToReadyList+0xb8>)
 800dd18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dd1a:	4b29      	ldr	r3, [pc, #164]	; (800ddc0 <prvAddNewTaskToReadyList+0xbc>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d109      	bne.n	800dd36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dd22:	4a27      	ldr	r2, [pc, #156]	; (800ddc0 <prvAddNewTaskToReadyList+0xbc>)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dd28:	4b24      	ldr	r3, [pc, #144]	; (800ddbc <prvAddNewTaskToReadyList+0xb8>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	d110      	bne.n	800dd52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dd30:	f000 fab8 	bl	800e2a4 <prvInitialiseTaskLists>
 800dd34:	e00d      	b.n	800dd52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dd36:	4b23      	ldr	r3, [pc, #140]	; (800ddc4 <prvAddNewTaskToReadyList+0xc0>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d109      	bne.n	800dd52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dd3e:	4b20      	ldr	r3, [pc, #128]	; (800ddc0 <prvAddNewTaskToReadyList+0xbc>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d802      	bhi.n	800dd52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dd4c:	4a1c      	ldr	r2, [pc, #112]	; (800ddc0 <prvAddNewTaskToReadyList+0xbc>)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dd52:	4b1d      	ldr	r3, [pc, #116]	; (800ddc8 <prvAddNewTaskToReadyList+0xc4>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	3301      	adds	r3, #1
 800dd58:	4a1b      	ldr	r2, [pc, #108]	; (800ddc8 <prvAddNewTaskToReadyList+0xc4>)
 800dd5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd60:	2201      	movs	r2, #1
 800dd62:	409a      	lsls	r2, r3
 800dd64:	4b19      	ldr	r3, [pc, #100]	; (800ddcc <prvAddNewTaskToReadyList+0xc8>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	4a18      	ldr	r2, [pc, #96]	; (800ddcc <prvAddNewTaskToReadyList+0xc8>)
 800dd6c:	6013      	str	r3, [r2, #0]
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd72:	4613      	mov	r3, r2
 800dd74:	009b      	lsls	r3, r3, #2
 800dd76:	4413      	add	r3, r2
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	4a15      	ldr	r2, [pc, #84]	; (800ddd0 <prvAddNewTaskToReadyList+0xcc>)
 800dd7c:	441a      	add	r2, r3
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	3304      	adds	r3, #4
 800dd82:	4619      	mov	r1, r3
 800dd84:	4610      	mov	r0, r2
 800dd86:	f7ff fe10 	bl	800d9aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dd8a:	f000 fcfd 	bl	800e788 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dd8e:	4b0d      	ldr	r3, [pc, #52]	; (800ddc4 <prvAddNewTaskToReadyList+0xc0>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d00e      	beq.n	800ddb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dd96:	4b0a      	ldr	r3, [pc, #40]	; (800ddc0 <prvAddNewTaskToReadyList+0xbc>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d207      	bcs.n	800ddb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dda4:	4b0b      	ldr	r3, [pc, #44]	; (800ddd4 <prvAddNewTaskToReadyList+0xd0>)
 800dda6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddaa:	601a      	str	r2, [r3, #0]
 800ddac:	f3bf 8f4f 	dsb	sy
 800ddb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ddb4:	bf00      	nop
 800ddb6:	3708      	adds	r7, #8
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	20000fa4 	.word	0x20000fa4
 800ddc0:	20000ea4 	.word	0x20000ea4
 800ddc4:	20000fb0 	.word	0x20000fb0
 800ddc8:	20000fc0 	.word	0x20000fc0
 800ddcc:	20000fac 	.word	0x20000fac
 800ddd0:	20000ea8 	.word	0x20000ea8
 800ddd4:	e000ed04 	.word	0xe000ed04

0800ddd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b084      	sub	sp, #16
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dde0:	2300      	movs	r3, #0
 800dde2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d016      	beq.n	800de18 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ddea:	4b13      	ldr	r3, [pc, #76]	; (800de38 <vTaskDelay+0x60>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d009      	beq.n	800de06 <vTaskDelay+0x2e>
 800ddf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf6:	f383 8811 	msr	BASEPRI, r3
 800ddfa:	f3bf 8f6f 	isb	sy
 800ddfe:	f3bf 8f4f 	dsb	sy
 800de02:	60bb      	str	r3, [r7, #8]
 800de04:	e7fe      	b.n	800de04 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800de06:	f000 f879 	bl	800defc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800de0a:	2100      	movs	r1, #0
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 fb03 	bl	800e418 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800de12:	f000 f881 	bl	800df18 <xTaskResumeAll>
 800de16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d107      	bne.n	800de2e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800de1e:	4b07      	ldr	r3, [pc, #28]	; (800de3c <vTaskDelay+0x64>)
 800de20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de24:	601a      	str	r2, [r3, #0]
 800de26:	f3bf 8f4f 	dsb	sy
 800de2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800de2e:	bf00      	nop
 800de30:	3710      	adds	r7, #16
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	20000fcc 	.word	0x20000fcc
 800de3c:	e000ed04 	.word	0xe000ed04

0800de40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b08a      	sub	sp, #40	; 0x28
 800de44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800de46:	2300      	movs	r3, #0
 800de48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800de4a:	2300      	movs	r3, #0
 800de4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800de4e:	463a      	mov	r2, r7
 800de50:	1d39      	adds	r1, r7, #4
 800de52:	f107 0308 	add.w	r3, r7, #8
 800de56:	4618      	mov	r0, r3
 800de58:	f7f2 fb42 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800de5c:	6839      	ldr	r1, [r7, #0]
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	68ba      	ldr	r2, [r7, #8]
 800de62:	9202      	str	r2, [sp, #8]
 800de64:	9301      	str	r3, [sp, #4]
 800de66:	2300      	movs	r3, #0
 800de68:	9300      	str	r3, [sp, #0]
 800de6a:	2300      	movs	r3, #0
 800de6c:	460a      	mov	r2, r1
 800de6e:	491d      	ldr	r1, [pc, #116]	; (800dee4 <vTaskStartScheduler+0xa4>)
 800de70:	481d      	ldr	r0, [pc, #116]	; (800dee8 <vTaskStartScheduler+0xa8>)
 800de72:	f7ff fe21 	bl	800dab8 <xTaskCreateStatic>
 800de76:	4602      	mov	r2, r0
 800de78:	4b1c      	ldr	r3, [pc, #112]	; (800deec <vTaskStartScheduler+0xac>)
 800de7a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800de7c:	4b1b      	ldr	r3, [pc, #108]	; (800deec <vTaskStartScheduler+0xac>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d002      	beq.n	800de8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800de84:	2301      	movs	r3, #1
 800de86:	617b      	str	r3, [r7, #20]
 800de88:	e001      	b.n	800de8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800de8a:	2300      	movs	r3, #0
 800de8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	2b01      	cmp	r3, #1
 800de92:	d115      	bne.n	800dec0 <vTaskStartScheduler+0x80>
 800de94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de98:	f383 8811 	msr	BASEPRI, r3
 800de9c:	f3bf 8f6f 	isb	sy
 800dea0:	f3bf 8f4f 	dsb	sy
 800dea4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dea6:	4b12      	ldr	r3, [pc, #72]	; (800def0 <vTaskStartScheduler+0xb0>)
 800dea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800deac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800deae:	4b11      	ldr	r3, [pc, #68]	; (800def4 <vTaskStartScheduler+0xb4>)
 800deb0:	2201      	movs	r2, #1
 800deb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800deb4:	4b10      	ldr	r3, [pc, #64]	; (800def8 <vTaskStartScheduler+0xb8>)
 800deb6:	2200      	movs	r2, #0
 800deb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800deba:	f000 fb99 	bl	800e5f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800debe:	e00d      	b.n	800dedc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dec6:	d109      	bne.n	800dedc <vTaskStartScheduler+0x9c>
 800dec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800decc:	f383 8811 	msr	BASEPRI, r3
 800ded0:	f3bf 8f6f 	isb	sy
 800ded4:	f3bf 8f4f 	dsb	sy
 800ded8:	60fb      	str	r3, [r7, #12]
 800deda:	e7fe      	b.n	800deda <vTaskStartScheduler+0x9a>
}
 800dedc:	bf00      	nop
 800dede:	3718      	adds	r7, #24
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	0800fec4 	.word	0x0800fec4
 800dee8:	0800e275 	.word	0x0800e275
 800deec:	20000fc8 	.word	0x20000fc8
 800def0:	20000fc4 	.word	0x20000fc4
 800def4:	20000fb0 	.word	0x20000fb0
 800def8:	20000fa8 	.word	0x20000fa8

0800defc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800defc:	b480      	push	{r7}
 800defe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800df00:	4b04      	ldr	r3, [pc, #16]	; (800df14 <vTaskSuspendAll+0x18>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	3301      	adds	r3, #1
 800df06:	4a03      	ldr	r2, [pc, #12]	; (800df14 <vTaskSuspendAll+0x18>)
 800df08:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800df0a:	bf00      	nop
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr
 800df14:	20000fcc 	.word	0x20000fcc

0800df18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b084      	sub	sp, #16
 800df1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800df1e:	2300      	movs	r3, #0
 800df20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800df22:	2300      	movs	r3, #0
 800df24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800df26:	4b41      	ldr	r3, [pc, #260]	; (800e02c <xTaskResumeAll+0x114>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d109      	bne.n	800df42 <xTaskResumeAll+0x2a>
 800df2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df32:	f383 8811 	msr	BASEPRI, r3
 800df36:	f3bf 8f6f 	isb	sy
 800df3a:	f3bf 8f4f 	dsb	sy
 800df3e:	603b      	str	r3, [r7, #0]
 800df40:	e7fe      	b.n	800df40 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800df42:	f000 fbf3 	bl	800e72c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800df46:	4b39      	ldr	r3, [pc, #228]	; (800e02c <xTaskResumeAll+0x114>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	3b01      	subs	r3, #1
 800df4c:	4a37      	ldr	r2, [pc, #220]	; (800e02c <xTaskResumeAll+0x114>)
 800df4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df50:	4b36      	ldr	r3, [pc, #216]	; (800e02c <xTaskResumeAll+0x114>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d161      	bne.n	800e01c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800df58:	4b35      	ldr	r3, [pc, #212]	; (800e030 <xTaskResumeAll+0x118>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d05d      	beq.n	800e01c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df60:	e02e      	b.n	800dfc0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df62:	4b34      	ldr	r3, [pc, #208]	; (800e034 <xTaskResumeAll+0x11c>)
 800df64:	68db      	ldr	r3, [r3, #12]
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	3318      	adds	r3, #24
 800df6e:	4618      	mov	r0, r3
 800df70:	f7ff fd78 	bl	800da64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	3304      	adds	r3, #4
 800df78:	4618      	mov	r0, r3
 800df7a:	f7ff fd73 	bl	800da64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df82:	2201      	movs	r2, #1
 800df84:	409a      	lsls	r2, r3
 800df86:	4b2c      	ldr	r3, [pc, #176]	; (800e038 <xTaskResumeAll+0x120>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4313      	orrs	r3, r2
 800df8c:	4a2a      	ldr	r2, [pc, #168]	; (800e038 <xTaskResumeAll+0x120>)
 800df8e:	6013      	str	r3, [r2, #0]
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df94:	4613      	mov	r3, r2
 800df96:	009b      	lsls	r3, r3, #2
 800df98:	4413      	add	r3, r2
 800df9a:	009b      	lsls	r3, r3, #2
 800df9c:	4a27      	ldr	r2, [pc, #156]	; (800e03c <xTaskResumeAll+0x124>)
 800df9e:	441a      	add	r2, r3
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	3304      	adds	r3, #4
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	4610      	mov	r0, r2
 800dfa8:	f7ff fcff 	bl	800d9aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfb0:	4b23      	ldr	r3, [pc, #140]	; (800e040 <xTaskResumeAll+0x128>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d302      	bcc.n	800dfc0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800dfba:	4b22      	ldr	r3, [pc, #136]	; (800e044 <xTaskResumeAll+0x12c>)
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dfc0:	4b1c      	ldr	r3, [pc, #112]	; (800e034 <xTaskResumeAll+0x11c>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d1cc      	bne.n	800df62 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d001      	beq.n	800dfd2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dfce:	f000 fa03 	bl	800e3d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800dfd2:	4b1d      	ldr	r3, [pc, #116]	; (800e048 <xTaskResumeAll+0x130>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d010      	beq.n	800e000 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dfde:	f000 f837 	bl	800e050 <xTaskIncrementTick>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d002      	beq.n	800dfee <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800dfe8:	4b16      	ldr	r3, [pc, #88]	; (800e044 <xTaskResumeAll+0x12c>)
 800dfea:	2201      	movs	r2, #1
 800dfec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	3b01      	subs	r3, #1
 800dff2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d1f1      	bne.n	800dfde <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800dffa:	4b13      	ldr	r3, [pc, #76]	; (800e048 <xTaskResumeAll+0x130>)
 800dffc:	2200      	movs	r2, #0
 800dffe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e000:	4b10      	ldr	r3, [pc, #64]	; (800e044 <xTaskResumeAll+0x12c>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d009      	beq.n	800e01c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e008:	2301      	movs	r3, #1
 800e00a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e00c:	4b0f      	ldr	r3, [pc, #60]	; (800e04c <xTaskResumeAll+0x134>)
 800e00e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e012:	601a      	str	r2, [r3, #0]
 800e014:	f3bf 8f4f 	dsb	sy
 800e018:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e01c:	f000 fbb4 	bl	800e788 <vPortExitCritical>

	return xAlreadyYielded;
 800e020:	68bb      	ldr	r3, [r7, #8]
}
 800e022:	4618      	mov	r0, r3
 800e024:	3710      	adds	r7, #16
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	20000fcc 	.word	0x20000fcc
 800e030:	20000fa4 	.word	0x20000fa4
 800e034:	20000f64 	.word	0x20000f64
 800e038:	20000fac 	.word	0x20000fac
 800e03c:	20000ea8 	.word	0x20000ea8
 800e040:	20000ea4 	.word	0x20000ea4
 800e044:	20000fb8 	.word	0x20000fb8
 800e048:	20000fb4 	.word	0x20000fb4
 800e04c:	e000ed04 	.word	0xe000ed04

0800e050 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b086      	sub	sp, #24
 800e054:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e056:	2300      	movs	r3, #0
 800e058:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e05a:	4b4e      	ldr	r3, [pc, #312]	; (800e194 <xTaskIncrementTick+0x144>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	f040 8087 	bne.w	800e172 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e064:	4b4c      	ldr	r3, [pc, #304]	; (800e198 <xTaskIncrementTick+0x148>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	3301      	adds	r3, #1
 800e06a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e06c:	4a4a      	ldr	r2, [pc, #296]	; (800e198 <xTaskIncrementTick+0x148>)
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d11f      	bne.n	800e0b8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800e078:	4b48      	ldr	r3, [pc, #288]	; (800e19c <xTaskIncrementTick+0x14c>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d009      	beq.n	800e096 <xTaskIncrementTick+0x46>
 800e082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e086:	f383 8811 	msr	BASEPRI, r3
 800e08a:	f3bf 8f6f 	isb	sy
 800e08e:	f3bf 8f4f 	dsb	sy
 800e092:	603b      	str	r3, [r7, #0]
 800e094:	e7fe      	b.n	800e094 <xTaskIncrementTick+0x44>
 800e096:	4b41      	ldr	r3, [pc, #260]	; (800e19c <xTaskIncrementTick+0x14c>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	60fb      	str	r3, [r7, #12]
 800e09c:	4b40      	ldr	r3, [pc, #256]	; (800e1a0 <xTaskIncrementTick+0x150>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a3e      	ldr	r2, [pc, #248]	; (800e19c <xTaskIncrementTick+0x14c>)
 800e0a2:	6013      	str	r3, [r2, #0]
 800e0a4:	4a3e      	ldr	r2, [pc, #248]	; (800e1a0 <xTaskIncrementTick+0x150>)
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6013      	str	r3, [r2, #0]
 800e0aa:	4b3e      	ldr	r3, [pc, #248]	; (800e1a4 <xTaskIncrementTick+0x154>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	3301      	adds	r3, #1
 800e0b0:	4a3c      	ldr	r2, [pc, #240]	; (800e1a4 <xTaskIncrementTick+0x154>)
 800e0b2:	6013      	str	r3, [r2, #0]
 800e0b4:	f000 f990 	bl	800e3d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e0b8:	4b3b      	ldr	r3, [pc, #236]	; (800e1a8 <xTaskIncrementTick+0x158>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	693a      	ldr	r2, [r7, #16]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d348      	bcc.n	800e154 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0c2:	4b36      	ldr	r3, [pc, #216]	; (800e19c <xTaskIncrementTick+0x14c>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d104      	bne.n	800e0d6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0cc:	4b36      	ldr	r3, [pc, #216]	; (800e1a8 <xTaskIncrementTick+0x158>)
 800e0ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0d2:	601a      	str	r2, [r3, #0]
					break;
 800e0d4:	e03e      	b.n	800e154 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0d6:	4b31      	ldr	r3, [pc, #196]	; (800e19c <xTaskIncrementTick+0x14c>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	68db      	ldr	r3, [r3, #12]
 800e0de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e0e6:	693a      	ldr	r2, [r7, #16]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d203      	bcs.n	800e0f6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e0ee:	4a2e      	ldr	r2, [pc, #184]	; (800e1a8 <xTaskIncrementTick+0x158>)
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e0f4:	e02e      	b.n	800e154 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	3304      	adds	r3, #4
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f7ff fcb2 	bl	800da64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e104:	2b00      	cmp	r3, #0
 800e106:	d004      	beq.n	800e112 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	3318      	adds	r3, #24
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7ff fca9 	bl	800da64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e116:	2201      	movs	r2, #1
 800e118:	409a      	lsls	r2, r3
 800e11a:	4b24      	ldr	r3, [pc, #144]	; (800e1ac <xTaskIncrementTick+0x15c>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	4313      	orrs	r3, r2
 800e120:	4a22      	ldr	r2, [pc, #136]	; (800e1ac <xTaskIncrementTick+0x15c>)
 800e122:	6013      	str	r3, [r2, #0]
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e128:	4613      	mov	r3, r2
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	4413      	add	r3, r2
 800e12e:	009b      	lsls	r3, r3, #2
 800e130:	4a1f      	ldr	r2, [pc, #124]	; (800e1b0 <xTaskIncrementTick+0x160>)
 800e132:	441a      	add	r2, r3
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	3304      	adds	r3, #4
 800e138:	4619      	mov	r1, r3
 800e13a:	4610      	mov	r0, r2
 800e13c:	f7ff fc35 	bl	800d9aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e144:	4b1b      	ldr	r3, [pc, #108]	; (800e1b4 <xTaskIncrementTick+0x164>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d3b9      	bcc.n	800e0c2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800e14e:	2301      	movs	r3, #1
 800e150:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e152:	e7b6      	b.n	800e0c2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e154:	4b17      	ldr	r3, [pc, #92]	; (800e1b4 <xTaskIncrementTick+0x164>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e15a:	4915      	ldr	r1, [pc, #84]	; (800e1b0 <xTaskIncrementTick+0x160>)
 800e15c:	4613      	mov	r3, r2
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	4413      	add	r3, r2
 800e162:	009b      	lsls	r3, r3, #2
 800e164:	440b      	add	r3, r1
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d907      	bls.n	800e17c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800e16c:	2301      	movs	r3, #1
 800e16e:	617b      	str	r3, [r7, #20]
 800e170:	e004      	b.n	800e17c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e172:	4b11      	ldr	r3, [pc, #68]	; (800e1b8 <xTaskIncrementTick+0x168>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	3301      	adds	r3, #1
 800e178:	4a0f      	ldr	r2, [pc, #60]	; (800e1b8 <xTaskIncrementTick+0x168>)
 800e17a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e17c:	4b0f      	ldr	r3, [pc, #60]	; (800e1bc <xTaskIncrementTick+0x16c>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d001      	beq.n	800e188 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800e184:	2301      	movs	r3, #1
 800e186:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e188:	697b      	ldr	r3, [r7, #20]
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3718      	adds	r7, #24
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	20000fcc 	.word	0x20000fcc
 800e198:	20000fa8 	.word	0x20000fa8
 800e19c:	20000f5c 	.word	0x20000f5c
 800e1a0:	20000f60 	.word	0x20000f60
 800e1a4:	20000fbc 	.word	0x20000fbc
 800e1a8:	20000fc4 	.word	0x20000fc4
 800e1ac:	20000fac 	.word	0x20000fac
 800e1b0:	20000ea8 	.word	0x20000ea8
 800e1b4:	20000ea4 	.word	0x20000ea4
 800e1b8:	20000fb4 	.word	0x20000fb4
 800e1bc:	20000fb8 	.word	0x20000fb8

0800e1c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b087      	sub	sp, #28
 800e1c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e1c6:	4b26      	ldr	r3, [pc, #152]	; (800e260 <vTaskSwitchContext+0xa0>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d003      	beq.n	800e1d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e1ce:	4b25      	ldr	r3, [pc, #148]	; (800e264 <vTaskSwitchContext+0xa4>)
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e1d4:	e03e      	b.n	800e254 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800e1d6:	4b23      	ldr	r3, [pc, #140]	; (800e264 <vTaskSwitchContext+0xa4>)
 800e1d8:	2200      	movs	r2, #0
 800e1da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1dc:	4b22      	ldr	r3, [pc, #136]	; (800e268 <vTaskSwitchContext+0xa8>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	fab3 f383 	clz	r3, r3
 800e1e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e1ea:	7afb      	ldrb	r3, [r7, #11]
 800e1ec:	f1c3 031f 	rsb	r3, r3, #31
 800e1f0:	617b      	str	r3, [r7, #20]
 800e1f2:	491e      	ldr	r1, [pc, #120]	; (800e26c <vTaskSwitchContext+0xac>)
 800e1f4:	697a      	ldr	r2, [r7, #20]
 800e1f6:	4613      	mov	r3, r2
 800e1f8:	009b      	lsls	r3, r3, #2
 800e1fa:	4413      	add	r3, r2
 800e1fc:	009b      	lsls	r3, r3, #2
 800e1fe:	440b      	add	r3, r1
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d109      	bne.n	800e21a <vTaskSwitchContext+0x5a>
	__asm volatile
 800e206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20a:	f383 8811 	msr	BASEPRI, r3
 800e20e:	f3bf 8f6f 	isb	sy
 800e212:	f3bf 8f4f 	dsb	sy
 800e216:	607b      	str	r3, [r7, #4]
 800e218:	e7fe      	b.n	800e218 <vTaskSwitchContext+0x58>
 800e21a:	697a      	ldr	r2, [r7, #20]
 800e21c:	4613      	mov	r3, r2
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	4413      	add	r3, r2
 800e222:	009b      	lsls	r3, r3, #2
 800e224:	4a11      	ldr	r2, [pc, #68]	; (800e26c <vTaskSwitchContext+0xac>)
 800e226:	4413      	add	r3, r2
 800e228:	613b      	str	r3, [r7, #16]
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	685a      	ldr	r2, [r3, #4]
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	605a      	str	r2, [r3, #4]
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	685a      	ldr	r2, [r3, #4]
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	3308      	adds	r3, #8
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d104      	bne.n	800e24a <vTaskSwitchContext+0x8a>
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	685a      	ldr	r2, [r3, #4]
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	605a      	str	r2, [r3, #4]
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	685b      	ldr	r3, [r3, #4]
 800e24e:	68db      	ldr	r3, [r3, #12]
 800e250:	4a07      	ldr	r2, [pc, #28]	; (800e270 <vTaskSwitchContext+0xb0>)
 800e252:	6013      	str	r3, [r2, #0]
}
 800e254:	bf00      	nop
 800e256:	371c      	adds	r7, #28
 800e258:	46bd      	mov	sp, r7
 800e25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25e:	4770      	bx	lr
 800e260:	20000fcc 	.word	0x20000fcc
 800e264:	20000fb8 	.word	0x20000fb8
 800e268:	20000fac 	.word	0x20000fac
 800e26c:	20000ea8 	.word	0x20000ea8
 800e270:	20000ea4 	.word	0x20000ea4

0800e274 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b082      	sub	sp, #8
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e27c:	f000 f852 	bl	800e324 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e280:	4b06      	ldr	r3, [pc, #24]	; (800e29c <prvIdleTask+0x28>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	2b01      	cmp	r3, #1
 800e286:	d9f9      	bls.n	800e27c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e288:	4b05      	ldr	r3, [pc, #20]	; (800e2a0 <prvIdleTask+0x2c>)
 800e28a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e28e:	601a      	str	r2, [r3, #0]
 800e290:	f3bf 8f4f 	dsb	sy
 800e294:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e298:	e7f0      	b.n	800e27c <prvIdleTask+0x8>
 800e29a:	bf00      	nop
 800e29c:	20000ea8 	.word	0x20000ea8
 800e2a0:	e000ed04 	.word	0xe000ed04

0800e2a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b082      	sub	sp, #8
 800e2a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	607b      	str	r3, [r7, #4]
 800e2ae:	e00c      	b.n	800e2ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e2b0:	687a      	ldr	r2, [r7, #4]
 800e2b2:	4613      	mov	r3, r2
 800e2b4:	009b      	lsls	r3, r3, #2
 800e2b6:	4413      	add	r3, r2
 800e2b8:	009b      	lsls	r3, r3, #2
 800e2ba:	4a12      	ldr	r2, [pc, #72]	; (800e304 <prvInitialiseTaskLists+0x60>)
 800e2bc:	4413      	add	r3, r2
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f7ff fb46 	bl	800d950 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	607b      	str	r3, [r7, #4]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2b06      	cmp	r3, #6
 800e2ce:	d9ef      	bls.n	800e2b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e2d0:	480d      	ldr	r0, [pc, #52]	; (800e308 <prvInitialiseTaskLists+0x64>)
 800e2d2:	f7ff fb3d 	bl	800d950 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e2d6:	480d      	ldr	r0, [pc, #52]	; (800e30c <prvInitialiseTaskLists+0x68>)
 800e2d8:	f7ff fb3a 	bl	800d950 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e2dc:	480c      	ldr	r0, [pc, #48]	; (800e310 <prvInitialiseTaskLists+0x6c>)
 800e2de:	f7ff fb37 	bl	800d950 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e2e2:	480c      	ldr	r0, [pc, #48]	; (800e314 <prvInitialiseTaskLists+0x70>)
 800e2e4:	f7ff fb34 	bl	800d950 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e2e8:	480b      	ldr	r0, [pc, #44]	; (800e318 <prvInitialiseTaskLists+0x74>)
 800e2ea:	f7ff fb31 	bl	800d950 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e2ee:	4b0b      	ldr	r3, [pc, #44]	; (800e31c <prvInitialiseTaskLists+0x78>)
 800e2f0:	4a05      	ldr	r2, [pc, #20]	; (800e308 <prvInitialiseTaskLists+0x64>)
 800e2f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e2f4:	4b0a      	ldr	r3, [pc, #40]	; (800e320 <prvInitialiseTaskLists+0x7c>)
 800e2f6:	4a05      	ldr	r2, [pc, #20]	; (800e30c <prvInitialiseTaskLists+0x68>)
 800e2f8:	601a      	str	r2, [r3, #0]
}
 800e2fa:	bf00      	nop
 800e2fc:	3708      	adds	r7, #8
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	20000ea8 	.word	0x20000ea8
 800e308:	20000f34 	.word	0x20000f34
 800e30c:	20000f48 	.word	0x20000f48
 800e310:	20000f64 	.word	0x20000f64
 800e314:	20000f78 	.word	0x20000f78
 800e318:	20000f90 	.word	0x20000f90
 800e31c:	20000f5c 	.word	0x20000f5c
 800e320:	20000f60 	.word	0x20000f60

0800e324 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e32a:	e019      	b.n	800e360 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e32c:	f000 f9fe 	bl	800e72c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e330:	4b0f      	ldr	r3, [pc, #60]	; (800e370 <prvCheckTasksWaitingTermination+0x4c>)
 800e332:	68db      	ldr	r3, [r3, #12]
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	3304      	adds	r3, #4
 800e33c:	4618      	mov	r0, r3
 800e33e:	f7ff fb91 	bl	800da64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e342:	4b0c      	ldr	r3, [pc, #48]	; (800e374 <prvCheckTasksWaitingTermination+0x50>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	3b01      	subs	r3, #1
 800e348:	4a0a      	ldr	r2, [pc, #40]	; (800e374 <prvCheckTasksWaitingTermination+0x50>)
 800e34a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e34c:	4b0a      	ldr	r3, [pc, #40]	; (800e378 <prvCheckTasksWaitingTermination+0x54>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	3b01      	subs	r3, #1
 800e352:	4a09      	ldr	r2, [pc, #36]	; (800e378 <prvCheckTasksWaitingTermination+0x54>)
 800e354:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e356:	f000 fa17 	bl	800e788 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f000 f80e 	bl	800e37c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e360:	4b05      	ldr	r3, [pc, #20]	; (800e378 <prvCheckTasksWaitingTermination+0x54>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d1e1      	bne.n	800e32c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e368:	bf00      	nop
 800e36a:	3708      	adds	r7, #8
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}
 800e370:	20000f78 	.word	0x20000f78
 800e374:	20000fa4 	.word	0x20000fa4
 800e378:	20000f8c 	.word	0x20000f8c

0800e37c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b084      	sub	sp, #16
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d108      	bne.n	800e3a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e392:	4618      	mov	r0, r3
 800e394:	f000 fb68 	bl	800ea68 <vPortFree>
				vPortFree( pxTCB );
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f000 fb65 	bl	800ea68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e39e:	e017      	b.n	800e3d0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d103      	bne.n	800e3b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f000 fb5c 	bl	800ea68 <vPortFree>
	}
 800e3b0:	e00e      	b.n	800e3d0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e3b8:	2b02      	cmp	r3, #2
 800e3ba:	d009      	beq.n	800e3d0 <prvDeleteTCB+0x54>
 800e3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c0:	f383 8811 	msr	BASEPRI, r3
 800e3c4:	f3bf 8f6f 	isb	sy
 800e3c8:	f3bf 8f4f 	dsb	sy
 800e3cc:	60fb      	str	r3, [r7, #12]
 800e3ce:	e7fe      	b.n	800e3ce <prvDeleteTCB+0x52>
	}
 800e3d0:	bf00      	nop
 800e3d2:	3710      	adds	r7, #16
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}

0800e3d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b083      	sub	sp, #12
 800e3dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3de:	4b0c      	ldr	r3, [pc, #48]	; (800e410 <prvResetNextTaskUnblockTime+0x38>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d104      	bne.n	800e3f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e3e8:	4b0a      	ldr	r3, [pc, #40]	; (800e414 <prvResetNextTaskUnblockTime+0x3c>)
 800e3ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e3ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e3f0:	e008      	b.n	800e404 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3f2:	4b07      	ldr	r3, [pc, #28]	; (800e410 <prvResetNextTaskUnblockTime+0x38>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	68db      	ldr	r3, [r3, #12]
 800e3f8:	68db      	ldr	r3, [r3, #12]
 800e3fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	4a04      	ldr	r2, [pc, #16]	; (800e414 <prvResetNextTaskUnblockTime+0x3c>)
 800e402:	6013      	str	r3, [r2, #0]
}
 800e404:	bf00      	nop
 800e406:	370c      	adds	r7, #12
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr
 800e410:	20000f5c 	.word	0x20000f5c
 800e414:	20000fc4 	.word	0x20000fc4

0800e418 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b084      	sub	sp, #16
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e422:	4b29      	ldr	r3, [pc, #164]	; (800e4c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e428:	4b28      	ldr	r3, [pc, #160]	; (800e4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	3304      	adds	r3, #4
 800e42e:	4618      	mov	r0, r3
 800e430:	f7ff fb18 	bl	800da64 <uxListRemove>
 800e434:	4603      	mov	r3, r0
 800e436:	2b00      	cmp	r3, #0
 800e438:	d10b      	bne.n	800e452 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e43a:	4b24      	ldr	r3, [pc, #144]	; (800e4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e440:	2201      	movs	r2, #1
 800e442:	fa02 f303 	lsl.w	r3, r2, r3
 800e446:	43da      	mvns	r2, r3
 800e448:	4b21      	ldr	r3, [pc, #132]	; (800e4d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4013      	ands	r3, r2
 800e44e:	4a20      	ldr	r2, [pc, #128]	; (800e4d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e450:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e458:	d10a      	bne.n	800e470 <prvAddCurrentTaskToDelayedList+0x58>
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d007      	beq.n	800e470 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e460:	4b1a      	ldr	r3, [pc, #104]	; (800e4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	3304      	adds	r3, #4
 800e466:	4619      	mov	r1, r3
 800e468:	481a      	ldr	r0, [pc, #104]	; (800e4d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e46a:	f7ff fa9e 	bl	800d9aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e46e:	e026      	b.n	800e4be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e470:	68fa      	ldr	r2, [r7, #12]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	4413      	add	r3, r2
 800e476:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e478:	4b14      	ldr	r3, [pc, #80]	; (800e4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	68ba      	ldr	r2, [r7, #8]
 800e47e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e480:	68ba      	ldr	r2, [r7, #8]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	429a      	cmp	r2, r3
 800e486:	d209      	bcs.n	800e49c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e488:	4b13      	ldr	r3, [pc, #76]	; (800e4d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	4b0f      	ldr	r3, [pc, #60]	; (800e4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	3304      	adds	r3, #4
 800e492:	4619      	mov	r1, r3
 800e494:	4610      	mov	r0, r2
 800e496:	f7ff faac 	bl	800d9f2 <vListInsert>
}
 800e49a:	e010      	b.n	800e4be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e49c:	4b0f      	ldr	r3, [pc, #60]	; (800e4dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800e49e:	681a      	ldr	r2, [r3, #0]
 800e4a0:	4b0a      	ldr	r3, [pc, #40]	; (800e4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	3304      	adds	r3, #4
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	4610      	mov	r0, r2
 800e4aa:	f7ff faa2 	bl	800d9f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e4ae:	4b0c      	ldr	r3, [pc, #48]	; (800e4e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	68ba      	ldr	r2, [r7, #8]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d202      	bcs.n	800e4be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e4b8:	4a09      	ldr	r2, [pc, #36]	; (800e4e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	6013      	str	r3, [r2, #0]
}
 800e4be:	bf00      	nop
 800e4c0:	3710      	adds	r7, #16
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
 800e4c6:	bf00      	nop
 800e4c8:	20000fa8 	.word	0x20000fa8
 800e4cc:	20000ea4 	.word	0x20000ea4
 800e4d0:	20000fac 	.word	0x20000fac
 800e4d4:	20000f90 	.word	0x20000f90
 800e4d8:	20000f60 	.word	0x20000f60
 800e4dc:	20000f5c 	.word	0x20000f5c
 800e4e0:	20000fc4 	.word	0x20000fc4

0800e4e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b085      	sub	sp, #20
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	60f8      	str	r0, [r7, #12]
 800e4ec:	60b9      	str	r1, [r7, #8]
 800e4ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	3b04      	subs	r3, #4
 800e4f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e4fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	3b04      	subs	r3, #4
 800e502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	f023 0201 	bic.w	r2, r3, #1
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	3b04      	subs	r3, #4
 800e512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e514:	4a0c      	ldr	r2, [pc, #48]	; (800e548 <pxPortInitialiseStack+0x64>)
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	3b14      	subs	r3, #20
 800e51e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	3b04      	subs	r3, #4
 800e52a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f06f 0202 	mvn.w	r2, #2
 800e532:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	3b20      	subs	r3, #32
 800e538:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e53a:	68fb      	ldr	r3, [r7, #12]
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	3714      	adds	r7, #20
 800e540:	46bd      	mov	sp, r7
 800e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e546:	4770      	bx	lr
 800e548:	0800e54d 	.word	0x0800e54d

0800e54c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e54c:	b480      	push	{r7}
 800e54e:	b085      	sub	sp, #20
 800e550:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e552:	2300      	movs	r3, #0
 800e554:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e556:	4b11      	ldr	r3, [pc, #68]	; (800e59c <prvTaskExitError+0x50>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e55e:	d009      	beq.n	800e574 <prvTaskExitError+0x28>
 800e560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e564:	f383 8811 	msr	BASEPRI, r3
 800e568:	f3bf 8f6f 	isb	sy
 800e56c:	f3bf 8f4f 	dsb	sy
 800e570:	60fb      	str	r3, [r7, #12]
 800e572:	e7fe      	b.n	800e572 <prvTaskExitError+0x26>
 800e574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e578:	f383 8811 	msr	BASEPRI, r3
 800e57c:	f3bf 8f6f 	isb	sy
 800e580:	f3bf 8f4f 	dsb	sy
 800e584:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e586:	bf00      	nop
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d0fc      	beq.n	800e588 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e58e:	bf00      	nop
 800e590:	3714      	adds	r7, #20
 800e592:	46bd      	mov	sp, r7
 800e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e598:	4770      	bx	lr
 800e59a:	bf00      	nop
 800e59c:	20000124 	.word	0x20000124

0800e5a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e5a0:	4b07      	ldr	r3, [pc, #28]	; (800e5c0 <pxCurrentTCBConst2>)
 800e5a2:	6819      	ldr	r1, [r3, #0]
 800e5a4:	6808      	ldr	r0, [r1, #0]
 800e5a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5aa:	f380 8809 	msr	PSP, r0
 800e5ae:	f3bf 8f6f 	isb	sy
 800e5b2:	f04f 0000 	mov.w	r0, #0
 800e5b6:	f380 8811 	msr	BASEPRI, r0
 800e5ba:	4770      	bx	lr
 800e5bc:	f3af 8000 	nop.w

0800e5c0 <pxCurrentTCBConst2>:
 800e5c0:	20000ea4 	.word	0x20000ea4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e5c4:	bf00      	nop
 800e5c6:	bf00      	nop

0800e5c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e5c8:	4808      	ldr	r0, [pc, #32]	; (800e5ec <prvPortStartFirstTask+0x24>)
 800e5ca:	6800      	ldr	r0, [r0, #0]
 800e5cc:	6800      	ldr	r0, [r0, #0]
 800e5ce:	f380 8808 	msr	MSP, r0
 800e5d2:	f04f 0000 	mov.w	r0, #0
 800e5d6:	f380 8814 	msr	CONTROL, r0
 800e5da:	b662      	cpsie	i
 800e5dc:	b661      	cpsie	f
 800e5de:	f3bf 8f4f 	dsb	sy
 800e5e2:	f3bf 8f6f 	isb	sy
 800e5e6:	df00      	svc	0
 800e5e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e5ea:	bf00      	nop
 800e5ec:	e000ed08 	.word	0xe000ed08

0800e5f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b086      	sub	sp, #24
 800e5f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e5f6:	4b44      	ldr	r3, [pc, #272]	; (800e708 <xPortStartScheduler+0x118>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	4a44      	ldr	r2, [pc, #272]	; (800e70c <xPortStartScheduler+0x11c>)
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d109      	bne.n	800e614 <xPortStartScheduler+0x24>
 800e600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e604:	f383 8811 	msr	BASEPRI, r3
 800e608:	f3bf 8f6f 	isb	sy
 800e60c:	f3bf 8f4f 	dsb	sy
 800e610:	613b      	str	r3, [r7, #16]
 800e612:	e7fe      	b.n	800e612 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e614:	4b3c      	ldr	r3, [pc, #240]	; (800e708 <xPortStartScheduler+0x118>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	4a3d      	ldr	r2, [pc, #244]	; (800e710 <xPortStartScheduler+0x120>)
 800e61a:	4293      	cmp	r3, r2
 800e61c:	d109      	bne.n	800e632 <xPortStartScheduler+0x42>
 800e61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e622:	f383 8811 	msr	BASEPRI, r3
 800e626:	f3bf 8f6f 	isb	sy
 800e62a:	f3bf 8f4f 	dsb	sy
 800e62e:	60fb      	str	r3, [r7, #12]
 800e630:	e7fe      	b.n	800e630 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e632:	4b38      	ldr	r3, [pc, #224]	; (800e714 <xPortStartScheduler+0x124>)
 800e634:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	22ff      	movs	r2, #255	; 0xff
 800e642:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	b2db      	uxtb	r3, r3
 800e64a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e64c:	78fb      	ldrb	r3, [r7, #3]
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e654:	b2da      	uxtb	r2, r3
 800e656:	4b30      	ldr	r3, [pc, #192]	; (800e718 <xPortStartScheduler+0x128>)
 800e658:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e65a:	4b30      	ldr	r3, [pc, #192]	; (800e71c <xPortStartScheduler+0x12c>)
 800e65c:	2207      	movs	r2, #7
 800e65e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e660:	e009      	b.n	800e676 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800e662:	4b2e      	ldr	r3, [pc, #184]	; (800e71c <xPortStartScheduler+0x12c>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	3b01      	subs	r3, #1
 800e668:	4a2c      	ldr	r2, [pc, #176]	; (800e71c <xPortStartScheduler+0x12c>)
 800e66a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e66c:	78fb      	ldrb	r3, [r7, #3]
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	005b      	lsls	r3, r3, #1
 800e672:	b2db      	uxtb	r3, r3
 800e674:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e676:	78fb      	ldrb	r3, [r7, #3]
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e67e:	2b80      	cmp	r3, #128	; 0x80
 800e680:	d0ef      	beq.n	800e662 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e682:	4b26      	ldr	r3, [pc, #152]	; (800e71c <xPortStartScheduler+0x12c>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f1c3 0307 	rsb	r3, r3, #7
 800e68a:	2b04      	cmp	r3, #4
 800e68c:	d009      	beq.n	800e6a2 <xPortStartScheduler+0xb2>
 800e68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e692:	f383 8811 	msr	BASEPRI, r3
 800e696:	f3bf 8f6f 	isb	sy
 800e69a:	f3bf 8f4f 	dsb	sy
 800e69e:	60bb      	str	r3, [r7, #8]
 800e6a0:	e7fe      	b.n	800e6a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e6a2:	4b1e      	ldr	r3, [pc, #120]	; (800e71c <xPortStartScheduler+0x12c>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	021b      	lsls	r3, r3, #8
 800e6a8:	4a1c      	ldr	r2, [pc, #112]	; (800e71c <xPortStartScheduler+0x12c>)
 800e6aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6ac:	4b1b      	ldr	r3, [pc, #108]	; (800e71c <xPortStartScheduler+0x12c>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e6b4:	4a19      	ldr	r2, [pc, #100]	; (800e71c <xPortStartScheduler+0x12c>)
 800e6b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	b2da      	uxtb	r2, r3
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e6c0:	4b17      	ldr	r3, [pc, #92]	; (800e720 <xPortStartScheduler+0x130>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4a16      	ldr	r2, [pc, #88]	; (800e720 <xPortStartScheduler+0x130>)
 800e6c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e6ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e6cc:	4b14      	ldr	r3, [pc, #80]	; (800e720 <xPortStartScheduler+0x130>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a13      	ldr	r2, [pc, #76]	; (800e720 <xPortStartScheduler+0x130>)
 800e6d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e6d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e6d8:	f000 f8d6 	bl	800e888 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e6dc:	4b11      	ldr	r3, [pc, #68]	; (800e724 <xPortStartScheduler+0x134>)
 800e6de:	2200      	movs	r2, #0
 800e6e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e6e2:	f000 f8f5 	bl	800e8d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e6e6:	4b10      	ldr	r3, [pc, #64]	; (800e728 <xPortStartScheduler+0x138>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	4a0f      	ldr	r2, [pc, #60]	; (800e728 <xPortStartScheduler+0x138>)
 800e6ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e6f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e6f2:	f7ff ff69 	bl	800e5c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e6f6:	f7ff fd63 	bl	800e1c0 <vTaskSwitchContext>
	prvTaskExitError();
 800e6fa:	f7ff ff27 	bl	800e54c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e6fe:	2300      	movs	r3, #0
}
 800e700:	4618      	mov	r0, r3
 800e702:	3718      	adds	r7, #24
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}
 800e708:	e000ed00 	.word	0xe000ed00
 800e70c:	410fc271 	.word	0x410fc271
 800e710:	410fc270 	.word	0x410fc270
 800e714:	e000e400 	.word	0xe000e400
 800e718:	20000fd0 	.word	0x20000fd0
 800e71c:	20000fd4 	.word	0x20000fd4
 800e720:	e000ed20 	.word	0xe000ed20
 800e724:	20000124 	.word	0x20000124
 800e728:	e000ef34 	.word	0xe000ef34

0800e72c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
 800e732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e736:	f383 8811 	msr	BASEPRI, r3
 800e73a:	f3bf 8f6f 	isb	sy
 800e73e:	f3bf 8f4f 	dsb	sy
 800e742:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e744:	4b0e      	ldr	r3, [pc, #56]	; (800e780 <vPortEnterCritical+0x54>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	3301      	adds	r3, #1
 800e74a:	4a0d      	ldr	r2, [pc, #52]	; (800e780 <vPortEnterCritical+0x54>)
 800e74c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e74e:	4b0c      	ldr	r3, [pc, #48]	; (800e780 <vPortEnterCritical+0x54>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	2b01      	cmp	r3, #1
 800e754:	d10e      	bne.n	800e774 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e756:	4b0b      	ldr	r3, [pc, #44]	; (800e784 <vPortEnterCritical+0x58>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d009      	beq.n	800e774 <vPortEnterCritical+0x48>
 800e760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e764:	f383 8811 	msr	BASEPRI, r3
 800e768:	f3bf 8f6f 	isb	sy
 800e76c:	f3bf 8f4f 	dsb	sy
 800e770:	603b      	str	r3, [r7, #0]
 800e772:	e7fe      	b.n	800e772 <vPortEnterCritical+0x46>
	}
}
 800e774:	bf00      	nop
 800e776:	370c      	adds	r7, #12
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr
 800e780:	20000124 	.word	0x20000124
 800e784:	e000ed04 	.word	0xe000ed04

0800e788 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e788:	b480      	push	{r7}
 800e78a:	b083      	sub	sp, #12
 800e78c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e78e:	4b11      	ldr	r3, [pc, #68]	; (800e7d4 <vPortExitCritical+0x4c>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d109      	bne.n	800e7aa <vPortExitCritical+0x22>
 800e796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e79a:	f383 8811 	msr	BASEPRI, r3
 800e79e:	f3bf 8f6f 	isb	sy
 800e7a2:	f3bf 8f4f 	dsb	sy
 800e7a6:	607b      	str	r3, [r7, #4]
 800e7a8:	e7fe      	b.n	800e7a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800e7aa:	4b0a      	ldr	r3, [pc, #40]	; (800e7d4 <vPortExitCritical+0x4c>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	3b01      	subs	r3, #1
 800e7b0:	4a08      	ldr	r2, [pc, #32]	; (800e7d4 <vPortExitCritical+0x4c>)
 800e7b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e7b4:	4b07      	ldr	r3, [pc, #28]	; (800e7d4 <vPortExitCritical+0x4c>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d104      	bne.n	800e7c6 <vPortExitCritical+0x3e>
 800e7bc:	2300      	movs	r3, #0
 800e7be:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e7c6:	bf00      	nop
 800e7c8:	370c      	adds	r7, #12
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop
 800e7d4:	20000124 	.word	0x20000124
	...

0800e7e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e7e0:	f3ef 8009 	mrs	r0, PSP
 800e7e4:	f3bf 8f6f 	isb	sy
 800e7e8:	4b15      	ldr	r3, [pc, #84]	; (800e840 <pxCurrentTCBConst>)
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	f01e 0f10 	tst.w	lr, #16
 800e7f0:	bf08      	it	eq
 800e7f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e7f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7fa:	6010      	str	r0, [r2, #0]
 800e7fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e800:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e804:	f380 8811 	msr	BASEPRI, r0
 800e808:	f3bf 8f4f 	dsb	sy
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	f7ff fcd6 	bl	800e1c0 <vTaskSwitchContext>
 800e814:	f04f 0000 	mov.w	r0, #0
 800e818:	f380 8811 	msr	BASEPRI, r0
 800e81c:	bc09      	pop	{r0, r3}
 800e81e:	6819      	ldr	r1, [r3, #0]
 800e820:	6808      	ldr	r0, [r1, #0]
 800e822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e826:	f01e 0f10 	tst.w	lr, #16
 800e82a:	bf08      	it	eq
 800e82c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e830:	f380 8809 	msr	PSP, r0
 800e834:	f3bf 8f6f 	isb	sy
 800e838:	4770      	bx	lr
 800e83a:	bf00      	nop
 800e83c:	f3af 8000 	nop.w

0800e840 <pxCurrentTCBConst>:
 800e840:	20000ea4 	.word	0x20000ea4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e844:	bf00      	nop
 800e846:	bf00      	nop

0800e848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
	__asm volatile
 800e84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e852:	f383 8811 	msr	BASEPRI, r3
 800e856:	f3bf 8f6f 	isb	sy
 800e85a:	f3bf 8f4f 	dsb	sy
 800e85e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e860:	f7ff fbf6 	bl	800e050 <xTaskIncrementTick>
 800e864:	4603      	mov	r3, r0
 800e866:	2b00      	cmp	r3, #0
 800e868:	d003      	beq.n	800e872 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e86a:	4b06      	ldr	r3, [pc, #24]	; (800e884 <SysTick_Handler+0x3c>)
 800e86c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e870:	601a      	str	r2, [r3, #0]
 800e872:	2300      	movs	r3, #0
 800e874:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e87c:	bf00      	nop
 800e87e:	3708      	adds	r7, #8
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}
 800e884:	e000ed04 	.word	0xe000ed04

0800e888 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e888:	b480      	push	{r7}
 800e88a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e88c:	4b0b      	ldr	r3, [pc, #44]	; (800e8bc <vPortSetupTimerInterrupt+0x34>)
 800e88e:	2200      	movs	r2, #0
 800e890:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e892:	4b0b      	ldr	r3, [pc, #44]	; (800e8c0 <vPortSetupTimerInterrupt+0x38>)
 800e894:	2200      	movs	r2, #0
 800e896:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e898:	4b0a      	ldr	r3, [pc, #40]	; (800e8c4 <vPortSetupTimerInterrupt+0x3c>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	4a0a      	ldr	r2, [pc, #40]	; (800e8c8 <vPortSetupTimerInterrupt+0x40>)
 800e89e:	fba2 2303 	umull	r2, r3, r2, r3
 800e8a2:	099b      	lsrs	r3, r3, #6
 800e8a4:	4a09      	ldr	r2, [pc, #36]	; (800e8cc <vPortSetupTimerInterrupt+0x44>)
 800e8a6:	3b01      	subs	r3, #1
 800e8a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e8aa:	4b04      	ldr	r3, [pc, #16]	; (800e8bc <vPortSetupTimerInterrupt+0x34>)
 800e8ac:	2207      	movs	r2, #7
 800e8ae:	601a      	str	r2, [r3, #0]
}
 800e8b0:	bf00      	nop
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b8:	4770      	bx	lr
 800e8ba:	bf00      	nop
 800e8bc:	e000e010 	.word	0xe000e010
 800e8c0:	e000e018 	.word	0xe000e018
 800e8c4:	20000008 	.word	0x20000008
 800e8c8:	10624dd3 	.word	0x10624dd3
 800e8cc:	e000e014 	.word	0xe000e014

0800e8d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e8d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e8e0 <vPortEnableVFP+0x10>
 800e8d4:	6801      	ldr	r1, [r0, #0]
 800e8d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e8da:	6001      	str	r1, [r0, #0]
 800e8dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e8de:	bf00      	nop
 800e8e0:	e000ed88 	.word	0xe000ed88

0800e8e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b08a      	sub	sp, #40	; 0x28
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e8f0:	f7ff fb04 	bl	800defc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e8f4:	4b57      	ldr	r3, [pc, #348]	; (800ea54 <pvPortMalloc+0x170>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d101      	bne.n	800e900 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e8fc:	f000 f90c 	bl	800eb18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e900:	4b55      	ldr	r3, [pc, #340]	; (800ea58 <pvPortMalloc+0x174>)
 800e902:	681a      	ldr	r2, [r3, #0]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	4013      	ands	r3, r2
 800e908:	2b00      	cmp	r3, #0
 800e90a:	f040 808c 	bne.w	800ea26 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d01c      	beq.n	800e94e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800e914:	2208      	movs	r2, #8
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	4413      	add	r3, r2
 800e91a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f003 0307 	and.w	r3, r3, #7
 800e922:	2b00      	cmp	r3, #0
 800e924:	d013      	beq.n	800e94e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f023 0307 	bic.w	r3, r3, #7
 800e92c:	3308      	adds	r3, #8
 800e92e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f003 0307 	and.w	r3, r3, #7
 800e936:	2b00      	cmp	r3, #0
 800e938:	d009      	beq.n	800e94e <pvPortMalloc+0x6a>
	__asm volatile
 800e93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e93e:	f383 8811 	msr	BASEPRI, r3
 800e942:	f3bf 8f6f 	isb	sy
 800e946:	f3bf 8f4f 	dsb	sy
 800e94a:	617b      	str	r3, [r7, #20]
 800e94c:	e7fe      	b.n	800e94c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d068      	beq.n	800ea26 <pvPortMalloc+0x142>
 800e954:	4b41      	ldr	r3, [pc, #260]	; (800ea5c <pvPortMalloc+0x178>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d863      	bhi.n	800ea26 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e95e:	4b40      	ldr	r3, [pc, #256]	; (800ea60 <pvPortMalloc+0x17c>)
 800e960:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e962:	4b3f      	ldr	r3, [pc, #252]	; (800ea60 <pvPortMalloc+0x17c>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e968:	e004      	b.n	800e974 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800e96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	687a      	ldr	r2, [r7, #4]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d903      	bls.n	800e986 <pvPortMalloc+0xa2>
 800e97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d1f1      	bne.n	800e96a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e986:	4b33      	ldr	r3, [pc, #204]	; (800ea54 <pvPortMalloc+0x170>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d04a      	beq.n	800ea26 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e990:	6a3b      	ldr	r3, [r7, #32]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	2208      	movs	r2, #8
 800e996:	4413      	add	r3, r2
 800e998:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99c:	681a      	ldr	r2, [r3, #0]
 800e99e:	6a3b      	ldr	r3, [r7, #32]
 800e9a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a4:	685a      	ldr	r2, [r3, #4]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	1ad2      	subs	r2, r2, r3
 800e9aa:	2308      	movs	r3, #8
 800e9ac:	005b      	lsls	r3, r3, #1
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d91e      	bls.n	800e9f0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e9b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	4413      	add	r3, r2
 800e9b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9ba:	69bb      	ldr	r3, [r7, #24]
 800e9bc:	f003 0307 	and.w	r3, r3, #7
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d009      	beq.n	800e9d8 <pvPortMalloc+0xf4>
 800e9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c8:	f383 8811 	msr	BASEPRI, r3
 800e9cc:	f3bf 8f6f 	isb	sy
 800e9d0:	f3bf 8f4f 	dsb	sy
 800e9d4:	613b      	str	r3, [r7, #16]
 800e9d6:	e7fe      	b.n	800e9d6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9da:	685a      	ldr	r2, [r3, #4]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	1ad2      	subs	r2, r2, r3
 800e9e0:	69bb      	ldr	r3, [r7, #24]
 800e9e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e6:	687a      	ldr	r2, [r7, #4]
 800e9e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e9ea:	69b8      	ldr	r0, [r7, #24]
 800e9ec:	f000 f8f6 	bl	800ebdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e9f0:	4b1a      	ldr	r3, [pc, #104]	; (800ea5c <pvPortMalloc+0x178>)
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	1ad3      	subs	r3, r2, r3
 800e9fa:	4a18      	ldr	r2, [pc, #96]	; (800ea5c <pvPortMalloc+0x178>)
 800e9fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e9fe:	4b17      	ldr	r3, [pc, #92]	; (800ea5c <pvPortMalloc+0x178>)
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	4b18      	ldr	r3, [pc, #96]	; (800ea64 <pvPortMalloc+0x180>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d203      	bcs.n	800ea12 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ea0a:	4b14      	ldr	r3, [pc, #80]	; (800ea5c <pvPortMalloc+0x178>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	4a15      	ldr	r2, [pc, #84]	; (800ea64 <pvPortMalloc+0x180>)
 800ea10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ea12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea14:	685a      	ldr	r2, [r3, #4]
 800ea16:	4b10      	ldr	r3, [pc, #64]	; (800ea58 <pvPortMalloc+0x174>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	431a      	orrs	r2, r3
 800ea1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ea20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea22:	2200      	movs	r2, #0
 800ea24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ea26:	f7ff fa77 	bl	800df18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea2a:	69fb      	ldr	r3, [r7, #28]
 800ea2c:	f003 0307 	and.w	r3, r3, #7
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d009      	beq.n	800ea48 <pvPortMalloc+0x164>
 800ea34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea38:	f383 8811 	msr	BASEPRI, r3
 800ea3c:	f3bf 8f6f 	isb	sy
 800ea40:	f3bf 8f4f 	dsb	sy
 800ea44:	60fb      	str	r3, [r7, #12]
 800ea46:	e7fe      	b.n	800ea46 <pvPortMalloc+0x162>
	return pvReturn;
 800ea48:	69fb      	ldr	r3, [r7, #28]
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3728      	adds	r7, #40	; 0x28
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	20004be0 	.word	0x20004be0
 800ea58:	20004bec 	.word	0x20004bec
 800ea5c:	20004be4 	.word	0x20004be4
 800ea60:	20004bd8 	.word	0x20004bd8
 800ea64:	20004be8 	.word	0x20004be8

0800ea68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b086      	sub	sp, #24
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d046      	beq.n	800eb08 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ea7a:	2308      	movs	r3, #8
 800ea7c:	425b      	negs	r3, r3
 800ea7e:	697a      	ldr	r2, [r7, #20]
 800ea80:	4413      	add	r3, r2
 800ea82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	685a      	ldr	r2, [r3, #4]
 800ea8c:	4b20      	ldr	r3, [pc, #128]	; (800eb10 <vPortFree+0xa8>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4013      	ands	r3, r2
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d109      	bne.n	800eaaa <vPortFree+0x42>
 800ea96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea9a:	f383 8811 	msr	BASEPRI, r3
 800ea9e:	f3bf 8f6f 	isb	sy
 800eaa2:	f3bf 8f4f 	dsb	sy
 800eaa6:	60fb      	str	r3, [r7, #12]
 800eaa8:	e7fe      	b.n	800eaa8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d009      	beq.n	800eac6 <vPortFree+0x5e>
 800eab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab6:	f383 8811 	msr	BASEPRI, r3
 800eaba:	f3bf 8f6f 	isb	sy
 800eabe:	f3bf 8f4f 	dsb	sy
 800eac2:	60bb      	str	r3, [r7, #8]
 800eac4:	e7fe      	b.n	800eac4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	685a      	ldr	r2, [r3, #4]
 800eaca:	4b11      	ldr	r3, [pc, #68]	; (800eb10 <vPortFree+0xa8>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	4013      	ands	r3, r2
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d019      	beq.n	800eb08 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d115      	bne.n	800eb08 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	685a      	ldr	r2, [r3, #4]
 800eae0:	4b0b      	ldr	r3, [pc, #44]	; (800eb10 <vPortFree+0xa8>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	43db      	mvns	r3, r3
 800eae6:	401a      	ands	r2, r3
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eaec:	f7ff fa06 	bl	800defc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	685a      	ldr	r2, [r3, #4]
 800eaf4:	4b07      	ldr	r3, [pc, #28]	; (800eb14 <vPortFree+0xac>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4413      	add	r3, r2
 800eafa:	4a06      	ldr	r2, [pc, #24]	; (800eb14 <vPortFree+0xac>)
 800eafc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eafe:	6938      	ldr	r0, [r7, #16]
 800eb00:	f000 f86c 	bl	800ebdc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eb04:	f7ff fa08 	bl	800df18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eb08:	bf00      	nop
 800eb0a:	3718      	adds	r7, #24
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	20004bec 	.word	0x20004bec
 800eb14:	20004be4 	.word	0x20004be4

0800eb18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b085      	sub	sp, #20
 800eb1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eb1e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800eb22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eb24:	4b27      	ldr	r3, [pc, #156]	; (800ebc4 <prvHeapInit+0xac>)
 800eb26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f003 0307 	and.w	r3, r3, #7
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d00c      	beq.n	800eb4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	3307      	adds	r3, #7
 800eb36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	f023 0307 	bic.w	r3, r3, #7
 800eb3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eb40:	68ba      	ldr	r2, [r7, #8]
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	1ad3      	subs	r3, r2, r3
 800eb46:	4a1f      	ldr	r2, [pc, #124]	; (800ebc4 <prvHeapInit+0xac>)
 800eb48:	4413      	add	r3, r2
 800eb4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eb50:	4a1d      	ldr	r2, [pc, #116]	; (800ebc8 <prvHeapInit+0xb0>)
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eb56:	4b1c      	ldr	r3, [pc, #112]	; (800ebc8 <prvHeapInit+0xb0>)
 800eb58:	2200      	movs	r2, #0
 800eb5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	68ba      	ldr	r2, [r7, #8]
 800eb60:	4413      	add	r3, r2
 800eb62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eb64:	2208      	movs	r2, #8
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	1a9b      	subs	r3, r3, r2
 800eb6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	f023 0307 	bic.w	r3, r3, #7
 800eb72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	4a15      	ldr	r2, [pc, #84]	; (800ebcc <prvHeapInit+0xb4>)
 800eb78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eb7a:	4b14      	ldr	r3, [pc, #80]	; (800ebcc <prvHeapInit+0xb4>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	2200      	movs	r2, #0
 800eb80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eb82:	4b12      	ldr	r3, [pc, #72]	; (800ebcc <prvHeapInit+0xb4>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	2200      	movs	r2, #0
 800eb88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	68fa      	ldr	r2, [r7, #12]
 800eb92:	1ad2      	subs	r2, r2, r3
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eb98:	4b0c      	ldr	r3, [pc, #48]	; (800ebcc <prvHeapInit+0xb4>)
 800eb9a:	681a      	ldr	r2, [r3, #0]
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	4a0a      	ldr	r2, [pc, #40]	; (800ebd0 <prvHeapInit+0xb8>)
 800eba6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	4a09      	ldr	r2, [pc, #36]	; (800ebd4 <prvHeapInit+0xbc>)
 800ebae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ebb0:	4b09      	ldr	r3, [pc, #36]	; (800ebd8 <prvHeapInit+0xc0>)
 800ebb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ebb6:	601a      	str	r2, [r3, #0]
}
 800ebb8:	bf00      	nop
 800ebba:	3714      	adds	r7, #20
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc2:	4770      	bx	lr
 800ebc4:	20000fd8 	.word	0x20000fd8
 800ebc8:	20004bd8 	.word	0x20004bd8
 800ebcc:	20004be0 	.word	0x20004be0
 800ebd0:	20004be8 	.word	0x20004be8
 800ebd4:	20004be4 	.word	0x20004be4
 800ebd8:	20004bec 	.word	0x20004bec

0800ebdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b085      	sub	sp, #20
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ebe4:	4b28      	ldr	r3, [pc, #160]	; (800ec88 <prvInsertBlockIntoFreeList+0xac>)
 800ebe6:	60fb      	str	r3, [r7, #12]
 800ebe8:	e002      	b.n	800ebf0 <prvInsertBlockIntoFreeList+0x14>
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	60fb      	str	r3, [r7, #12]
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	687a      	ldr	r2, [r7, #4]
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d8f7      	bhi.n	800ebea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	68ba      	ldr	r2, [r7, #8]
 800ec04:	4413      	add	r3, r2
 800ec06:	687a      	ldr	r2, [r7, #4]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d108      	bne.n	800ec1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	685a      	ldr	r2, [r3, #4]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	441a      	add	r2, r3
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	68ba      	ldr	r2, [r7, #8]
 800ec28:	441a      	add	r2, r3
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d118      	bne.n	800ec64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681a      	ldr	r2, [r3, #0]
 800ec36:	4b15      	ldr	r3, [pc, #84]	; (800ec8c <prvInsertBlockIntoFreeList+0xb0>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d00d      	beq.n	800ec5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	685a      	ldr	r2, [r3, #4]
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	441a      	add	r2, r3
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	681a      	ldr	r2, [r3, #0]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	601a      	str	r2, [r3, #0]
 800ec58:	e008      	b.n	800ec6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec5a:	4b0c      	ldr	r3, [pc, #48]	; (800ec8c <prvInsertBlockIntoFreeList+0xb0>)
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	601a      	str	r2, [r3, #0]
 800ec62:	e003      	b.n	800ec6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681a      	ldr	r2, [r3, #0]
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ec6c:	68fa      	ldr	r2, [r7, #12]
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d002      	beq.n	800ec7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	687a      	ldr	r2, [r7, #4]
 800ec78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec7a:	bf00      	nop
 800ec7c:	3714      	adds	r7, #20
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec84:	4770      	bx	lr
 800ec86:	bf00      	nop
 800ec88:	20004bd8 	.word	0x20004bd8
 800ec8c:	20004be0 	.word	0x20004be0

0800ec90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ec94:	2200      	movs	r2, #0
 800ec96:	4912      	ldr	r1, [pc, #72]	; (800ece0 <MX_USB_DEVICE_Init+0x50>)
 800ec98:	4812      	ldr	r0, [pc, #72]	; (800ece4 <MX_USB_DEVICE_Init+0x54>)
 800ec9a:	f7fd fcd5 	bl	800c648 <USBD_Init>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d001      	beq.n	800eca8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800eca4:	f7f1 ffd8 	bl	8000c58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800eca8:	490f      	ldr	r1, [pc, #60]	; (800ece8 <MX_USB_DEVICE_Init+0x58>)
 800ecaa:	480e      	ldr	r0, [pc, #56]	; (800ece4 <MX_USB_DEVICE_Init+0x54>)
 800ecac:	f7fd fd02 	bl	800c6b4 <USBD_RegisterClass>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d001      	beq.n	800ecba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ecb6:	f7f1 ffcf 	bl	8000c58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ecba:	490c      	ldr	r1, [pc, #48]	; (800ecec <MX_USB_DEVICE_Init+0x5c>)
 800ecbc:	4809      	ldr	r0, [pc, #36]	; (800ece4 <MX_USB_DEVICE_Init+0x54>)
 800ecbe:	f7fd fc27 	bl	800c510 <USBD_CDC_RegisterInterface>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d001      	beq.n	800eccc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ecc8:	f7f1 ffc6 	bl	8000c58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800eccc:	4805      	ldr	r0, [pc, #20]	; (800ece4 <MX_USB_DEVICE_Init+0x54>)
 800ecce:	f7fd fd12 	bl	800c6f6 <USBD_Start>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d001      	beq.n	800ecdc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ecd8:	f7f1 ffbe 	bl	8000c58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ecdc:	bf00      	nop
 800ecde:	bd80      	pop	{r7, pc}
 800ece0:	2000013c 	.word	0x2000013c
 800ece4:	20005208 	.word	0x20005208
 800ece8:	20000020 	.word	0x20000020
 800ecec:	20000128 	.word	0x20000128

0800ecf0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	4907      	ldr	r1, [pc, #28]	; (800ed14 <CDC_Init_FS+0x24>)
 800ecf8:	4807      	ldr	r0, [pc, #28]	; (800ed18 <CDC_Init_FS+0x28>)
 800ecfa:	f7fd fc1e 	bl	800c53a <USBD_CDC_SetTxBuffer>
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ecfe:	4907      	ldr	r1, [pc, #28]	; (800ed1c <CDC_Init_FS+0x2c>)
 800ed00:	4805      	ldr	r0, [pc, #20]	; (800ed18 <CDC_Init_FS+0x28>)
 800ed02:	f7fd fc33 	bl	800c56c <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);                                         //This is new to the function, the rest is standard HAL
 800ed06:	4804      	ldr	r0, [pc, #16]	; (800ed18 <CDC_Init_FS+0x28>)
 800ed08:	f7fd fc74 	bl	800c5f4 <USBD_CDC_ReceivePacket>
	  return (USBD_OK);
 800ed0c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	20005cd8 	.word	0x20005cd8
 800ed18:	20005208 	.word	0x20005208
 800ed1c:	200054d8 	.word	0x200054d8

0800ed20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ed20:	b480      	push	{r7}
 800ed22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ed24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b083      	sub	sp, #12
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	4603      	mov	r3, r0
 800ed38:	6039      	str	r1, [r7, #0]
 800ed3a:	71fb      	strb	r3, [r7, #7]
 800ed3c:	4613      	mov	r3, r2
 800ed3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ed40:	79fb      	ldrb	r3, [r7, #7]
 800ed42:	2b23      	cmp	r3, #35	; 0x23
 800ed44:	d84a      	bhi.n	800eddc <CDC_Control_FS+0xac>
 800ed46:	a201      	add	r2, pc, #4	; (adr r2, 800ed4c <CDC_Control_FS+0x1c>)
 800ed48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed4c:	0800eddd 	.word	0x0800eddd
 800ed50:	0800eddd 	.word	0x0800eddd
 800ed54:	0800eddd 	.word	0x0800eddd
 800ed58:	0800eddd 	.word	0x0800eddd
 800ed5c:	0800eddd 	.word	0x0800eddd
 800ed60:	0800eddd 	.word	0x0800eddd
 800ed64:	0800eddd 	.word	0x0800eddd
 800ed68:	0800eddd 	.word	0x0800eddd
 800ed6c:	0800eddd 	.word	0x0800eddd
 800ed70:	0800eddd 	.word	0x0800eddd
 800ed74:	0800eddd 	.word	0x0800eddd
 800ed78:	0800eddd 	.word	0x0800eddd
 800ed7c:	0800eddd 	.word	0x0800eddd
 800ed80:	0800eddd 	.word	0x0800eddd
 800ed84:	0800eddd 	.word	0x0800eddd
 800ed88:	0800eddd 	.word	0x0800eddd
 800ed8c:	0800eddd 	.word	0x0800eddd
 800ed90:	0800eddd 	.word	0x0800eddd
 800ed94:	0800eddd 	.word	0x0800eddd
 800ed98:	0800eddd 	.word	0x0800eddd
 800ed9c:	0800eddd 	.word	0x0800eddd
 800eda0:	0800eddd 	.word	0x0800eddd
 800eda4:	0800eddd 	.word	0x0800eddd
 800eda8:	0800eddd 	.word	0x0800eddd
 800edac:	0800eddd 	.word	0x0800eddd
 800edb0:	0800eddd 	.word	0x0800eddd
 800edb4:	0800eddd 	.word	0x0800eddd
 800edb8:	0800eddd 	.word	0x0800eddd
 800edbc:	0800eddd 	.word	0x0800eddd
 800edc0:	0800eddd 	.word	0x0800eddd
 800edc4:	0800eddd 	.word	0x0800eddd
 800edc8:	0800eddd 	.word	0x0800eddd
 800edcc:	0800eddd 	.word	0x0800eddd
 800edd0:	0800eddd 	.word	0x0800eddd
 800edd4:	0800eddd 	.word	0x0800eddd
 800edd8:	0800eddd 	.word	0x0800eddd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eddc:	bf00      	nop
  }

  return (USBD_OK);
 800edde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	370c      	adds	r7, #12
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr

0800edec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b084      	sub	sp, #16
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


  volatile uint32_t counter = 0;
 800edf6:	2300      	movs	r3, #0
 800edf8:	60fb      	str	r3, [r7, #12]

  while(counter < *Len)
 800edfa:	e01e      	b.n	800ee3a <CDC_Receive_FS+0x4e>
  {
       RxBuffer[RxFifoIndex ] = Buf[counter];
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	441a      	add	r2, r3
 800ee02:	4b16      	ldr	r3, [pc, #88]	; (800ee5c <CDC_Receive_FS+0x70>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	7811      	ldrb	r1, [r2, #0]
 800ee08:	4a15      	ldr	r2, [pc, #84]	; (800ee60 <CDC_Receive_FS+0x74>)
 800ee0a:	54d1      	strb	r1, [r2, r3]
       cdc_receive_put(Buf[counter]);
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	687a      	ldr	r2, [r7, #4]
 800ee10:	4413      	add	r3, r2
 800ee12:	781b      	ldrb	r3, [r3, #0]
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7f4 fef9 	bl	8003c0c <cdc_receive_put>
       counter++, RxFifoIndex++;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	60fb      	str	r3, [r7, #12]
 800ee20:	4b0e      	ldr	r3, [pc, #56]	; (800ee5c <CDC_Receive_FS+0x70>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	3301      	adds	r3, #1
 800ee26:	4a0d      	ldr	r2, [pc, #52]	; (800ee5c <CDC_Receive_FS+0x70>)
 800ee28:	6013      	str	r3, [r2, #0]
       if(RxFifoIndex  == RxBufferSize)
 800ee2a:	4b0c      	ldr	r3, [pc, #48]	; (800ee5c <CDC_Receive_FS+0x70>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee32:	d102      	bne.n	800ee3a <CDC_Receive_FS+0x4e>
            RxFifoIndex  = 0;
 800ee34:	4b09      	ldr	r3, [pc, #36]	; (800ee5c <CDC_Receive_FS+0x70>)
 800ee36:	2200      	movs	r2, #0
 800ee38:	601a      	str	r2, [r3, #0]
  while(counter < *Len)
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	681a      	ldr	r2, [r3, #0]
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d8db      	bhi.n	800edfc <CDC_Receive_FS+0x10>
   }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ee44:	6879      	ldr	r1, [r7, #4]
 800ee46:	4807      	ldr	r0, [pc, #28]	; (800ee64 <CDC_Receive_FS+0x78>)
 800ee48:	f7fd fb90 	bl	800c56c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ee4c:	4805      	ldr	r0, [pc, #20]	; (800ee64 <CDC_Receive_FS+0x78>)
 800ee4e:	f7fd fbd1 	bl	800c5f4 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800ee52:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3710      	adds	r7, #16
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	20004bf0 	.word	0x20004bf0
 800ee60:	200060d8 	.word	0x200060d8
 800ee64:	20005208 	.word	0x20005208

0800ee68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	460b      	mov	r3, r1
 800ee72:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ee74:	2300      	movs	r3, #0
 800ee76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ee78:	4b0d      	ldr	r3, [pc, #52]	; (800eeb0 <CDC_Transmit_FS+0x48>)
 800ee7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d001      	beq.n	800ee8e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	e00b      	b.n	800eea6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ee8e:	887b      	ldrh	r3, [r7, #2]
 800ee90:	461a      	mov	r2, r3
 800ee92:	6879      	ldr	r1, [r7, #4]
 800ee94:	4806      	ldr	r0, [pc, #24]	; (800eeb0 <CDC_Transmit_FS+0x48>)
 800ee96:	f7fd fb50 	bl	800c53a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ee9a:	4805      	ldr	r0, [pc, #20]	; (800eeb0 <CDC_Transmit_FS+0x48>)
 800ee9c:	f7fd fb7a 	bl	800c594 <USBD_CDC_TransmitPacket>
 800eea0:	4603      	mov	r3, r0
 800eea2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800eea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3710      	adds	r7, #16
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	20005208 	.word	0x20005208

0800eeb4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b087      	sub	sp, #28
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	60f8      	str	r0, [r7, #12]
 800eebc:	60b9      	str	r1, [r7, #8]
 800eebe:	4613      	mov	r3, r2
 800eec0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eec2:	2300      	movs	r3, #0
 800eec4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eec6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	371c      	adds	r7, #28
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr
	...

0800eed8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
 800eede:	4603      	mov	r3, r0
 800eee0:	6039      	str	r1, [r7, #0]
 800eee2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	2212      	movs	r2, #18
 800eee8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800eeea:	4b03      	ldr	r3, [pc, #12]	; (800eef8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	370c      	adds	r7, #12
 800eef0:	46bd      	mov	sp, r7
 800eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef6:	4770      	bx	lr
 800eef8:	20000158 	.word	0x20000158

0800eefc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eefc:	b480      	push	{r7}
 800eefe:	b083      	sub	sp, #12
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	4603      	mov	r3, r0
 800ef04:	6039      	str	r1, [r7, #0]
 800ef06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	2204      	movs	r2, #4
 800ef0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ef0e:	4b03      	ldr	r3, [pc, #12]	; (800ef1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	370c      	adds	r7, #12
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr
 800ef1c:	2000016c 	.word	0x2000016c

0800ef20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	4603      	mov	r3, r0
 800ef28:	6039      	str	r1, [r7, #0]
 800ef2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ef2c:	79fb      	ldrb	r3, [r7, #7]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d105      	bne.n	800ef3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ef32:	683a      	ldr	r2, [r7, #0]
 800ef34:	4907      	ldr	r1, [pc, #28]	; (800ef54 <USBD_FS_ProductStrDescriptor+0x34>)
 800ef36:	4808      	ldr	r0, [pc, #32]	; (800ef58 <USBD_FS_ProductStrDescriptor+0x38>)
 800ef38:	f7fe fbab 	bl	800d692 <USBD_GetString>
 800ef3c:	e004      	b.n	800ef48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ef3e:	683a      	ldr	r2, [r7, #0]
 800ef40:	4904      	ldr	r1, [pc, #16]	; (800ef54 <USBD_FS_ProductStrDescriptor+0x34>)
 800ef42:	4805      	ldr	r0, [pc, #20]	; (800ef58 <USBD_FS_ProductStrDescriptor+0x38>)
 800ef44:	f7fe fba5 	bl	800d692 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef48:	4b02      	ldr	r3, [pc, #8]	; (800ef54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3708      	adds	r7, #8
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	200064d8 	.word	0x200064d8
 800ef58:	0800fecc 	.word	0x0800fecc

0800ef5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	4603      	mov	r3, r0
 800ef64:	6039      	str	r1, [r7, #0]
 800ef66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ef68:	683a      	ldr	r2, [r7, #0]
 800ef6a:	4904      	ldr	r1, [pc, #16]	; (800ef7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ef6c:	4804      	ldr	r0, [pc, #16]	; (800ef80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ef6e:	f7fe fb90 	bl	800d692 <USBD_GetString>
  return USBD_StrDesc;
 800ef72:	4b02      	ldr	r3, [pc, #8]	; (800ef7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	3708      	adds	r7, #8
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}
 800ef7c:	200064d8 	.word	0x200064d8
 800ef80:	0800fee4 	.word	0x0800fee4

0800ef84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	6039      	str	r1, [r7, #0]
 800ef8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	221a      	movs	r2, #26
 800ef94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ef96:	f000 f843 	bl	800f020 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ef9a:	4b02      	ldr	r3, [pc, #8]	; (800efa4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3708      	adds	r7, #8
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	20000170 	.word	0x20000170

0800efa8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
 800efae:	4603      	mov	r3, r0
 800efb0:	6039      	str	r1, [r7, #0]
 800efb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800efb4:	79fb      	ldrb	r3, [r7, #7]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d105      	bne.n	800efc6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800efba:	683a      	ldr	r2, [r7, #0]
 800efbc:	4907      	ldr	r1, [pc, #28]	; (800efdc <USBD_FS_ConfigStrDescriptor+0x34>)
 800efbe:	4808      	ldr	r0, [pc, #32]	; (800efe0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800efc0:	f7fe fb67 	bl	800d692 <USBD_GetString>
 800efc4:	e004      	b.n	800efd0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800efc6:	683a      	ldr	r2, [r7, #0]
 800efc8:	4904      	ldr	r1, [pc, #16]	; (800efdc <USBD_FS_ConfigStrDescriptor+0x34>)
 800efca:	4805      	ldr	r0, [pc, #20]	; (800efe0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800efcc:	f7fe fb61 	bl	800d692 <USBD_GetString>
  }
  return USBD_StrDesc;
 800efd0:	4b02      	ldr	r3, [pc, #8]	; (800efdc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3708      	adds	r7, #8
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	200064d8 	.word	0x200064d8
 800efe0:	0800fef8 	.word	0x0800fef8

0800efe4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b082      	sub	sp, #8
 800efe8:	af00      	add	r7, sp, #0
 800efea:	4603      	mov	r3, r0
 800efec:	6039      	str	r1, [r7, #0]
 800efee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eff0:	79fb      	ldrb	r3, [r7, #7]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d105      	bne.n	800f002 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eff6:	683a      	ldr	r2, [r7, #0]
 800eff8:	4907      	ldr	r1, [pc, #28]	; (800f018 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800effa:	4808      	ldr	r0, [pc, #32]	; (800f01c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800effc:	f7fe fb49 	bl	800d692 <USBD_GetString>
 800f000:	e004      	b.n	800f00c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f002:	683a      	ldr	r2, [r7, #0]
 800f004:	4904      	ldr	r1, [pc, #16]	; (800f018 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f006:	4805      	ldr	r0, [pc, #20]	; (800f01c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f008:	f7fe fb43 	bl	800d692 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f00c:	4b02      	ldr	r3, [pc, #8]	; (800f018 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3708      	adds	r7, #8
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	200064d8 	.word	0x200064d8
 800f01c:	0800ff04 	.word	0x0800ff04

0800f020 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b084      	sub	sp, #16
 800f024:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f026:	4b0f      	ldr	r3, [pc, #60]	; (800f064 <Get_SerialNum+0x44>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f02c:	4b0e      	ldr	r3, [pc, #56]	; (800f068 <Get_SerialNum+0x48>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f032:	4b0e      	ldr	r3, [pc, #56]	; (800f06c <Get_SerialNum+0x4c>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f038:	68fa      	ldr	r2, [r7, #12]
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	4413      	add	r3, r2
 800f03e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d009      	beq.n	800f05a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f046:	2208      	movs	r2, #8
 800f048:	4909      	ldr	r1, [pc, #36]	; (800f070 <Get_SerialNum+0x50>)
 800f04a:	68f8      	ldr	r0, [r7, #12]
 800f04c:	f000 f814 	bl	800f078 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f050:	2204      	movs	r2, #4
 800f052:	4908      	ldr	r1, [pc, #32]	; (800f074 <Get_SerialNum+0x54>)
 800f054:	68b8      	ldr	r0, [r7, #8]
 800f056:	f000 f80f 	bl	800f078 <IntToUnicode>
  }
}
 800f05a:	bf00      	nop
 800f05c:	3710      	adds	r7, #16
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
 800f062:	bf00      	nop
 800f064:	1fff7a10 	.word	0x1fff7a10
 800f068:	1fff7a14 	.word	0x1fff7a14
 800f06c:	1fff7a18 	.word	0x1fff7a18
 800f070:	20000172 	.word	0x20000172
 800f074:	20000182 	.word	0x20000182

0800f078 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f078:	b480      	push	{r7}
 800f07a:	b087      	sub	sp, #28
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	60f8      	str	r0, [r7, #12]
 800f080:	60b9      	str	r1, [r7, #8]
 800f082:	4613      	mov	r3, r2
 800f084:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f086:	2300      	movs	r3, #0
 800f088:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f08a:	2300      	movs	r3, #0
 800f08c:	75fb      	strb	r3, [r7, #23]
 800f08e:	e027      	b.n	800f0e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	0f1b      	lsrs	r3, r3, #28
 800f094:	2b09      	cmp	r3, #9
 800f096:	d80b      	bhi.n	800f0b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	0f1b      	lsrs	r3, r3, #28
 800f09c:	b2da      	uxtb	r2, r3
 800f09e:	7dfb      	ldrb	r3, [r7, #23]
 800f0a0:	005b      	lsls	r3, r3, #1
 800f0a2:	4619      	mov	r1, r3
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	440b      	add	r3, r1
 800f0a8:	3230      	adds	r2, #48	; 0x30
 800f0aa:	b2d2      	uxtb	r2, r2
 800f0ac:	701a      	strb	r2, [r3, #0]
 800f0ae:	e00a      	b.n	800f0c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	0f1b      	lsrs	r3, r3, #28
 800f0b4:	b2da      	uxtb	r2, r3
 800f0b6:	7dfb      	ldrb	r3, [r7, #23]
 800f0b8:	005b      	lsls	r3, r3, #1
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	440b      	add	r3, r1
 800f0c0:	3237      	adds	r2, #55	; 0x37
 800f0c2:	b2d2      	uxtb	r2, r2
 800f0c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	011b      	lsls	r3, r3, #4
 800f0ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f0cc:	7dfb      	ldrb	r3, [r7, #23]
 800f0ce:	005b      	lsls	r3, r3, #1
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	68ba      	ldr	r2, [r7, #8]
 800f0d4:	4413      	add	r3, r2
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f0da:	7dfb      	ldrb	r3, [r7, #23]
 800f0dc:	3301      	adds	r3, #1
 800f0de:	75fb      	strb	r3, [r7, #23]
 800f0e0:	7dfa      	ldrb	r2, [r7, #23]
 800f0e2:	79fb      	ldrb	r3, [r7, #7]
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d3d3      	bcc.n	800f090 <IntToUnicode+0x18>
  }
}
 800f0e8:	bf00      	nop
 800f0ea:	371c      	adds	r7, #28
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f2:	4770      	bx	lr

0800f0f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b08a      	sub	sp, #40	; 0x28
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f0fc:	f107 0314 	add.w	r3, r7, #20
 800f100:	2200      	movs	r2, #0
 800f102:	601a      	str	r2, [r3, #0]
 800f104:	605a      	str	r2, [r3, #4]
 800f106:	609a      	str	r2, [r3, #8]
 800f108:	60da      	str	r2, [r3, #12]
 800f10a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f114:	d13a      	bne.n	800f18c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f116:	2300      	movs	r3, #0
 800f118:	613b      	str	r3, [r7, #16]
 800f11a:	4b1e      	ldr	r3, [pc, #120]	; (800f194 <HAL_PCD_MspInit+0xa0>)
 800f11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f11e:	4a1d      	ldr	r2, [pc, #116]	; (800f194 <HAL_PCD_MspInit+0xa0>)
 800f120:	f043 0301 	orr.w	r3, r3, #1
 800f124:	6313      	str	r3, [r2, #48]	; 0x30
 800f126:	4b1b      	ldr	r3, [pc, #108]	; (800f194 <HAL_PCD_MspInit+0xa0>)
 800f128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f12a:	f003 0301 	and.w	r3, r3, #1
 800f12e:	613b      	str	r3, [r7, #16]
 800f130:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f132:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f138:	2302      	movs	r3, #2
 800f13a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f13c:	2300      	movs	r3, #0
 800f13e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f140:	2303      	movs	r3, #3
 800f142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f144:	230a      	movs	r3, #10
 800f146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f148:	f107 0314 	add.w	r3, r7, #20
 800f14c:	4619      	mov	r1, r3
 800f14e:	4812      	ldr	r0, [pc, #72]	; (800f198 <HAL_PCD_MspInit+0xa4>)
 800f150:	f7f6 ff16 	bl	8005f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f154:	4b0f      	ldr	r3, [pc, #60]	; (800f194 <HAL_PCD_MspInit+0xa0>)
 800f156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f158:	4a0e      	ldr	r2, [pc, #56]	; (800f194 <HAL_PCD_MspInit+0xa0>)
 800f15a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f15e:	6353      	str	r3, [r2, #52]	; 0x34
 800f160:	2300      	movs	r3, #0
 800f162:	60fb      	str	r3, [r7, #12]
 800f164:	4b0b      	ldr	r3, [pc, #44]	; (800f194 <HAL_PCD_MspInit+0xa0>)
 800f166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f168:	4a0a      	ldr	r2, [pc, #40]	; (800f194 <HAL_PCD_MspInit+0xa0>)
 800f16a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f16e:	6453      	str	r3, [r2, #68]	; 0x44
 800f170:	4b08      	ldr	r3, [pc, #32]	; (800f194 <HAL_PCD_MspInit+0xa0>)
 800f172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f178:	60fb      	str	r3, [r7, #12]
 800f17a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f17c:	2200      	movs	r2, #0
 800f17e:	2100      	movs	r1, #0
 800f180:	2043      	movs	r0, #67	; 0x43
 800f182:	f7f6 fea3 	bl	8005ecc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f186:	2043      	movs	r0, #67	; 0x43
 800f188:	f7f6 febc 	bl	8005f04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f18c:	bf00      	nop
 800f18e:	3728      	adds	r7, #40	; 0x28
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}
 800f194:	40023800 	.word	0x40023800
 800f198:	40020000 	.word	0x40020000

0800f19c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b082      	sub	sp, #8
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	4610      	mov	r0, r2
 800f1b4:	f7fd faea 	bl	800c78c <USBD_LL_SetupStage>
}
 800f1b8:	bf00      	nop
 800f1ba:	3708      	adds	r7, #8
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}

0800f1c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b082      	sub	sp, #8
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f1d2:	78fa      	ldrb	r2, [r7, #3]
 800f1d4:	6879      	ldr	r1, [r7, #4]
 800f1d6:	4613      	mov	r3, r2
 800f1d8:	00db      	lsls	r3, r3, #3
 800f1da:	1a9b      	subs	r3, r3, r2
 800f1dc:	009b      	lsls	r3, r3, #2
 800f1de:	440b      	add	r3, r1
 800f1e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f1e4:	681a      	ldr	r2, [r3, #0]
 800f1e6:	78fb      	ldrb	r3, [r7, #3]
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	f7fd fb22 	bl	800c832 <USBD_LL_DataOutStage>
}
 800f1ee:	bf00      	nop
 800f1f0:	3708      	adds	r7, #8
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}

0800f1f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1f6:	b580      	push	{r7, lr}
 800f1f8:	b082      	sub	sp, #8
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	6078      	str	r0, [r7, #4]
 800f1fe:	460b      	mov	r3, r1
 800f200:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f208:	78fa      	ldrb	r2, [r7, #3]
 800f20a:	6879      	ldr	r1, [r7, #4]
 800f20c:	4613      	mov	r3, r2
 800f20e:	00db      	lsls	r3, r3, #3
 800f210:	1a9b      	subs	r3, r3, r2
 800f212:	009b      	lsls	r3, r3, #2
 800f214:	440b      	add	r3, r1
 800f216:	3348      	adds	r3, #72	; 0x48
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	78fb      	ldrb	r3, [r7, #3]
 800f21c:	4619      	mov	r1, r3
 800f21e:	f7fd fb6b 	bl	800c8f8 <USBD_LL_DataInStage>
}
 800f222:	bf00      	nop
 800f224:	3708      	adds	r7, #8
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}

0800f22a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f22a:	b580      	push	{r7, lr}
 800f22c:	b082      	sub	sp, #8
 800f22e:	af00      	add	r7, sp, #0
 800f230:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f238:	4618      	mov	r0, r3
 800f23a:	f7fd fc6f 	bl	800cb1c <USBD_LL_SOF>
}
 800f23e:	bf00      	nop
 800f240:	3708      	adds	r7, #8
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}

0800f246 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f246:	b580      	push	{r7, lr}
 800f248:	b084      	sub	sp, #16
 800f24a:	af00      	add	r7, sp, #0
 800f24c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f24e:	2301      	movs	r3, #1
 800f250:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	68db      	ldr	r3, [r3, #12]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d102      	bne.n	800f260 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f25a:	2300      	movs	r3, #0
 800f25c:	73fb      	strb	r3, [r7, #15]
 800f25e:	e008      	b.n	800f272 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	68db      	ldr	r3, [r3, #12]
 800f264:	2b02      	cmp	r3, #2
 800f266:	d102      	bne.n	800f26e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f268:	2301      	movs	r3, #1
 800f26a:	73fb      	strb	r3, [r7, #15]
 800f26c:	e001      	b.n	800f272 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f26e:	f7f1 fcf3 	bl	8000c58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f278:	7bfa      	ldrb	r2, [r7, #15]
 800f27a:	4611      	mov	r1, r2
 800f27c:	4618      	mov	r0, r3
 800f27e:	f7fd fc12 	bl	800caa6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f288:	4618      	mov	r0, r3
 800f28a:	f7fd fbcb 	bl	800ca24 <USBD_LL_Reset>
}
 800f28e:	bf00      	nop
 800f290:	3710      	adds	r7, #16
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
	...

0800f298 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b082      	sub	sp, #8
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7fd fc0d 	bl	800cac6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	6812      	ldr	r2, [r2, #0]
 800f2ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f2be:	f043 0301 	orr.w	r3, r3, #1
 800f2c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6a1b      	ldr	r3, [r3, #32]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d005      	beq.n	800f2d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f2cc:	4b04      	ldr	r3, [pc, #16]	; (800f2e0 <HAL_PCD_SuspendCallback+0x48>)
 800f2ce:	691b      	ldr	r3, [r3, #16]
 800f2d0:	4a03      	ldr	r2, [pc, #12]	; (800f2e0 <HAL_PCD_SuspendCallback+0x48>)
 800f2d2:	f043 0306 	orr.w	r3, r3, #6
 800f2d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f2d8:	bf00      	nop
 800f2da:	3708      	adds	r7, #8
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	e000ed00 	.word	0xe000ed00

0800f2e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7fd fbfc 	bl	800caf0 <USBD_LL_Resume>
}
 800f2f8:	bf00      	nop
 800f2fa:	3708      	adds	r7, #8
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}

0800f300 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b082      	sub	sp, #8
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	460b      	mov	r3, r1
 800f30a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f312:	78fa      	ldrb	r2, [r7, #3]
 800f314:	4611      	mov	r1, r2
 800f316:	4618      	mov	r0, r3
 800f318:	f7fd fc27 	bl	800cb6a <USBD_LL_IsoOUTIncomplete>
}
 800f31c:	bf00      	nop
 800f31e:	3708      	adds	r7, #8
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}

0800f324 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	460b      	mov	r3, r1
 800f32e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f336:	78fa      	ldrb	r2, [r7, #3]
 800f338:	4611      	mov	r1, r2
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7fd fc08 	bl	800cb50 <USBD_LL_IsoINIncomplete>
}
 800f340:	bf00      	nop
 800f342:	3708      	adds	r7, #8
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}

0800f348 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b082      	sub	sp, #8
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f356:	4618      	mov	r0, r3
 800f358:	f7fd fc14 	bl	800cb84 <USBD_LL_DevConnected>
}
 800f35c:	bf00      	nop
 800f35e:	3708      	adds	r7, #8
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b082      	sub	sp, #8
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f372:	4618      	mov	r0, r3
 800f374:	f7fd fc11 	bl	800cb9a <USBD_LL_DevDisconnected>
}
 800f378:	bf00      	nop
 800f37a:	3708      	adds	r7, #8
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d13c      	bne.n	800f40a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f390:	4a20      	ldr	r2, [pc, #128]	; (800f414 <USBD_LL_Init+0x94>)
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	4a1e      	ldr	r2, [pc, #120]	; (800f414 <USBD_LL_Init+0x94>)
 800f39c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f3a0:	4b1c      	ldr	r3, [pc, #112]	; (800f414 <USBD_LL_Init+0x94>)
 800f3a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f3a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f3a8:	4b1a      	ldr	r3, [pc, #104]	; (800f414 <USBD_LL_Init+0x94>)
 800f3aa:	2204      	movs	r2, #4
 800f3ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f3ae:	4b19      	ldr	r3, [pc, #100]	; (800f414 <USBD_LL_Init+0x94>)
 800f3b0:	2202      	movs	r2, #2
 800f3b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f3b4:	4b17      	ldr	r3, [pc, #92]	; (800f414 <USBD_LL_Init+0x94>)
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f3ba:	4b16      	ldr	r3, [pc, #88]	; (800f414 <USBD_LL_Init+0x94>)
 800f3bc:	2202      	movs	r2, #2
 800f3be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f3c0:	4b14      	ldr	r3, [pc, #80]	; (800f414 <USBD_LL_Init+0x94>)
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f3c6:	4b13      	ldr	r3, [pc, #76]	; (800f414 <USBD_LL_Init+0x94>)
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f3cc:	4b11      	ldr	r3, [pc, #68]	; (800f414 <USBD_LL_Init+0x94>)
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f3d2:	4b10      	ldr	r3, [pc, #64]	; (800f414 <USBD_LL_Init+0x94>)
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f3d8:	4b0e      	ldr	r3, [pc, #56]	; (800f414 <USBD_LL_Init+0x94>)
 800f3da:	2200      	movs	r2, #0
 800f3dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f3de:	480d      	ldr	r0, [pc, #52]	; (800f414 <USBD_LL_Init+0x94>)
 800f3e0:	f7f9 fac4 	bl	800896c <HAL_PCD_Init>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d001      	beq.n	800f3ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f3ea:	f7f1 fc35 	bl	8000c58 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f3ee:	2180      	movs	r1, #128	; 0x80
 800f3f0:	4808      	ldr	r0, [pc, #32]	; (800f414 <USBD_LL_Init+0x94>)
 800f3f2:	f7fa fc22 	bl	8009c3a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f3f6:	2240      	movs	r2, #64	; 0x40
 800f3f8:	2100      	movs	r1, #0
 800f3fa:	4806      	ldr	r0, [pc, #24]	; (800f414 <USBD_LL_Init+0x94>)
 800f3fc:	f7fa fbd6 	bl	8009bac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f400:	2280      	movs	r2, #128	; 0x80
 800f402:	2101      	movs	r1, #1
 800f404:	4803      	ldr	r0, [pc, #12]	; (800f414 <USBD_LL_Init+0x94>)
 800f406:	f7fa fbd1 	bl	8009bac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f40a:	2300      	movs	r3, #0
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	3708      	adds	r7, #8
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}
 800f414:	200066d8 	.word	0x200066d8

0800f418 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b084      	sub	sp, #16
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f420:	2300      	movs	r3, #0
 800f422:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f424:	2300      	movs	r3, #0
 800f426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f42e:	4618      	mov	r0, r3
 800f430:	f7f9 fbb9 	bl	8008ba6 <HAL_PCD_Start>
 800f434:	4603      	mov	r3, r0
 800f436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f438:	7bfb      	ldrb	r3, [r7, #15]
 800f43a:	4618      	mov	r0, r3
 800f43c:	f000 f92a 	bl	800f694 <USBD_Get_USB_Status>
 800f440:	4603      	mov	r3, r0
 800f442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f444:	7bbb      	ldrb	r3, [r7, #14]
}
 800f446:	4618      	mov	r0, r3
 800f448:	3710      	adds	r7, #16
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}

0800f44e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f44e:	b580      	push	{r7, lr}
 800f450:	b084      	sub	sp, #16
 800f452:	af00      	add	r7, sp, #0
 800f454:	6078      	str	r0, [r7, #4]
 800f456:	4608      	mov	r0, r1
 800f458:	4611      	mov	r1, r2
 800f45a:	461a      	mov	r2, r3
 800f45c:	4603      	mov	r3, r0
 800f45e:	70fb      	strb	r3, [r7, #3]
 800f460:	460b      	mov	r3, r1
 800f462:	70bb      	strb	r3, [r7, #2]
 800f464:	4613      	mov	r3, r2
 800f466:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f468:	2300      	movs	r3, #0
 800f46a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f46c:	2300      	movs	r3, #0
 800f46e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f476:	78bb      	ldrb	r3, [r7, #2]
 800f478:	883a      	ldrh	r2, [r7, #0]
 800f47a:	78f9      	ldrb	r1, [r7, #3]
 800f47c:	f7f9 ff9d 	bl	80093ba <HAL_PCD_EP_Open>
 800f480:	4603      	mov	r3, r0
 800f482:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f484:	7bfb      	ldrb	r3, [r7, #15]
 800f486:	4618      	mov	r0, r3
 800f488:	f000 f904 	bl	800f694 <USBD_Get_USB_Status>
 800f48c:	4603      	mov	r3, r0
 800f48e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f490:	7bbb      	ldrb	r3, [r7, #14]
}
 800f492:	4618      	mov	r0, r3
 800f494:	3710      	adds	r7, #16
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}

0800f49a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f49a:	b580      	push	{r7, lr}
 800f49c:	b084      	sub	sp, #16
 800f49e:	af00      	add	r7, sp, #0
 800f4a0:	6078      	str	r0, [r7, #4]
 800f4a2:	460b      	mov	r3, r1
 800f4a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f4b4:	78fa      	ldrb	r2, [r7, #3]
 800f4b6:	4611      	mov	r1, r2
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7f9 ffe6 	bl	800948a <HAL_PCD_EP_Close>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4c2:	7bfb      	ldrb	r3, [r7, #15]
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f000 f8e5 	bl	800f694 <USBD_Get_USB_Status>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3710      	adds	r7, #16
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	460b      	mov	r3, r1
 800f4e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f4f2:	78fa      	ldrb	r2, [r7, #3]
 800f4f4:	4611      	mov	r1, r2
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7fa f8be 	bl	8009678 <HAL_PCD_EP_SetStall>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f500:	7bfb      	ldrb	r3, [r7, #15]
 800f502:	4618      	mov	r0, r3
 800f504:	f000 f8c6 	bl	800f694 <USBD_Get_USB_Status>
 800f508:	4603      	mov	r3, r0
 800f50a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f50c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3710      	adds	r7, #16
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}

0800f516 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f516:	b580      	push	{r7, lr}
 800f518:	b084      	sub	sp, #16
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
 800f51e:	460b      	mov	r3, r1
 800f520:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f522:	2300      	movs	r3, #0
 800f524:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f526:	2300      	movs	r3, #0
 800f528:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f530:	78fa      	ldrb	r2, [r7, #3]
 800f532:	4611      	mov	r1, r2
 800f534:	4618      	mov	r0, r3
 800f536:	f7fa f903 	bl	8009740 <HAL_PCD_EP_ClrStall>
 800f53a:	4603      	mov	r3, r0
 800f53c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f53e:	7bfb      	ldrb	r3, [r7, #15]
 800f540:	4618      	mov	r0, r3
 800f542:	f000 f8a7 	bl	800f694 <USBD_Get_USB_Status>
 800f546:	4603      	mov	r3, r0
 800f548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f54a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	3710      	adds	r7, #16
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}

0800f554 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f554:	b480      	push	{r7}
 800f556:	b085      	sub	sp, #20
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	460b      	mov	r3, r1
 800f55e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f566:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	da0b      	bge.n	800f588 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f570:	78fb      	ldrb	r3, [r7, #3]
 800f572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f576:	68f9      	ldr	r1, [r7, #12]
 800f578:	4613      	mov	r3, r2
 800f57a:	00db      	lsls	r3, r3, #3
 800f57c:	1a9b      	subs	r3, r3, r2
 800f57e:	009b      	lsls	r3, r3, #2
 800f580:	440b      	add	r3, r1
 800f582:	333e      	adds	r3, #62	; 0x3e
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	e00b      	b.n	800f5a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f588:	78fb      	ldrb	r3, [r7, #3]
 800f58a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f58e:	68f9      	ldr	r1, [r7, #12]
 800f590:	4613      	mov	r3, r2
 800f592:	00db      	lsls	r3, r3, #3
 800f594:	1a9b      	subs	r3, r3, r2
 800f596:	009b      	lsls	r3, r3, #2
 800f598:	440b      	add	r3, r1
 800f59a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f59e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3714      	adds	r7, #20
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr

0800f5ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b084      	sub	sp, #16
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f5c6:	78fa      	ldrb	r2, [r7, #3]
 800f5c8:	4611      	mov	r1, r2
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f7f9 fed0 	bl	8009370 <HAL_PCD_SetAddress>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5d4:	7bfb      	ldrb	r3, [r7, #15]
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f000 f85c 	bl	800f694 <USBD_Get_USB_Status>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3710      	adds	r7, #16
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}

0800f5ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f5ea:	b580      	push	{r7, lr}
 800f5ec:	b086      	sub	sp, #24
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	60f8      	str	r0, [r7, #12]
 800f5f2:	607a      	str	r2, [r7, #4]
 800f5f4:	603b      	str	r3, [r7, #0]
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5fe:	2300      	movs	r3, #0
 800f600:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f608:	7af9      	ldrb	r1, [r7, #11]
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	f7f9 ffe9 	bl	80095e4 <HAL_PCD_EP_Transmit>
 800f612:	4603      	mov	r3, r0
 800f614:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f616:	7dfb      	ldrb	r3, [r7, #23]
 800f618:	4618      	mov	r0, r3
 800f61a:	f000 f83b 	bl	800f694 <USBD_Get_USB_Status>
 800f61e:	4603      	mov	r3, r0
 800f620:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f622:	7dbb      	ldrb	r3, [r7, #22]
}
 800f624:	4618      	mov	r0, r3
 800f626:	3718      	adds	r7, #24
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b086      	sub	sp, #24
 800f630:	af00      	add	r7, sp, #0
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	607a      	str	r2, [r7, #4]
 800f636:	603b      	str	r3, [r7, #0]
 800f638:	460b      	mov	r3, r1
 800f63a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f63c:	2300      	movs	r3, #0
 800f63e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f640:	2300      	movs	r3, #0
 800f642:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f64a:	7af9      	ldrb	r1, [r7, #11]
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	687a      	ldr	r2, [r7, #4]
 800f650:	f7f9 ff65 	bl	800951e <HAL_PCD_EP_Receive>
 800f654:	4603      	mov	r3, r0
 800f656:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f658:	7dfb      	ldrb	r3, [r7, #23]
 800f65a:	4618      	mov	r0, r3
 800f65c:	f000 f81a 	bl	800f694 <USBD_Get_USB_Status>
 800f660:	4603      	mov	r3, r0
 800f662:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f664:	7dbb      	ldrb	r3, [r7, #22]
}
 800f666:	4618      	mov	r0, r3
 800f668:	3718      	adds	r7, #24
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}

0800f66e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f66e:	b580      	push	{r7, lr}
 800f670:	b082      	sub	sp, #8
 800f672:	af00      	add	r7, sp, #0
 800f674:	6078      	str	r0, [r7, #4]
 800f676:	460b      	mov	r3, r1
 800f678:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f680:	78fa      	ldrb	r2, [r7, #3]
 800f682:	4611      	mov	r1, r2
 800f684:	4618      	mov	r0, r3
 800f686:	f7f9 ff95 	bl	80095b4 <HAL_PCD_EP_GetRxCount>
 800f68a:	4603      	mov	r3, r0
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3708      	adds	r7, #8
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f694:	b480      	push	{r7}
 800f696:	b085      	sub	sp, #20
 800f698:	af00      	add	r7, sp, #0
 800f69a:	4603      	mov	r3, r0
 800f69c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f6a2:	79fb      	ldrb	r3, [r7, #7]
 800f6a4:	2b03      	cmp	r3, #3
 800f6a6:	d817      	bhi.n	800f6d8 <USBD_Get_USB_Status+0x44>
 800f6a8:	a201      	add	r2, pc, #4	; (adr r2, 800f6b0 <USBD_Get_USB_Status+0x1c>)
 800f6aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ae:	bf00      	nop
 800f6b0:	0800f6c1 	.word	0x0800f6c1
 800f6b4:	0800f6c7 	.word	0x0800f6c7
 800f6b8:	0800f6cd 	.word	0x0800f6cd
 800f6bc:	0800f6d3 	.word	0x0800f6d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	73fb      	strb	r3, [r7, #15]
    break;
 800f6c4:	e00b      	b.n	800f6de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f6c6:	2303      	movs	r3, #3
 800f6c8:	73fb      	strb	r3, [r7, #15]
    break;
 800f6ca:	e008      	b.n	800f6de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f6d0:	e005      	b.n	800f6de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f6d2:	2303      	movs	r3, #3
 800f6d4:	73fb      	strb	r3, [r7, #15]
    break;
 800f6d6:	e002      	b.n	800f6de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f6d8:	2303      	movs	r3, #3
 800f6da:	73fb      	strb	r3, [r7, #15]
    break;
 800f6dc:	bf00      	nop
  }
  return usb_status;
 800f6de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3714      	adds	r7, #20
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr

0800f6ec <__cxa_pure_virtual>:
 800f6ec:	b508      	push	{r3, lr}
 800f6ee:	f000 f80d 	bl	800f70c <_ZSt9terminatev>

0800f6f2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f6f2:	b508      	push	{r3, lr}
 800f6f4:	4780      	blx	r0
 800f6f6:	f000 f80e 	bl	800f716 <abort>
	...

0800f6fc <_ZSt13get_terminatev>:
 800f6fc:	4b02      	ldr	r3, [pc, #8]	; (800f708 <_ZSt13get_terminatev+0xc>)
 800f6fe:	6818      	ldr	r0, [r3, #0]
 800f700:	f3bf 8f5b 	dmb	ish
 800f704:	4770      	bx	lr
 800f706:	bf00      	nop
 800f708:	2000018c 	.word	0x2000018c

0800f70c <_ZSt9terminatev>:
 800f70c:	b508      	push	{r3, lr}
 800f70e:	f7ff fff5 	bl	800f6fc <_ZSt13get_terminatev>
 800f712:	f7ff ffee 	bl	800f6f2 <_ZN10__cxxabiv111__terminateEPFvvE>

0800f716 <abort>:
 800f716:	b508      	push	{r3, lr}
 800f718:	2006      	movs	r0, #6
 800f71a:	f000 f939 	bl	800f990 <raise>
 800f71e:	2001      	movs	r0, #1
 800f720:	f7f2 f914 	bl	800194c <_exit>

0800f724 <__errno>:
 800f724:	4b01      	ldr	r3, [pc, #4]	; (800f72c <__errno+0x8>)
 800f726:	6818      	ldr	r0, [r3, #0]
 800f728:	4770      	bx	lr
 800f72a:	bf00      	nop
 800f72c:	20000190 	.word	0x20000190

0800f730 <__libc_init_array>:
 800f730:	b570      	push	{r4, r5, r6, lr}
 800f732:	4e0d      	ldr	r6, [pc, #52]	; (800f768 <__libc_init_array+0x38>)
 800f734:	4c0d      	ldr	r4, [pc, #52]	; (800f76c <__libc_init_array+0x3c>)
 800f736:	1ba4      	subs	r4, r4, r6
 800f738:	10a4      	asrs	r4, r4, #2
 800f73a:	2500      	movs	r5, #0
 800f73c:	42a5      	cmp	r5, r4
 800f73e:	d109      	bne.n	800f754 <__libc_init_array+0x24>
 800f740:	4e0b      	ldr	r6, [pc, #44]	; (800f770 <__libc_init_array+0x40>)
 800f742:	4c0c      	ldr	r4, [pc, #48]	; (800f774 <__libc_init_array+0x44>)
 800f744:	f000 f970 	bl	800fa28 <_init>
 800f748:	1ba4      	subs	r4, r4, r6
 800f74a:	10a4      	asrs	r4, r4, #2
 800f74c:	2500      	movs	r5, #0
 800f74e:	42a5      	cmp	r5, r4
 800f750:	d105      	bne.n	800f75e <__libc_init_array+0x2e>
 800f752:	bd70      	pop	{r4, r5, r6, pc}
 800f754:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f758:	4798      	blx	r3
 800f75a:	3501      	adds	r5, #1
 800f75c:	e7ee      	b.n	800f73c <__libc_init_array+0xc>
 800f75e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f762:	4798      	blx	r3
 800f764:	3501      	adds	r5, #1
 800f766:	e7f2      	b.n	800f74e <__libc_init_array+0x1e>
 800f768:	080100e0 	.word	0x080100e0
 800f76c:	080100e0 	.word	0x080100e0
 800f770:	080100e0 	.word	0x080100e0
 800f774:	080100e8 	.word	0x080100e8

0800f778 <malloc>:
 800f778:	4b02      	ldr	r3, [pc, #8]	; (800f784 <malloc+0xc>)
 800f77a:	4601      	mov	r1, r0
 800f77c:	6818      	ldr	r0, [r3, #0]
 800f77e:	f000 b86d 	b.w	800f85c <_malloc_r>
 800f782:	bf00      	nop
 800f784:	20000190 	.word	0x20000190

0800f788 <free>:
 800f788:	4b02      	ldr	r3, [pc, #8]	; (800f794 <free+0xc>)
 800f78a:	4601      	mov	r1, r0
 800f78c:	6818      	ldr	r0, [r3, #0]
 800f78e:	f000 b817 	b.w	800f7c0 <_free_r>
 800f792:	bf00      	nop
 800f794:	20000190 	.word	0x20000190

0800f798 <memcpy>:
 800f798:	b510      	push	{r4, lr}
 800f79a:	1e43      	subs	r3, r0, #1
 800f79c:	440a      	add	r2, r1
 800f79e:	4291      	cmp	r1, r2
 800f7a0:	d100      	bne.n	800f7a4 <memcpy+0xc>
 800f7a2:	bd10      	pop	{r4, pc}
 800f7a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7ac:	e7f7      	b.n	800f79e <memcpy+0x6>

0800f7ae <memset>:
 800f7ae:	4402      	add	r2, r0
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	d100      	bne.n	800f7b8 <memset+0xa>
 800f7b6:	4770      	bx	lr
 800f7b8:	f803 1b01 	strb.w	r1, [r3], #1
 800f7bc:	e7f9      	b.n	800f7b2 <memset+0x4>
	...

0800f7c0 <_free_r>:
 800f7c0:	b538      	push	{r3, r4, r5, lr}
 800f7c2:	4605      	mov	r5, r0
 800f7c4:	2900      	cmp	r1, #0
 800f7c6:	d045      	beq.n	800f854 <_free_r+0x94>
 800f7c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7cc:	1f0c      	subs	r4, r1, #4
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	bfb8      	it	lt
 800f7d2:	18e4      	addlt	r4, r4, r3
 800f7d4:	f000 f8f8 	bl	800f9c8 <__malloc_lock>
 800f7d8:	4a1f      	ldr	r2, [pc, #124]	; (800f858 <_free_r+0x98>)
 800f7da:	6813      	ldr	r3, [r2, #0]
 800f7dc:	4610      	mov	r0, r2
 800f7de:	b933      	cbnz	r3, 800f7ee <_free_r+0x2e>
 800f7e0:	6063      	str	r3, [r4, #4]
 800f7e2:	6014      	str	r4, [r2, #0]
 800f7e4:	4628      	mov	r0, r5
 800f7e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7ea:	f000 b8ee 	b.w	800f9ca <__malloc_unlock>
 800f7ee:	42a3      	cmp	r3, r4
 800f7f0:	d90c      	bls.n	800f80c <_free_r+0x4c>
 800f7f2:	6821      	ldr	r1, [r4, #0]
 800f7f4:	1862      	adds	r2, r4, r1
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	bf04      	itt	eq
 800f7fa:	681a      	ldreq	r2, [r3, #0]
 800f7fc:	685b      	ldreq	r3, [r3, #4]
 800f7fe:	6063      	str	r3, [r4, #4]
 800f800:	bf04      	itt	eq
 800f802:	1852      	addeq	r2, r2, r1
 800f804:	6022      	streq	r2, [r4, #0]
 800f806:	6004      	str	r4, [r0, #0]
 800f808:	e7ec      	b.n	800f7e4 <_free_r+0x24>
 800f80a:	4613      	mov	r3, r2
 800f80c:	685a      	ldr	r2, [r3, #4]
 800f80e:	b10a      	cbz	r2, 800f814 <_free_r+0x54>
 800f810:	42a2      	cmp	r2, r4
 800f812:	d9fa      	bls.n	800f80a <_free_r+0x4a>
 800f814:	6819      	ldr	r1, [r3, #0]
 800f816:	1858      	adds	r0, r3, r1
 800f818:	42a0      	cmp	r0, r4
 800f81a:	d10b      	bne.n	800f834 <_free_r+0x74>
 800f81c:	6820      	ldr	r0, [r4, #0]
 800f81e:	4401      	add	r1, r0
 800f820:	1858      	adds	r0, r3, r1
 800f822:	4282      	cmp	r2, r0
 800f824:	6019      	str	r1, [r3, #0]
 800f826:	d1dd      	bne.n	800f7e4 <_free_r+0x24>
 800f828:	6810      	ldr	r0, [r2, #0]
 800f82a:	6852      	ldr	r2, [r2, #4]
 800f82c:	605a      	str	r2, [r3, #4]
 800f82e:	4401      	add	r1, r0
 800f830:	6019      	str	r1, [r3, #0]
 800f832:	e7d7      	b.n	800f7e4 <_free_r+0x24>
 800f834:	d902      	bls.n	800f83c <_free_r+0x7c>
 800f836:	230c      	movs	r3, #12
 800f838:	602b      	str	r3, [r5, #0]
 800f83a:	e7d3      	b.n	800f7e4 <_free_r+0x24>
 800f83c:	6820      	ldr	r0, [r4, #0]
 800f83e:	1821      	adds	r1, r4, r0
 800f840:	428a      	cmp	r2, r1
 800f842:	bf04      	itt	eq
 800f844:	6811      	ldreq	r1, [r2, #0]
 800f846:	6852      	ldreq	r2, [r2, #4]
 800f848:	6062      	str	r2, [r4, #4]
 800f84a:	bf04      	itt	eq
 800f84c:	1809      	addeq	r1, r1, r0
 800f84e:	6021      	streq	r1, [r4, #0]
 800f850:	605c      	str	r4, [r3, #4]
 800f852:	e7c7      	b.n	800f7e4 <_free_r+0x24>
 800f854:	bd38      	pop	{r3, r4, r5, pc}
 800f856:	bf00      	nop
 800f858:	20004bf4 	.word	0x20004bf4

0800f85c <_malloc_r>:
 800f85c:	b570      	push	{r4, r5, r6, lr}
 800f85e:	1ccd      	adds	r5, r1, #3
 800f860:	f025 0503 	bic.w	r5, r5, #3
 800f864:	3508      	adds	r5, #8
 800f866:	2d0c      	cmp	r5, #12
 800f868:	bf38      	it	cc
 800f86a:	250c      	movcc	r5, #12
 800f86c:	2d00      	cmp	r5, #0
 800f86e:	4606      	mov	r6, r0
 800f870:	db01      	blt.n	800f876 <_malloc_r+0x1a>
 800f872:	42a9      	cmp	r1, r5
 800f874:	d903      	bls.n	800f87e <_malloc_r+0x22>
 800f876:	230c      	movs	r3, #12
 800f878:	6033      	str	r3, [r6, #0]
 800f87a:	2000      	movs	r0, #0
 800f87c:	bd70      	pop	{r4, r5, r6, pc}
 800f87e:	f000 f8a3 	bl	800f9c8 <__malloc_lock>
 800f882:	4a21      	ldr	r2, [pc, #132]	; (800f908 <_malloc_r+0xac>)
 800f884:	6814      	ldr	r4, [r2, #0]
 800f886:	4621      	mov	r1, r4
 800f888:	b991      	cbnz	r1, 800f8b0 <_malloc_r+0x54>
 800f88a:	4c20      	ldr	r4, [pc, #128]	; (800f90c <_malloc_r+0xb0>)
 800f88c:	6823      	ldr	r3, [r4, #0]
 800f88e:	b91b      	cbnz	r3, 800f898 <_malloc_r+0x3c>
 800f890:	4630      	mov	r0, r6
 800f892:	f000 f845 	bl	800f920 <_sbrk_r>
 800f896:	6020      	str	r0, [r4, #0]
 800f898:	4629      	mov	r1, r5
 800f89a:	4630      	mov	r0, r6
 800f89c:	f000 f840 	bl	800f920 <_sbrk_r>
 800f8a0:	1c43      	adds	r3, r0, #1
 800f8a2:	d124      	bne.n	800f8ee <_malloc_r+0x92>
 800f8a4:	230c      	movs	r3, #12
 800f8a6:	6033      	str	r3, [r6, #0]
 800f8a8:	4630      	mov	r0, r6
 800f8aa:	f000 f88e 	bl	800f9ca <__malloc_unlock>
 800f8ae:	e7e4      	b.n	800f87a <_malloc_r+0x1e>
 800f8b0:	680b      	ldr	r3, [r1, #0]
 800f8b2:	1b5b      	subs	r3, r3, r5
 800f8b4:	d418      	bmi.n	800f8e8 <_malloc_r+0x8c>
 800f8b6:	2b0b      	cmp	r3, #11
 800f8b8:	d90f      	bls.n	800f8da <_malloc_r+0x7e>
 800f8ba:	600b      	str	r3, [r1, #0]
 800f8bc:	50cd      	str	r5, [r1, r3]
 800f8be:	18cc      	adds	r4, r1, r3
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	f000 f882 	bl	800f9ca <__malloc_unlock>
 800f8c6:	f104 000b 	add.w	r0, r4, #11
 800f8ca:	1d23      	adds	r3, r4, #4
 800f8cc:	f020 0007 	bic.w	r0, r0, #7
 800f8d0:	1ac3      	subs	r3, r0, r3
 800f8d2:	d0d3      	beq.n	800f87c <_malloc_r+0x20>
 800f8d4:	425a      	negs	r2, r3
 800f8d6:	50e2      	str	r2, [r4, r3]
 800f8d8:	e7d0      	b.n	800f87c <_malloc_r+0x20>
 800f8da:	428c      	cmp	r4, r1
 800f8dc:	684b      	ldr	r3, [r1, #4]
 800f8de:	bf16      	itet	ne
 800f8e0:	6063      	strne	r3, [r4, #4]
 800f8e2:	6013      	streq	r3, [r2, #0]
 800f8e4:	460c      	movne	r4, r1
 800f8e6:	e7eb      	b.n	800f8c0 <_malloc_r+0x64>
 800f8e8:	460c      	mov	r4, r1
 800f8ea:	6849      	ldr	r1, [r1, #4]
 800f8ec:	e7cc      	b.n	800f888 <_malloc_r+0x2c>
 800f8ee:	1cc4      	adds	r4, r0, #3
 800f8f0:	f024 0403 	bic.w	r4, r4, #3
 800f8f4:	42a0      	cmp	r0, r4
 800f8f6:	d005      	beq.n	800f904 <_malloc_r+0xa8>
 800f8f8:	1a21      	subs	r1, r4, r0
 800f8fa:	4630      	mov	r0, r6
 800f8fc:	f000 f810 	bl	800f920 <_sbrk_r>
 800f900:	3001      	adds	r0, #1
 800f902:	d0cf      	beq.n	800f8a4 <_malloc_r+0x48>
 800f904:	6025      	str	r5, [r4, #0]
 800f906:	e7db      	b.n	800f8c0 <_malloc_r+0x64>
 800f908:	20004bf4 	.word	0x20004bf4
 800f90c:	20004bf8 	.word	0x20004bf8

0800f910 <realloc>:
 800f910:	4b02      	ldr	r3, [pc, #8]	; (800f91c <realloc+0xc>)
 800f912:	460a      	mov	r2, r1
 800f914:	4601      	mov	r1, r0
 800f916:	6818      	ldr	r0, [r3, #0]
 800f918:	f000 b858 	b.w	800f9cc <_realloc_r>
 800f91c:	20000190 	.word	0x20000190

0800f920 <_sbrk_r>:
 800f920:	b538      	push	{r3, r4, r5, lr}
 800f922:	4c06      	ldr	r4, [pc, #24]	; (800f93c <_sbrk_r+0x1c>)
 800f924:	2300      	movs	r3, #0
 800f926:	4605      	mov	r5, r0
 800f928:	4608      	mov	r0, r1
 800f92a:	6023      	str	r3, [r4, #0]
 800f92c:	f7f2 f818 	bl	8001960 <_sbrk>
 800f930:	1c43      	adds	r3, r0, #1
 800f932:	d102      	bne.n	800f93a <_sbrk_r+0x1a>
 800f934:	6823      	ldr	r3, [r4, #0]
 800f936:	b103      	cbz	r3, 800f93a <_sbrk_r+0x1a>
 800f938:	602b      	str	r3, [r5, #0]
 800f93a:	bd38      	pop	{r3, r4, r5, pc}
 800f93c:	20006ae0 	.word	0x20006ae0

0800f940 <_raise_r>:
 800f940:	291f      	cmp	r1, #31
 800f942:	b538      	push	{r3, r4, r5, lr}
 800f944:	4604      	mov	r4, r0
 800f946:	460d      	mov	r5, r1
 800f948:	d904      	bls.n	800f954 <_raise_r+0x14>
 800f94a:	2316      	movs	r3, #22
 800f94c:	6003      	str	r3, [r0, #0]
 800f94e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f952:	bd38      	pop	{r3, r4, r5, pc}
 800f954:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f956:	b112      	cbz	r2, 800f95e <_raise_r+0x1e>
 800f958:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f95c:	b94b      	cbnz	r3, 800f972 <_raise_r+0x32>
 800f95e:	4620      	mov	r0, r4
 800f960:	f000 f830 	bl	800f9c4 <_getpid_r>
 800f964:	462a      	mov	r2, r5
 800f966:	4601      	mov	r1, r0
 800f968:	4620      	mov	r0, r4
 800f96a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f96e:	f000 b817 	b.w	800f9a0 <_kill_r>
 800f972:	2b01      	cmp	r3, #1
 800f974:	d00a      	beq.n	800f98c <_raise_r+0x4c>
 800f976:	1c59      	adds	r1, r3, #1
 800f978:	d103      	bne.n	800f982 <_raise_r+0x42>
 800f97a:	2316      	movs	r3, #22
 800f97c:	6003      	str	r3, [r0, #0]
 800f97e:	2001      	movs	r0, #1
 800f980:	e7e7      	b.n	800f952 <_raise_r+0x12>
 800f982:	2400      	movs	r4, #0
 800f984:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f988:	4628      	mov	r0, r5
 800f98a:	4798      	blx	r3
 800f98c:	2000      	movs	r0, #0
 800f98e:	e7e0      	b.n	800f952 <_raise_r+0x12>

0800f990 <raise>:
 800f990:	4b02      	ldr	r3, [pc, #8]	; (800f99c <raise+0xc>)
 800f992:	4601      	mov	r1, r0
 800f994:	6818      	ldr	r0, [r3, #0]
 800f996:	f7ff bfd3 	b.w	800f940 <_raise_r>
 800f99a:	bf00      	nop
 800f99c:	20000190 	.word	0x20000190

0800f9a0 <_kill_r>:
 800f9a0:	b538      	push	{r3, r4, r5, lr}
 800f9a2:	4c07      	ldr	r4, [pc, #28]	; (800f9c0 <_kill_r+0x20>)
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	4605      	mov	r5, r0
 800f9a8:	4608      	mov	r0, r1
 800f9aa:	4611      	mov	r1, r2
 800f9ac:	6023      	str	r3, [r4, #0]
 800f9ae:	f7f1 ffbd 	bl	800192c <_kill>
 800f9b2:	1c43      	adds	r3, r0, #1
 800f9b4:	d102      	bne.n	800f9bc <_kill_r+0x1c>
 800f9b6:	6823      	ldr	r3, [r4, #0]
 800f9b8:	b103      	cbz	r3, 800f9bc <_kill_r+0x1c>
 800f9ba:	602b      	str	r3, [r5, #0]
 800f9bc:	bd38      	pop	{r3, r4, r5, pc}
 800f9be:	bf00      	nop
 800f9c0:	20006ae0 	.word	0x20006ae0

0800f9c4 <_getpid_r>:
 800f9c4:	f7f1 bfaa 	b.w	800191c <_getpid>

0800f9c8 <__malloc_lock>:
 800f9c8:	4770      	bx	lr

0800f9ca <__malloc_unlock>:
 800f9ca:	4770      	bx	lr

0800f9cc <_realloc_r>:
 800f9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ce:	4607      	mov	r7, r0
 800f9d0:	4614      	mov	r4, r2
 800f9d2:	460e      	mov	r6, r1
 800f9d4:	b921      	cbnz	r1, 800f9e0 <_realloc_r+0x14>
 800f9d6:	4611      	mov	r1, r2
 800f9d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f9dc:	f7ff bf3e 	b.w	800f85c <_malloc_r>
 800f9e0:	b922      	cbnz	r2, 800f9ec <_realloc_r+0x20>
 800f9e2:	f7ff feed 	bl	800f7c0 <_free_r>
 800f9e6:	4625      	mov	r5, r4
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9ec:	f000 f814 	bl	800fa18 <_malloc_usable_size_r>
 800f9f0:	42a0      	cmp	r0, r4
 800f9f2:	d20f      	bcs.n	800fa14 <_realloc_r+0x48>
 800f9f4:	4621      	mov	r1, r4
 800f9f6:	4638      	mov	r0, r7
 800f9f8:	f7ff ff30 	bl	800f85c <_malloc_r>
 800f9fc:	4605      	mov	r5, r0
 800f9fe:	2800      	cmp	r0, #0
 800fa00:	d0f2      	beq.n	800f9e8 <_realloc_r+0x1c>
 800fa02:	4631      	mov	r1, r6
 800fa04:	4622      	mov	r2, r4
 800fa06:	f7ff fec7 	bl	800f798 <memcpy>
 800fa0a:	4631      	mov	r1, r6
 800fa0c:	4638      	mov	r0, r7
 800fa0e:	f7ff fed7 	bl	800f7c0 <_free_r>
 800fa12:	e7e9      	b.n	800f9e8 <_realloc_r+0x1c>
 800fa14:	4635      	mov	r5, r6
 800fa16:	e7e7      	b.n	800f9e8 <_realloc_r+0x1c>

0800fa18 <_malloc_usable_size_r>:
 800fa18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa1c:	1f18      	subs	r0, r3, #4
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	bfbc      	itt	lt
 800fa22:	580b      	ldrlt	r3, [r1, r0]
 800fa24:	18c0      	addlt	r0, r0, r3
 800fa26:	4770      	bx	lr

0800fa28 <_init>:
 800fa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa2a:	bf00      	nop
 800fa2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa2e:	bc08      	pop	{r3}
 800fa30:	469e      	mov	lr, r3
 800fa32:	4770      	bx	lr

0800fa34 <_fini>:
 800fa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa36:	bf00      	nop
 800fa38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa3a:	bc08      	pop	{r3}
 800fa3c:	469e      	mov	lr, r3
 800fa3e:	4770      	bx	lr
