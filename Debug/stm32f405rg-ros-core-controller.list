
stm32f405rg-ros-core-controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  0800f670  0800f670  0001f670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc44  0800fc44  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc44  0800fc44  0001fc44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc4c  0800fc4c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fc4c  0800fc4c  0001fc4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc54  0800fc54  0001fc54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800fc58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000062bc  200001f4  0800fe4c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200064b0  0800fe4c  000264b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000307cc  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005de3  00000000  00000000  000509f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f80  00000000  00000000  000567d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d58  00000000  00000000  00058758  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002935e  00000000  00000000  0005a4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b5d7  00000000  00000000  0008380e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dcccc  00000000  00000000  0009ede5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017bab1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087d8  00000000  00000000  0017bb2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f658 	.word	0x0800f658

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800f658 	.word	0x0800f658

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000210 	.word	0x20000210
 8000510:	20000264 	.word	0x20000264

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b0aa      	sub	sp, #168	; 0xa8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f004 fae1 	bl	8004ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f8e3 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f9af 	bl	8000884 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000526:	f000 f949 	bl	80007bc <MX_CAN1_Init>
  MX_I2C1_Init();
 800052a:	f000 f97d 	bl	8000828 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ctrl = read_id();
 800052e:	f000 fc6f 	bl	8000e10 <read_id>
 8000532:	4603      	mov	r3, r0
 8000534:	461a      	mov	r2, r3
 8000536:	4b5b      	ldr	r3, [pc, #364]	; (80006a4 <main+0x190>)
 8000538:	701a      	strb	r2, [r3, #0]
  MPU9250_calibrate();
 800053a:	f000 fc9f 	bl	8000e7c <MPU9250_calibrate>

  HAL_Delay(2000);
 800053e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000542:	f004 fb0f 	bl	8004b64 <HAL_Delay>
  MPU9250_init();
 8000546:	f000 fc77 	bl	8000e38 <MPU9250_init>
  //HAL_Delay(500);
  init_ROS();
 800054a:	f003 f80b 	bl	8003564 <init_ROS>
  //HAL_Delay(500);

  left_wheels_Header.DLC = 4;
 800054e:	4b56      	ldr	r3, [pc, #344]	; (80006a8 <main+0x194>)
 8000550:	2204      	movs	r2, #4
 8000552:	611a      	str	r2, [r3, #16]
  left_wheels_Header.IDE = CAN_ID_STD;
 8000554:	4b54      	ldr	r3, [pc, #336]	; (80006a8 <main+0x194>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  left_wheels_Header.RTR = CAN_RTR_DATA;
 800055a:	4b53      	ldr	r3, [pc, #332]	; (80006a8 <main+0x194>)
 800055c:	2200      	movs	r2, #0
 800055e:	60da      	str	r2, [r3, #12]
  left_wheels_Header.StdId = 0xF;
 8000560:	4b51      	ldr	r3, [pc, #324]	; (80006a8 <main+0x194>)
 8000562:	220f      	movs	r2, #15
 8000564:	601a      	str	r2, [r3, #0]

  right_wheels_Header.DLC = 4;
 8000566:	4b51      	ldr	r3, [pc, #324]	; (80006ac <main+0x198>)
 8000568:	2204      	movs	r2, #4
 800056a:	611a      	str	r2, [r3, #16]
  right_wheels_Header.IDE = CAN_ID_STD;
 800056c:	4b4f      	ldr	r3, [pc, #316]	; (80006ac <main+0x198>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  right_wheels_Header.RTR = CAN_RTR_DATA;
 8000572:	4b4e      	ldr	r3, [pc, #312]	; (80006ac <main+0x198>)
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
  right_wheels_Header.StdId = 0x1F;
 8000578:	4b4c      	ldr	r3, [pc, #304]	; (80006ac <main+0x198>)
 800057a:	221f      	movs	r2, #31
 800057c:	601a      	str	r2, [r3, #0]

  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800057e:	4b4c      	ldr	r3, [pc, #304]	; (80006b0 <main+0x19c>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0;
 8000584:	4b4a      	ldr	r3, [pc, #296]	; (80006b0 <main+0x19c>)
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 800058a:	4b49      	ldr	r3, [pc, #292]	; (80006b0 <main+0x19c>)
 800058c:	2200      	movs	r2, #0
 800058e:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 8000590:	4b47      	ldr	r3, [pc, #284]	; (80006b0 <main+0x19c>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8000596:	4b46      	ldr	r3, [pc, #280]	; (80006b0 <main+0x19c>)
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800059c:	4b44      	ldr	r3, [pc, #272]	; (80006b0 <main+0x19c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	61da      	str	r2, [r3, #28]
  //sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterActivation = ENABLE;
 80005a2:	4b43      	ldr	r3, [pc, #268]	; (80006b0 <main+0x19c>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80005a8:	4941      	ldr	r1, [pc, #260]	; (80006b0 <main+0x19c>)
 80005aa:	4842      	ldr	r0, [pc, #264]	; (80006b4 <main+0x1a0>)
 80005ac:	f004 fbf8 	bl	8004da0 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1);
 80005b0:	4840      	ldr	r0, [pc, #256]	; (80006b4 <main+0x1a0>)
 80005b2:	f004 fcd5 	bl	8004f60 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005b6:	2102      	movs	r1, #2
 80005b8:	483e      	ldr	r0, [pc, #248]	; (80006b4 <main+0x1a0>)
 80005ba:	f004 ff02 	bl	80053c2 <HAL_CAN_ActivateNotification>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005be:	4b3e      	ldr	r3, [pc, #248]	; (80006b8 <main+0x1a4>)
 80005c0:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80005c4:	461d      	mov	r5, r3
 80005c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f00c fedb 	bl	800d394 <osThreadCreate>
 80005de:	4602      	mov	r2, r0
 80005e0:	4b36      	ldr	r3, [pc, #216]	; (80006bc <main+0x1a8>)
 80005e2:	601a      	str	r2, [r3, #0]

  /* definition and creation of task1 */
  osThreadDef(task1, StartTask02, osPriorityNormal, 0, 128);
 80005e4:	4b36      	ldr	r3, [pc, #216]	; (80006c0 <main+0x1ac>)
 80005e6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 80005f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f00c fec8 	bl	800d394 <osThreadCreate>
 8000604:	4602      	mov	r2, r0
 8000606:	4b2f      	ldr	r3, [pc, #188]	; (80006c4 <main+0x1b0>)
 8000608:	601a      	str	r2, [r3, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, StartTask03, osPriorityNormal, 0, 128);
 800060a:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <main+0x1b4>)
 800060c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000610:	461d      	mov	r5, r3
 8000612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000616:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 800061e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f00c feb5 	bl	800d394 <osThreadCreate>
 800062a:	4602      	mov	r2, r0
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <main+0x1b8>)
 800062e:	601a      	str	r2, [r3, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, StartTask04, osPriorityNormal, 0, 128);
 8000630:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <main+0x1bc>)
 8000632:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000636:	461d      	mov	r5, r3
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3), NULL);
 8000644:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f00c fea2 	bl	800d394 <osThreadCreate>
 8000650:	4602      	mov	r2, r0
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <main+0x1c0>)
 8000654:	601a      	str	r2, [r3, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, StartTask05, osPriorityNormal, 0, 128);
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <main+0x1c4>)
 8000658:	f107 041c 	add.w	r4, r7, #28
 800065c:	461d      	mov	r5, r3
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task4Handle = osThreadCreate(osThread(task4), NULL);
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f00c fe8f 	bl	800d394 <osThreadCreate>
 8000676:	4602      	mov	r2, r0
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <main+0x1c8>)
 800067a:	601a      	str	r2, [r3, #0]

  /* definition and creation of task5 */
  osThreadDef(task5, StartTask06, osPriorityNormal, 0, 128);
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <main+0x1cc>)
 800067e:	463c      	mov	r4, r7
 8000680:	461d      	mov	r5, r3
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task5Handle = osThreadCreate(osThread(task5), NULL);
 800068e:	463b      	mov	r3, r7
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f00c fe7e 	bl	800d394 <osThreadCreate>
 8000698:	4602      	mov	r2, r0
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <main+0x1d0>)
 800069c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800069e:	f00c fe72 	bl	800d386 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <main+0x18e>
 80006a4:	2000046c 	.word	0x2000046c
 80006a8:	20004a20 	.word	0x20004a20
 80006ac:	20004edc 	.word	0x20004edc
 80006b0:	200049e8 	.word	0x200049e8
 80006b4:	20004f1c 	.word	0x20004f1c
 80006b8:	0800f67c 	.word	0x0800f67c
 80006bc:	20004a14 	.word	0x20004a14
 80006c0:	0800f6a0 	.word	0x0800f6a0
 80006c4:	20004aa0 	.word	0x20004aa0
 80006c8:	0800f6c4 	.word	0x0800f6c4
 80006cc:	20004f8c 	.word	0x20004f8c
 80006d0:	0800f6e8 	.word	0x0800f6e8
 80006d4:	20004ac8 	.word	0x20004ac8
 80006d8:	0800f70c 	.word	0x0800f70c
 80006dc:	20004ab0 	.word	0x20004ab0
 80006e0:	0800f730 	.word	0x0800f730
 80006e4:	20004aa8 	.word	0x20004aa8

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	2230      	movs	r2, #48	; 0x30
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f00e fe71 	bl	800f3de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <SystemClock_Config+0xcc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a27      	ldr	r2, [pc, #156]	; (80007b4 <SystemClock_Config+0xcc>)
 8000716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <SystemClock_Config+0xcc>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <SystemClock_Config+0xd0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <SystemClock_Config+0xd0>)
 8000732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <SystemClock_Config+0xd0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000744:	2301      	movs	r3, #1
 8000746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000752:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000758:	2304      	movs	r3, #4
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800075c:	23a8      	movs	r3, #168	; 0xa8
 800075e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000760:	2302      	movs	r3, #2
 8000762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000764:	2307      	movs	r3, #7
 8000766:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 0320 	add.w	r3, r7, #32
 800076c:	4618      	mov	r0, r3
 800076e:	f009 f803 	bl	8009778 <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000778:	f000 fabe 	bl	8000cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077c:	230f      	movs	r3, #15
 800077e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000780:	2302      	movs	r3, #2
 8000782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000788:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800078c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000792:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2105      	movs	r1, #5
 800079a:	4618      	mov	r0, r3
 800079c:	f009 fa5c 	bl	8009c58 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007a6:	f000 faa7 	bl	8000cf8 <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3750      	adds	r7, #80	; 0x50
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_CAN1_Init+0x64>)
 80007c2:	4a18      	ldr	r2, [pc, #96]	; (8000824 <MX_CAN1_Init+0x68>)
 80007c4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_CAN1_Init+0x64>)
 80007c8:	2203      	movs	r2, #3
 80007ca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_CAN1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_CAN1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_CAN1_Init+0x64>)
 80007da:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80007de:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_CAN1_Init+0x64>)
 80007e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007e6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <MX_CAN1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_CAN1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_CAN1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_CAN1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_CAN1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_CAN1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_CAN1_Init+0x64>)
 800080e:	f004 f9cb 	bl	8004ba8 <HAL_CAN_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000818:	f000 fa6e 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20004f1c 	.word	0x20004f1c
 8000824:	40006400 	.word	0x40006400

08000828 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_I2C1_Init+0x50>)
 800082e:	4a13      	ldr	r2, [pc, #76]	; (800087c <MX_I2C1_Init+0x54>)
 8000830:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_I2C1_Init+0x50>)
 8000834:	4a12      	ldr	r2, [pc, #72]	; (8000880 <MX_I2C1_Init+0x58>)
 8000836:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_I2C1_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_I2C1_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_I2C1_Init+0x50>)
 8000846:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800084a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_I2C1_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_I2C1_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <MX_I2C1_Init+0x50>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_I2C1_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_I2C1_Init+0x50>)
 8000866:	f005 fac3 	bl	8005df0 <HAL_I2C_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000870:	f000 fa42 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20004a44 	.word	0x20004a44
 800087c:	40005400 	.word	0x40005400
 8000880:	00061a80 	.word	0x00061a80

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_GPIO_Init+0x68>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <MX_GPIO_Init+0x68>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_GPIO_Init+0x68>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_GPIO_Init+0x68>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <MX_GPIO_Init+0x68>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <MX_GPIO_Init+0x68>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_GPIO_Init+0x68>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <MX_GPIO_Init+0x68>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_GPIO_Init+0x68>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

}
 80008de:	bf00      	nop
 80008e0:	3714      	adds	r7, #20
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800

080008f0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	can_res++;
 80008f8:	4b6d      	ldr	r3, [pc, #436]	; (8000ab0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	3301      	adds	r3, #1
 80008fe:	4a6c      	ldr	r2, [pc, #432]	; (8000ab0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8000900:	6013      	str	r3, [r2, #0]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can_RxHeader, canRXData);
 8000902:	4b6c      	ldr	r3, [pc, #432]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000904:	4a6c      	ldr	r2, [pc, #432]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000906:	2100      	movs	r1, #0
 8000908:	486c      	ldr	r0, [pc, #432]	; (8000abc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 800090a:	f004 fc48 	bl	800519e <HAL_CAN_GetRxMessage>

	if (can_RxHeader.StdId == 0xA) {
 800090e:	4b6a      	ldr	r3, [pc, #424]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b0a      	cmp	r3, #10
 8000914:	d11c      	bne.n	8000950 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		speedRXDataLeftFrontWheel = canRXData[0];
 8000916:	4b67      	ldr	r3, [pc, #412]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000918:	781a      	ldrb	r2, [r3, #0]
 800091a:	4b69      	ldr	r3, [pc, #420]	; (8000ac0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800091c:	701a      	strb	r2, [r3, #0]
		sideRXDataLeftFrontWheel = canRXData[1];
 800091e:	4b65      	ldr	r3, [pc, #404]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000920:	785a      	ldrb	r2, [r3, #1]
 8000922:	4b68      	ldr	r3, [pc, #416]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000924:	701a      	strb	r2, [r3, #0]
		speedRXDataLeftBackWheel = canRXData[2];
 8000926:	4b63      	ldr	r3, [pc, #396]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000928:	789a      	ldrb	r2, [r3, #2]
 800092a:	4b67      	ldr	r3, [pc, #412]	; (8000ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 800092c:	701a      	strb	r2, [r3, #0]
		sideRXDataLeftBackWheel = canRXData[3];
 800092e:	4b61      	ldr	r3, [pc, #388]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000930:	78da      	ldrb	r2, [r3, #3]
 8000932:	4b66      	ldr	r3, [pc, #408]	; (8000acc <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 8000934:	701a      	strb	r2, [r3, #0]
		current_left_1 = canRXData[4];
 8000936:	4b5f      	ldr	r3, [pc, #380]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000938:	791a      	ldrb	r2, [r3, #4]
 800093a:	4b65      	ldr	r3, [pc, #404]	; (8000ad0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 800093c:	701a      	strb	r2, [r3, #0]
		current_left_2 = canRXData[5];
 800093e:	4b5d      	ldr	r3, [pc, #372]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000940:	795a      	ldrb	r2, [r3, #5]
 8000942:	4b64      	ldr	r3, [pc, #400]	; (8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000944:	701a      	strb	r2, [r3, #0]
		temp_left = canRXData[6];
 8000946:	4b5b      	ldr	r3, [pc, #364]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000948:	799a      	ldrb	r2, [r3, #6]
 800094a:	4b63      	ldr	r3, [pc, #396]	; (8000ad8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800094c:	701a      	strb	r2, [r3, #0]
 800094e:	e08f      	b.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x1A) {
 8000950:	4b59      	ldr	r3, [pc, #356]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b1a      	cmp	r3, #26
 8000956:	d11c      	bne.n	8000992 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
		speedRXDataRightFrontWheel = canRXData[0];
 8000958:	4b56      	ldr	r3, [pc, #344]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800095a:	781a      	ldrb	r2, [r3, #0]
 800095c:	4b5f      	ldr	r3, [pc, #380]	; (8000adc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 800095e:	701a      	strb	r2, [r3, #0]
		sideRXDataRightFrontWheel = canRXData[1];
 8000960:	4b54      	ldr	r3, [pc, #336]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000962:	785a      	ldrb	r2, [r3, #1]
 8000964:	4b5e      	ldr	r3, [pc, #376]	; (8000ae0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000966:	701a      	strb	r2, [r3, #0]
		speedRXDataRightBackWheel = canRXData[2];
 8000968:	4b52      	ldr	r3, [pc, #328]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800096a:	789a      	ldrb	r2, [r3, #2]
 800096c:	4b5d      	ldr	r3, [pc, #372]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 800096e:	701a      	strb	r2, [r3, #0]
		sideRXDataRightBackWheel = canRXData[3];
 8000970:	4b50      	ldr	r3, [pc, #320]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000972:	78da      	ldrb	r2, [r3, #3]
 8000974:	4b5c      	ldr	r3, [pc, #368]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000976:	701a      	strb	r2, [r3, #0]
		current_right_1 = canRXData[4];
 8000978:	4b4e      	ldr	r3, [pc, #312]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800097a:	791a      	ldrb	r2, [r3, #4]
 800097c:	4b5b      	ldr	r3, [pc, #364]	; (8000aec <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 800097e:	701a      	strb	r2, [r3, #0]
		current_right_2 = canRXData[5];
 8000980:	4b4c      	ldr	r3, [pc, #304]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000982:	795a      	ldrb	r2, [r3, #5]
 8000984:	4b5a      	ldr	r3, [pc, #360]	; (8000af0 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000986:	701a      	strb	r2, [r3, #0]
		temp_right = canRXData[6];
 8000988:	4b4a      	ldr	r3, [pc, #296]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800098a:	799a      	ldrb	r2, [r3, #6]
 800098c:	4b59      	ldr	r3, [pc, #356]	; (8000af4 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 800098e:	701a      	strb	r2, [r3, #0]
 8000990:	e06e      	b.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x1D) {
 8000992:	4b49      	ldr	r3, [pc, #292]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b1d      	cmp	r3, #29
 8000998:	d109      	bne.n	80009ae <HAL_CAN_RxFifo0MsgPendingCallback+0xbe>
		sensorData1 = canRXData[0];
 800099a:	4b46      	ldr	r3, [pc, #280]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800099c:	781a      	ldrb	r2, [r3, #0]
 800099e:	4b56      	ldr	r3, [pc, #344]	; (8000af8 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 80009a0:	701a      	strb	r2, [r3, #0]
		sensors_data[0]++;
 80009a2:	4b56      	ldr	r3, [pc, #344]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3301      	adds	r3, #1
 80009a8:	4a54      	ldr	r2, [pc, #336]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	e060      	b.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x2D) {
 80009ae:	4b42      	ldr	r3, [pc, #264]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b2d      	cmp	r3, #45	; 0x2d
 80009b4:	d109      	bne.n	80009ca <HAL_CAN_RxFifo0MsgPendingCallback+0xda>
		sensorData2 = canRXData[0];
 80009b6:	4b3f      	ldr	r3, [pc, #252]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 80009b8:	781a      	ldrb	r2, [r3, #0]
 80009ba:	4b51      	ldr	r3, [pc, #324]	; (8000b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80009bc:	701a      	strb	r2, [r3, #0]
		sensors_data[1]++;
 80009be:	4b4f      	ldr	r3, [pc, #316]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	3301      	adds	r3, #1
 80009c4:	4a4d      	ldr	r2, [pc, #308]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009c6:	6053      	str	r3, [r2, #4]
 80009c8:	e052      	b.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x3D) {
 80009ca:	4b3b      	ldr	r3, [pc, #236]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b3d      	cmp	r3, #61	; 0x3d
 80009d0:	d109      	bne.n	80009e6 <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
		sensorData3 = canRXData[0];
 80009d2:	4b38      	ldr	r3, [pc, #224]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	4b4b      	ldr	r3, [pc, #300]	; (8000b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80009d8:	701a      	strb	r2, [r3, #0]
		sensors_data[2]++;
 80009da:	4b48      	ldr	r3, [pc, #288]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	3301      	adds	r3, #1
 80009e0:	4a46      	ldr	r2, [pc, #280]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009e2:	6093      	str	r3, [r2, #8]
 80009e4:	e044      	b.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x4D) {
 80009e6:	4b34      	ldr	r3, [pc, #208]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b4d      	cmp	r3, #77	; 0x4d
 80009ec:	d109      	bne.n	8000a02 <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
		sensorData4 = canRXData[0];
 80009ee:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 80009f0:	781a      	ldrb	r2, [r3, #0]
 80009f2:	4b45      	ldr	r3, [pc, #276]	; (8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80009f4:	701a      	strb	r2, [r3, #0]
		sensors_data[3]++;
 80009f6:	4b41      	ldr	r3, [pc, #260]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	3301      	adds	r3, #1
 80009fc:	4a3f      	ldr	r2, [pc, #252]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009fe:	60d3      	str	r3, [r2, #12]
 8000a00:	e036      	b.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x5D) {
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b5d      	cmp	r3, #93	; 0x5d
 8000a08:	d109      	bne.n	8000a1e <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
		sensorData5 = canRXData[0];
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a0c:	781a      	ldrb	r2, [r3, #0]
 8000a0e:	4b3f      	ldr	r3, [pc, #252]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000a10:	701a      	strb	r2, [r3, #0]
		sensors_data[4]++;
 8000a12:	4b3a      	ldr	r3, [pc, #232]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a14:	691b      	ldr	r3, [r3, #16]
 8000a16:	3301      	adds	r3, #1
 8000a18:	4a38      	ldr	r2, [pc, #224]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a1a:	6113      	str	r3, [r2, #16]
 8000a1c:	e028      	b.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x6D) {
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b6d      	cmp	r3, #109	; 0x6d
 8000a24:	d109      	bne.n	8000a3a <HAL_CAN_RxFifo0MsgPendingCallback+0x14a>
		sensorData6 = canRXData[0];
 8000a26:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	4b39      	ldr	r3, [pc, #228]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000a2c:	701a      	strb	r2, [r3, #0]
		sensors_data[5]++;
 8000a2e:	4b33      	ldr	r3, [pc, #204]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	3301      	adds	r3, #1
 8000a34:	4a31      	ldr	r2, [pc, #196]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a36:	6153      	str	r3, [r2, #20]
 8000a38:	e01a      	b.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x7D) {
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b7d      	cmp	r3, #125	; 0x7d
 8000a40:	d109      	bne.n	8000a56 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
		sensorData7 = canRXData[0];
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a44:	781a      	ldrb	r2, [r3, #0]
 8000a46:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8000a48:	701a      	strb	r2, [r3, #0]
		sensors_data[6]++;
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	4a2a      	ldr	r2, [pc, #168]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	e00c      	b.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x8D) {
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b8d      	cmp	r3, #141	; 0x8d
 8000a5c:	d108      	bne.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
		sensorData8 = canRXData[0];
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a60:	781a      	ldrb	r2, [r3, #0]
 8000a62:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8000a64:	701a      	strb	r2, [r3, #0]
		sensors_data[7]++;
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	4a23      	ldr	r2, [pc, #140]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a6e:	61d3      	str	r3, [r2, #28]
	}
	diagnostics_data[0] = current_left_1;
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8000a72:	781a      	ldrb	r2, [r3, #0]
 8000a74:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000a76:	701a      	strb	r2, [r3, #0]
	diagnostics_data[1] = current_left_2;
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000a7a:	781a      	ldrb	r2, [r3, #0]
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000a7e:	705a      	strb	r2, [r3, #1]
	diagnostics_data[2] = current_right_1;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000a86:	709a      	strb	r2, [r3, #2]
	diagnostics_data[3] = current_right_2;
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000a8e:	70da      	strb	r2, [r3, #3]
	diagnostics_data[4] = temp_left;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000a92:	781a      	ldrb	r2, [r3, #0]
 8000a94:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000a96:	711a      	strb	r2, [r3, #4]
	diagnostics_data[5] = temp_right;
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000a9e:	715a      	strb	r2, [r3, #5]
	can_RxHeader.StdId = 0x0000;
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000464 	.word	0x20000464
 8000ab4:	20004ed0 	.word	0x20004ed0
 8000ab8:	20004f4c 	.word	0x20004f4c
 8000abc:	20004f1c 	.word	0x20004f1c
 8000ac0:	20004aac 	.word	0x20004aac
 8000ac4:	20004f10 	.word	0x20004f10
 8000ac8:	20004ab4 	.word	0x20004ab4
 8000acc:	20004ac4 	.word	0x20004ac4
 8000ad0:	2000047f 	.word	0x2000047f
 8000ad4:	20000480 	.word	0x20000480
 8000ad8:	20000482 	.word	0x20000482
 8000adc:	20004f18 	.word	0x20004f18
 8000ae0:	20004ef4 	.word	0x20004ef4
 8000ae4:	20004acc 	.word	0x20004acc
 8000ae8:	20004a1c 	.word	0x20004a1c
 8000aec:	2000047d 	.word	0x2000047d
 8000af0:	2000047e 	.word	0x2000047e
 8000af4:	20000481 	.word	0x20000481
 8000af8:	20000475 	.word	0x20000475
 8000afc:	20004f68 	.word	0x20004f68
 8000b00:	20000476 	.word	0x20000476
 8000b04:	20000477 	.word	0x20000477
 8000b08:	20000478 	.word	0x20000478
 8000b0c:	20000479 	.word	0x20000479
 8000b10:	2000047a 	.word	0x2000047a
 8000b14:	2000047b 	.word	0x2000047b
 8000b18:	2000047c 	.word	0x2000047c
 8000b1c:	20000484 	.word	0x20000484

08000b20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000b28:	f00d feca 	bl	800e8c0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  gyro_handler();
 8000b2c:	f002 ff18 	bl	8003960 <gyro_handler>
	  osDelay(4);
 8000b30:	2004      	movs	r0, #4
 8000b32:	f00c fc7b 	bl	800d42c <osDelay>
	  accel_handler();
 8000b36:	f002 ff41 	bl	80039bc <accel_handler>
	  osDelay(4);
 8000b3a:	2004      	movs	r0, #4
 8000b3c:	f00c fc76 	bl	800d42c <osDelay>
	  gyro_handler();
 8000b40:	e7f4      	b.n	8000b2c <StartDefaultTask+0xc>
	...

08000b44 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 10;
 8000b4c:	230a      	movs	r3, #10
 8000b4e:	60fb      	str	r3, [r7, #12]
  xLastWakeTime = xTaskGetTickCount();
 8000b50:	f00d f87e 	bl	800dc50 <xTaskGetTickCount>
 8000b54:	4603      	mov	r3, r0
 8000b56:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
      vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	68f9      	ldr	r1, [r7, #12]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f00c fec0 	bl	800d8e4 <vTaskDelayUntil>
	  MPU9250_getAllData(allData);
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <StartTask02+0x34>)
 8000b66:	f000 fba1 	bl	80012ac <MPU9250_getAllData>
	  //osDelay(10);
	  count++;
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <StartTask02+0x38>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	4a02      	ldr	r2, [pc, #8]	; (8000b7c <StartTask02+0x38>)
 8000b72:	6013      	str	r3, [r2, #0]
      vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000b74:	e7f0      	b.n	8000b58 <StartTask02+0x14>
 8000b76:	bf00      	nop
 8000b78:	20004f04 	.word	0x20004f04
 8000b7c:	200004b8 	.word	0x200004b8

08000b80 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  left_wheels_data[0] = sideDataLeftFrontWheel;
 8000b88:	4b2f      	ldr	r3, [pc, #188]	; (8000c48 <StartTask03+0xc8>)
 8000b8a:	f993 3000 	ldrsb.w	r3, [r3]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	4b2e      	ldr	r3, [pc, #184]	; (8000c4c <StartTask03+0xcc>)
 8000b92:	701a      	strb	r2, [r3, #0]
	  left_wheels_data[1] = speedDataLeftFrontWheel;
 8000b94:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <StartTask03+0xd0>)
 8000b96:	f993 3000 	ldrsb.w	r3, [r3]
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <StartTask03+0xcc>)
 8000b9e:	705a      	strb	r2, [r3, #1]
	  left_wheels_data[2] = sideDataLeftBackWheel;
 8000ba0:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <StartTask03+0xd4>)
 8000ba2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <StartTask03+0xcc>)
 8000baa:	709a      	strb	r2, [r3, #2]
	  left_wheels_data[3] = speedDataLeftBackWheel;
 8000bac:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <StartTask03+0xd8>)
 8000bae:	f993 3000 	ldrsb.w	r3, [r3]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <StartTask03+0xcc>)
 8000bb6:	70da      	strb	r2, [r3, #3]
	  right_wheels_data[0] = sideDataRightFrontWheel;
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <StartTask03+0xdc>)
 8000bba:	f993 3000 	ldrsb.w	r3, [r3]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <StartTask03+0xe0>)
 8000bc2:	701a      	strb	r2, [r3, #0]
	  right_wheels_data[1] = speedDataRightFrontWheel;
 8000bc4:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <StartTask03+0xe4>)
 8000bc6:	f993 3000 	ldrsb.w	r3, [r3]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <StartTask03+0xe0>)
 8000bce:	705a      	strb	r2, [r3, #1]
	  right_wheels_data[2] = sideDataRightBackWheel;
 8000bd0:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <StartTask03+0xe8>)
 8000bd2:	f993 3000 	ldrsb.w	r3, [r3]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <StartTask03+0xe0>)
 8000bda:	709a      	strb	r2, [r3, #2]
	  right_wheels_data[3] = speedDataRightBackWheel;
 8000bdc:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <StartTask03+0xec>)
 8000bde:	f993 3000 	ldrsb.w	r3, [r3]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <StartTask03+0xe0>)
 8000be6:	70da      	strb	r2, [r3, #3]
	  if( HAL_CAN_AddTxMessage(&hcan1, &left_wheels_Header, left_wheels_data, &TxMailbox) == HAL_OK) {
 8000be8:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <StartTask03+0xf0>)
 8000bea:	4a18      	ldr	r2, [pc, #96]	; (8000c4c <StartTask03+0xcc>)
 8000bec:	4921      	ldr	r1, [pc, #132]	; (8000c74 <StartTask03+0xf4>)
 8000bee:	4822      	ldr	r0, [pc, #136]	; (8000c78 <StartTask03+0xf8>)
 8000bf0:	f004 f9fa 	bl	8004fe8 <HAL_CAN_AddTxMessage>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d104      	bne.n	8000c04 <StartTask03+0x84>
		  can2++;
 8000bfa:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <StartTask03+0xfc>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	4a1e      	ldr	r2, [pc, #120]	; (8000c7c <StartTask03+0xfc>)
 8000c02:	6013      	str	r3, [r2, #0]
	  }
	  osDelay(3);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f00c fc11 	bl	800d42c <osDelay>
	  HAL_CAN_AddTxMessage(&hcan1, &right_wheels_Header, right_wheels_data, &TxMailbox);
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <StartTask03+0xf0>)
 8000c0c:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <StartTask03+0xe0>)
 8000c0e:	491c      	ldr	r1, [pc, #112]	; (8000c80 <StartTask03+0x100>)
 8000c10:	4819      	ldr	r0, [pc, #100]	; (8000c78 <StartTask03+0xf8>)
 8000c12:	f004 f9e9 	bl	8004fe8 <HAL_CAN_AddTxMessage>
	  osDelay(3);
 8000c16:	2003      	movs	r0, #3
 8000c18:	f00c fc08 	bl	800d42c <osDelay>
	  rpm_left_front_handler();
 8000c1c:	f002 fdf2 	bl	8003804 <rpm_left_front_handler>
	  osDelay(3);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f00c fc03 	bl	800d42c <osDelay>
	  rpm_left_back_handler();
 8000c26:	f002 fe61 	bl	80038ec <rpm_left_back_handler>
	  osDelay(3);
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	f00c fbfe 	bl	800d42c <osDelay>
	  rpm_right_front_handler();
 8000c30:	f002 fdae 	bl	8003790 <rpm_right_front_handler>
	  osDelay(3);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f00c fbf9 	bl	800d42c <osDelay>
	  rpm_right_back_handler();
 8000c3a:	f002 fe1d 	bl	8003878 <rpm_right_back_handler>
	  osDelay(3);
 8000c3e:	2003      	movs	r0, #3
 8000c40:	f00c fbf4 	bl	800d42c <osDelay>
	  left_wheels_data[0] = sideDataLeftFrontWheel;
 8000c44:	e7a0      	b.n	8000b88 <StartTask03+0x8>
 8000c46:	bf00      	nop
 8000c48:	20000472 	.word	0x20000472
 8000c4c:	2000048c 	.word	0x2000048c
 8000c50:	2000046e 	.word	0x2000046e
 8000c54:	20000474 	.word	0x20000474
 8000c58:	20000470 	.word	0x20000470
 8000c5c:	20000471 	.word	0x20000471
 8000c60:	20000490 	.word	0x20000490
 8000c64:	2000046d 	.word	0x2000046d
 8000c68:	20000473 	.word	0x20000473
 8000c6c:	2000046f 	.word	0x2000046f
 8000c70:	20004ef8 	.word	0x20004ef8
 8000c74:	20004a20 	.word	0x20004a20
 8000c78:	20004f1c 	.word	0x20004f1c
 8000c7c:	20004a98 	.word	0x20004a98
 8000c80:	20004edc 	.word	0x20004edc

08000c84 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	  //diagnostics_data_handler();
	  sensors1_3_data_handler();
 8000c8c:	f002 fd14 	bl	80036b8 <sensors1_3_data_handler>
	  osDelay(4);
 8000c90:	2004      	movs	r0, #4
 8000c92:	f00c fbcb 	bl	800d42c <osDelay>
	  sensors4_6_data_handler();
 8000c96:	f002 fd45 	bl	8003724 <sensors4_6_data_handler>
	  osDelay(4);
 8000c9a:	2004      	movs	r0, #4
 8000c9c:	f00c fbc6 	bl	800d42c <osDelay>
	  sensors1_3_data_handler();
 8000ca0:	e7f4      	b.n	8000c8c <StartTask04+0x8>

08000ca2 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
	  spinOnce();
 8000caa:	f002 feb5 	bl	8003a18 <spinOnce>
	  osDelay(10);
 8000cae:	200a      	movs	r0, #10
 8000cb0:	f00c fbbc 	bl	800d42c <osDelay>
	  spinOnce();
 8000cb4:	e7f9      	b.n	8000caa <StartTask05+0x8>

08000cb6 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void const * argument)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//	  if (count > 1000)
//	  vTaskSuspend(task1Handle);
//	  eTaskState myState;
	  osDelay(2000);
 8000cbe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cc2:	f00c fbb3 	bl	800d42c <osDelay>
 8000cc6:	e7fa      	b.n	8000cbe <StartTask06+0x8>

08000cc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  ++tick;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000cd8:	6013      	str	r3, [r2, #0]
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d101      	bne.n	8000ce8 <HAL_TIM_PeriodElapsedCallback+0x20>
    HAL_IncTick();
 8000ce4:	f003 ff1e 	bl	8004b24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000468 	.word	0x20000468
 8000cf4:	40000400 	.word	0x40000400

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <error>:
void delay(uint32_t delayTime){
	uint32_t startTime =  sysTick_Time;
	while ( (sysTick_Time - startTime) < delayTime );
}

void error(void) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000d0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d10:	481d      	ldr	r0, [pc, #116]	; (8000d88 <error+0x80>)
 8000d12:	f005 f851 	bl	8005db8 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000d16:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d1a:	f003 ff23 	bl	8004b64 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000d1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d22:	4819      	ldr	r0, [pc, #100]	; (8000d88 <error+0x80>)
 8000d24:	f005 f848 	bl	8005db8 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000d28:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d2c:	f003 ff1a 	bl	8004b64 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000d30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d34:	4814      	ldr	r0, [pc, #80]	; (8000d88 <error+0x80>)
 8000d36:	f005 f83f 	bl	8005db8 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000d3a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d3e:	f003 ff11 	bl	8004b64 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000d42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d46:	4810      	ldr	r0, [pc, #64]	; (8000d88 <error+0x80>)
 8000d48:	f005 f836 	bl	8005db8 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000d4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d50:	f003 ff08 	bl	8004b64 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d58:	480b      	ldr	r0, [pc, #44]	; (8000d88 <error+0x80>)
 8000d5a:	f005 f82d 	bl	8005db8 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000d5e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d62:	f003 feff 	bl	8004b64 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000d66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d6a:	4807      	ldr	r0, [pc, #28]	; (8000d88 <error+0x80>)
 8000d6c:	f005 f824 	bl	8005db8 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000d70:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d74:	f003 fef6 	bl	8004b64 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000d78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <error+0x80>)
 8000d7e:	f005 f81b 	bl	8005db8 <HAL_GPIO_TogglePin>
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000

08000d8c <sensor_io_read>:

uint8_t sensor_io_read(uint16_t DeviceAddr, uint8_t RegisterAddr) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	460a      	mov	r2, r1
 8000d96:	80fb      	strh	r3, [r7, #6]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	717b      	strb	r3, [r7, #5]
	return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8000d9c:	797a      	ldrb	r2, [r7, #5]
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f806 	bl	8000db4 <I2Cx_ReadData>
 8000da8:	4603      	mov	r3, r0
	return HAL_OK;
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <I2Cx_ReadData>:
uint8_t sensor_io_write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value) {
	I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
	return HAL_OK;
}

uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af04      	add	r7, sp, #16
 8000dba:	4603      	mov	r3, r0
 8000dbc:	460a      	mov	r2, r1
 8000dbe:	80fb      	strh	r3, [r7, #6]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	73fb      	strb	r3, [r7, #15]
	value = 0;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <I2Cx_ReadData+0x54>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	b299      	uxth	r1, r3
 8000dd4:	797b      	ldrb	r3, [r7, #5]
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ddc:	9302      	str	r3, [sp, #8]
 8000dde:	2301      	movs	r3, #1
 8000de0:	9301      	str	r3, [sp, #4]
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <I2Cx_ReadData+0x54>)
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	2301      	movs	r3, #1
 8000de8:	4808      	ldr	r0, [pc, #32]	; (8000e0c <I2Cx_ReadData+0x58>)
 8000dea:	f005 fa37 	bl	800625c <HAL_I2C_Mem_Read>
 8000dee:	4603      	mov	r3, r0
 8000df0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <I2Cx_ReadData+0x48>
	{
	    error();
 8000df8:	f7ff ff86 	bl	8000d08 <error>
	}
	return value;
 8000dfc:	4b02      	ldr	r3, [pc, #8]	; (8000e08 <I2Cx_ReadData+0x54>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200004d4 	.word	0x200004d4
 8000e0c:	20004a44 	.word	0x20004a44

08000e10 <read_id>:
	if ((read_id()==0xFF)||(read_id()==0x70)||(read_id()==0x48)) {

	}
}

uint8_t read_id(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	ctrl = 0x00;
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <read_id+0x24>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
	ctrl = sensor_io_read(0x68, 0x75);
 8000e1a:	2175      	movs	r1, #117	; 0x75
 8000e1c:	2068      	movs	r0, #104	; 0x68
 8000e1e:	f7ff ffb5 	bl	8000d8c <sensor_io_read>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <read_id+0x24>)
 8000e28:	701a      	strb	r2, [r3, #0]
	return ctrl;
 8000e2a:	4b02      	ldr	r3, [pc, #8]	; (8000e34 <read_id+0x24>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2000046c 	.word	0x2000046c

08000e38 <MPU9250_init>:

void MPU9250_init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	//power up gyro
	MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	216b      	movs	r1, #107	; 0x6b
 8000e40:	2068      	movs	r0, #104	; 0x68
 8000e42:	f000 fbb3 	bl	80015ac <MPU9250_writeReg>
	//delay(100);
	MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8000e46:	2201      	movs	r2, #1
 8000e48:	216b      	movs	r1, #107	; 0x6b
 8000e4a:	2068      	movs	r0, #104	; 0x68
 8000e4c:	f000 fbae 	bl	80015ac <MPU9250_writeReg>

	MPU9250_writeReg(MPU9250_ADDRESS, CONFIG, 0x03);
 8000e50:	2203      	movs	r2, #3
 8000e52:	211a      	movs	r1, #26
 8000e54:	2068      	movs	r0, #104	; 0x68
 8000e56:	f000 fba9 	bl	80015ac <MPU9250_writeReg>

	MPU9250_writeReg(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);
 8000e5a:	2204      	movs	r2, #4
 8000e5c:	2119      	movs	r1, #25
 8000e5e:	2068      	movs	r0, #104	; 0x68
 8000e60:	f000 fba4 	bl	80015ac <MPU9250_writeReg>
	//MPU6050_SMPLRT_DIV
	//gyro config 500

	MPU9250_writeReg(MPU9250_ADDRESS, GYRO_CONFIG, 0x08);
 8000e64:	2208      	movs	r2, #8
 8000e66:	211b      	movs	r1, #27
 8000e68:	2068      	movs	r0, #104	; 0x68
 8000e6a:	f000 fb9f 	bl	80015ac <MPU9250_writeReg>
	//accel config 8g
	MPU9250_writeReg(MPU9250_ADDRESS, ACCEL_CONFIG, 0x10);
 8000e6e:	2210      	movs	r2, #16
 8000e70:	211c      	movs	r1, #28
 8000e72:	2068      	movs	r0, #104	; 0x68
 8000e74:	f000 fb9a 	bl	80015ac <MPU9250_writeReg>

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <MPU9250_calibrate>:

//void calibrateMPU9250(float * dest1, float * dest2)
void MPU9250_calibrate()
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
    uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
    uint16_t ii, packet_count, fifo_count;
    //int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};

    // reset device
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8000e82:	2280      	movs	r2, #128	; 0x80
 8000e84:	216b      	movs	r1, #107	; 0x6b
 8000e86:	2068      	movs	r0, #104	; 0x68
 8000e88:	f000 fb90 	bl	80015ac <MPU9250_writeReg>
    HAL_Delay(100);
 8000e8c:	2064      	movs	r0, #100	; 0x64
 8000e8e:	f003 fe69 	bl	8004b64 <HAL_Delay>

    // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
    // else use the internal oscillator, bits 2:0 = 001
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8000e92:	2201      	movs	r2, #1
 8000e94:	216b      	movs	r1, #107	; 0x6b
 8000e96:	2068      	movs	r0, #104	; 0x68
 8000e98:	f000 fb88 	bl	80015ac <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	216c      	movs	r1, #108	; 0x6c
 8000ea0:	2068      	movs	r0, #104	; 0x68
 8000ea2:	f000 fb83 	bl	80015ac <MPU9250_writeReg>
    HAL_Delay(200);
 8000ea6:	20c8      	movs	r0, #200	; 0xc8
 8000ea8:	f003 fe5c 	bl	8004b64 <HAL_Delay>

    // Configure device for bias calculation
    MPU9250_writeReg(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 8000eac:	2200      	movs	r2, #0
 8000eae:	2138      	movs	r1, #56	; 0x38
 8000eb0:	2068      	movs	r0, #104	; 0x68
 8000eb2:	f000 fb7b 	bl	80015ac <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2123      	movs	r1, #35	; 0x23
 8000eba:	2068      	movs	r0, #104	; 0x68
 8000ebc:	f000 fb76 	bl	80015ac <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	216b      	movs	r1, #107	; 0x6b
 8000ec4:	2068      	movs	r0, #104	; 0x68
 8000ec6:	f000 fb71 	bl	80015ac <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2124      	movs	r1, #36	; 0x24
 8000ece:	2068      	movs	r0, #104	; 0x68
 8000ed0:	f000 fb6c 	bl	80015ac <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	216a      	movs	r1, #106	; 0x6a
 8000ed8:	2068      	movs	r0, #104	; 0x68
 8000eda:	f000 fb67 	bl	80015ac <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8000ede:	220c      	movs	r2, #12
 8000ee0:	216a      	movs	r1, #106	; 0x6a
 8000ee2:	2068      	movs	r0, #104	; 0x68
 8000ee4:	f000 fb62 	bl	80015ac <MPU9250_writeReg>
    HAL_Delay(15);
 8000ee8:	200f      	movs	r0, #15
 8000eea:	f003 fe3b 	bl	8004b64 <HAL_Delay>

    // Configure MPU6050 gyro and accelerometer for bias calculation
    MPU9250_writeReg(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8000eee:	2201      	movs	r2, #1
 8000ef0:	211a      	movs	r1, #26
 8000ef2:	2068      	movs	r0, #104	; 0x68
 8000ef4:	f000 fb5a 	bl	80015ac <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2119      	movs	r1, #25
 8000efc:	2068      	movs	r0, #104	; 0x68
 8000efe:	f000 fb55 	bl	80015ac <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8000f02:	2200      	movs	r2, #0
 8000f04:	211b      	movs	r1, #27
 8000f06:	2068      	movs	r0, #104	; 0x68
 8000f08:	f000 fb50 	bl	80015ac <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	211c      	movs	r1, #28
 8000f10:	2068      	movs	r0, #104	; 0x68
 8000f12:	f000 fb4b 	bl	80015ac <MPU9250_writeReg>

    //uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
    uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8000f16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f1a:	84bb      	strh	r3, [r7, #36]	; 0x24

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
    MPU9250_writeReg(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 8000f1c:	2240      	movs	r2, #64	; 0x40
 8000f1e:	216a      	movs	r1, #106	; 0x6a
 8000f20:	2068      	movs	r0, #104	; 0x68
 8000f22:	f000 fb43 	bl	80015ac <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8000f26:	2278      	movs	r2, #120	; 0x78
 8000f28:	2123      	movs	r1, #35	; 0x23
 8000f2a:	2068      	movs	r0, #104	; 0x68
 8000f2c:	f000 fb3e 	bl	80015ac <MPU9250_writeReg>
    HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8000f30:	2028      	movs	r0, #40	; 0x28
 8000f32:	f003 fe17 	bl	8004b64 <HAL_Delay>

    // At end of sample accumulation, turn off FIFO sensor read
    MPU9250_writeReg(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8000f36:	2200      	movs	r2, #0
 8000f38:	2123      	movs	r1, #35	; 0x23
 8000f3a:	2068      	movs	r0, #104	; 0x68
 8000f3c:	f000 fb36 	bl	80015ac <MPU9250_writeReg>
    //readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
    fifo_count = MPU9250_readReg16Bit(MPU9250_ADDRESS, FIFO_COUNTH);
 8000f40:	2172      	movs	r1, #114	; 0x72
 8000f42:	2068      	movs	r0, #104	; 0x68
 8000f44:	f000 fb72 	bl	800162c <MPU9250_readReg16Bit>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	847b      	strh	r3, [r7, #34]	; 0x22
    packet_count = fifo_count / 12;// How many sets of full gyro and accelerometer data for averaging
 8000f4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f4e:	4a58      	ldr	r2, [pc, #352]	; (80010b0 <MPU9250_calibrate+0x234>)
 8000f50:	fba2 2303 	umull	r2, r3, r2, r3
 8000f54:	08db      	lsrs	r3, r3, #3
 8000f56:	843b      	strh	r3, [r7, #32]

    for (ii = 0; ii < packet_count; ii++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f5c:	e06f      	b.n	800103e <MPU9250_calibrate+0x1c2>
    {
        int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8000f5e:	2300      	movs	r3, #0
 8000f60:	813b      	strh	r3, [r7, #8]
 8000f62:	2300      	movs	r3, #0
 8000f64:	817b      	strh	r3, [r7, #10]
 8000f66:	2300      	movs	r3, #0
 8000f68:	81bb      	strh	r3, [r7, #12]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	803b      	strh	r3, [r7, #0]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	807b      	strh	r3, [r7, #2]
 8000f72:	2300      	movs	r3, #0
 8000f74:	80bb      	strh	r3, [r7, #4]
        MPU9250_readMulti(MPU9250_ADDRESS, FIFO_R_W, data, 12); // read data for averaging
 8000f76:	f107 0214 	add.w	r2, r7, #20
 8000f7a:	230c      	movs	r3, #12
 8000f7c:	2174      	movs	r1, #116	; 0x74
 8000f7e:	2068      	movs	r0, #104	; 0x68
 8000f80:	f000 fb74 	bl	800166c <MPU9250_readMulti>
        accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8000f84:	7d3b      	ldrb	r3, [r7, #20]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	7d7b      	ldrb	r3, [r7, #21]
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	813b      	strh	r3, [r7, #8]
        accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8000f94:	7dbb      	ldrb	r3, [r7, #22]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	817b      	strh	r3, [r7, #10]
        accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8000fa4:	7e3b      	ldrb	r3, [r7, #24]
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	7e7b      	ldrb	r3, [r7, #25]
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	81bb      	strh	r3, [r7, #12]
        gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8000fb4:	7ebb      	ldrb	r3, [r7, #26]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	7efb      	ldrb	r3, [r7, #27]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	803b      	strh	r3, [r7, #0]
        gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8000fc4:	7f3b      	ldrb	r3, [r7, #28]
 8000fc6:	021b      	lsls	r3, r3, #8
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	7f7b      	ldrb	r3, [r7, #29]
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	807b      	strh	r3, [r7, #2]
        gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8000fd4:	7fbb      	ldrb	r3, [r7, #30]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	7ffb      	ldrb	r3, [r7, #31]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	80bb      	strh	r3, [r7, #4]

        accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8000fe4:	4b33      	ldr	r3, [pc, #204]	; (80010b4 <MPU9250_calibrate+0x238>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a31      	ldr	r2, [pc, #196]	; (80010b4 <MPU9250_calibrate+0x238>)
 8000ff0:	6013      	str	r3, [r2, #0]
        accel_bias[1] += (int32_t) accel_temp[1];
 8000ff2:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <MPU9250_calibrate+0x238>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a2d      	ldr	r2, [pc, #180]	; (80010b4 <MPU9250_calibrate+0x238>)
 8000ffe:	6053      	str	r3, [r2, #4]
        accel_bias[2] += (int32_t) accel_temp[2];
 8001000:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <MPU9250_calibrate+0x238>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001008:	4413      	add	r3, r2
 800100a:	4a2a      	ldr	r2, [pc, #168]	; (80010b4 <MPU9250_calibrate+0x238>)
 800100c:	6093      	str	r3, [r2, #8]
        gyro_bias[0]  += (int32_t) gyro_temp[0];
 800100e:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <MPU9250_calibrate+0x23c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001016:	4413      	add	r3, r2
 8001018:	4a27      	ldr	r2, [pc, #156]	; (80010b8 <MPU9250_calibrate+0x23c>)
 800101a:	6013      	str	r3, [r2, #0]
        gyro_bias[1]  += (int32_t) gyro_temp[1];
 800101c:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <MPU9250_calibrate+0x23c>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001024:	4413      	add	r3, r2
 8001026:	4a24      	ldr	r2, [pc, #144]	; (80010b8 <MPU9250_calibrate+0x23c>)
 8001028:	6053      	str	r3, [r2, #4]
        gyro_bias[2]  += (int32_t) gyro_temp[2];
 800102a:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <MPU9250_calibrate+0x23c>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001032:	4413      	add	r3, r2
 8001034:	4a20      	ldr	r2, [pc, #128]	; (80010b8 <MPU9250_calibrate+0x23c>)
 8001036:	6093      	str	r3, [r2, #8]
    for (ii = 0; ii < packet_count; ii++)
 8001038:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800103a:	3301      	adds	r3, #1
 800103c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800103e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001040:	8c3b      	ldrh	r3, [r7, #32]
 8001042:	429a      	cmp	r2, r3
 8001044:	d38b      	bcc.n	8000f5e <MPU9250_calibrate+0xe2>
    }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MPU9250_calibrate+0x238>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	8c3b      	ldrh	r3, [r7, #32]
 800104c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001050:	4a18      	ldr	r2, [pc, #96]	; (80010b4 <MPU9250_calibrate+0x238>)
 8001052:	6013      	str	r3, [r2, #0]
    accel_bias[1] /= (int32_t) packet_count;
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MPU9250_calibrate+0x238>)
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	8c3b      	ldrh	r3, [r7, #32]
 800105a:	fb92 f3f3 	sdiv	r3, r2, r3
 800105e:	4a15      	ldr	r2, [pc, #84]	; (80010b4 <MPU9250_calibrate+0x238>)
 8001060:	6053      	str	r3, [r2, #4]
    accel_bias[2] /= (int32_t) packet_count;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MPU9250_calibrate+0x238>)
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	8c3b      	ldrh	r3, [r7, #32]
 8001068:	fb92 f3f3 	sdiv	r3, r2, r3
 800106c:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <MPU9250_calibrate+0x238>)
 800106e:	6093      	str	r3, [r2, #8]
    gyro_bias[0]  /= (int32_t) packet_count;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MPU9250_calibrate+0x23c>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	8c3b      	ldrh	r3, [r7, #32]
 8001076:	fb92 f3f3 	sdiv	r3, r2, r3
 800107a:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <MPU9250_calibrate+0x23c>)
 800107c:	6013      	str	r3, [r2, #0]
    gyro_bias[1]  /= (int32_t) packet_count;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MPU9250_calibrate+0x23c>)
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	8c3b      	ldrh	r3, [r7, #32]
 8001084:	fb92 f3f3 	sdiv	r3, r2, r3
 8001088:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <MPU9250_calibrate+0x23c>)
 800108a:	6053      	str	r3, [r2, #4]
    gyro_bias[2]  /= (int32_t) packet_count;
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <MPU9250_calibrate+0x23c>)
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	8c3b      	ldrh	r3, [r7, #32]
 8001092:	fb92 f3f3 	sdiv	r3, r2, r3
 8001096:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <MPU9250_calibrate+0x23c>)
 8001098:	6093      	str	r3, [r2, #8]

    if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MPU9250_calibrate+0x238>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	dd0c      	ble.n	80010bc <MPU9250_calibrate+0x240>
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <MPU9250_calibrate+0x238>)
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	4a02      	ldr	r2, [pc, #8]	; (80010b4 <MPU9250_calibrate+0x238>)
 80010ac:	6093      	str	r3, [r2, #8]
 80010ae:	e00b      	b.n	80010c8 <MPU9250_calibrate+0x24c>
 80010b0:	aaaaaaab 	.word	0xaaaaaaab
 80010b4:	200004a0 	.word	0x200004a0
 80010b8:	20000494 	.word	0x20000494
    else {accel_bias[2] += (int32_t) accelsensitivity;}
 80010bc:	4b78      	ldr	r3, [pc, #480]	; (80012a0 <MPU9250_calibrate+0x424>)
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010c2:	4413      	add	r3, r2
 80010c4:	4a76      	ldr	r2, [pc, #472]	; (80012a0 <MPU9250_calibrate+0x424>)
 80010c6:	6093      	str	r3, [r2, #8]

    // Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
    data[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80010c8:	4b76      	ldr	r3, [pc, #472]	; (80012a4 <MPU9250_calibrate+0x428>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	425b      	negs	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	da00      	bge.n	80010d4 <MPU9250_calibrate+0x258>
 80010d2:	3303      	adds	r3, #3
 80010d4:	109b      	asrs	r3, r3, #2
 80010d6:	121b      	asrs	r3, r3, #8
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	753b      	strb	r3, [r7, #20]
    data[1] = (-gyro_bias[0] / 4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 80010dc:	4b71      	ldr	r3, [pc, #452]	; (80012a4 <MPU9250_calibrate+0x428>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	425b      	negs	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	da00      	bge.n	80010e8 <MPU9250_calibrate+0x26c>
 80010e6:	3303      	adds	r3, #3
 80010e8:	109b      	asrs	r3, r3, #2
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	757b      	strb	r3, [r7, #21]
    data[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 80010ee:	4b6d      	ldr	r3, [pc, #436]	; (80012a4 <MPU9250_calibrate+0x428>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	425b      	negs	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	da00      	bge.n	80010fa <MPU9250_calibrate+0x27e>
 80010f8:	3303      	adds	r3, #3
 80010fa:	109b      	asrs	r3, r3, #2
 80010fc:	121b      	asrs	r3, r3, #8
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	75bb      	strb	r3, [r7, #22]
    data[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8001102:	4b68      	ldr	r3, [pc, #416]	; (80012a4 <MPU9250_calibrate+0x428>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	425b      	negs	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	da00      	bge.n	800110e <MPU9250_calibrate+0x292>
 800110c:	3303      	adds	r3, #3
 800110e:	109b      	asrs	r3, r3, #2
 8001110:	b2db      	uxtb	r3, r3
 8001112:	75fb      	strb	r3, [r7, #23]
    data[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8001114:	4b63      	ldr	r3, [pc, #396]	; (80012a4 <MPU9250_calibrate+0x428>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	425b      	negs	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	da00      	bge.n	8001120 <MPU9250_calibrate+0x2a4>
 800111e:	3303      	adds	r3, #3
 8001120:	109b      	asrs	r3, r3, #2
 8001122:	121b      	asrs	r3, r3, #8
 8001124:	b2db      	uxtb	r3, r3
 8001126:	763b      	strb	r3, [r7, #24]
    data[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8001128:	4b5e      	ldr	r3, [pc, #376]	; (80012a4 <MPU9250_calibrate+0x428>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	425b      	negs	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	da00      	bge.n	8001134 <MPU9250_calibrate+0x2b8>
 8001132:	3303      	adds	r3, #3
 8001134:	109b      	asrs	r3, r3, #2
 8001136:	b2db      	uxtb	r3, r3
 8001138:	767b      	strb	r3, [r7, #25]

    // Push gyro biases to hardware registers
    MPU9250_writeReg(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 800113a:	7d3b      	ldrb	r3, [r7, #20]
 800113c:	461a      	mov	r2, r3
 800113e:	2113      	movs	r1, #19
 8001140:	2068      	movs	r0, #104	; 0x68
 8001142:	f000 fa33 	bl	80015ac <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 8001146:	7d7b      	ldrb	r3, [r7, #21]
 8001148:	461a      	mov	r2, r3
 800114a:	2114      	movs	r1, #20
 800114c:	2068      	movs	r0, #104	; 0x68
 800114e:	f000 fa2d 	bl	80015ac <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 8001152:	7dbb      	ldrb	r3, [r7, #22]
 8001154:	461a      	mov	r2, r3
 8001156:	2115      	movs	r1, #21
 8001158:	2068      	movs	r0, #104	; 0x68
 800115a:	f000 fa27 	bl	80015ac <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	461a      	mov	r2, r3
 8001162:	2116      	movs	r1, #22
 8001164:	2068      	movs	r0, #104	; 0x68
 8001166:	f000 fa21 	bl	80015ac <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 800116a:	7e3b      	ldrb	r3, [r7, #24]
 800116c:	461a      	mov	r2, r3
 800116e:	2117      	movs	r1, #23
 8001170:	2068      	movs	r0, #104	; 0x68
 8001172:	f000 fa1b 	bl	80015ac <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 8001176:	7e7b      	ldrb	r3, [r7, #25]
 8001178:	461a      	mov	r2, r3
 800117a:	2118      	movs	r1, #24
 800117c:	2068      	movs	r0, #104	; 0x68
 800117e:	f000 fa15 	bl	80015ac <MPU9250_writeReg>
    // the accelerometer biases calculated above must be divided by 8.


     //int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
     //readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
     data[0] = MPU9250_readReg(MPU9250_ADDRESS, XA_OFFSET_H);
 8001182:	2177      	movs	r1, #119	; 0x77
 8001184:	2068      	movs	r0, #104	; 0x68
 8001186:	f000 fa31 	bl	80015ec <MPU9250_readReg>
 800118a:	4603      	mov	r3, r0
 800118c:	753b      	strb	r3, [r7, #20]
     data[1] = MPU9250_readReg(MPU9250_ADDRESS, XA_OFFSET_L);
 800118e:	2178      	movs	r1, #120	; 0x78
 8001190:	2068      	movs	r0, #104	; 0x68
 8001192:	f000 fa2b 	bl	80015ec <MPU9250_readReg>
 8001196:	4603      	mov	r3, r0
 8001198:	757b      	strb	r3, [r7, #21]
     data[2] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_H);
 800119a:	217a      	movs	r1, #122	; 0x7a
 800119c:	2068      	movs	r0, #104	; 0x68
 800119e:	f000 fa25 	bl	80015ec <MPU9250_readReg>
 80011a2:	4603      	mov	r3, r0
 80011a4:	75bb      	strb	r3, [r7, #22]
     data[3] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_L);
 80011a6:	217b      	movs	r1, #123	; 0x7b
 80011a8:	2068      	movs	r0, #104	; 0x68
 80011aa:	f000 fa1f 	bl	80015ec <MPU9250_readReg>
 80011ae:	4603      	mov	r3, r0
 80011b0:	75fb      	strb	r3, [r7, #23]
     data[4] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_H);
 80011b2:	217d      	movs	r1, #125	; 0x7d
 80011b4:	2068      	movs	r0, #104	; 0x68
 80011b6:	f000 fa19 	bl	80015ec <MPU9250_readReg>
 80011ba:	4603      	mov	r3, r0
 80011bc:	763b      	strb	r3, [r7, #24]
     data[5] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_L);
 80011be:	217e      	movs	r1, #126	; 0x7e
 80011c0:	2068      	movs	r0, #104	; 0x68
 80011c2:	f000 fa13 	bl	80015ec <MPU9250_readReg>
 80011c6:	4603      	mov	r3, r0
 80011c8:	767b      	strb	r3, [r7, #25]
     accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]  );
 80011ca:	7d3b      	ldrb	r3, [r7, #20]
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	7d7a      	ldrb	r2, [r7, #21]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	4a35      	ldr	r2, [pc, #212]	; (80012a8 <MPU9250_calibrate+0x42c>)
 80011d4:	6013      	str	r3, [r2, #0]
     accel_bias_reg[1] = (int32_t) (((int16_t)data[2] << 8) | data[3]  );
 80011d6:	7dbb      	ldrb	r3, [r7, #22]
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	7dfa      	ldrb	r2, [r7, #23]
 80011dc:	4313      	orrs	r3, r2
 80011de:	4a32      	ldr	r2, [pc, #200]	; (80012a8 <MPU9250_calibrate+0x42c>)
 80011e0:	6053      	str	r3, [r2, #4]
     accel_bias_reg[2] = (int32_t) (((int16_t)data[4] << 8) | data[5]  );
 80011e2:	7e3b      	ldrb	r3, [r7, #24]
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	7e7a      	ldrb	r2, [r7, #25]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	4a2f      	ldr	r2, [pc, #188]	; (80012a8 <MPU9250_calibrate+0x42c>)
 80011ec:	6093      	str	r3, [r2, #8]
//     accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
//     readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
//     accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);

     //uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
     uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 80011ee:	2300      	movs	r3, #0
 80011f0:	743b      	strb	r3, [r7, #16]
 80011f2:	2300      	movs	r3, #0
 80011f4:	747b      	strb	r3, [r7, #17]
 80011f6:	2300      	movs	r3, #0
 80011f8:	74bb      	strb	r3, [r7, #18]
    // for(ii = 0; ii < 3; ii++) {
    //     if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
    // }

     // Construct total accelerometer bias, including calculated average accelerometer bias from above
     accel_bias_reg[0] -= (accel_bias[0] / 8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80011fa:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <MPU9250_calibrate+0x42c>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <MPU9250_calibrate+0x424>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	da00      	bge.n	8001208 <MPU9250_calibrate+0x38c>
 8001206:	3307      	adds	r3, #7
 8001208:	10db      	asrs	r3, r3, #3
 800120a:	425b      	negs	r3, r3
 800120c:	4413      	add	r3, r2
 800120e:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <MPU9250_calibrate+0x42c>)
 8001210:	6013      	str	r3, [r2, #0]
     accel_bias_reg[1] -= (accel_bias[1] / 8);
 8001212:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <MPU9250_calibrate+0x42c>)
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <MPU9250_calibrate+0x424>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	da00      	bge.n	8001220 <MPU9250_calibrate+0x3a4>
 800121e:	3307      	adds	r3, #7
 8001220:	10db      	asrs	r3, r3, #3
 8001222:	425b      	negs	r3, r3
 8001224:	4413      	add	r3, r2
 8001226:	4a20      	ldr	r2, [pc, #128]	; (80012a8 <MPU9250_calibrate+0x42c>)
 8001228:	6053      	str	r3, [r2, #4]
     accel_bias_reg[2] -= (accel_bias[2] / 8);
 800122a:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <MPU9250_calibrate+0x42c>)
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <MPU9250_calibrate+0x424>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	da00      	bge.n	8001238 <MPU9250_calibrate+0x3bc>
 8001236:	3307      	adds	r3, #7
 8001238:	10db      	asrs	r3, r3, #3
 800123a:	425b      	negs	r3, r3
 800123c:	4413      	add	r3, r2
 800123e:	4a1a      	ldr	r2, [pc, #104]	; (80012a8 <MPU9250_calibrate+0x42c>)
 8001240:	6093      	str	r3, [r2, #8]

     data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MPU9250_calibrate+0x42c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	121b      	asrs	r3, r3, #8
 8001248:	b2db      	uxtb	r3, r3
 800124a:	753b      	strb	r3, [r7, #20]
     data[1] = (accel_bias_reg[0])      & 0xFF;
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MPU9250_calibrate+0x42c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	757b      	strb	r3, [r7, #21]
     data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001254:	7d7a      	ldrb	r2, [r7, #21]
 8001256:	7c3b      	ldrb	r3, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	b2db      	uxtb	r3, r3
 800125c:	757b      	strb	r3, [r7, #21]
     data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MPU9250_calibrate+0x42c>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	121b      	asrs	r3, r3, #8
 8001264:	b2db      	uxtb	r3, r3
 8001266:	75bb      	strb	r3, [r7, #22]
     data[3] = (accel_bias_reg[1])      & 0xFF;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MPU9250_calibrate+0x42c>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	75fb      	strb	r3, [r7, #23]
     data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001270:	7dfa      	ldrb	r2, [r7, #23]
 8001272:	7c7b      	ldrb	r3, [r7, #17]
 8001274:	4313      	orrs	r3, r2
 8001276:	b2db      	uxtb	r3, r3
 8001278:	75fb      	strb	r3, [r7, #23]
     data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <MPU9250_calibrate+0x42c>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	121b      	asrs	r3, r3, #8
 8001280:	b2db      	uxtb	r3, r3
 8001282:	763b      	strb	r3, [r7, #24]
     data[5] = (accel_bias_reg[2])      & 0xFF;
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <MPU9250_calibrate+0x42c>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	767b      	strb	r3, [r7, #25]
     data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 800128c:	7e7a      	ldrb	r2, [r7, #25]
 800128e:	7cbb      	ldrb	r3, [r7, #18]
 8001290:	4313      	orrs	r3, r2
 8001292:	b2db      	uxtb	r3, r3
 8001294:	767b      	strb	r3, [r7, #25]
//     MPU9250_writeReg(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
//     MPU9250_writeReg(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
//     MPU9250_writeReg(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
//     MPU9250_writeReg(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);

}
 8001296:	bf00      	nop
 8001298:	3728      	adds	r7, #40	; 0x28
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200004a0 	.word	0x200004a0
 80012a4:	20000494 	.word	0x20000494
 80012a8:	200004ac 	.word	0x200004ac

080012ac <MPU9250_getAllData>:

void MPU9250_getAllData(int16_t *Data)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	uint8_t buffer[12];
	buffer[0] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_XOUT_H);
 80012b4:	2143      	movs	r1, #67	; 0x43
 80012b6:	2068      	movs	r0, #104	; 0x68
 80012b8:	f000 f998 	bl	80015ec <MPU9250_readReg>
 80012bc:	4603      	mov	r3, r0
 80012be:	733b      	strb	r3, [r7, #12]
	buffer[1] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_XOUT_L);
 80012c0:	2144      	movs	r1, #68	; 0x44
 80012c2:	2068      	movs	r0, #104	; 0x68
 80012c4:	f000 f992 	bl	80015ec <MPU9250_readReg>
 80012c8:	4603      	mov	r3, r0
 80012ca:	737b      	strb	r3, [r7, #13]
	buffer[2] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_YOUT_H);
 80012cc:	2145      	movs	r1, #69	; 0x45
 80012ce:	2068      	movs	r0, #104	; 0x68
 80012d0:	f000 f98c 	bl	80015ec <MPU9250_readReg>
 80012d4:	4603      	mov	r3, r0
 80012d6:	73bb      	strb	r3, [r7, #14]
	buffer[3] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_YOUT_L);
 80012d8:	2146      	movs	r1, #70	; 0x46
 80012da:	2068      	movs	r0, #104	; 0x68
 80012dc:	f000 f986 	bl	80015ec <MPU9250_readReg>
 80012e0:	4603      	mov	r3, r0
 80012e2:	73fb      	strb	r3, [r7, #15]
	buffer[4] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_ZOUT_H);
 80012e4:	2147      	movs	r1, #71	; 0x47
 80012e6:	2068      	movs	r0, #104	; 0x68
 80012e8:	f000 f980 	bl	80015ec <MPU9250_readReg>
 80012ec:	4603      	mov	r3, r0
 80012ee:	743b      	strb	r3, [r7, #16]
	buffer[5] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_ZOUT_L);
 80012f0:	2148      	movs	r1, #72	; 0x48
 80012f2:	2068      	movs	r0, #104	; 0x68
 80012f4:	f000 f97a 	bl	80015ec <MPU9250_readReg>
 80012f8:	4603      	mov	r3, r0
 80012fa:	747b      	strb	r3, [r7, #17]
	buffer[6] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_XOUT_H);
 80012fc:	213b      	movs	r1, #59	; 0x3b
 80012fe:	2068      	movs	r0, #104	; 0x68
 8001300:	f000 f974 	bl	80015ec <MPU9250_readReg>
 8001304:	4603      	mov	r3, r0
 8001306:	74bb      	strb	r3, [r7, #18]
	buffer[7] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_XOUT_L);
 8001308:	213c      	movs	r1, #60	; 0x3c
 800130a:	2068      	movs	r0, #104	; 0x68
 800130c:	f000 f96e 	bl	80015ec <MPU9250_readReg>
 8001310:	4603      	mov	r3, r0
 8001312:	74fb      	strb	r3, [r7, #19]
	buffer[8] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_YOUT_H);
 8001314:	213d      	movs	r1, #61	; 0x3d
 8001316:	2068      	movs	r0, #104	; 0x68
 8001318:	f000 f968 	bl	80015ec <MPU9250_readReg>
 800131c:	4603      	mov	r3, r0
 800131e:	753b      	strb	r3, [r7, #20]
	buffer[9] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_YOUT_L);
 8001320:	213e      	movs	r1, #62	; 0x3e
 8001322:	2068      	movs	r0, #104	; 0x68
 8001324:	f000 f962 	bl	80015ec <MPU9250_readReg>
 8001328:	4603      	mov	r3, r0
 800132a:	757b      	strb	r3, [r7, #21]
	buffer[10] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_ZOUT_H);
 800132c:	213f      	movs	r1, #63	; 0x3f
 800132e:	2068      	movs	r0, #104	; 0x68
 8001330:	f000 f95c 	bl	80015ec <MPU9250_readReg>
 8001334:	4603      	mov	r3, r0
 8001336:	75bb      	strb	r3, [r7, #22]
	buffer[11] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_ZOUT_L);
 8001338:	2140      	movs	r1, #64	; 0x40
 800133a:	2068      	movs	r0, #104	; 0x68
 800133c:	f000 f956 	bl	80015ec <MPU9250_readReg>
 8001340:	4603      	mov	r3, r0
 8001342:	75fb      	strb	r3, [r7, #23]
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 8001344:	7b3b      	ldrb	r3, [r7, #12]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	b21b      	sxth	r3, r3
 800134a:	461a      	mov	r2, r3
 800134c:	7b7b      	ldrb	r3, [r7, #13]
 800134e:	4413      	add	r3, r2
 8001350:	ee07 3a90 	vmov	s15, r3
 8001354:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001358:	eddf 6a53 	vldr	s13, [pc, #332]	; 80014a8 <MPU9250_getAllData+0x1fc>
 800135c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001360:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80014ac <MPU9250_getAllData+0x200>
 8001364:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001368:	eddf 6a51 	vldr	s13, [pc, #324]	; 80014b0 <MPU9250_getAllData+0x204>
 800136c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001370:	4b50      	ldr	r3, [pc, #320]	; (80014b4 <MPU9250_getAllData+0x208>)
 8001372:	edc3 7a00 	vstr	s15, [r3]
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 8001376:	7bbb      	ldrb	r3, [r7, #14]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b21b      	sxth	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	4413      	add	r3, r2
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800138a:	eddf 6a47 	vldr	s13, [pc, #284]	; 80014a8 <MPU9250_getAllData+0x1fc>
 800138e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001392:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80014ac <MPU9250_getAllData+0x200>
 8001396:	ee27 7a87 	vmul.f32	s14, s15, s14
 800139a:	eddf 6a45 	vldr	s13, [pc, #276]	; 80014b0 <MPU9250_getAllData+0x204>
 800139e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013a2:	4b45      	ldr	r3, [pc, #276]	; (80014b8 <MPU9250_getAllData+0x20c>)
 80013a4:	edc3 7a00 	vstr	s15, [r3]
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 80013a8:	7c3b      	ldrb	r3, [r7, #16]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	461a      	mov	r2, r3
 80013b0:	7c7b      	ldrb	r3, [r7, #17]
 80013b2:	4413      	add	r3, r2
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013bc:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80014a8 <MPU9250_getAllData+0x1fc>
 80013c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80014ac <MPU9250_getAllData+0x200>
 80013c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013cc:	eddf 6a38 	vldr	s13, [pc, #224]	; 80014b0 <MPU9250_getAllData+0x204>
 80013d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d4:	4b39      	ldr	r3, [pc, #228]	; (80014bc <MPU9250_getAllData+0x210>)
 80013d6:	edc3 7a00 	vstr	s15, [r3]
//	accelX=((((int16_t)((uint16_t)buffer[6] << 8) + buffer[7])))/4096.0f*9.8f;
//	accelY=((((int16_t)((uint16_t)buffer[8] << 8) + buffer[9])))/4096.0f*9.8f;
	accelX=((((int16_t)((uint16_t)buffer[6] << 8) + buffer[7])))/4096.0f*9.8f;
 80013da:	7cbb      	ldrb	r3, [r7, #18]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	b21b      	sxth	r3, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	7cfb      	ldrb	r3, [r7, #19]
 80013e4:	4413      	add	r3, r2
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ee:	eddf 6a34 	vldr	s13, [pc, #208]	; 80014c0 <MPU9250_getAllData+0x214>
 80013f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80014c4 <MPU9250_getAllData+0x218>
 80013fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013fe:	4b32      	ldr	r3, [pc, #200]	; (80014c8 <MPU9250_getAllData+0x21c>)
 8001400:	edc3 7a00 	vstr	s15, [r3]
	accelY=((((int16_t)((uint16_t)buffer[8] << 8) + buffer[9])))/4096.0f*9.8f;
 8001404:	7d3b      	ldrb	r3, [r7, #20]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21b      	sxth	r3, r3
 800140a:	461a      	mov	r2, r3
 800140c:	7d7b      	ldrb	r3, [r7, #21]
 800140e:	4413      	add	r3, r2
 8001410:	ee07 3a90 	vmov	s15, r3
 8001414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001418:	eddf 6a29 	vldr	s13, [pc, #164]	; 80014c0 <MPU9250_getAllData+0x214>
 800141c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001420:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80014c4 <MPU9250_getAllData+0x218>
 8001424:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001428:	4b28      	ldr	r3, [pc, #160]	; (80014cc <MPU9250_getAllData+0x220>)
 800142a:	edc3 7a00 	vstr	s15, [r3]
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 800142e:	7dbb      	ldrb	r3, [r7, #22]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b21b      	sxth	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	7dfb      	ldrb	r3, [r7, #23]
 8001438:	4413      	add	r3, r2
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001442:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80014c0 <MPU9250_getAllData+0x214>
 8001446:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800144a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80014c4 <MPU9250_getAllData+0x218>
 800144e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001452:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <MPU9250_getAllData+0x224>)
 8001454:	edc3 7a00 	vstr	s15, [r3]
	gyroX_filtered = filter(gyroX);
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MPU9250_getAllData+0x208>)
 800145a:	edd3 7a00 	vldr	s15, [r3]
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	f000 f83d 	bl	80014e0 <filter>
 8001466:	eef0 7a40 	vmov.f32	s15, s0
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MPU9250_getAllData+0x228>)
 800146c:	edc3 7a00 	vstr	s15, [r3]
	gyroY_filtered = filter(gyroY);
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MPU9250_getAllData+0x20c>)
 8001472:	edd3 7a00 	vldr	s15, [r3]
 8001476:	eeb0 0a67 	vmov.f32	s0, s15
 800147a:	f000 f831 	bl	80014e0 <filter>
 800147e:	eef0 7a40 	vmov.f32	s15, s0
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <MPU9250_getAllData+0x22c>)
 8001484:	edc3 7a00 	vstr	s15, [r3]
	gyroZ_filtered = filter(gyroZ);
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MPU9250_getAllData+0x210>)
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	eeb0 0a67 	vmov.f32	s0, s15
 8001492:	f000 f825 	bl	80014e0 <filter>
 8001496:	eef0 7a40 	vmov.f32	s15, s0
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <MPU9250_getAllData+0x230>)
 800149c:	edc3 7a00 	vstr	s15, [r3]
//	accelX=((((int16_t)((uint16_t)buffer[6] << 8) + buffer[7])));
//	accelY=((((int16_t)((uint16_t)buffer[8] << 8) + buffer[9])));
//	accelZ=((((int16_t)((uint16_t)buffer[10] << 8) + buffer[11])));
	//accelX_offset=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
}
 80014a0:	bf00      	nop
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	42830000 	.word	0x42830000
 80014ac:	4048f5c3 	.word	0x4048f5c3
 80014b0:	43340000 	.word	0x43340000
 80014b4:	20004a9c 	.word	0x20004a9c
 80014b8:	20004f44 	.word	0x20004f44
 80014bc:	20004ab8 	.word	0x20004ab8
 80014c0:	45800000 	.word	0x45800000
 80014c4:	411ccccd 	.word	0x411ccccd
 80014c8:	20004a18 	.word	0x20004a18
 80014cc:	20004a10 	.word	0x20004a10
 80014d0:	20004efc 	.word	0x20004efc
 80014d4:	20004f00 	.word	0x20004f00
 80014d8:	20004ed8 	.word	0x20004ed8
 80014dc:	20004f48 	.word	0x20004f48

080014e0 <filter>:

float filter(float val) { //функция фильтрации
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	ed87 0a01 	vstr	s0, [r7, #4]
	Pc = P + varProcess;
 80014ea:	4b28      	ldr	r3, [pc, #160]	; (800158c <filter+0xac>)
 80014ec:	ed93 7a00 	vldr	s14, [r3]
 80014f0:	4b27      	ldr	r3, [pc, #156]	; (8001590 <filter+0xb0>)
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <filter+0xb4>)
 80014fc:	edc3 7a00 	vstr	s15, [r3]
	G = Pc/(Pc + varVolt);
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <filter+0xb4>)
 8001502:	edd3 6a00 	vldr	s13, [r3]
 8001506:	4b23      	ldr	r3, [pc, #140]	; (8001594 <filter+0xb4>)
 8001508:	ed93 7a00 	vldr	s14, [r3]
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <filter+0xb8>)
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <filter+0xbc>)
 800151c:	edc3 7a00 	vstr	s15, [r3]
	P = (1-G)*Pc;
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <filter+0xbc>)
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800152a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <filter+0xb4>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <filter+0xac>)
 800153a:	edc3 7a00 	vstr	s15, [r3]
	Xp = Xe;
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <filter+0xc0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <filter+0xc4>)
 8001544:	6013      	str	r3, [r2, #0]
	Zp = Xp;
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <filter+0xc4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a17      	ldr	r2, [pc, #92]	; (80015a8 <filter+0xc8>)
 800154c:	6013      	str	r3, [r2, #0]
	Xe = G*(val-Zp)+Xp; // "фильтрованное" значение
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <filter+0xc8>)
 8001550:	edd3 7a00 	vldr	s15, [r3]
 8001554:	ed97 7a01 	vldr	s14, [r7, #4]
 8001558:	ee37 7a67 	vsub.f32	s14, s14, s15
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <filter+0xbc>)
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <filter+0xc4>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <filter+0xc0>)
 8001572:	edc3 7a00 	vstr	s15, [r3]
return(Xe);
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <filter+0xc0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	ee07 3a90 	vmov	s15, r3
}
 800157e:	eeb0 0a67 	vmov.f32	s0, s15
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	20000004 	.word	0x20000004
 8001590:	20000000 	.word	0x20000000
 8001594:	200004c0 	.word	0x200004c0
 8001598:	200004bc 	.word	0x200004bc
 800159c:	200004c4 	.word	0x200004c4
 80015a0:	200004d0 	.word	0x200004d0
 80015a4:	200004c8 	.word	0x200004c8
 80015a8:	200004cc 	.word	0x200004cc

080015ac <MPU9250_writeReg>:

void MPU9250_writeReg(uint16_t Addr, uint8_t reg, uint8_t value)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	4603      	mov	r3, r0
 80015b4:	80fb      	strh	r3, [r7, #6]
 80015b6:	460b      	mov	r3, r1
 80015b8:	717b      	strb	r3, [r7, #5]
 80015ba:	4613      	mov	r3, r2
 80015bc:	713b      	strb	r3, [r7, #4]
	uint8_t buf[2];
	buf[0] = reg;
 80015be:	797b      	ldrb	r3, [r7, #5]
 80015c0:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 80015c2:	793b      	ldrb	r3, [r7, #4]
 80015c4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	b299      	uxth	r1, r3
 80015cc:	f107 020c 	add.w	r2, r7, #12
 80015d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2302      	movs	r3, #2
 80015d8:	4803      	ldr	r0, [pc, #12]	; (80015e8 <MPU9250_writeReg+0x3c>)
 80015da:	f004 fd41 	bl	8006060 <HAL_I2C_Master_Transmit>
}
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20004a44 	.word	0x20004a44

080015ec <MPU9250_readReg>:
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 5, 1000);
}

// Read an 8-bit register
uint8_t MPU9250_readReg(uint16_t Addr, uint8_t reg)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af04      	add	r7, sp, #16
 80015f2:	4603      	mov	r3, r0
 80015f4:	460a      	mov	r2, r1
 80015f6:	80fb      	strh	r3, [r7, #6]
 80015f8:	4613      	mov	r3, r2
 80015fa:	717b      	strb	r3, [r7, #5]
  uint8_t value;
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	b299      	uxth	r1, r3
 8001602:	797b      	ldrb	r3, [r7, #5]
 8001604:	b29a      	uxth	r2, r3
 8001606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160a:	9302      	str	r3, [sp, #8]
 800160c:	2301      	movs	r3, #1
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	f107 030f 	add.w	r3, r7, #15
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2301      	movs	r3, #1
 8001618:	4803      	ldr	r0, [pc, #12]	; (8001628 <MPU9250_readReg+0x3c>)
 800161a:	f004 fe1f 	bl	800625c <HAL_I2C_Mem_Read>
  return value;
 800161e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20004a44 	.word	0x20004a44

0800162c <MPU9250_readReg16Bit>:

// Read a 16-bit register
uint16_t MPU9250_readReg16Bit(uint16_t Addr, uint8_t reg)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	460a      	mov	r2, r1
 8001636:	80fb      	strh	r3, [r7, #6]
 8001638:	4613      	mov	r3, r2
 800163a:	717b      	strb	r3, [r7, #5]
  uint16_t value;
  uint8_t buff[2];
  MPU9250_readMulti(Addr, reg, buff, 2);
 800163c:	f107 0208 	add.w	r2, r7, #8
 8001640:	7979      	ldrb	r1, [r7, #5]
 8001642:	88f8      	ldrh	r0, [r7, #6]
 8001644:	2302      	movs	r3, #2
 8001646:	f000 f811 	bl	800166c <MPU9250_readMulti>
  uint16_t tmp;
  tmp = buff[0];
 800164a:	7a3b      	ldrb	r3, [r7, #8]
 800164c:	81fb      	strh	r3, [r7, #14]
  tmp <<= 8;
 800164e:	89fb      	ldrh	r3, [r7, #14]
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	81fb      	strh	r3, [r7, #14]
  tmp |= buff[1];
 8001654:	7a7b      	ldrb	r3, [r7, #9]
 8001656:	b29a      	uxth	r2, r3
 8001658:	89fb      	ldrh	r3, [r7, #14]
 800165a:	4313      	orrs	r3, r2
 800165c:	81fb      	strh	r3, [r7, #14]
  value = tmp;
 800165e:	89fb      	ldrh	r3, [r7, #14]
 8001660:	81bb      	strh	r3, [r7, #12]
  return value;
 8001662:	89bb      	ldrh	r3, [r7, #12]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <MPU9250_readMulti>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void MPU9250_readMulti(uint16_t Addr, uint8_t reg, uint8_t * dst, uint8_t count)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af04      	add	r7, sp, #16
 8001672:	603a      	str	r2, [r7, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	4603      	mov	r3, r0
 8001678:	80fb      	strh	r3, [r7, #6]
 800167a:	460b      	mov	r3, r1
 800167c:	717b      	strb	r3, [r7, #5]
 800167e:	4613      	mov	r3, r2
 8001680:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, dst, count, 1000);
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	b299      	uxth	r1, r3
 8001688:	797b      	ldrb	r3, [r7, #5]
 800168a:	b298      	uxth	r0, r3
 800168c:	793b      	ldrb	r3, [r7, #4]
 800168e:	b29b      	uxth	r3, r3
 8001690:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001694:	9202      	str	r2, [sp, #8]
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2301      	movs	r3, #1
 800169e:	4602      	mov	r2, r0
 80016a0:	4803      	ldr	r0, [pc, #12]	; (80016b0 <MPU9250_readMulti+0x44>)
 80016a2:	f004 fddb 	bl	800625c <HAL_I2C_Mem_Read>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20004a44 	.word	0x20004a44

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <HAL_MspInit+0x58>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <HAL_MspInit+0x58>)
 80016c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <HAL_MspInit+0x58>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_MspInit+0x58>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	4a0b      	ldr	r2, [pc, #44]	; (800170c <HAL_MspInit+0x58>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_MspInit+0x58>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	2005      	movs	r0, #5
 80016f8:	f004 f96a 	bl	80059d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80016fc:	2005      	movs	r0, #5
 80016fe:	f004 f983 	bl	8005a08 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800

08001710 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a21      	ldr	r2, [pc, #132]	; (80017b4 <HAL_CAN_MspInit+0xa4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d13c      	bne.n	80017ac <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <HAL_CAN_MspInit+0xa8>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a1f      	ldr	r2, [pc, #124]	; (80017b8 <HAL_CAN_MspInit+0xa8>)
 800173c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <HAL_CAN_MspInit+0xa8>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <HAL_CAN_MspInit+0xa8>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a18      	ldr	r2, [pc, #96]	; (80017b8 <HAL_CAN_MspInit+0xa8>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <HAL_CAN_MspInit+0xa8>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800176a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800177c:	2309      	movs	r3, #9
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	480d      	ldr	r0, [pc, #52]	; (80017bc <HAL_CAN_MspInit+0xac>)
 8001788:	f004 f97c 	bl	8005a84 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	2100      	movs	r1, #0
 8001790:	2014      	movs	r0, #20
 8001792:	f004 f91d 	bl	80059d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001796:	2014      	movs	r0, #20
 8001798:	f004 f936 	bl	8005a08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800179c:	2200      	movs	r2, #0
 800179e:	2100      	movs	r1, #0
 80017a0:	2015      	movs	r0, #21
 80017a2:	f004 f915 	bl	80059d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80017a6:	2015      	movs	r0, #21
 80017a8:	f004 f92e 	bl	8005a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80017ac:	bf00      	nop
 80017ae:	3728      	adds	r7, #40	; 0x28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40006400 	.word	0x40006400
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020400 	.word	0x40020400

080017c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a1d      	ldr	r2, [pc, #116]	; (8001854 <HAL_I2C_MspInit+0x94>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d133      	bne.n	800184a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_I2C_MspInit+0x98>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a1b      	ldr	r2, [pc, #108]	; (8001858 <HAL_I2C_MspInit+0x98>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_I2C_MspInit+0x98>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017fe:	23c0      	movs	r3, #192	; 0xc0
 8001800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001802:	2312      	movs	r3, #18
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001806:	2301      	movs	r3, #1
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800180e:	2304      	movs	r3, #4
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	4810      	ldr	r0, [pc, #64]	; (800185c <HAL_I2C_MspInit+0x9c>)
 800181a:	f004 f933 	bl	8005a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HAL_I2C_MspInit+0x98>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a0c      	ldr	r2, [pc, #48]	; (8001858 <HAL_I2C_MspInit+0x98>)
 8001828:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_I2C_MspInit+0x98>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	201f      	movs	r0, #31
 8001840:	f004 f8c6 	bl	80059d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001844:	201f      	movs	r0, #31
 8001846:	f004 f8df 	bl	8005a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	; 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40005400 	.word	0x40005400
 8001858:	40023800 	.word	0x40023800
 800185c:	40020400 	.word	0x40020400

08001860 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	; 0x30
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	201d      	movs	r0, #29
 8001876:	f004 f8ab 	bl	80059d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800187a:	201d      	movs	r0, #29
 800187c:	f004 f8c4 	bl	8005a08 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <HAL_InitTick+0xa4>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	4a1e      	ldr	r2, [pc, #120]	; (8001904 <HAL_InitTick+0xa4>)
 800188a:	f043 0302 	orr.w	r3, r3, #2
 800188e:	6413      	str	r3, [r2, #64]	; 0x40
 8001890:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <HAL_InitTick+0xa4>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800189c:	f107 0210 	add.w	r2, r7, #16
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f008 fbb4 	bl	800a014 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80018ac:	f008 fb9e 	bl	8009fec <HAL_RCC_GetPCLK1Freq>
 80018b0:	4603      	mov	r3, r0
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80018b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b8:	4a13      	ldr	r2, [pc, #76]	; (8001908 <HAL_InitTick+0xa8>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	0c9b      	lsrs	r3, r3, #18
 80018c0:	3b01      	subs	r3, #1
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <HAL_InitTick+0xac>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <HAL_InitTick+0xb0>)
 80018c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_InitTick+0xac>)
 80018cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018d0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80018d2:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_InitTick+0xac>)
 80018d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d6:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_InitTick+0xac>)
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_InitTick+0xac>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80018e4:	4809      	ldr	r0, [pc, #36]	; (800190c <HAL_InitTick+0xac>)
 80018e6:	f008 fbc7 	bl	800a078 <HAL_TIM_Base_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d104      	bne.n	80018fa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80018f0:	4806      	ldr	r0, [pc, #24]	; (800190c <HAL_InitTick+0xac>)
 80018f2:	f008 fbf6 	bl	800a0e2 <HAL_TIM_Base_Start_IT>
 80018f6:	4603      	mov	r3, r0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3730      	adds	r7, #48	; 0x30
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	431bde83 	.word	0x431bde83
 800190c:	20004f90 	.word	0x20004f90
 8001910:	40000400 	.word	0x40000400

08001914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <HardFault_Handler+0x4>

08001928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <MemManage_Handler+0x4>

0800192e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <UsageFault_Handler+0x4>

0800193a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <CAN1_RX0_IRQHandler+0x10>)
 800195e:	f003 fd56 	bl	800540e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20004f1c 	.word	0x20004f1c

0800196c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <CAN1_RX1_IRQHandler+0x10>)
 8001972:	f003 fd4c 	bl	800540e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20004f1c 	.word	0x20004f1c

08001980 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <TIM3_IRQHandler+0x10>)
 8001986:	f008 fbd0 	bl	800a12a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20004f90 	.word	0x20004f90

08001994 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <I2C1_EV_IRQHandler+0x10>)
 800199a:	f004 fe85 	bl	80066a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20004a44 	.word	0x20004a44

080019a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <OTG_FS_IRQHandler+0x10>)
 80019ae:	f006 feaf 	bl	8008710 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200060a4 	.word	0x200060a4

080019bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
	return 1;
 80019c0:	2301      	movs	r3, #1
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_kill>:

int _kill(int pid, int sig)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019d6:	f00d fcbd 	bl	800f354 <__errno>
 80019da:	4602      	mov	r2, r0
 80019dc:	2316      	movs	r3, #22
 80019de:	6013      	str	r3, [r2, #0]
	return -1;
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_exit>:

void _exit (int status)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ffe7 	bl	80019cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80019fe:	e7fe      	b.n	80019fe <_exit+0x12>

08001a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a08:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <_sbrk+0x5c>)
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <_sbrk+0x60>)
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <_sbrk+0x64>)
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <_sbrk+0x68>)
 8001a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d207      	bcs.n	8001a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a30:	f00d fc90 	bl	800f354 <__errno>
 8001a34:	4602      	mov	r2, r0
 8001a36:	230c      	movs	r3, #12
 8001a38:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a3e:	e009      	b.n	8001a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <_sbrk+0x64>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <_sbrk+0x64>)
 8001a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20020000 	.word	0x20020000
 8001a60:	00000400 	.word	0x00000400
 8001a64:	200004d8 	.word	0x200004d8
 8001a68:	200064b0 	.word	0x200064b0

08001a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <SystemInit+0x28>)
 8001a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a76:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <SystemInit+0x28>)
 8001a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <SystemInit+0x28>)
 8001a82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a86:	609a      	str	r2, [r3, #8]
#endif
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a9e:	e003      	b.n	8001aa8 <LoopCopyDataInit>

08001aa0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001aa2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001aa4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001aa6:	3104      	adds	r1, #4

08001aa8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001aa8:	480b      	ldr	r0, [pc, #44]	; (8001ad8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001aac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001aae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ab0:	d3f6      	bcc.n	8001aa0 <CopyDataInit>
  ldr  r2, =_sbss
 8001ab2:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ab4:	e002      	b.n	8001abc <LoopFillZerobss>

08001ab6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ab6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ab8:	f842 3b04 	str.w	r3, [r2], #4

08001abc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001abe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ac0:	d3f9      	bcc.n	8001ab6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ac2:	f7ff ffd3 	bl	8001a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f00d fc4b 	bl	800f360 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aca:	f7fe fd23 	bl	8000514 <main>
  bx  lr    
 8001ace:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ad0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ad4:	0800fc58 	.word	0x0800fc58
  ldr  r0, =_sdata
 8001ad8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001adc:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8001ae0:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8001ae4:	200064b0 	.word	0x200064b0

08001ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <ADC_IRQHandler>
	...

08001aec <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	0a5a      	lsrs	r2, r3, #9
 8001afc:	490f      	ldr	r1, [pc, #60]	; (8001b3c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8001afe:	fba1 1202 	umull	r1, r2, r1, r2
 8001b02:	09d2      	lsrs	r2, r2, #7
 8001b04:	490e      	ldr	r1, [pc, #56]	; (8001b40 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8001b06:	fb01 f202 	mul.w	r2, r1, r2
 8001b0a:	1a9b      	subs	r3, r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	0a5b      	lsrs	r3, r3, #9
 8001b14:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8001b16:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1a:	09db      	lsrs	r3, r3, #7
 8001b1c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	441a      	add	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	601a      	str	r2, [r3, #0]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	00044b83 	.word	0x00044b83
 8001b40:	3b9aca00 	.word	0x3b9aca00

08001b44 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	ed87 0a00 	vstr	s0, [r7]
  {
    const int32_t* val = (int32_t*) &f;
 8001b50:	463b      	mov	r3, r7
 8001b52:	613b      	str	r3, [r7, #16]
    int32_t exp = ((*val >> 23) & 255);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	15db      	asrs	r3, r3, #23
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	617b      	str	r3, [r7, #20]
    if (exp != 0)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x28>
    {
      exp += 1023 - 127;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8001b6a:	617b      	str	r3, [r7, #20]
    }

    int32_t sig = *val;
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60fb      	str	r3, [r7, #12]
    *(outbuffer++) = 0;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig << 5) & 0xff;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	0159      	lsls	r1, r3, #5
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	b2ca      	uxtb	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	10d9      	asrs	r1, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	607a      	str	r2, [r7, #4]
 8001ba8:	b2ca      	uxtb	r2, r1
 8001baa:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 11) & 0xff;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	12d9      	asrs	r1, r3, #11
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	b2ca      	uxtb	r2, r1
 8001bb8:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	b25a      	sxtb	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	14db      	asrs	r3, r3, #19
 8001bc4:	b25b      	sxtb	r3, r3
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	b25b      	sxtb	r3, r3
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	b259      	sxtb	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	b2ca      	uxtb	r2, r1
 8001bd8:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	111b      	asrs	r3, r3, #4
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	1c59      	adds	r1, r3, #1
 8001be4:	6079      	str	r1, [r7, #4]
 8001be6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8001bee:	edd7 7a00 	vldr	s15, [r7]
 8001bf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfa:	d508      	bpl.n	8001c0e <_ZN3ros3Msg19serializeAvrFloat64EPhf+0xca>
    {
      *(outbuffer - 1) |= 0x80;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8001c0e:	2308      	movs	r3, #8
  }
 8001c10:	4618      	mov	r0, r3
 8001c12:	371c      	adds	r7, #28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  {
    uint32_t* val = (uint32_t*)f;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	60fb      	str	r3, [r7, #12]
    inbuffer += 3;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3303      	adds	r3, #3
 8001c2e:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	f003 0207 	and.w	r2, r3, #7
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	00da      	lsls	r2, r3, #3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	431a      	orrs	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	02da      	lsls	r2, r3, #11
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	431a      	orrs	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	04db      	lsls	r3, r3, #19
 8001c74:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	601a      	str	r2, [r3, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f003 030f 	and.w	r3, r3, #15
 8001c8c:	60bb      	str	r3, [r7, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	f403 62fe 	and.w	r2, r3, #2032	; 0x7f0
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60bb      	str	r3, [r7, #8]
    if (exp != 0)
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d008      	beq.n	8001cb6 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x9a>
    {
      *val |= ((exp) - 1023 + 127) << 23;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8001cae:	05db      	lsls	r3, r3, #23
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	601a      	str	r2, [r3, #0]
    }

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	061b      	lsls	r3, r3, #24
 8001cc0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	601a      	str	r2, [r3, #0]

    return 8;
 8001cce:	2308      	movs	r3, #8
  }
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <_ZN3ros3MsgC1Ev>:
class Msg
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <_ZN3ros3MsgC1Ev+0x1c>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	0800fc34 	.word	0x0800fc34

08001d20 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
      data()
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ffe8 	bl	8001d00 <_ZN3ros3MsgC1Ev>
 8001d30:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ffce 	bl	8001cdc <_ZN3ros4TimeC1Ev>
    {
    }
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	0800fc1c 	.word	0x0800fc1c

08001d50 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6859      	ldr	r1, [r3, #4]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	b2ca      	uxtb	r2, r1
 8001d6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	0a19      	lsrs	r1, r3, #8
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	3301      	adds	r3, #1
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	4413      	add	r3, r2
 8001d7a:	b2ca      	uxtb	r2, r1
 8001d7c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	0c19      	lsrs	r1, r3, #16
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3302      	adds	r3, #2
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	b2ca      	uxtb	r2, r1
 8001d8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	0e19      	lsrs	r1, r3, #24
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	3303      	adds	r3, #3
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	b2ca      	uxtb	r2, r1
 8001da0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3304      	adds	r3, #4
 8001da6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6899      	ldr	r1, [r3, #8]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	b2ca      	uxtb	r2, r1
 8001db4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	0a19      	lsrs	r1, r3, #8
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b2ca      	uxtb	r2, r1
 8001dc6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	0c19      	lsrs	r1, r3, #16
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	b2ca      	uxtb	r2, r1
 8001dd8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	0e19      	lsrs	r1, r3, #24
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3303      	adds	r3, #3
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	4413      	add	r3, r2
 8001de8:	b2ca      	uxtb	r2, r1
 8001dea:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3304      	adds	r3, #4
 8001df0:	60fb      	str	r3, [r7, #12]
      return offset;
 8001df2:	68fb      	ldr	r3, [r7, #12]
    }
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3301      	adds	r3, #1
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	440b      	add	r3, r1
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	3302      	adds	r3, #2
 8001e3a:	6839      	ldr	r1, [r7, #0]
 8001e3c:	440b      	add	r3, r1
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	041b      	lsls	r3, r3, #16
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3303      	adds	r3, #3
 8001e50:	6839      	ldr	r1, [r7, #0]
 8001e52:	440b      	add	r3, r1
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	061b      	lsls	r3, r3, #24
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3304      	adds	r3, #4
 8001e62:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	6839      	ldr	r1, [r7, #0]
 8001e7c:	440b      	add	r3, r1
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3302      	adds	r3, #2
 8001e90:	6839      	ldr	r1, [r7, #0]
 8001e92:	440b      	add	r3, r1
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	041b      	lsls	r3, r3, #16
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	3303      	adds	r3, #3
 8001ea6:	6839      	ldr	r1, [r7, #0]
 8001ea8:	440b      	add	r3, r1
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	061b      	lsls	r3, r3, #24
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	60fb      	str	r3, [r7, #12]
     return offset;
 8001eba:	68fb      	ldr	r3, [r7, #12]
    }
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	0800f74c 	.word	0x0800f74c

08001ee4 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	0800f75c 	.word	0x0800f75c

08001f00 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fef8 	bl	8001d00 <_ZN3ros3MsgC1Ev>
 8001f10:	4a0b      	ldr	r2, [pc, #44]	; (8001f40 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	809a      	strh	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a09      	ldr	r2, [pc, #36]	; (8001f44 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a07      	ldr	r2, [pc, #28]	; (8001f44 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a06      	ldr	r2, [pc, #24]	; (8001f44 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001f2c:	611a      	str	r2, [r3, #16]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	615a      	str	r2, [r3, #20]
    {
    }
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	0800fc04 	.word	0x0800fc04
 8001f44:	0800f780 	.word	0x0800f780

08001f48 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	8899      	ldrh	r1, [r3, #4]
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	b2ca      	uxtb	r2, r1
 8001f62:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	889b      	ldrh	r3, [r3, #4]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	b299      	uxth	r1, r3
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	b2ca      	uxtb	r2, r1
 8001f76:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe f924 	bl	80001d0 <strlen>
 8001f88:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	69b9      	ldr	r1, [r7, #24]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f001 fd52 	bl	8003a3c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	18d0      	adds	r0, r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4619      	mov	r1, r3
 8001fac:	f00d fa0c 	bl	800f3c8 <memcpy>
      offset += length_topic_name;
 8001fb0:	69fa      	ldr	r2, [r7, #28]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe f907 	bl	80001d0 <strlen>
 8001fc2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	4413      	add	r3, r2
 8001fca:	6979      	ldr	r1, [r7, #20]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f001 fd35 	bl	8003a3c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	18d0      	adds	r0, r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f00d f9ef 	bl	800f3c8 <memcpy>
      offset += length_message_type;
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	4413      	add	r3, r2
 8001ff0:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe f8ea 	bl	80001d0 <strlen>
 8001ffc:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	4413      	add	r3, r2
 8002004:	6939      	ldr	r1, [r7, #16]
 8002006:	4618      	mov	r0, r3
 8002008:	f001 fd18 	bl	8003a3c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	3304      	adds	r3, #4
 8002010:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	18d0      	adds	r0, r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4619      	mov	r1, r3
 8002020:	f00d f9d2 	bl	800f3c8 <memcpy>
      offset += length_md5sum;
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002032:	68f9      	ldr	r1, [r7, #12]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	4413      	add	r3, r2
 800203a:	b2ca      	uxtb	r2, r1
 800203c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	0a19      	lsrs	r1, r3, #8
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3301      	adds	r3, #1
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	4413      	add	r3, r2
 800204a:	b2ca      	uxtb	r2, r1
 800204c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	0c19      	lsrs	r1, r3, #16
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3302      	adds	r3, #2
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4413      	add	r3, r2
 800205a:	b2ca      	uxtb	r2, r1
 800205c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	0e19      	lsrs	r1, r3, #24
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3303      	adds	r3, #3
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	4413      	add	r3, r2
 800206a:	b2ca      	uxtb	r2, r1
 800206c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3304      	adds	r3, #4
 8002072:	61fb      	str	r3, [r7, #28]
      return offset;
 8002074:	69fb      	ldr	r3, [r7, #28]
    }
 8002076:	4618      	mov	r0, r3
 8002078:	3720      	adds	r7, #32
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800207e:	b580      	push	{r7, lr}
 8002080:	b08a      	sub	sp, #40	; 0x28
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	4413      	add	r3, r2
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b29a      	uxth	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	889b      	ldrh	r3, [r3, #4]
 800209e:	b21a      	sxth	r2, r3
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	3301      	adds	r3, #1
 80020a4:	6839      	ldr	r1, [r7, #0]
 80020a6:	440b      	add	r3, r1
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	4313      	orrs	r3, r2
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	3302      	adds	r3, #2
 80020bc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	441a      	add	r2, r3
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f001 fcd4 	bl	8003a78 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	3304      	adds	r3, #4
 80020d4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	4413      	add	r3, r2
 80020e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d20c      	bcs.n	8002100 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	441a      	add	r2, r3
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	3b01      	subs	r3, #1
 80020f0:	6839      	ldr	r1, [r7, #0]
 80020f2:	440b      	add	r3, r1
 80020f4:	7812      	ldrb	r2, [r2, #0]
 80020f6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	3301      	adds	r3, #1
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
 80020fe:	e7ec      	b.n	80020da <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	4413      	add	r3, r2
 8002106:	3b01      	subs	r3, #1
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	4413      	add	r3, r2
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	3b01      	subs	r3, #1
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	441a      	add	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	4413      	add	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	441a      	add	r2, r3
 800212a:	f107 0310 	add.w	r3, r7, #16
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f001 fca1 	bl	8003a78 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	3304      	adds	r3, #4
 800213a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	623b      	str	r3, [r7, #32]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	6a3a      	ldr	r2, [r7, #32]
 8002148:	429a      	cmp	r2, r3
 800214a:	d20c      	bcs.n	8002166 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	441a      	add	r2, r3
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	3b01      	subs	r3, #1
 8002156:	6839      	ldr	r1, [r7, #0]
 8002158:	440b      	add	r3, r1
 800215a:	7812      	ldrb	r2, [r2, #0]
 800215c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	3301      	adds	r3, #1
 8002162:	623b      	str	r3, [r7, #32]
 8002164:	e7ec      	b.n	8002140 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4413      	add	r3, r2
 800216c:	3b01      	subs	r3, #1
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	4413      	add	r3, r2
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	3b01      	subs	r3, #1
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	441a      	add	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4413      	add	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	441a      	add	r2, r3
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	4611      	mov	r1, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f001 fc6e 	bl	8003a78 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	3304      	adds	r3, #4
 80021a0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4413      	add	r3, r2
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d20c      	bcs.n	80021cc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	441a      	add	r2, r3
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	6839      	ldr	r1, [r7, #0]
 80021be:	440b      	add	r3, r1
 80021c0:	7812      	ldrb	r2, [r2, #0]
 80021c2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	3301      	adds	r3, #1
 80021c8:	61fb      	str	r3, [r7, #28]
 80021ca:	e7ec      	b.n	80021a6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4413      	add	r3, r2
 80021d2:	3b01      	subs	r3, #1
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	3b01      	subs	r3, #1
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	441a      	add	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4413      	add	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	6839      	ldr	r1, [r7, #0]
 80021fa:	440a      	add	r2, r1
 80021fc:	7812      	ldrb	r2, [r2, #0]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	3301      	adds	r3, #1
 8002208:	6839      	ldr	r1, [r7, #0]
 800220a:	440b      	add	r3, r1
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	4313      	orrs	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	3302      	adds	r3, #2
 800221a:	6839      	ldr	r1, [r7, #0]
 800221c:	440b      	add	r3, r1
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	041b      	lsls	r3, r3, #16
 8002222:	4313      	orrs	r3, r2
 8002224:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	3303      	adds	r3, #3
 800222c:	6839      	ldr	r1, [r7, #0]
 800222e:	440b      	add	r3, r1
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	061b      	lsls	r3, r3, #24
 8002234:	4313      	orrs	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	3304      	adds	r3, #4
 8002242:	61bb      	str	r3, [r7, #24]
     return offset;
 8002244:	69bb      	ldr	r3, [r7, #24]
    }
 8002246:	4618      	mov	r0, r3
 8002248:	3728      	adds	r7, #40	; 0x28
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	0800f784 	.word	0x0800f784

0800226c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	0800f7a0 	.word	0x0800f7a0

08002288 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fd34 	bl	8001d00 <_ZN3ros3MsgC1Ev>
 8002298:	4a06      	ldr	r2, [pc, #24]	; (80022b4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	711a      	strb	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80022a8:	609a      	str	r2, [r3, #8]
    {
    }
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	0800fbec 	.word	0x0800fbec
 80022b8:	0800f780 	.word	0x0800f780

080022bc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	7912      	ldrb	r2, [r2, #4]
 80022d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3301      	adds	r3, #1
 80022da:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fd ff75 	bl	80001d0 <strlen>
 80022e6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	4413      	add	r3, r2
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f001 fba3 	bl	8003a3c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	3304      	adds	r3, #4
 80022fa:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	18d0      	adds	r0, r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	4619      	mov	r1, r3
 800230a:	f00d f85d 	bl	800f3c8 <memcpy>
      offset += length_msg;
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4413      	add	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
      return offset;
 8002316:	68fb      	ldr	r3, [r7, #12]
    }
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	4413      	add	r3, r2
 8002334:	781a      	ldrb	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	3301      	adds	r3, #1
 800233e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	441a      	add	r2, r3
 8002346:	f107 030c 	add.w	r3, r7, #12
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f001 fb93 	bl	8003a78 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	3304      	adds	r3, #4
 8002356:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4413      	add	r3, r2
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	429a      	cmp	r2, r3
 8002366:	d20c      	bcs.n	8002382 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	441a      	add	r2, r3
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	3b01      	subs	r3, #1
 8002372:	6839      	ldr	r1, [r7, #0]
 8002374:	440b      	add	r3, r1
 8002376:	7812      	ldrb	r2, [r2, #0]
 8002378:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	3301      	adds	r3, #1
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	e7ec      	b.n	800235c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4413      	add	r3, r2
 8002388:	3b01      	subs	r3, #1
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	4413      	add	r3, r2
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	3b01      	subs	r3, #1
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	441a      	add	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
     return offset;
 80023a6:	693b      	ldr	r3, [r7, #16]
    }
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	0800f7c4 	.word	0x0800f7c4

080023cc <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	0800f7d8 	.word	0x0800f7d8

080023e8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fc84 	bl	8001d00 <_ZN3ros3MsgC1Ev>
 80023f8:	4a0c      	ldr	r2, [pc, #48]	; (800242c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	619a      	str	r2, [r3, #24]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	61da      	str	r2, [r3, #28]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4618      	mov	r0, r3
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	0800fbd4 	.word	0x0800fbd4

08002430 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	; 0x28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6859      	ldr	r1, [r3, #4]
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	4413      	add	r3, r2
 8002448:	b2ca      	uxtb	r2, r1
 800244a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	0a19      	lsrs	r1, r3, #8
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	3301      	adds	r3, #1
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	4413      	add	r3, r2
 800245a:	b2ca      	uxtb	r2, r1
 800245c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	0c19      	lsrs	r1, r3, #16
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	3302      	adds	r3, #2
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	4413      	add	r3, r2
 800246c:	b2ca      	uxtb	r2, r1
 800246e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	0e19      	lsrs	r1, r3, #24
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	3303      	adds	r3, #3
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	4413      	add	r3, r2
 800247e:	b2ca      	uxtb	r2, r1
 8002480:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	3304      	adds	r3, #4
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002488:	2300      	movs	r3, #0
 800248a:	623b      	str	r3, [r7, #32]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	6a3a      	ldr	r2, [r7, #32]
 8002492:	429a      	cmp	r2, r3
 8002494:	d22b      	bcs.n	80024ee <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80024a4:	6939      	ldr	r1, [r7, #16]
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	4413      	add	r3, r2
 80024ac:	b2ca      	uxtb	r2, r1
 80024ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	0a19      	lsrs	r1, r3, #8
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	3301      	adds	r3, #1
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	b2ca      	uxtb	r2, r1
 80024be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	0c19      	lsrs	r1, r3, #16
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	3302      	adds	r3, #2
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	b2ca      	uxtb	r2, r1
 80024ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	0e19      	lsrs	r1, r3, #24
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	3303      	adds	r3, #3
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	b2ca      	uxtb	r2, r1
 80024de:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	3304      	adds	r3, #4
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	3301      	adds	r3, #1
 80024ea:	623b      	str	r3, [r7, #32]
 80024ec:	e7ce      	b.n	800248c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6919      	ldr	r1, [r3, #16]
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	4413      	add	r3, r2
 80024f8:	b2ca      	uxtb	r2, r1
 80024fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	0a19      	lsrs	r1, r3, #8
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	3301      	adds	r3, #1
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	4413      	add	r3, r2
 800250a:	b2ca      	uxtb	r2, r1
 800250c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	0c19      	lsrs	r1, r3, #16
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	3302      	adds	r3, #2
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	4413      	add	r3, r2
 800251c:	b2ca      	uxtb	r2, r1
 800251e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	0e19      	lsrs	r1, r3, #24
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	3303      	adds	r3, #3
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	4413      	add	r3, r2
 800252e:	b2ca      	uxtb	r2, r1
 8002530:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	3304      	adds	r3, #4
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	429a      	cmp	r2, r3
 8002544:	d22b      	bcs.n	800259e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699a      	ldr	r2, [r3, #24]
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002554:	68f9      	ldr	r1, [r7, #12]
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	4413      	add	r3, r2
 800255c:	b2ca      	uxtb	r2, r1
 800255e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	0a19      	lsrs	r1, r3, #8
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	3301      	adds	r3, #1
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	4413      	add	r3, r2
 800256c:	b2ca      	uxtb	r2, r1
 800256e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	0c19      	lsrs	r1, r3, #16
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	3302      	adds	r3, #2
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	4413      	add	r3, r2
 800257c:	b2ca      	uxtb	r2, r1
 800257e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	0e19      	lsrs	r1, r3, #24
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	3303      	adds	r3, #3
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	4413      	add	r3, r2
 800258c:	b2ca      	uxtb	r2, r1
 800258e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	3304      	adds	r3, #4
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3301      	adds	r3, #1
 800259a:	61fb      	str	r3, [r7, #28]
 800259c:	e7ce      	b.n	800253c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69d9      	ldr	r1, [r3, #28]
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	b2ca      	uxtb	r2, r1
 80025aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	0a19      	lsrs	r1, r3, #8
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	3301      	adds	r3, #1
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	4413      	add	r3, r2
 80025ba:	b2ca      	uxtb	r2, r1
 80025bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	0c19      	lsrs	r1, r3, #16
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	3302      	adds	r3, #2
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	b2ca      	uxtb	r2, r1
 80025ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	0e19      	lsrs	r1, r3, #24
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	3303      	adds	r3, #3
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	4413      	add	r3, r2
 80025de:	b2ca      	uxtb	r2, r1
 80025e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	3304      	adds	r3, #4
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80025e8:	2300      	movs	r3, #0
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d228      	bcs.n	8002648 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd fde4 	bl	80001d0 <strlen>
 8002608:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	4413      	add	r3, r2
 8002610:	6979      	ldr	r1, [r7, #20]
 8002612:	4618      	mov	r0, r3
 8002614:	f001 fa12 	bl	8003a3c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	3304      	adds	r3, #4
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	18d0      	adds	r0, r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	4619      	mov	r1, r3
 8002634:	f00c fec8 	bl	800f3c8 <memcpy>
      offset += length_stringsi;
 8002638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	4413      	add	r3, r2
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	3301      	adds	r3, #1
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	e7d1      	b.n	80025ec <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800264a:	4618      	mov	r0, r3
 800264c:	3728      	adds	r7, #40	; 0x28
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002652:	b580      	push	{r7, lr}
 8002654:	b08e      	sub	sp, #56	; 0x38
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	4413      	add	r3, r2
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800266a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266c:	3301      	adds	r3, #1
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	4413      	add	r3, r2
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	6a3a      	ldr	r2, [r7, #32]
 8002678:	4313      	orrs	r3, r2
 800267a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800267c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267e:	3302      	adds	r3, #2
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	4413      	add	r3, r2
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	041b      	lsls	r3, r3, #16
 8002688:	6a3a      	ldr	r2, [r7, #32]
 800268a:	4313      	orrs	r3, r2
 800268c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800268e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002690:	3303      	adds	r3, #3
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	4413      	add	r3, r2
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	061b      	lsls	r3, r3, #24
 800269a:	6a3a      	ldr	r2, [r7, #32]
 800269c:	4313      	orrs	r3, r2
 800269e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80026a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a2:	3304      	adds	r3, #4
 80026a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	6a3a      	ldr	r2, [r7, #32]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d90a      	bls.n	80026c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4619      	mov	r1, r3
 80026ba:	4610      	mov	r0, r2
 80026bc:	f00c ff40 	bl	800f540 <realloc>
 80026c0:	4602      	mov	r2, r0
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a3a      	ldr	r2, [r7, #32]
 80026ca:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80026cc:	2300      	movs	r3, #0
 80026ce:	633b      	str	r3, [r7, #48]	; 0x30
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d236      	bcs.n	8002748 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026e2:	6839      	ldr	r1, [r7, #0]
 80026e4:	440a      	add	r2, r1
 80026e6:	7812      	ldrb	r2, [r2, #0]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f0:	3301      	adds	r3, #1
 80026f2:	6839      	ldr	r1, [r7, #0]
 80026f4:	440b      	add	r3, r1
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	021b      	lsls	r3, r3, #8
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002702:	3302      	adds	r3, #2
 8002704:	6839      	ldr	r1, [r7, #0]
 8002706:	440b      	add	r3, r1
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	041b      	lsls	r3, r3, #16
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002714:	3303      	adds	r3, #3
 8002716:	6839      	ldr	r1, [r7, #0]
 8002718:	440b      	add	r3, r1
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	061b      	lsls	r3, r3, #24
 800271e:	4313      	orrs	r3, r2
 8002720:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272a:	3304      	adds	r3, #4
 800272c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	3208      	adds	r2, #8
 800273c:	6812      	ldr	r2, [r2, #0]
 800273e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002742:	3301      	adds	r3, #1
 8002744:	633b      	str	r3, [r7, #48]	; 0x30
 8002746:	e7c3      	b.n	80026d0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	4413      	add	r3, r2
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002754:	3301      	adds	r3, #1
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	4413      	add	r3, r2
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	69fa      	ldr	r2, [r7, #28]
 8002760:	4313      	orrs	r3, r2
 8002762:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002766:	3302      	adds	r3, #2
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	4413      	add	r3, r2
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	041b      	lsls	r3, r3, #16
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	4313      	orrs	r3, r2
 8002774:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002778:	3303      	adds	r3, #3
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	4413      	add	r3, r2
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	061b      	lsls	r3, r3, #24
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	4313      	orrs	r3, r2
 8002786:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278a:	3304      	adds	r3, #4
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	429a      	cmp	r2, r3
 8002796:	d90a      	bls.n	80027ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	699a      	ldr	r2, [r3, #24]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4619      	mov	r1, r3
 80027a2:	4610      	mov	r0, r2
 80027a4:	f00c fecc 	bl	800f540 <realloc>
 80027a8:	4602      	mov	r2, r0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69fa      	ldr	r2, [r7, #28]
 80027b2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80027b4:	2300      	movs	r3, #0
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027be:	429a      	cmp	r2, r3
 80027c0:	d236      	bcs.n	8002830 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ca:	6839      	ldr	r1, [r7, #0]
 80027cc:	440a      	add	r2, r1
 80027ce:	7812      	ldrb	r2, [r2, #0]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d8:	3301      	adds	r3, #1
 80027da:	6839      	ldr	r1, [r7, #0]
 80027dc:	440b      	add	r3, r1
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	021b      	lsls	r3, r3, #8
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ea:	3302      	adds	r3, #2
 80027ec:	6839      	ldr	r1, [r7, #0]
 80027ee:	440b      	add	r3, r1
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	041b      	lsls	r3, r3, #16
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fc:	3303      	adds	r3, #3
 80027fe:	6839      	ldr	r1, [r7, #0]
 8002800:	440b      	add	r3, r1
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	061b      	lsls	r3, r3, #24
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002812:	3304      	adds	r3, #4
 8002814:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	3214      	adds	r2, #20
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282a:	3301      	adds	r3, #1
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800282e:	e7c3      	b.n	80027b8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	4413      	add	r3, r2
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800283a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800283c:	3301      	adds	r3, #1
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	4413      	add	r3, r2
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800284c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800284e:	3302      	adds	r3, #2
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	4413      	add	r3, r2
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	041b      	lsls	r3, r3, #16
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800285e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002860:	3303      	adds	r3, #3
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	4413      	add	r3, r2
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	061b      	lsls	r3, r3, #24
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002872:	3304      	adds	r3, #4
 8002874:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	429a      	cmp	r2, r3
 800287e:	d90a      	bls.n	8002896 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4619      	mov	r1, r3
 800288a:	4610      	mov	r0, r2
 800288c:	f00c fe58 	bl	800f540 <realloc>
 8002890:	4602      	mov	r2, r0
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800289c:	2300      	movs	r3, #0
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d23f      	bcs.n	800292a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80028aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	441a      	add	r2, r3
 80028b0:	f107 030c 	add.w	r3, r7, #12
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f001 f8de 	bl	8003a78 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80028bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028be:	3304      	adds	r3, #4
 80028c0:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80028c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
 80028c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4413      	add	r3, r2
 80028cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d20c      	bcs.n	80028ec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	441a      	add	r2, r3
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	3b01      	subs	r3, #1
 80028dc:	6839      	ldr	r1, [r7, #0]
 80028de:	440b      	add	r3, r1
 80028e0:	7812      	ldrb	r2, [r2, #0]
 80028e2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	3301      	adds	r3, #1
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ea:	e7ec      	b.n	80028c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80028ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4413      	add	r3, r2
 80028f2:	3b01      	subs	r3, #1
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	4413      	add	r3, r2
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80028fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fe:	3b01      	subs	r3, #1
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	441a      	add	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4413      	add	r3, r2
 800290e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	3220      	adds	r2, #32
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	3301      	adds	r3, #1
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
 8002928:	e7ba      	b.n	80028a0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800292a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800292c:	4618      	mov	r0, r3
 800292e:	3738      	adds	r7, #56	; 0x38
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	4b03      	ldr	r3, [pc, #12]	; (800294c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	0800fae0 	.word	0x0800fae0

08002950 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	4b03      	ldr	r3, [pc, #12]	; (8002968 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	0800f7fc 	.word	0x0800f7fc

0800296c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	611a      	str	r2, [r3, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68d8      	ldr	r0, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6891      	ldr	r1, [r2, #8]
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	4798      	blx	r3
 80029b8:	4603      	mov	r3, r0
  };
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
  }
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <_ZN13STM32HardwareC1Ev>:
extern struct ringbuffer rb;

class STM32Hardware
{
public:
	STM32Hardware() {
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
	}
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <_ZN13STM32Hardware4initEv>:

	void init() {
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
	}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <_ZN13STM32Hardware4readEv>:

	// Read a byte of data from ROS connection.
	// If no data , returns -1
	int read()
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	{
		uint32_t r;
		uint8_t ch = -1;
 8002a0c:	23ff      	movs	r3, #255	; 0xff
 8002a0e:	72fb      	strb	r3, [r7, #11]

		r = ringbuffer_getchar(&rb, &ch);
 8002a10:	f107 030b 	add.w	r3, r7, #11
 8002a14:	4619      	mov	r1, r3
 8002a16:	4807      	ldr	r0, [pc, #28]	; (8002a34 <_ZN13STM32Hardware4readEv+0x30>)
 8002a18:	f001 ffda 	bl	80049d0 <_Z18ringbuffer_getcharP10ringbufferPh>
 8002a1c:	60f8      	str	r0, [r7, #12]

		if (1 == r)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <_ZN13STM32Hardware4readEv+0x24>
			return ch;
 8002a24:	7afb      	ldrb	r3, [r7, #11]
 8002a26:	e001      	b.n	8002a2c <_ZN13STM32Hardware4readEv+0x28>
		else
			return -1;
 8002a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	200004dc 	.word	0x200004dc

08002a38 <_ZN13STM32Hardware5writeEPhi>:


	// Send a byte of data to ROS connection
	void write(uint8_t* data, int length)
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
	{
		CDC_Transmit_FS(data, length);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	4619      	mov	r1, r3
 8002a4a:	68b8      	ldr	r0, [r7, #8]
 8002a4c:	f00c f824 	bl	800ea98 <CDC_Transmit_FS>
	}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <_ZN13STM32Hardware4timeEv>:

	// Returns milliseconds since start of program
	unsigned long time(void)
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	{
		return HAL_GetTick();
 8002a60:	f002 f874 	bl	8004b4c <HAL_GetTick>
 8002a64:	4603      	mov	r3, r0
	}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <_ZN8std_msgs4Int8C1Ev>:
  {
    public:
      typedef int8_t _data_type;
      _data_type data;

    Int8():
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
      data(0)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff f940 	bl	8001d00 <_ZN3ros3MsgC1Ev>
 8002a80:	4a05      	ldr	r2, [pc, #20]	; (8002a98 <_ZN8std_msgs4Int8C1Ev+0x28>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	711a      	strb	r2, [r3, #4]
    {
    }
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	0800fb90 	.word	0x0800fb90

08002a9c <_ZNK8std_msgs4Int89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002ab0:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	7a3a      	ldrb	r2, [r7, #8]
 8002aba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	60fb      	str	r3, [r7, #12]
      return offset;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
    }
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <_ZN8std_msgs4Int811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ae2:	7a3a      	ldrb	r2, [r7, #8]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6839      	ldr	r1, [r7, #0]
 8002ae8:	440b      	add	r3, r1
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8002af2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	3301      	adds	r3, #1
 8002afe:	60fb      	str	r3, [r7, #12]
     return offset;
 8002b00:	68fb      	ldr	r3, [r7, #12]
    }
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <_ZN8std_msgs4Int87getTypeEv>:

    const char * getType(){ return "std_msgs/Int8"; };
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <_ZN8std_msgs4Int87getTypeEv+0x18>)
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	0800f820 	.word	0x0800f820

08002b2c <_ZN8std_msgs4Int86getMD5Ev>:
    const char * getMD5(){ return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <_ZN8std_msgs4Int86getMD5Ev+0x18>)
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	0800f830 	.word	0x0800f830

08002b48 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff f8d4 	bl	8001d00 <_ZN3ros3MsgC1Ev>
 8002b58:	4a08      	ldr	r2, [pc, #32]	; (8002b7c <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a07      	ldr	r2, [pc, #28]	; (8002b80 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	60da      	str	r2, [r3, #12]
    {
    }
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	0800fb78 	.word	0x0800fb78
 8002b80:	0800f780 	.word	0x0800f780

08002b84 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd fb1a 	bl	80001d0 <strlen>
 8002b9c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 ff48 	bl	8003a3c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	18d0      	adds	r0, r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f00c fc02 	bl	800f3c8 <memcpy>
      offset += length_label;
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	4413      	add	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6899      	ldr	r1, [r3, #8]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	b2ca      	uxtb	r2, r1
 8002bd8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	0a19      	lsrs	r1, r3, #8
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3301      	adds	r3, #1
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	b2ca      	uxtb	r2, r1
 8002bea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	0c19      	lsrs	r1, r3, #16
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	3302      	adds	r3, #2
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	b2ca      	uxtb	r2, r1
 8002bfc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	0e19      	lsrs	r1, r3, #24
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3303      	adds	r3, #3
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	b2ca      	uxtb	r2, r1
 8002c0e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	3304      	adds	r3, #4
 8002c14:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68d9      	ldr	r1, [r3, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	4413      	add	r3, r2
 8002c20:	b2ca      	uxtb	r2, r1
 8002c22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	0a19      	lsrs	r1, r3, #8
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	4413      	add	r3, r2
 8002c32:	b2ca      	uxtb	r2, r1
 8002c34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	0c19      	lsrs	r1, r3, #16
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	3302      	adds	r3, #2
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	b2ca      	uxtb	r2, r1
 8002c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	0e19      	lsrs	r1, r3, #24
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3303      	adds	r3, #3
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	4413      	add	r3, r2
 8002c56:	b2ca      	uxtb	r2, r1
 8002c58:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c60:	68fb      	ldr	r3, [r7, #12]
    }
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b086      	sub	sp, #24
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	441a      	add	r2, r3
 8002c7e:	f107 030c 	add.w	r3, r7, #12
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fef7 	bl	8003a78 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4413      	add	r3, r2
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d20c      	bcs.n	8002cba <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	441a      	add	r2, r3
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	6839      	ldr	r1, [r7, #0]
 8002cac:	440b      	add	r3, r1
 8002cae:	7812      	ldrb	r2, [r2, #0]
 8002cb0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	e7ec      	b.n	8002c94 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_label-1]=0;
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	441a      	add	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4413      	add	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	6839      	ldr	r1, [r7, #0]
 8002cf6:	440b      	add	r3, r1
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	3302      	adds	r3, #2
 8002d0a:	6839      	ldr	r1, [r7, #0]
 8002d0c:	440b      	add	r3, r1
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	041b      	lsls	r3, r3, #16
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	3303      	adds	r3, #3
 8002d20:	6839      	ldr	r1, [r7, #0]
 8002d22:	440b      	add	r3, r1
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	061b      	lsls	r3, r3, #24
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	3304      	adds	r3, #4
 8002d32:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	4413      	add	r3, r2
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	6839      	ldr	r1, [r7, #0]
 8002d4c:	440b      	add	r3, r1
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	3302      	adds	r3, #2
 8002d60:	6839      	ldr	r1, [r7, #0]
 8002d62:	440b      	add	r3, r1
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	041b      	lsls	r3, r3, #16
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	3303      	adds	r3, #3
 8002d76:	6839      	ldr	r1, [r7, #0]
 8002d78:	440b      	add	r3, r1
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	061b      	lsls	r3, r3, #24
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	3304      	adds	r3, #4
 8002d88:	613b      	str	r3, [r7, #16]
     return offset;
 8002d8a:	693b      	ldr	r3, [r7, #16]
    }
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	4b03      	ldr	r3, [pc, #12]	; (8002dac <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	0800f854 	.word	0x0800f854

08002db0 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	4b03      	ldr	r3, [pc, #12]	; (8002dc8 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	0800f874 	.word	0x0800f874

08002dcc <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe ff92 	bl	8001d00 <_ZN3ros3MsgC1Ev>
 8002ddc:	4a0a      	ldr	r2, [pc, #40]	; (8002e08 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	605a      	str	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3308      	adds	r3, #8
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff feab 	bl	8002b48 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	619a      	str	r2, [r3, #24]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	61da      	str	r2, [r3, #28]
    {
    }
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	0800fb60 	.word	0x0800fb60

08002e0c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6859      	ldr	r1, [r3, #4]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	4413      	add	r3, r2
 8002e24:	b2ca      	uxtb	r2, r1
 8002e26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	0a19      	lsrs	r1, r3, #8
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	3301      	adds	r3, #1
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	4413      	add	r3, r2
 8002e36:	b2ca      	uxtb	r2, r1
 8002e38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	0c19      	lsrs	r1, r3, #16
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3302      	adds	r3, #2
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	4413      	add	r3, r2
 8002e48:	b2ca      	uxtb	r2, r1
 8002e4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	0e19      	lsrs	r1, r3, #24
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	3303      	adds	r3, #3
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	4413      	add	r3, r2
 8002e5a:	b2ca      	uxtb	r2, r1
 8002e5c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	3304      	adds	r3, #4
 8002e62:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002e64:	2300      	movs	r3, #0
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d218      	bcs.n	8002ea4 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x98>
      offset += this->dim[i].serialize(outbuffer + offset);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	18d0      	adds	r0, r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699a      	ldr	r2, [r3, #24]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	4413      	add	r3, r2
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	6839      	ldr	r1, [r7, #0]
 8002e8e:	440a      	add	r2, r1
 8002e90:	4611      	mov	r1, r2
 8002e92:	4798      	blx	r3
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4413      	add	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	e7e1      	b.n	8002e68 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69d9      	ldr	r1, [r3, #28]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	4413      	add	r3, r2
 8002eae:	b2ca      	uxtb	r2, r1
 8002eb0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	0a19      	lsrs	r1, r3, #8
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	b2ca      	uxtb	r2, r1
 8002ec2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	0c19      	lsrs	r1, r3, #16
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3302      	adds	r3, #2
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	b2ca      	uxtb	r2, r1
 8002ed4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	0e19      	lsrs	r1, r3, #24
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	3303      	adds	r3, #3
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	b2ca      	uxtb	r2, r1
 8002ee6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	3304      	adds	r3, #4
 8002eec:	60fb      	str	r3, [r7, #12]
      return offset;
 8002eee:	68fb      	ldr	r3, [r7, #12]
    }
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	3301      	adds	r3, #1
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	4413      	add	r3, r2
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	3302      	adds	r3, #2
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	4413      	add	r3, r2
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	041b      	lsls	r3, r3, #16
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	3303      	adds	r3, #3
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	061b      	lsls	r3, r3, #24
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d90a      	bls.n	8002f6c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4610      	mov	r0, r2
 8002f62:	f00c faed 	bl	800f540 <realloc>
 8002f66:	4602      	mov	r2, r0
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8002f72:	2300      	movs	r3, #0
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d21b      	bcs.n	8002fb8 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xc0>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f103 0008 	add.w	r0, r3, #8
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f7ff fe6c 	bl	8002c6a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8002f92:	4602      	mov	r2, r0
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	4413      	add	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	18d0      	adds	r0, r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3308      	adds	r3, #8
 8002fa8:	2210      	movs	r2, #16
 8002faa:	4619      	mov	r1, r3
 8002fac:	f00c fa0c 	bl	800f3c8 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	e7de      	b.n	8002f76 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7e>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	6839      	ldr	r1, [r7, #0]
 8002fd0:	440b      	add	r3, r1
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69da      	ldr	r2, [r3, #28]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	6839      	ldr	r1, [r7, #0]
 8002fe6:	440b      	add	r3, r1
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	041b      	lsls	r3, r3, #16
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	3303      	adds	r3, #3
 8002ffa:	6839      	ldr	r1, [r7, #0]
 8002ffc:	440b      	add	r3, r1
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	061b      	lsls	r3, r3, #24
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	3304      	adds	r3, #4
 800300c:	617b      	str	r3, [r7, #20]
     return offset;
 800300e:	697b      	ldr	r3, [r7, #20]
    }
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	4b03      	ldr	r3, [pc, #12]	; (8003030 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8003022:	4618      	mov	r0, r3
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	0800f898 	.word	0x0800f898

08003034 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	4b03      	ldr	r3, [pc, #12]	; (800304c <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	0800f8b4 	.word	0x0800f8b4

08003050 <_ZN8std_msgs15UInt8MultiArrayC1Ev>:
      uint32_t data_length;
      typedef uint8_t _data_type;
      _data_type st_data;
      _data_type * data;

    UInt8MultiArray():
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), data(NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fe fe50 	bl	8001d00 <_ZN3ros3MsgC1Ev>
 8003060:	4a09      	ldr	r2, [pc, #36]	; (8003088 <_ZN8std_msgs15UInt8MultiArrayC1Ev+0x38>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3304      	adds	r3, #4
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff feae 	bl	8002dcc <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	625a      	str	r2, [r3, #36]	; 0x24
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	0800fb48 	.word	0x0800fb48

0800308c <_ZNK8std_msgs15UInt8MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
      offset += this->layout.serialize(outbuffer + offset);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	1d18      	adds	r0, r3, #4
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	4413      	add	r3, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	f7ff feb1 	bl	8002e0c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 80030aa:	4602      	mov	r2, r0
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4413      	add	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	4413      	add	r3, r2
 80030bc:	b2ca      	uxtb	r2, r1
 80030be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	0a19      	lsrs	r1, r3, #8
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3301      	adds	r3, #1
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	4413      	add	r3, r2
 80030ce:	b2ca      	uxtb	r2, r1
 80030d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	0c19      	lsrs	r1, r3, #16
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	3302      	adds	r3, #2
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	4413      	add	r3, r2
 80030e0:	b2ca      	uxtb	r2, r1
 80030e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	0e19      	lsrs	r1, r3, #24
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	3303      	adds	r3, #3
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	4413      	add	r3, r2
 80030f2:	b2ca      	uxtb	r2, r1
 80030f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	3304      	adds	r3, #4
 80030fa:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < data_length; i++){
 80030fc:	2300      	movs	r3, #0
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	429a      	cmp	r2, r3
 8003108:	d20f      	bcs.n	800312a <_ZNK8std_msgs15UInt8MultiArray9serializeEPh+0x9e>
      *(outbuffer + offset + 0) = (this->data[i] >> (8 * 0)) & 0xFF;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	441a      	add	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6839      	ldr	r1, [r7, #0]
 8003116:	440b      	add	r3, r1
 8003118:	7812      	ldrb	r2, [r2, #0]
 800311a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3301      	adds	r3, #1
 8003120:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < data_length; i++){
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	3301      	adds	r3, #1
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	e7ea      	b.n	8003100 <_ZNK8std_msgs15UInt8MultiArray9serializeEPh+0x74>
      }
      return offset;
 800312a:	68fb      	ldr	r3, [r7, #12]
    }
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	1d18      	adds	r0, r3, #4
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	4413      	add	r3, r2
 800314c:	4619      	mov	r1, r3
 800314e:	f7ff fed3 	bl	8002ef8 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8003152:	4602      	mov	r2, r0
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	4413      	add	r3, r2
 8003158:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	4413      	add	r3, r2
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	3301      	adds	r3, #1
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	4413      	add	r3, r2
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	3302      	adds	r3, #2
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	4413      	add	r3, r2
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	041b      	lsls	r3, r3, #16
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	3303      	adds	r3, #3
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	4413      	add	r3, r2
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	061b      	lsls	r3, r3, #24
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	3304      	adds	r3, #4
 800319e:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d908      	bls.n	80031bc <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0x88>
        this->data = (uint8_t*)realloc(this->data, data_lengthT * sizeof(uint8_t));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	68f9      	ldr	r1, [r7, #12]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f00c f9c5 	bl	800f540 <realloc>
 80031b6:	4602      	mov	r2, r0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d215      	bcs.n	80031fc <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0xc8>
      this->st_data =  ((uint8_t) (*(inbuffer + offset)));
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	4413      	add	r3, r2
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	3301      	adds	r3, #1
 80031e2:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(uint8_t));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4413      	add	r3, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	3228      	adds	r2, #40	; 0x28
 80031f0:	7812      	ldrb	r2, [r2, #0]
 80031f2:	701a      	strb	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	3301      	adds	r3, #1
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	e7e4      	b.n	80031c6 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0x92>
      }
     return offset;
 80031fc:	697b      	ldr	r3, [r7, #20]
    }
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <_ZN8std_msgs15UInt8MultiArray7getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8MultiArray"; };
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	4b03      	ldr	r3, [pc, #12]	; (8003220 <_ZN8std_msgs15UInt8MultiArray7getTypeEv+0x18>)
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	0800f8d8 	.word	0x0800f8d8

08003224 <_ZN8std_msgs15UInt8MultiArray6getMD5Ev>:
    const char * getMD5(){ return "82373f1612381bb6ee473b5cd6f5d89c"; };
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	4b03      	ldr	r3, [pc, #12]	; (800323c <_ZN8std_msgs15UInt8MultiArray6getMD5Ev+0x18>)
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	0800f8f4 	.word	0x0800f8f4

08003240 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe fd58 	bl	8001d00 <_ZN3ros3MsgC1Ev>
 8003250:	4a09      	ldr	r2, [pc, #36]	; (8003278 <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	609a      	str	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	60da      	str	r2, [r3, #12]
    {
    }
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	0800fb30 	.word	0x0800fb30

0800327c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	441a      	add	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	edd3 7a01 	vldr	s15, [r3, #4]
 8003296:	eeb0 0a67 	vmov.f32	s0, s15
 800329a:	4610      	mov	r0, r2
 800329c:	f7fe fc52 	bl	8001b44 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4413      	add	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	441a      	add	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80032b4:	eeb0 0a67 	vmov.f32	s0, s15
 80032b8:	4610      	mov	r0, r2
 80032ba:	f7fe fc43 	bl	8001b44 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80032be:	4602      	mov	r2, r0
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	441a      	add	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80032d2:	eeb0 0a67 	vmov.f32	s0, s15
 80032d6:	4610      	mov	r0, r2
 80032d8:	f7fe fc34 	bl	8001b44 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4413      	add	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
      return offset;
 80032e4:	68fb      	ldr	r3, [r7, #12]
    }
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	441a      	add	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3304      	adds	r3, #4
 8003306:	4619      	mov	r1, r3
 8003308:	4610      	mov	r0, r2
 800330a:	f7fe fc87 	bl	8001c1c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800330e:	4602      	mov	r2, r0
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4413      	add	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	441a      	add	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3308      	adds	r3, #8
 8003320:	4619      	mov	r1, r3
 8003322:	4610      	mov	r0, r2
 8003324:	f7fe fc7a 	bl	8001c1c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003328:	4602      	mov	r2, r0
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4413      	add	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	441a      	add	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	330c      	adds	r3, #12
 800333a:	4619      	mov	r1, r3
 800333c:	4610      	mov	r0, r2
 800333e:	f7fe fc6d 	bl	8001c1c <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003342:	4602      	mov	r2, r0
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4413      	add	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
     return offset;
 800334a:	68fb      	ldr	r3, [r7, #12]
    }
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	4b03      	ldr	r3, [pc, #12]	; (800336c <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	0800f918 	.word	0x0800f918

08003370 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	4b03      	ldr	r3, [pc, #12]	; (8003388 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	0800f930 	.word	0x0800f930

0800338c <rpm_rightFront_subCb>:
static nbt_t sensors1_3_data_nbt;
static nbt_t sensors4_6_data_nbt;
static nbt_t sensors7_8_data_nbt;

extern "C" void rpm_rightFront_subCb(const std_msgs::Int8& msg)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800339a:	2b05      	cmp	r3, #5
 800339c:	dd08      	ble.n	80033b0 <rpm_rightFront_subCb+0x24>
		speedDataRightFrontWheel = msg.data;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80033a4:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <rpm_rightFront_subCb+0x6c>)
 80033a6:	701a      	strb	r2, [r3, #0]
		sideDataRightFrontWheel = 0; //CW
 80033a8:	4b14      	ldr	r3, [pc, #80]	; (80033fc <rpm_rightFront_subCb+0x70>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	701a      	strb	r2, [r3, #0]
	}
	else if (msg.data == 0) {
		speedDataRightFrontWheel = 0;
		sideDataRightFrontWheel = 2;
	}
}
 80033ae:	e01d      	b.n	80033ec <rpm_rightFront_subCb+0x60>
	else if (msg.data <= -6) {
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80033b6:	f113 0f05 	cmn.w	r3, #5
 80033ba:	da0c      	bge.n	80033d6 <rpm_rightFront_subCb+0x4a>
		speedDataRightFrontWheel = -(msg.data);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	425b      	negs	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	b25a      	sxtb	r2, r3
 80033ca:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <rpm_rightFront_subCb+0x6c>)
 80033cc:	701a      	strb	r2, [r3, #0]
		sideDataRightFrontWheel = 1; //CCW
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <rpm_rightFront_subCb+0x70>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
}
 80033d4:	e00a      	b.n	80033ec <rpm_rightFront_subCb+0x60>
	else if (msg.data == 0) {
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d105      	bne.n	80033ec <rpm_rightFront_subCb+0x60>
		speedDataRightFrontWheel = 0;
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <rpm_rightFront_subCb+0x6c>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	701a      	strb	r2, [r3, #0]
		sideDataRightFrontWheel = 2;
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <rpm_rightFront_subCb+0x70>)
 80033e8:	2202      	movs	r2, #2
 80033ea:	701a      	strb	r2, [r3, #0]
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	2000046d 	.word	0x2000046d
 80033fc:	20000471 	.word	0x20000471

08003400 <rpm_leftFront_subCb>:

extern "C" void rpm_leftFront_subCb(const std_msgs::Int8& msg)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800340e:	2b05      	cmp	r3, #5
 8003410:	dd08      	ble.n	8003424 <rpm_leftFront_subCb+0x24>
		speedDataLeftFrontWheel = msg.data;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8003418:	4b12      	ldr	r3, [pc, #72]	; (8003464 <rpm_leftFront_subCb+0x64>)
 800341a:	701a      	strb	r2, [r3, #0]
		sideDataLeftFrontWheel = 1; //CCW
 800341c:	4b12      	ldr	r3, [pc, #72]	; (8003468 <rpm_leftFront_subCb+0x68>)
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]
	}
	else {
		speedDataLeftFrontWheel = 0;
		sideDataLeftFrontWheel = 2;
	}
}
 8003422:	e018      	b.n	8003456 <rpm_leftFront_subCb+0x56>
	else if (msg.data <= -6) {
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800342a:	f113 0f05 	cmn.w	r3, #5
 800342e:	da0c      	bge.n	800344a <rpm_leftFront_subCb+0x4a>
		speedDataLeftFrontWheel = -(msg.data);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	425b      	negs	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	b25a      	sxtb	r2, r3
 800343e:	4b09      	ldr	r3, [pc, #36]	; (8003464 <rpm_leftFront_subCb+0x64>)
 8003440:	701a      	strb	r2, [r3, #0]
		sideDataLeftFrontWheel = 0; //CW
 8003442:	4b09      	ldr	r3, [pc, #36]	; (8003468 <rpm_leftFront_subCb+0x68>)
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
}
 8003448:	e005      	b.n	8003456 <rpm_leftFront_subCb+0x56>
		speedDataLeftFrontWheel = 0;
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <rpm_leftFront_subCb+0x64>)
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
		sideDataLeftFrontWheel = 2;
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <rpm_leftFront_subCb+0x68>)
 8003452:	2202      	movs	r2, #2
 8003454:	701a      	strb	r2, [r3, #0]
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	2000046e 	.word	0x2000046e
 8003468:	20000472 	.word	0x20000472

0800346c <rpm_rightBack_subCb>:

extern "C" void rpm_rightBack_subCb(const std_msgs::Int8& msg)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800347a:	2b05      	cmp	r3, #5
 800347c:	dd08      	ble.n	8003490 <rpm_rightBack_subCb+0x24>
		speedDataRightBackWheel = msg.data;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8003484:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <rpm_rightBack_subCb+0x64>)
 8003486:	701a      	strb	r2, [r3, #0]
		sideDataRightBackWheel = 0; //CW
 8003488:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <rpm_rightBack_subCb+0x68>)
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
	}
	else {
		speedDataRightBackWheel = 0;
		sideDataRightBackWheel = 2;
	}
}
 800348e:	e018      	b.n	80034c2 <rpm_rightBack_subCb+0x56>
	else if (msg.data <= -6) {
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003496:	f113 0f05 	cmn.w	r3, #5
 800349a:	da0c      	bge.n	80034b6 <rpm_rightBack_subCb+0x4a>
		speedDataRightBackWheel = -(msg.data);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	425b      	negs	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	b25a      	sxtb	r2, r3
 80034aa:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <rpm_rightBack_subCb+0x64>)
 80034ac:	701a      	strb	r2, [r3, #0]
		sideDataRightBackWheel = 1; //CCW
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <rpm_rightBack_subCb+0x68>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	701a      	strb	r2, [r3, #0]
}
 80034b4:	e005      	b.n	80034c2 <rpm_rightBack_subCb+0x56>
		speedDataRightBackWheel = 0;
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <rpm_rightBack_subCb+0x64>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
		sideDataRightBackWheel = 2;
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <rpm_rightBack_subCb+0x68>)
 80034be:	2202      	movs	r2, #2
 80034c0:	701a      	strb	r2, [r3, #0]
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	2000046f 	.word	0x2000046f
 80034d4:	20000473 	.word	0x20000473

080034d8 <rpm_leftBack_subCb>:

extern "C" void rpm_leftBack_subCb(const std_msgs::Int8& msg)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80034e6:	2b05      	cmp	r3, #5
 80034e8:	dd08      	ble.n	80034fc <rpm_leftBack_subCb+0x24>
		speedDataLeftBackWheel = msg.data;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80034f0:	4b12      	ldr	r3, [pc, #72]	; (800353c <rpm_leftBack_subCb+0x64>)
 80034f2:	701a      	strb	r2, [r3, #0]
		sideDataLeftBackWheel = 1; //CCW
 80034f4:	4b12      	ldr	r3, [pc, #72]	; (8003540 <rpm_leftBack_subCb+0x68>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	701a      	strb	r2, [r3, #0]
	}
	else {
		speedDataLeftBackWheel = 0;
		sideDataLeftBackWheel = 2;
	}
}
 80034fa:	e018      	b.n	800352e <rpm_leftBack_subCb+0x56>
	else if (msg.data <= -6) {
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003502:	f113 0f05 	cmn.w	r3, #5
 8003506:	da0c      	bge.n	8003522 <rpm_leftBack_subCb+0x4a>
		speedDataLeftBackWheel = -(msg.data);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	425b      	negs	r3, r3
 8003512:	b2db      	uxtb	r3, r3
 8003514:	b25a      	sxtb	r2, r3
 8003516:	4b09      	ldr	r3, [pc, #36]	; (800353c <rpm_leftBack_subCb+0x64>)
 8003518:	701a      	strb	r2, [r3, #0]
		sideDataLeftBackWheel = 0; //CW
 800351a:	4b09      	ldr	r3, [pc, #36]	; (8003540 <rpm_leftBack_subCb+0x68>)
 800351c:	2200      	movs	r2, #0
 800351e:	701a      	strb	r2, [r3, #0]
}
 8003520:	e005      	b.n	800352e <rpm_leftBack_subCb+0x56>
		speedDataLeftBackWheel = 0;
 8003522:	4b06      	ldr	r3, [pc, #24]	; (800353c <rpm_leftBack_subCb+0x64>)
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
		sideDataLeftBackWheel = 2;
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <rpm_leftBack_subCb+0x68>)
 800352a:	2202      	movs	r2, #2
 800352c:	701a      	strb	r2, [r3, #0]
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20000470 	.word	0x20000470
 8003540:	20000474 	.word	0x20000474

08003544 <cdc_receive_put>:

extern "C" void cdc_receive_put(uint8_t value)
	{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	71fb      	strb	r3, [r7, #7]
		ringbuffer_putchar(&rb, value);
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	4619      	mov	r1, r3
 8003552:	4803      	ldr	r0, [pc, #12]	; (8003560 <cdc_receive_put+0x1c>)
 8003554:	f001 f9e7 	bl	8004926 <_Z18ringbuffer_putcharP10ringbufferh>
	}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	200004dc 	.word	0x200004dc

08003564 <init_ROS>:
extern "C" void init_ROS(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
	ringbuffer_init(&rb, RxBuffer, RxBufferSize);
 8003568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800356c:	4936      	ldr	r1, [pc, #216]	; (8003648 <init_ROS+0xe4>)
 800356e:	4837      	ldr	r0, [pc, #220]	; (800364c <init_ROS+0xe8>)
 8003570:	f001 fa7f 	bl	8004a72 <_Z15ringbuffer_initP10ringbufferPhs>
	// Initialize ROS
	nh.initNode();
 8003574:	4836      	ldr	r0, [pc, #216]	; (8003650 <init_ROS+0xec>)
 8003576:	f000 fb67 	bl	8003c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

	nh.subscribe(rpm_rightFront_sub);
 800357a:	4936      	ldr	r1, [pc, #216]	; (8003654 <init_ROS+0xf0>)
 800357c:	4834      	ldr	r0, [pc, #208]	; (8003650 <init_ROS+0xec>)
 800357e:	f000 fb80 	bl	8003c82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.subscribe(rpm_leftFront_sub);
 8003582:	4935      	ldr	r1, [pc, #212]	; (8003658 <init_ROS+0xf4>)
 8003584:	4832      	ldr	r0, [pc, #200]	; (8003650 <init_ROS+0xec>)
 8003586:	f000 fb7c 	bl	8003c82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.subscribe(rpm_rightBack_sub);
 800358a:	4934      	ldr	r1, [pc, #208]	; (800365c <init_ROS+0xf8>)
 800358c:	4830      	ldr	r0, [pc, #192]	; (8003650 <init_ROS+0xec>)
 800358e:	f000 fb78 	bl	8003c82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.subscribe(rpm_leftBack_sub);
 8003592:	4933      	ldr	r1, [pc, #204]	; (8003660 <init_ROS+0xfc>)
 8003594:	482e      	ldr	r0, [pc, #184]	; (8003650 <init_ROS+0xec>)
 8003596:	f000 fb74 	bl	8003c82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>

	nh.advertise(stm);
 800359a:	4932      	ldr	r1, [pc, #200]	; (8003664 <init_ROS+0x100>)
 800359c:	482c      	ldr	r0, [pc, #176]	; (8003650 <init_ROS+0xec>)
 800359e:	f000 fb9d 	bl	8003cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(gyro);
 80035a2:	4931      	ldr	r1, [pc, #196]	; (8003668 <init_ROS+0x104>)
 80035a4:	482a      	ldr	r0, [pc, #168]	; (8003650 <init_ROS+0xec>)
 80035a6:	f000 fb99 	bl	8003cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(accel);
 80035aa:	4930      	ldr	r1, [pc, #192]	; (800366c <init_ROS+0x108>)
 80035ac:	4828      	ldr	r0, [pc, #160]	; (8003650 <init_ROS+0xec>)
 80035ae:	f000 fb95 	bl	8003cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_left_front);
 80035b2:	492f      	ldr	r1, [pc, #188]	; (8003670 <init_ROS+0x10c>)
 80035b4:	4826      	ldr	r0, [pc, #152]	; (8003650 <init_ROS+0xec>)
 80035b6:	f000 fb91 	bl	8003cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_right_front);
 80035ba:	492e      	ldr	r1, [pc, #184]	; (8003674 <init_ROS+0x110>)
 80035bc:	4824      	ldr	r0, [pc, #144]	; (8003650 <init_ROS+0xec>)
 80035be:	f000 fb8d 	bl	8003cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_left_back);
 80035c2:	492d      	ldr	r1, [pc, #180]	; (8003678 <init_ROS+0x114>)
 80035c4:	4822      	ldr	r0, [pc, #136]	; (8003650 <init_ROS+0xec>)
 80035c6:	f000 fb89 	bl	8003cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_right_back);
 80035ca:	492c      	ldr	r1, [pc, #176]	; (800367c <init_ROS+0x118>)
 80035cc:	4820      	ldr	r0, [pc, #128]	; (8003650 <init_ROS+0xec>)
 80035ce:	f000 fb85 	bl	8003cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	//nh.advertise(diagnostic_data);
	nh.advertise(sensa_data);
 80035d2:	492b      	ldr	r1, [pc, #172]	; (8003680 <init_ROS+0x11c>)
 80035d4:	481e      	ldr	r0, [pc, #120]	; (8003650 <init_ROS+0xec>)
 80035d6:	f000 fb81 	bl	8003cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(sensb_data);
 80035da:	492a      	ldr	r1, [pc, #168]	; (8003684 <init_ROS+0x120>)
 80035dc:	481c      	ldr	r0, [pc, #112]	; (8003650 <init_ROS+0xec>)
 80035de:	f000 fb7d 	bl	8003cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(sensc_data);
 80035e2:	4929      	ldr	r1, [pc, #164]	; (8003688 <init_ROS+0x124>)
 80035e4:	481a      	ldr	r0, [pc, #104]	; (8003650 <init_ROS+0xec>)
 80035e6:	f000 fb79 	bl	8003cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	NBT_init(&rpm_left_front_nbt, 9);
 80035ea:	2109      	movs	r1, #9
 80035ec:	4827      	ldr	r0, [pc, #156]	; (800368c <init_ROS+0x128>)
 80035ee:	f001 f8fe 	bl	80047ee <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_right_front_nbt, 9);
 80035f2:	2109      	movs	r1, #9
 80035f4:	4826      	ldr	r0, [pc, #152]	; (8003690 <init_ROS+0x12c>)
 80035f6:	f001 f8fa 	bl	80047ee <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_left_back_nbt, 9);
 80035fa:	2109      	movs	r1, #9
 80035fc:	4825      	ldr	r0, [pc, #148]	; (8003694 <init_ROS+0x130>)
 80035fe:	f001 f8f6 	bl	80047ee <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_right_back_nbt, 9);
 8003602:	2109      	movs	r1, #9
 8003604:	4824      	ldr	r0, [pc, #144]	; (8003698 <init_ROS+0x134>)
 8003606:	f001 f8f2 	bl	80047ee <_Z8NBT_initP5nbt_tm>

	NBT_init(&diagnostics_data_nbt, 9);
 800360a:	2109      	movs	r1, #9
 800360c:	4823      	ldr	r0, [pc, #140]	; (800369c <init_ROS+0x138>)
 800360e:	f001 f8ee 	bl	80047ee <_Z8NBT_initP5nbt_tm>
	NBT_init(&sensors1_3_data_nbt, 9);
 8003612:	2109      	movs	r1, #9
 8003614:	4822      	ldr	r0, [pc, #136]	; (80036a0 <init_ROS+0x13c>)
 8003616:	f001 f8ea 	bl	80047ee <_Z8NBT_initP5nbt_tm>
	NBT_init(&sensors4_6_data_nbt, 9);
 800361a:	2109      	movs	r1, #9
 800361c:	4821      	ldr	r0, [pc, #132]	; (80036a4 <init_ROS+0x140>)
 800361e:	f001 f8e6 	bl	80047ee <_Z8NBT_initP5nbt_tm>
	NBT_init(&sensors7_8_data_nbt, 9);
 8003622:	2109      	movs	r1, #9
 8003624:	4820      	ldr	r0, [pc, #128]	; (80036a8 <init_ROS+0x144>)
 8003626:	f001 f8e2 	bl	80047ee <_Z8NBT_initP5nbt_tm>

	NBT_init(&gyro_nbt, 5);
 800362a:	2105      	movs	r1, #5
 800362c:	481f      	ldr	r0, [pc, #124]	; (80036ac <init_ROS+0x148>)
 800362e:	f001 f8de 	bl	80047ee <_Z8NBT_initP5nbt_tm>
	NBT_init(&accel_nbt, 5);
 8003632:	2105      	movs	r1, #5
 8003634:	481e      	ldr	r0, [pc, #120]	; (80036b0 <init_ROS+0x14c>)
 8003636:	f001 f8da 	bl	80047ee <_Z8NBT_initP5nbt_tm>

	NBT_init(&ros_nbt, 1);
 800363a:	2101      	movs	r1, #1
 800363c:	481d      	ldr	r0, [pc, #116]	; (80036b4 <init_ROS+0x150>)
 800363e:	f001 f8d6 	bl	80047ee <_Z8NBT_initP5nbt_tm>
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20005aa4 	.word	0x20005aa4
 800364c:	200004dc 	.word	0x200004dc
 8003650:	200004e8 	.word	0x200004e8
 8003654:	20000b74 	.word	0x20000b74
 8003658:	20000b90 	.word	0x20000b90
 800365c:	20000bac 	.word	0x20000bac
 8003660:	20000bc8 	.word	0x20000bc8
 8003664:	20000ae8 	.word	0x20000ae8
 8003668:	20000afc 	.word	0x20000afc
 800366c:	20000b10 	.word	0x20000b10
 8003670:	20000b38 	.word	0x20000b38
 8003674:	20000b24 	.word	0x20000b24
 8003678:	20000b60 	.word	0x20000b60
 800367c:	20000b4c 	.word	0x20000b4c
 8003680:	20000bf8 	.word	0x20000bf8
 8003684:	20000c0c 	.word	0x20000c0c
 8003688:	20000c20 	.word	0x20000c20
 800368c:	20000c4c 	.word	0x20000c4c
 8003690:	20000c44 	.word	0x20000c44
 8003694:	20000c5c 	.word	0x20000c5c
 8003698:	20000c54 	.word	0x20000c54
 800369c:	20000c6c 	.word	0x20000c6c
 80036a0:	20000c74 	.word	0x20000c74
 80036a4:	20000c7c 	.word	0x20000c7c
 80036a8:	20000c84 	.word	0x20000c84
 80036ac:	20000c34 	.word	0x20000c34
 80036b0:	20000c3c 	.word	0x20000c3c
 80036b4:	20000c64 	.word	0x20000c64

080036b8 <sensors1_3_data_handler>:

extern "C" void sensors1_3_data_handler(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
	if (NBT_handler(&sensors1_3_data_nbt)) {
 80036bc:	4813      	ldr	r0, [pc, #76]	; (800370c <sensors1_3_data_handler+0x54>)
 80036be:	f001 f8a7 	bl	8004810 <_Z11NBT_handlerP5nbt_t>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01e      	beq.n	8003706 <sensors1_3_data_handler+0x4e>
		sen1_3_msg.x = static_cast<float>(sensorData1);
 80036c8:	4b11      	ldr	r3, [pc, #68]	; (8003710 <sensors1_3_data_handler+0x58>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	ee07 3a90 	vmov	s15, r3
 80036d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d4:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <sensors1_3_data_handler+0x5c>)
 80036d6:	edc3 7a01 	vstr	s15, [r3, #4]
		sen1_3_msg.y = static_cast<float>(sensorData2);
 80036da:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <sensors1_3_data_handler+0x60>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	ee07 3a90 	vmov	s15, r3
 80036e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e6:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <sensors1_3_data_handler+0x5c>)
 80036e8:	edc3 7a02 	vstr	s15, [r3, #8]
		sen1_3_msg.z = static_cast<float>(sensorData3);
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <sensors1_3_data_handler+0x64>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	ee07 3a90 	vmov	s15, r3
 80036f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <sensors1_3_data_handler+0x5c>)
 80036fa:	edc3 7a03 	vstr	s15, [r3, #12]
    	sensa_data.publish(&sen1_3_msg);
 80036fe:	4905      	ldr	r1, [pc, #20]	; (8003714 <sensors1_3_data_handler+0x5c>)
 8003700:	4807      	ldr	r0, [pc, #28]	; (8003720 <sensors1_3_data_handler+0x68>)
 8003702:	f7ff f94a 	bl	800299a <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	}
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000c74 	.word	0x20000c74
 8003710:	20000475 	.word	0x20000475
 8003714:	20000ab8 	.word	0x20000ab8
 8003718:	20000476 	.word	0x20000476
 800371c:	20000477 	.word	0x20000477
 8003720:	20000bf8 	.word	0x20000bf8

08003724 <sensors4_6_data_handler>:

extern "C" void sensors4_6_data_handler(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
	if (NBT_handler(&sensors4_6_data_nbt)) {
 8003728:	4813      	ldr	r0, [pc, #76]	; (8003778 <sensors4_6_data_handler+0x54>)
 800372a:	f001 f871 	bl	8004810 <_Z11NBT_handlerP5nbt_t>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d01e      	beq.n	8003772 <sensors4_6_data_handler+0x4e>
		sen4_6_msg.x = static_cast<float>(sensorData4);
 8003734:	4b11      	ldr	r3, [pc, #68]	; (800377c <sensors4_6_data_handler+0x58>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	ee07 3a90 	vmov	s15, r3
 800373c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003740:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <sensors4_6_data_handler+0x5c>)
 8003742:	edc3 7a01 	vstr	s15, [r3, #4]
		sen4_6_msg.y = static_cast<float>(sensorData5);
 8003746:	4b0f      	ldr	r3, [pc, #60]	; (8003784 <sensors4_6_data_handler+0x60>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	ee07 3a90 	vmov	s15, r3
 800374e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <sensors4_6_data_handler+0x5c>)
 8003754:	edc3 7a02 	vstr	s15, [r3, #8]
		sen4_6_msg.z = static_cast<float>(sensorData6);
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <sensors4_6_data_handler+0x64>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	ee07 3a90 	vmov	s15, r3
 8003760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003764:	4b06      	ldr	r3, [pc, #24]	; (8003780 <sensors4_6_data_handler+0x5c>)
 8003766:	edc3 7a03 	vstr	s15, [r3, #12]
    	sensb_data.publish(&sen4_6_msg);
 800376a:	4905      	ldr	r1, [pc, #20]	; (8003780 <sensors4_6_data_handler+0x5c>)
 800376c:	4807      	ldr	r0, [pc, #28]	; (800378c <sensors4_6_data_handler+0x68>)
 800376e:	f7ff f914 	bl	800299a <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	}
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000c7c 	.word	0x20000c7c
 800377c:	20000478 	.word	0x20000478
 8003780:	20000ac8 	.word	0x20000ac8
 8003784:	20000479 	.word	0x20000479
 8003788:	2000047a 	.word	0x2000047a
 800378c:	20000c0c 	.word	0x20000c0c

08003790 <rpm_right_front_handler>:
    	}
	}
}

extern "C" void rpm_right_front_handler(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
	if (NBT_handler(&rpm_right_front_nbt))
 8003794:	4815      	ldr	r0, [pc, #84]	; (80037ec <rpm_right_front_handler+0x5c>)
 8003796:	f001 f83b 	bl	8004810 <_Z11NBT_handlerP5nbt_t>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d022      	beq.n	80037e6 <rpm_right_front_handler+0x56>
	{
		if (sideRXDataRightFrontWheel == 2) {
 80037a0:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <rpm_right_front_handler+0x60>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d105      	bne.n	80037b4 <rpm_right_front_handler+0x24>
		    uint_msg_right_front.data = speedRXDataRightFrontWheel;
 80037a8:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <rpm_right_front_handler+0x64>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	b25a      	sxtb	r2, r3
 80037ae:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <rpm_right_front_handler+0x68>)
 80037b0:	711a      	strb	r2, [r3, #4]
 80037b2:	e00e      	b.n	80037d2 <rpm_right_front_handler+0x42>
		}
		else if (sideRXDataRightFrontWheel == 1) {
 80037b4:	4b0e      	ldr	r3, [pc, #56]	; (80037f0 <rpm_right_front_handler+0x60>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d107      	bne.n	80037cc <rpm_right_front_handler+0x3c>
			uint_msg_right_front.data = -speedRXDataRightFrontWheel;
 80037bc:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <rpm_right_front_handler+0x64>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	425b      	negs	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	b25a      	sxtb	r2, r3
 80037c6:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <rpm_right_front_handler+0x68>)
 80037c8:	711a      	strb	r2, [r3, #4]
 80037ca:	e002      	b.n	80037d2 <rpm_right_front_handler+0x42>
		}
		else {
			uint_msg_right_front.data = 0;
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <rpm_right_front_handler+0x68>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	711a      	strb	r2, [r3, #4]
		}
    	if (nh.connected()) {
 80037d2:	480a      	ldr	r0, [pc, #40]	; (80037fc <rpm_right_front_handler+0x6c>)
 80037d4:	f000 fab0 	bl	8003d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <rpm_right_front_handler+0x56>
    		rpm_right_front.publish(&uint_msg_right_front);
 80037de:	4906      	ldr	r1, [pc, #24]	; (80037f8 <rpm_right_front_handler+0x68>)
 80037e0:	4807      	ldr	r0, [pc, #28]	; (8003800 <rpm_right_front_handler+0x70>)
 80037e2:	f7ff f8da 	bl	800299a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
	}
}
 80037e6:	bf00      	nop
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000c44 	.word	0x20000c44
 80037f0:	20004ef4 	.word	0x20004ef4
 80037f4:	20004f18 	.word	0x20004f18
 80037f8:	20000a18 	.word	0x20000a18
 80037fc:	200004e8 	.word	0x200004e8
 8003800:	20000b24 	.word	0x20000b24

08003804 <rpm_left_front_handler>:

extern "C" void rpm_left_front_handler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
	if (NBT_handler(&rpm_left_front_nbt))
 8003808:	4815      	ldr	r0, [pc, #84]	; (8003860 <rpm_left_front_handler+0x5c>)
 800380a:	f001 f801 	bl	8004810 <_Z11NBT_handlerP5nbt_t>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d022      	beq.n	800385a <rpm_left_front_handler+0x56>
	{
		if (sideRXDataLeftFrontWheel == 1) {
 8003814:	4b13      	ldr	r3, [pc, #76]	; (8003864 <rpm_left_front_handler+0x60>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d105      	bne.n	8003828 <rpm_left_front_handler+0x24>
		    uint_msg_left_front.data = speedRXDataLeftFrontWheel;
 800381c:	4b12      	ldr	r3, [pc, #72]	; (8003868 <rpm_left_front_handler+0x64>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	b25a      	sxtb	r2, r3
 8003822:	4b12      	ldr	r3, [pc, #72]	; (800386c <rpm_left_front_handler+0x68>)
 8003824:	711a      	strb	r2, [r3, #4]
 8003826:	e00e      	b.n	8003846 <rpm_left_front_handler+0x42>
		}
		else if (sideRXDataLeftFrontWheel == 2) {
 8003828:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <rpm_left_front_handler+0x60>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d107      	bne.n	8003840 <rpm_left_front_handler+0x3c>
		  	uint_msg_left_front.data = -speedRXDataLeftFrontWheel;
 8003830:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <rpm_left_front_handler+0x64>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	425b      	negs	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	b25a      	sxtb	r2, r3
 800383a:	4b0c      	ldr	r3, [pc, #48]	; (800386c <rpm_left_front_handler+0x68>)
 800383c:	711a      	strb	r2, [r3, #4]
 800383e:	e002      	b.n	8003846 <rpm_left_front_handler+0x42>
		}
		else {
		  	uint_msg_left_front.data = 0;
 8003840:	4b0a      	ldr	r3, [pc, #40]	; (800386c <rpm_left_front_handler+0x68>)
 8003842:	2200      	movs	r2, #0
 8003844:	711a      	strb	r2, [r3, #4]
		}
    	if (nh.connected()) {
 8003846:	480a      	ldr	r0, [pc, #40]	; (8003870 <rpm_left_front_handler+0x6c>)
 8003848:	f000 fa76 	bl	8003d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <rpm_left_front_handler+0x56>
    		rpm_left_front.publish(&uint_msg_left_front);
 8003852:	4906      	ldr	r1, [pc, #24]	; (800386c <rpm_left_front_handler+0x68>)
 8003854:	4807      	ldr	r0, [pc, #28]	; (8003874 <rpm_left_front_handler+0x70>)
 8003856:	f7ff f8a0 	bl	800299a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
	}
}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000c4c 	.word	0x20000c4c
 8003864:	20004f10 	.word	0x20004f10
 8003868:	20004aac 	.word	0x20004aac
 800386c:	20000a20 	.word	0x20000a20
 8003870:	200004e8 	.word	0x200004e8
 8003874:	20000b38 	.word	0x20000b38

08003878 <rpm_right_back_handler>:

extern "C" void rpm_right_back_handler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
	if (NBT_handler(&rpm_right_back_nbt))
 800387c:	4815      	ldr	r0, [pc, #84]	; (80038d4 <rpm_right_back_handler+0x5c>)
 800387e:	f000 ffc7 	bl	8004810 <_Z11NBT_handlerP5nbt_t>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d022      	beq.n	80038ce <rpm_right_back_handler+0x56>
	{
		if (sideRXDataRightBackWheel == 2) {
 8003888:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <rpm_right_back_handler+0x60>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d105      	bne.n	800389c <rpm_right_back_handler+0x24>
		    uint_msg_right_back.data = speedRXDataRightBackWheel;
 8003890:	4b12      	ldr	r3, [pc, #72]	; (80038dc <rpm_right_back_handler+0x64>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	b25a      	sxtb	r2, r3
 8003896:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <rpm_right_back_handler+0x68>)
 8003898:	711a      	strb	r2, [r3, #4]
 800389a:	e00e      	b.n	80038ba <rpm_right_back_handler+0x42>
		}
		else if (sideRXDataRightBackWheel == 1) {
 800389c:	4b0e      	ldr	r3, [pc, #56]	; (80038d8 <rpm_right_back_handler+0x60>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d107      	bne.n	80038b4 <rpm_right_back_handler+0x3c>
			uint_msg_right_back.data = -speedRXDataRightBackWheel;
 80038a4:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <rpm_right_back_handler+0x64>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	425b      	negs	r3, r3
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	b25a      	sxtb	r2, r3
 80038ae:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <rpm_right_back_handler+0x68>)
 80038b0:	711a      	strb	r2, [r3, #4]
 80038b2:	e002      	b.n	80038ba <rpm_right_back_handler+0x42>
		}
		else {
			uint_msg_right_back.data = 0;
 80038b4:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <rpm_right_back_handler+0x68>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	711a      	strb	r2, [r3, #4]
		}
    	if (nh.connected()) {
 80038ba:	480a      	ldr	r0, [pc, #40]	; (80038e4 <rpm_right_back_handler+0x6c>)
 80038bc:	f000 fa3c 	bl	8003d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <rpm_right_back_handler+0x56>
    		rpm_right_back.publish(&uint_msg_right_back);
 80038c6:	4906      	ldr	r1, [pc, #24]	; (80038e0 <rpm_right_back_handler+0x68>)
 80038c8:	4807      	ldr	r0, [pc, #28]	; (80038e8 <rpm_right_back_handler+0x70>)
 80038ca:	f7ff f866 	bl	800299a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
	}
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000c54 	.word	0x20000c54
 80038d8:	20004a1c 	.word	0x20004a1c
 80038dc:	20004acc 	.word	0x20004acc
 80038e0:	20000a28 	.word	0x20000a28
 80038e4:	200004e8 	.word	0x200004e8
 80038e8:	20000b4c 	.word	0x20000b4c

080038ec <rpm_left_back_handler>:

extern "C" void rpm_left_back_handler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
	if (NBT_handler(&rpm_left_back_nbt))
 80038f0:	4815      	ldr	r0, [pc, #84]	; (8003948 <rpm_left_back_handler+0x5c>)
 80038f2:	f000 ff8d 	bl	8004810 <_Z11NBT_handlerP5nbt_t>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d022      	beq.n	8003942 <rpm_left_back_handler+0x56>
	{
		if (sideRXDataLeftBackWheel == 1) {
 80038fc:	4b13      	ldr	r3, [pc, #76]	; (800394c <rpm_left_back_handler+0x60>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d105      	bne.n	8003910 <rpm_left_back_handler+0x24>
		  	uint_msg_left_back.data = speedRXDataLeftBackWheel;
 8003904:	4b12      	ldr	r3, [pc, #72]	; (8003950 <rpm_left_back_handler+0x64>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	b25a      	sxtb	r2, r3
 800390a:	4b12      	ldr	r3, [pc, #72]	; (8003954 <rpm_left_back_handler+0x68>)
 800390c:	711a      	strb	r2, [r3, #4]
 800390e:	e00e      	b.n	800392e <rpm_left_back_handler+0x42>
		}
		else if (sideRXDataLeftBackWheel == 2) {
 8003910:	4b0e      	ldr	r3, [pc, #56]	; (800394c <rpm_left_back_handler+0x60>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d107      	bne.n	8003928 <rpm_left_back_handler+0x3c>
			uint_msg_left_back.data = -speedRXDataLeftBackWheel;
 8003918:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <rpm_left_back_handler+0x64>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	425b      	negs	r3, r3
 800391e:	b2db      	uxtb	r3, r3
 8003920:	b25a      	sxtb	r2, r3
 8003922:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <rpm_left_back_handler+0x68>)
 8003924:	711a      	strb	r2, [r3, #4]
 8003926:	e002      	b.n	800392e <rpm_left_back_handler+0x42>
		}
		else {
			uint_msg_left_back.data = 0;
 8003928:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <rpm_left_back_handler+0x68>)
 800392a:	2200      	movs	r2, #0
 800392c:	711a      	strb	r2, [r3, #4]
		}
		if (nh.connected()) {
 800392e:	480a      	ldr	r0, [pc, #40]	; (8003958 <rpm_left_back_handler+0x6c>)
 8003930:	f000 fa02 	bl	8003d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <rpm_left_back_handler+0x56>
			rpm_left_back.publish(&uint_msg_left_back);
 800393a:	4906      	ldr	r1, [pc, #24]	; (8003954 <rpm_left_back_handler+0x68>)
 800393c:	4807      	ldr	r0, [pc, #28]	; (800395c <rpm_left_back_handler+0x70>)
 800393e:	f7ff f82c 	bl	800299a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		}
	}
}
 8003942:	bf00      	nop
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	20000c5c 	.word	0x20000c5c
 800394c:	20004ac4 	.word	0x20004ac4
 8003950:	20004ab4 	.word	0x20004ab4
 8003954:	20000a30 	.word	0x20000a30
 8003958:	200004e8 	.word	0x200004e8
 800395c:	20000b60 	.word	0x20000b60

08003960 <gyro_handler>:

extern "C" void gyro_handler(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
    gyro_msg.x = gyroX;
 8003964:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <gyro_handler+0x40>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a0e      	ldr	r2, [pc, #56]	; (80039a4 <gyro_handler+0x44>)
 800396a:	6053      	str	r3, [r2, #4]
    gyro_msg.y = gyroY;
 800396c:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <gyro_handler+0x48>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a0c      	ldr	r2, [pc, #48]	; (80039a4 <gyro_handler+0x44>)
 8003972:	6093      	str	r3, [r2, #8]
    gyro_msg.z = gyroZ;
 8003974:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <gyro_handler+0x4c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a0a      	ldr	r2, [pc, #40]	; (80039a4 <gyro_handler+0x44>)
 800397a:	60d3      	str	r3, [r2, #12]
    if (nh.connected()) {
 800397c:	480c      	ldr	r0, [pc, #48]	; (80039b0 <gyro_handler+0x50>)
 800397e:	f000 f9db 	bl	8003d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d009      	beq.n	800399c <gyro_handler+0x3c>
    	if (NBT_handler(&gyro_nbt))
 8003988:	480a      	ldr	r0, [pc, #40]	; (80039b4 <gyro_handler+0x54>)
 800398a:	f000 ff41 	bl	8004810 <_Z11NBT_handlerP5nbt_t>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <gyro_handler+0x3c>
    	{
    		gyro.publish(&gyro_msg);
 8003994:	4903      	ldr	r1, [pc, #12]	; (80039a4 <gyro_handler+0x44>)
 8003996:	4808      	ldr	r0, [pc, #32]	; (80039b8 <gyro_handler+0x58>)
 8003998:	f7fe ffff 	bl	800299a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
    }
}
 800399c:	bf00      	nop
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	20004a9c 	.word	0x20004a9c
 80039a4:	20000a98 	.word	0x20000a98
 80039a8:	20004f44 	.word	0x20004f44
 80039ac:	20004ab8 	.word	0x20004ab8
 80039b0:	200004e8 	.word	0x200004e8
 80039b4:	20000c34 	.word	0x20000c34
 80039b8:	20000afc 	.word	0x20000afc

080039bc <accel_handler>:

extern "C" void accel_handler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
    accel_msg.x = accelX;
 80039c0:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <accel_handler+0x40>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0e      	ldr	r2, [pc, #56]	; (8003a00 <accel_handler+0x44>)
 80039c6:	6053      	str	r3, [r2, #4]
    accel_msg.y = accelY;
 80039c8:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <accel_handler+0x48>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a0c      	ldr	r2, [pc, #48]	; (8003a00 <accel_handler+0x44>)
 80039ce:	6093      	str	r3, [r2, #8]
    accel_msg.z = accelZ;
 80039d0:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <accel_handler+0x4c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a0a      	ldr	r2, [pc, #40]	; (8003a00 <accel_handler+0x44>)
 80039d6:	60d3      	str	r3, [r2, #12]
    if (nh.connected()) {
 80039d8:	480c      	ldr	r0, [pc, #48]	; (8003a0c <accel_handler+0x50>)
 80039da:	f000 f9ad 	bl	8003d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d009      	beq.n	80039f8 <accel_handler+0x3c>
    	if (NBT_handler(&accel_nbt))
 80039e4:	480a      	ldr	r0, [pc, #40]	; (8003a10 <accel_handler+0x54>)
 80039e6:	f000 ff13 	bl	8004810 <_Z11NBT_handlerP5nbt_t>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <accel_handler+0x3c>
    	{
    		accel.publish(&accel_msg);
 80039f0:	4903      	ldr	r1, [pc, #12]	; (8003a00 <accel_handler+0x44>)
 80039f2:	4808      	ldr	r0, [pc, #32]	; (8003a14 <accel_handler+0x58>)
 80039f4:	f7fe ffd1 	bl	800299a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
    }
}
 80039f8:	bf00      	nop
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20004a18 	.word	0x20004a18
 8003a00:	20000aa8 	.word	0x20000aa8
 8003a04:	20004a10 	.word	0x20004a10
 8003a08:	20004efc 	.word	0x20004efc
 8003a0c:	200004e8 	.word	0x200004e8
 8003a10:	20000c3c 	.word	0x20000c3c
 8003a14:	20000b10 	.word	0x20000b10

08003a18 <spinOnce>:

extern "C" void spinOnce(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
	if (NBT_handler(&ros_nbt))	{
 8003a1c:	4805      	ldr	r0, [pc, #20]	; (8003a34 <spinOnce+0x1c>)
 8003a1e:	f000 fef7 	bl	8004810 <_Z11NBT_handlerP5nbt_t>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <spinOnce+0x16>
		nh.spinOnce();
 8003a28:	4803      	ldr	r0, [pc, #12]	; (8003a38 <spinOnce+0x20>)
 8003a2a:	f000 f992 	bl	8003d52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	}
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000c64 	.word	0x20000c64
 8003a38:	200004e8 	.word	0x200004e8

08003a3c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d80d      	bhi.n	8003a6c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	fa22 f103 	lsr.w	r1, r2, r3
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	b2ca      	uxtb	r2, r1
 8003a62:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	3301      	adds	r3, #1
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	e7ee      	b.n	8003a4a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003a6c:	bf00      	nop
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d811      	bhi.n	8003ab6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6839      	ldr	r1, [r7, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	440a      	add	r2, r1
 8003a9c:	7812      	ldrb	r2, [r2, #0]
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	00d2      	lsls	r2, r2, #3
 8003aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e7ea      	b.n	8003a8c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003ab6:	bf00      	nop
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
	...

08003ac4 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	4a04      	ldr	r2, [pc, #16]	; (8003ae0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	0800fbc0 	.word	0x0800fbc0

08003ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff ffe8 	bl	8003ac4 <_ZN3ros15NodeHandleBase_C1Ev>
 8003af4:	4a39      	ldr	r2, [pc, #228]	; (8003bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xf8>)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3304      	adds	r3, #4
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe ff6b 	bl	80029da <_ZN13STM32HardwareC1Ev>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe fc68 	bl	80023e8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2b18      	cmp	r3, #24
 8003b20:	d80a      	bhi.n	8003b38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	3301      	adds	r3, #1
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	e7f1      	b.n	8003b1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	2b18      	cmp	r3, #24
 8003b40:	d80b      	bhi.n	8003b5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	2200      	movs	r2, #0
 8003b50:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	3301      	adds	r3, #1
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	e7f0      	b.n	8003b3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b64:	d209      	bcs.n	8003b7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x96>
      message_in[i] = 0;
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3318      	adds	r3, #24
 8003b6e:	2200      	movs	r2, #0
 8003b70:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3301      	adds	r3, #1
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	e7f1      	b.n	8003b5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b84:	d20a      	bcs.n	8003b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xb8>
      message_out[i] = 0;
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8003b90:	2200      	movs	r2, #0
 8003b92:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	3301      	adds	r3, #1
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	e7f0      	b.n	8003b7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    req_param_resp.floats_length = 0;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    req_param_resp.floats = NULL;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    req_param_resp.ints_length = 0;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514

    spin_timeout_ = 0;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	615a      	str	r2, [r3, #20]
  }
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	0800fb1c 	.word	0x0800fb1c

08003be0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	4a04      	ldr	r2, [pc, #16]	; (8003bfc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	0800fba8 	.word	0x0800fba8

08003c00 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff ffe5 	bl	8003be0 <_ZN3ros11Subscriber_C1Ev>
 8003c16:	4a0b      	ldr	r2, [pc, #44]	; (8003c44 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	330c      	adds	r3, #12
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe ff25 	bl	8002a70 <_ZN8std_msgs4Int8C1Ev>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	615a      	str	r2, [r3, #20]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	609a      	str	r2, [r3, #8]
  };
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	0800fb04 	.word	0x0800fb04

08003c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3304      	adds	r3, #4
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fe fecb 	bl	80029f0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003c82:	b480      	push	{r7}
 8003c84:	b085      	sub	sp, #20
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b18      	cmp	r3, #24
 8003c94:	dc1b      	bgt.n	8003cce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10e      	bne.n	8003cc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	605a      	str	r2, [r3, #4]
        return true;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e004      	b.n	8003cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	e7e0      	b.n	8003c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0xe>
      }
    }
    return false;
 8003cce:	2300      	movs	r3, #0
  }
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b18      	cmp	r3, #24
 8003cee:	dc1c      	bgt.n	8003d2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4e>
      if (publishers[i] == 0) // empty slot
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d110      	bne.n	8003d22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003d08:	6839      	ldr	r1, [r7, #0]
 8003d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	60da      	str	r2, [r3, #12]
        return true;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e004      	b.n	8003d2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	3301      	adds	r3, #1
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	e7df      	b.n	8003cea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8003d2a:	2300      	movs	r3, #0
  }
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
    return configured_;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fe fe7a 	bl	8002a58 <_ZN13STM32Hardware4timeEv>
 8003d64:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d903      	bls.n	8003d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d009      	beq.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d903      	bls.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d013      	beq.n	8003dce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3304      	adds	r3, #4
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fe fe54 	bl	8002a58 <_ZN13STM32Hardware4timeEv>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1ad2      	subs	r2, r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	bf8c      	ite	hi
 8003dbe:	2301      	movhi	r3, #1
 8003dc0:	2300      	movls	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8003dc8:	f06f 0301 	mvn.w	r3, #1
 8003dcc:	e193      	b.n	80040f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      int data = hardware_.read();
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fe fe16 	bl	8002a04 <_ZN13STM32Hardware4readEv>
 8003dd8:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f2c0 8173 	blt.w	80040c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x376>
      checksum_ += data;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	441a      	add	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003df8:	2b07      	cmp	r3, #7
 8003dfa:	d11d      	bne.n	8003e38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003e02:	1c59      	adds	r1, r3, #1
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	b2d1      	uxtb	r1, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	460a      	mov	r2, r1
 8003e14:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8003e1c:	1e5a      	subs	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1b7      	bne.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2208      	movs	r2, #8
 8003e32:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003e36:	e7b2      	b.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d128      	bne.n	8003e94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2bff      	cmp	r3, #255	; 0xff
 8003e46:	d10d      	bne.n	8003e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f103 0214 	add.w	r2, r3, #20
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8003e62:	e79c      	b.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3304      	adds	r3, #4
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe fdf5 	bl	8002a58 <_ZN13STM32Hardware4timeEv>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	bf8c      	ite	hi
 8003e7c:	2301      	movhi	r3, #1
 8003e7e:	2300      	movls	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d08b      	beq.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 8003e8e:	f06f 0301 	mvn.w	r3, #1
 8003e92:	e130      	b.n	80040f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d11b      	bne.n	8003ed6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2bfe      	cmp	r3, #254	; 0xfe
 8003ea2:	d107      	bne.n	8003eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003eb2:	e774      	b.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003ec2:	f083 0301 	eor.w	r3, r3, #1
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f43f af68 	beq.w	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f915 	bl	80040fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003ed4:	e763      	b.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d113      	bne.n	8003f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8003f06:	e74a      	b.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d110      	bne.n	8003f34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	021b      	lsls	r3, r3, #8
 8003f1c:	441a      	add	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003f32:	e734      	b.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d116      	bne.n	8003f6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003f44:	425a      	negs	r2, r3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	bf58      	it	pl
 8003f4c:	4253      	negpl	r3, r2
 8003f4e:	2bff      	cmp	r3, #255	; 0xff
 8003f50:	d107      	bne.n	8003f62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003f60:	e71d      	b.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003f6a:	e718      	b.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003f72:	2b05      	cmp	r3, #5
 8003f74:	d10f      	bne.n	8003f96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8003f94:	e703      	b.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003f9c:	2b06      	cmp	r3, #6
 8003f9e:	d117      	bne.n	8003fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	021b      	lsls	r3, r3, #8
 8003faa:	441a      	add	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2207      	movs	r2, #7
 8003fb6:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f47f aeec 	bne.w	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2208      	movs	r2, #8
 8003fca:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003fce:	e6e6      	b.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	f47f aee1 	bne.w	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003fea:	425a      	negs	r2, r3
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	bf58      	it	pl
 8003ff2:	4253      	negpl	r3, r2
 8003ff4:	2bff      	cmp	r3, #255	; 0xff
 8003ff6:	f47f aed2 	bne.w	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d110      	bne.n	8004026 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f87a 	bl	80040fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f894 	bl	8004138 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 8004020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004024:	e067      	b.n	80040f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
          else if (topic_ == TopicInfo::ID_TIME)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800402c:	2b0a      	cmp	r3, #10
 800402e:	d106      	bne.n	800403e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ec>
            syncTime(message_in);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3318      	adds	r3, #24
 8004034:	4619      	mov	r1, r3
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f964 	bl	8004304 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800403c:	e6af      	b.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004044:	2b06      	cmp	r3, #6
 8004046:	d10d      	bne.n	8004064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
            req_param_resp.deserialize(message_in);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3318      	adds	r3, #24
 8004052:	4619      	mov	r1, r3
 8004054:	4610      	mov	r0, r2
 8004056:	f7fe fafc 	bl	8002652 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8004062:	e69c      	b.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800406a:	2b0b      	cmp	r3, #11
 800406c:	d104      	bne.n	8004078 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x326>
            configured_ = false;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8004076:	e692      	b.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800407e:	3b64      	subs	r3, #100	; 0x64
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	f43f ae86 	beq.w	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004098:	3b64      	subs	r3, #100	; 0x64
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	6858      	ldr	r0, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80040ac:	3b64      	subs	r3, #100	; 0x64
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	3218      	adds	r2, #24
 80040c2:	4611      	mov	r1, r2
 80040c4:	4798      	blx	r3
    while (true)
 80040c6:	e66a      	b.n	8003d9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80040c8:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00f      	beq.n	80040f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d906      	bls.n	80040f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
      requestSyncTime();
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f809 	bl	80040fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 80040f4:	2300      	movs	r3, #0
  }
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80040fe:	b580      	push	{r7, lr}
 8004100:	b086      	sub	sp, #24
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004106:	f107 030c 	add.w	r3, r7, #12
 800410a:	4618      	mov	r0, r3
 800410c:	f7fd fe08 	bl	8001d20 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f107 020c 	add.w	r2, r7, #12
 800411a:	210a      	movs	r1, #10
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	4798      	blx	r3
    rt_time = hardware_.time();
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3304      	adds	r3, #4
 8004124:	4618      	mov	r0, r3
 8004126:	f7fe fc97 	bl	8002a58 <_ZN13STM32Hardware4timeEv>
 800412a:	4602      	mov	r2, r0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	609a      	str	r2, [r3, #8]
  }
 8004130:	bf00      	nop
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004138:	b590      	push	{r4, r7, lr}
 800413a:	b08b      	sub	sp, #44	; 0x2c
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004140:	f107 030c 	add.w	r3, r7, #12
 8004144:	4618      	mov	r0, r3
 8004146:	f7fd fedb 	bl	8001f00 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800414a:	2300      	movs	r3, #0
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	2b18      	cmp	r3, #24
 8004152:	dc5e      	bgt.n	8004212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
    {
      if (publishers[i] != 0) // non-empty slot
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004158:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800415c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d052      	beq.n	800420a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd2>
      {
        ti.topic_id = publishers[i]->id_;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004168:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800416c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	b29b      	uxth	r3, r3
 8004174:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800417e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800418a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800418e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004192:	6859      	ldr	r1, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004198:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800419c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3308      	adds	r3, #8
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4608      	mov	r0, r1
 80041aa:	4798      	blx	r3
 80041ac:	4603      	mov	r3, r0
 80041ae:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b4:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80041b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041bc:	6859      	ldr	r1, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c2:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80041c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	330c      	adds	r3, #12
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4608      	mov	r0, r1
 80041d4:	4798      	blx	r3
 80041d6:	4603      	mov	r3, r0
 80041d8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80041da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041de:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681c      	ldr	r4, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ea:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80041ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe fbe5 	bl	80029c2 <_ZN3ros9Publisher15getEndpointTypeEv>
 80041f8:	4601      	mov	r1, r0
 80041fa:	f107 030c 	add.w	r3, r7, #12
 80041fe:	461a      	mov	r2, r3
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	47a0      	blx	r4
        HAL_Delay(10);
 8004204:	200a      	movs	r0, #10
 8004206:	f000 fcad 	bl	8004b64 <HAL_Delay>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	3301      	adds	r3, #1
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
 8004210:	e79d      	b.n	800414e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004212:	2300      	movs	r3, #0
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	2b18      	cmp	r3, #24
 800421a:	dc6b      	bgt.n	80042f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1bc>
    {
      if (subscribers[i] != 0) // non-empty slot
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d05e      	beq.n	80042ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b4>
      {
        ti.topic_id = subscribers[i]->id_;
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	b29b      	uxth	r3, r3
 8004240:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	6859      	ldr	r1, [r3, #4]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3308      	adds	r3, #8
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4608      	mov	r0, r1
 8004278:	4798      	blx	r3
 800427a:	4603      	mov	r3, r0
 800427c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	6859      	ldr	r1, [r3, #4]
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	330c      	adds	r3, #12
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4608      	mov	r0, r1
 80042a2:	4798      	blx	r3
 80042a4:	4603      	mov	r3, r0
 80042a6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80042a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042ac:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681c      	ldr	r4, [r3, #0]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	6859      	ldr	r1, [r3, #4]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3304      	adds	r3, #4
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4608      	mov	r0, r1
 80042d8:	4798      	blx	r3
 80042da:	4601      	mov	r1, r0
 80042dc:	f107 030c 	add.w	r3, r7, #12
 80042e0:	461a      	mov	r2, r3
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	47a0      	blx	r4
        HAL_Delay(10);
 80042e6:	200a      	movs	r0, #10
 80042e8:	f000 fc3c 	bl	8004b64 <HAL_Delay>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	3301      	adds	r3, #1
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
 80042f2:	e790      	b.n	8004216 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
      }
    }
    configured_ = true;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 80042fc:	bf00      	nop
 80042fe:	372c      	adds	r7, #44	; 0x2c
 8004300:	46bd      	mov	sp, r7
 8004302:	bd90      	pop	{r4, r7, pc}

08004304 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800430e:	f107 0308 	add.w	r3, r7, #8
 8004312:	4618      	mov	r0, r3
 8004314:	f7fd fd04 	bl	8001d20 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	4618      	mov	r0, r3
 800431e:	f7fe fb9b 	bl	8002a58 <_ZN13STM32Hardware4timeEv>
 8004322:	4602      	mov	r2, r0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800432c:	f107 0308 	add.w	r3, r7, #8
 8004330:	6839      	ldr	r1, [r7, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7fd fd64 	bl	8001e00 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	4914      	ldr	r1, [pc, #80]	; (8004390 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 800433e:	fba1 1303 	umull	r1, r3, r1, r3
 8004342:	099b      	lsrs	r3, r3, #6
 8004344:	4413      	add	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004348:	6939      	ldr	r1, [r7, #16]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	4b10      	ldr	r3, [pc, #64]	; (8004390 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 800434e:	fba3 0302 	umull	r0, r3, r3, r2
 8004352:	099b      	lsrs	r3, r3, #6
 8004354:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004358:	fb00 f303 	mul.w	r3, r0, r3
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	4a0d      	ldr	r2, [pc, #52]	; (8004394 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004360:	fb02 f303 	mul.w	r3, r2, r3
 8004364:	440b      	add	r3, r1
 8004366:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004368:	f107 0308 	add.w	r3, r7, #8
 800436c:	3304      	adds	r3, #4
 800436e:	4619      	mov	r1, r3
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f8a3 	bl	80044bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3304      	adds	r3, #4
 800437a:	4618      	mov	r0, r3
 800437c:	f7fe fb6c 	bl	8002a58 <_ZN13STM32Hardware4timeEv>
 8004380:	4602      	mov	r2, r0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 8004388:	bf00      	nop
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	10624dd3 	.word	0x10624dd3
 8004394:	000f4240 	.word	0x000f4240

08004398 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b63      	cmp	r3, #99	; 0x63
 80043a8:	dd09      	ble.n	80043be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80043b0:	f083 0301 	eor.w	r3, r3, #1
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80043ba:	2300      	movs	r3, #0
 80043bc:	e077      	b.n	80044ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	f502 7206 	add.w	r2, r2, #536	; 0x218
 80043ca:	3207      	adds	r2, #7
 80043cc:	4611      	mov	r1, r2
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	4798      	blx	r3
 80043d2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	22ff      	movs	r2, #255	; 0xff
 80043d8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	22fe      	movs	r2, #254	; 0xfe
 80043e0:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	121b      	asrs	r3, r3, #8
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8004408:	4413      	add	r3, r2
 800440a:	b2db      	uxtb	r3, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	b2da      	uxtb	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	b2da      	uxtb	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	b21b      	sxth	r3, r3
 8004424:	121b      	asrs	r3, r3, #8
 8004426:	b2da      	uxtb	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 800442e:	2300      	movs	r3, #0
 8004430:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004432:	2305      	movs	r3, #5
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	3307      	adds	r3, #7
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	429a      	cmp	r2, r3
 800443e:	da0d      	bge.n	800445c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	4413      	add	r3, r2
 8004446:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	461a      	mov	r2, r3
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	4413      	add	r3, r2
 8004452:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	3301      	adds	r3, #1
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	e7ec      	b.n	8004436 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	3307      	adds	r3, #7
 8004460:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	425a      	negs	r2, r3
 8004466:	b2db      	uxtb	r3, r3
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	bf58      	it	pl
 800446c:	4253      	negpl	r3, r2
 800446e:	b2da      	uxtb	r2, r3
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	1c59      	adds	r1, r3, #1
 8004474:	6179      	str	r1, [r7, #20]
 8004476:	43d2      	mvns	r2, r2
 8004478:	b2d1      	uxtb	r1, r2
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4413      	add	r3, r2
 800447e:	460a      	mov	r2, r1
 8004480:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800448a:	dc0a      	bgt.n	80044a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	1d18      	adds	r0, r3, #4
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4619      	mov	r1, r3
 800449a:	f7fe facd 	bl	8002a38 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	e005      	b.n	80044ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80044a2:	4905      	ldr	r1, [pc, #20]	; (80044b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f847 	bl	8004538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80044aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 80044ae:	4618      	mov	r0, r3
 80044b0:	3720      	adds	r7, #32
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	0800f954 	.word	0x0800f954

080044bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3304      	adds	r3, #4
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe fac4 	bl	8002a58 <_ZN13STM32Hardware4timeEv>
 80044d0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4914      	ldr	r1, [pc, #80]	; (800452c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 80044da:	fba1 1303 	umull	r1, r3, r1, r3
 80044de:	099b      	lsrs	r3, r3, #6
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	1e5a      	subs	r2, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	6859      	ldr	r1, [r3, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4b0f      	ldr	r3, [pc, #60]	; (800452c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 80044f0:	fba3 0302 	umull	r0, r3, r3, r2
 80044f4:	099b      	lsrs	r3, r3, #6
 80044f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044fa:	fb00 f303 	mul.w	r3, r0, r3
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	4a0b      	ldr	r2, [pc, #44]	; (8004530 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	1aca      	subs	r2, r1, r3
 8004508:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 800450a:	4413      	add	r3, r2
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f103 020c 	add.w	r2, r3, #12
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3310      	adds	r3, #16
 800451a:	4619      	mov	r1, r3
 800451c:	4610      	mov	r0, r2
 800451e:	f7fd fae5 	bl	8001aec <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004522:	bf00      	nop
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	10624dd3 	.word	0x10624dd3
 8004530:	000f4240 	.word	0x000f4240
 8004534:	3b9aca00 	.word	0x3b9aca00

08004538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	2103      	movs	r1, #3
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f804 	bl	8004554 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800454c:	bf00      	nop
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	460b      	mov	r3, r1
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004562:	f107 0314 	add.w	r3, r7, #20
 8004566:	4618      	mov	r0, r3
 8004568:	f7fd fe8e 	bl	8002288 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800456c:	7afb      	ldrb	r3, [r7, #11]
 800456e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f107 0214 	add.w	r2, r7, #20
 800457e:	2107      	movs	r1, #7
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	4798      	blx	r3
  }
 8004584:	bf00      	nop
 8004586:	3720      	adds	r7, #32
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <_Z41__static_initialization_and_destruction_0ii>:
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b01      	cmp	r3, #1
 800459a:	f040 8083 	bne.w	80046a4 <_Z41__static_initialization_and_destruction_0ii+0x118>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d17d      	bne.n	80046a4 <_Z41__static_initialization_and_destruction_0ii+0x118>
ros::NodeHandle nh;
 80045a8:	4840      	ldr	r0, [pc, #256]	; (80046ac <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80045aa:	f7ff fa9b 	bl	8003ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int8 uint_msg_right_front;
 80045ae:	4840      	ldr	r0, [pc, #256]	; (80046b0 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80045b0:	f7fe fa5e 	bl	8002a70 <_ZN8std_msgs4Int8C1Ev>
std_msgs::Int8 uint_msg_left_front;
 80045b4:	483f      	ldr	r0, [pc, #252]	; (80046b4 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80045b6:	f7fe fa5b 	bl	8002a70 <_ZN8std_msgs4Int8C1Ev>
std_msgs::Int8 uint_msg_right_back;
 80045ba:	483f      	ldr	r0, [pc, #252]	; (80046b8 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80045bc:	f7fe fa58 	bl	8002a70 <_ZN8std_msgs4Int8C1Ev>
std_msgs::Int8 uint_msg_left_back;
 80045c0:	483e      	ldr	r0, [pc, #248]	; (80046bc <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80045c2:	f7fe fa55 	bl	8002a70 <_ZN8std_msgs4Int8C1Ev>
std_msgs::UInt8MultiArray diagnostics_data_array;
 80045c6:	483e      	ldr	r0, [pc, #248]	; (80046c0 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80045c8:	f7fe fd42 	bl	8003050 <_ZN8std_msgs15UInt8MultiArrayC1Ev>
std_msgs::UInt8MultiArray sensors_data_array;
 80045cc:	483d      	ldr	r0, [pc, #244]	; (80046c4 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80045ce:	f7fe fd3f 	bl	8003050 <_ZN8std_msgs15UInt8MultiArrayC1Ev>
geometry_msgs::Vector3 gyro_msg;
 80045d2:	483d      	ldr	r0, [pc, #244]	; (80046c8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80045d4:	f7fe fe34 	bl	8003240 <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 accel_msg;
 80045d8:	483c      	ldr	r0, [pc, #240]	; (80046cc <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80045da:	f7fe fe31 	bl	8003240 <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 sen1_3_msg;
 80045de:	483c      	ldr	r0, [pc, #240]	; (80046d0 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80045e0:	f7fe fe2e 	bl	8003240 <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 sen4_6_msg;
 80045e4:	483b      	ldr	r0, [pc, #236]	; (80046d4 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80045e6:	f7fe fe2b 	bl	8003240 <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 sen7_8_msg;
 80045ea:	483b      	ldr	r0, [pc, #236]	; (80046d8 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80045ec:	f7fe fe28 	bl	8003240 <_ZN13geometry_msgs7Vector3C1Ev>
ros::Publisher stm("stm", &gyro_msg);
 80045f0:	2300      	movs	r3, #0
 80045f2:	4a35      	ldr	r2, [pc, #212]	; (80046c8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80045f4:	4939      	ldr	r1, [pc, #228]	; (80046dc <_Z41__static_initialization_and_destruction_0ii+0x150>)
 80045f6:	483a      	ldr	r0, [pc, #232]	; (80046e0 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 80045f8:	f7fe f9b8 	bl	800296c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher gyro("gyro", &gyro_msg);
 80045fc:	2300      	movs	r3, #0
 80045fe:	4a32      	ldr	r2, [pc, #200]	; (80046c8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004600:	4938      	ldr	r1, [pc, #224]	; (80046e4 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004602:	4839      	ldr	r0, [pc, #228]	; (80046e8 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004604:	f7fe f9b2 	bl	800296c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher accel("accel", &accel_msg);
 8004608:	2300      	movs	r3, #0
 800460a:	4a30      	ldr	r2, [pc, #192]	; (80046cc <_Z41__static_initialization_and_destruction_0ii+0x140>)
 800460c:	4937      	ldr	r1, [pc, #220]	; (80046ec <_Z41__static_initialization_and_destruction_0ii+0x160>)
 800460e:	4838      	ldr	r0, [pc, #224]	; (80046f0 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004610:	f7fe f9ac 	bl	800296c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_right_front("rpm_right_front", &uint_msg_right_front);
 8004614:	2300      	movs	r3, #0
 8004616:	4a26      	ldr	r2, [pc, #152]	; (80046b0 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8004618:	4936      	ldr	r1, [pc, #216]	; (80046f4 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 800461a:	4837      	ldr	r0, [pc, #220]	; (80046f8 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 800461c:	f7fe f9a6 	bl	800296c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_left_front("rpm_left_front", &uint_msg_left_front);
 8004620:	2300      	movs	r3, #0
 8004622:	4a24      	ldr	r2, [pc, #144]	; (80046b4 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8004624:	4935      	ldr	r1, [pc, #212]	; (80046fc <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004626:	4836      	ldr	r0, [pc, #216]	; (8004700 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004628:	f7fe f9a0 	bl	800296c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_right_back("rpm_right_back", &uint_msg_right_back);
 800462c:	2300      	movs	r3, #0
 800462e:	4a22      	ldr	r2, [pc, #136]	; (80046b8 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8004630:	4934      	ldr	r1, [pc, #208]	; (8004704 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004632:	4835      	ldr	r0, [pc, #212]	; (8004708 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004634:	f7fe f99a 	bl	800296c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_left_back("rpm_left_back", &uint_msg_left_back);
 8004638:	2300      	movs	r3, #0
 800463a:	4a20      	ldr	r2, [pc, #128]	; (80046bc <_Z41__static_initialization_and_destruction_0ii+0x130>)
 800463c:	4933      	ldr	r1, [pc, #204]	; (800470c <_Z41__static_initialization_and_destruction_0ii+0x180>)
 800463e:	4834      	ldr	r0, [pc, #208]	; (8004710 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004640:	f7fe f994 	bl	800296c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int8> rpm_rightFront_sub("rpm_rightFront_sub", rpm_rightFront_subCb);
 8004644:	2301      	movs	r3, #1
 8004646:	4a33      	ldr	r2, [pc, #204]	; (8004714 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004648:	4933      	ldr	r1, [pc, #204]	; (8004718 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 800464a:	4834      	ldr	r0, [pc, #208]	; (800471c <_Z41__static_initialization_and_destruction_0ii+0x190>)
 800464c:	f7ff fad8 	bl	8003c00 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> rpm_leftFront_sub("rpm_leftFront_sub", rpm_leftFront_subCb);
 8004650:	2301      	movs	r3, #1
 8004652:	4a33      	ldr	r2, [pc, #204]	; (8004720 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004654:	4933      	ldr	r1, [pc, #204]	; (8004724 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8004656:	4834      	ldr	r0, [pc, #208]	; (8004728 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004658:	f7ff fad2 	bl	8003c00 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> rpm_rightBack_sub("rpm_rightBack_sub", rpm_rightBack_subCb);
 800465c:	2301      	movs	r3, #1
 800465e:	4a33      	ldr	r2, [pc, #204]	; (800472c <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8004660:	4933      	ldr	r1, [pc, #204]	; (8004730 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8004662:	4834      	ldr	r0, [pc, #208]	; (8004734 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8004664:	f7ff facc 	bl	8003c00 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> rpm_leftBack_sub("rpm_leftBack_sub", rpm_leftBack_subCb);
 8004668:	2301      	movs	r3, #1
 800466a:	4a33      	ldr	r2, [pc, #204]	; (8004738 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 800466c:	4933      	ldr	r1, [pc, #204]	; (800473c <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 800466e:	4834      	ldr	r0, [pc, #208]	; (8004740 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8004670:	f7ff fac6 	bl	8003c00 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Publisher diagnostic_data("diagnostics_data", &diagnostics_data_array);
 8004674:	2300      	movs	r3, #0
 8004676:	4a12      	ldr	r2, [pc, #72]	; (80046c0 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8004678:	4932      	ldr	r1, [pc, #200]	; (8004744 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800467a:	4833      	ldr	r0, [pc, #204]	; (8004748 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 800467c:	f7fe f976 	bl	800296c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher sensa_data("sensors1_3_data", &sen1_3_msg);
 8004680:	2300      	movs	r3, #0
 8004682:	4a13      	ldr	r2, [pc, #76]	; (80046d0 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004684:	4931      	ldr	r1, [pc, #196]	; (800474c <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8004686:	4832      	ldr	r0, [pc, #200]	; (8004750 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8004688:	f7fe f970 	bl	800296c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher sensb_data("sensors4_6_data", &sen4_6_msg);
 800468c:	2300      	movs	r3, #0
 800468e:	4a11      	ldr	r2, [pc, #68]	; (80046d4 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004690:	4930      	ldr	r1, [pc, #192]	; (8004754 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8004692:	4831      	ldr	r0, [pc, #196]	; (8004758 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8004694:	f7fe f96a 	bl	800296c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher sensc_data("sensors7_8_data", &sen7_8_msg);
 8004698:	2300      	movs	r3, #0
 800469a:	4a0f      	ldr	r2, [pc, #60]	; (80046d8 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800469c:	492f      	ldr	r1, [pc, #188]	; (800475c <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800469e:	4830      	ldr	r0, [pc, #192]	; (8004760 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 80046a0:	f7fe f964 	bl	800296c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80046a4:	bf00      	nop
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	200004e8 	.word	0x200004e8
 80046b0:	20000a18 	.word	0x20000a18
 80046b4:	20000a20 	.word	0x20000a20
 80046b8:	20000a28 	.word	0x20000a28
 80046bc:	20000a30 	.word	0x20000a30
 80046c0:	20000a38 	.word	0x20000a38
 80046c4:	20000a68 	.word	0x20000a68
 80046c8:	20000a98 	.word	0x20000a98
 80046cc:	20000aa8 	.word	0x20000aa8
 80046d0:	20000ab8 	.word	0x20000ab8
 80046d4:	20000ac8 	.word	0x20000ac8
 80046d8:	20000ad8 	.word	0x20000ad8
 80046dc:	0800f990 	.word	0x0800f990
 80046e0:	20000ae8 	.word	0x20000ae8
 80046e4:	0800f994 	.word	0x0800f994
 80046e8:	20000afc 	.word	0x20000afc
 80046ec:	0800f99c 	.word	0x0800f99c
 80046f0:	20000b10 	.word	0x20000b10
 80046f4:	0800f9a4 	.word	0x0800f9a4
 80046f8:	20000b24 	.word	0x20000b24
 80046fc:	0800f9b4 	.word	0x0800f9b4
 8004700:	20000b38 	.word	0x20000b38
 8004704:	0800f9c4 	.word	0x0800f9c4
 8004708:	20000b4c 	.word	0x20000b4c
 800470c:	0800f9d4 	.word	0x0800f9d4
 8004710:	20000b60 	.word	0x20000b60
 8004714:	0800338d 	.word	0x0800338d
 8004718:	0800f9e4 	.word	0x0800f9e4
 800471c:	20000b74 	.word	0x20000b74
 8004720:	08003401 	.word	0x08003401
 8004724:	0800f9f8 	.word	0x0800f9f8
 8004728:	20000b90 	.word	0x20000b90
 800472c:	0800346d 	.word	0x0800346d
 8004730:	0800fa0c 	.word	0x0800fa0c
 8004734:	20000bac 	.word	0x20000bac
 8004738:	080034d9 	.word	0x080034d9
 800473c:	0800fa20 	.word	0x0800fa20
 8004740:	20000bc8 	.word	0x20000bc8
 8004744:	0800fa34 	.word	0x0800fa34
 8004748:	20000be4 	.word	0x20000be4
 800474c:	0800fa48 	.word	0x0800fa48
 8004750:	20000bf8 	.word	0x20000bf8
 8004754:	0800fa58 	.word	0x0800fa58
 8004758:	20000c0c 	.word	0x20000c0c
 800475c:	0800fa68 	.word	0x0800fa68
 8004760:	20000c20 	.word	0x20000c20

08004764 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	330c      	adds	r3, #12
 8004772:	6839      	ldr	r1, [r7, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f7fe f9ab 	bl	8002ad0 <_ZN8std_msgs4Int811deserializeEPh>
    this->cb_(msg);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	320c      	adds	r2, #12
 8004782:	4610      	mov	r0, r2
 8004784:	4798      	blx	r3
  }
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <_ZN3ros10SubscriberIN8std_msgs4Int8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
  }
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	330c      	adds	r3, #12
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe f9ac 	bl	8002b10 <_ZN8std_msgs4Int87getTypeEv>
 80047b8:	4603      	mov	r3, r0
  }
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	330c      	adds	r3, #12
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fe f9ac 	bl	8002b2c <_ZN8std_msgs4Int86getMD5Ev>
 80047d4:	4603      	mov	r3, r0
  }
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <_GLOBAL__sub_I_rb>:
 80047de:	b580      	push	{r7, lr}
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047e6:	2001      	movs	r0, #1
 80047e8:	f7ff fed0 	bl	800458c <_Z41__static_initialization_and_destruction_0ii>
 80047ec:	bd80      	pop	{r7, pc}

080047ee <_Z8NBT_initP5nbt_tm>:
#include "stm32f4xx_hal.h"
#include "nbt.h"

//NBT - Non Blocking Timer
void NBT_init(nbt_t * nbt, uint32_t interval)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	6039      	str	r1, [r7, #0]
	nbt->timeout = interval;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	601a      	str	r2, [r3, #0]
	nbt->previousMillis = HAL_GetTick();
 80047fe:	f000 f9a5 	bl	8004b4c <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	605a      	str	r2, [r3, #4]
}
 8004808:	bf00      	nop
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <_Z11NBT_handlerP5nbt_t>:

bool NBT_handler(nbt_t * nbt)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
	if(HAL_GetTick()-nbt->previousMillis>nbt->timeout){
 8004818:	f000 f998 	bl	8004b4c <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	1ad2      	subs	r2, r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	429a      	cmp	r2, r3
 800482a:	bf8c      	ite	hi
 800482c:	2301      	movhi	r3, #1
 800482e:	2300      	movls	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d006      	beq.n	8004844 <_Z11NBT_handlerP5nbt_t+0x34>
		nbt->previousMillis = HAL_GetTick();
 8004836:	f000 f989 	bl	8004b4c <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	605a      	str	r2, [r3, #4]
		return true;
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <_Z11NBT_handlerP5nbt_t+0x36>
	}

	return false;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <_Z17ringbuffer_statusP10ringbuffer>:
#include <string.h>

#define ASSERT(EX)                                                         \

__inline enum ringbuffer_state  ringbuffer_status(struct  ringbuffer *rb)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
	if (rb->read_index == rb->write_index) {
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	889b      	ldrh	r3, [r3, #4]
 800485a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800485e:	b29a      	uxth	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	88db      	ldrh	r3, [r3, #6]
 8004864:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004868:	b29b      	uxth	r3, r3
 800486a:	429a      	cmp	r2, r3
 800486c:	d10f      	bne.n	800488e <_Z17ringbuffer_statusP10ringbuffer+0x40>
		if (rb->read_mirror == rb->write_mirror)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	791b      	ldrb	r3, [r3, #4]
 8004872:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004876:	b2da      	uxtb	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	799b      	ldrb	r3, [r3, #6]
 800487c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004880:	b2db      	uxtb	r3, r3
 8004882:	429a      	cmp	r2, r3
 8004884:	d101      	bne.n	800488a <_Z17ringbuffer_statusP10ringbuffer+0x3c>
			return RT_RINGBUFFER_EMPTY;
 8004886:	2300      	movs	r3, #0
 8004888:	e002      	b.n	8004890 <_Z17ringbuffer_statusP10ringbuffer+0x42>
		else
			return RT_RINGBUFFER_FULL;
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <_Z17ringbuffer_statusP10ringbuffer+0x42>
	}
	return RT_RINGBUFFER_HALFFULL;
 800488e:	2302      	movs	r3, #2
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <_Z19ringbuffer_data_lenP10ringbuffer>:

/** return the size of data in rb */
uint16_t  ringbuffer_data_len(struct  ringbuffer *rb)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
	switch ( ringbuffer_status(rb)) {
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff ffd2 	bl	800484e <_Z17ringbuffer_statusP10ringbuffer>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <_Z19ringbuffer_data_lenP10ringbuffer+0x1a>
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d002      	beq.n	80048ba <_Z19ringbuffer_data_lenP10ringbuffer+0x1e>
 80048b4:	e006      	b.n	80048c4 <_Z19ringbuffer_data_lenP10ringbuffer+0x28>
	case RT_RINGBUFFER_EMPTY:
		return 0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	e031      	b.n	800491e <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
	case RT_RINGBUFFER_FULL:
		return rb->buffer_size;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	e02c      	b.n	800491e <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
	case RT_RINGBUFFER_HALFFULL:
	default:
		if (rb->write_index > rb->read_index)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	88db      	ldrh	r3, [r3, #6]
 80048c8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	889b      	ldrh	r3, [r3, #4]
 80048d2:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	429a      	cmp	r2, r3
 80048da:	d90d      	bls.n	80048f8 <_Z19ringbuffer_data_lenP10ringbuffer+0x5c>
			return rb->write_index - rb->read_index;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	88db      	ldrh	r3, [r3, #6]
 80048e0:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	889b      	ldrh	r3, [r3, #4]
 80048ec:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	e012      	b.n	800491e <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
		else
			return rb->buffer_size - (rb->read_index - rb->write_index);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80048fe:	b29a      	uxth	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	88db      	ldrh	r3, [r3, #6]
 8004904:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004908:	b29b      	uxth	r3, r3
 800490a:	4619      	mov	r1, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	889b      	ldrh	r3, [r3, #4]
 8004910:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004914:	b29b      	uxth	r3, r3
 8004916:	1acb      	subs	r3, r1, r3
 8004918:	b29b      	uxth	r3, r3
 800491a:	4413      	add	r3, r2
 800491c:	b29b      	uxth	r3, r3
	};
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <_Z18ringbuffer_putcharP10ringbufferh>:

/**
 * put a character into ring buffer
 */
uint32_t  ringbuffer_putchar(struct  ringbuffer *rb, const uint8_t ch)
{
 8004926:	b590      	push	{r4, r7, lr}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	460b      	mov	r3, r1
 8004930:	70fb      	strb	r3, [r7, #3]
    ASSERT(rb != NULL);

    /* whether has enough space */
	if (! ringbuffer_empty_space(rb))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004938:	461c      	mov	r4, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff ffad 	bl	800489c <_Z19ringbuffer_data_lenP10ringbuffer>
 8004942:	4603      	mov	r3, r0
 8004944:	429c      	cmp	r4, r3
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <_Z18ringbuffer_putcharP10ringbufferh+0x30>
		return 0;
 8004952:	2300      	movs	r3, #0
 8004954:	e038      	b.n	80049c8 <_Z18ringbuffer_putcharP10ringbufferh+0xa2>

	rb->buffer_ptr[rb->write_index] = ch;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	88d2      	ldrh	r2, [r2, #6]
 800495e:	f3c2 024e 	ubfx	r2, r2, #1, #15
 8004962:	b292      	uxth	r2, r2
 8004964:	4413      	add	r3, r2
 8004966:	78fa      	ldrb	r2, [r7, #3]
 8004968:	701a      	strb	r2, [r3, #0]

	/* flip mirror */
	if (rb->write_index == rb->buffer_size - 1) {
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	88db      	ldrh	r3, [r3, #6]
 800496e:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004972:	b29b      	uxth	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800497c:	3b01      	subs	r3, #1
 800497e:	429a      	cmp	r2, r3
 8004980:	d114      	bne.n	80049ac <_Z18ringbuffer_putcharP10ringbufferh+0x86>
		rb->write_mirror = ~rb->write_mirror;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	799b      	ldrb	r3, [r3, #6]
 8004986:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800498a:	b2db      	uxtb	r3, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	b2db      	uxtb	r3, r3
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	b2d9      	uxtb	r1, r3
 8004998:	7993      	ldrb	r3, [r2, #6]
 800499a:	f361 0300 	bfi	r3, r1, #0, #1
 800499e:	7193      	strb	r3, [r2, #6]
		rb->write_index = 0;
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	88d3      	ldrh	r3, [r2, #6]
 80049a4:	f36f 034f 	bfc	r3, #1, #15
 80049a8:	80d3      	strh	r3, [r2, #6]
 80049aa:	e00c      	b.n	80049c6 <_Z18ringbuffer_putcharP10ringbufferh+0xa0>
	} else {
		rb->write_index++;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	88da      	ldrh	r2, [r3, #6]
 80049b0:	f3c2 024e 	ubfx	r2, r2, #1, #15
 80049b4:	b292      	uxth	r2, r2
 80049b6:	3201      	adds	r2, #1
 80049b8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80049bc:	b291      	uxth	r1, r2
 80049be:	88da      	ldrh	r2, [r3, #6]
 80049c0:	f361 024f 	bfi	r2, r1, #1, #15
 80049c4:	80da      	strh	r2, [r3, #6]
	}

	return 1;
 80049c6:	2301      	movs	r3, #1
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd90      	pop	{r4, r7, pc}

080049d0 <_Z18ringbuffer_getcharP10ringbufferPh>:

/**
 * get a character from a ringbuffer
 */
uint32_t  ringbuffer_getchar(struct  ringbuffer *rb, uint8_t *ch)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
    ASSERT(rb != NULL);

    /* ringbuffer is empty */
    if (! ringbuffer_data_len(rb))
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7ff ff5e 	bl	800489c <_Z19ringbuffer_data_lenP10ringbuffer>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	bf0c      	ite	eq
 80049e6:	2301      	moveq	r3, #1
 80049e8:	2300      	movne	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <_Z18ringbuffer_getcharP10ringbufferPh+0x24>
        return 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	e03a      	b.n	8004a6a <_Z18ringbuffer_getcharP10ringbufferPh+0x9a>

    /* put character */
    *ch = rb->buffer_ptr[rb->read_index];
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	8892      	ldrh	r2, [r2, #4]
 80049fc:	f3c2 024e 	ubfx	r2, r2, #1, #15
 8004a00:	b292      	uxth	r2, r2
 8004a02:	4413      	add	r3, r2
 8004a04:	781a      	ldrb	r2, [r3, #0]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	701a      	strb	r2, [r3, #0]

    if (rb->read_index == rb->buffer_size-1)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	889b      	ldrh	r3, [r3, #4]
 8004a0e:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d114      	bne.n	8004a4c <_Z18ringbuffer_getcharP10ringbufferPh+0x7c>
    {
        rb->read_mirror = ~rb->read_mirror;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	791b      	ldrb	r3, [r3, #4]
 8004a26:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	43db      	mvns	r3, r3
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	b2d9      	uxtb	r1, r3
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	7913      	ldrb	r3, [r2, #4]
 8004a3a:	f361 0300 	bfi	r3, r1, #0, #1
 8004a3e:	7113      	strb	r3, [r2, #4]
        rb->read_index = 0;
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	8893      	ldrh	r3, [r2, #4]
 8004a44:	f36f 034f 	bfc	r3, #1, #15
 8004a48:	8093      	strh	r3, [r2, #4]
 8004a4a:	e00d      	b.n	8004a68 <_Z18ringbuffer_getcharP10ringbufferPh+0x98>
    }
    else
    {
        rb->read_index++;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	889b      	ldrh	r3, [r3, #4]
 8004a50:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3301      	adds	r3, #1
 8004a58:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004a5c:	b299      	uxth	r1, r3
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	8893      	ldrh	r3, [r2, #4]
 8004a62:	f361 034f 	bfi	r3, r1, #1, #15
 8004a66:	8093      	strh	r3, [r2, #4]
    }

    return 1;
 8004a68:	2301      	movs	r3, #1
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <_Z15ringbuffer_initP10ringbufferPhs>:
}

void  ringbuffer_init(struct  ringbuffer *rb,
                        uint8_t           *pool,
                        int16_t            size)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b085      	sub	sp, #20
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	60f8      	str	r0, [r7, #12]
 8004a7a:	60b9      	str	r1, [r7, #8]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	80fb      	strh	r3, [r7, #6]
    ASSERT(rb != NULL);
    ASSERT(size > 0);

    /* initialize read and write index */
    rb->read_mirror = rb->read_index = 0;
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	8893      	ldrh	r3, [r2, #4]
 8004a84:	f36f 034f 	bfc	r3, #1, #15
 8004a88:	8093      	strh	r3, [r2, #4]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	889b      	ldrh	r3, [r3, #4]
 8004a8e:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	b2d9      	uxtb	r1, r3
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	7913      	ldrb	r3, [r2, #4]
 8004a9e:	f361 0300 	bfi	r3, r1, #0, #1
 8004aa2:	7113      	strb	r3, [r2, #4]
    rb->write_mirror = rb->write_index = 0;
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	88d3      	ldrh	r3, [r2, #6]
 8004aa8:	f36f 034f 	bfc	r3, #1, #15
 8004aac:	80d3      	strh	r3, [r2, #6]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	88db      	ldrh	r3, [r3, #6]
 8004ab2:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	b2d9      	uxtb	r1, r3
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	7993      	ldrb	r3, [r2, #6]
 8004ac2:	f361 0300 	bfi	r3, r1, #0, #1
 8004ac6:	7193      	strb	r3, [r2, #6]

    /* set buffer pool and size */
    rb->buffer_ptr = pool;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	601a      	str	r2, [r3, #0]
    rb->buffer_size = size; //ALIGN_DOWN(size, ALIGN_SIZE);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	88fa      	ldrh	r2, [r7, #6]
 8004ad2:	811a      	strh	r2, [r3, #8]
}
 8004ad4:	bf00      	nop
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ae4:	4b0e      	ldr	r3, [pc, #56]	; (8004b20 <HAL_Init+0x40>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a0d      	ldr	r2, [pc, #52]	; (8004b20 <HAL_Init+0x40>)
 8004aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <HAL_Init+0x40>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a0a      	ldr	r2, [pc, #40]	; (8004b20 <HAL_Init+0x40>)
 8004af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004afc:	4b08      	ldr	r3, [pc, #32]	; (8004b20 <HAL_Init+0x40>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a07      	ldr	r2, [pc, #28]	; (8004b20 <HAL_Init+0x40>)
 8004b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b08:	2003      	movs	r0, #3
 8004b0a:	f000 ff56 	bl	80059ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b0e:	2000      	movs	r0, #0
 8004b10:	f7fc fea6 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b14:	f7fc fdce 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	40023c00 	.word	0x40023c00

08004b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <HAL_IncTick+0x20>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <HAL_IncTick+0x24>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4413      	add	r3, r2
 8004b34:	4a04      	ldr	r2, [pc, #16]	; (8004b48 <HAL_IncTick+0x24>)
 8004b36:	6013      	str	r3, [r2, #0]
}
 8004b38:	bf00      	nop
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20000010 	.word	0x20000010
 8004b48:	20004fd0 	.word	0x20004fd0

08004b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8004b50:	4b03      	ldr	r3, [pc, #12]	; (8004b60 <HAL_GetTick+0x14>)
 8004b52:	681b      	ldr	r3, [r3, #0]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	20004fd0 	.word	0x20004fd0

08004b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b6c:	f7ff ffee 	bl	8004b4c <HAL_GetTick>
 8004b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b7c:	d005      	beq.n	8004b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b7e:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <HAL_Delay+0x40>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b8a:	bf00      	nop
 8004b8c:	f7ff ffde 	bl	8004b4c <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d8f7      	bhi.n	8004b8c <HAL_Delay+0x28>
  {
  }
}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	20000010 	.word	0x20000010

08004ba8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e0ed      	b.n	8004d96 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d102      	bne.n	8004bcc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fc fda2 	bl	8001710 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0202 	bic.w	r2, r2, #2
 8004bda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bdc:	f7ff ffb6 	bl	8004b4c <HAL_GetTick>
 8004be0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004be2:	e012      	b.n	8004c0a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004be4:	f7ff ffb2 	bl	8004b4c <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b0a      	cmp	r3, #10
 8004bf0:	d90b      	bls.n	8004c0a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2205      	movs	r2, #5
 8004c02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e0c5      	b.n	8004d96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1e5      	bne.n	8004be4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c28:	f7ff ff90 	bl	8004b4c <HAL_GetTick>
 8004c2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c2e:	e012      	b.n	8004c56 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c30:	f7ff ff8c 	bl	8004b4c <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b0a      	cmp	r3, #10
 8004c3c:	d90b      	bls.n	8004c56 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2205      	movs	r2, #5
 8004c4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e09f      	b.n	8004d96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0e5      	beq.n	8004c30 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	7e1b      	ldrb	r3, [r3, #24]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d108      	bne.n	8004c7e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	e007      	b.n	8004c8e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	7e5b      	ldrb	r3, [r3, #25]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d108      	bne.n	8004ca8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	e007      	b.n	8004cb8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	7e9b      	ldrb	r3, [r3, #26]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d108      	bne.n	8004cd2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0220 	orr.w	r2, r2, #32
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	e007      	b.n	8004ce2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0220 	bic.w	r2, r2, #32
 8004ce0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	7edb      	ldrb	r3, [r3, #27]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d108      	bne.n	8004cfc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0210 	bic.w	r2, r2, #16
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	e007      	b.n	8004d0c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0210 	orr.w	r2, r2, #16
 8004d0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	7f1b      	ldrb	r3, [r3, #28]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d108      	bne.n	8004d26 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0208 	orr.w	r2, r2, #8
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	e007      	b.n	8004d36 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0208 	bic.w	r2, r2, #8
 8004d34:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	7f5b      	ldrb	r3, [r3, #29]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d108      	bne.n	8004d50 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0204 	orr.w	r2, r2, #4
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	e007      	b.n	8004d60 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0204 	bic.w	r2, r2, #4
 8004d5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	ea42 0103 	orr.w	r1, r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	1e5a      	subs	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
	...

08004da0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004db6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004db8:	7cfb      	ldrb	r3, [r7, #19]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d003      	beq.n	8004dc6 <HAL_CAN_ConfigFilter+0x26>
 8004dbe:	7cfb      	ldrb	r3, [r7, #19]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	f040 80be 	bne.w	8004f42 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004dc6:	4b65      	ldr	r3, [pc, #404]	; (8004f5c <HAL_CAN_ConfigFilter+0x1bc>)
 8004dc8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004dd0:	f043 0201 	orr.w	r2, r3, #1
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004de0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	431a      	orrs	r2, r3
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	2201      	movs	r2, #1
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	43db      	mvns	r3, r3
 8004e18:	401a      	ands	r2, r3
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d123      	bne.n	8004e70 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	43db      	mvns	r3, r3
 8004e32:	401a      	ands	r2, r3
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004e4a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	3248      	adds	r2, #72	; 0x48
 8004e50:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e64:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e66:	6979      	ldr	r1, [r7, #20]
 8004e68:	3348      	adds	r3, #72	; 0x48
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	440b      	add	r3, r1
 8004e6e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d122      	bne.n	8004ebe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	431a      	orrs	r2, r3
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e98:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	3248      	adds	r2, #72	; 0x48
 8004e9e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004eb2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004eb4:	6979      	ldr	r1, [r7, #20]
 8004eb6:	3348      	adds	r3, #72	; 0x48
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	440b      	add	r3, r1
 8004ebc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d109      	bne.n	8004eda <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	401a      	ands	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004ed8:	e007      	b.n	8004eea <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d109      	bne.n	8004f06 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	43db      	mvns	r3, r3
 8004efc:	401a      	ands	r2, r3
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004f04:	e007      	b.n	8004f16 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d107      	bne.n	8004f2e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f34:	f023 0201 	bic.w	r2, r3, #1
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e006      	b.n	8004f50 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
  }
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	371c      	adds	r7, #28
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	40006400 	.word	0x40006400

08004f60 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d12e      	bne.n	8004fd2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0201 	bic.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f8c:	f7ff fdde 	bl	8004b4c <HAL_GetTick>
 8004f90:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f92:	e012      	b.n	8004fba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f94:	f7ff fdda 	bl	8004b4c <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b0a      	cmp	r3, #10
 8004fa0:	d90b      	bls.n	8004fba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2205      	movs	r2, #5
 8004fb2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e012      	b.n	8004fe0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e5      	bne.n	8004f94 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	e006      	b.n	8004fe0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
  }
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b089      	sub	sp, #36	; 0x24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ffc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005006:	7ffb      	ldrb	r3, [r7, #31]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d003      	beq.n	8005014 <HAL_CAN_AddTxMessage+0x2c>
 800500c:	7ffb      	ldrb	r3, [r7, #31]
 800500e:	2b02      	cmp	r3, #2
 8005010:	f040 80b8 	bne.w	8005184 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10a      	bne.n	8005034 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005024:	2b00      	cmp	r3, #0
 8005026:	d105      	bne.n	8005034 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 80a0 	beq.w	8005174 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	0e1b      	lsrs	r3, r3, #24
 8005038:	f003 0303 	and.w	r3, r3, #3
 800503c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d907      	bls.n	8005054 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e09e      	b.n	8005192 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005054:	2201      	movs	r2, #1
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	409a      	lsls	r2, r3
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10d      	bne.n	8005082 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005070:	68f9      	ldr	r1, [r7, #12]
 8005072:	6809      	ldr	r1, [r1, #0]
 8005074:	431a      	orrs	r2, r3
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	3318      	adds	r3, #24
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	440b      	add	r3, r1
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	e00f      	b.n	80050a2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800508c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005092:	68f9      	ldr	r1, [r7, #12]
 8005094:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005096:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	3318      	adds	r3, #24
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	440b      	add	r3, r1
 80050a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6819      	ldr	r1, [r3, #0]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	3318      	adds	r3, #24
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	440b      	add	r3, r1
 80050b2:	3304      	adds	r3, #4
 80050b4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	7d1b      	ldrb	r3, [r3, #20]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d111      	bne.n	80050e2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	3318      	adds	r3, #24
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	4413      	add	r3, r2
 80050ca:	3304      	adds	r3, #4
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	6811      	ldr	r1, [r2, #0]
 80050d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	3318      	adds	r3, #24
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	440b      	add	r3, r1
 80050de:	3304      	adds	r3, #4
 80050e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	3307      	adds	r3, #7
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	061a      	lsls	r2, r3, #24
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3306      	adds	r3, #6
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	041b      	lsls	r3, r3, #16
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3305      	adds	r3, #5
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	021b      	lsls	r3, r3, #8
 80050fc:	4313      	orrs	r3, r2
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	3204      	adds	r2, #4
 8005102:	7812      	ldrb	r2, [r2, #0]
 8005104:	4610      	mov	r0, r2
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	6811      	ldr	r1, [r2, #0]
 800510a:	ea43 0200 	orr.w	r2, r3, r0
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	440b      	add	r3, r1
 8005114:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005118:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3303      	adds	r3, #3
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	061a      	lsls	r2, r3, #24
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3302      	adds	r3, #2
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	041b      	lsls	r3, r3, #16
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3301      	adds	r3, #1
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	4313      	orrs	r3, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	7812      	ldrb	r2, [r2, #0]
 800513a:	4610      	mov	r0, r2
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	6811      	ldr	r1, [r2, #0]
 8005140:	ea43 0200 	orr.w	r2, r3, r0
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	440b      	add	r3, r1
 800514a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800514e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	3318      	adds	r3, #24
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	4413      	add	r3, r2
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	6811      	ldr	r1, [r2, #0]
 8005162:	f043 0201 	orr.w	r2, r3, #1
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	3318      	adds	r3, #24
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	440b      	add	r3, r1
 800516e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	e00e      	b.n	8005192 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e006      	b.n	8005192 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
  }
}
 8005192:	4618      	mov	r0, r3
 8005194:	3724      	adds	r7, #36	; 0x24
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800519e:	b480      	push	{r7}
 80051a0:	b087      	sub	sp, #28
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
 80051aa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051b2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80051b4:	7dfb      	ldrb	r3, [r7, #23]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d003      	beq.n	80051c2 <HAL_CAN_GetRxMessage+0x24>
 80051ba:	7dfb      	ldrb	r3, [r7, #23]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	f040 80f3 	bne.w	80053a8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10e      	bne.n	80051e6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d116      	bne.n	8005204 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e0e7      	b.n	80053b6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	f003 0303 	and.w	r3, r3, #3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d107      	bne.n	8005204 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e0d8      	b.n	80053b6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	331b      	adds	r3, #27
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	4413      	add	r3, r2
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0204 	and.w	r2, r3, #4
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10c      	bne.n	800523c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	331b      	adds	r3, #27
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	4413      	add	r3, r2
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	0d5b      	lsrs	r3, r3, #21
 8005232:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	e00b      	b.n	8005254 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	331b      	adds	r3, #27
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	4413      	add	r3, r2
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	08db      	lsrs	r3, r3, #3
 800524c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	331b      	adds	r3, #27
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	4413      	add	r3, r2
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0202 	and.w	r2, r3, #2
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	331b      	adds	r3, #27
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	4413      	add	r3, r2
 8005276:	3304      	adds	r3, #4
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 020f 	and.w	r2, r3, #15
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	331b      	adds	r3, #27
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	4413      	add	r3, r2
 800528e:	3304      	adds	r3, #4
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	0a1b      	lsrs	r3, r3, #8
 8005294:	b2da      	uxtb	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	331b      	adds	r3, #27
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	4413      	add	r3, r2
 80052a6:	3304      	adds	r3, #4
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	0c1b      	lsrs	r3, r3, #16
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	0a1a      	lsrs	r2, r3, #8
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	3301      	adds	r3, #1
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	0c1a      	lsrs	r2, r3, #16
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	3302      	adds	r3, #2
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	4413      	add	r3, r2
 8005306:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	0e1a      	lsrs	r2, r3, #24
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	3303      	adds	r3, #3
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	4413      	add	r3, r2
 8005320:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	3304      	adds	r3, #4
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	4413      	add	r3, r2
 8005338:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	0a1a      	lsrs	r2, r3, #8
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	3305      	adds	r3, #5
 8005344:	b2d2      	uxtb	r2, r2
 8005346:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	4413      	add	r3, r2
 8005352:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	0c1a      	lsrs	r2, r3, #16
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	3306      	adds	r3, #6
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	4413      	add	r3, r2
 800536c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	0e1a      	lsrs	r2, r3, #24
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	3307      	adds	r3, #7
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d108      	bne.n	8005394 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0220 	orr.w	r2, r2, #32
 8005390:	60da      	str	r2, [r3, #12]
 8005392:	e007      	b.n	80053a4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0220 	orr.w	r2, r2, #32
 80053a2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	e006      	b.n	80053b6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
  }
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053d2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d002      	beq.n	80053e0 <HAL_CAN_ActivateNotification+0x1e>
 80053da:	7bfb      	ldrb	r3, [r7, #15]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d109      	bne.n	80053f4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6959      	ldr	r1, [r3, #20]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80053f0:	2300      	movs	r3, #0
 80053f2:	e006      	b.n	8005402 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
  }
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b08a      	sub	sp, #40	; 0x28
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005416:	2300      	movs	r3, #0
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d07c      	beq.n	800554e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d023      	beq.n	80054a6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2201      	movs	r2, #1
 8005464:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f97d 	bl	8005770 <HAL_CAN_TxMailbox0CompleteCallback>
 8005476:	e016      	b.n	80054a6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d004      	beq.n	800548c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
 800548a:	e00c      	b.n	80054a6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d004      	beq.n	80054a0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
 800549e:	e002      	b.n	80054a6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f983 	bl	80057ac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d024      	beq.n	80054fa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d003      	beq.n	80054cc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f95d 	bl	8005784 <HAL_CAN_TxMailbox1CompleteCallback>
 80054ca:	e016      	b.n	80054fa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d004      	beq.n	80054e0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
 80054de:	e00c      	b.n	80054fa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d004      	beq.n	80054f4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
 80054f2:	e002      	b.n	80054fa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f963 	bl	80057c0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d024      	beq.n	800554e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800550c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d003      	beq.n	8005520 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f93d 	bl	8005798 <HAL_CAN_TxMailbox2CompleteCallback>
 800551e:	e016      	b.n	800554e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
 8005532:	e00c      	b.n	800554e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d004      	beq.n	8005548 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
 8005546:	e002      	b.n	800554e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f943 	bl	80057d4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00c      	beq.n	8005572 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f003 0310 	and.w	r3, r3, #16
 800555e:	2b00      	cmp	r3, #0
 8005560:	d007      	beq.n	8005572 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005568:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2210      	movs	r2, #16
 8005570:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00b      	beq.n	8005594 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d006      	beq.n	8005594 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2208      	movs	r2, #8
 800558c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f92a 	bl	80057e8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d009      	beq.n	80055b2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f003 0303 	and.w	r3, r3, #3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7fb f99f 	bl	80008f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00c      	beq.n	80055d6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2210      	movs	r2, #16
 80055d4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	f003 0320 	and.w	r3, r3, #32
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00b      	beq.n	80055f8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d006      	beq.n	80055f8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2208      	movs	r2, #8
 80055f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f90c 	bl	8005810 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	f003 0310 	and.w	r3, r3, #16
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f003 0303 	and.w	r3, r3, #3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f8f3 	bl	80057fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00b      	beq.n	8005638 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f003 0310 	and.w	r3, r3, #16
 8005626:	2b00      	cmp	r3, #0
 8005628:	d006      	beq.n	8005638 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2210      	movs	r2, #16
 8005630:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f8f6 	bl	8005824 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00b      	beq.n	800565a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b00      	cmp	r3, #0
 800564a:	d006      	beq.n	800565a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2208      	movs	r2, #8
 8005652:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f8ef 	bl	8005838 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d075      	beq.n	8005750 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b00      	cmp	r3, #0
 800566c:	d06c      	beq.n	8005748 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005674:	2b00      	cmp	r3, #0
 8005676:	d008      	beq.n	800568a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	f043 0301 	orr.w	r3, r3, #1
 8005688:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	f043 0302 	orr.w	r3, r3, #2
 80056a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d008      	beq.n	80056c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	f043 0304 	orr.w	r3, r3, #4
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d03d      	beq.n	8005748 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d038      	beq.n	8005748 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056dc:	2b30      	cmp	r3, #48	; 0x30
 80056de:	d017      	beq.n	8005710 <HAL_CAN_IRQHandler+0x302>
 80056e0:	2b30      	cmp	r3, #48	; 0x30
 80056e2:	d804      	bhi.n	80056ee <HAL_CAN_IRQHandler+0x2e0>
 80056e4:	2b10      	cmp	r3, #16
 80056e6:	d009      	beq.n	80056fc <HAL_CAN_IRQHandler+0x2ee>
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	d00c      	beq.n	8005706 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80056ec:	e024      	b.n	8005738 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80056ee:	2b50      	cmp	r3, #80	; 0x50
 80056f0:	d018      	beq.n	8005724 <HAL_CAN_IRQHandler+0x316>
 80056f2:	2b60      	cmp	r3, #96	; 0x60
 80056f4:	d01b      	beq.n	800572e <HAL_CAN_IRQHandler+0x320>
 80056f6:	2b40      	cmp	r3, #64	; 0x40
 80056f8:	d00f      	beq.n	800571a <HAL_CAN_IRQHandler+0x30c>
            break;
 80056fa:	e01d      	b.n	8005738 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	f043 0308 	orr.w	r3, r3, #8
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005704:	e018      	b.n	8005738 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	f043 0310 	orr.w	r3, r3, #16
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800570e:	e013      	b.n	8005738 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	f043 0320 	orr.w	r3, r3, #32
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005718:	e00e      	b.n	8005738 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005722:	e009      	b.n	8005738 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800572c:	e004      	b.n	8005738 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005736:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005746:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2204      	movs	r2, #4
 800574e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	2b00      	cmp	r3, #0
 8005754:	d008      	beq.n	8005768 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f872 	bl	800584c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005768:	bf00      	nop
 800576a:	3728      	adds	r7, #40	; 0x28
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005870:	4b0c      	ldr	r3, [pc, #48]	; (80058a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800587c:	4013      	ands	r3, r2
 800587e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800588c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005892:	4a04      	ldr	r2, [pc, #16]	; (80058a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	60d3      	str	r3, [r2, #12]
}
 8005898:	bf00      	nop
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	e000ed00 	.word	0xe000ed00

080058a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058ac:	4b04      	ldr	r3, [pc, #16]	; (80058c0 <__NVIC_GetPriorityGrouping+0x18>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	0a1b      	lsrs	r3, r3, #8
 80058b2:	f003 0307 	and.w	r3, r3, #7
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	e000ed00 	.word	0xe000ed00

080058c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	db0b      	blt.n	80058ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058d6:	79fb      	ldrb	r3, [r7, #7]
 80058d8:	f003 021f 	and.w	r2, r3, #31
 80058dc:	4907      	ldr	r1, [pc, #28]	; (80058fc <__NVIC_EnableIRQ+0x38>)
 80058de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e2:	095b      	lsrs	r3, r3, #5
 80058e4:	2001      	movs	r0, #1
 80058e6:	fa00 f202 	lsl.w	r2, r0, r2
 80058ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	e000e100 	.word	0xe000e100

08005900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	4603      	mov	r3, r0
 8005908:	6039      	str	r1, [r7, #0]
 800590a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800590c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005910:	2b00      	cmp	r3, #0
 8005912:	db0a      	blt.n	800592a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	b2da      	uxtb	r2, r3
 8005918:	490c      	ldr	r1, [pc, #48]	; (800594c <__NVIC_SetPriority+0x4c>)
 800591a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800591e:	0112      	lsls	r2, r2, #4
 8005920:	b2d2      	uxtb	r2, r2
 8005922:	440b      	add	r3, r1
 8005924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005928:	e00a      	b.n	8005940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	b2da      	uxtb	r2, r3
 800592e:	4908      	ldr	r1, [pc, #32]	; (8005950 <__NVIC_SetPriority+0x50>)
 8005930:	79fb      	ldrb	r3, [r7, #7]
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	3b04      	subs	r3, #4
 8005938:	0112      	lsls	r2, r2, #4
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	440b      	add	r3, r1
 800593e:	761a      	strb	r2, [r3, #24]
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	e000e100 	.word	0xe000e100
 8005950:	e000ed00 	.word	0xe000ed00

08005954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005954:	b480      	push	{r7}
 8005956:	b089      	sub	sp, #36	; 0x24
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	f1c3 0307 	rsb	r3, r3, #7
 800596e:	2b04      	cmp	r3, #4
 8005970:	bf28      	it	cs
 8005972:	2304      	movcs	r3, #4
 8005974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	3304      	adds	r3, #4
 800597a:	2b06      	cmp	r3, #6
 800597c:	d902      	bls.n	8005984 <NVIC_EncodePriority+0x30>
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	3b03      	subs	r3, #3
 8005982:	e000      	b.n	8005986 <NVIC_EncodePriority+0x32>
 8005984:	2300      	movs	r3, #0
 8005986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	fa02 f303 	lsl.w	r3, r2, r3
 8005992:	43da      	mvns	r2, r3
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	401a      	ands	r2, r3
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800599c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	fa01 f303 	lsl.w	r3, r1, r3
 80059a6:	43d9      	mvns	r1, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059ac:	4313      	orrs	r3, r2
         );
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3724      	adds	r7, #36	; 0x24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b082      	sub	sp, #8
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7ff ff4c 	bl	8005860 <__NVIC_SetPriorityGrouping>
}
 80059c8:	bf00      	nop
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059e2:	f7ff ff61 	bl	80058a8 <__NVIC_GetPriorityGrouping>
 80059e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	6978      	ldr	r0, [r7, #20]
 80059ee:	f7ff ffb1 	bl	8005954 <NVIC_EncodePriority>
 80059f2:	4602      	mov	r2, r0
 80059f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059f8:	4611      	mov	r1, r2
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff ff80 	bl	8005900 <__NVIC_SetPriority>
}
 8005a00:	bf00      	nop
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	4603      	mov	r3, r0
 8005a10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff ff54 	bl	80058c4 <__NVIC_EnableIRQ>
}
 8005a1c:	bf00      	nop
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d004      	beq.n	8005a42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2280      	movs	r2, #128	; 0x80
 8005a3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e00c      	b.n	8005a5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2205      	movs	r2, #5
 8005a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0201 	bic.w	r2, r2, #1
 8005a58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a76:	b2db      	uxtb	r3, r3
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b089      	sub	sp, #36	; 0x24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61fb      	str	r3, [r7, #28]
 8005a9e:	e16b      	b.n	8005d78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	f040 815a 	bne.w	8005d72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d00b      	beq.n	8005ade <HAL_GPIO_Init+0x5a>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d007      	beq.n	8005ade <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ad2:	2b11      	cmp	r3, #17
 8005ad4:	d003      	beq.n	8005ade <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	2b12      	cmp	r3, #18
 8005adc:	d130      	bne.n	8005b40 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	2203      	movs	r2, #3
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	43db      	mvns	r3, r3
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	4013      	ands	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	fa02 f303 	lsl.w	r3, r2, r3
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b14:	2201      	movs	r2, #1
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	4013      	ands	r3, r2
 8005b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	091b      	lsrs	r3, r3, #4
 8005b2a:	f003 0201 	and.w	r2, r3, #1
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	fa02 f303 	lsl.w	r3, r2, r3
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	2203      	movs	r2, #3
 8005b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b50:	43db      	mvns	r3, r3
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	4013      	ands	r3, r2
 8005b56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	005b      	lsls	r3, r3, #1
 8005b60:	fa02 f303 	lsl.w	r3, r2, r3
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d003      	beq.n	8005b80 <HAL_GPIO_Init+0xfc>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	2b12      	cmp	r3, #18
 8005b7e:	d123      	bne.n	8005bc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	08da      	lsrs	r2, r3, #3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3208      	adds	r2, #8
 8005b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	220f      	movs	r2, #15
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	691a      	ldr	r2, [r3, #16]
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	08da      	lsrs	r2, r3, #3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3208      	adds	r2, #8
 8005bc2:	69b9      	ldr	r1, [r7, #24]
 8005bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	2203      	movs	r2, #3
 8005bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd8:	43db      	mvns	r3, r3
 8005bda:	69ba      	ldr	r2, [r7, #24]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f003 0203 	and.w	r2, r3, #3
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 80b4 	beq.w	8005d72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	4b5f      	ldr	r3, [pc, #380]	; (8005d8c <HAL_GPIO_Init+0x308>)
 8005c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c12:	4a5e      	ldr	r2, [pc, #376]	; (8005d8c <HAL_GPIO_Init+0x308>)
 8005c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c18:	6453      	str	r3, [r2, #68]	; 0x44
 8005c1a:	4b5c      	ldr	r3, [pc, #368]	; (8005d8c <HAL_GPIO_Init+0x308>)
 8005c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c26:	4a5a      	ldr	r2, [pc, #360]	; (8005d90 <HAL_GPIO_Init+0x30c>)
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	089b      	lsrs	r3, r3, #2
 8005c2c:	3302      	adds	r3, #2
 8005c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	220f      	movs	r2, #15
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	43db      	mvns	r3, r3
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	4013      	ands	r3, r2
 8005c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a51      	ldr	r2, [pc, #324]	; (8005d94 <HAL_GPIO_Init+0x310>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d02b      	beq.n	8005caa <HAL_GPIO_Init+0x226>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a50      	ldr	r2, [pc, #320]	; (8005d98 <HAL_GPIO_Init+0x314>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d025      	beq.n	8005ca6 <HAL_GPIO_Init+0x222>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a4f      	ldr	r2, [pc, #316]	; (8005d9c <HAL_GPIO_Init+0x318>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d01f      	beq.n	8005ca2 <HAL_GPIO_Init+0x21e>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a4e      	ldr	r2, [pc, #312]	; (8005da0 <HAL_GPIO_Init+0x31c>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d019      	beq.n	8005c9e <HAL_GPIO_Init+0x21a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a4d      	ldr	r2, [pc, #308]	; (8005da4 <HAL_GPIO_Init+0x320>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d013      	beq.n	8005c9a <HAL_GPIO_Init+0x216>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a4c      	ldr	r2, [pc, #304]	; (8005da8 <HAL_GPIO_Init+0x324>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00d      	beq.n	8005c96 <HAL_GPIO_Init+0x212>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a4b      	ldr	r2, [pc, #300]	; (8005dac <HAL_GPIO_Init+0x328>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d007      	beq.n	8005c92 <HAL_GPIO_Init+0x20e>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a4a      	ldr	r2, [pc, #296]	; (8005db0 <HAL_GPIO_Init+0x32c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d101      	bne.n	8005c8e <HAL_GPIO_Init+0x20a>
 8005c8a:	2307      	movs	r3, #7
 8005c8c:	e00e      	b.n	8005cac <HAL_GPIO_Init+0x228>
 8005c8e:	2308      	movs	r3, #8
 8005c90:	e00c      	b.n	8005cac <HAL_GPIO_Init+0x228>
 8005c92:	2306      	movs	r3, #6
 8005c94:	e00a      	b.n	8005cac <HAL_GPIO_Init+0x228>
 8005c96:	2305      	movs	r3, #5
 8005c98:	e008      	b.n	8005cac <HAL_GPIO_Init+0x228>
 8005c9a:	2304      	movs	r3, #4
 8005c9c:	e006      	b.n	8005cac <HAL_GPIO_Init+0x228>
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e004      	b.n	8005cac <HAL_GPIO_Init+0x228>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e002      	b.n	8005cac <HAL_GPIO_Init+0x228>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e000      	b.n	8005cac <HAL_GPIO_Init+0x228>
 8005caa:	2300      	movs	r3, #0
 8005cac:	69fa      	ldr	r2, [r7, #28]
 8005cae:	f002 0203 	and.w	r2, r2, #3
 8005cb2:	0092      	lsls	r2, r2, #2
 8005cb4:	4093      	lsls	r3, r2
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005cbc:	4934      	ldr	r1, [pc, #208]	; (8005d90 <HAL_GPIO_Init+0x30c>)
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	089b      	lsrs	r3, r3, #2
 8005cc2:	3302      	adds	r3, #2
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005cca:	4b3a      	ldr	r3, [pc, #232]	; (8005db4 <HAL_GPIO_Init+0x330>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	43db      	mvns	r3, r3
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005cee:	4a31      	ldr	r2, [pc, #196]	; (8005db4 <HAL_GPIO_Init+0x330>)
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005cf4:	4b2f      	ldr	r3, [pc, #188]	; (8005db4 <HAL_GPIO_Init+0x330>)
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	43db      	mvns	r3, r3
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	4013      	ands	r3, r2
 8005d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d18:	4a26      	ldr	r2, [pc, #152]	; (8005db4 <HAL_GPIO_Init+0x330>)
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d1e:	4b25      	ldr	r3, [pc, #148]	; (8005db4 <HAL_GPIO_Init+0x330>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	43db      	mvns	r3, r3
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d42:	4a1c      	ldr	r2, [pc, #112]	; (8005db4 <HAL_GPIO_Init+0x330>)
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d48:	4b1a      	ldr	r3, [pc, #104]	; (8005db4 <HAL_GPIO_Init+0x330>)
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	43db      	mvns	r3, r3
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	4013      	ands	r3, r2
 8005d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d6c:	4a11      	ldr	r2, [pc, #68]	; (8005db4 <HAL_GPIO_Init+0x330>)
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	3301      	adds	r3, #1
 8005d76:	61fb      	str	r3, [r7, #28]
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	2b0f      	cmp	r3, #15
 8005d7c:	f67f ae90 	bls.w	8005aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d80:	bf00      	nop
 8005d82:	3724      	adds	r7, #36	; 0x24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	40013800 	.word	0x40013800
 8005d94:	40020000 	.word	0x40020000
 8005d98:	40020400 	.word	0x40020400
 8005d9c:	40020800 	.word	0x40020800
 8005da0:	40020c00 	.word	0x40020c00
 8005da4:	40021000 	.word	0x40021000
 8005da8:	40021400 	.word	0x40021400
 8005dac:	40021800 	.word	0x40021800
 8005db0:	40021c00 	.word	0x40021c00
 8005db4:	40013c00 	.word	0x40013c00

08005db8 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	695a      	ldr	r2, [r3, #20]
 8005dc8:	887b      	ldrh	r3, [r7, #2]
 8005dca:	401a      	ands	r2, r3
 8005dcc:	887b      	ldrh	r3, [r7, #2]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d104      	bne.n	8005ddc <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005dd2:	887b      	ldrh	r3, [r7, #2]
 8005dd4:	041a      	lsls	r2, r3, #16
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005dda:	e002      	b.n	8005de2 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005ddc:	887a      	ldrh	r2, [r7, #2]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	619a      	str	r2, [r3, #24]
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e11f      	b.n	8006042 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d106      	bne.n	8005e1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7fb fcd2 	bl	80017c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2224      	movs	r2, #36	; 0x24
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0201 	bic.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e54:	f004 f8ca 	bl	8009fec <HAL_RCC_GetPCLK1Freq>
 8005e58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	4a7b      	ldr	r2, [pc, #492]	; (800604c <HAL_I2C_Init+0x25c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d807      	bhi.n	8005e74 <HAL_I2C_Init+0x84>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4a7a      	ldr	r2, [pc, #488]	; (8006050 <HAL_I2C_Init+0x260>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	bf94      	ite	ls
 8005e6c:	2301      	movls	r3, #1
 8005e6e:	2300      	movhi	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	e006      	b.n	8005e82 <HAL_I2C_Init+0x92>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4a77      	ldr	r2, [pc, #476]	; (8006054 <HAL_I2C_Init+0x264>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	bf94      	ite	ls
 8005e7c:	2301      	movls	r3, #1
 8005e7e:	2300      	movhi	r3, #0
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e0db      	b.n	8006042 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4a72      	ldr	r2, [pc, #456]	; (8006058 <HAL_I2C_Init+0x268>)
 8005e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e92:	0c9b      	lsrs	r3, r3, #18
 8005e94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	4a64      	ldr	r2, [pc, #400]	; (800604c <HAL_I2C_Init+0x25c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d802      	bhi.n	8005ec4 <HAL_I2C_Init+0xd4>
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	e009      	b.n	8005ed8 <HAL_I2C_Init+0xe8>
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005eca:	fb02 f303 	mul.w	r3, r2, r3
 8005ece:	4a63      	ldr	r2, [pc, #396]	; (800605c <HAL_I2C_Init+0x26c>)
 8005ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed4:	099b      	lsrs	r3, r3, #6
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	6812      	ldr	r2, [r2, #0]
 8005edc:	430b      	orrs	r3, r1
 8005ede:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005eea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	4956      	ldr	r1, [pc, #344]	; (800604c <HAL_I2C_Init+0x25c>)
 8005ef4:	428b      	cmp	r3, r1
 8005ef6:	d80d      	bhi.n	8005f14 <HAL_I2C_Init+0x124>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	1e59      	subs	r1, r3, #1
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f06:	3301      	adds	r3, #1
 8005f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	bf38      	it	cc
 8005f10:	2304      	movcc	r3, #4
 8005f12:	e04f      	b.n	8005fb4 <HAL_I2C_Init+0x1c4>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d111      	bne.n	8005f40 <HAL_I2C_Init+0x150>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	1e58      	subs	r0, r3, #1
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6859      	ldr	r1, [r3, #4]
 8005f24:	460b      	mov	r3, r1
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	440b      	add	r3, r1
 8005f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f2e:	3301      	adds	r3, #1
 8005f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	bf0c      	ite	eq
 8005f38:	2301      	moveq	r3, #1
 8005f3a:	2300      	movne	r3, #0
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	e012      	b.n	8005f66 <HAL_I2C_Init+0x176>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	1e58      	subs	r0, r3, #1
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6859      	ldr	r1, [r3, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	440b      	add	r3, r1
 8005f4e:	0099      	lsls	r1, r3, #2
 8005f50:	440b      	add	r3, r1
 8005f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f56:	3301      	adds	r3, #1
 8005f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	bf0c      	ite	eq
 8005f60:	2301      	moveq	r3, #1
 8005f62:	2300      	movne	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <HAL_I2C_Init+0x17e>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e022      	b.n	8005fb4 <HAL_I2C_Init+0x1c4>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10e      	bne.n	8005f94 <HAL_I2C_Init+0x1a4>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	1e58      	subs	r0, r3, #1
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6859      	ldr	r1, [r3, #4]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	440b      	add	r3, r1
 8005f84:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f88:	3301      	adds	r3, #1
 8005f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f92:	e00f      	b.n	8005fb4 <HAL_I2C_Init+0x1c4>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	1e58      	subs	r0, r3, #1
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6859      	ldr	r1, [r3, #4]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	0099      	lsls	r1, r3, #2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005faa:	3301      	adds	r3, #1
 8005fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	6809      	ldr	r1, [r1, #0]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69da      	ldr	r2, [r3, #28]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005fe2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6911      	ldr	r1, [r2, #16]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	68d2      	ldr	r2, [r2, #12]
 8005fee:	4311      	orrs	r1, r2
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6812      	ldr	r2, [r2, #0]
 8005ff4:	430b      	orrs	r3, r1
 8005ff6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	695a      	ldr	r2, [r3, #20]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	431a      	orrs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0201 	orr.w	r2, r2, #1
 8006022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2220      	movs	r2, #32
 800602e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	000186a0 	.word	0x000186a0
 8006050:	001e847f 	.word	0x001e847f
 8006054:	003d08ff 	.word	0x003d08ff
 8006058:	431bde83 	.word	0x431bde83
 800605c:	10624dd3 	.word	0x10624dd3

08006060 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b088      	sub	sp, #32
 8006064:	af02      	add	r7, sp, #8
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	607a      	str	r2, [r7, #4]
 800606a:	461a      	mov	r2, r3
 800606c:	460b      	mov	r3, r1
 800606e:	817b      	strh	r3, [r7, #10]
 8006070:	4613      	mov	r3, r2
 8006072:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006074:	f7fe fd6a 	bl	8004b4c <HAL_GetTick>
 8006078:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b20      	cmp	r3, #32
 8006084:	f040 80e0 	bne.w	8006248 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	2319      	movs	r3, #25
 800608e:	2201      	movs	r2, #1
 8006090:	4970      	ldr	r1, [pc, #448]	; (8006254 <HAL_I2C_Master_Transmit+0x1f4>)
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f001 ffc2 	bl	800801c <I2C_WaitOnFlagUntilTimeout>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800609e:	2302      	movs	r3, #2
 80060a0:	e0d3      	b.n	800624a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d101      	bne.n	80060b0 <HAL_I2C_Master_Transmit+0x50>
 80060ac:	2302      	movs	r3, #2
 80060ae:	e0cc      	b.n	800624a <HAL_I2C_Master_Transmit+0x1ea>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d007      	beq.n	80060d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f042 0201 	orr.w	r2, r2, #1
 80060d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2221      	movs	r2, #33	; 0x21
 80060ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2210      	movs	r2, #16
 80060f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	893a      	ldrh	r2, [r7, #8]
 8006106:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610c:	b29a      	uxth	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4a50      	ldr	r2, [pc, #320]	; (8006258 <HAL_I2C_Master_Transmit+0x1f8>)
 8006116:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006118:	8979      	ldrh	r1, [r7, #10]
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	6a3a      	ldr	r2, [r7, #32]
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f001 fd6a 	bl	8007bf8 <I2C_MasterRequestWrite>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e08d      	b.n	800624a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800612e:	2300      	movs	r3, #0
 8006130:	613b      	str	r3, [r7, #16]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	613b      	str	r3, [r7, #16]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	613b      	str	r3, [r7, #16]
 8006142:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006144:	e066      	b.n	8006214 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	6a39      	ldr	r1, [r7, #32]
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f002 f83c 	bl	80081c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00d      	beq.n	8006172 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	2b04      	cmp	r3, #4
 800615c:	d107      	bne.n	800616e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800616c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e06b      	b.n	800624a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006176:	781a      	ldrb	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d11b      	bne.n	80061e8 <HAL_I2C_Master_Transmit+0x188>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d017      	beq.n	80061e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	781a      	ldrb	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	6a39      	ldr	r1, [r7, #32]
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f002 f82c 	bl	800824a <I2C_WaitOnBTFFlagUntilTimeout>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00d      	beq.n	8006214 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	d107      	bne.n	8006210 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800620e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e01a      	b.n	800624a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006218:	2b00      	cmp	r3, #0
 800621a:	d194      	bne.n	8006146 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800622a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2220      	movs	r2, #32
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	e000      	b.n	800624a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006248:	2302      	movs	r3, #2
  }
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	00100002 	.word	0x00100002
 8006258:	ffff0000 	.word	0xffff0000

0800625c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08c      	sub	sp, #48	; 0x30
 8006260:	af02      	add	r7, sp, #8
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	4608      	mov	r0, r1
 8006266:	4611      	mov	r1, r2
 8006268:	461a      	mov	r2, r3
 800626a:	4603      	mov	r3, r0
 800626c:	817b      	strh	r3, [r7, #10]
 800626e:	460b      	mov	r3, r1
 8006270:	813b      	strh	r3, [r7, #8]
 8006272:	4613      	mov	r3, r2
 8006274:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006276:	f7fe fc69 	bl	8004b4c <HAL_GetTick>
 800627a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b20      	cmp	r3, #32
 8006286:	f040 8208 	bne.w	800669a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	2319      	movs	r3, #25
 8006290:	2201      	movs	r2, #1
 8006292:	497b      	ldr	r1, [pc, #492]	; (8006480 <HAL_I2C_Mem_Read+0x224>)
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f001 fec1 	bl	800801c <I2C_WaitOnFlagUntilTimeout>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80062a0:	2302      	movs	r3, #2
 80062a2:	e1fb      	b.n	800669c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <HAL_I2C_Mem_Read+0x56>
 80062ae:	2302      	movs	r3, #2
 80062b0:	e1f4      	b.n	800669c <HAL_I2C_Mem_Read+0x440>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d007      	beq.n	80062d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0201 	orr.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2222      	movs	r2, #34	; 0x22
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2240      	movs	r2, #64	; 0x40
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006302:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006308:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630e:	b29a      	uxth	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4a5b      	ldr	r2, [pc, #364]	; (8006484 <HAL_I2C_Mem_Read+0x228>)
 8006318:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800631a:	88f8      	ldrh	r0, [r7, #6]
 800631c:	893a      	ldrh	r2, [r7, #8]
 800631e:	8979      	ldrh	r1, [r7, #10]
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	9301      	str	r3, [sp, #4]
 8006324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	4603      	mov	r3, r0
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f001 fce6 	bl	8007cfc <I2C_RequestMemoryRead>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e1b0      	b.n	800669c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800633e:	2b00      	cmp	r3, #0
 8006340:	d113      	bne.n	800636a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006342:	2300      	movs	r3, #0
 8006344:	623b      	str	r3, [r7, #32]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	623b      	str	r3, [r7, #32]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	623b      	str	r3, [r7, #32]
 8006356:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	e184      	b.n	8006674 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800636e:	2b01      	cmp	r3, #1
 8006370:	d11b      	bne.n	80063aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006380:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006382:	2300      	movs	r3, #0
 8006384:	61fb      	str	r3, [r7, #28]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	61fb      	str	r3, [r7, #28]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	61fb      	str	r3, [r7, #28]
 8006396:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	e164      	b.n	8006674 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d11b      	bne.n	80063ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063d2:	2300      	movs	r3, #0
 80063d4:	61bb      	str	r3, [r7, #24]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	61bb      	str	r3, [r7, #24]
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	e144      	b.n	8006674 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ea:	2300      	movs	r3, #0
 80063ec:	617b      	str	r3, [r7, #20]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	617b      	str	r3, [r7, #20]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	617b      	str	r3, [r7, #20]
 80063fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006400:	e138      	b.n	8006674 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006406:	2b03      	cmp	r3, #3
 8006408:	f200 80f1 	bhi.w	80065ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006410:	2b01      	cmp	r3, #1
 8006412:	d123      	bne.n	800645c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006416:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f001 ff89 	bl	8008330 <I2C_WaitOnRXNEFlagUntilTimeout>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e139      	b.n	800669c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691a      	ldr	r2, [r3, #16]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	b2d2      	uxtb	r2, r2
 8006434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006444:	3b01      	subs	r3, #1
 8006446:	b29a      	uxth	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	855a      	strh	r2, [r3, #42]	; 0x2a
 800645a:	e10b      	b.n	8006674 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006460:	2b02      	cmp	r3, #2
 8006462:	d14e      	bne.n	8006502 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646a:	2200      	movs	r2, #0
 800646c:	4906      	ldr	r1, [pc, #24]	; (8006488 <HAL_I2C_Mem_Read+0x22c>)
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f001 fdd4 	bl	800801c <I2C_WaitOnFlagUntilTimeout>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d008      	beq.n	800648c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e10e      	b.n	800669c <HAL_I2C_Mem_Read+0x440>
 800647e:	bf00      	nop
 8006480:	00100002 	.word	0x00100002
 8006484:	ffff0000 	.word	0xffff0000
 8006488:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800649a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691a      	ldr	r2, [r3, #16]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	691a      	ldr	r2, [r3, #16]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ea:	3b01      	subs	r3, #1
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006500:	e0b8      	b.n	8006674 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006508:	2200      	movs	r2, #0
 800650a:	4966      	ldr	r1, [pc, #408]	; (80066a4 <HAL_I2C_Mem_Read+0x448>)
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f001 fd85 	bl	800801c <I2C_WaitOnFlagUntilTimeout>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e0bf      	b.n	800669c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800652a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	691a      	ldr	r2, [r3, #16]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006536:	b2d2      	uxtb	r2, r2
 8006538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006548:	3b01      	subs	r3, #1
 800654a:	b29a      	uxth	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006554:	b29b      	uxth	r3, r3
 8006556:	3b01      	subs	r3, #1
 8006558:	b29a      	uxth	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006564:	2200      	movs	r2, #0
 8006566:	494f      	ldr	r1, [pc, #316]	; (80066a4 <HAL_I2C_Mem_Read+0x448>)
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f001 fd57 	bl	800801c <I2C_WaitOnFlagUntilTimeout>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e091      	b.n	800669c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006586:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	691a      	ldr	r2, [r3, #16]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	3b01      	subs	r3, #1
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	b2d2      	uxtb	r2, r2
 80065c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d6:	3b01      	subs	r3, #1
 80065d8:	b29a      	uxth	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	3b01      	subs	r3, #1
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065ec:	e042      	b.n	8006674 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f001 fe9c 	bl	8008330 <I2C_WaitOnRXNEFlagUntilTimeout>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e04c      	b.n	800669c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	691a      	ldr	r2, [r3, #16]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800661e:	3b01      	subs	r3, #1
 8006620:	b29a      	uxth	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662a:	b29b      	uxth	r3, r3
 800662c:	3b01      	subs	r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	f003 0304 	and.w	r3, r3, #4
 800663e:	2b04      	cmp	r3, #4
 8006640:	d118      	bne.n	8006674 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	691a      	ldr	r2, [r3, #16]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665e:	3b01      	subs	r3, #1
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800666a:	b29b      	uxth	r3, r3
 800666c:	3b01      	subs	r3, #1
 800666e:	b29a      	uxth	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006678:	2b00      	cmp	r3, #0
 800667a:	f47f aec2 	bne.w	8006402 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2220      	movs	r2, #32
 8006682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	e000      	b.n	800669c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800669a:	2302      	movs	r3, #2
  }
}
 800669c:	4618      	mov	r0, r3
 800669e:	3728      	adds	r7, #40	; 0x28
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	00010004 	.word	0x00010004

080066a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	2b10      	cmp	r3, #16
 80066d6:	d003      	beq.n	80066e0 <HAL_I2C_EV_IRQHandler+0x38>
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	2b40      	cmp	r3, #64	; 0x40
 80066dc:	f040 80bd 	bne.w	800685a <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10d      	bne.n	8006716 <HAL_I2C_EV_IRQHandler+0x6e>
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006700:	d003      	beq.n	800670a <HAL_I2C_EV_IRQHandler+0x62>
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006708:	d101      	bne.n	800670e <HAL_I2C_EV_IRQHandler+0x66>
 800670a:	2301      	movs	r3, #1
 800670c:	e000      	b.n	8006710 <HAL_I2C_EV_IRQHandler+0x68>
 800670e:	2300      	movs	r3, #0
 8006710:	2b01      	cmp	r3, #1
 8006712:	f000 812e 	beq.w	8006972 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00c      	beq.n	800673a <HAL_I2C_EV_IRQHandler+0x92>
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	0a5b      	lsrs	r3, r3, #9
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d006      	beq.n	800673a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 fe84 	bl	800843a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fcbb 	bl	80070ae <I2C_Master_SB>
 8006738:	e08e      	b.n	8006858 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	08db      	lsrs	r3, r3, #3
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d009      	beq.n	800675a <HAL_I2C_EV_IRQHandler+0xb2>
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	0a5b      	lsrs	r3, r3, #9
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fd31 	bl	80071ba <I2C_Master_ADD10>
 8006758:	e07e      	b.n	8006858 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	085b      	lsrs	r3, r3, #1
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b00      	cmp	r3, #0
 8006764:	d009      	beq.n	800677a <HAL_I2C_EV_IRQHandler+0xd2>
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	0a5b      	lsrs	r3, r3, #9
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fd4b 	bl	800720e <I2C_Master_ADDR>
 8006778:	e06e      	b.n	8006858 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	089b      	lsrs	r3, r3, #2
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d037      	beq.n	80067f6 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006794:	f000 80ef 	beq.w	8006976 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	09db      	lsrs	r3, r3, #7
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00f      	beq.n	80067c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	0a9b      	lsrs	r3, r3, #10
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d009      	beq.n	80067c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	089b      	lsrs	r3, r3, #2
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d103      	bne.n	80067c4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f948 	bl	8006a52 <I2C_MasterTransmit_TXE>
 80067c2:	e049      	b.n	8006858 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	089b      	lsrs	r3, r3, #2
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 80d2 	beq.w	8006976 <HAL_I2C_EV_IRQHandler+0x2ce>
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	0a5b      	lsrs	r3, r3, #9
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 80cb 	beq.w	8006976 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
 80067e2:	2b10      	cmp	r3, #16
 80067e4:	d103      	bne.n	80067ee <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f9cf 	bl	8006b8a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067ec:	e0c3      	b.n	8006976 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fa33 	bl	8006c5a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067f4:	e0bf      	b.n	8006976 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006804:	f000 80b7 	beq.w	8006976 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	099b      	lsrs	r3, r3, #6
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00f      	beq.n	8006834 <HAL_I2C_EV_IRQHandler+0x18c>
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	0a9b      	lsrs	r3, r3, #10
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d009      	beq.n	8006834 <HAL_I2C_EV_IRQHandler+0x18c>
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	089b      	lsrs	r3, r3, #2
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	d103      	bne.n	8006834 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 faa3 	bl	8006d78 <I2C_MasterReceive_RXNE>
 8006832:	e011      	b.n	8006858 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	089b      	lsrs	r3, r3, #2
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b00      	cmp	r3, #0
 800683e:	f000 809a 	beq.w	8006976 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	0a5b      	lsrs	r3, r3, #9
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 8093 	beq.w	8006976 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fb42 	bl	8006eda <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006856:	e08e      	b.n	8006976 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006858:	e08d      	b.n	8006976 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	2b00      	cmp	r3, #0
 8006860:	d004      	beq.n	800686c <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	61fb      	str	r3, [r7, #28]
 800686a:	e007      	b.n	800687c <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	085b      	lsrs	r3, r3, #1
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	d012      	beq.n	80068ae <HAL_I2C_EV_IRQHandler+0x206>
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	0a5b      	lsrs	r3, r3, #9
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00c      	beq.n	80068ae <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80068a4:	69b9      	ldr	r1, [r7, #24]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 ff00 	bl	80076ac <I2C_Slave_ADDR>
 80068ac:	e066      	b.n	800697c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	091b      	lsrs	r3, r3, #4
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d009      	beq.n	80068ce <HAL_I2C_EV_IRQHandler+0x226>
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	0a5b      	lsrs	r3, r3, #9
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 ff34 	bl	8007734 <I2C_Slave_STOPF>
 80068cc:	e056      	b.n	800697c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80068ce:	7bbb      	ldrb	r3, [r7, #14]
 80068d0:	2b21      	cmp	r3, #33	; 0x21
 80068d2:	d002      	beq.n	80068da <HAL_I2C_EV_IRQHandler+0x232>
 80068d4:	7bbb      	ldrb	r3, [r7, #14]
 80068d6:	2b29      	cmp	r3, #41	; 0x29
 80068d8:	d125      	bne.n	8006926 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	09db      	lsrs	r3, r3, #7
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00f      	beq.n	8006906 <HAL_I2C_EV_IRQHandler+0x25e>
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	0a9b      	lsrs	r3, r3, #10
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d009      	beq.n	8006906 <HAL_I2C_EV_IRQHandler+0x25e>
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	089b      	lsrs	r3, r3, #2
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d103      	bne.n	8006906 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fe16 	bl	8007530 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006904:	e039      	b.n	800697a <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	089b      	lsrs	r3, r3, #2
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d033      	beq.n	800697a <HAL_I2C_EV_IRQHandler+0x2d2>
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	0a5b      	lsrs	r3, r3, #9
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d02d      	beq.n	800697a <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fe43 	bl	80075aa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006924:	e029      	b.n	800697a <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	099b      	lsrs	r3, r3, #6
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00f      	beq.n	8006952 <HAL_I2C_EV_IRQHandler+0x2aa>
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	0a9b      	lsrs	r3, r3, #10
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d009      	beq.n	8006952 <HAL_I2C_EV_IRQHandler+0x2aa>
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	089b      	lsrs	r3, r3, #2
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d103      	bne.n	8006952 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fe4e 	bl	80075ec <I2C_SlaveReceive_RXNE>
 8006950:	e014      	b.n	800697c <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	089b      	lsrs	r3, r3, #2
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00e      	beq.n	800697c <HAL_I2C_EV_IRQHandler+0x2d4>
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	0a5b      	lsrs	r3, r3, #9
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d008      	beq.n	800697c <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fe7c 	bl	8007668 <I2C_SlaveReceive_BTF>
 8006970:	e004      	b.n	800697c <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8006972:	bf00      	nop
 8006974:	e002      	b.n	800697c <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006976:	bf00      	nop
 8006978:	e000      	b.n	800697c <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800697a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800697c:	3720      	adds	r7, #32
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b083      	sub	sp, #12
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80069b2:	bf00      	nop
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	460b      	mov	r3, r1
 80069dc:	70fb      	strb	r3, [r7, #3]
 80069de:	4613      	mov	r3, r2
 80069e0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80069e2:	bf00      	nop
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006a0a:	bf00      	nop
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006a46:	bf00      	nop
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b084      	sub	sp, #16
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a60:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a68:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d150      	bne.n	8006b1a <I2C_MasterTransmit_TXE+0xc8>
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
 8006a7a:	2b21      	cmp	r3, #33	; 0x21
 8006a7c:	d14d      	bne.n	8006b1a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d01d      	beq.n	8006ac0 <I2C_MasterTransmit_TXE+0x6e>
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2b20      	cmp	r3, #32
 8006a88:	d01a      	beq.n	8006ac0 <I2C_MasterTransmit_TXE+0x6e>
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a90:	d016      	beq.n	8006ac0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006aa0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2211      	movs	r2, #17
 8006aa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7ff ff62 	bl	8006982 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006abe:	e060      	b.n	8006b82 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ace:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ade:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b40      	cmp	r3, #64	; 0x40
 8006af8:	d107      	bne.n	8006b0a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff ff7d 	bl	8006a02 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b08:	e03b      	b.n	8006b82 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7ff ff35 	bl	8006982 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b18:	e033      	b.n	8006b82 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
 8006b1c:	2b21      	cmp	r3, #33	; 0x21
 8006b1e:	d005      	beq.n	8006b2c <I2C_MasterTransmit_TXE+0xda>
 8006b20:	7bbb      	ldrb	r3, [r7, #14]
 8006b22:	2b40      	cmp	r3, #64	; 0x40
 8006b24:	d12d      	bne.n	8006b82 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
 8006b28:	2b22      	cmp	r3, #34	; 0x22
 8006b2a:	d12a      	bne.n	8006b82 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d108      	bne.n	8006b48 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b44:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006b46:	e01c      	b.n	8006b82 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b40      	cmp	r3, #64	; 0x40
 8006b52:	d103      	bne.n	8006b5c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f880 	bl	8006c5a <I2C_MemoryTransmit_TXE_BTF>
}
 8006b5a:	e012      	b.n	8006b82 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b60:	781a      	ldrb	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006b80:	e7ff      	b.n	8006b82 <I2C_MasterTransmit_TXE+0x130>
 8006b82:	bf00      	nop
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b96:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b21      	cmp	r3, #33	; 0x21
 8006ba2:	d156      	bne.n	8006c52 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d012      	beq.n	8006bd4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	781a      	ldrb	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006bd2:	e03e      	b.n	8006c52 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b08      	cmp	r3, #8
 8006bd8:	d01d      	beq.n	8006c16 <I2C_MasterTransmit_BTF+0x8c>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2b20      	cmp	r3, #32
 8006bde:	d01a      	beq.n	8006c16 <I2C_MasterTransmit_BTF+0x8c>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006be6:	d016      	beq.n	8006c16 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bf6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2211      	movs	r2, #17
 8006bfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7ff feb7 	bl	8006982 <HAL_I2C_MasterTxCpltCallback>
}
 8006c14:	e01d      	b.n	8006c52 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c24:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c34:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2220      	movs	r2, #32
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f7ff fe98 	bl	8006982 <HAL_I2C_MasterTxCpltCallback>
}
 8006c52:	bf00      	nop
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c68:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d11d      	bne.n	8006cae <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d10b      	bne.n	8006c92 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c8a:	1c9a      	adds	r2, r3, #2
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006c90:	e06e      	b.n	8006d70 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	121b      	asrs	r3, r3, #8
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006cac:	e060      	b.n	8006d70 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d10b      	bne.n	8006cce <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006ccc:	e050      	b.n	8006d70 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d14c      	bne.n	8006d70 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
 8006cd8:	2b22      	cmp	r3, #34	; 0x22
 8006cda:	d108      	bne.n	8006cee <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cea:	601a      	str	r2, [r3, #0]
}
 8006cec:	e040      	b.n	8006d70 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d015      	beq.n	8006d24 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	2b21      	cmp	r3, #33	; 0x21
 8006cfc:	d112      	bne.n	8006d24 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d02:	781a      	ldrb	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006d22:	e025      	b.n	8006d70 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d120      	bne.n	8006d70 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8006d2e:	7bfb      	ldrb	r3, [r7, #15]
 8006d30:	2b21      	cmp	r3, #33	; 0x21
 8006d32:	d11d      	bne.n	8006d70 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d42:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d52:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff fe49 	bl	8006a02 <HAL_I2C_MemTxCpltCallback>
}
 8006d70:	bf00      	nop
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b22      	cmp	r3, #34	; 0x22
 8006d8a:	f040 80a2 	bne.w	8006ed2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d921      	bls.n	8006de0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	691a      	ldr	r2, [r3, #16]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dae:	1c5a      	adds	r2, r3, #1
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	2b03      	cmp	r3, #3
 8006dca:	f040 8082 	bne.w	8006ed2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ddc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8006dde:	e078      	b.n	8006ed2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d074      	beq.n	8006ed2 <I2C_MasterReceive_RXNE+0x15a>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d002      	beq.n	8006df4 <I2C_MasterReceive_RXNE+0x7c>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d16e      	bne.n	8006ed2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 fa69 	bl	80082cc <I2C_WaitOnSTOPRequestThroughIT>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d142      	bne.n	8006e86 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e0e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e1e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	691a      	ldr	r2, [r3, #16]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	b2d2      	uxtb	r2, r2
 8006e2c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b40      	cmp	r3, #64	; 0x40
 8006e58:	d10a      	bne.n	8006e70 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7ff fdd4 	bl	8006a16 <HAL_I2C_MemRxCpltCallback>
}
 8006e6e:	e030      	b.n	8006ed2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2212      	movs	r2, #18
 8006e7c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff fd89 	bl	8006996 <HAL_I2C_MasterRxCpltCallback>
}
 8006e84:	e025      	b.n	8006ed2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e94:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	691a      	ldr	r2, [r3, #16]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	b2d2      	uxtb	r2, r2
 8006ea2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	1c5a      	adds	r2, r3, #1
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f7ff fdac 	bl	8006a2a <HAL_I2C_ErrorCallback>
}
 8006ed2:	bf00      	nop
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b084      	sub	sp, #16
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d11b      	bne.n	8006f2a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f00:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	691a      	ldr	r2, [r3, #16]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	b2d2      	uxtb	r2, r2
 8006f0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	3b01      	subs	r3, #1
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006f28:	e0bd      	b.n	80070a6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d129      	bne.n	8006f88 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f42:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	d00a      	beq.n	8006f60 <I2C_MasterReceive_BTF+0x86>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d007      	beq.n	8006f60 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f5e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	691a      	ldr	r2, [r3, #16]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f86:	e08e      	b.n	80070a6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d176      	bne.n	8007080 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d002      	beq.n	8006f9e <I2C_MasterReceive_BTF+0xc4>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2b10      	cmp	r3, #16
 8006f9c:	d108      	bne.n	8006fb0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	e019      	b.n	8006fe4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b04      	cmp	r3, #4
 8006fb4:	d002      	beq.n	8006fbc <I2C_MasterReceive_BTF+0xe2>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d108      	bne.n	8006fce <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	e00a      	b.n	8006fe4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b10      	cmp	r3, #16
 8006fd2:	d007      	beq.n	8006fe4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fe2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	691a      	ldr	r2, [r3, #16]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	b2d2      	uxtb	r2, r2
 8006ff0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007000:	b29b      	uxth	r3, r3
 8007002:	3b01      	subs	r3, #1
 8007004:	b29a      	uxth	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	691a      	ldr	r2, [r3, #16]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	b2d2      	uxtb	r2, r2
 8007016:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800703e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2220      	movs	r2, #32
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b40      	cmp	r3, #64	; 0x40
 8007052:	d10a      	bne.n	800706a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff fcd7 	bl	8006a16 <HAL_I2C_MemRxCpltCallback>
}
 8007068:	e01d      	b.n	80070a6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2212      	movs	r2, #18
 8007076:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f7ff fc8c 	bl	8006996 <HAL_I2C_MasterRxCpltCallback>
}
 800707e:	e012      	b.n	80070a6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	691a      	ldr	r2, [r3, #16]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708a:	b2d2      	uxtb	r2, r2
 800708c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800709c:	b29b      	uxth	r3, r3
 800709e:	3b01      	subs	r3, #1
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80070a6:	bf00      	nop
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b083      	sub	sp, #12
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b40      	cmp	r3, #64	; 0x40
 80070c0:	d117      	bne.n	80070f2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d109      	bne.n	80070de <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	461a      	mov	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070da:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80070dc:	e067      	b.n	80071ae <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	f043 0301 	orr.w	r3, r3, #1
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	611a      	str	r2, [r3, #16]
}
 80070f0:	e05d      	b.n	80071ae <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070fa:	d133      	bne.n	8007164 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b21      	cmp	r3, #33	; 0x21
 8007106:	d109      	bne.n	800711c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710c:	b2db      	uxtb	r3, r3
 800710e:	461a      	mov	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007118:	611a      	str	r2, [r3, #16]
 800711a:	e008      	b.n	800712e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007120:	b2db      	uxtb	r3, r3
 8007122:	f043 0301 	orr.w	r3, r3, #1
 8007126:	b2da      	uxtb	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007132:	2b00      	cmp	r3, #0
 8007134:	d004      	beq.n	8007140 <I2C_Master_SB+0x92>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713c:	2b00      	cmp	r3, #0
 800713e:	d108      	bne.n	8007152 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007144:	2b00      	cmp	r3, #0
 8007146:	d032      	beq.n	80071ae <I2C_Master_SB+0x100>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714e:	2b00      	cmp	r3, #0
 8007150:	d02d      	beq.n	80071ae <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007160:	605a      	str	r2, [r3, #4]
}
 8007162:	e024      	b.n	80071ae <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10e      	bne.n	800718a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007170:	b29b      	uxth	r3, r3
 8007172:	11db      	asrs	r3, r3, #7
 8007174:	b2db      	uxtb	r3, r3
 8007176:	f003 0306 	and.w	r3, r3, #6
 800717a:	b2db      	uxtb	r3, r3
 800717c:	f063 030f 	orn	r3, r3, #15
 8007180:	b2da      	uxtb	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	611a      	str	r2, [r3, #16]
}
 8007188:	e011      	b.n	80071ae <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800718e:	2b01      	cmp	r3, #1
 8007190:	d10d      	bne.n	80071ae <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007196:	b29b      	uxth	r3, r3
 8007198:	11db      	asrs	r3, r3, #7
 800719a:	b2db      	uxtb	r3, r3
 800719c:	f003 0306 	and.w	r3, r3, #6
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	f063 030e 	orn	r3, r3, #14
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	611a      	str	r2, [r3, #16]
}
 80071ae:	bf00      	nop
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b083      	sub	sp, #12
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d103      	bne.n	80071de <I2C_Master_ADD10+0x24>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d011      	beq.n	8007202 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d104      	bne.n	80071f2 <I2C_Master_ADD10+0x38>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d007      	beq.n	8007202 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007200:	605a      	str	r2, [r3, #4]
    }
  }
}
 8007202:	bf00      	nop
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800720e:	b480      	push	{r7}
 8007210:	b091      	sub	sp, #68	; 0x44
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800721c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007224:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b22      	cmp	r3, #34	; 0x22
 8007236:	f040 8169 	bne.w	800750c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10f      	bne.n	8007262 <I2C_Master_ADDR+0x54>
 8007242:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007246:	2b40      	cmp	r3, #64	; 0x40
 8007248:	d10b      	bne.n	8007262 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800724a:	2300      	movs	r3, #0
 800724c:	633b      	str	r3, [r7, #48]	; 0x30
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	633b      	str	r3, [r7, #48]	; 0x30
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	633b      	str	r3, [r7, #48]	; 0x30
 800725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007260:	e160      	b.n	8007524 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007266:	2b00      	cmp	r3, #0
 8007268:	d11d      	bne.n	80072a6 <I2C_Master_ADDR+0x98>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007272:	d118      	bne.n	80072a6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007274:	2300      	movs	r3, #0
 8007276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007288:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007298:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800729e:	1c5a      	adds	r2, r3, #1
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	651a      	str	r2, [r3, #80]	; 0x50
 80072a4:	e13e      	b.n	8007524 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d113      	bne.n	80072d8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072b0:	2300      	movs	r3, #0
 80072b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80072c4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	e115      	b.n	8007504 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072dc:	b29b      	uxth	r3, r3
 80072de:	2b01      	cmp	r3, #1
 80072e0:	f040 808a 	bne.w	80073f8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80072e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80072ea:	d137      	bne.n	800735c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072fa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800730a:	d113      	bne.n	8007334 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800731a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800731c:	2300      	movs	r3, #0
 800731e:	627b      	str	r3, [r7, #36]	; 0x24
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	627b      	str	r3, [r7, #36]	; 0x24
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	e0e7      	b.n	8007504 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007334:	2300      	movs	r3, #0
 8007336:	623b      	str	r3, [r7, #32]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	623b      	str	r3, [r7, #32]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	623b      	str	r3, [r7, #32]
 8007348:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	e0d3      	b.n	8007504 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800735c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735e:	2b08      	cmp	r3, #8
 8007360:	d02e      	beq.n	80073c0 <I2C_Master_ADDR+0x1b2>
 8007362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007364:	2b20      	cmp	r3, #32
 8007366:	d02b      	beq.n	80073c0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800736a:	2b12      	cmp	r3, #18
 800736c:	d102      	bne.n	8007374 <I2C_Master_ADDR+0x166>
 800736e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007370:	2b01      	cmp	r3, #1
 8007372:	d125      	bne.n	80073c0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007376:	2b04      	cmp	r3, #4
 8007378:	d00e      	beq.n	8007398 <I2C_Master_ADDR+0x18a>
 800737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737c:	2b02      	cmp	r3, #2
 800737e:	d00b      	beq.n	8007398 <I2C_Master_ADDR+0x18a>
 8007380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007382:	2b10      	cmp	r3, #16
 8007384:	d008      	beq.n	8007398 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	e007      	b.n	80073a8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073a6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073a8:	2300      	movs	r3, #0
 80073aa:	61fb      	str	r3, [r7, #28]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	61fb      	str	r3, [r7, #28]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	61fb      	str	r3, [r7, #28]
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	e0a1      	b.n	8007504 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ce:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073d0:	2300      	movs	r3, #0
 80073d2:	61bb      	str	r3, [r7, #24]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	61bb      	str	r3, [r7, #24]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	61bb      	str	r3, [r7, #24]
 80073e4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	e085      	b.n	8007504 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d14d      	bne.n	800749e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007404:	2b04      	cmp	r3, #4
 8007406:	d016      	beq.n	8007436 <I2C_Master_ADDR+0x228>
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	2b02      	cmp	r3, #2
 800740c:	d013      	beq.n	8007436 <I2C_Master_ADDR+0x228>
 800740e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007410:	2b10      	cmp	r3, #16
 8007412:	d010      	beq.n	8007436 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007422:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007432:	601a      	str	r2, [r3, #0]
 8007434:	e007      	b.n	8007446 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007444:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007454:	d117      	bne.n	8007486 <I2C_Master_ADDR+0x278>
 8007456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007458:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800745c:	d00b      	beq.n	8007476 <I2C_Master_ADDR+0x268>
 800745e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007460:	2b01      	cmp	r3, #1
 8007462:	d008      	beq.n	8007476 <I2C_Master_ADDR+0x268>
 8007464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007466:	2b08      	cmp	r3, #8
 8007468:	d005      	beq.n	8007476 <I2C_Master_ADDR+0x268>
 800746a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746c:	2b10      	cmp	r3, #16
 800746e:	d002      	beq.n	8007476 <I2C_Master_ADDR+0x268>
 8007470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007472:	2b20      	cmp	r3, #32
 8007474:	d107      	bne.n	8007486 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007484:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007486:	2300      	movs	r3, #0
 8007488:	617b      	str	r3, [r7, #20]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	617b      	str	r3, [r7, #20]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	617b      	str	r3, [r7, #20]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	e032      	b.n	8007504 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074ac:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074bc:	d117      	bne.n	80074ee <I2C_Master_ADDR+0x2e0>
 80074be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074c4:	d00b      	beq.n	80074de <I2C_Master_ADDR+0x2d0>
 80074c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d008      	beq.n	80074de <I2C_Master_ADDR+0x2d0>
 80074cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ce:	2b08      	cmp	r3, #8
 80074d0:	d005      	beq.n	80074de <I2C_Master_ADDR+0x2d0>
 80074d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d4:	2b10      	cmp	r3, #16
 80074d6:	d002      	beq.n	80074de <I2C_Master_ADDR+0x2d0>
 80074d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074da:	2b20      	cmp	r3, #32
 80074dc:	d107      	bne.n	80074ee <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074ec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ee:	2300      	movs	r3, #0
 80074f0:	613b      	str	r3, [r7, #16]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	613b      	str	r3, [r7, #16]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	613b      	str	r3, [r7, #16]
 8007502:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800750a:	e00b      	b.n	8007524 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800750c:	2300      	movs	r3, #0
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	60fb      	str	r3, [r7, #12]
 8007520:	68fb      	ldr	r3, [r7, #12]
}
 8007522:	e7ff      	b.n	8007524 <I2C_Master_ADDR+0x316>
 8007524:	bf00      	nop
 8007526:	3744      	adds	r7, #68	; 0x44
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800753e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007544:	b29b      	uxth	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d02b      	beq.n	80075a2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	781a      	ldrb	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007564:	b29b      	uxth	r3, r3
 8007566:	3b01      	subs	r3, #1
 8007568:	b29a      	uxth	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007572:	b29b      	uxth	r3, r3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d114      	bne.n	80075a2 <I2C_SlaveTransmit_TXE+0x72>
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	2b29      	cmp	r3, #41	; 0x29
 800757c:	d111      	bne.n	80075a2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800758c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2221      	movs	r2, #33	; 0x21
 8007592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2228      	movs	r2, #40	; 0x28
 8007598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7ff fa04 	bl	80069aa <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80075a2:	bf00      	nop
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b083      	sub	sp, #12
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d011      	beq.n	80075e0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	781a      	ldrb	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3b01      	subs	r3, #1
 80075da:	b29a      	uxth	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007600:	b29b      	uxth	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d02c      	beq.n	8007660 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	691a      	ldr	r2, [r3, #16]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007610:	b2d2      	uxtb	r2, r2
 8007612:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	1c5a      	adds	r2, r3, #1
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007622:	b29b      	uxth	r3, r3
 8007624:	3b01      	subs	r3, #1
 8007626:	b29a      	uxth	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007630:	b29b      	uxth	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d114      	bne.n	8007660 <I2C_SlaveReceive_RXNE+0x74>
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	2b2a      	cmp	r3, #42	; 0x2a
 800763a:	d111      	bne.n	8007660 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800764a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2222      	movs	r2, #34	; 0x22
 8007650:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2228      	movs	r2, #40	; 0x28
 8007656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7ff f9af 	bl	80069be <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007660:	bf00      	nop
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007674:	b29b      	uxth	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d012      	beq.n	80076a0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	691a      	ldr	r2, [r3, #16]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	b2d2      	uxtb	r2, r2
 8007686:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	b29a      	uxth	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80076b6:	2300      	movs	r3, #0
 80076b8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80076c6:	2b28      	cmp	r3, #40	; 0x28
 80076c8:	d127      	bne.n	800771a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076d8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	089b      	lsrs	r3, r3, #2
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80076e6:	2301      	movs	r3, #1
 80076e8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	09db      	lsrs	r3, r3, #7
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d103      	bne.n	80076fe <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	81bb      	strh	r3, [r7, #12]
 80076fc:	e002      	b.n	8007704 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800770c:	89ba      	ldrh	r2, [r7, #12]
 800770e:	7bfb      	ldrb	r3, [r7, #15]
 8007710:	4619      	mov	r1, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7ff f95d 	bl	80069d2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007718:	e008      	b.n	800772c <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f06f 0202 	mvn.w	r2, #2
 8007722:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800772c:	bf00      	nop
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007742:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007752:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007754:	2300      	movs	r3, #0
 8007756:	60bb      	str	r3, [r7, #8]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	60bb      	str	r3, [r7, #8]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f042 0201 	orr.w	r2, r2, #1
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007780:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800778c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007790:	d172      	bne.n	8007878 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007792:	7bfb      	ldrb	r3, [r7, #15]
 8007794:	2b22      	cmp	r3, #34	; 0x22
 8007796:	d002      	beq.n	800779e <I2C_Slave_STOPF+0x6a>
 8007798:	7bfb      	ldrb	r3, [r7, #15]
 800779a:	2b2a      	cmp	r3, #42	; 0x2a
 800779c:	d135      	bne.n	800780a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d005      	beq.n	80077c2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	f043 0204 	orr.w	r2, r3, #4
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fe f946 	bl	8005a68 <HAL_DMA_GetState>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d049      	beq.n	8007876 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e6:	4a69      	ldr	r2, [pc, #420]	; (800798c <I2C_Slave_STOPF+0x258>)
 80077e8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe f918 	bl	8005a24 <HAL_DMA_Abort_IT>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d03d      	beq.n	8007876 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007804:	4610      	mov	r0, r2
 8007806:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007808:	e035      	b.n	8007876 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	b29a      	uxth	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800781c:	b29b      	uxth	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d005      	beq.n	800782e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007826:	f043 0204 	orr.w	r2, r3, #4
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800783c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007842:	4618      	mov	r0, r3
 8007844:	f7fe f910 	bl	8005a68 <HAL_DMA_GetState>
 8007848:	4603      	mov	r3, r0
 800784a:	2b01      	cmp	r3, #1
 800784c:	d014      	beq.n	8007878 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007852:	4a4e      	ldr	r2, [pc, #312]	; (800798c <I2C_Slave_STOPF+0x258>)
 8007854:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800785a:	4618      	mov	r0, r3
 800785c:	f7fe f8e2 	bl	8005a24 <HAL_DMA_Abort_IT>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d008      	beq.n	8007878 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007870:	4610      	mov	r0, r2
 8007872:	4798      	blx	r3
 8007874:	e000      	b.n	8007878 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007876:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800787c:	b29b      	uxth	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d03e      	beq.n	8007900 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b04      	cmp	r3, #4
 800788e:	d112      	bne.n	80078b6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	691a      	ldr	r2, [r3, #16]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	b2d2      	uxtb	r2, r2
 800789c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a2:	1c5a      	adds	r2, r3, #1
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	3b01      	subs	r3, #1
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c0:	2b40      	cmp	r3, #64	; 0x40
 80078c2:	d112      	bne.n	80078ea <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	691a      	ldr	r2, [r3, #16]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	3b01      	subs	r3, #1
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d005      	beq.n	8007900 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f8:	f043 0204 	orr.w	r2, r3, #4
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007904:	2b00      	cmp	r3, #0
 8007906:	d003      	beq.n	8007910 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f843 	bl	8007994 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800790e:	e039      	b.n	8007984 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007910:	7bfb      	ldrb	r3, [r7, #15]
 8007912:	2b2a      	cmp	r3, #42	; 0x2a
 8007914:	d109      	bne.n	800792a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2228      	movs	r2, #40	; 0x28
 8007920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7ff f84a 	bl	80069be <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b28      	cmp	r3, #40	; 0x28
 8007934:	d111      	bne.n	800795a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a15      	ldr	r2, [pc, #84]	; (8007990 <I2C_Slave_STOPF+0x25c>)
 800793a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2220      	movs	r2, #32
 8007946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7ff f84b 	bl	80069ee <HAL_I2C_ListenCpltCallback>
}
 8007958:	e014      	b.n	8007984 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795e:	2b22      	cmp	r3, #34	; 0x22
 8007960:	d002      	beq.n	8007968 <I2C_Slave_STOPF+0x234>
 8007962:	7bfb      	ldrb	r3, [r7, #15]
 8007964:	2b22      	cmp	r3, #34	; 0x22
 8007966:	d10d      	bne.n	8007984 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2220      	movs	r2, #32
 8007972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7ff f81d 	bl	80069be <HAL_I2C_SlaveRxCpltCallback>
}
 8007984:	bf00      	nop
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	08007ecd 	.word	0x08007ecd
 8007990:	ffff0000 	.word	0xffff0000

08007994 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	2b10      	cmp	r3, #16
 80079b0:	d002      	beq.n	80079b8 <I2C_ITError+0x24>
 80079b2:	7bbb      	ldrb	r3, [r7, #14]
 80079b4:	2b40      	cmp	r3, #64	; 0x40
 80079b6:	d10a      	bne.n	80079ce <I2C_ITError+0x3a>
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	2b22      	cmp	r3, #34	; 0x22
 80079bc:	d107      	bne.n	80079ce <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079cc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80079d4:	2b28      	cmp	r3, #40	; 0x28
 80079d6:	d107      	bne.n	80079e8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2228      	movs	r2, #40	; 0x28
 80079e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80079e6:	e015      	b.n	8007a14 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079f6:	d00a      	beq.n	8007a0e <I2C_ITError+0x7a>
 80079f8:	7bfb      	ldrb	r3, [r7, #15]
 80079fa:	2b60      	cmp	r3, #96	; 0x60
 80079fc:	d007      	beq.n	8007a0e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2220      	movs	r2, #32
 8007a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a22:	d162      	bne.n	8007aea <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a32:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d020      	beq.n	8007a84 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a46:	4a6a      	ldr	r2, [pc, #424]	; (8007bf0 <I2C_ITError+0x25c>)
 8007a48:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fd ffe8 	bl	8005a24 <HAL_DMA_Abort_IT>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 8089 	beq.w	8007b6e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f022 0201 	bic.w	r2, r2, #1
 8007a6a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2220      	movs	r2, #32
 8007a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a7e:	4610      	mov	r0, r2
 8007a80:	4798      	blx	r3
 8007a82:	e074      	b.n	8007b6e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a88:	4a59      	ldr	r2, [pc, #356]	; (8007bf0 <I2C_ITError+0x25c>)
 8007a8a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fd ffc7 	bl	8005a24 <HAL_DMA_Abort_IT>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d068      	beq.n	8007b6e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa6:	2b40      	cmp	r3, #64	; 0x40
 8007aa8:	d10b      	bne.n	8007ac2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	691a      	ldr	r2, [r3, #16]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab4:	b2d2      	uxtb	r2, r2
 8007ab6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f022 0201 	bic.w	r2, r2, #1
 8007ad0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	4798      	blx	r3
 8007ae8:	e041      	b.n	8007b6e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b60      	cmp	r3, #96	; 0x60
 8007af4:	d125      	bne.n	8007b42 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2220      	movs	r2, #32
 8007afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0e:	2b40      	cmp	r3, #64	; 0x40
 8007b10:	d10b      	bne.n	8007b2a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	691a      	ldr	r2, [r3, #16]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1c:	b2d2      	uxtb	r2, r2
 8007b1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	1c5a      	adds	r2, r3, #1
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 0201 	bic.w	r2, r2, #1
 8007b38:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7fe ff7f 	bl	8006a3e <HAL_I2C_AbortCpltCallback>
 8007b40:	e015      	b.n	8007b6e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b4c:	2b40      	cmp	r3, #64	; 0x40
 8007b4e:	d10b      	bne.n	8007b68 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	691a      	ldr	r2, [r3, #16]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5a:	b2d2      	uxtb	r2, r2
 8007b5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b62:	1c5a      	adds	r2, r3, #1
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7fe ff5e 	bl	8006a2a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b72:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10e      	bne.n	8007b9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d109      	bne.n	8007b9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d104      	bne.n	8007b9c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d007      	beq.n	8007bac <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007baa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bb2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb8:	f003 0304 	and.w	r3, r3, #4
 8007bbc:	2b04      	cmp	r3, #4
 8007bbe:	d113      	bne.n	8007be8 <I2C_ITError+0x254>
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
 8007bc2:	2b28      	cmp	r3, #40	; 0x28
 8007bc4:	d110      	bne.n	8007be8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a0a      	ldr	r2, [pc, #40]	; (8007bf4 <I2C_ITError+0x260>)
 8007bca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f7fe ff03 	bl	80069ee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007be8:	bf00      	nop
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	08007ecd 	.word	0x08007ecd
 8007bf4:	ffff0000 	.word	0xffff0000

08007bf8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af02      	add	r7, sp, #8
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	607a      	str	r2, [r7, #4]
 8007c02:	603b      	str	r3, [r7, #0]
 8007c04:	460b      	mov	r3, r1
 8007c06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	2b08      	cmp	r3, #8
 8007c12:	d006      	beq.n	8007c22 <I2C_MasterRequestWrite+0x2a>
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d003      	beq.n	8007c22 <I2C_MasterRequestWrite+0x2a>
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c20:	d108      	bne.n	8007c34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c30:	601a      	str	r2, [r3, #0]
 8007c32:	e00b      	b.n	8007c4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c38:	2b12      	cmp	r3, #18
 8007c3a:	d107      	bne.n	8007c4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f000 f9df 	bl	800801c <I2C_WaitOnFlagUntilTimeout>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00d      	beq.n	8007c80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c72:	d103      	bne.n	8007c7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e035      	b.n	8007cec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c88:	d108      	bne.n	8007c9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c8a:	897b      	ldrh	r3, [r7, #10]
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	461a      	mov	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c98:	611a      	str	r2, [r3, #16]
 8007c9a:	e01b      	b.n	8007cd4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007c9c:	897b      	ldrh	r3, [r7, #10]
 8007c9e:	11db      	asrs	r3, r3, #7
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	f003 0306 	and.w	r3, r3, #6
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f063 030f 	orn	r3, r3, #15
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	490e      	ldr	r1, [pc, #56]	; (8007cf4 <I2C_MasterRequestWrite+0xfc>)
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 fa05 	bl	80080ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e010      	b.n	8007cec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007cca:	897b      	ldrh	r3, [r7, #10]
 8007ccc:	b2da      	uxtb	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	4907      	ldr	r1, [pc, #28]	; (8007cf8 <I2C_MasterRequestWrite+0x100>)
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 f9f5 	bl	80080ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e000      	b.n	8007cec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	00010008 	.word	0x00010008
 8007cf8:	00010002 	.word	0x00010002

08007cfc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b088      	sub	sp, #32
 8007d00:	af02      	add	r7, sp, #8
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	4608      	mov	r0, r1
 8007d06:	4611      	mov	r1, r2
 8007d08:	461a      	mov	r2, r3
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	817b      	strh	r3, [r7, #10]
 8007d0e:	460b      	mov	r3, r1
 8007d10:	813b      	strh	r3, [r7, #8]
 8007d12:	4613      	mov	r3, r2
 8007d14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 f96a 	bl	800801c <I2C_WaitOnFlagUntilTimeout>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00d      	beq.n	8007d6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d5c:	d103      	bne.n	8007d66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e0aa      	b.n	8007ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d6a:	897b      	ldrh	r3, [r7, #10]
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	461a      	mov	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	6a3a      	ldr	r2, [r7, #32]
 8007d7e:	4952      	ldr	r1, [pc, #328]	; (8007ec8 <I2C_RequestMemoryRead+0x1cc>)
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 f9a2 	bl	80080ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e097      	b.n	8007ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d90:	2300      	movs	r3, #0
 8007d92:	617b      	str	r3, [r7, #20]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	695b      	ldr	r3, [r3, #20]
 8007d9a:	617b      	str	r3, [r7, #20]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	617b      	str	r3, [r7, #20]
 8007da4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007da8:	6a39      	ldr	r1, [r7, #32]
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 fa0c 	bl	80081c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00d      	beq.n	8007dd2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dba:	2b04      	cmp	r3, #4
 8007dbc:	d107      	bne.n	8007dce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e076      	b.n	8007ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007dd2:	88fb      	ldrh	r3, [r7, #6]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d105      	bne.n	8007de4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007dd8:	893b      	ldrh	r3, [r7, #8]
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	611a      	str	r2, [r3, #16]
 8007de2:	e021      	b.n	8007e28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007de4:	893b      	ldrh	r3, [r7, #8]
 8007de6:	0a1b      	lsrs	r3, r3, #8
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df4:	6a39      	ldr	r1, [r7, #32]
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f000 f9e6 	bl	80081c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00d      	beq.n	8007e1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e06:	2b04      	cmp	r3, #4
 8007e08:	d107      	bne.n	8007e1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e050      	b.n	8007ec0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e1e:	893b      	ldrh	r3, [r7, #8]
 8007e20:	b2da      	uxtb	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e2a:	6a39      	ldr	r1, [r7, #32]
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f000 f9cb 	bl	80081c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00d      	beq.n	8007e54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	d107      	bne.n	8007e50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e035      	b.n	8007ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	6a3b      	ldr	r3, [r7, #32]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 f8d3 	bl	800801c <I2C_WaitOnFlagUntilTimeout>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00d      	beq.n	8007e98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e8a:	d103      	bne.n	8007e94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e013      	b.n	8007ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e98:	897b      	ldrh	r3, [r7, #10]
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	f043 0301 	orr.w	r3, r3, #1
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	6a3a      	ldr	r2, [r7, #32]
 8007eac:	4906      	ldr	r1, [pc, #24]	; (8007ec8 <I2C_RequestMemoryRead+0x1cc>)
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 f90b 	bl	80080ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e000      	b.n	8007ec0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	00010002 	.word	0x00010002

08007ecc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007edc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ee4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ee6:	4b4b      	ldr	r3, [pc, #300]	; (8008014 <I2C_DMAAbort+0x148>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	08db      	lsrs	r3, r3, #3
 8007eec:	4a4a      	ldr	r2, [pc, #296]	; (8008018 <I2C_DMAAbort+0x14c>)
 8007eee:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef2:	0a1a      	lsrs	r2, r3, #8
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	00da      	lsls	r2, r3, #3
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d106      	bne.n	8007f14 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0a:	f043 0220 	orr.w	r2, r3, #32
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007f12:	e00a      	b.n	8007f2a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	3b01      	subs	r3, #1
 8007f18:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f28:	d0ea      	beq.n	8007f00 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f36:	2200      	movs	r2, #0
 8007f38:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f46:	2200      	movs	r2, #0
 8007f48:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f58:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d003      	beq.n	8007f70 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d003      	beq.n	8007f80 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f022 0201 	bic.w	r2, r2, #1
 8007f8e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b60      	cmp	r3, #96	; 0x60
 8007f9a:	d10e      	bne.n	8007fba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007fb2:	6978      	ldr	r0, [r7, #20]
 8007fb4:	f7fe fd43 	bl	8006a3e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007fb8:	e027      	b.n	800800a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fba:	7cfb      	ldrb	r3, [r7, #19]
 8007fbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007fc0:	2b28      	cmp	r3, #40	; 0x28
 8007fc2:	d117      	bne.n	8007ff4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f042 0201 	orr.w	r2, r2, #1
 8007fd2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fe2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2228      	movs	r2, #40	; 0x28
 8007fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007ff2:	e007      	b.n	8008004 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008004:	6978      	ldr	r0, [r7, #20]
 8008006:	f7fe fd10 	bl	8006a2a <HAL_I2C_ErrorCallback>
}
 800800a:	bf00      	nop
 800800c:	3718      	adds	r7, #24
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	20000008 	.word	0x20000008
 8008018:	14f8b589 	.word	0x14f8b589

0800801c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	4613      	mov	r3, r2
 800802a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800802c:	e025      	b.n	800807a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008034:	d021      	beq.n	800807a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008036:	f7fc fd89 	bl	8004b4c <HAL_GetTick>
 800803a:	4602      	mov	r2, r0
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	429a      	cmp	r2, r3
 8008044:	d302      	bcc.n	800804c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d116      	bne.n	800807a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2220      	movs	r2, #32
 8008056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008066:	f043 0220 	orr.w	r2, r3, #32
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e023      	b.n	80080c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	0c1b      	lsrs	r3, r3, #16
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b01      	cmp	r3, #1
 8008082:	d10d      	bne.n	80080a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	43da      	mvns	r2, r3
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	4013      	ands	r3, r2
 8008090:	b29b      	uxth	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	bf0c      	ite	eq
 8008096:	2301      	moveq	r3, #1
 8008098:	2300      	movne	r3, #0
 800809a:	b2db      	uxtb	r3, r3
 800809c:	461a      	mov	r2, r3
 800809e:	e00c      	b.n	80080ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	43da      	mvns	r2, r3
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	4013      	ands	r3, r2
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	bf0c      	ite	eq
 80080b2:	2301      	moveq	r3, #1
 80080b4:	2300      	movne	r3, #0
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	461a      	mov	r2, r3
 80080ba:	79fb      	ldrb	r3, [r7, #7]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d0b6      	beq.n	800802e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	60b9      	str	r1, [r7, #8]
 80080d4:	607a      	str	r2, [r7, #4]
 80080d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80080d8:	e051      	b.n	800817e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080e8:	d123      	bne.n	8008132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008102:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2220      	movs	r2, #32
 800810e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811e:	f043 0204 	orr.w	r2, r3, #4
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e046      	b.n	80081c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008138:	d021      	beq.n	800817e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800813a:	f7fc fd07 	bl	8004b4c <HAL_GetTick>
 800813e:	4602      	mov	r2, r0
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	429a      	cmp	r2, r3
 8008148:	d302      	bcc.n	8008150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d116      	bne.n	800817e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2220      	movs	r2, #32
 800815a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	f043 0220 	orr.w	r2, r3, #32
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e020      	b.n	80081c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	0c1b      	lsrs	r3, r3, #16
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b01      	cmp	r3, #1
 8008186:	d10c      	bne.n	80081a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	43da      	mvns	r2, r3
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	4013      	ands	r3, r2
 8008194:	b29b      	uxth	r3, r3
 8008196:	2b00      	cmp	r3, #0
 8008198:	bf14      	ite	ne
 800819a:	2301      	movne	r3, #1
 800819c:	2300      	moveq	r3, #0
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	e00b      	b.n	80081ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	43da      	mvns	r2, r3
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	4013      	ands	r3, r2
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	bf14      	ite	ne
 80081b4:	2301      	movne	r3, #1
 80081b6:	2300      	moveq	r3, #0
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d18d      	bne.n	80080da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081d4:	e02d      	b.n	8008232 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f000 f900 	bl	80083dc <I2C_IsAcknowledgeFailed>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e02d      	b.n	8008242 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081ec:	d021      	beq.n	8008232 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081ee:	f7fc fcad 	bl	8004b4c <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d302      	bcc.n	8008204 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d116      	bne.n	8008232 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2220      	movs	r2, #32
 800820e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	f043 0220 	orr.w	r2, r3, #32
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e007      	b.n	8008242 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	695b      	ldr	r3, [r3, #20]
 8008238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800823c:	2b80      	cmp	r3, #128	; 0x80
 800823e:	d1ca      	bne.n	80081d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b084      	sub	sp, #16
 800824e:	af00      	add	r7, sp, #0
 8008250:	60f8      	str	r0, [r7, #12]
 8008252:	60b9      	str	r1, [r7, #8]
 8008254:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008256:	e02d      	b.n	80082b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f000 f8bf 	bl	80083dc <I2C_IsAcknowledgeFailed>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e02d      	b.n	80082c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800826e:	d021      	beq.n	80082b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008270:	f7fc fc6c 	bl	8004b4c <HAL_GetTick>
 8008274:	4602      	mov	r2, r0
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	429a      	cmp	r2, r3
 800827e:	d302      	bcc.n	8008286 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d116      	bne.n	80082b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2220      	movs	r2, #32
 8008290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a0:	f043 0220 	orr.w	r2, r3, #32
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e007      	b.n	80082c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	f003 0304 	and.w	r3, r3, #4
 80082be:	2b04      	cmp	r3, #4
 80082c0:	d1ca      	bne.n	8008258 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082d4:	2300      	movs	r3, #0
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80082d8:	4b13      	ldr	r3, [pc, #76]	; (8008328 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	08db      	lsrs	r3, r3, #3
 80082de:	4a13      	ldr	r2, [pc, #76]	; (800832c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80082e0:	fba2 2303 	umull	r2, r3, r2, r3
 80082e4:	0a1a      	lsrs	r2, r3, #8
 80082e6:	4613      	mov	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	4413      	add	r3, r2
 80082ec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3b01      	subs	r3, #1
 80082f2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d107      	bne.n	800830a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fe:	f043 0220 	orr.w	r2, r3, #32
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e008      	b.n	800831c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008318:	d0e9      	beq.n	80082ee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	20000008 	.word	0x20000008
 800832c:	14f8b589 	.word	0x14f8b589

08008330 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800833c:	e042      	b.n	80083c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	695b      	ldr	r3, [r3, #20]
 8008344:	f003 0310 	and.w	r3, r3, #16
 8008348:	2b10      	cmp	r3, #16
 800834a:	d119      	bne.n	8008380 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f06f 0210 	mvn.w	r2, #16
 8008354:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2220      	movs	r2, #32
 8008360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e029      	b.n	80083d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008380:	f7fc fbe4 	bl	8004b4c <HAL_GetTick>
 8008384:	4602      	mov	r2, r0
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	429a      	cmp	r2, r3
 800838e:	d302      	bcc.n	8008396 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d116      	bne.n	80083c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2220      	movs	r2, #32
 80083a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b0:	f043 0220 	orr.w	r2, r3, #32
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e007      	b.n	80083d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ce:	2b40      	cmp	r3, #64	; 0x40
 80083d0:	d1b5      	bne.n	800833e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083f2:	d11b      	bne.n	800842c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80083fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2220      	movs	r2, #32
 8008408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008418:	f043 0204 	orr.w	r2, r3, #4
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e000      	b.n	800842e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800843a:	b480      	push	{r7}
 800843c:	b083      	sub	sp, #12
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008446:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800844a:	d103      	bne.n	8008454 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008452:	e007      	b.n	8008464 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008458:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800845c:	d102      	bne.n	8008464 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2208      	movs	r2, #8
 8008462:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008472:	b08f      	sub	sp, #60	; 0x3c
 8008474:	af0a      	add	r7, sp, #40	; 0x28
 8008476:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e10f      	b.n	80086a2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800848e:	b2db      	uxtb	r3, r3
 8008490:	2b00      	cmp	r3, #0
 8008492:	d106      	bne.n	80084a2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f006 fc41 	bl	800ed24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2203      	movs	r2, #3
 80084a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d102      	bne.n	80084bc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f002 f92c 	bl	800a71e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	603b      	str	r3, [r7, #0]
 80084cc:	687e      	ldr	r6, [r7, #4]
 80084ce:	466d      	mov	r5, sp
 80084d0:	f106 0410 	add.w	r4, r6, #16
 80084d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80084e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80084e4:	1d33      	adds	r3, r6, #4
 80084e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084e8:	6838      	ldr	r0, [r7, #0]
 80084ea:	f002 f803 	bl	800a4f4 <USB_CoreInit>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d005      	beq.n	8008500 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2202      	movs	r2, #2
 80084f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e0d0      	b.n	80086a2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2100      	movs	r1, #0
 8008506:	4618      	mov	r0, r3
 8008508:	f002 f91a 	bl	800a740 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800850c:	2300      	movs	r3, #0
 800850e:	73fb      	strb	r3, [r7, #15]
 8008510:	e04a      	b.n	80085a8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008512:	7bfa      	ldrb	r2, [r7, #15]
 8008514:	6879      	ldr	r1, [r7, #4]
 8008516:	4613      	mov	r3, r2
 8008518:	00db      	lsls	r3, r3, #3
 800851a:	1a9b      	subs	r3, r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	440b      	add	r3, r1
 8008520:	333d      	adds	r3, #61	; 0x3d
 8008522:	2201      	movs	r2, #1
 8008524:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008526:	7bfa      	ldrb	r2, [r7, #15]
 8008528:	6879      	ldr	r1, [r7, #4]
 800852a:	4613      	mov	r3, r2
 800852c:	00db      	lsls	r3, r3, #3
 800852e:	1a9b      	subs	r3, r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	440b      	add	r3, r1
 8008534:	333c      	adds	r3, #60	; 0x3c
 8008536:	7bfa      	ldrb	r2, [r7, #15]
 8008538:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800853a:	7bfa      	ldrb	r2, [r7, #15]
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	b298      	uxth	r0, r3
 8008540:	6879      	ldr	r1, [r7, #4]
 8008542:	4613      	mov	r3, r2
 8008544:	00db      	lsls	r3, r3, #3
 8008546:	1a9b      	subs	r3, r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	440b      	add	r3, r1
 800854c:	3342      	adds	r3, #66	; 0x42
 800854e:	4602      	mov	r2, r0
 8008550:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008552:	7bfa      	ldrb	r2, [r7, #15]
 8008554:	6879      	ldr	r1, [r7, #4]
 8008556:	4613      	mov	r3, r2
 8008558:	00db      	lsls	r3, r3, #3
 800855a:	1a9b      	subs	r3, r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	440b      	add	r3, r1
 8008560:	333f      	adds	r3, #63	; 0x3f
 8008562:	2200      	movs	r2, #0
 8008564:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008566:	7bfa      	ldrb	r2, [r7, #15]
 8008568:	6879      	ldr	r1, [r7, #4]
 800856a:	4613      	mov	r3, r2
 800856c:	00db      	lsls	r3, r3, #3
 800856e:	1a9b      	subs	r3, r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	440b      	add	r3, r1
 8008574:	3344      	adds	r3, #68	; 0x44
 8008576:	2200      	movs	r2, #0
 8008578:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800857a:	7bfa      	ldrb	r2, [r7, #15]
 800857c:	6879      	ldr	r1, [r7, #4]
 800857e:	4613      	mov	r3, r2
 8008580:	00db      	lsls	r3, r3, #3
 8008582:	1a9b      	subs	r3, r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	440b      	add	r3, r1
 8008588:	3348      	adds	r3, #72	; 0x48
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800858e:	7bfa      	ldrb	r2, [r7, #15]
 8008590:	6879      	ldr	r1, [r7, #4]
 8008592:	4613      	mov	r3, r2
 8008594:	00db      	lsls	r3, r3, #3
 8008596:	1a9b      	subs	r3, r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	440b      	add	r3, r1
 800859c:	3350      	adds	r3, #80	; 0x50
 800859e:	2200      	movs	r2, #0
 80085a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	3301      	adds	r3, #1
 80085a6:	73fb      	strb	r3, [r7, #15]
 80085a8:	7bfa      	ldrb	r2, [r7, #15]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d3af      	bcc.n	8008512 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085b2:	2300      	movs	r3, #0
 80085b4:	73fb      	strb	r3, [r7, #15]
 80085b6:	e044      	b.n	8008642 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80085b8:	7bfa      	ldrb	r2, [r7, #15]
 80085ba:	6879      	ldr	r1, [r7, #4]
 80085bc:	4613      	mov	r3, r2
 80085be:	00db      	lsls	r3, r3, #3
 80085c0:	1a9b      	subs	r3, r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	440b      	add	r3, r1
 80085c6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80085ca:	2200      	movs	r2, #0
 80085cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80085ce:	7bfa      	ldrb	r2, [r7, #15]
 80085d0:	6879      	ldr	r1, [r7, #4]
 80085d2:	4613      	mov	r3, r2
 80085d4:	00db      	lsls	r3, r3, #3
 80085d6:	1a9b      	subs	r3, r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	440b      	add	r3, r1
 80085dc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80085e0:	7bfa      	ldrb	r2, [r7, #15]
 80085e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80085e4:	7bfa      	ldrb	r2, [r7, #15]
 80085e6:	6879      	ldr	r1, [r7, #4]
 80085e8:	4613      	mov	r3, r2
 80085ea:	00db      	lsls	r3, r3, #3
 80085ec:	1a9b      	subs	r3, r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	440b      	add	r3, r1
 80085f2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80085f6:	2200      	movs	r2, #0
 80085f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80085fa:	7bfa      	ldrb	r2, [r7, #15]
 80085fc:	6879      	ldr	r1, [r7, #4]
 80085fe:	4613      	mov	r3, r2
 8008600:	00db      	lsls	r3, r3, #3
 8008602:	1a9b      	subs	r3, r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	440b      	add	r3, r1
 8008608:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800860c:	2200      	movs	r2, #0
 800860e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008610:	7bfa      	ldrb	r2, [r7, #15]
 8008612:	6879      	ldr	r1, [r7, #4]
 8008614:	4613      	mov	r3, r2
 8008616:	00db      	lsls	r3, r3, #3
 8008618:	1a9b      	subs	r3, r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	440b      	add	r3, r1
 800861e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008622:	2200      	movs	r2, #0
 8008624:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008626:	7bfa      	ldrb	r2, [r7, #15]
 8008628:	6879      	ldr	r1, [r7, #4]
 800862a:	4613      	mov	r3, r2
 800862c:	00db      	lsls	r3, r3, #3
 800862e:	1a9b      	subs	r3, r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	440b      	add	r3, r1
 8008634:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008638:	2200      	movs	r2, #0
 800863a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800863c:	7bfb      	ldrb	r3, [r7, #15]
 800863e:	3301      	adds	r3, #1
 8008640:	73fb      	strb	r3, [r7, #15]
 8008642:	7bfa      	ldrb	r2, [r7, #15]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	429a      	cmp	r2, r3
 800864a:	d3b5      	bcc.n	80085b8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	603b      	str	r3, [r7, #0]
 8008652:	687e      	ldr	r6, [r7, #4]
 8008654:	466d      	mov	r5, sp
 8008656:	f106 0410 	add.w	r4, r6, #16
 800865a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800865c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800865e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008662:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008666:	e885 0003 	stmia.w	r5, {r0, r1}
 800866a:	1d33      	adds	r3, r6, #4
 800866c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800866e:	6838      	ldr	r0, [r7, #0]
 8008670:	f002 f890 	bl	800a794 <USB_DevInit>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d005      	beq.n	8008686 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2202      	movs	r2, #2
 800867e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e00d      	b.n	80086a2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4618      	mov	r0, r3
 800869c:	f003 f8d8 	bl	800b850 <USB_DevDisconnect>

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b084      	sub	sp, #16
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d101      	bne.n	80086c6 <HAL_PCD_Start+0x1c>
 80086c2:	2302      	movs	r3, #2
 80086c4:	e020      	b.n	8008708 <HAL_PCD_Start+0x5e>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d109      	bne.n	80086ea <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d005      	beq.n	80086ea <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f002 f804 	bl	800a6fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f003 f888 	bl	800b80e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008710:	b590      	push	{r4, r7, lr}
 8008712:	b08d      	sub	sp, #52	; 0x34
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4618      	mov	r0, r3
 8008728:	f003 f946 	bl	800b9b8 <USB_GetMode>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	f040 839d 	bne.w	8008e6e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4618      	mov	r0, r3
 800873a:	f003 f8aa 	bl	800b892 <USB_ReadInterrupts>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 8393 	beq.w	8008e6c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4618      	mov	r0, r3
 800874c:	f003 f8a1 	bl	800b892 <USB_ReadInterrupts>
 8008750:	4603      	mov	r3, r0
 8008752:	f003 0302 	and.w	r3, r3, #2
 8008756:	2b02      	cmp	r3, #2
 8008758:	d107      	bne.n	800876a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	695a      	ldr	r2, [r3, #20]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f002 0202 	and.w	r2, r2, #2
 8008768:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4618      	mov	r0, r3
 8008770:	f003 f88f 	bl	800b892 <USB_ReadInterrupts>
 8008774:	4603      	mov	r3, r0
 8008776:	f003 0310 	and.w	r3, r3, #16
 800877a:	2b10      	cmp	r3, #16
 800877c:	d161      	bne.n	8008842 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	699a      	ldr	r2, [r3, #24]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f022 0210 	bic.w	r2, r2, #16
 800878c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	f003 020f 	and.w	r2, r3, #15
 800879a:	4613      	mov	r3, r2
 800879c:	00db      	lsls	r3, r3, #3
 800879e:	1a9b      	subs	r3, r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	4413      	add	r3, r2
 80087aa:	3304      	adds	r3, #4
 80087ac:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	0c5b      	lsrs	r3, r3, #17
 80087b2:	f003 030f 	and.w	r3, r3, #15
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d124      	bne.n	8008804 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80087ba:	69ba      	ldr	r2, [r7, #24]
 80087bc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80087c0:	4013      	ands	r3, r2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d035      	beq.n	8008832 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	091b      	lsrs	r3, r3, #4
 80087ce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80087d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	461a      	mov	r2, r3
 80087d8:	6a38      	ldr	r0, [r7, #32]
 80087da:	f002 fef5 	bl	800b5c8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	68da      	ldr	r2, [r3, #12]
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	091b      	lsrs	r3, r3, #4
 80087e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087ea:	441a      	add	r2, r3
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	699a      	ldr	r2, [r3, #24]
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	091b      	lsrs	r3, r3, #4
 80087f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087fc:	441a      	add	r2, r3
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	619a      	str	r2, [r3, #24]
 8008802:	e016      	b.n	8008832 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	0c5b      	lsrs	r3, r3, #17
 8008808:	f003 030f 	and.w	r3, r3, #15
 800880c:	2b06      	cmp	r3, #6
 800880e:	d110      	bne.n	8008832 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008816:	2208      	movs	r2, #8
 8008818:	4619      	mov	r1, r3
 800881a:	6a38      	ldr	r0, [r7, #32]
 800881c:	f002 fed4 	bl	800b5c8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	699a      	ldr	r2, [r3, #24]
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	091b      	lsrs	r3, r3, #4
 8008828:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800882c:	441a      	add	r2, r3
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	699a      	ldr	r2, [r3, #24]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f042 0210 	orr.w	r2, r2, #16
 8008840:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4618      	mov	r0, r3
 8008848:	f003 f823 	bl	800b892 <USB_ReadInterrupts>
 800884c:	4603      	mov	r3, r0
 800884e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008852:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008856:	d16e      	bne.n	8008936 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4618      	mov	r0, r3
 8008862:	f003 f829 	bl	800b8b8 <USB_ReadDevAllOutEpInterrupt>
 8008866:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008868:	e062      	b.n	8008930 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800886a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886c:	f003 0301 	and.w	r3, r3, #1
 8008870:	2b00      	cmp	r3, #0
 8008872:	d057      	beq.n	8008924 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800887a:	b2d2      	uxtb	r2, r2
 800887c:	4611      	mov	r1, r2
 800887e:	4618      	mov	r0, r3
 8008880:	f003 f84e 	bl	800b920 <USB_ReadDevOutEPInterrupt>
 8008884:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	f003 0301 	and.w	r3, r3, #1
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00c      	beq.n	80088aa <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	015a      	lsls	r2, r3, #5
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	4413      	add	r3, r2
 8008898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800889c:	461a      	mov	r2, r3
 800889e:	2301      	movs	r3, #1
 80088a0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80088a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fdb1 	bl	800940c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	f003 0308 	and.w	r3, r3, #8
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00c      	beq.n	80088ce <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b6:	015a      	lsls	r2, r3, #5
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	4413      	add	r3, r2
 80088bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088c0:	461a      	mov	r2, r3
 80088c2:	2308      	movs	r3, #8
 80088c4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80088c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 feab 	bl	8009624 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	f003 0310 	and.w	r3, r3, #16
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d008      	beq.n	80088ea <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e4:	461a      	mov	r2, r3
 80088e6:	2310      	movs	r3, #16
 80088e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	f003 0320 	and.w	r3, r3, #32
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d008      	beq.n	8008906 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008900:	461a      	mov	r2, r3
 8008902:	2320      	movs	r3, #32
 8008904:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d009      	beq.n	8008924 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891c:	461a      	mov	r2, r3
 800891e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008922:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	3301      	adds	r3, #1
 8008928:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800892a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892c:	085b      	lsrs	r3, r3, #1
 800892e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	2b00      	cmp	r3, #0
 8008934:	d199      	bne.n	800886a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4618      	mov	r0, r3
 800893c:	f002 ffa9 	bl	800b892 <USB_ReadInterrupts>
 8008940:	4603      	mov	r3, r0
 8008942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008946:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800894a:	f040 80c0 	bne.w	8008ace <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4618      	mov	r0, r3
 8008954:	f002 ffca 	bl	800b8ec <USB_ReadDevAllInEpInterrupt>
 8008958:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800895a:	2300      	movs	r3, #0
 800895c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800895e:	e0b2      	b.n	8008ac6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 80a7 	beq.w	8008aba <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008972:	b2d2      	uxtb	r2, r2
 8008974:	4611      	mov	r1, r2
 8008976:	4618      	mov	r0, r3
 8008978:	f002 fff0 	bl	800b95c <USB_ReadDevInEPInterrupt>
 800897c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	2b00      	cmp	r3, #0
 8008986:	d057      	beq.n	8008a38 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	f003 030f 	and.w	r3, r3, #15
 800898e:	2201      	movs	r2, #1
 8008990:	fa02 f303 	lsl.w	r3, r2, r3
 8008994:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800899c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	43db      	mvns	r3, r3
 80089a2:	69f9      	ldr	r1, [r7, #28]
 80089a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089a8:	4013      	ands	r3, r2
 80089aa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	015a      	lsls	r2, r3, #5
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b8:	461a      	mov	r2, r3
 80089ba:	2301      	movs	r3, #1
 80089bc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d132      	bne.n	8008a2c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80089c6:	6879      	ldr	r1, [r7, #4]
 80089c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ca:	4613      	mov	r3, r2
 80089cc:	00db      	lsls	r3, r3, #3
 80089ce:	1a9b      	subs	r3, r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	440b      	add	r3, r1
 80089d4:	3348      	adds	r3, #72	; 0x48
 80089d6:	6819      	ldr	r1, [r3, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089dc:	4613      	mov	r3, r2
 80089de:	00db      	lsls	r3, r3, #3
 80089e0:	1a9b      	subs	r3, r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4403      	add	r3, r0
 80089e6:	3344      	adds	r3, #68	; 0x44
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4419      	add	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f0:	4613      	mov	r3, r2
 80089f2:	00db      	lsls	r3, r3, #3
 80089f4:	1a9b      	subs	r3, r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4403      	add	r3, r0
 80089fa:	3348      	adds	r3, #72	; 0x48
 80089fc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80089fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d113      	bne.n	8008a2c <HAL_PCD_IRQHandler+0x31c>
 8008a04:	6879      	ldr	r1, [r7, #4]
 8008a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a08:	4613      	mov	r3, r2
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	1a9b      	subs	r3, r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	440b      	add	r3, r1
 8008a12:	3350      	adds	r3, #80	; 0x50
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d108      	bne.n	8008a2c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6818      	ldr	r0, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008a24:	461a      	mov	r2, r3
 8008a26:	2101      	movs	r1, #1
 8008a28:	f002 fff8 	bl	800ba1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f006 f9f7 	bl	800ee26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f003 0308 	and.w	r3, r3, #8
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d008      	beq.n	8008a54 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a44:	015a      	lsls	r2, r3, #5
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	4413      	add	r3, r2
 8008a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a4e:	461a      	mov	r2, r3
 8008a50:	2308      	movs	r3, #8
 8008a52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f003 0310 	and.w	r3, r3, #16
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d008      	beq.n	8008a70 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	2310      	movs	r3, #16
 8008a6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d008      	beq.n	8008a8c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	015a      	lsls	r2, r3, #5
 8008a7e:	69fb      	ldr	r3, [r7, #28]
 8008a80:	4413      	add	r3, r2
 8008a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a86:	461a      	mov	r2, r3
 8008a88:	2340      	movs	r3, #64	; 0x40
 8008a8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	f003 0302 	and.w	r3, r3, #2
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d008      	beq.n	8008aa8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d003      	beq.n	8008aba <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008ab2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fc1b 	bl	80092f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	3301      	adds	r3, #1
 8008abe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac2:	085b      	lsrs	r3, r3, #1
 8008ac4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f47f af49 	bne.w	8008960 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f002 fedd 	bl	800b892 <USB_ReadInterrupts>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ae2:	d122      	bne.n	8008b2a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	69fa      	ldr	r2, [r7, #28]
 8008aee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008af2:	f023 0301 	bic.w	r3, r3, #1
 8008af6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d108      	bne.n	8008b14 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fe27 	bl	8009760 <HAL_PCDEx_LPM_Callback>
 8008b12:	e002      	b.n	8008b1a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f006 f9fd 	bl	800ef14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	695a      	ldr	r2, [r3, #20]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008b28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f002 feaf 	bl	800b892 <USB_ReadInterrupts>
 8008b34:	4603      	mov	r3, r0
 8008b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b3e:	d112      	bne.n	8008b66 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	f003 0301 	and.w	r3, r3, #1
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d102      	bne.n	8008b56 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f006 f9b9 	bl	800eec8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	695a      	ldr	r2, [r3, #20]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008b64:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f002 fe91 	bl	800b892 <USB_ReadInterrupts>
 8008b70:	4603      	mov	r3, r0
 8008b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b7a:	f040 80c7 	bne.w	8008d0c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	69fa      	ldr	r2, [r7, #28]
 8008b88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b8c:	f023 0301 	bic.w	r3, r3, #1
 8008b90:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2110      	movs	r1, #16
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f001 ff5f 	bl	800aa5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ba2:	e056      	b.n	8008c52 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba6:	015a      	lsls	r2, r3, #5
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	4413      	add	r3, r2
 8008bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008bb6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bc8:	0151      	lsls	r1, r2, #5
 8008bca:	69fa      	ldr	r2, [r7, #28]
 8008bcc:	440a      	add	r2, r1
 8008bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bd6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008be8:	0151      	lsls	r1, r2, #5
 8008bea:	69fa      	ldr	r2, [r7, #28]
 8008bec:	440a      	add	r2, r1
 8008bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bf2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008bf6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c04:	461a      	mov	r2, r3
 8008c06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c0a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0e:	015a      	lsls	r2, r3, #5
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	4413      	add	r3, r2
 8008c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c1c:	0151      	lsls	r1, r2, #5
 8008c1e:	69fa      	ldr	r2, [r7, #28]
 8008c20:	440a      	add	r2, r1
 8008c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2e:	015a      	lsls	r2, r3, #5
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c3c:	0151      	lsls	r1, r2, #5
 8008c3e:	69fa      	ldr	r2, [r7, #28]
 8008c40:	440a      	add	r2, r1
 8008c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c4a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4e:	3301      	adds	r3, #1
 8008c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d3a3      	bcc.n	8008ba4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	69fa      	ldr	r2, [r7, #28]
 8008c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c6a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008c6e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d016      	beq.n	8008ca6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c82:	69fa      	ldr	r2, [r7, #28]
 8008c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c88:	f043 030b 	orr.w	r3, r3, #11
 8008c8c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c98:	69fa      	ldr	r2, [r7, #28]
 8008c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c9e:	f043 030b 	orr.w	r3, r3, #11
 8008ca2:	6453      	str	r3, [r2, #68]	; 0x44
 8008ca4:	e015      	b.n	8008cd2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cac:	695b      	ldr	r3, [r3, #20]
 8008cae:	69fa      	ldr	r2, [r7, #28]
 8008cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008cb8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008cbc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	69fa      	ldr	r2, [r7, #28]
 8008cc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ccc:	f043 030b 	orr.w	r3, r3, #11
 8008cd0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	69fa      	ldr	r2, [r7, #28]
 8008cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ce0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008ce4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6818      	ldr	r0, [r3, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	f002 fe90 	bl	800ba1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	695a      	ldr	r2, [r3, #20]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008d0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4618      	mov	r0, r3
 8008d12:	f002 fdbe 	bl	800b892 <USB_ReadInterrupts>
 8008d16:	4603      	mov	r3, r0
 8008d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d20:	d124      	bne.n	8008d6c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f002 fe54 	bl	800b9d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f001 fef4 	bl	800ab1e <USB_GetDevSpeed>
 8008d36:	4603      	mov	r3, r0
 8008d38:	461a      	mov	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681c      	ldr	r4, [r3, #0]
 8008d42:	f001 f947 	bl	8009fd4 <HAL_RCC_GetHCLKFreq>
 8008d46:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	461a      	mov	r2, r3
 8008d50:	4620      	mov	r0, r4
 8008d52:	f001 fc31 	bl	800a5b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f006 f88d 	bl	800ee76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	695a      	ldr	r2, [r3, #20]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008d6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4618      	mov	r0, r3
 8008d72:	f002 fd8e 	bl	800b892 <USB_ReadInterrupts>
 8008d76:	4603      	mov	r3, r0
 8008d78:	f003 0308 	and.w	r3, r3, #8
 8008d7c:	2b08      	cmp	r3, #8
 8008d7e:	d10a      	bne.n	8008d96 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f006 f86a 	bl	800ee5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	695a      	ldr	r2, [r3, #20]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f002 0208 	and.w	r2, r2, #8
 8008d94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f002 fd79 	bl	800b892 <USB_ReadInterrupts>
 8008da0:	4603      	mov	r3, r0
 8008da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008daa:	d10f      	bne.n	8008dcc <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f006 f8cc 	bl	800ef54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	695a      	ldr	r2, [r3, #20]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008dca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f002 fd5e 	bl	800b892 <USB_ReadInterrupts>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ddc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008de0:	d10f      	bne.n	8008e02 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008de2:	2300      	movs	r3, #0
 8008de4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	4619      	mov	r1, r3
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f006 f89f 	bl	800ef30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	695a      	ldr	r2, [r3, #20]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f002 fd43 	bl	800b892 <USB_ReadInterrupts>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e16:	d10a      	bne.n	8008e2e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f006 f8ad 	bl	800ef78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	695a      	ldr	r2, [r3, #20]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f002 fd2d 	bl	800b892 <USB_ReadInterrupts>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	f003 0304 	and.w	r3, r3, #4
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d115      	bne.n	8008e6e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	f003 0304 	and.w	r3, r3, #4
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f006 f89d 	bl	800ef94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6859      	ldr	r1, [r3, #4]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	69ba      	ldr	r2, [r7, #24]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	605a      	str	r2, [r3, #4]
 8008e6a:	e000      	b.n	8008e6e <HAL_PCD_IRQHandler+0x75e>
      return;
 8008e6c:	bf00      	nop
    }
  }
}
 8008e6e:	3734      	adds	r7, #52	; 0x34
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd90      	pop	{r4, r7, pc}

08008e74 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d101      	bne.n	8008e8e <HAL_PCD_SetAddress+0x1a>
 8008e8a:	2302      	movs	r3, #2
 8008e8c:	e013      	b.n	8008eb6 <HAL_PCD_SetAddress+0x42>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	78fa      	ldrb	r2, [r7, #3]
 8008e9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	78fa      	ldrb	r2, [r7, #3]
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f002 fc8b 	bl	800b7c2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b084      	sub	sp, #16
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	4608      	mov	r0, r1
 8008ec8:	4611      	mov	r1, r2
 8008eca:	461a      	mov	r2, r3
 8008ecc:	4603      	mov	r3, r0
 8008ece:	70fb      	strb	r3, [r7, #3]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	803b      	strh	r3, [r7, #0]
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	da0f      	bge.n	8008f04 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	f003 020f 	and.w	r2, r3, #15
 8008eea:	4613      	mov	r3, r2
 8008eec:	00db      	lsls	r3, r3, #3
 8008eee:	1a9b      	subs	r3, r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	3338      	adds	r3, #56	; 0x38
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	3304      	adds	r3, #4
 8008efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2201      	movs	r2, #1
 8008f00:	705a      	strb	r2, [r3, #1]
 8008f02:	e00f      	b.n	8008f24 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f04:	78fb      	ldrb	r3, [r7, #3]
 8008f06:	f003 020f 	and.w	r2, r3, #15
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	00db      	lsls	r3, r3, #3
 8008f0e:	1a9b      	subs	r3, r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	4413      	add	r3, r2
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008f24:	78fb      	ldrb	r3, [r7, #3]
 8008f26:	f003 030f 	and.w	r3, r3, #15
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008f30:	883a      	ldrh	r2, [r7, #0]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	78ba      	ldrb	r2, [r7, #2]
 8008f3a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	785b      	ldrb	r3, [r3, #1]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d004      	beq.n	8008f4e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008f4e:	78bb      	ldrb	r3, [r7, #2]
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d102      	bne.n	8008f5a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d101      	bne.n	8008f68 <HAL_PCD_EP_Open+0xaa>
 8008f64:	2302      	movs	r3, #2
 8008f66:	e00e      	b.n	8008f86 <HAL_PCD_EP_Open+0xc8>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68f9      	ldr	r1, [r7, #12]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f001 fdf6 	bl	800ab68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008f84:	7afb      	ldrb	r3, [r7, #11]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b084      	sub	sp, #16
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	460b      	mov	r3, r1
 8008f98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	da0f      	bge.n	8008fc2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fa2:	78fb      	ldrb	r3, [r7, #3]
 8008fa4:	f003 020f 	and.w	r2, r3, #15
 8008fa8:	4613      	mov	r3, r2
 8008faa:	00db      	lsls	r3, r3, #3
 8008fac:	1a9b      	subs	r3, r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	3338      	adds	r3, #56	; 0x38
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	705a      	strb	r2, [r3, #1]
 8008fc0:	e00f      	b.n	8008fe2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008fc2:	78fb      	ldrb	r3, [r7, #3]
 8008fc4:	f003 020f 	and.w	r2, r3, #15
 8008fc8:	4613      	mov	r3, r2
 8008fca:	00db      	lsls	r3, r3, #3
 8008fcc:	1a9b      	subs	r3, r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	3304      	adds	r3, #4
 8008fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008fe2:	78fb      	ldrb	r3, [r7, #3]
 8008fe4:	f003 030f 	and.w	r3, r3, #15
 8008fe8:	b2da      	uxtb	r2, r3
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d101      	bne.n	8008ffc <HAL_PCD_EP_Close+0x6e>
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	e00e      	b.n	800901a <HAL_PCD_EP_Close+0x8c>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68f9      	ldr	r1, [r7, #12]
 800900a:	4618      	mov	r0, r3
 800900c:	f001 fe34 	bl	800ac78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b086      	sub	sp, #24
 8009026:	af00      	add	r7, sp, #0
 8009028:	60f8      	str	r0, [r7, #12]
 800902a:	607a      	str	r2, [r7, #4]
 800902c:	603b      	str	r3, [r7, #0]
 800902e:	460b      	mov	r3, r1
 8009030:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009032:	7afb      	ldrb	r3, [r7, #11]
 8009034:	f003 020f 	and.w	r2, r3, #15
 8009038:	4613      	mov	r3, r2
 800903a:	00db      	lsls	r3, r3, #3
 800903c:	1a9b      	subs	r3, r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	4413      	add	r3, r2
 8009048:	3304      	adds	r3, #4
 800904a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	2200      	movs	r2, #0
 800905c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	2200      	movs	r2, #0
 8009062:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009064:	7afb      	ldrb	r3, [r7, #11]
 8009066:	f003 030f 	and.w	r3, r3, #15
 800906a:	b2da      	uxtb	r2, r3
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d102      	bne.n	800907e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800907e:	7afb      	ldrb	r3, [r7, #11]
 8009080:	f003 030f 	and.w	r3, r3, #15
 8009084:	2b00      	cmp	r3, #0
 8009086:	d109      	bne.n	800909c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6818      	ldr	r0, [r3, #0]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	b2db      	uxtb	r3, r3
 8009092:	461a      	mov	r2, r3
 8009094:	6979      	ldr	r1, [r7, #20]
 8009096:	f002 f90f 	bl	800b2b8 <USB_EP0StartXfer>
 800909a:	e008      	b.n	80090ae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6818      	ldr	r0, [r3, #0]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	461a      	mov	r2, r3
 80090a8:	6979      	ldr	r1, [r7, #20]
 80090aa:	f001 fec1 	bl	800ae30 <USB_EPStartXfer>
  }

  return HAL_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3718      	adds	r7, #24
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	460b      	mov	r3, r1
 80090c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80090c4:	78fb      	ldrb	r3, [r7, #3]
 80090c6:	f003 020f 	and.w	r2, r3, #15
 80090ca:	6879      	ldr	r1, [r7, #4]
 80090cc:	4613      	mov	r3, r2
 80090ce:	00db      	lsls	r3, r3, #3
 80090d0:	1a9b      	subs	r3, r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	440b      	add	r3, r1
 80090d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80090da:	681b      	ldr	r3, [r3, #0]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	607a      	str	r2, [r7, #4]
 80090f2:	603b      	str	r3, [r7, #0]
 80090f4:	460b      	mov	r3, r1
 80090f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090f8:	7afb      	ldrb	r3, [r7, #11]
 80090fa:	f003 020f 	and.w	r2, r3, #15
 80090fe:	4613      	mov	r3, r2
 8009100:	00db      	lsls	r3, r3, #3
 8009102:	1a9b      	subs	r3, r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	3338      	adds	r3, #56	; 0x38
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	4413      	add	r3, r2
 800910c:	3304      	adds	r3, #4
 800910e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	2200      	movs	r2, #0
 8009120:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	2201      	movs	r2, #1
 8009126:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009128:	7afb      	ldrb	r3, [r7, #11]
 800912a:	f003 030f 	and.w	r3, r3, #15
 800912e:	b2da      	uxtb	r2, r3
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d102      	bne.n	8009142 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009142:	7afb      	ldrb	r3, [r7, #11]
 8009144:	f003 030f 	and.w	r3, r3, #15
 8009148:	2b00      	cmp	r3, #0
 800914a:	d109      	bne.n	8009160 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6818      	ldr	r0, [r3, #0]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	b2db      	uxtb	r3, r3
 8009156:	461a      	mov	r2, r3
 8009158:	6979      	ldr	r1, [r7, #20]
 800915a:	f002 f8ad 	bl	800b2b8 <USB_EP0StartXfer>
 800915e:	e008      	b.n	8009172 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6818      	ldr	r0, [r3, #0]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	b2db      	uxtb	r3, r3
 800916a:	461a      	mov	r2, r3
 800916c:	6979      	ldr	r1, [r7, #20]
 800916e:	f001 fe5f 	bl	800ae30 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3718      	adds	r7, #24
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	460b      	mov	r3, r1
 8009186:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009188:	78fb      	ldrb	r3, [r7, #3]
 800918a:	f003 020f 	and.w	r2, r3, #15
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	429a      	cmp	r2, r3
 8009194:	d901      	bls.n	800919a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e050      	b.n	800923c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800919a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	da0f      	bge.n	80091c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091a2:	78fb      	ldrb	r3, [r7, #3]
 80091a4:	f003 020f 	and.w	r2, r3, #15
 80091a8:	4613      	mov	r3, r2
 80091aa:	00db      	lsls	r3, r3, #3
 80091ac:	1a9b      	subs	r3, r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	3338      	adds	r3, #56	; 0x38
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	4413      	add	r3, r2
 80091b6:	3304      	adds	r3, #4
 80091b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2201      	movs	r2, #1
 80091be:	705a      	strb	r2, [r3, #1]
 80091c0:	e00d      	b.n	80091de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80091c2:	78fa      	ldrb	r2, [r7, #3]
 80091c4:	4613      	mov	r3, r2
 80091c6:	00db      	lsls	r3, r3, #3
 80091c8:	1a9b      	subs	r3, r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	4413      	add	r3, r2
 80091d4:	3304      	adds	r3, #4
 80091d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2201      	movs	r2, #1
 80091e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091e4:	78fb      	ldrb	r3, [r7, #3]
 80091e6:	f003 030f 	and.w	r3, r3, #15
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d101      	bne.n	80091fe <HAL_PCD_EP_SetStall+0x82>
 80091fa:	2302      	movs	r3, #2
 80091fc:	e01e      	b.n	800923c <HAL_PCD_EP_SetStall+0xc0>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2201      	movs	r2, #1
 8009202:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68f9      	ldr	r1, [r7, #12]
 800920c:	4618      	mov	r0, r3
 800920e:	f002 fa04 	bl	800b61a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009212:	78fb      	ldrb	r3, [r7, #3]
 8009214:	f003 030f 	and.w	r3, r3, #15
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10a      	bne.n	8009232 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6818      	ldr	r0, [r3, #0]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	b2d9      	uxtb	r1, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800922c:	461a      	mov	r2, r3
 800922e:	f002 fbf5 	bl	800ba1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	f003 020f 	and.w	r2, r3, #15
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	429a      	cmp	r2, r3
 800925c:	d901      	bls.n	8009262 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e042      	b.n	80092e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009262:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009266:	2b00      	cmp	r3, #0
 8009268:	da0f      	bge.n	800928a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800926a:	78fb      	ldrb	r3, [r7, #3]
 800926c:	f003 020f 	and.w	r2, r3, #15
 8009270:	4613      	mov	r3, r2
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	1a9b      	subs	r3, r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	3338      	adds	r3, #56	; 0x38
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	4413      	add	r3, r2
 800927e:	3304      	adds	r3, #4
 8009280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2201      	movs	r2, #1
 8009286:	705a      	strb	r2, [r3, #1]
 8009288:	e00f      	b.n	80092aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800928a:	78fb      	ldrb	r3, [r7, #3]
 800928c:	f003 020f 	and.w	r2, r3, #15
 8009290:	4613      	mov	r3, r2
 8009292:	00db      	lsls	r3, r3, #3
 8009294:	1a9b      	subs	r3, r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	4413      	add	r3, r2
 80092a0:	3304      	adds	r3, #4
 80092a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2200      	movs	r2, #0
 80092ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092b0:	78fb      	ldrb	r3, [r7, #3]
 80092b2:	f003 030f 	and.w	r3, r3, #15
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d101      	bne.n	80092ca <HAL_PCD_EP_ClrStall+0x86>
 80092c6:	2302      	movs	r3, #2
 80092c8:	e00e      	b.n	80092e8 <HAL_PCD_EP_ClrStall+0xa4>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68f9      	ldr	r1, [r7, #12]
 80092d8:	4618      	mov	r0, r3
 80092da:	f002 fa0c 	bl	800b6f6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b08a      	sub	sp, #40	; 0x28
 80092f4:	af02      	add	r7, sp, #8
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009304:	683a      	ldr	r2, [r7, #0]
 8009306:	4613      	mov	r3, r2
 8009308:	00db      	lsls	r3, r3, #3
 800930a:	1a9b      	subs	r3, r3, r2
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	3338      	adds	r3, #56	; 0x38
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	4413      	add	r3, r2
 8009314:	3304      	adds	r3, #4
 8009316:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	699a      	ldr	r2, [r3, #24]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	695b      	ldr	r3, [r3, #20]
 8009320:	429a      	cmp	r2, r3
 8009322:	d901      	bls.n	8009328 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e06c      	b.n	8009402 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	695a      	ldr	r2, [r3, #20]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	69fa      	ldr	r2, [r7, #28]
 800933a:	429a      	cmp	r2, r3
 800933c:	d902      	bls.n	8009344 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	3303      	adds	r3, #3
 8009348:	089b      	lsrs	r3, r3, #2
 800934a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800934c:	e02b      	b.n	80093a6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	695a      	ldr	r2, [r3, #20]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	69fa      	ldr	r2, [r7, #28]
 8009360:	429a      	cmp	r2, r3
 8009362:	d902      	bls.n	800936a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	3303      	adds	r3, #3
 800936e:	089b      	lsrs	r3, r3, #2
 8009370:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	68d9      	ldr	r1, [r3, #12]
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	b2da      	uxtb	r2, r3
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009382:	b2db      	uxtb	r3, r3
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	4603      	mov	r3, r0
 8009388:	6978      	ldr	r0, [r7, #20]
 800938a:	f002 f8e8 	bl	800b55e <USB_WritePacket>

    ep->xfer_buff  += len;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	68da      	ldr	r2, [r3, #12]
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	441a      	add	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	699a      	ldr	r2, [r3, #24]
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	441a      	add	r2, r3
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	015a      	lsls	r2, r3, #5
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	4413      	add	r3, r2
 80093ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	69ba      	ldr	r2, [r7, #24]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d809      	bhi.n	80093d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	699a      	ldr	r2, [r3, #24]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d203      	bcs.n	80093d0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	695b      	ldr	r3, [r3, #20]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1be      	bne.n	800934e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	695a      	ldr	r2, [r3, #20]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d811      	bhi.n	8009400 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	f003 030f 	and.w	r3, r3, #15
 80093e2:	2201      	movs	r2, #1
 80093e4:	fa02 f303 	lsl.w	r3, r2, r3
 80093e8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	43db      	mvns	r3, r3
 80093f6:	6939      	ldr	r1, [r7, #16]
 80093f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093fc:	4013      	ands	r3, r2
 80093fe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3720      	adds	r7, #32
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
	...

0800940c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	333c      	adds	r3, #60	; 0x3c
 8009424:	3304      	adds	r3, #4
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	015a      	lsls	r2, r3, #5
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	4413      	add	r3, r2
 8009432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	2b01      	cmp	r3, #1
 8009440:	f040 80a0 	bne.w	8009584 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	f003 0308 	and.w	r3, r3, #8
 800944a:	2b00      	cmp	r3, #0
 800944c:	d015      	beq.n	800947a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	4a72      	ldr	r2, [pc, #456]	; (800961c <PCD_EP_OutXfrComplete_int+0x210>)
 8009452:	4293      	cmp	r3, r2
 8009454:	f240 80dd 	bls.w	8009612 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800945e:	2b00      	cmp	r3, #0
 8009460:	f000 80d7 	beq.w	8009612 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	015a      	lsls	r2, r3, #5
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	4413      	add	r3, r2
 800946c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009470:	461a      	mov	r2, r3
 8009472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009476:	6093      	str	r3, [r2, #8]
 8009478:	e0cb      	b.n	8009612 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	f003 0320 	and.w	r3, r3, #32
 8009480:	2b00      	cmp	r3, #0
 8009482:	d009      	beq.n	8009498 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	015a      	lsls	r2, r3, #5
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	4413      	add	r3, r2
 800948c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009490:	461a      	mov	r2, r3
 8009492:	2320      	movs	r3, #32
 8009494:	6093      	str	r3, [r2, #8]
 8009496:	e0bc      	b.n	8009612 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f040 80b7 	bne.w	8009612 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	4a5d      	ldr	r2, [pc, #372]	; (800961c <PCD_EP_OutXfrComplete_int+0x210>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d90f      	bls.n	80094cc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00a      	beq.n	80094cc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c2:	461a      	mov	r2, r3
 80094c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094c8:	6093      	str	r3, [r2, #8]
 80094ca:	e0a2      	b.n	8009612 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80094cc:	6879      	ldr	r1, [r7, #4]
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	4613      	mov	r3, r2
 80094d2:	00db      	lsls	r3, r3, #3
 80094d4:	1a9b      	subs	r3, r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	440b      	add	r3, r1
 80094da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80094de:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	0159      	lsls	r1, r3, #5
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	440b      	add	r3, r1
 80094e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80094f2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	4613      	mov	r3, r2
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	1a9b      	subs	r3, r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4403      	add	r3, r0
 8009502:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009506:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009508:	6879      	ldr	r1, [r7, #4]
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	4613      	mov	r3, r2
 800950e:	00db      	lsls	r3, r3, #3
 8009510:	1a9b      	subs	r3, r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	440b      	add	r3, r1
 8009516:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800951a:	6819      	ldr	r1, [r3, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	4613      	mov	r3, r2
 8009522:	00db      	lsls	r3, r3, #3
 8009524:	1a9b      	subs	r3, r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4403      	add	r3, r0
 800952a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4419      	add	r1, r3
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	683a      	ldr	r2, [r7, #0]
 8009536:	4613      	mov	r3, r2
 8009538:	00db      	lsls	r3, r3, #3
 800953a:	1a9b      	subs	r3, r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4403      	add	r3, r0
 8009540:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009544:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d114      	bne.n	8009576 <PCD_EP_OutXfrComplete_int+0x16a>
 800954c:	6879      	ldr	r1, [r7, #4]
 800954e:	683a      	ldr	r2, [r7, #0]
 8009550:	4613      	mov	r3, r2
 8009552:	00db      	lsls	r3, r3, #3
 8009554:	1a9b      	subs	r3, r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	440b      	add	r3, r1
 800955a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d108      	bne.n	8009576 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6818      	ldr	r0, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800956e:	461a      	mov	r2, r3
 8009570:	2101      	movs	r1, #1
 8009572:	f002 fa53 	bl	800ba1c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	b2db      	uxtb	r3, r3
 800957a:	4619      	mov	r1, r3
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f005 fc37 	bl	800edf0 <HAL_PCD_DataOutStageCallback>
 8009582:	e046      	b.n	8009612 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	4a26      	ldr	r2, [pc, #152]	; (8009620 <PCD_EP_OutXfrComplete_int+0x214>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d124      	bne.n	80095d6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00a      	beq.n	80095ac <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	015a      	lsls	r2, r3, #5
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	4413      	add	r3, r2
 800959e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a2:	461a      	mov	r2, r3
 80095a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095a8:	6093      	str	r3, [r2, #8]
 80095aa:	e032      	b.n	8009612 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	f003 0320 	and.w	r3, r3, #32
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d008      	beq.n	80095c8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	015a      	lsls	r2, r3, #5
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	4413      	add	r3, r2
 80095be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c2:	461a      	mov	r2, r3
 80095c4:	2320      	movs	r3, #32
 80095c6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	4619      	mov	r1, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f005 fc0e 	bl	800edf0 <HAL_PCD_DataOutStageCallback>
 80095d4:	e01d      	b.n	8009612 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d114      	bne.n	8009606 <PCD_EP_OutXfrComplete_int+0x1fa>
 80095dc:	6879      	ldr	r1, [r7, #4]
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	4613      	mov	r3, r2
 80095e2:	00db      	lsls	r3, r3, #3
 80095e4:	1a9b      	subs	r3, r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	440b      	add	r3, r1
 80095ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d108      	bne.n	8009606 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6818      	ldr	r0, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80095fe:	461a      	mov	r2, r3
 8009600:	2100      	movs	r1, #0
 8009602:	f002 fa0b 	bl	800ba1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	b2db      	uxtb	r3, r3
 800960a:	4619      	mov	r1, r3
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f005 fbef 	bl	800edf0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3718      	adds	r7, #24
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	4f54300a 	.word	0x4f54300a
 8009620:	4f54310a 	.word	0x4f54310a

08009624 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	333c      	adds	r3, #60	; 0x3c
 800963c:	3304      	adds	r3, #4
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	015a      	lsls	r2, r3, #5
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	4413      	add	r3, r2
 800964a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	4a15      	ldr	r2, [pc, #84]	; (80096ac <PCD_EP_OutSetupPacket_int+0x88>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d90e      	bls.n	8009678 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009660:	2b00      	cmp	r3, #0
 8009662:	d009      	beq.n	8009678 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	015a      	lsls	r2, r3, #5
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	4413      	add	r3, r2
 800966c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009670:	461a      	mov	r2, r3
 8009672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009676:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f005 fba7 	bl	800edcc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	4a0a      	ldr	r2, [pc, #40]	; (80096ac <PCD_EP_OutSetupPacket_int+0x88>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d90c      	bls.n	80096a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	2b01      	cmp	r3, #1
 800968c:	d108      	bne.n	80096a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6818      	ldr	r0, [r3, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009698:	461a      	mov	r2, r3
 800969a:	2101      	movs	r1, #1
 800969c:	f002 f9be 	bl	800ba1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3718      	adds	r7, #24
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	4f54300a 	.word	0x4f54300a

080096b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	460b      	mov	r3, r1
 80096ba:	70fb      	strb	r3, [r7, #3]
 80096bc:	4613      	mov	r3, r2
 80096be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80096c8:	78fb      	ldrb	r3, [r7, #3]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d107      	bne.n	80096de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80096ce:	883b      	ldrh	r3, [r7, #0]
 80096d0:	0419      	lsls	r1, r3, #16
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68ba      	ldr	r2, [r7, #8]
 80096d8:	430a      	orrs	r2, r1
 80096da:	629a      	str	r2, [r3, #40]	; 0x28
 80096dc:	e028      	b.n	8009730 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e4:	0c1b      	lsrs	r3, r3, #16
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	4413      	add	r3, r2
 80096ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80096ec:	2300      	movs	r3, #0
 80096ee:	73fb      	strb	r3, [r7, #15]
 80096f0:	e00d      	b.n	800970e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
 80096f8:	3340      	adds	r3, #64	; 0x40
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	4413      	add	r3, r2
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	0c1b      	lsrs	r3, r3, #16
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	4413      	add	r3, r2
 8009706:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009708:	7bfb      	ldrb	r3, [r7, #15]
 800970a:	3301      	adds	r3, #1
 800970c:	73fb      	strb	r3, [r7, #15]
 800970e:	7bfa      	ldrb	r2, [r7, #15]
 8009710:	78fb      	ldrb	r3, [r7, #3]
 8009712:	3b01      	subs	r3, #1
 8009714:	429a      	cmp	r2, r3
 8009716:	d3ec      	bcc.n	80096f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009718:	883b      	ldrh	r3, [r7, #0]
 800971a:	0418      	lsls	r0, r3, #16
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6819      	ldr	r1, [r3, #0]
 8009720:	78fb      	ldrb	r3, [r7, #3]
 8009722:	3b01      	subs	r3, #1
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	4302      	orrs	r2, r0
 8009728:	3340      	adds	r3, #64	; 0x40
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	440b      	add	r3, r1
 800972e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3714      	adds	r7, #20
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr

0800973e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800973e:	b480      	push	{r7}
 8009740:	b083      	sub	sp, #12
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	460b      	mov	r3, r1
 8009748:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	887a      	ldrh	r2, [r7, #2]
 8009750:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	460b      	mov	r3, r1
 800976a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b086      	sub	sp, #24
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d101      	bne.n	800978a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009786:	2301      	movs	r3, #1
 8009788:	e25b      	b.n	8009c42 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	2b00      	cmp	r3, #0
 8009794:	d075      	beq.n	8009882 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009796:	4ba3      	ldr	r3, [pc, #652]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	f003 030c 	and.w	r3, r3, #12
 800979e:	2b04      	cmp	r3, #4
 80097a0:	d00c      	beq.n	80097bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80097a2:	4ba0      	ldr	r3, [pc, #640]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80097aa:	2b08      	cmp	r3, #8
 80097ac:	d112      	bne.n	80097d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80097ae:	4b9d      	ldr	r3, [pc, #628]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097ba:	d10b      	bne.n	80097d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097bc:	4b99      	ldr	r3, [pc, #612]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d05b      	beq.n	8009880 <HAL_RCC_OscConfig+0x108>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d157      	bne.n	8009880 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e236      	b.n	8009c42 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097dc:	d106      	bne.n	80097ec <HAL_RCC_OscConfig+0x74>
 80097de:	4b91      	ldr	r3, [pc, #580]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a90      	ldr	r2, [pc, #576]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 80097e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097e8:	6013      	str	r3, [r2, #0]
 80097ea:	e01d      	b.n	8009828 <HAL_RCC_OscConfig+0xb0>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097f4:	d10c      	bne.n	8009810 <HAL_RCC_OscConfig+0x98>
 80097f6:	4b8b      	ldr	r3, [pc, #556]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a8a      	ldr	r2, [pc, #552]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 80097fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009800:	6013      	str	r3, [r2, #0]
 8009802:	4b88      	ldr	r3, [pc, #544]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a87      	ldr	r2, [pc, #540]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 8009808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800980c:	6013      	str	r3, [r2, #0]
 800980e:	e00b      	b.n	8009828 <HAL_RCC_OscConfig+0xb0>
 8009810:	4b84      	ldr	r3, [pc, #528]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a83      	ldr	r2, [pc, #524]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 8009816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800981a:	6013      	str	r3, [r2, #0]
 800981c:	4b81      	ldr	r3, [pc, #516]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a80      	ldr	r2, [pc, #512]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 8009822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d013      	beq.n	8009858 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009830:	f7fb f98c 	bl	8004b4c <HAL_GetTick>
 8009834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009836:	e008      	b.n	800984a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009838:	f7fb f988 	bl	8004b4c <HAL_GetTick>
 800983c:	4602      	mov	r2, r0
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	2b64      	cmp	r3, #100	; 0x64
 8009844:	d901      	bls.n	800984a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	e1fb      	b.n	8009c42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800984a:	4b76      	ldr	r3, [pc, #472]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009852:	2b00      	cmp	r3, #0
 8009854:	d0f0      	beq.n	8009838 <HAL_RCC_OscConfig+0xc0>
 8009856:	e014      	b.n	8009882 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009858:	f7fb f978 	bl	8004b4c <HAL_GetTick>
 800985c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800985e:	e008      	b.n	8009872 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009860:	f7fb f974 	bl	8004b4c <HAL_GetTick>
 8009864:	4602      	mov	r2, r0
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	2b64      	cmp	r3, #100	; 0x64
 800986c:	d901      	bls.n	8009872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800986e:	2303      	movs	r3, #3
 8009870:	e1e7      	b.n	8009c42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009872:	4b6c      	ldr	r3, [pc, #432]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1f0      	bne.n	8009860 <HAL_RCC_OscConfig+0xe8>
 800987e:	e000      	b.n	8009882 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f003 0302 	and.w	r3, r3, #2
 800988a:	2b00      	cmp	r3, #0
 800988c:	d063      	beq.n	8009956 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800988e:	4b65      	ldr	r3, [pc, #404]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	f003 030c 	and.w	r3, r3, #12
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00b      	beq.n	80098b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800989a:	4b62      	ldr	r3, [pc, #392]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80098a2:	2b08      	cmp	r3, #8
 80098a4:	d11c      	bne.n	80098e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80098a6:	4b5f      	ldr	r3, [pc, #380]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d116      	bne.n	80098e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098b2:	4b5c      	ldr	r3, [pc, #368]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f003 0302 	and.w	r3, r3, #2
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d005      	beq.n	80098ca <HAL_RCC_OscConfig+0x152>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d001      	beq.n	80098ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e1bb      	b.n	8009c42 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098ca:	4b56      	ldr	r3, [pc, #344]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	00db      	lsls	r3, r3, #3
 80098d8:	4952      	ldr	r1, [pc, #328]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 80098da:	4313      	orrs	r3, r2
 80098dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098de:	e03a      	b.n	8009956 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d020      	beq.n	800992a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80098e8:	4b4f      	ldr	r3, [pc, #316]	; (8009a28 <HAL_RCC_OscConfig+0x2b0>)
 80098ea:	2201      	movs	r2, #1
 80098ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098ee:	f7fb f92d 	bl	8004b4c <HAL_GetTick>
 80098f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098f4:	e008      	b.n	8009908 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098f6:	f7fb f929 	bl	8004b4c <HAL_GetTick>
 80098fa:	4602      	mov	r2, r0
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	1ad3      	subs	r3, r2, r3
 8009900:	2b02      	cmp	r3, #2
 8009902:	d901      	bls.n	8009908 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009904:	2303      	movs	r3, #3
 8009906:	e19c      	b.n	8009c42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009908:	4b46      	ldr	r3, [pc, #280]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 0302 	and.w	r3, r3, #2
 8009910:	2b00      	cmp	r3, #0
 8009912:	d0f0      	beq.n	80098f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009914:	4b43      	ldr	r3, [pc, #268]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	00db      	lsls	r3, r3, #3
 8009922:	4940      	ldr	r1, [pc, #256]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 8009924:	4313      	orrs	r3, r2
 8009926:	600b      	str	r3, [r1, #0]
 8009928:	e015      	b.n	8009956 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800992a:	4b3f      	ldr	r3, [pc, #252]	; (8009a28 <HAL_RCC_OscConfig+0x2b0>)
 800992c:	2200      	movs	r2, #0
 800992e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009930:	f7fb f90c 	bl	8004b4c <HAL_GetTick>
 8009934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009936:	e008      	b.n	800994a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009938:	f7fb f908 	bl	8004b4c <HAL_GetTick>
 800993c:	4602      	mov	r2, r0
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	2b02      	cmp	r3, #2
 8009944:	d901      	bls.n	800994a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	e17b      	b.n	8009c42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800994a:	4b36      	ldr	r3, [pc, #216]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0302 	and.w	r3, r3, #2
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1f0      	bne.n	8009938 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f003 0308 	and.w	r3, r3, #8
 800995e:	2b00      	cmp	r3, #0
 8009960:	d030      	beq.n	80099c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	695b      	ldr	r3, [r3, #20]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d016      	beq.n	8009998 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800996a:	4b30      	ldr	r3, [pc, #192]	; (8009a2c <HAL_RCC_OscConfig+0x2b4>)
 800996c:	2201      	movs	r2, #1
 800996e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009970:	f7fb f8ec 	bl	8004b4c <HAL_GetTick>
 8009974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009976:	e008      	b.n	800998a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009978:	f7fb f8e8 	bl	8004b4c <HAL_GetTick>
 800997c:	4602      	mov	r2, r0
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	2b02      	cmp	r3, #2
 8009984:	d901      	bls.n	800998a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009986:	2303      	movs	r3, #3
 8009988:	e15b      	b.n	8009c42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800998a:	4b26      	ldr	r3, [pc, #152]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 800998c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800998e:	f003 0302 	and.w	r3, r3, #2
 8009992:	2b00      	cmp	r3, #0
 8009994:	d0f0      	beq.n	8009978 <HAL_RCC_OscConfig+0x200>
 8009996:	e015      	b.n	80099c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009998:	4b24      	ldr	r3, [pc, #144]	; (8009a2c <HAL_RCC_OscConfig+0x2b4>)
 800999a:	2200      	movs	r2, #0
 800999c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800999e:	f7fb f8d5 	bl	8004b4c <HAL_GetTick>
 80099a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099a4:	e008      	b.n	80099b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80099a6:	f7fb f8d1 	bl	8004b4c <HAL_GetTick>
 80099aa:	4602      	mov	r2, r0
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d901      	bls.n	80099b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80099b4:	2303      	movs	r3, #3
 80099b6:	e144      	b.n	8009c42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099b8:	4b1a      	ldr	r3, [pc, #104]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 80099ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099bc:	f003 0302 	and.w	r3, r3, #2
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1f0      	bne.n	80099a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 0304 	and.w	r3, r3, #4
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f000 80a0 	beq.w	8009b12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80099d2:	2300      	movs	r3, #0
 80099d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099d6:	4b13      	ldr	r3, [pc, #76]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 80099d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d10f      	bne.n	8009a02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099e2:	2300      	movs	r3, #0
 80099e4:	60bb      	str	r3, [r7, #8]
 80099e6:	4b0f      	ldr	r3, [pc, #60]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 80099e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ea:	4a0e      	ldr	r2, [pc, #56]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 80099ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099f0:	6413      	str	r3, [r2, #64]	; 0x40
 80099f2:	4b0c      	ldr	r3, [pc, #48]	; (8009a24 <HAL_RCC_OscConfig+0x2ac>)
 80099f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099fa:	60bb      	str	r3, [r7, #8]
 80099fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099fe:	2301      	movs	r3, #1
 8009a00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a02:	4b0b      	ldr	r3, [pc, #44]	; (8009a30 <HAL_RCC_OscConfig+0x2b8>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d121      	bne.n	8009a52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009a0e:	4b08      	ldr	r3, [pc, #32]	; (8009a30 <HAL_RCC_OscConfig+0x2b8>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a07      	ldr	r2, [pc, #28]	; (8009a30 <HAL_RCC_OscConfig+0x2b8>)
 8009a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a1a:	f7fb f897 	bl	8004b4c <HAL_GetTick>
 8009a1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a20:	e011      	b.n	8009a46 <HAL_RCC_OscConfig+0x2ce>
 8009a22:	bf00      	nop
 8009a24:	40023800 	.word	0x40023800
 8009a28:	42470000 	.word	0x42470000
 8009a2c:	42470e80 	.word	0x42470e80
 8009a30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a34:	f7fb f88a 	bl	8004b4c <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d901      	bls.n	8009a46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	e0fd      	b.n	8009c42 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a46:	4b81      	ldr	r3, [pc, #516]	; (8009c4c <HAL_RCC_OscConfig+0x4d4>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d0f0      	beq.n	8009a34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d106      	bne.n	8009a68 <HAL_RCC_OscConfig+0x2f0>
 8009a5a:	4b7d      	ldr	r3, [pc, #500]	; (8009c50 <HAL_RCC_OscConfig+0x4d8>)
 8009a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a5e:	4a7c      	ldr	r2, [pc, #496]	; (8009c50 <HAL_RCC_OscConfig+0x4d8>)
 8009a60:	f043 0301 	orr.w	r3, r3, #1
 8009a64:	6713      	str	r3, [r2, #112]	; 0x70
 8009a66:	e01c      	b.n	8009aa2 <HAL_RCC_OscConfig+0x32a>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	2b05      	cmp	r3, #5
 8009a6e:	d10c      	bne.n	8009a8a <HAL_RCC_OscConfig+0x312>
 8009a70:	4b77      	ldr	r3, [pc, #476]	; (8009c50 <HAL_RCC_OscConfig+0x4d8>)
 8009a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a74:	4a76      	ldr	r2, [pc, #472]	; (8009c50 <HAL_RCC_OscConfig+0x4d8>)
 8009a76:	f043 0304 	orr.w	r3, r3, #4
 8009a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8009a7c:	4b74      	ldr	r3, [pc, #464]	; (8009c50 <HAL_RCC_OscConfig+0x4d8>)
 8009a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a80:	4a73      	ldr	r2, [pc, #460]	; (8009c50 <HAL_RCC_OscConfig+0x4d8>)
 8009a82:	f043 0301 	orr.w	r3, r3, #1
 8009a86:	6713      	str	r3, [r2, #112]	; 0x70
 8009a88:	e00b      	b.n	8009aa2 <HAL_RCC_OscConfig+0x32a>
 8009a8a:	4b71      	ldr	r3, [pc, #452]	; (8009c50 <HAL_RCC_OscConfig+0x4d8>)
 8009a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a8e:	4a70      	ldr	r2, [pc, #448]	; (8009c50 <HAL_RCC_OscConfig+0x4d8>)
 8009a90:	f023 0301 	bic.w	r3, r3, #1
 8009a94:	6713      	str	r3, [r2, #112]	; 0x70
 8009a96:	4b6e      	ldr	r3, [pc, #440]	; (8009c50 <HAL_RCC_OscConfig+0x4d8>)
 8009a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a9a:	4a6d      	ldr	r2, [pc, #436]	; (8009c50 <HAL_RCC_OscConfig+0x4d8>)
 8009a9c:	f023 0304 	bic.w	r3, r3, #4
 8009aa0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d015      	beq.n	8009ad6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009aaa:	f7fb f84f 	bl	8004b4c <HAL_GetTick>
 8009aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ab0:	e00a      	b.n	8009ac8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ab2:	f7fb f84b 	bl	8004b4c <HAL_GetTick>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	1ad3      	subs	r3, r2, r3
 8009abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d901      	bls.n	8009ac8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	e0bc      	b.n	8009c42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ac8:	4b61      	ldr	r3, [pc, #388]	; (8009c50 <HAL_RCC_OscConfig+0x4d8>)
 8009aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009acc:	f003 0302 	and.w	r3, r3, #2
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d0ee      	beq.n	8009ab2 <HAL_RCC_OscConfig+0x33a>
 8009ad4:	e014      	b.n	8009b00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ad6:	f7fb f839 	bl	8004b4c <HAL_GetTick>
 8009ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009adc:	e00a      	b.n	8009af4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ade:	f7fb f835 	bl	8004b4c <HAL_GetTick>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	1ad3      	subs	r3, r2, r3
 8009ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d901      	bls.n	8009af4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009af0:	2303      	movs	r3, #3
 8009af2:	e0a6      	b.n	8009c42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009af4:	4b56      	ldr	r3, [pc, #344]	; (8009c50 <HAL_RCC_OscConfig+0x4d8>)
 8009af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009af8:	f003 0302 	and.w	r3, r3, #2
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1ee      	bne.n	8009ade <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b00:	7dfb      	ldrb	r3, [r7, #23]
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d105      	bne.n	8009b12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b06:	4b52      	ldr	r3, [pc, #328]	; (8009c50 <HAL_RCC_OscConfig+0x4d8>)
 8009b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0a:	4a51      	ldr	r2, [pc, #324]	; (8009c50 <HAL_RCC_OscConfig+0x4d8>)
 8009b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	699b      	ldr	r3, [r3, #24]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f000 8092 	beq.w	8009c40 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009b1c:	4b4c      	ldr	r3, [pc, #304]	; (8009c50 <HAL_RCC_OscConfig+0x4d8>)
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f003 030c 	and.w	r3, r3, #12
 8009b24:	2b08      	cmp	r3, #8
 8009b26:	d05c      	beq.n	8009be2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	699b      	ldr	r3, [r3, #24]
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	d141      	bne.n	8009bb4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b30:	4b48      	ldr	r3, [pc, #288]	; (8009c54 <HAL_RCC_OscConfig+0x4dc>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b36:	f7fb f809 	bl	8004b4c <HAL_GetTick>
 8009b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b3c:	e008      	b.n	8009b50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b3e:	f7fb f805 	bl	8004b4c <HAL_GetTick>
 8009b42:	4602      	mov	r2, r0
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	1ad3      	subs	r3, r2, r3
 8009b48:	2b02      	cmp	r3, #2
 8009b4a:	d901      	bls.n	8009b50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	e078      	b.n	8009c42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b50:	4b3f      	ldr	r3, [pc, #252]	; (8009c50 <HAL_RCC_OscConfig+0x4d8>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1f0      	bne.n	8009b3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	69da      	ldr	r2, [r3, #28]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a1b      	ldr	r3, [r3, #32]
 8009b64:	431a      	orrs	r2, r3
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6a:	019b      	lsls	r3, r3, #6
 8009b6c:	431a      	orrs	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b72:	085b      	lsrs	r3, r3, #1
 8009b74:	3b01      	subs	r3, #1
 8009b76:	041b      	lsls	r3, r3, #16
 8009b78:	431a      	orrs	r2, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7e:	061b      	lsls	r3, r3, #24
 8009b80:	4933      	ldr	r1, [pc, #204]	; (8009c50 <HAL_RCC_OscConfig+0x4d8>)
 8009b82:	4313      	orrs	r3, r2
 8009b84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b86:	4b33      	ldr	r3, [pc, #204]	; (8009c54 <HAL_RCC_OscConfig+0x4dc>)
 8009b88:	2201      	movs	r2, #1
 8009b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b8c:	f7fa ffde 	bl	8004b4c <HAL_GetTick>
 8009b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b92:	e008      	b.n	8009ba6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b94:	f7fa ffda 	bl	8004b4c <HAL_GetTick>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d901      	bls.n	8009ba6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e04d      	b.n	8009c42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ba6:	4b2a      	ldr	r3, [pc, #168]	; (8009c50 <HAL_RCC_OscConfig+0x4d8>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d0f0      	beq.n	8009b94 <HAL_RCC_OscConfig+0x41c>
 8009bb2:	e045      	b.n	8009c40 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009bb4:	4b27      	ldr	r3, [pc, #156]	; (8009c54 <HAL_RCC_OscConfig+0x4dc>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bba:	f7fa ffc7 	bl	8004b4c <HAL_GetTick>
 8009bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bc0:	e008      	b.n	8009bd4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bc2:	f7fa ffc3 	bl	8004b4c <HAL_GetTick>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d901      	bls.n	8009bd4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	e036      	b.n	8009c42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bd4:	4b1e      	ldr	r3, [pc, #120]	; (8009c50 <HAL_RCC_OscConfig+0x4d8>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1f0      	bne.n	8009bc2 <HAL_RCC_OscConfig+0x44a>
 8009be0:	e02e      	b.n	8009c40 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	699b      	ldr	r3, [r3, #24]
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d101      	bne.n	8009bee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	e029      	b.n	8009c42 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009bee:	4b18      	ldr	r3, [pc, #96]	; (8009c50 <HAL_RCC_OscConfig+0x4d8>)
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d11c      	bne.n	8009c3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d115      	bne.n	8009c3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009c16:	4013      	ands	r3, r2
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d10d      	bne.n	8009c3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d106      	bne.n	8009c3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d001      	beq.n	8009c40 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e000      	b.n	8009c42 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3718      	adds	r7, #24
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	40007000 	.word	0x40007000
 8009c50:	40023800 	.word	0x40023800
 8009c54:	42470060 	.word	0x42470060

08009c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d101      	bne.n	8009c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e0cc      	b.n	8009e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c6c:	4b68      	ldr	r3, [pc, #416]	; (8009e10 <HAL_RCC_ClockConfig+0x1b8>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f003 030f 	and.w	r3, r3, #15
 8009c74:	683a      	ldr	r2, [r7, #0]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d90c      	bls.n	8009c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c7a:	4b65      	ldr	r3, [pc, #404]	; (8009e10 <HAL_RCC_ClockConfig+0x1b8>)
 8009c7c:	683a      	ldr	r2, [r7, #0]
 8009c7e:	b2d2      	uxtb	r2, r2
 8009c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c82:	4b63      	ldr	r3, [pc, #396]	; (8009e10 <HAL_RCC_ClockConfig+0x1b8>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 030f 	and.w	r3, r3, #15
 8009c8a:	683a      	ldr	r2, [r7, #0]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d001      	beq.n	8009c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	e0b8      	b.n	8009e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0302 	and.w	r3, r3, #2
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d020      	beq.n	8009ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 0304 	and.w	r3, r3, #4
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d005      	beq.n	8009cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009cac:	4b59      	ldr	r3, [pc, #356]	; (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	4a58      	ldr	r2, [pc, #352]	; (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009cb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009cb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 0308 	and.w	r3, r3, #8
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d005      	beq.n	8009cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009cc4:	4b53      	ldr	r3, [pc, #332]	; (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	4a52      	ldr	r2, [pc, #328]	; (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009cca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009cd0:	4b50      	ldr	r3, [pc, #320]	; (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	494d      	ldr	r1, [pc, #308]	; (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 0301 	and.w	r3, r3, #1
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d044      	beq.n	8009d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d107      	bne.n	8009d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009cf6:	4b47      	ldr	r3, [pc, #284]	; (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d119      	bne.n	8009d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e07f      	b.n	8009e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d003      	beq.n	8009d16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009d12:	2b03      	cmp	r3, #3
 8009d14:	d107      	bne.n	8009d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d16:	4b3f      	ldr	r3, [pc, #252]	; (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d109      	bne.n	8009d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e06f      	b.n	8009e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d26:	4b3b      	ldr	r3, [pc, #236]	; (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f003 0302 	and.w	r3, r3, #2
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d101      	bne.n	8009d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e067      	b.n	8009e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d36:	4b37      	ldr	r3, [pc, #220]	; (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	f023 0203 	bic.w	r2, r3, #3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	4934      	ldr	r1, [pc, #208]	; (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009d44:	4313      	orrs	r3, r2
 8009d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009d48:	f7fa ff00 	bl	8004b4c <HAL_GetTick>
 8009d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d4e:	e00a      	b.n	8009d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d50:	f7fa fefc 	bl	8004b4c <HAL_GetTick>
 8009d54:	4602      	mov	r2, r0
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d901      	bls.n	8009d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009d62:	2303      	movs	r3, #3
 8009d64:	e04f      	b.n	8009e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d66:	4b2b      	ldr	r3, [pc, #172]	; (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	f003 020c 	and.w	r2, r3, #12
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d1eb      	bne.n	8009d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d78:	4b25      	ldr	r3, [pc, #148]	; (8009e10 <HAL_RCC_ClockConfig+0x1b8>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f003 030f 	and.w	r3, r3, #15
 8009d80:	683a      	ldr	r2, [r7, #0]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d20c      	bcs.n	8009da0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d86:	4b22      	ldr	r3, [pc, #136]	; (8009e10 <HAL_RCC_ClockConfig+0x1b8>)
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	b2d2      	uxtb	r2, r2
 8009d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d8e:	4b20      	ldr	r3, [pc, #128]	; (8009e10 <HAL_RCC_ClockConfig+0x1b8>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f003 030f 	and.w	r3, r3, #15
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d001      	beq.n	8009da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e032      	b.n	8009e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 0304 	and.w	r3, r3, #4
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d008      	beq.n	8009dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009dac:	4b19      	ldr	r3, [pc, #100]	; (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	4916      	ldr	r1, [pc, #88]	; (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 0308 	and.w	r3, r3, #8
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d009      	beq.n	8009dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009dca:	4b12      	ldr	r3, [pc, #72]	; (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	00db      	lsls	r3, r3, #3
 8009dd8:	490e      	ldr	r1, [pc, #56]	; (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009dde:	f000 f821 	bl	8009e24 <HAL_RCC_GetSysClockFreq>
 8009de2:	4601      	mov	r1, r0
 8009de4:	4b0b      	ldr	r3, [pc, #44]	; (8009e14 <HAL_RCC_ClockConfig+0x1bc>)
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	091b      	lsrs	r3, r3, #4
 8009dea:	f003 030f 	and.w	r3, r3, #15
 8009dee:	4a0a      	ldr	r2, [pc, #40]	; (8009e18 <HAL_RCC_ClockConfig+0x1c0>)
 8009df0:	5cd3      	ldrb	r3, [r2, r3]
 8009df2:	fa21 f303 	lsr.w	r3, r1, r3
 8009df6:	4a09      	ldr	r2, [pc, #36]	; (8009e1c <HAL_RCC_ClockConfig+0x1c4>)
 8009df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009dfa:	4b09      	ldr	r3, [pc, #36]	; (8009e20 <HAL_RCC_ClockConfig+0x1c8>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7f7 fd2e 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	40023c00 	.word	0x40023c00
 8009e14:	40023800 	.word	0x40023800
 8009e18:	0800fac8 	.word	0x0800fac8
 8009e1c:	20000008 	.word	0x20000008
 8009e20:	2000000c 	.word	0x2000000c

08009e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	607b      	str	r3, [r7, #4]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	60fb      	str	r3, [r7, #12]
 8009e32:	2300      	movs	r3, #0
 8009e34:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009e36:	2300      	movs	r3, #0
 8009e38:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e3a:	4b63      	ldr	r3, [pc, #396]	; (8009fc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	f003 030c 	and.w	r3, r3, #12
 8009e42:	2b04      	cmp	r3, #4
 8009e44:	d007      	beq.n	8009e56 <HAL_RCC_GetSysClockFreq+0x32>
 8009e46:	2b08      	cmp	r3, #8
 8009e48:	d008      	beq.n	8009e5c <HAL_RCC_GetSysClockFreq+0x38>
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	f040 80b4 	bne.w	8009fb8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009e50:	4b5e      	ldr	r3, [pc, #376]	; (8009fcc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009e52:	60bb      	str	r3, [r7, #8]
       break;
 8009e54:	e0b3      	b.n	8009fbe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009e56:	4b5e      	ldr	r3, [pc, #376]	; (8009fd0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8009e58:	60bb      	str	r3, [r7, #8]
      break;
 8009e5a:	e0b0      	b.n	8009fbe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e5c:	4b5a      	ldr	r3, [pc, #360]	; (8009fc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009e66:	4b58      	ldr	r3, [pc, #352]	; (8009fc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d04a      	beq.n	8009f08 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e72:	4b55      	ldr	r3, [pc, #340]	; (8009fc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	099b      	lsrs	r3, r3, #6
 8009e78:	f04f 0400 	mov.w	r4, #0
 8009e7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009e80:	f04f 0200 	mov.w	r2, #0
 8009e84:	ea03 0501 	and.w	r5, r3, r1
 8009e88:	ea04 0602 	and.w	r6, r4, r2
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	4632      	mov	r2, r6
 8009e90:	f04f 0300 	mov.w	r3, #0
 8009e94:	f04f 0400 	mov.w	r4, #0
 8009e98:	0154      	lsls	r4, r2, #5
 8009e9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009e9e:	014b      	lsls	r3, r1, #5
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	4622      	mov	r2, r4
 8009ea4:	1b49      	subs	r1, r1, r5
 8009ea6:	eb62 0206 	sbc.w	r2, r2, r6
 8009eaa:	f04f 0300 	mov.w	r3, #0
 8009eae:	f04f 0400 	mov.w	r4, #0
 8009eb2:	0194      	lsls	r4, r2, #6
 8009eb4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009eb8:	018b      	lsls	r3, r1, #6
 8009eba:	1a5b      	subs	r3, r3, r1
 8009ebc:	eb64 0402 	sbc.w	r4, r4, r2
 8009ec0:	f04f 0100 	mov.w	r1, #0
 8009ec4:	f04f 0200 	mov.w	r2, #0
 8009ec8:	00e2      	lsls	r2, r4, #3
 8009eca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009ece:	00d9      	lsls	r1, r3, #3
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	4614      	mov	r4, r2
 8009ed4:	195b      	adds	r3, r3, r5
 8009ed6:	eb44 0406 	adc.w	r4, r4, r6
 8009eda:	f04f 0100 	mov.w	r1, #0
 8009ede:	f04f 0200 	mov.w	r2, #0
 8009ee2:	0262      	lsls	r2, r4, #9
 8009ee4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009ee8:	0259      	lsls	r1, r3, #9
 8009eea:	460b      	mov	r3, r1
 8009eec:	4614      	mov	r4, r2
 8009eee:	4618      	mov	r0, r3
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f04f 0400 	mov.w	r4, #0
 8009ef8:	461a      	mov	r2, r3
 8009efa:	4623      	mov	r3, r4
 8009efc:	f7f6 f970 	bl	80001e0 <__aeabi_uldivmod>
 8009f00:	4603      	mov	r3, r0
 8009f02:	460c      	mov	r4, r1
 8009f04:	60fb      	str	r3, [r7, #12]
 8009f06:	e049      	b.n	8009f9c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f08:	4b2f      	ldr	r3, [pc, #188]	; (8009fc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	099b      	lsrs	r3, r3, #6
 8009f0e:	f04f 0400 	mov.w	r4, #0
 8009f12:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009f16:	f04f 0200 	mov.w	r2, #0
 8009f1a:	ea03 0501 	and.w	r5, r3, r1
 8009f1e:	ea04 0602 	and.w	r6, r4, r2
 8009f22:	4629      	mov	r1, r5
 8009f24:	4632      	mov	r2, r6
 8009f26:	f04f 0300 	mov.w	r3, #0
 8009f2a:	f04f 0400 	mov.w	r4, #0
 8009f2e:	0154      	lsls	r4, r2, #5
 8009f30:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009f34:	014b      	lsls	r3, r1, #5
 8009f36:	4619      	mov	r1, r3
 8009f38:	4622      	mov	r2, r4
 8009f3a:	1b49      	subs	r1, r1, r5
 8009f3c:	eb62 0206 	sbc.w	r2, r2, r6
 8009f40:	f04f 0300 	mov.w	r3, #0
 8009f44:	f04f 0400 	mov.w	r4, #0
 8009f48:	0194      	lsls	r4, r2, #6
 8009f4a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009f4e:	018b      	lsls	r3, r1, #6
 8009f50:	1a5b      	subs	r3, r3, r1
 8009f52:	eb64 0402 	sbc.w	r4, r4, r2
 8009f56:	f04f 0100 	mov.w	r1, #0
 8009f5a:	f04f 0200 	mov.w	r2, #0
 8009f5e:	00e2      	lsls	r2, r4, #3
 8009f60:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009f64:	00d9      	lsls	r1, r3, #3
 8009f66:	460b      	mov	r3, r1
 8009f68:	4614      	mov	r4, r2
 8009f6a:	195b      	adds	r3, r3, r5
 8009f6c:	eb44 0406 	adc.w	r4, r4, r6
 8009f70:	f04f 0100 	mov.w	r1, #0
 8009f74:	f04f 0200 	mov.w	r2, #0
 8009f78:	02a2      	lsls	r2, r4, #10
 8009f7a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009f7e:	0299      	lsls	r1, r3, #10
 8009f80:	460b      	mov	r3, r1
 8009f82:	4614      	mov	r4, r2
 8009f84:	4618      	mov	r0, r3
 8009f86:	4621      	mov	r1, r4
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f04f 0400 	mov.w	r4, #0
 8009f8e:	461a      	mov	r2, r3
 8009f90:	4623      	mov	r3, r4
 8009f92:	f7f6 f925 	bl	80001e0 <__aeabi_uldivmod>
 8009f96:	4603      	mov	r3, r0
 8009f98:	460c      	mov	r4, r1
 8009f9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009f9c:	4b0a      	ldr	r3, [pc, #40]	; (8009fc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	0c1b      	lsrs	r3, r3, #16
 8009fa2:	f003 0303 	and.w	r3, r3, #3
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	005b      	lsls	r3, r3, #1
 8009faa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fb4:	60bb      	str	r3, [r7, #8]
      break;
 8009fb6:	e002      	b.n	8009fbe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009fb8:	4b04      	ldr	r3, [pc, #16]	; (8009fcc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009fba:	60bb      	str	r3, [r7, #8]
      break;
 8009fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009fbe:	68bb      	ldr	r3, [r7, #8]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fc8:	40023800 	.word	0x40023800
 8009fcc:	00f42400 	.word	0x00f42400
 8009fd0:	007a1200 	.word	0x007a1200

08009fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009fd8:	4b03      	ldr	r3, [pc, #12]	; (8009fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8009fda:	681b      	ldr	r3, [r3, #0]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	20000008 	.word	0x20000008

08009fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009ff0:	f7ff fff0 	bl	8009fd4 <HAL_RCC_GetHCLKFreq>
 8009ff4:	4601      	mov	r1, r0
 8009ff6:	4b05      	ldr	r3, [pc, #20]	; (800a00c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	0a9b      	lsrs	r3, r3, #10
 8009ffc:	f003 0307 	and.w	r3, r3, #7
 800a000:	4a03      	ldr	r2, [pc, #12]	; (800a010 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a002:	5cd3      	ldrb	r3, [r2, r3]
 800a004:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a008:	4618      	mov	r0, r3
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	40023800 	.word	0x40023800
 800a010:	0800fad8 	.word	0x0800fad8

0800a014 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	220f      	movs	r2, #15
 800a022:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a024:	4b12      	ldr	r3, [pc, #72]	; (800a070 <HAL_RCC_GetClockConfig+0x5c>)
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	f003 0203 	and.w	r2, r3, #3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a030:	4b0f      	ldr	r3, [pc, #60]	; (800a070 <HAL_RCC_GetClockConfig+0x5c>)
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a03c:	4b0c      	ldr	r3, [pc, #48]	; (800a070 <HAL_RCC_GetClockConfig+0x5c>)
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a048:	4b09      	ldr	r3, [pc, #36]	; (800a070 <HAL_RCC_GetClockConfig+0x5c>)
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	08db      	lsrs	r3, r3, #3
 800a04e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a056:	4b07      	ldr	r3, [pc, #28]	; (800a074 <HAL_RCC_GetClockConfig+0x60>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f003 020f 	and.w	r2, r3, #15
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	601a      	str	r2, [r3, #0]
}
 800a062:	bf00      	nop
 800a064:	370c      	adds	r7, #12
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	40023800 	.word	0x40023800
 800a074:	40023c00 	.word	0x40023c00

0800a078 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e01d      	b.n	800a0c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a090:	b2db      	uxtb	r3, r3
 800a092:	2b00      	cmp	r3, #0
 800a094:	d106      	bne.n	800a0a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f815 	bl	800a0ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2202      	movs	r2, #2
 800a0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	3304      	adds	r3, #4
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	4610      	mov	r0, r2
 800a0b8:	f000 f968 	bl	800a38c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3708      	adds	r7, #8
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b083      	sub	sp, #12
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a0d6:	bf00      	nop
 800a0d8:	370c      	adds	r7, #12
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	b085      	sub	sp, #20
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68da      	ldr	r2, [r3, #12]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f042 0201 	orr.w	r2, r2, #1
 800a0f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	f003 0307 	and.w	r3, r3, #7
 800a104:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2b06      	cmp	r3, #6
 800a10a:	d007      	beq.n	800a11c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f042 0201 	orr.w	r2, r2, #1
 800a11a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3714      	adds	r7, #20
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b082      	sub	sp, #8
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	f003 0302 	and.w	r3, r3, #2
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d122      	bne.n	800a186 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	f003 0302 	and.w	r3, r3, #2
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d11b      	bne.n	800a186 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f06f 0202 	mvn.w	r2, #2
 800a156:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	f003 0303 	and.w	r3, r3, #3
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d003      	beq.n	800a174 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 f8ee 	bl	800a34e <HAL_TIM_IC_CaptureCallback>
 800a172:	e005      	b.n	800a180 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 f8e0 	bl	800a33a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 f8f1 	bl	800a362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	f003 0304 	and.w	r3, r3, #4
 800a190:	2b04      	cmp	r3, #4
 800a192:	d122      	bne.n	800a1da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	f003 0304 	and.w	r3, r3, #4
 800a19e:	2b04      	cmp	r3, #4
 800a1a0:	d11b      	bne.n	800a1da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f06f 0204 	mvn.w	r2, #4
 800a1aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d003      	beq.n	800a1c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 f8c4 	bl	800a34e <HAL_TIM_IC_CaptureCallback>
 800a1c6:	e005      	b.n	800a1d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f8b6 	bl	800a33a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f8c7 	bl	800a362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	f003 0308 	and.w	r3, r3, #8
 800a1e4:	2b08      	cmp	r3, #8
 800a1e6:	d122      	bne.n	800a22e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	f003 0308 	and.w	r3, r3, #8
 800a1f2:	2b08      	cmp	r3, #8
 800a1f4:	d11b      	bne.n	800a22e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f06f 0208 	mvn.w	r2, #8
 800a1fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2204      	movs	r2, #4
 800a204:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	69db      	ldr	r3, [r3, #28]
 800a20c:	f003 0303 	and.w	r3, r3, #3
 800a210:	2b00      	cmp	r3, #0
 800a212:	d003      	beq.n	800a21c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f89a 	bl	800a34e <HAL_TIM_IC_CaptureCallback>
 800a21a:	e005      	b.n	800a228 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f88c 	bl	800a33a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f89d 	bl	800a362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	f003 0310 	and.w	r3, r3, #16
 800a238:	2b10      	cmp	r3, #16
 800a23a:	d122      	bne.n	800a282 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	f003 0310 	and.w	r3, r3, #16
 800a246:	2b10      	cmp	r3, #16
 800a248:	d11b      	bne.n	800a282 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f06f 0210 	mvn.w	r2, #16
 800a252:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2208      	movs	r2, #8
 800a258:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	69db      	ldr	r3, [r3, #28]
 800a260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a264:	2b00      	cmp	r3, #0
 800a266:	d003      	beq.n	800a270 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 f870 	bl	800a34e <HAL_TIM_IC_CaptureCallback>
 800a26e:	e005      	b.n	800a27c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f862 	bl	800a33a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 f873 	bl	800a362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	f003 0301 	and.w	r3, r3, #1
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d10e      	bne.n	800a2ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	f003 0301 	and.w	r3, r3, #1
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d107      	bne.n	800a2ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f06f 0201 	mvn.w	r2, #1
 800a2a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f7f6 fd0d 	bl	8000cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2b8:	2b80      	cmp	r3, #128	; 0x80
 800a2ba:	d10e      	bne.n	800a2da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2c6:	2b80      	cmp	r3, #128	; 0x80
 800a2c8:	d107      	bne.n	800a2da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a2d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 f903 	bl	800a4e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e4:	2b40      	cmp	r3, #64	; 0x40
 800a2e6:	d10e      	bne.n	800a306 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f2:	2b40      	cmp	r3, #64	; 0x40
 800a2f4:	d107      	bne.n	800a306 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a2fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f838 	bl	800a376 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	f003 0320 	and.w	r3, r3, #32
 800a310:	2b20      	cmp	r3, #32
 800a312:	d10e      	bne.n	800a332 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	f003 0320 	and.w	r3, r3, #32
 800a31e:	2b20      	cmp	r3, #32
 800a320:	d107      	bne.n	800a332 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f06f 0220 	mvn.w	r2, #32
 800a32a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 f8cd 	bl	800a4cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a332:	bf00      	nop
 800a334:	3708      	adds	r7, #8
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a33a:	b480      	push	{r7}
 800a33c:	b083      	sub	sp, #12
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a342:	bf00      	nop
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a34e:	b480      	push	{r7}
 800a350:	b083      	sub	sp, #12
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a356:	bf00      	nop
 800a358:	370c      	adds	r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a362:	b480      	push	{r7}
 800a364:	b083      	sub	sp, #12
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a36a:	bf00      	nop
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a376:	b480      	push	{r7}
 800a378:	b083      	sub	sp, #12
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a37e:	bf00      	nop
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
	...

0800a38c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a40      	ldr	r2, [pc, #256]	; (800a4a0 <TIM_Base_SetConfig+0x114>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d013      	beq.n	800a3cc <TIM_Base_SetConfig+0x40>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3aa:	d00f      	beq.n	800a3cc <TIM_Base_SetConfig+0x40>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a3d      	ldr	r2, [pc, #244]	; (800a4a4 <TIM_Base_SetConfig+0x118>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d00b      	beq.n	800a3cc <TIM_Base_SetConfig+0x40>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a3c      	ldr	r2, [pc, #240]	; (800a4a8 <TIM_Base_SetConfig+0x11c>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d007      	beq.n	800a3cc <TIM_Base_SetConfig+0x40>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a3b      	ldr	r2, [pc, #236]	; (800a4ac <TIM_Base_SetConfig+0x120>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d003      	beq.n	800a3cc <TIM_Base_SetConfig+0x40>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a3a      	ldr	r2, [pc, #232]	; (800a4b0 <TIM_Base_SetConfig+0x124>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d108      	bne.n	800a3de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a2f      	ldr	r2, [pc, #188]	; (800a4a0 <TIM_Base_SetConfig+0x114>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d02b      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3ec:	d027      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a2c      	ldr	r2, [pc, #176]	; (800a4a4 <TIM_Base_SetConfig+0x118>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d023      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a2b      	ldr	r2, [pc, #172]	; (800a4a8 <TIM_Base_SetConfig+0x11c>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d01f      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a2a      	ldr	r2, [pc, #168]	; (800a4ac <TIM_Base_SetConfig+0x120>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d01b      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a29      	ldr	r2, [pc, #164]	; (800a4b0 <TIM_Base_SetConfig+0x124>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d017      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a28      	ldr	r2, [pc, #160]	; (800a4b4 <TIM_Base_SetConfig+0x128>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d013      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a27      	ldr	r2, [pc, #156]	; (800a4b8 <TIM_Base_SetConfig+0x12c>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d00f      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a26      	ldr	r2, [pc, #152]	; (800a4bc <TIM_Base_SetConfig+0x130>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d00b      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a25      	ldr	r2, [pc, #148]	; (800a4c0 <TIM_Base_SetConfig+0x134>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d007      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a24      	ldr	r2, [pc, #144]	; (800a4c4 <TIM_Base_SetConfig+0x138>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d003      	beq.n	800a43e <TIM_Base_SetConfig+0xb2>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a23      	ldr	r2, [pc, #140]	; (800a4c8 <TIM_Base_SetConfig+0x13c>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d108      	bne.n	800a450 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	695b      	ldr	r3, [r3, #20]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	68fa      	ldr	r2, [r7, #12]
 800a462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	689a      	ldr	r2, [r3, #8]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a0a      	ldr	r2, [pc, #40]	; (800a4a0 <TIM_Base_SetConfig+0x114>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d003      	beq.n	800a484 <TIM_Base_SetConfig+0xf8>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	4a0c      	ldr	r2, [pc, #48]	; (800a4b0 <TIM_Base_SetConfig+0x124>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d103      	bne.n	800a48c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	691a      	ldr	r2, [r3, #16]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	615a      	str	r2, [r3, #20]
}
 800a492:	bf00      	nop
 800a494:	3714      	adds	r7, #20
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	40010000 	.word	0x40010000
 800a4a4:	40000400 	.word	0x40000400
 800a4a8:	40000800 	.word	0x40000800
 800a4ac:	40000c00 	.word	0x40000c00
 800a4b0:	40010400 	.word	0x40010400
 800a4b4:	40014000 	.word	0x40014000
 800a4b8:	40014400 	.word	0x40014400
 800a4bc:	40014800 	.word	0x40014800
 800a4c0:	40001800 	.word	0x40001800
 800a4c4:	40001c00 	.word	0x40001c00
 800a4c8:	40002000 	.word	0x40002000

0800a4cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b084      	sub	sp, #16
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	f107 001c 	add.w	r0, r7, #28
 800a502:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d122      	bne.n	800a552 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a510:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a536:	2b01      	cmp	r3, #1
 800a538:	d105      	bne.n	800a546 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f001 fac6 	bl	800bad8 <USB_CoreReset>
 800a54c:	4603      	mov	r3, r0
 800a54e:	73fb      	strb	r3, [r7, #15]
 800a550:	e01a      	b.n	800a588 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f001 faba 	bl	800bad8 <USB_CoreReset>
 800a564:	4603      	mov	r3, r0
 800a566:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d106      	bne.n	800a57c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a572:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	639a      	str	r2, [r3, #56]	; 0x38
 800a57a:	e005      	b.n	800a588 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a580:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d10b      	bne.n	800a5a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	f043 0206 	orr.w	r2, r3, #6
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	f043 0220 	orr.w	r2, r3, #32
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3710      	adds	r7, #16
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5b2:	b004      	add	sp, #16
 800a5b4:	4770      	bx	lr
	...

0800a5b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b087      	sub	sp, #28
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a5c6:	79fb      	ldrb	r3, [r7, #7]
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	d165      	bne.n	800a698 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	4a41      	ldr	r2, [pc, #260]	; (800a6d4 <USB_SetTurnaroundTime+0x11c>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d906      	bls.n	800a5e2 <USB_SetTurnaroundTime+0x2a>
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	4a40      	ldr	r2, [pc, #256]	; (800a6d8 <USB_SetTurnaroundTime+0x120>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d802      	bhi.n	800a5e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a5dc:	230f      	movs	r3, #15
 800a5de:	617b      	str	r3, [r7, #20]
 800a5e0:	e062      	b.n	800a6a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	4a3c      	ldr	r2, [pc, #240]	; (800a6d8 <USB_SetTurnaroundTime+0x120>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d906      	bls.n	800a5f8 <USB_SetTurnaroundTime+0x40>
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	4a3b      	ldr	r2, [pc, #236]	; (800a6dc <USB_SetTurnaroundTime+0x124>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d802      	bhi.n	800a5f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a5f2:	230e      	movs	r3, #14
 800a5f4:	617b      	str	r3, [r7, #20]
 800a5f6:	e057      	b.n	800a6a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	4a38      	ldr	r2, [pc, #224]	; (800a6dc <USB_SetTurnaroundTime+0x124>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d906      	bls.n	800a60e <USB_SetTurnaroundTime+0x56>
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	4a37      	ldr	r2, [pc, #220]	; (800a6e0 <USB_SetTurnaroundTime+0x128>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d802      	bhi.n	800a60e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a608:	230d      	movs	r3, #13
 800a60a:	617b      	str	r3, [r7, #20]
 800a60c:	e04c      	b.n	800a6a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	4a33      	ldr	r2, [pc, #204]	; (800a6e0 <USB_SetTurnaroundTime+0x128>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d906      	bls.n	800a624 <USB_SetTurnaroundTime+0x6c>
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	4a32      	ldr	r2, [pc, #200]	; (800a6e4 <USB_SetTurnaroundTime+0x12c>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d802      	bhi.n	800a624 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a61e:	230c      	movs	r3, #12
 800a620:	617b      	str	r3, [r7, #20]
 800a622:	e041      	b.n	800a6a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	4a2f      	ldr	r2, [pc, #188]	; (800a6e4 <USB_SetTurnaroundTime+0x12c>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d906      	bls.n	800a63a <USB_SetTurnaroundTime+0x82>
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	4a2e      	ldr	r2, [pc, #184]	; (800a6e8 <USB_SetTurnaroundTime+0x130>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d802      	bhi.n	800a63a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a634:	230b      	movs	r3, #11
 800a636:	617b      	str	r3, [r7, #20]
 800a638:	e036      	b.n	800a6a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	4a2a      	ldr	r2, [pc, #168]	; (800a6e8 <USB_SetTurnaroundTime+0x130>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d906      	bls.n	800a650 <USB_SetTurnaroundTime+0x98>
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	4a29      	ldr	r2, [pc, #164]	; (800a6ec <USB_SetTurnaroundTime+0x134>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d802      	bhi.n	800a650 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a64a:	230a      	movs	r3, #10
 800a64c:	617b      	str	r3, [r7, #20]
 800a64e:	e02b      	b.n	800a6a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	4a26      	ldr	r2, [pc, #152]	; (800a6ec <USB_SetTurnaroundTime+0x134>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d906      	bls.n	800a666 <USB_SetTurnaroundTime+0xae>
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	4a25      	ldr	r2, [pc, #148]	; (800a6f0 <USB_SetTurnaroundTime+0x138>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d802      	bhi.n	800a666 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a660:	2309      	movs	r3, #9
 800a662:	617b      	str	r3, [r7, #20]
 800a664:	e020      	b.n	800a6a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	4a21      	ldr	r2, [pc, #132]	; (800a6f0 <USB_SetTurnaroundTime+0x138>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d906      	bls.n	800a67c <USB_SetTurnaroundTime+0xc4>
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	4a20      	ldr	r2, [pc, #128]	; (800a6f4 <USB_SetTurnaroundTime+0x13c>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d802      	bhi.n	800a67c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a676:	2308      	movs	r3, #8
 800a678:	617b      	str	r3, [r7, #20]
 800a67a:	e015      	b.n	800a6a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	4a1d      	ldr	r2, [pc, #116]	; (800a6f4 <USB_SetTurnaroundTime+0x13c>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d906      	bls.n	800a692 <USB_SetTurnaroundTime+0xda>
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	4a1c      	ldr	r2, [pc, #112]	; (800a6f8 <USB_SetTurnaroundTime+0x140>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d802      	bhi.n	800a692 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a68c:	2307      	movs	r3, #7
 800a68e:	617b      	str	r3, [r7, #20]
 800a690:	e00a      	b.n	800a6a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a692:	2306      	movs	r3, #6
 800a694:	617b      	str	r3, [r7, #20]
 800a696:	e007      	b.n	800a6a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a698:	79fb      	ldrb	r3, [r7, #7]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d102      	bne.n	800a6a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a69e:	2309      	movs	r3, #9
 800a6a0:	617b      	str	r3, [r7, #20]
 800a6a2:	e001      	b.n	800a6a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a6a4:	2309      	movs	r3, #9
 800a6a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	68da      	ldr	r2, [r3, #12]
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	029b      	lsls	r3, r3, #10
 800a6bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a6c0:	431a      	orrs	r2, r3
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	371c      	adds	r7, #28
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr
 800a6d4:	00d8acbf 	.word	0x00d8acbf
 800a6d8:	00e4e1bf 	.word	0x00e4e1bf
 800a6dc:	00f423ff 	.word	0x00f423ff
 800a6e0:	0106737f 	.word	0x0106737f
 800a6e4:	011a499f 	.word	0x011a499f
 800a6e8:	01312cff 	.word	0x01312cff
 800a6ec:	014ca43f 	.word	0x014ca43f
 800a6f0:	016e35ff 	.word	0x016e35ff
 800a6f4:	01a6ab1f 	.word	0x01a6ab1f
 800a6f8:	01e847ff 	.word	0x01e847ff

0800a6fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	f043 0201 	orr.w	r2, r3, #1
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	370c      	adds	r7, #12
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr

0800a71e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a71e:	b480      	push	{r7}
 800a720:	b083      	sub	sp, #12
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	f023 0201 	bic.w	r2, r3, #1
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a732:	2300      	movs	r3, #0
}
 800a734:	4618      	mov	r0, r3
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	460b      	mov	r3, r1
 800a74a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a758:	78fb      	ldrb	r3, [r7, #3]
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d106      	bne.n	800a76c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	60da      	str	r2, [r3, #12]
 800a76a:	e00b      	b.n	800a784 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a76c:	78fb      	ldrb	r3, [r7, #3]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d106      	bne.n	800a780 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	60da      	str	r2, [r3, #12]
 800a77e:	e001      	b.n	800a784 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	e003      	b.n	800a78c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a784:	2032      	movs	r0, #50	; 0x32
 800a786:	f7fa f9ed 	bl	8004b64 <HAL_Delay>

  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3708      	adds	r7, #8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a794:	b084      	sub	sp, #16
 800a796:	b580      	push	{r7, lr}
 800a798:	b086      	sub	sp, #24
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
 800a79e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a7a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	613b      	str	r3, [r7, #16]
 800a7b2:	e009      	b.n	800a7c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	3340      	adds	r3, #64	; 0x40
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	4413      	add	r3, r2
 800a7be:	2200      	movs	r2, #0
 800a7c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	613b      	str	r3, [r7, #16]
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	2b0e      	cmp	r3, #14
 800a7cc:	d9f2      	bls.n	800a7b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a7ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d11c      	bne.n	800a80e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7e2:	f043 0302 	orr.w	r3, r3, #2
 800a7e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a804:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	639a      	str	r2, [r3, #56]	; 0x38
 800a80c:	e00b      	b.n	800a826 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a812:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a81e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a82c:	461a      	mov	r2, r3
 800a82e:	2300      	movs	r3, #0
 800a830:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a838:	4619      	mov	r1, r3
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a840:	461a      	mov	r2, r3
 800a842:	680b      	ldr	r3, [r1, #0]
 800a844:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d10c      	bne.n	800a866 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d104      	bne.n	800a85c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a852:	2100      	movs	r1, #0
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f949 	bl	800aaec <USB_SetDevSpeed>
 800a85a:	e008      	b.n	800a86e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a85c:	2101      	movs	r1, #1
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f944 	bl	800aaec <USB_SetDevSpeed>
 800a864:	e003      	b.n	800a86e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a866:	2103      	movs	r1, #3
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 f93f 	bl	800aaec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a86e:	2110      	movs	r1, #16
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 f8f3 	bl	800aa5c <USB_FlushTxFifo>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d001      	beq.n	800a880 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 f911 	bl	800aaa8 <USB_FlushRxFifo>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d001      	beq.n	800a890 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a88c:	2301      	movs	r3, #1
 800a88e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a896:	461a      	mov	r2, r3
 800a898:	2300      	movs	r3, #0
 800a89a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	613b      	str	r3, [r7, #16]
 800a8b8:	e043      	b.n	800a942 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	015a      	lsls	r2, r3, #5
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8d0:	d118      	bne.n	800a904 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d10a      	bne.n	800a8ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	015a      	lsls	r2, r3, #5
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	4413      	add	r3, r2
 800a8e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a8ea:	6013      	str	r3, [r2, #0]
 800a8ec:	e013      	b.n	800a916 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	015a      	lsls	r2, r3, #5
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a900:	6013      	str	r3, [r2, #0]
 800a902:	e008      	b.n	800a916 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	015a      	lsls	r2, r3, #5
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	4413      	add	r3, r2
 800a90c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a910:	461a      	mov	r2, r3
 800a912:	2300      	movs	r3, #0
 800a914:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	015a      	lsls	r2, r3, #5
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	4413      	add	r3, r2
 800a91e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a922:	461a      	mov	r2, r3
 800a924:	2300      	movs	r3, #0
 800a926:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	015a      	lsls	r2, r3, #5
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	4413      	add	r3, r2
 800a930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a934:	461a      	mov	r2, r3
 800a936:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a93a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	3301      	adds	r3, #1
 800a940:	613b      	str	r3, [r7, #16]
 800a942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a944:	693a      	ldr	r2, [r7, #16]
 800a946:	429a      	cmp	r2, r3
 800a948:	d3b7      	bcc.n	800a8ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a94a:	2300      	movs	r3, #0
 800a94c:	613b      	str	r3, [r7, #16]
 800a94e:	e043      	b.n	800a9d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	015a      	lsls	r2, r3, #5
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	4413      	add	r3, r2
 800a958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a962:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a966:	d118      	bne.n	800a99a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10a      	bne.n	800a984 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	015a      	lsls	r2, r3, #5
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	4413      	add	r3, r2
 800a976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a97a:	461a      	mov	r2, r3
 800a97c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a980:	6013      	str	r3, [r2, #0]
 800a982:	e013      	b.n	800a9ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	015a      	lsls	r2, r3, #5
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	4413      	add	r3, r2
 800a98c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a990:	461a      	mov	r2, r3
 800a992:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a996:	6013      	str	r3, [r2, #0]
 800a998:	e008      	b.n	800a9ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	015a      	lsls	r2, r3, #5
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	015a      	lsls	r2, r3, #5
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	015a      	lsls	r2, r3, #5
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a9d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	613b      	str	r3, [r7, #16]
 800a9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9da:	693a      	ldr	r2, [r7, #16]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d3b7      	bcc.n	800a950 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9e6:	691b      	ldr	r3, [r3, #16]
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aa00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aa02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d105      	bne.n	800aa14 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	699b      	ldr	r3, [r3, #24]
 800aa0c:	f043 0210 	orr.w	r2, r3, #16
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	699a      	ldr	r2, [r3, #24]
 800aa18:	4b0f      	ldr	r3, [pc, #60]	; (800aa58 <USB_DevInit+0x2c4>)
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aa20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d005      	beq.n	800aa32 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	699b      	ldr	r3, [r3, #24]
 800aa2a:	f043 0208 	orr.w	r2, r3, #8
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aa32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d107      	bne.n	800aa48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa40:	f043 0304 	orr.w	r3, r3, #4
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aa48:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3718      	adds	r7, #24
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa54:	b004      	add	sp, #16
 800aa56:	4770      	bx	lr
 800aa58:	803c3800 	.word	0x803c3800

0800aa5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800aa66:	2300      	movs	r3, #0
 800aa68:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	019b      	lsls	r3, r3, #6
 800aa6e:	f043 0220 	orr.w	r2, r3, #32
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	60fb      	str	r3, [r7, #12]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	4a09      	ldr	r2, [pc, #36]	; (800aaa4 <USB_FlushTxFifo+0x48>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d901      	bls.n	800aa88 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800aa84:	2303      	movs	r3, #3
 800aa86:	e006      	b.n	800aa96 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	f003 0320 	and.w	r3, r3, #32
 800aa90:	2b20      	cmp	r3, #32
 800aa92:	d0f0      	beq.n	800aa76 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3714      	adds	r7, #20
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	00030d40 	.word	0x00030d40

0800aaa8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800aab0:	2300      	movs	r3, #0
 800aab2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2210      	movs	r2, #16
 800aab8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	3301      	adds	r3, #1
 800aabe:	60fb      	str	r3, [r7, #12]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	4a09      	ldr	r2, [pc, #36]	; (800aae8 <USB_FlushRxFifo+0x40>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d901      	bls.n	800aacc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800aac8:	2303      	movs	r3, #3
 800aaca:	e006      	b.n	800aada <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	691b      	ldr	r3, [r3, #16]
 800aad0:	f003 0310 	and.w	r3, r3, #16
 800aad4:	2b10      	cmp	r3, #16
 800aad6:	d0f0      	beq.n	800aaba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800aad8:	2300      	movs	r3, #0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3714      	adds	r7, #20
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop
 800aae8:	00030d40 	.word	0x00030d40

0800aaec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	78fb      	ldrb	r3, [r7, #3]
 800ab06:	68f9      	ldr	r1, [r7, #12]
 800ab08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ab10:	2300      	movs	r3, #0
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3714      	adds	r7, #20
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr

0800ab1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ab1e:	b480      	push	{r7}
 800ab20:	b087      	sub	sp, #28
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	f003 0306 	and.w	r3, r3, #6
 800ab36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d102      	bne.n	800ab44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	75fb      	strb	r3, [r7, #23]
 800ab42:	e00a      	b.n	800ab5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d002      	beq.n	800ab50 <USB_GetDevSpeed+0x32>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2b06      	cmp	r3, #6
 800ab4e:	d102      	bne.n	800ab56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ab50:	2302      	movs	r3, #2
 800ab52:	75fb      	strb	r3, [r7, #23]
 800ab54:	e001      	b.n	800ab5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ab56:	230f      	movs	r3, #15
 800ab58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ab5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	371c      	adds	r7, #28
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	785b      	ldrb	r3, [r3, #1]
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d13a      	bne.n	800abfa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab8a:	69da      	ldr	r2, [r3, #28]
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	f003 030f 	and.w	r3, r3, #15
 800ab94:	2101      	movs	r1, #1
 800ab96:	fa01 f303 	lsl.w	r3, r1, r3
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	68f9      	ldr	r1, [r7, #12]
 800ab9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aba2:	4313      	orrs	r3, r2
 800aba4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	015a      	lsls	r2, r3, #5
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	4413      	add	r3, r2
 800abae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d155      	bne.n	800ac68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	015a      	lsls	r2, r3, #5
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	4413      	add	r3, r2
 800abc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	78db      	ldrb	r3, [r3, #3]
 800abd6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800abd8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	059b      	lsls	r3, r3, #22
 800abde:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800abe0:	4313      	orrs	r3, r2
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	0151      	lsls	r1, r2, #5
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	440a      	add	r2, r1
 800abea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abf6:	6013      	str	r3, [r2, #0]
 800abf8:	e036      	b.n	800ac68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac00:	69da      	ldr	r2, [r3, #28]
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	f003 030f 	and.w	r3, r3, #15
 800ac0a:	2101      	movs	r1, #1
 800ac0c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac10:	041b      	lsls	r3, r3, #16
 800ac12:	68f9      	ldr	r1, [r7, #12]
 800ac14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	015a      	lsls	r2, r3, #5
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	4413      	add	r3, r2
 800ac24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d11a      	bne.n	800ac68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	015a      	lsls	r2, r3, #5
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	4413      	add	r3, r2
 800ac3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	78db      	ldrb	r3, [r3, #3]
 800ac4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ac4e:	430b      	orrs	r3, r1
 800ac50:	4313      	orrs	r3, r2
 800ac52:	68ba      	ldr	r2, [r7, #8]
 800ac54:	0151      	lsls	r1, r2, #5
 800ac56:	68fa      	ldr	r2, [r7, #12]
 800ac58:	440a      	add	r2, r1
 800ac5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ac68:	2300      	movs	r3, #0
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3714      	adds	r7, #20
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr
	...

0800ac78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	785b      	ldrb	r3, [r3, #1]
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d161      	bne.n	800ad58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	015a      	lsls	r2, r3, #5
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	4413      	add	r3, r2
 800ac9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acaa:	d11f      	bne.n	800acec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	015a      	lsls	r2, r3, #5
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	4413      	add	r3, r2
 800acb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	68ba      	ldr	r2, [r7, #8]
 800acbc:	0151      	lsls	r1, r2, #5
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	440a      	add	r2, r1
 800acc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800acca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	015a      	lsls	r2, r3, #5
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	4413      	add	r3, r2
 800acd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	68ba      	ldr	r2, [r7, #8]
 800acdc:	0151      	lsls	r1, r2, #5
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	440a      	add	r2, r1
 800ace2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ace6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800acea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	f003 030f 	and.w	r3, r3, #15
 800acfc:	2101      	movs	r1, #1
 800acfe:	fa01 f303 	lsl.w	r3, r1, r3
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	43db      	mvns	r3, r3
 800ad06:	68f9      	ldr	r1, [r7, #12]
 800ad08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad0c:	4013      	ands	r3, r2
 800ad0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad16:	69da      	ldr	r2, [r3, #28]
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	f003 030f 	and.w	r3, r3, #15
 800ad20:	2101      	movs	r1, #1
 800ad22:	fa01 f303 	lsl.w	r3, r1, r3
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	43db      	mvns	r3, r3
 800ad2a:	68f9      	ldr	r1, [r7, #12]
 800ad2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad30:	4013      	ands	r3, r2
 800ad32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	015a      	lsls	r2, r3, #5
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	4413      	add	r3, r2
 800ad3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	0159      	lsls	r1, r3, #5
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	440b      	add	r3, r1
 800ad4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad4e:	4619      	mov	r1, r3
 800ad50:	4b35      	ldr	r3, [pc, #212]	; (800ae28 <USB_DeactivateEndpoint+0x1b0>)
 800ad52:	4013      	ands	r3, r2
 800ad54:	600b      	str	r3, [r1, #0]
 800ad56:	e060      	b.n	800ae1a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	015a      	lsls	r2, r3, #5
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	4413      	add	r3, r2
 800ad60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad6e:	d11f      	bne.n	800adb0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	015a      	lsls	r2, r3, #5
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	4413      	add	r3, r2
 800ad78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	68ba      	ldr	r2, [r7, #8]
 800ad80:	0151      	lsls	r1, r2, #5
 800ad82:	68fa      	ldr	r2, [r7, #12]
 800ad84:	440a      	add	r2, r1
 800ad86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ad8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	015a      	lsls	r2, r3, #5
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	4413      	add	r3, r2
 800ad98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68ba      	ldr	r2, [r7, #8]
 800ada0:	0151      	lsls	r1, r2, #5
 800ada2:	68fa      	ldr	r2, [r7, #12]
 800ada4:	440a      	add	r2, r1
 800ada6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800adae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	f003 030f 	and.w	r3, r3, #15
 800adc0:	2101      	movs	r1, #1
 800adc2:	fa01 f303 	lsl.w	r3, r1, r3
 800adc6:	041b      	lsls	r3, r3, #16
 800adc8:	43db      	mvns	r3, r3
 800adca:	68f9      	ldr	r1, [r7, #12]
 800adcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800add0:	4013      	ands	r3, r2
 800add2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adda:	69da      	ldr	r2, [r3, #28]
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	f003 030f 	and.w	r3, r3, #15
 800ade4:	2101      	movs	r1, #1
 800ade6:	fa01 f303 	lsl.w	r3, r1, r3
 800adea:	041b      	lsls	r3, r3, #16
 800adec:	43db      	mvns	r3, r3
 800adee:	68f9      	ldr	r1, [r7, #12]
 800adf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adf4:	4013      	ands	r3, r2
 800adf6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	015a      	lsls	r2, r3, #5
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	4413      	add	r3, r2
 800ae00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	0159      	lsls	r1, r3, #5
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	440b      	add	r3, r1
 800ae0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae12:	4619      	mov	r1, r3
 800ae14:	4b05      	ldr	r3, [pc, #20]	; (800ae2c <USB_DeactivateEndpoint+0x1b4>)
 800ae16:	4013      	ands	r3, r2
 800ae18:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3714      	adds	r7, #20
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr
 800ae28:	ec337800 	.word	0xec337800
 800ae2c:	eff37800 	.word	0xeff37800

0800ae30 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b08a      	sub	sp, #40	; 0x28
 800ae34:	af02      	add	r7, sp, #8
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	785b      	ldrb	r3, [r3, #1]
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	f040 815c 	bne.w	800b10a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	695b      	ldr	r3, [r3, #20]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d132      	bne.n	800aec0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	015a      	lsls	r2, r3, #5
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	4413      	add	r3, r2
 800ae62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae66:	691b      	ldr	r3, [r3, #16]
 800ae68:	69ba      	ldr	r2, [r7, #24]
 800ae6a:	0151      	lsls	r1, r2, #5
 800ae6c:	69fa      	ldr	r2, [r7, #28]
 800ae6e:	440a      	add	r2, r1
 800ae70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	015a      	lsls	r2, r3, #5
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	4413      	add	r3, r2
 800ae86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae8a:	691b      	ldr	r3, [r3, #16]
 800ae8c:	69ba      	ldr	r2, [r7, #24]
 800ae8e:	0151      	lsls	r1, r2, #5
 800ae90:	69fa      	ldr	r2, [r7, #28]
 800ae92:	440a      	add	r2, r1
 800ae94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	015a      	lsls	r2, r3, #5
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	4413      	add	r3, r2
 800aea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	69ba      	ldr	r2, [r7, #24]
 800aeae:	0151      	lsls	r1, r2, #5
 800aeb0:	69fa      	ldr	r2, [r7, #28]
 800aeb2:	440a      	add	r2, r1
 800aeb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aeb8:	0cdb      	lsrs	r3, r3, #19
 800aeba:	04db      	lsls	r3, r3, #19
 800aebc:	6113      	str	r3, [r2, #16]
 800aebe:	e074      	b.n	800afaa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	015a      	lsls	r2, r3, #5
 800aec4:	69fb      	ldr	r3, [r7, #28]
 800aec6:	4413      	add	r3, r2
 800aec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	69ba      	ldr	r2, [r7, #24]
 800aed0:	0151      	lsls	r1, r2, #5
 800aed2:	69fa      	ldr	r2, [r7, #28]
 800aed4:	440a      	add	r2, r1
 800aed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aeda:	0cdb      	lsrs	r3, r3, #19
 800aedc:	04db      	lsls	r3, r3, #19
 800aede:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	015a      	lsls	r2, r3, #5
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	4413      	add	r3, r2
 800aee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeec:	691b      	ldr	r3, [r3, #16]
 800aeee:	69ba      	ldr	r2, [r7, #24]
 800aef0:	0151      	lsls	r1, r2, #5
 800aef2:	69fa      	ldr	r2, [r7, #28]
 800aef4:	440a      	add	r2, r1
 800aef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aefa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aefe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800af02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800af04:	69bb      	ldr	r3, [r7, #24]
 800af06:	015a      	lsls	r2, r3, #5
 800af08:	69fb      	ldr	r3, [r7, #28]
 800af0a:	4413      	add	r3, r2
 800af0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af10:	691a      	ldr	r2, [r3, #16]
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	6959      	ldr	r1, [r3, #20]
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	440b      	add	r3, r1
 800af1c:	1e59      	subs	r1, r3, #1
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	fbb1 f3f3 	udiv	r3, r1, r3
 800af26:	04d9      	lsls	r1, r3, #19
 800af28:	4b9d      	ldr	r3, [pc, #628]	; (800b1a0 <USB_EPStartXfer+0x370>)
 800af2a:	400b      	ands	r3, r1
 800af2c:	69b9      	ldr	r1, [r7, #24]
 800af2e:	0148      	lsls	r0, r1, #5
 800af30:	69f9      	ldr	r1, [r7, #28]
 800af32:	4401      	add	r1, r0
 800af34:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800af38:	4313      	orrs	r3, r2
 800af3a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	015a      	lsls	r2, r3, #5
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	4413      	add	r3, r2
 800af44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af48:	691a      	ldr	r2, [r3, #16]
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	695b      	ldr	r3, [r3, #20]
 800af4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af52:	69b9      	ldr	r1, [r7, #24]
 800af54:	0148      	lsls	r0, r1, #5
 800af56:	69f9      	ldr	r1, [r7, #28]
 800af58:	4401      	add	r1, r0
 800af5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800af5e:	4313      	orrs	r3, r2
 800af60:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	78db      	ldrb	r3, [r3, #3]
 800af66:	2b01      	cmp	r3, #1
 800af68:	d11f      	bne.n	800afaa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	015a      	lsls	r2, r3, #5
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	4413      	add	r3, r2
 800af72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	69ba      	ldr	r2, [r7, #24]
 800af7a:	0151      	lsls	r1, r2, #5
 800af7c:	69fa      	ldr	r2, [r7, #28]
 800af7e:	440a      	add	r2, r1
 800af80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af84:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800af88:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	015a      	lsls	r2, r3, #5
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	4413      	add	r3, r2
 800af92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af96:	691b      	ldr	r3, [r3, #16]
 800af98:	69ba      	ldr	r2, [r7, #24]
 800af9a:	0151      	lsls	r1, r2, #5
 800af9c:	69fa      	ldr	r2, [r7, #28]
 800af9e:	440a      	add	r2, r1
 800afa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800afa8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800afaa:	79fb      	ldrb	r3, [r7, #7]
 800afac:	2b01      	cmp	r3, #1
 800afae:	d14b      	bne.n	800b048 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d009      	beq.n	800afcc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	015a      	lsls	r2, r3, #5
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	4413      	add	r3, r2
 800afc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afc4:	461a      	mov	r2, r3
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	691b      	ldr	r3, [r3, #16]
 800afca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	78db      	ldrb	r3, [r3, #3]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d128      	bne.n	800b026 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d110      	bne.n	800b006 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	015a      	lsls	r2, r3, #5
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	4413      	add	r3, r2
 800afec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	69ba      	ldr	r2, [r7, #24]
 800aff4:	0151      	lsls	r1, r2, #5
 800aff6:	69fa      	ldr	r2, [r7, #28]
 800aff8:	440a      	add	r2, r1
 800affa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800affe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b002:	6013      	str	r3, [r2, #0]
 800b004:	e00f      	b.n	800b026 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	015a      	lsls	r2, r3, #5
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	4413      	add	r3, r2
 800b00e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	69ba      	ldr	r2, [r7, #24]
 800b016:	0151      	lsls	r1, r2, #5
 800b018:	69fa      	ldr	r2, [r7, #28]
 800b01a:	440a      	add	r2, r1
 800b01c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b024:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	015a      	lsls	r2, r3, #5
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	4413      	add	r3, r2
 800b02e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	69ba      	ldr	r2, [r7, #24]
 800b036:	0151      	lsls	r1, r2, #5
 800b038:	69fa      	ldr	r2, [r7, #28]
 800b03a:	440a      	add	r2, r1
 800b03c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b040:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b044:	6013      	str	r3, [r2, #0]
 800b046:	e12f      	b.n	800b2a8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	015a      	lsls	r2, r3, #5
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	4413      	add	r3, r2
 800b050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	69ba      	ldr	r2, [r7, #24]
 800b058:	0151      	lsls	r1, r2, #5
 800b05a:	69fa      	ldr	r2, [r7, #28]
 800b05c:	440a      	add	r2, r1
 800b05e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b062:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b066:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	78db      	ldrb	r3, [r3, #3]
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d015      	beq.n	800b09c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	695b      	ldr	r3, [r3, #20]
 800b074:	2b00      	cmp	r3, #0
 800b076:	f000 8117 	beq.w	800b2a8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	f003 030f 	and.w	r3, r3, #15
 800b08a:	2101      	movs	r1, #1
 800b08c:	fa01 f303 	lsl.w	r3, r1, r3
 800b090:	69f9      	ldr	r1, [r7, #28]
 800b092:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b096:	4313      	orrs	r3, r2
 800b098:	634b      	str	r3, [r1, #52]	; 0x34
 800b09a:	e105      	b.n	800b2a8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d110      	bne.n	800b0ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	015a      	lsls	r2, r3, #5
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	4413      	add	r3, r2
 800b0b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	69ba      	ldr	r2, [r7, #24]
 800b0bc:	0151      	lsls	r1, r2, #5
 800b0be:	69fa      	ldr	r2, [r7, #28]
 800b0c0:	440a      	add	r2, r1
 800b0c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0ca:	6013      	str	r3, [r2, #0]
 800b0cc:	e00f      	b.n	800b0ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	015a      	lsls	r2, r3, #5
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	69ba      	ldr	r2, [r7, #24]
 800b0de:	0151      	lsls	r1, r2, #5
 800b0e0:	69fa      	ldr	r2, [r7, #28]
 800b0e2:	440a      	add	r2, r1
 800b0e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	68d9      	ldr	r1, [r3, #12]
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	781a      	ldrb	r2, [r3, #0]
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	695b      	ldr	r3, [r3, #20]
 800b0fa:	b298      	uxth	r0, r3
 800b0fc:	79fb      	ldrb	r3, [r7, #7]
 800b0fe:	9300      	str	r3, [sp, #0]
 800b100:	4603      	mov	r3, r0
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f000 fa2b 	bl	800b55e <USB_WritePacket>
 800b108:	e0ce      	b.n	800b2a8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	015a      	lsls	r2, r3, #5
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	4413      	add	r3, r2
 800b112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	69ba      	ldr	r2, [r7, #24]
 800b11a:	0151      	lsls	r1, r2, #5
 800b11c:	69fa      	ldr	r2, [r7, #28]
 800b11e:	440a      	add	r2, r1
 800b120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b124:	0cdb      	lsrs	r3, r3, #19
 800b126:	04db      	lsls	r3, r3, #19
 800b128:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	015a      	lsls	r2, r3, #5
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	4413      	add	r3, r2
 800b132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b136:	691b      	ldr	r3, [r3, #16]
 800b138:	69ba      	ldr	r2, [r7, #24]
 800b13a:	0151      	lsls	r1, r2, #5
 800b13c:	69fa      	ldr	r2, [r7, #28]
 800b13e:	440a      	add	r2, r1
 800b140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b144:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b148:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b14c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	695b      	ldr	r3, [r3, #20]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d126      	bne.n	800b1a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	015a      	lsls	r2, r3, #5
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	4413      	add	r3, r2
 800b15e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b162:	691a      	ldr	r2, [r3, #16]
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b16c:	69b9      	ldr	r1, [r7, #24]
 800b16e:	0148      	lsls	r0, r1, #5
 800b170:	69f9      	ldr	r1, [r7, #28]
 800b172:	4401      	add	r1, r0
 800b174:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b178:	4313      	orrs	r3, r2
 800b17a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	015a      	lsls	r2, r3, #5
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	4413      	add	r3, r2
 800b184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	69ba      	ldr	r2, [r7, #24]
 800b18c:	0151      	lsls	r1, r2, #5
 800b18e:	69fa      	ldr	r2, [r7, #28]
 800b190:	440a      	add	r2, r1
 800b192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b196:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b19a:	6113      	str	r3, [r2, #16]
 800b19c:	e036      	b.n	800b20c <USB_EPStartXfer+0x3dc>
 800b19e:	bf00      	nop
 800b1a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	695a      	ldr	r2, [r3, #20]
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	1e5a      	subs	r2, r3, #1
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1b8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	015a      	lsls	r2, r3, #5
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c6:	691a      	ldr	r2, [r3, #16]
 800b1c8:	8afb      	ldrh	r3, [r7, #22]
 800b1ca:	04d9      	lsls	r1, r3, #19
 800b1cc:	4b39      	ldr	r3, [pc, #228]	; (800b2b4 <USB_EPStartXfer+0x484>)
 800b1ce:	400b      	ands	r3, r1
 800b1d0:	69b9      	ldr	r1, [r7, #24]
 800b1d2:	0148      	lsls	r0, r1, #5
 800b1d4:	69f9      	ldr	r1, [r7, #28]
 800b1d6:	4401      	add	r1, r0
 800b1d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	015a      	lsls	r2, r3, #5
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ec:	691a      	ldr	r2, [r3, #16]
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	8af9      	ldrh	r1, [r7, #22]
 800b1f4:	fb01 f303 	mul.w	r3, r1, r3
 800b1f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1fc:	69b9      	ldr	r1, [r7, #24]
 800b1fe:	0148      	lsls	r0, r1, #5
 800b200:	69f9      	ldr	r1, [r7, #28]
 800b202:	4401      	add	r1, r0
 800b204:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b208:	4313      	orrs	r3, r2
 800b20a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b20c:	79fb      	ldrb	r3, [r7, #7]
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d10d      	bne.n	800b22e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	68db      	ldr	r3, [r3, #12]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d009      	beq.n	800b22e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	68d9      	ldr	r1, [r3, #12]
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	015a      	lsls	r2, r3, #5
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	4413      	add	r3, r2
 800b226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b22a:	460a      	mov	r2, r1
 800b22c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	78db      	ldrb	r3, [r3, #3]
 800b232:	2b01      	cmp	r3, #1
 800b234:	d128      	bne.n	800b288 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b23c:	689b      	ldr	r3, [r3, #8]
 800b23e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b242:	2b00      	cmp	r3, #0
 800b244:	d110      	bne.n	800b268 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	015a      	lsls	r2, r3, #5
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	4413      	add	r3, r2
 800b24e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	69ba      	ldr	r2, [r7, #24]
 800b256:	0151      	lsls	r1, r2, #5
 800b258:	69fa      	ldr	r2, [r7, #28]
 800b25a:	440a      	add	r2, r1
 800b25c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b260:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b264:	6013      	str	r3, [r2, #0]
 800b266:	e00f      	b.n	800b288 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	015a      	lsls	r2, r3, #5
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	4413      	add	r3, r2
 800b270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	69ba      	ldr	r2, [r7, #24]
 800b278:	0151      	lsls	r1, r2, #5
 800b27a:	69fa      	ldr	r2, [r7, #28]
 800b27c:	440a      	add	r2, r1
 800b27e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b286:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b288:	69bb      	ldr	r3, [r7, #24]
 800b28a:	015a      	lsls	r2, r3, #5
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	4413      	add	r3, r2
 800b290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	69ba      	ldr	r2, [r7, #24]
 800b298:	0151      	lsls	r1, r2, #5
 800b29a:	69fa      	ldr	r2, [r7, #28]
 800b29c:	440a      	add	r2, r1
 800b29e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b2a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b2a8:	2300      	movs	r3, #0
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3720      	adds	r7, #32
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	1ff80000 	.word	0x1ff80000

0800b2b8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b087      	sub	sp, #28
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	785b      	ldrb	r3, [r3, #1]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	f040 80cd 	bne.w	800b474 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	695b      	ldr	r3, [r3, #20]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d132      	bne.n	800b348 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	015a      	lsls	r2, r3, #5
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	693a      	ldr	r2, [r7, #16]
 800b2f2:	0151      	lsls	r1, r2, #5
 800b2f4:	697a      	ldr	r2, [r7, #20]
 800b2f6:	440a      	add	r2, r1
 800b2f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b300:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b304:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	015a      	lsls	r2, r3, #5
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	4413      	add	r3, r2
 800b30e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b312:	691b      	ldr	r3, [r3, #16]
 800b314:	693a      	ldr	r2, [r7, #16]
 800b316:	0151      	lsls	r1, r2, #5
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	440a      	add	r2, r1
 800b31c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b320:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b324:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	015a      	lsls	r2, r3, #5
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	4413      	add	r3, r2
 800b32e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b332:	691b      	ldr	r3, [r3, #16]
 800b334:	693a      	ldr	r2, [r7, #16]
 800b336:	0151      	lsls	r1, r2, #5
 800b338:	697a      	ldr	r2, [r7, #20]
 800b33a:	440a      	add	r2, r1
 800b33c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b340:	0cdb      	lsrs	r3, r3, #19
 800b342:	04db      	lsls	r3, r3, #19
 800b344:	6113      	str	r3, [r2, #16]
 800b346:	e04e      	b.n	800b3e6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	015a      	lsls	r2, r3, #5
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	4413      	add	r3, r2
 800b350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	693a      	ldr	r2, [r7, #16]
 800b358:	0151      	lsls	r1, r2, #5
 800b35a:	697a      	ldr	r2, [r7, #20]
 800b35c:	440a      	add	r2, r1
 800b35e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b362:	0cdb      	lsrs	r3, r3, #19
 800b364:	04db      	lsls	r3, r3, #19
 800b366:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	015a      	lsls	r2, r3, #5
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	4413      	add	r3, r2
 800b370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b374:	691b      	ldr	r3, [r3, #16]
 800b376:	693a      	ldr	r2, [r7, #16]
 800b378:	0151      	lsls	r1, r2, #5
 800b37a:	697a      	ldr	r2, [r7, #20]
 800b37c:	440a      	add	r2, r1
 800b37e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b382:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b386:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b38a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	695a      	ldr	r2, [r3, #20]
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	429a      	cmp	r2, r3
 800b396:	d903      	bls.n	800b3a0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	689a      	ldr	r2, [r3, #8]
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	015a      	lsls	r2, r3, #5
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	693a      	ldr	r2, [r7, #16]
 800b3b0:	0151      	lsls	r1, r2, #5
 800b3b2:	697a      	ldr	r2, [r7, #20]
 800b3b4:	440a      	add	r2, r1
 800b3b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	015a      	lsls	r2, r3, #5
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3cc:	691a      	ldr	r2, [r3, #16]
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	695b      	ldr	r3, [r3, #20]
 800b3d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3d6:	6939      	ldr	r1, [r7, #16]
 800b3d8:	0148      	lsls	r0, r1, #5
 800b3da:	6979      	ldr	r1, [r7, #20]
 800b3dc:	4401      	add	r1, r0
 800b3de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b3e6:	79fb      	ldrb	r3, [r7, #7]
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d11e      	bne.n	800b42a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	691b      	ldr	r3, [r3, #16]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d009      	beq.n	800b408 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	015a      	lsls	r2, r3, #5
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b400:	461a      	mov	r2, r3
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	691b      	ldr	r3, [r3, #16]
 800b406:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	015a      	lsls	r2, r3, #5
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	4413      	add	r3, r2
 800b410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	693a      	ldr	r2, [r7, #16]
 800b418:	0151      	lsls	r1, r2, #5
 800b41a:	697a      	ldr	r2, [r7, #20]
 800b41c:	440a      	add	r2, r1
 800b41e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b422:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b426:	6013      	str	r3, [r2, #0]
 800b428:	e092      	b.n	800b550 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	015a      	lsls	r2, r3, #5
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	4413      	add	r3, r2
 800b432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	693a      	ldr	r2, [r7, #16]
 800b43a:	0151      	lsls	r1, r2, #5
 800b43c:	697a      	ldr	r2, [r7, #20]
 800b43e:	440a      	add	r2, r1
 800b440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b444:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b448:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	695b      	ldr	r3, [r3, #20]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d07e      	beq.n	800b550 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	f003 030f 	and.w	r3, r3, #15
 800b462:	2101      	movs	r1, #1
 800b464:	fa01 f303 	lsl.w	r3, r1, r3
 800b468:	6979      	ldr	r1, [r7, #20]
 800b46a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b46e:	4313      	orrs	r3, r2
 800b470:	634b      	str	r3, [r1, #52]	; 0x34
 800b472:	e06d      	b.n	800b550 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	015a      	lsls	r2, r3, #5
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	4413      	add	r3, r2
 800b47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b480:	691b      	ldr	r3, [r3, #16]
 800b482:	693a      	ldr	r2, [r7, #16]
 800b484:	0151      	lsls	r1, r2, #5
 800b486:	697a      	ldr	r2, [r7, #20]
 800b488:	440a      	add	r2, r1
 800b48a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b48e:	0cdb      	lsrs	r3, r3, #19
 800b490:	04db      	lsls	r3, r3, #19
 800b492:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	015a      	lsls	r2, r3, #5
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	4413      	add	r3, r2
 800b49c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	693a      	ldr	r2, [r7, #16]
 800b4a4:	0151      	lsls	r1, r2, #5
 800b4a6:	697a      	ldr	r2, [r7, #20]
 800b4a8:	440a      	add	r2, r1
 800b4aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b4b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b4b6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	695b      	ldr	r3, [r3, #20]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d003      	beq.n	800b4c8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	689a      	ldr	r2, [r3, #8]
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	015a      	lsls	r2, r3, #5
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4d4:	691b      	ldr	r3, [r3, #16]
 800b4d6:	693a      	ldr	r2, [r7, #16]
 800b4d8:	0151      	lsls	r1, r2, #5
 800b4da:	697a      	ldr	r2, [r7, #20]
 800b4dc:	440a      	add	r2, r1
 800b4de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b4e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	015a      	lsls	r2, r3, #5
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4f4:	691a      	ldr	r2, [r3, #16]
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4fe:	6939      	ldr	r1, [r7, #16]
 800b500:	0148      	lsls	r0, r1, #5
 800b502:	6979      	ldr	r1, [r7, #20]
 800b504:	4401      	add	r1, r0
 800b506:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b50a:	4313      	orrs	r3, r2
 800b50c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b50e:	79fb      	ldrb	r3, [r7, #7]
 800b510:	2b01      	cmp	r3, #1
 800b512:	d10d      	bne.n	800b530 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d009      	beq.n	800b530 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	68d9      	ldr	r1, [r3, #12]
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	015a      	lsls	r2, r3, #5
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	4413      	add	r3, r2
 800b528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b52c:	460a      	mov	r2, r1
 800b52e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	015a      	lsls	r2, r3, #5
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	4413      	add	r3, r2
 800b538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	693a      	ldr	r2, [r7, #16]
 800b540:	0151      	lsls	r1, r2, #5
 800b542:	697a      	ldr	r2, [r7, #20]
 800b544:	440a      	add	r2, r1
 800b546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b54a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b54e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	371c      	adds	r7, #28
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr

0800b55e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b55e:	b480      	push	{r7}
 800b560:	b089      	sub	sp, #36	; 0x24
 800b562:	af00      	add	r7, sp, #0
 800b564:	60f8      	str	r0, [r7, #12]
 800b566:	60b9      	str	r1, [r7, #8]
 800b568:	4611      	mov	r1, r2
 800b56a:	461a      	mov	r2, r3
 800b56c:	460b      	mov	r3, r1
 800b56e:	71fb      	strb	r3, [r7, #7]
 800b570:	4613      	mov	r3, r2
 800b572:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b57c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b580:	2b00      	cmp	r3, #0
 800b582:	d11a      	bne.n	800b5ba <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b584:	88bb      	ldrh	r3, [r7, #4]
 800b586:	3303      	adds	r3, #3
 800b588:	089b      	lsrs	r3, r3, #2
 800b58a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b58c:	2300      	movs	r3, #0
 800b58e:	61bb      	str	r3, [r7, #24]
 800b590:	e00f      	b.n	800b5b2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b592:	79fb      	ldrb	r3, [r7, #7]
 800b594:	031a      	lsls	r2, r3, #12
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	4413      	add	r3, r2
 800b59a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b59e:	461a      	mov	r2, r3
 800b5a0:	69fb      	ldr	r3, [r7, #28]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	3304      	adds	r3, #4
 800b5aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b5ac:	69bb      	ldr	r3, [r7, #24]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	61bb      	str	r3, [r7, #24]
 800b5b2:	69ba      	ldr	r2, [r7, #24]
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d3eb      	bcc.n	800b592 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b5ba:	2300      	movs	r3, #0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3724      	adds	r7, #36	; 0x24
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b089      	sub	sp, #36	; 0x24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b5de:	88fb      	ldrh	r3, [r7, #6]
 800b5e0:	3303      	adds	r3, #3
 800b5e2:	089b      	lsrs	r3, r3, #2
 800b5e4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	61bb      	str	r3, [r7, #24]
 800b5ea:	e00b      	b.n	800b604 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	601a      	str	r2, [r3, #0]
    pDest++;
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	3304      	adds	r3, #4
 800b5fc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	3301      	adds	r3, #1
 800b602:	61bb      	str	r3, [r7, #24]
 800b604:	69ba      	ldr	r2, [r7, #24]
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d3ef      	bcc.n	800b5ec <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b60c:	69fb      	ldr	r3, [r7, #28]
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3724      	adds	r7, #36	; 0x24
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr

0800b61a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b61a:	b480      	push	{r7}
 800b61c:	b085      	sub	sp, #20
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
 800b622:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	785b      	ldrb	r3, [r3, #1]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d12c      	bne.n	800b690 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	015a      	lsls	r2, r3, #5
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	4413      	add	r3, r2
 800b63e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	db12      	blt.n	800b66e <USB_EPSetStall+0x54>
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00f      	beq.n	800b66e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	015a      	lsls	r2, r3, #5
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	4413      	add	r3, r2
 800b656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	0151      	lsls	r1, r2, #5
 800b660:	68fa      	ldr	r2, [r7, #12]
 800b662:	440a      	add	r2, r1
 800b664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b668:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b66c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	015a      	lsls	r2, r3, #5
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	4413      	add	r3, r2
 800b676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	68ba      	ldr	r2, [r7, #8]
 800b67e:	0151      	lsls	r1, r2, #5
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	440a      	add	r2, r1
 800b684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b688:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b68c:	6013      	str	r3, [r2, #0]
 800b68e:	e02b      	b.n	800b6e8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	015a      	lsls	r2, r3, #5
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	4413      	add	r3, r2
 800b698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	db12      	blt.n	800b6c8 <USB_EPSetStall+0xae>
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00f      	beq.n	800b6c8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	015a      	lsls	r2, r3, #5
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	68ba      	ldr	r2, [r7, #8]
 800b6b8:	0151      	lsls	r1, r2, #5
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	440a      	add	r2, r1
 800b6be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b6c6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	015a      	lsls	r2, r3, #5
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	0151      	lsls	r1, r2, #5
 800b6da:	68fa      	ldr	r2, [r7, #12]
 800b6dc:	440a      	add	r2, r1
 800b6de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b6e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3714      	adds	r7, #20
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr

0800b6f6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b085      	sub	sp, #20
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	785b      	ldrb	r3, [r3, #1]
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d128      	bne.n	800b764 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	015a      	lsls	r2, r3, #5
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	4413      	add	r3, r2
 800b71a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	0151      	lsls	r1, r2, #5
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	440a      	add	r2, r1
 800b728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b72c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b730:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	78db      	ldrb	r3, [r3, #3]
 800b736:	2b03      	cmp	r3, #3
 800b738:	d003      	beq.n	800b742 <USB_EPClearStall+0x4c>
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	78db      	ldrb	r3, [r3, #3]
 800b73e:	2b02      	cmp	r3, #2
 800b740:	d138      	bne.n	800b7b4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	015a      	lsls	r2, r3, #5
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	4413      	add	r3, r2
 800b74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	68ba      	ldr	r2, [r7, #8]
 800b752:	0151      	lsls	r1, r2, #5
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	440a      	add	r2, r1
 800b758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b75c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b760:	6013      	str	r3, [r2, #0]
 800b762:	e027      	b.n	800b7b4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	015a      	lsls	r2, r3, #5
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	4413      	add	r3, r2
 800b76c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	68ba      	ldr	r2, [r7, #8]
 800b774:	0151      	lsls	r1, r2, #5
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	440a      	add	r2, r1
 800b77a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b77e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b782:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	78db      	ldrb	r3, [r3, #3]
 800b788:	2b03      	cmp	r3, #3
 800b78a:	d003      	beq.n	800b794 <USB_EPClearStall+0x9e>
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	78db      	ldrb	r3, [r3, #3]
 800b790:	2b02      	cmp	r3, #2
 800b792:	d10f      	bne.n	800b7b4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	015a      	lsls	r2, r3, #5
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	4413      	add	r3, r2
 800b79c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	0151      	lsls	r1, r2, #5
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	440a      	add	r2, r1
 800b7aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7b2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b7b4:	2300      	movs	r3, #0
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3714      	adds	r7, #20
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr

0800b7c2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b7c2:	b480      	push	{r7}
 800b7c4:	b085      	sub	sp, #20
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b7e4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	78fb      	ldrb	r3, [r7, #3]
 800b7f0:	011b      	lsls	r3, r3, #4
 800b7f2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b7f6:	68f9      	ldr	r1, [r7, #12]
 800b7f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3714      	adds	r7, #20
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr

0800b80e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b80e:	b480      	push	{r7}
 800b810:	b085      	sub	sp, #20
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b828:	f023 0303 	bic.w	r3, r3, #3
 800b82c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b83c:	f023 0302 	bic.w	r3, r3, #2
 800b840:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3714      	adds	r7, #20
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b86a:	f023 0303 	bic.w	r3, r3, #3
 800b86e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b87e:	f043 0302 	orr.w	r3, r3, #2
 800b882:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b884:	2300      	movs	r3, #0
}
 800b886:	4618      	mov	r0, r3
 800b888:	3714      	adds	r7, #20
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr

0800b892 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b892:	b480      	push	{r7}
 800b894:	b085      	sub	sp, #20
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	695b      	ldr	r3, [r3, #20]
 800b89e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	699b      	ldr	r3, [r3, #24]
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	4013      	ands	r3, r2
 800b8a8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3714      	adds	r7, #20
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ca:	699b      	ldr	r3, [r3, #24]
 800b8cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8d4:	69db      	ldr	r3, [r3, #28]
 800b8d6:	68ba      	ldr	r2, [r7, #8]
 800b8d8:	4013      	ands	r3, r2
 800b8da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	0c1b      	lsrs	r3, r3, #16
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3714      	adds	r7, #20
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8fe:	699b      	ldr	r3, [r3, #24]
 800b900:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b908:	69db      	ldr	r3, [r3, #28]
 800b90a:	68ba      	ldr	r2, [r7, #8]
 800b90c:	4013      	ands	r3, r2
 800b90e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	b29b      	uxth	r3, r3
}
 800b914:	4618      	mov	r0, r3
 800b916:	3714      	adds	r7, #20
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr

0800b920 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	460b      	mov	r3, r1
 800b92a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b930:	78fb      	ldrb	r3, [r7, #3]
 800b932:	015a      	lsls	r2, r3, #5
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	4413      	add	r3, r2
 800b938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b946:	695b      	ldr	r3, [r3, #20]
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	4013      	ands	r3, r2
 800b94c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b94e:	68bb      	ldr	r3, [r7, #8]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3714      	adds	r7, #20
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b087      	sub	sp, #28
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	460b      	mov	r3, r1
 800b966:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b972:	691b      	ldr	r3, [r3, #16]
 800b974:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b97c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b97e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b980:	78fb      	ldrb	r3, [r7, #3]
 800b982:	f003 030f 	and.w	r3, r3, #15
 800b986:	68fa      	ldr	r2, [r7, #12]
 800b988:	fa22 f303 	lsr.w	r3, r2, r3
 800b98c:	01db      	lsls	r3, r3, #7
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	693a      	ldr	r2, [r7, #16]
 800b992:	4313      	orrs	r3, r2
 800b994:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b996:	78fb      	ldrb	r3, [r7, #3]
 800b998:	015a      	lsls	r2, r3, #5
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	4413      	add	r3, r2
 800b99e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	693a      	ldr	r2, [r7, #16]
 800b9a6:	4013      	ands	r3, r2
 800b9a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b9aa:	68bb      	ldr	r3, [r7, #8]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	371c      	adds	r7, #28
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	695b      	ldr	r3, [r3, #20]
 800b9c4:	f003 0301 	and.w	r3, r3, #1
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b9f2:	f023 0307 	bic.w	r3, r3, #7
 800b9f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba0c:	2300      	movs	r3, #0
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3714      	adds	r7, #20
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr
	...

0800ba1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b087      	sub	sp, #28
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	460b      	mov	r3, r1
 800ba26:	607a      	str	r2, [r7, #4]
 800ba28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	333c      	adds	r3, #60	; 0x3c
 800ba32:	3304      	adds	r3, #4
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	4a26      	ldr	r2, [pc, #152]	; (800bad4 <USB_EP0_OutStart+0xb8>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d90a      	bls.n	800ba56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba50:	d101      	bne.n	800ba56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ba52:	2300      	movs	r3, #0
 800ba54:	e037      	b.n	800bac6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	2300      	movs	r3, #0
 800ba60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba68:	691b      	ldr	r3, [r3, #16]
 800ba6a:	697a      	ldr	r2, [r7, #20]
 800ba6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba7c:	691b      	ldr	r3, [r3, #16]
 800ba7e:	697a      	ldr	r2, [r7, #20]
 800ba80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba84:	f043 0318 	orr.w	r3, r3, #24
 800ba88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	697a      	ldr	r2, [r7, #20]
 800ba94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba98:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ba9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ba9e:	7afb      	ldrb	r3, [r7, #11]
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d10f      	bne.n	800bac4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baaa:	461a      	mov	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	697a      	ldr	r2, [r7, #20]
 800baba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800babe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bac2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	371c      	adds	r7, #28
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	4f54300a 	.word	0x4f54300a

0800bad8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bae0:	2300      	movs	r3, #0
 800bae2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	3301      	adds	r3, #1
 800bae8:	60fb      	str	r3, [r7, #12]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	4a13      	ldr	r2, [pc, #76]	; (800bb3c <USB_CoreReset+0x64>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d901      	bls.n	800baf6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800baf2:	2303      	movs	r3, #3
 800baf4:	e01b      	b.n	800bb2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	daf2      	bge.n	800bae4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bafe:	2300      	movs	r3, #0
 800bb00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	691b      	ldr	r3, [r3, #16]
 800bb06:	f043 0201 	orr.w	r2, r3, #1
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	3301      	adds	r3, #1
 800bb12:	60fb      	str	r3, [r7, #12]
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	4a09      	ldr	r2, [pc, #36]	; (800bb3c <USB_CoreReset+0x64>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d901      	bls.n	800bb20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bb1c:	2303      	movs	r3, #3
 800bb1e:	e006      	b.n	800bb2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	691b      	ldr	r3, [r3, #16]
 800bb24:	f003 0301 	and.w	r3, r3, #1
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d0f0      	beq.n	800bb0e <USB_CoreReset+0x36>

  return HAL_OK;
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3714      	adds	r7, #20
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	00030d40 	.word	0x00030d40

0800bb40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	460b      	mov	r3, r1
 800bb4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bb4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bb50:	f003 fc2a 	bl	800f3a8 <malloc>
 800bb54:	4603      	mov	r3, r0
 800bb56:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d105      	bne.n	800bb6a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bb66:	2302      	movs	r3, #2
 800bb68:	e066      	b.n	800bc38 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	7c1b      	ldrb	r3, [r3, #16]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d119      	bne.n	800bbae <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bb7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb7e:	2202      	movs	r2, #2
 800bb80:	2181      	movs	r1, #129	; 0x81
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f003 fa7b 	bl	800f07e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bb8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb92:	2202      	movs	r2, #2
 800bb94:	2101      	movs	r1, #1
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f003 fa71 	bl	800f07e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2210      	movs	r2, #16
 800bba8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bbac:	e016      	b.n	800bbdc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bbae:	2340      	movs	r3, #64	; 0x40
 800bbb0:	2202      	movs	r2, #2
 800bbb2:	2181      	movs	r1, #129	; 0x81
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f003 fa62 	bl	800f07e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bbc0:	2340      	movs	r3, #64	; 0x40
 800bbc2:	2202      	movs	r2, #2
 800bbc4:	2101      	movs	r1, #1
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f003 fa59 	bl	800f07e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2201      	movs	r2, #1
 800bbd0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2210      	movs	r2, #16
 800bbd8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bbdc:	2308      	movs	r3, #8
 800bbde:	2203      	movs	r2, #3
 800bbe0:	2182      	movs	r1, #130	; 0x82
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f003 fa4b 	bl	800f07e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2201      	movs	r2, #1
 800bbec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	7c1b      	ldrb	r3, [r3, #16]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d109      	bne.n	800bc26 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc18:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc1c:	2101      	movs	r1, #1
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f003 fb1c 	bl	800f25c <USBD_LL_PrepareReceive>
 800bc24:	e007      	b.n	800bc36 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc2c:	2340      	movs	r3, #64	; 0x40
 800bc2e:	2101      	movs	r1, #1
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f003 fb13 	bl	800f25c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bc36:	2300      	movs	r3, #0
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3710      	adds	r7, #16
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	460b      	mov	r3, r1
 800bc4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bc50:	2181      	movs	r1, #129	; 0x81
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f003 fa39 	bl	800f0ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bc5e:	2101      	movs	r1, #1
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f003 fa32 	bl	800f0ca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bc6e:	2182      	movs	r1, #130	; 0x82
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f003 fa2a 	bl	800f0ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00e      	beq.n	800bcae <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bca0:	4618      	mov	r0, r3
 800bca2:	f003 fb89 	bl	800f3b8 <free>
    pdev->pClassData = NULL;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800bcae:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3710      	adds	r7, #16
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b086      	sub	sp, #24
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcc8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800bcca:	2300      	movs	r3, #0
 800bccc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d03a      	beq.n	800bd58 <USBD_CDC_Setup+0xa0>
 800bce2:	2b20      	cmp	r3, #32
 800bce4:	f040 8097 	bne.w	800be16 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	88db      	ldrh	r3, [r3, #6]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d029      	beq.n	800bd44 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	b25b      	sxtb	r3, r3
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	da11      	bge.n	800bd1e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd00:	689b      	ldr	r3, [r3, #8]
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800bd06:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd08:	683a      	ldr	r2, [r7, #0]
 800bd0a:	88d2      	ldrh	r2, [r2, #6]
 800bd0c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bd0e:	6939      	ldr	r1, [r7, #16]
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	88db      	ldrh	r3, [r3, #6]
 800bd14:	461a      	mov	r2, r3
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f001 fa9d 	bl	800d256 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800bd1c:	e082      	b.n	800be24 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	785a      	ldrb	r2, [r3, #1]
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	88db      	ldrh	r3, [r3, #6]
 800bd2c:	b2da      	uxtb	r2, r3
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bd34:	6939      	ldr	r1, [r7, #16]
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	88db      	ldrh	r3, [r3, #6]
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f001 fab6 	bl	800d2ae <USBD_CtlPrepareRx>
    break;
 800bd42:	e06f      	b.n	800be24 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	683a      	ldr	r2, [r7, #0]
 800bd4e:	7850      	ldrb	r0, [r2, #1]
 800bd50:	2200      	movs	r2, #0
 800bd52:	6839      	ldr	r1, [r7, #0]
 800bd54:	4798      	blx	r3
    break;
 800bd56:	e065      	b.n	800be24 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	785b      	ldrb	r3, [r3, #1]
 800bd5c:	2b0b      	cmp	r3, #11
 800bd5e:	d84f      	bhi.n	800be00 <USBD_CDC_Setup+0x148>
 800bd60:	a201      	add	r2, pc, #4	; (adr r2, 800bd68 <USBD_CDC_Setup+0xb0>)
 800bd62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd66:	bf00      	nop
 800bd68:	0800bd99 	.word	0x0800bd99
 800bd6c:	0800be0f 	.word	0x0800be0f
 800bd70:	0800be01 	.word	0x0800be01
 800bd74:	0800be01 	.word	0x0800be01
 800bd78:	0800be01 	.word	0x0800be01
 800bd7c:	0800be01 	.word	0x0800be01
 800bd80:	0800be01 	.word	0x0800be01
 800bd84:	0800be01 	.word	0x0800be01
 800bd88:	0800be01 	.word	0x0800be01
 800bd8c:	0800be01 	.word	0x0800be01
 800bd90:	0800bdc1 	.word	0x0800bdc1
 800bd94:	0800bde9 	.word	0x0800bde9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd9e:	2b03      	cmp	r3, #3
 800bda0:	d107      	bne.n	800bdb2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bda2:	f107 030c 	add.w	r3, r7, #12
 800bda6:	2202      	movs	r2, #2
 800bda8:	4619      	mov	r1, r3
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f001 fa53 	bl	800d256 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800bdb0:	e030      	b.n	800be14 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800bdb2:	6839      	ldr	r1, [r7, #0]
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f001 f9dd 	bl	800d174 <USBD_CtlError>
        ret = USBD_FAIL;
 800bdba:	2303      	movs	r3, #3
 800bdbc:	75fb      	strb	r3, [r7, #23]
      break;
 800bdbe:	e029      	b.n	800be14 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdc6:	2b03      	cmp	r3, #3
 800bdc8:	d107      	bne.n	800bdda <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bdca:	f107 030f 	add.w	r3, r7, #15
 800bdce:	2201      	movs	r2, #1
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f001 fa3f 	bl	800d256 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800bdd8:	e01c      	b.n	800be14 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800bdda:	6839      	ldr	r1, [r7, #0]
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f001 f9c9 	bl	800d174 <USBD_CtlError>
        ret = USBD_FAIL;
 800bde2:	2303      	movs	r3, #3
 800bde4:	75fb      	strb	r3, [r7, #23]
      break;
 800bde6:	e015      	b.n	800be14 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdee:	2b03      	cmp	r3, #3
 800bdf0:	d00f      	beq.n	800be12 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800bdf2:	6839      	ldr	r1, [r7, #0]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f001 f9bd 	bl	800d174 <USBD_CtlError>
        ret = USBD_FAIL;
 800bdfa:	2303      	movs	r3, #3
 800bdfc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800bdfe:	e008      	b.n	800be12 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800be00:	6839      	ldr	r1, [r7, #0]
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f001 f9b6 	bl	800d174 <USBD_CtlError>
      ret = USBD_FAIL;
 800be08:	2303      	movs	r3, #3
 800be0a:	75fb      	strb	r3, [r7, #23]
      break;
 800be0c:	e002      	b.n	800be14 <USBD_CDC_Setup+0x15c>
      break;
 800be0e:	bf00      	nop
 800be10:	e008      	b.n	800be24 <USBD_CDC_Setup+0x16c>
      break;
 800be12:	bf00      	nop
    }
    break;
 800be14:	e006      	b.n	800be24 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800be16:	6839      	ldr	r1, [r7, #0]
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f001 f9ab 	bl	800d174 <USBD_CtlError>
    ret = USBD_FAIL;
 800be1e:	2303      	movs	r3, #3
 800be20:	75fb      	strb	r3, [r7, #23]
    break;
 800be22:	bf00      	nop
  }

  return (uint8_t)ret;
 800be24:	7dfb      	ldrb	r3, [r7, #23]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3718      	adds	r7, #24
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop

0800be30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	460b      	mov	r3, r1
 800be3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d101      	bne.n	800be52 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800be4e:	2303      	movs	r3, #3
 800be50:	e049      	b.n	800bee6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be58:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800be5a:	78fa      	ldrb	r2, [r7, #3]
 800be5c:	6879      	ldr	r1, [r7, #4]
 800be5e:	4613      	mov	r3, r2
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	4413      	add	r3, r2
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	440b      	add	r3, r1
 800be68:	3318      	adds	r3, #24
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d029      	beq.n	800bec4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800be70:	78fa      	ldrb	r2, [r7, #3]
 800be72:	6879      	ldr	r1, [r7, #4]
 800be74:	4613      	mov	r3, r2
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	4413      	add	r3, r2
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	440b      	add	r3, r1
 800be7e:	3318      	adds	r3, #24
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	78f9      	ldrb	r1, [r7, #3]
 800be84:	68f8      	ldr	r0, [r7, #12]
 800be86:	460b      	mov	r3, r1
 800be88:	00db      	lsls	r3, r3, #3
 800be8a:	1a5b      	subs	r3, r3, r1
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	4403      	add	r3, r0
 800be90:	3344      	adds	r3, #68	; 0x44
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	fbb2 f1f3 	udiv	r1, r2, r3
 800be98:	fb03 f301 	mul.w	r3, r3, r1
 800be9c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d110      	bne.n	800bec4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bea2:	78fa      	ldrb	r2, [r7, #3]
 800bea4:	6879      	ldr	r1, [r7, #4]
 800bea6:	4613      	mov	r3, r2
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	4413      	add	r3, r2
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	440b      	add	r3, r1
 800beb0:	3318      	adds	r3, #24
 800beb2:	2200      	movs	r2, #0
 800beb4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800beb6:	78f9      	ldrb	r1, [r7, #3]
 800beb8:	2300      	movs	r3, #0
 800beba:	2200      	movs	r2, #0
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f003 f9ac 	bl	800f21a <USBD_LL_Transmit>
 800bec2:	e00f      	b.n	800bee4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	2200      	movs	r2, #0
 800bec8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bed2:	691b      	ldr	r3, [r3, #16]
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800beda:	68ba      	ldr	r2, [r7, #8]
 800bedc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bee0:	78fa      	ldrb	r2, [r7, #3]
 800bee2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800bee4:	2300      	movs	r3, #0
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b084      	sub	sp, #16
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
 800bef6:	460b      	mov	r3, r1
 800bef8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf00:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d101      	bne.n	800bf10 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bf0c:	2303      	movs	r3, #3
 800bf0e:	e015      	b.n	800bf3c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bf10:	78fb      	ldrb	r3, [r7, #3]
 800bf12:	4619      	mov	r1, r3
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f003 f9c2 	bl	800f29e <USBD_LL_GetRxDataSize>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf28:	68db      	ldr	r3, [r3, #12]
 800bf2a:	68fa      	ldr	r2, [r7, #12]
 800bf2c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bf36:	4611      	mov	r1, r2
 800bf38:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf52:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d015      	beq.n	800bf8a <USBD_CDC_EP0_RxReady+0x46>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bf64:	2bff      	cmp	r3, #255	; 0xff
 800bf66:	d010      	beq.n	800bf8a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bf76:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bf78:	68fa      	ldr	r2, [r7, #12]
 800bf7a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bf7e:	b292      	uxth	r2, r2
 800bf80:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	22ff      	movs	r2, #255	; 0xff
 800bf86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800bf8a:	2300      	movs	r3, #0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3710      	adds	r7, #16
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2243      	movs	r2, #67	; 0x43
 800bfa0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bfa2:	4b03      	ldr	r3, [pc, #12]	; (800bfb0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	370c      	adds	r7, #12
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr
 800bfb0:	2000009c 	.word	0x2000009c

0800bfb4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2243      	movs	r2, #67	; 0x43
 800bfc0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bfc2:	4b03      	ldr	r3, [pc, #12]	; (800bfd0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	370c      	adds	r7, #12
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr
 800bfd0:	20000058 	.word	0x20000058

0800bfd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b083      	sub	sp, #12
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2243      	movs	r2, #67	; 0x43
 800bfe0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bfe2:	4b03      	ldr	r3, [pc, #12]	; (800bff0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr
 800bff0:	200000e0 	.word	0x200000e0

0800bff4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	220a      	movs	r2, #10
 800c000:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c002:	4b03      	ldr	r3, [pc, #12]	; (800c010 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c004:	4618      	mov	r0, r3
 800c006:	370c      	adds	r7, #12
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr
 800c010:	20000014 	.word	0x20000014

0800c014 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c014:	b480      	push	{r7}
 800c016:	b083      	sub	sp, #12
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d101      	bne.n	800c028 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c024:	2303      	movs	r3, #3
 800c026:	e004      	b.n	800c032 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	683a      	ldr	r2, [r7, #0]
 800c02c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c030:	2300      	movs	r3, #0
}
 800c032:	4618      	mov	r0, r3
 800c034:	370c      	adds	r7, #12
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr

0800c03e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c03e:	b480      	push	{r7}
 800c040:	b087      	sub	sp, #28
 800c042:	af00      	add	r7, sp, #0
 800c044:	60f8      	str	r0, [r7, #12]
 800c046:	60b9      	str	r1, [r7, #8]
 800c048:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c050:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	68ba      	ldr	r2, [r7, #8]
 800c056:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c062:	2300      	movs	r3, #0
}
 800c064:	4618      	mov	r0, r3
 800c066:	371c      	adds	r7, #28
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c070:	b480      	push	{r7}
 800c072:	b085      	sub	sp, #20
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c080:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	683a      	ldr	r2, [r7, #0]
 800c086:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c08a:	2300      	movs	r3, #0
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3714      	adds	r7, #20
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0a6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d101      	bne.n	800c0ba <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c0b6:	2303      	movs	r3, #3
 800c0b8:	e01a      	b.n	800c0f0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d114      	bne.n	800c0ee <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c0e2:	2181      	movs	r1, #129	; 0x81
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f003 f898 	bl	800f21a <USBD_LL_Transmit>

    ret = USBD_OK;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3710      	adds	r7, #16
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c106:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d101      	bne.n	800c116 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c112:	2303      	movs	r3, #3
 800c114:	e016      	b.n	800c144 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	7c1b      	ldrb	r3, [r3, #16]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d109      	bne.n	800c132 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c124:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c128:	2101      	movs	r1, #1
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f003 f896 	bl	800f25c <USBD_LL_PrepareReceive>
 800c130:	e007      	b.n	800c142 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c138:	2340      	movs	r3, #64	; 0x40
 800c13a:	2101      	movs	r1, #1
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f003 f88d 	bl	800f25c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c142:	2300      	movs	r3, #0
}
 800c144:	4618      	mov	r0, r3
 800c146:	3710      	adds	r7, #16
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b086      	sub	sp, #24
 800c150:	af00      	add	r7, sp, #0
 800c152:	60f8      	str	r0, [r7, #12]
 800c154:	60b9      	str	r1, [r7, #8]
 800c156:	4613      	mov	r3, r2
 800c158:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d101      	bne.n	800c164 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c160:	2303      	movs	r3, #3
 800c162:	e025      	b.n	800c1b0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d003      	beq.n	800c176 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2200      	movs	r2, #0
 800c172:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d003      	beq.n	800c188 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2200      	movs	r2, #0
 800c184:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d003      	beq.n	800c196 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	68ba      	ldr	r2, [r7, #8]
 800c192:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2201      	movs	r2, #1
 800c19a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	79fa      	ldrb	r2, [r7, #7]
 800c1a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c1a4:	68f8      	ldr	r0, [r7, #12]
 800c1a6:	f002 ff03 	bl	800efb0 <USBD_LL_Init>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c1ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3718      	adds	r7, #24
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d101      	bne.n	800c1d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c1cc:	2303      	movs	r3, #3
 800c1ce:	e010      	b.n	800c1f2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	683a      	ldr	r2, [r7, #0]
 800c1d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1e0:	f107 020e 	add.w	r2, r7, #14
 800c1e4:	4610      	mov	r0, r2
 800c1e6:	4798      	blx	r3
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800c1f0:	2300      	movs	r3, #0
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b082      	sub	sp, #8
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f002 ff20 	bl	800f048 <USBD_LL_Start>
 800c208:	4603      	mov	r3, r0
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3708      	adds	r7, #8
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c212:	b480      	push	{r7}
 800c214:	b083      	sub	sp, #12
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c21a:	2300      	movs	r3, #0
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	370c      	adds	r7, #12
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr

0800c228 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	460b      	mov	r3, r1
 800c232:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c234:	2303      	movs	r3, #3
 800c236:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d009      	beq.n	800c256 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	78fa      	ldrb	r2, [r7, #3]
 800c24c:	4611      	mov	r1, r2
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	4798      	blx	r3
 800c252:	4603      	mov	r3, r0
 800c254:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c256:	7bfb      	ldrb	r3, [r7, #15]
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3710      	adds	r7, #16
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	460b      	mov	r3, r1
 800c26a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c272:	2b00      	cmp	r3, #0
 800c274:	d007      	beq.n	800c286 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	78fa      	ldrb	r2, [r7, #3]
 800c280:	4611      	mov	r1, r2
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	4798      	blx	r3
  }

  return USBD_OK;
 800c286:	2300      	movs	r3, #0
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c2a0:	6839      	ldr	r1, [r7, #0]
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f000 ff2c 	bl	800d100 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c2c4:	f003 031f 	and.w	r3, r3, #31
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d00e      	beq.n	800c2ea <USBD_LL_SetupStage+0x5a>
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d302      	bcc.n	800c2d6 <USBD_LL_SetupStage+0x46>
 800c2d0:	2b02      	cmp	r3, #2
 800c2d2:	d014      	beq.n	800c2fe <USBD_LL_SetupStage+0x6e>
 800c2d4:	e01d      	b.n	800c312 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c2dc:	4619      	mov	r1, r3
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 fa18 	bl	800c714 <USBD_StdDevReq>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	73fb      	strb	r3, [r7, #15]
      break;
 800c2e8:	e020      	b.n	800c32c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fa7c 	bl	800c7f0 <USBD_StdItfReq>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c2fc:	e016      	b.n	800c32c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c304:	4619      	mov	r1, r3
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 fab8 	bl	800c87c <USBD_StdEPReq>
 800c30c:	4603      	mov	r3, r0
 800c30e:	73fb      	strb	r3, [r7, #15]
      break;
 800c310:	e00c      	b.n	800c32c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c318:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	4619      	mov	r1, r3
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f002 fef1 	bl	800f108 <USBD_LL_StallEP>
 800c326:	4603      	mov	r3, r0
 800c328:	73fb      	strb	r3, [r7, #15]
      break;
 800c32a:	bf00      	nop
  }

  return ret;
 800c32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b086      	sub	sp, #24
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	60f8      	str	r0, [r7, #12]
 800c33e:	460b      	mov	r3, r1
 800c340:	607a      	str	r2, [r7, #4]
 800c342:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c344:	7afb      	ldrb	r3, [r7, #11]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d137      	bne.n	800c3ba <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c350:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c358:	2b03      	cmp	r3, #3
 800c35a:	d14a      	bne.n	800c3f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	689a      	ldr	r2, [r3, #8]
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	429a      	cmp	r2, r3
 800c366:	d913      	bls.n	800c390 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	689a      	ldr	r2, [r3, #8]
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	1ad2      	subs	r2, r2, r3
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	68da      	ldr	r2, [r3, #12]
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	4293      	cmp	r3, r2
 800c380:	bf28      	it	cs
 800c382:	4613      	movcs	r3, r2
 800c384:	461a      	mov	r2, r3
 800c386:	6879      	ldr	r1, [r7, #4]
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f000 ffad 	bl	800d2e8 <USBD_CtlContinueRx>
 800c38e:	e030      	b.n	800c3f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c396:	691b      	ldr	r3, [r3, #16]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d00a      	beq.n	800c3b2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c3a2:	2b03      	cmp	r3, #3
 800c3a4:	d105      	bne.n	800c3b2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ac:	691b      	ldr	r3, [r3, #16]
 800c3ae:	68f8      	ldr	r0, [r7, #12]
 800c3b0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	f000 ffa9 	bl	800d30a <USBD_CtlSendStatus>
 800c3b8:	e01b      	b.n	800c3f2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3c0:	699b      	ldr	r3, [r3, #24]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d013      	beq.n	800c3ee <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c3cc:	2b03      	cmp	r3, #3
 800c3ce:	d10e      	bne.n	800c3ee <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3d6:	699b      	ldr	r3, [r3, #24]
 800c3d8:	7afa      	ldrb	r2, [r7, #11]
 800c3da:	4611      	mov	r1, r2
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	4798      	blx	r3
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c3e4:	7dfb      	ldrb	r3, [r7, #23]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d003      	beq.n	800c3f2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800c3ea:	7dfb      	ldrb	r3, [r7, #23]
 800c3ec:	e002      	b.n	800c3f4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c3ee:	2303      	movs	r3, #3
 800c3f0:	e000      	b.n	800c3f4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3718      	adds	r7, #24
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b086      	sub	sp, #24
 800c400:	af00      	add	r7, sp, #0
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	460b      	mov	r3, r1
 800c406:	607a      	str	r2, [r7, #4]
 800c408:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c40a:	7afb      	ldrb	r3, [r7, #11]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d16a      	bne.n	800c4e6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	3314      	adds	r3, #20
 800c414:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c41c:	2b02      	cmp	r3, #2
 800c41e:	d155      	bne.n	800c4cc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	689a      	ldr	r2, [r3, #8]
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d914      	bls.n	800c456 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	689a      	ldr	r2, [r3, #8]
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	1ad2      	subs	r2, r2, r3
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	461a      	mov	r2, r3
 800c440:	6879      	ldr	r1, [r7, #4]
 800c442:	68f8      	ldr	r0, [r7, #12]
 800c444:	f000 ff22 	bl	800d28c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c448:	2300      	movs	r3, #0
 800c44a:	2200      	movs	r2, #0
 800c44c:	2100      	movs	r1, #0
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f002 ff04 	bl	800f25c <USBD_LL_PrepareReceive>
 800c454:	e03a      	b.n	800c4cc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	68da      	ldr	r2, [r3, #12]
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	689b      	ldr	r3, [r3, #8]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d11c      	bne.n	800c49c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	685a      	ldr	r2, [r3, #4]
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d316      	bcc.n	800c49c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	685a      	ldr	r2, [r3, #4]
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c478:	429a      	cmp	r2, r3
 800c47a:	d20f      	bcs.n	800c49c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c47c:	2200      	movs	r2, #0
 800c47e:	2100      	movs	r1, #0
 800c480:	68f8      	ldr	r0, [r7, #12]
 800c482:	f000 ff03 	bl	800d28c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2200      	movs	r2, #0
 800c48a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c48e:	2300      	movs	r3, #0
 800c490:	2200      	movs	r2, #0
 800c492:	2100      	movs	r1, #0
 800c494:	68f8      	ldr	r0, [r7, #12]
 800c496:	f002 fee1 	bl	800f25c <USBD_LL_PrepareReceive>
 800c49a:	e017      	b.n	800c4cc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00a      	beq.n	800c4be <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c4ae:	2b03      	cmp	r3, #3
 800c4b0:	d105      	bne.n	800c4be <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4b8:	68db      	ldr	r3, [r3, #12]
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4be:	2180      	movs	r1, #128	; 0x80
 800c4c0:	68f8      	ldr	r0, [r7, #12]
 800c4c2:	f002 fe21 	bl	800f108 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	f000 ff32 	bl	800d330 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d123      	bne.n	800c51e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c4d6:	68f8      	ldr	r0, [r7, #12]
 800c4d8:	f7ff fe9b 	bl	800c212 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c4e4:	e01b      	b.n	800c51e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4ec:	695b      	ldr	r3, [r3, #20]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d013      	beq.n	800c51a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c4f8:	2b03      	cmp	r3, #3
 800c4fa:	d10e      	bne.n	800c51a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c502:	695b      	ldr	r3, [r3, #20]
 800c504:	7afa      	ldrb	r2, [r7, #11]
 800c506:	4611      	mov	r1, r2
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	4798      	blx	r3
 800c50c:	4603      	mov	r3, r0
 800c50e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c510:	7dfb      	ldrb	r3, [r7, #23]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d003      	beq.n	800c51e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800c516:	7dfb      	ldrb	r3, [r7, #23]
 800c518:	e002      	b.n	800c520 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c51a:	2303      	movs	r3, #3
 800c51c:	e000      	b.n	800c520 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800c51e:	2300      	movs	r3, #0
}
 800c520:	4618      	mov	r0, r3
 800c522:	3718      	adds	r7, #24
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2201      	movs	r2, #1
 800c534:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2200      	movs	r2, #0
 800c54a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c554:	2b00      	cmp	r3, #0
 800c556:	d009      	beq.n	800c56c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	6852      	ldr	r2, [r2, #4]
 800c564:	b2d2      	uxtb	r2, r2
 800c566:	4611      	mov	r1, r2
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c56c:	2340      	movs	r3, #64	; 0x40
 800c56e:	2200      	movs	r2, #0
 800c570:	2100      	movs	r1, #0
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f002 fd83 	bl	800f07e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2201      	movs	r2, #1
 800c57c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2240      	movs	r2, #64	; 0x40
 800c584:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c588:	2340      	movs	r3, #64	; 0x40
 800c58a:	2200      	movs	r2, #0
 800c58c:	2180      	movs	r1, #128	; 0x80
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f002 fd75 	bl	800f07e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2201      	movs	r2, #1
 800c598:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2240      	movs	r2, #64	; 0x40
 800c59e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c5a0:	2300      	movs	r3, #0
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3708      	adds	r7, #8
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}

0800c5aa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c5aa:	b480      	push	{r7}
 800c5ac:	b083      	sub	sp, #12
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	78fa      	ldrb	r2, [r7, #3]
 800c5ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c5bc:	2300      	movs	r3, #0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	370c      	adds	r7, #12
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr

0800c5ca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c5ca:	b480      	push	{r7}
 800c5cc:	b083      	sub	sp, #12
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2204      	movs	r2, #4
 800c5e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr

0800c5f4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c602:	2b04      	cmp	r3, #4
 800c604:	d105      	bne.n	800c612 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c612:	2300      	movs	r3, #0
}
 800c614:	4618      	mov	r0, r3
 800c616:	370c      	adds	r7, #12
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c62e:	2b03      	cmp	r3, #3
 800c630:	d10b      	bne.n	800c64a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c638:	69db      	ldr	r3, [r3, #28]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d005      	beq.n	800c64a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c644:	69db      	ldr	r3, [r3, #28]
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c64a:	2300      	movs	r3, #0
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3708      	adds	r7, #8
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	460b      	mov	r3, r1
 800c65e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c660:	2300      	movs	r3, #0
}
 800c662:	4618      	mov	r0, r3
 800c664:	370c      	adds	r7, #12
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr

0800c66e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c66e:	b480      	push	{r7}
 800c670:	b083      	sub	sp, #12
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
 800c676:	460b      	mov	r3, r1
 800c678:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c67a:	2300      	movs	r3, #0
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	370c      	adds	r7, #12
 800c680:	46bd      	mov	sp, r7
 800c682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c686:	4770      	bx	lr

0800c688 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c688:	b480      	push	{r7}
 800c68a:	b083      	sub	sp, #12
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c690:	2300      	movs	r3, #0
}
 800c692:	4618      	mov	r0, r3
 800c694:	370c      	adds	r7, #12
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr

0800c69e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c69e:	b580      	push	{r7, lr}
 800c6a0:	b082      	sub	sp, #8
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d009      	beq.n	800c6cc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	6852      	ldr	r2, [r2, #4]
 800c6c4:	b2d2      	uxtb	r2, r2
 800c6c6:	4611      	mov	r1, r2
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	4798      	blx	r3
  }

  return USBD_OK;
 800c6cc:	2300      	movs	r3, #0
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3708      	adds	r7, #8
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c6d6:	b480      	push	{r7}
 800c6d8:	b087      	sub	sp, #28
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c6f4:	8a3b      	ldrh	r3, [r7, #16]
 800c6f6:	021b      	lsls	r3, r3, #8
 800c6f8:	b21a      	sxth	r2, r3
 800c6fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c6fe:	4313      	orrs	r3, r2
 800c700:	b21b      	sxth	r3, r3
 800c702:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c704:	89fb      	ldrh	r3, [r7, #14]
}
 800c706:	4618      	mov	r0, r3
 800c708:	371c      	adds	r7, #28
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
	...

0800c714 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c71e:	2300      	movs	r3, #0
 800c720:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c72a:	2b20      	cmp	r3, #32
 800c72c:	d004      	beq.n	800c738 <USBD_StdDevReq+0x24>
 800c72e:	2b40      	cmp	r3, #64	; 0x40
 800c730:	d002      	beq.n	800c738 <USBD_StdDevReq+0x24>
 800c732:	2b00      	cmp	r3, #0
 800c734:	d00a      	beq.n	800c74c <USBD_StdDevReq+0x38>
 800c736:	e050      	b.n	800c7da <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	6839      	ldr	r1, [r7, #0]
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	4798      	blx	r3
 800c746:	4603      	mov	r3, r0
 800c748:	73fb      	strb	r3, [r7, #15]
    break;
 800c74a:	e04b      	b.n	800c7e4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	785b      	ldrb	r3, [r3, #1]
 800c750:	2b09      	cmp	r3, #9
 800c752:	d83c      	bhi.n	800c7ce <USBD_StdDevReq+0xba>
 800c754:	a201      	add	r2, pc, #4	; (adr r2, 800c75c <USBD_StdDevReq+0x48>)
 800c756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c75a:	bf00      	nop
 800c75c:	0800c7b1 	.word	0x0800c7b1
 800c760:	0800c7c5 	.word	0x0800c7c5
 800c764:	0800c7cf 	.word	0x0800c7cf
 800c768:	0800c7bb 	.word	0x0800c7bb
 800c76c:	0800c7cf 	.word	0x0800c7cf
 800c770:	0800c78f 	.word	0x0800c78f
 800c774:	0800c785 	.word	0x0800c785
 800c778:	0800c7cf 	.word	0x0800c7cf
 800c77c:	0800c7a7 	.word	0x0800c7a7
 800c780:	0800c799 	.word	0x0800c799
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c784:	6839      	ldr	r1, [r7, #0]
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f9ce 	bl	800cb28 <USBD_GetDescriptor>
      break;
 800c78c:	e024      	b.n	800c7d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c78e:	6839      	ldr	r1, [r7, #0]
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 fb33 	bl	800cdfc <USBD_SetAddress>
      break;
 800c796:	e01f      	b.n	800c7d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c798:	6839      	ldr	r1, [r7, #0]
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 fb70 	bl	800ce80 <USBD_SetConfig>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	73fb      	strb	r3, [r7, #15]
      break;
 800c7a4:	e018      	b.n	800c7d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c7a6:	6839      	ldr	r1, [r7, #0]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 fc0d 	bl	800cfc8 <USBD_GetConfig>
      break;
 800c7ae:	e013      	b.n	800c7d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c7b0:	6839      	ldr	r1, [r7, #0]
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 fc3c 	bl	800d030 <USBD_GetStatus>
      break;
 800c7b8:	e00e      	b.n	800c7d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c7ba:	6839      	ldr	r1, [r7, #0]
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 fc6a 	bl	800d096 <USBD_SetFeature>
      break;
 800c7c2:	e009      	b.n	800c7d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c7c4:	6839      	ldr	r1, [r7, #0]
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 fc79 	bl	800d0be <USBD_ClrFeature>
      break;
 800c7cc:	e004      	b.n	800c7d8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c7ce:	6839      	ldr	r1, [r7, #0]
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 fccf 	bl	800d174 <USBD_CtlError>
      break;
 800c7d6:	bf00      	nop
    }
    break;
 800c7d8:	e004      	b.n	800c7e4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c7da:	6839      	ldr	r1, [r7, #0]
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 fcc9 	bl	800d174 <USBD_CtlError>
    break;
 800c7e2:	bf00      	nop
  }

  return ret;
 800c7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	bf00      	nop

0800c7f0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c806:	2b20      	cmp	r3, #32
 800c808:	d003      	beq.n	800c812 <USBD_StdItfReq+0x22>
 800c80a:	2b40      	cmp	r3, #64	; 0x40
 800c80c:	d001      	beq.n	800c812 <USBD_StdItfReq+0x22>
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d12a      	bne.n	800c868 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c818:	3b01      	subs	r3, #1
 800c81a:	2b02      	cmp	r3, #2
 800c81c:	d81d      	bhi.n	800c85a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	889b      	ldrh	r3, [r3, #4]
 800c822:	b2db      	uxtb	r3, r3
 800c824:	2b01      	cmp	r3, #1
 800c826:	d813      	bhi.n	800c850 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c82e:	689b      	ldr	r3, [r3, #8]
 800c830:	6839      	ldr	r1, [r7, #0]
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	4798      	blx	r3
 800c836:	4603      	mov	r3, r0
 800c838:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	88db      	ldrh	r3, [r3, #6]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d110      	bne.n	800c864 <USBD_StdItfReq+0x74>
 800c842:	7bfb      	ldrb	r3, [r7, #15]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d10d      	bne.n	800c864 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f000 fd5e 	bl	800d30a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c84e:	e009      	b.n	800c864 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c850:	6839      	ldr	r1, [r7, #0]
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 fc8e 	bl	800d174 <USBD_CtlError>
      break;
 800c858:	e004      	b.n	800c864 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c85a:	6839      	ldr	r1, [r7, #0]
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 fc89 	bl	800d174 <USBD_CtlError>
      break;
 800c862:	e000      	b.n	800c866 <USBD_StdItfReq+0x76>
      break;
 800c864:	bf00      	nop
    }
    break;
 800c866:	e004      	b.n	800c872 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c868:	6839      	ldr	r1, [r7, #0]
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 fc82 	bl	800d174 <USBD_CtlError>
    break;
 800c870:	bf00      	nop
  }

  return ret;
 800c872:	7bfb      	ldrb	r3, [r7, #15]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3710      	adds	r7, #16
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c886:	2300      	movs	r3, #0
 800c888:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	889b      	ldrh	r3, [r3, #4]
 800c88e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c898:	2b20      	cmp	r3, #32
 800c89a:	d004      	beq.n	800c8a6 <USBD_StdEPReq+0x2a>
 800c89c:	2b40      	cmp	r3, #64	; 0x40
 800c89e:	d002      	beq.n	800c8a6 <USBD_StdEPReq+0x2a>
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d00a      	beq.n	800c8ba <USBD_StdEPReq+0x3e>
 800c8a4:	e135      	b.n	800cb12 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8ac:	689b      	ldr	r3, [r3, #8]
 800c8ae:	6839      	ldr	r1, [r7, #0]
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	4798      	blx	r3
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c8b8:	e130      	b.n	800cb1c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	785b      	ldrb	r3, [r3, #1]
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d03e      	beq.n	800c940 <USBD_StdEPReq+0xc4>
 800c8c2:	2b03      	cmp	r3, #3
 800c8c4:	d002      	beq.n	800c8cc <USBD_StdEPReq+0x50>
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d077      	beq.n	800c9ba <USBD_StdEPReq+0x13e>
 800c8ca:	e11c      	b.n	800cb06 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	d002      	beq.n	800c8dc <USBD_StdEPReq+0x60>
 800c8d6:	2b03      	cmp	r3, #3
 800c8d8:	d015      	beq.n	800c906 <USBD_StdEPReq+0x8a>
 800c8da:	e02b      	b.n	800c934 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8dc:	7bbb      	ldrb	r3, [r7, #14]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d00c      	beq.n	800c8fc <USBD_StdEPReq+0x80>
 800c8e2:	7bbb      	ldrb	r3, [r7, #14]
 800c8e4:	2b80      	cmp	r3, #128	; 0x80
 800c8e6:	d009      	beq.n	800c8fc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c8e8:	7bbb      	ldrb	r3, [r7, #14]
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f002 fc0b 	bl	800f108 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8f2:	2180      	movs	r1, #128	; 0x80
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f002 fc07 	bl	800f108 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c8fa:	e020      	b.n	800c93e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c8fc:	6839      	ldr	r1, [r7, #0]
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 fc38 	bl	800d174 <USBD_CtlError>
        break;
 800c904:	e01b      	b.n	800c93e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	885b      	ldrh	r3, [r3, #2]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d10e      	bne.n	800c92c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c90e:	7bbb      	ldrb	r3, [r7, #14]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d00b      	beq.n	800c92c <USBD_StdEPReq+0xb0>
 800c914:	7bbb      	ldrb	r3, [r7, #14]
 800c916:	2b80      	cmp	r3, #128	; 0x80
 800c918:	d008      	beq.n	800c92c <USBD_StdEPReq+0xb0>
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	88db      	ldrh	r3, [r3, #6]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d104      	bne.n	800c92c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c922:	7bbb      	ldrb	r3, [r7, #14]
 800c924:	4619      	mov	r1, r3
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f002 fbee 	bl	800f108 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f000 fcec 	bl	800d30a <USBD_CtlSendStatus>

        break;
 800c932:	e004      	b.n	800c93e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c934:	6839      	ldr	r1, [r7, #0]
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 fc1c 	bl	800d174 <USBD_CtlError>
        break;
 800c93c:	bf00      	nop
      }
      break;
 800c93e:	e0e7      	b.n	800cb10 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c946:	2b02      	cmp	r3, #2
 800c948:	d002      	beq.n	800c950 <USBD_StdEPReq+0xd4>
 800c94a:	2b03      	cmp	r3, #3
 800c94c:	d015      	beq.n	800c97a <USBD_StdEPReq+0xfe>
 800c94e:	e02d      	b.n	800c9ac <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c950:	7bbb      	ldrb	r3, [r7, #14]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d00c      	beq.n	800c970 <USBD_StdEPReq+0xf4>
 800c956:	7bbb      	ldrb	r3, [r7, #14]
 800c958:	2b80      	cmp	r3, #128	; 0x80
 800c95a:	d009      	beq.n	800c970 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c95c:	7bbb      	ldrb	r3, [r7, #14]
 800c95e:	4619      	mov	r1, r3
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f002 fbd1 	bl	800f108 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c966:	2180      	movs	r1, #128	; 0x80
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f002 fbcd 	bl	800f108 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c96e:	e023      	b.n	800c9b8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c970:	6839      	ldr	r1, [r7, #0]
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 fbfe 	bl	800d174 <USBD_CtlError>
        break;
 800c978:	e01e      	b.n	800c9b8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	885b      	ldrh	r3, [r3, #2]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d119      	bne.n	800c9b6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c982:	7bbb      	ldrb	r3, [r7, #14]
 800c984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d004      	beq.n	800c996 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c98c:	7bbb      	ldrb	r3, [r7, #14]
 800c98e:	4619      	mov	r1, r3
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f002 fbd8 	bl	800f146 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 fcb7 	bl	800d30a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	6839      	ldr	r1, [r7, #0]
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	4798      	blx	r3
        }
        break;
 800c9aa:	e004      	b.n	800c9b6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c9ac:	6839      	ldr	r1, [r7, #0]
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 fbe0 	bl	800d174 <USBD_CtlError>
        break;
 800c9b4:	e000      	b.n	800c9b8 <USBD_StdEPReq+0x13c>
        break;
 800c9b6:	bf00      	nop
      }
      break;
 800c9b8:	e0aa      	b.n	800cb10 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9c0:	2b02      	cmp	r3, #2
 800c9c2:	d002      	beq.n	800c9ca <USBD_StdEPReq+0x14e>
 800c9c4:	2b03      	cmp	r3, #3
 800c9c6:	d032      	beq.n	800ca2e <USBD_StdEPReq+0x1b2>
 800c9c8:	e097      	b.n	800cafa <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9ca:	7bbb      	ldrb	r3, [r7, #14]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d007      	beq.n	800c9e0 <USBD_StdEPReq+0x164>
 800c9d0:	7bbb      	ldrb	r3, [r7, #14]
 800c9d2:	2b80      	cmp	r3, #128	; 0x80
 800c9d4:	d004      	beq.n	800c9e0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c9d6:	6839      	ldr	r1, [r7, #0]
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 fbcb 	bl	800d174 <USBD_CtlError>
          break;
 800c9de:	e091      	b.n	800cb04 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	da0b      	bge.n	800ca00 <USBD_StdEPReq+0x184>
 800c9e8:	7bbb      	ldrb	r3, [r7, #14]
 800c9ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c9ee:	4613      	mov	r3, r2
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	4413      	add	r3, r2
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	3310      	adds	r3, #16
 800c9f8:	687a      	ldr	r2, [r7, #4]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	3304      	adds	r3, #4
 800c9fe:	e00b      	b.n	800ca18 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ca00:	7bbb      	ldrb	r3, [r7, #14]
 800ca02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca06:	4613      	mov	r3, r2
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	4413      	add	r3, r2
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ca12:	687a      	ldr	r2, [r7, #4]
 800ca14:	4413      	add	r3, r2
 800ca16:	3304      	adds	r3, #4
 800ca18:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	2202      	movs	r2, #2
 800ca24:	4619      	mov	r1, r3
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 fc15 	bl	800d256 <USBD_CtlSendData>
        break;
 800ca2c:	e06a      	b.n	800cb04 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800ca2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	da11      	bge.n	800ca5a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ca36:	7bbb      	ldrb	r3, [r7, #14]
 800ca38:	f003 020f 	and.w	r2, r3, #15
 800ca3c:	6879      	ldr	r1, [r7, #4]
 800ca3e:	4613      	mov	r3, r2
 800ca40:	009b      	lsls	r3, r3, #2
 800ca42:	4413      	add	r3, r2
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	440b      	add	r3, r1
 800ca48:	3324      	adds	r3, #36	; 0x24
 800ca4a:	881b      	ldrh	r3, [r3, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d117      	bne.n	800ca80 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ca50:	6839      	ldr	r1, [r7, #0]
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 fb8e 	bl	800d174 <USBD_CtlError>
            break;
 800ca58:	e054      	b.n	800cb04 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ca5a:	7bbb      	ldrb	r3, [r7, #14]
 800ca5c:	f003 020f 	and.w	r2, r3, #15
 800ca60:	6879      	ldr	r1, [r7, #4]
 800ca62:	4613      	mov	r3, r2
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	4413      	add	r3, r2
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	440b      	add	r3, r1
 800ca6c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ca70:	881b      	ldrh	r3, [r3, #0]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d104      	bne.n	800ca80 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ca76:	6839      	ldr	r1, [r7, #0]
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 fb7b 	bl	800d174 <USBD_CtlError>
            break;
 800ca7e:	e041      	b.n	800cb04 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	da0b      	bge.n	800caa0 <USBD_StdEPReq+0x224>
 800ca88:	7bbb      	ldrb	r3, [r7, #14]
 800ca8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca8e:	4613      	mov	r3, r2
 800ca90:	009b      	lsls	r3, r3, #2
 800ca92:	4413      	add	r3, r2
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	3310      	adds	r3, #16
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	3304      	adds	r3, #4
 800ca9e:	e00b      	b.n	800cab8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800caa0:	7bbb      	ldrb	r3, [r7, #14]
 800caa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800caa6:	4613      	mov	r3, r2
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	4413      	add	r3, r2
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	4413      	add	r3, r2
 800cab6:	3304      	adds	r3, #4
 800cab8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800caba:	7bbb      	ldrb	r3, [r7, #14]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d002      	beq.n	800cac6 <USBD_StdEPReq+0x24a>
 800cac0:	7bbb      	ldrb	r3, [r7, #14]
 800cac2:	2b80      	cmp	r3, #128	; 0x80
 800cac4:	d103      	bne.n	800cace <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	2200      	movs	r2, #0
 800caca:	601a      	str	r2, [r3, #0]
 800cacc:	e00e      	b.n	800caec <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cace:	7bbb      	ldrb	r3, [r7, #14]
 800cad0:	4619      	mov	r1, r3
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f002 fb56 	bl	800f184 <USBD_LL_IsStallEP>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d003      	beq.n	800cae6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	2201      	movs	r2, #1
 800cae2:	601a      	str	r2, [r3, #0]
 800cae4:	e002      	b.n	800caec <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	2200      	movs	r2, #0
 800caea:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	2202      	movs	r2, #2
 800caf0:	4619      	mov	r1, r3
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 fbaf 	bl	800d256 <USBD_CtlSendData>
          break;
 800caf8:	e004      	b.n	800cb04 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800cafa:	6839      	ldr	r1, [r7, #0]
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 fb39 	bl	800d174 <USBD_CtlError>
        break;
 800cb02:	bf00      	nop
      }
      break;
 800cb04:	e004      	b.n	800cb10 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800cb06:	6839      	ldr	r1, [r7, #0]
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 fb33 	bl	800d174 <USBD_CtlError>
      break;
 800cb0e:	bf00      	nop
    }
    break;
 800cb10:	e004      	b.n	800cb1c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800cb12:	6839      	ldr	r1, [r7, #0]
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 fb2d 	bl	800d174 <USBD_CtlError>
    break;
 800cb1a:	bf00      	nop
  }

  return ret;
 800cb1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3710      	adds	r7, #16
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
	...

0800cb28 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b084      	sub	sp, #16
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb32:	2300      	movs	r3, #0
 800cb34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cb36:	2300      	movs	r3, #0
 800cb38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	885b      	ldrh	r3, [r3, #2]
 800cb42:	0a1b      	lsrs	r3, r3, #8
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	3b01      	subs	r3, #1
 800cb48:	2b06      	cmp	r3, #6
 800cb4a:	f200 8128 	bhi.w	800cd9e <USBD_GetDescriptor+0x276>
 800cb4e:	a201      	add	r2, pc, #4	; (adr r2, 800cb54 <USBD_GetDescriptor+0x2c>)
 800cb50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb54:	0800cb71 	.word	0x0800cb71
 800cb58:	0800cb89 	.word	0x0800cb89
 800cb5c:	0800cbc9 	.word	0x0800cbc9
 800cb60:	0800cd9f 	.word	0x0800cd9f
 800cb64:	0800cd9f 	.word	0x0800cd9f
 800cb68:	0800cd3f 	.word	0x0800cd3f
 800cb6c:	0800cd6b 	.word	0x0800cd6b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	7c12      	ldrb	r2, [r2, #16]
 800cb7c:	f107 0108 	add.w	r1, r7, #8
 800cb80:	4610      	mov	r0, r2
 800cb82:	4798      	blx	r3
 800cb84:	60f8      	str	r0, [r7, #12]
    break;
 800cb86:	e112      	b.n	800cdae <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	7c1b      	ldrb	r3, [r3, #16]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d10d      	bne.n	800cbac <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb98:	f107 0208 	add.w	r2, r7, #8
 800cb9c:	4610      	mov	r0, r2
 800cb9e:	4798      	blx	r3
 800cba0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	3301      	adds	r3, #1
 800cba6:	2202      	movs	r2, #2
 800cba8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800cbaa:	e100      	b.n	800cdae <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb4:	f107 0208 	add.w	r2, r7, #8
 800cbb8:	4610      	mov	r0, r2
 800cbba:	4798      	blx	r3
 800cbbc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	2202      	movs	r2, #2
 800cbc4:	701a      	strb	r2, [r3, #0]
    break;
 800cbc6:	e0f2      	b.n	800cdae <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	885b      	ldrh	r3, [r3, #2]
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	2b05      	cmp	r3, #5
 800cbd0:	f200 80ac 	bhi.w	800cd2c <USBD_GetDescriptor+0x204>
 800cbd4:	a201      	add	r2, pc, #4	; (adr r2, 800cbdc <USBD_GetDescriptor+0xb4>)
 800cbd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbda:	bf00      	nop
 800cbdc:	0800cbf5 	.word	0x0800cbf5
 800cbe0:	0800cc29 	.word	0x0800cc29
 800cbe4:	0800cc5d 	.word	0x0800cc5d
 800cbe8:	0800cc91 	.word	0x0800cc91
 800cbec:	0800ccc5 	.word	0x0800ccc5
 800cbf0:	0800ccf9 	.word	0x0800ccf9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d00b      	beq.n	800cc18 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	7c12      	ldrb	r2, [r2, #16]
 800cc0c:	f107 0108 	add.w	r1, r7, #8
 800cc10:	4610      	mov	r0, r2
 800cc12:	4798      	blx	r3
 800cc14:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc16:	e091      	b.n	800cd3c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cc18:	6839      	ldr	r1, [r7, #0]
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 faaa 	bl	800d174 <USBD_CtlError>
        err++;
 800cc20:	7afb      	ldrb	r3, [r7, #11]
 800cc22:	3301      	adds	r3, #1
 800cc24:	72fb      	strb	r3, [r7, #11]
      break;
 800cc26:	e089      	b.n	800cd3c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc2e:	689b      	ldr	r3, [r3, #8]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d00b      	beq.n	800cc4c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	7c12      	ldrb	r2, [r2, #16]
 800cc40:	f107 0108 	add.w	r1, r7, #8
 800cc44:	4610      	mov	r0, r2
 800cc46:	4798      	blx	r3
 800cc48:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc4a:	e077      	b.n	800cd3c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cc4c:	6839      	ldr	r1, [r7, #0]
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 fa90 	bl	800d174 <USBD_CtlError>
        err++;
 800cc54:	7afb      	ldrb	r3, [r7, #11]
 800cc56:	3301      	adds	r3, #1
 800cc58:	72fb      	strb	r3, [r7, #11]
      break;
 800cc5a:	e06f      	b.n	800cd3c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc62:	68db      	ldr	r3, [r3, #12]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00b      	beq.n	800cc80 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc6e:	68db      	ldr	r3, [r3, #12]
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	7c12      	ldrb	r2, [r2, #16]
 800cc74:	f107 0108 	add.w	r1, r7, #8
 800cc78:	4610      	mov	r0, r2
 800cc7a:	4798      	blx	r3
 800cc7c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc7e:	e05d      	b.n	800cd3c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cc80:	6839      	ldr	r1, [r7, #0]
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 fa76 	bl	800d174 <USBD_CtlError>
        err++;
 800cc88:	7afb      	ldrb	r3, [r7, #11]
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	72fb      	strb	r3, [r7, #11]
      break;
 800cc8e:	e055      	b.n	800cd3c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc96:	691b      	ldr	r3, [r3, #16]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d00b      	beq.n	800ccb4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cca2:	691b      	ldr	r3, [r3, #16]
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	7c12      	ldrb	r2, [r2, #16]
 800cca8:	f107 0108 	add.w	r1, r7, #8
 800ccac:	4610      	mov	r0, r2
 800ccae:	4798      	blx	r3
 800ccb0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ccb2:	e043      	b.n	800cd3c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ccb4:	6839      	ldr	r1, [r7, #0]
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 fa5c 	bl	800d174 <USBD_CtlError>
        err++;
 800ccbc:	7afb      	ldrb	r3, [r7, #11]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	72fb      	strb	r3, [r7, #11]
      break;
 800ccc2:	e03b      	b.n	800cd3c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccca:	695b      	ldr	r3, [r3, #20]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d00b      	beq.n	800cce8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccd6:	695b      	ldr	r3, [r3, #20]
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	7c12      	ldrb	r2, [r2, #16]
 800ccdc:	f107 0108 	add.w	r1, r7, #8
 800cce0:	4610      	mov	r0, r2
 800cce2:	4798      	blx	r3
 800cce4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cce6:	e029      	b.n	800cd3c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cce8:	6839      	ldr	r1, [r7, #0]
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f000 fa42 	bl	800d174 <USBD_CtlError>
        err++;
 800ccf0:	7afb      	ldrb	r3, [r7, #11]
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	72fb      	strb	r3, [r7, #11]
      break;
 800ccf6:	e021      	b.n	800cd3c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccfe:	699b      	ldr	r3, [r3, #24]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d00b      	beq.n	800cd1c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd0a:	699b      	ldr	r3, [r3, #24]
 800cd0c:	687a      	ldr	r2, [r7, #4]
 800cd0e:	7c12      	ldrb	r2, [r2, #16]
 800cd10:	f107 0108 	add.w	r1, r7, #8
 800cd14:	4610      	mov	r0, r2
 800cd16:	4798      	blx	r3
 800cd18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd1a:	e00f      	b.n	800cd3c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cd1c:	6839      	ldr	r1, [r7, #0]
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 fa28 	bl	800d174 <USBD_CtlError>
        err++;
 800cd24:	7afb      	ldrb	r3, [r7, #11]
 800cd26:	3301      	adds	r3, #1
 800cd28:	72fb      	strb	r3, [r7, #11]
      break;
 800cd2a:	e007      	b.n	800cd3c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800cd2c:	6839      	ldr	r1, [r7, #0]
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 fa20 	bl	800d174 <USBD_CtlError>
      err++;
 800cd34:	7afb      	ldrb	r3, [r7, #11]
 800cd36:	3301      	adds	r3, #1
 800cd38:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800cd3a:	bf00      	nop
    }
    break;
 800cd3c:	e037      	b.n	800cdae <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	7c1b      	ldrb	r3, [r3, #16]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d109      	bne.n	800cd5a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd4e:	f107 0208 	add.w	r2, r7, #8
 800cd52:	4610      	mov	r0, r2
 800cd54:	4798      	blx	r3
 800cd56:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800cd58:	e029      	b.n	800cdae <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800cd5a:	6839      	ldr	r1, [r7, #0]
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f000 fa09 	bl	800d174 <USBD_CtlError>
      err++;
 800cd62:	7afb      	ldrb	r3, [r7, #11]
 800cd64:	3301      	adds	r3, #1
 800cd66:	72fb      	strb	r3, [r7, #11]
    break;
 800cd68:	e021      	b.n	800cdae <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	7c1b      	ldrb	r3, [r3, #16]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d10d      	bne.n	800cd8e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd7a:	f107 0208 	add.w	r2, r7, #8
 800cd7e:	4610      	mov	r0, r2
 800cd80:	4798      	blx	r3
 800cd82:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	3301      	adds	r3, #1
 800cd88:	2207      	movs	r2, #7
 800cd8a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800cd8c:	e00f      	b.n	800cdae <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800cd8e:	6839      	ldr	r1, [r7, #0]
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 f9ef 	bl	800d174 <USBD_CtlError>
      err++;
 800cd96:	7afb      	ldrb	r3, [r7, #11]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	72fb      	strb	r3, [r7, #11]
    break;
 800cd9c:	e007      	b.n	800cdae <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800cd9e:	6839      	ldr	r1, [r7, #0]
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 f9e7 	bl	800d174 <USBD_CtlError>
    err++;
 800cda6:	7afb      	ldrb	r3, [r7, #11]
 800cda8:	3301      	adds	r3, #1
 800cdaa:	72fb      	strb	r3, [r7, #11]
    break;
 800cdac:	bf00      	nop
  }

  if (err != 0U)
 800cdae:	7afb      	ldrb	r3, [r7, #11]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d11e      	bne.n	800cdf2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	88db      	ldrh	r3, [r3, #6]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d016      	beq.n	800cdea <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800cdbc:	893b      	ldrh	r3, [r7, #8]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d00e      	beq.n	800cde0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	88da      	ldrh	r2, [r3, #6]
 800cdc6:	893b      	ldrh	r3, [r7, #8]
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	bf28      	it	cs
 800cdcc:	4613      	movcs	r3, r2
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800cdd2:	893b      	ldrh	r3, [r7, #8]
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	68f9      	ldr	r1, [r7, #12]
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 fa3c 	bl	800d256 <USBD_CtlSendData>
 800cdde:	e009      	b.n	800cdf4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800cde0:	6839      	ldr	r1, [r7, #0]
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 f9c6 	bl	800d174 <USBD_CtlError>
 800cde8:	e004      	b.n	800cdf4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 fa8d 	bl	800d30a <USBD_CtlSendStatus>
 800cdf0:	e000      	b.n	800cdf4 <USBD_GetDescriptor+0x2cc>
    return;
 800cdf2:	bf00      	nop
    }
  }
}
 800cdf4:	3710      	adds	r7, #16
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop

0800cdfc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	889b      	ldrh	r3, [r3, #4]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d130      	bne.n	800ce70 <USBD_SetAddress+0x74>
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	88db      	ldrh	r3, [r3, #6]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d12c      	bne.n	800ce70 <USBD_SetAddress+0x74>
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	885b      	ldrh	r3, [r3, #2]
 800ce1a:	2b7f      	cmp	r3, #127	; 0x7f
 800ce1c:	d828      	bhi.n	800ce70 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	885b      	ldrh	r3, [r3, #2]
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce30:	2b03      	cmp	r3, #3
 800ce32:	d104      	bne.n	800ce3e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ce34:	6839      	ldr	r1, [r7, #0]
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f000 f99c 	bl	800d174 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce3c:	e01c      	b.n	800ce78 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	7bfa      	ldrb	r2, [r7, #15]
 800ce42:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ce46:	7bfb      	ldrb	r3, [r7, #15]
 800ce48:	4619      	mov	r1, r3
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f002 f9c6 	bl	800f1dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f000 fa5a 	bl	800d30a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ce56:	7bfb      	ldrb	r3, [r7, #15]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d004      	beq.n	800ce66 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2202      	movs	r2, #2
 800ce60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce64:	e008      	b.n	800ce78 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2201      	movs	r2, #1
 800ce6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce6e:	e003      	b.n	800ce78 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ce70:	6839      	ldr	r1, [r7, #0]
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 f97e 	bl	800d174 <USBD_CtlError>
  }
}
 800ce78:	bf00      	nop
 800ce7a:	3710      	adds	r7, #16
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	885b      	ldrh	r3, [r3, #2]
 800ce92:	b2da      	uxtb	r2, r3
 800ce94:	4b4b      	ldr	r3, [pc, #300]	; (800cfc4 <USBD_SetConfig+0x144>)
 800ce96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ce98:	4b4a      	ldr	r3, [pc, #296]	; (800cfc4 <USBD_SetConfig+0x144>)
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d905      	bls.n	800ceac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cea0:	6839      	ldr	r1, [r7, #0]
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 f966 	bl	800d174 <USBD_CtlError>
    return USBD_FAIL;
 800cea8:	2303      	movs	r3, #3
 800ceaa:	e087      	b.n	800cfbc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ceb2:	2b02      	cmp	r3, #2
 800ceb4:	d002      	beq.n	800cebc <USBD_SetConfig+0x3c>
 800ceb6:	2b03      	cmp	r3, #3
 800ceb8:	d025      	beq.n	800cf06 <USBD_SetConfig+0x86>
 800ceba:	e071      	b.n	800cfa0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800cebc:	4b41      	ldr	r3, [pc, #260]	; (800cfc4 <USBD_SetConfig+0x144>)
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d01c      	beq.n	800cefe <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800cec4:	4b3f      	ldr	r3, [pc, #252]	; (800cfc4 <USBD_SetConfig+0x144>)
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	461a      	mov	r2, r3
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800cece:	4b3d      	ldr	r3, [pc, #244]	; (800cfc4 <USBD_SetConfig+0x144>)
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	4619      	mov	r1, r3
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f7ff f9a7 	bl	800c228 <USBD_SetClassConfig>
 800ceda:	4603      	mov	r3, r0
 800cedc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800cede:	7bfb      	ldrb	r3, [r7, #15]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d004      	beq.n	800ceee <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800cee4:	6839      	ldr	r1, [r7, #0]
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 f944 	bl	800d174 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ceec:	e065      	b.n	800cfba <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 fa0b 	bl	800d30a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2203      	movs	r2, #3
 800cef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800cefc:	e05d      	b.n	800cfba <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 fa03 	bl	800d30a <USBD_CtlSendStatus>
    break;
 800cf04:	e059      	b.n	800cfba <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800cf06:	4b2f      	ldr	r3, [pc, #188]	; (800cfc4 <USBD_SetConfig+0x144>)
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d112      	bne.n	800cf34 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2202      	movs	r2, #2
 800cf12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800cf16:	4b2b      	ldr	r3, [pc, #172]	; (800cfc4 <USBD_SetConfig+0x144>)
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cf20:	4b28      	ldr	r3, [pc, #160]	; (800cfc4 <USBD_SetConfig+0x144>)
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	4619      	mov	r1, r3
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f7ff f99a 	bl	800c260 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 f9ec 	bl	800d30a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800cf32:	e042      	b.n	800cfba <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800cf34:	4b23      	ldr	r3, [pc, #140]	; (800cfc4 <USBD_SetConfig+0x144>)
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	461a      	mov	r2, r3
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d02a      	beq.n	800cf98 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	b2db      	uxtb	r3, r3
 800cf48:	4619      	mov	r1, r3
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f7ff f988 	bl	800c260 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800cf50:	4b1c      	ldr	r3, [pc, #112]	; (800cfc4 <USBD_SetConfig+0x144>)
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	461a      	mov	r2, r3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf5a:	4b1a      	ldr	r3, [pc, #104]	; (800cfc4 <USBD_SetConfig+0x144>)
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	4619      	mov	r1, r3
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f7ff f961 	bl	800c228 <USBD_SetClassConfig>
 800cf66:	4603      	mov	r3, r0
 800cf68:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800cf6a:	7bfb      	ldrb	r3, [r7, #15]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00f      	beq.n	800cf90 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800cf70:	6839      	ldr	r1, [r7, #0]
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 f8fe 	bl	800d174 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	4619      	mov	r1, r3
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f7ff f96d 	bl	800c260 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2202      	movs	r2, #2
 800cf8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800cf8e:	e014      	b.n	800cfba <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 f9ba 	bl	800d30a <USBD_CtlSendStatus>
    break;
 800cf96:	e010      	b.n	800cfba <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f000 f9b6 	bl	800d30a <USBD_CtlSendStatus>
    break;
 800cf9e:	e00c      	b.n	800cfba <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800cfa0:	6839      	ldr	r1, [r7, #0]
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 f8e6 	bl	800d174 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cfa8:	4b06      	ldr	r3, [pc, #24]	; (800cfc4 <USBD_SetConfig+0x144>)
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	4619      	mov	r1, r3
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f7ff f956 	bl	800c260 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800cfb4:	2303      	movs	r3, #3
 800cfb6:	73fb      	strb	r3, [r7, #15]
    break;
 800cfb8:	bf00      	nop
  }

  return ret;
 800cfba:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3710      	adds	r7, #16
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	20000c8c 	.word	0x20000c8c

0800cfc8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	88db      	ldrh	r3, [r3, #6]
 800cfd6:	2b01      	cmp	r3, #1
 800cfd8:	d004      	beq.n	800cfe4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cfda:	6839      	ldr	r1, [r7, #0]
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 f8c9 	bl	800d174 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800cfe2:	e021      	b.n	800d028 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	db17      	blt.n	800d01e <USBD_GetConfig+0x56>
 800cfee:	2b02      	cmp	r3, #2
 800cff0:	dd02      	ble.n	800cff8 <USBD_GetConfig+0x30>
 800cff2:	2b03      	cmp	r3, #3
 800cff4:	d00b      	beq.n	800d00e <USBD_GetConfig+0x46>
 800cff6:	e012      	b.n	800d01e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2200      	movs	r2, #0
 800cffc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	3308      	adds	r3, #8
 800d002:	2201      	movs	r2, #1
 800d004:	4619      	mov	r1, r3
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 f925 	bl	800d256 <USBD_CtlSendData>
      break;
 800d00c:	e00c      	b.n	800d028 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	3304      	adds	r3, #4
 800d012:	2201      	movs	r2, #1
 800d014:	4619      	mov	r1, r3
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f000 f91d 	bl	800d256 <USBD_CtlSendData>
      break;
 800d01c:	e004      	b.n	800d028 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800d01e:	6839      	ldr	r1, [r7, #0]
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 f8a7 	bl	800d174 <USBD_CtlError>
      break;
 800d026:	bf00      	nop
}
 800d028:	bf00      	nop
 800d02a:	3708      	adds	r7, #8
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d040:	3b01      	subs	r3, #1
 800d042:	2b02      	cmp	r3, #2
 800d044:	d81e      	bhi.n	800d084 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	88db      	ldrh	r3, [r3, #6]
 800d04a:	2b02      	cmp	r3, #2
 800d04c:	d004      	beq.n	800d058 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800d04e:	6839      	ldr	r1, [r7, #0]
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 f88f 	bl	800d174 <USBD_CtlError>
      break;
 800d056:	e01a      	b.n	800d08e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2201      	movs	r2, #1
 800d05c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d064:	2b00      	cmp	r3, #0
 800d066:	d005      	beq.n	800d074 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	68db      	ldr	r3, [r3, #12]
 800d06c:	f043 0202 	orr.w	r2, r3, #2
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	330c      	adds	r3, #12
 800d078:	2202      	movs	r2, #2
 800d07a:	4619      	mov	r1, r3
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f000 f8ea 	bl	800d256 <USBD_CtlSendData>
    break;
 800d082:	e004      	b.n	800d08e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800d084:	6839      	ldr	r1, [r7, #0]
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f000 f874 	bl	800d174 <USBD_CtlError>
    break;
 800d08c:	bf00      	nop
  }
}
 800d08e:	bf00      	nop
 800d090:	3708      	adds	r7, #8
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}

0800d096 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d096:	b580      	push	{r7, lr}
 800d098:	b082      	sub	sp, #8
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
 800d09e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	885b      	ldrh	r3, [r3, #2]
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d106      	bne.n	800d0b6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 f92a 	bl	800d30a <USBD_CtlSendStatus>
  }
}
 800d0b6:	bf00      	nop
 800d0b8:	3708      	adds	r7, #8
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b082      	sub	sp, #8
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
 800d0c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0ce:	3b01      	subs	r3, #1
 800d0d0:	2b02      	cmp	r3, #2
 800d0d2:	d80b      	bhi.n	800d0ec <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	885b      	ldrh	r3, [r3, #2]
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	d10c      	bne.n	800d0f6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 f910 	bl	800d30a <USBD_CtlSendStatus>
      }
      break;
 800d0ea:	e004      	b.n	800d0f6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d0ec:	6839      	ldr	r1, [r7, #0]
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f000 f840 	bl	800d174 <USBD_CtlError>
      break;
 800d0f4:	e000      	b.n	800d0f8 <USBD_ClrFeature+0x3a>
      break;
 800d0f6:	bf00      	nop
  }
}
 800d0f8:	bf00      	nop
 800d0fa:	3708      	adds	r7, #8
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	781a      	ldrb	r2, [r3, #0]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	3301      	adds	r3, #1
 800d11a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	781a      	ldrb	r2, [r3, #0]
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	3301      	adds	r3, #1
 800d128:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d12a:	68f8      	ldr	r0, [r7, #12]
 800d12c:	f7ff fad3 	bl	800c6d6 <SWAPBYTE>
 800d130:	4603      	mov	r3, r0
 800d132:	461a      	mov	r2, r3
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	3301      	adds	r3, #1
 800d13c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	3301      	adds	r3, #1
 800d142:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f7ff fac6 	bl	800c6d6 <SWAPBYTE>
 800d14a:	4603      	mov	r3, r0
 800d14c:	461a      	mov	r2, r3
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	3301      	adds	r3, #1
 800d156:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	3301      	adds	r3, #1
 800d15c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d15e:	68f8      	ldr	r0, [r7, #12]
 800d160:	f7ff fab9 	bl	800c6d6 <SWAPBYTE>
 800d164:	4603      	mov	r3, r0
 800d166:	461a      	mov	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	80da      	strh	r2, [r3, #6]
}
 800d16c:	bf00      	nop
 800d16e:	3710      	adds	r7, #16
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b082      	sub	sp, #8
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d17e:	2180      	movs	r1, #128	; 0x80
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f001 ffc1 	bl	800f108 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d186:	2100      	movs	r1, #0
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f001 ffbd 	bl	800f108 <USBD_LL_StallEP>
}
 800d18e:	bf00      	nop
 800d190:	3708      	adds	r7, #8
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}

0800d196 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d196:	b580      	push	{r7, lr}
 800d198:	b086      	sub	sp, #24
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	60f8      	str	r0, [r7, #12]
 800d19e:	60b9      	str	r1, [r7, #8]
 800d1a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d036      	beq.n	800d21a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d1b0:	6938      	ldr	r0, [r7, #16]
 800d1b2:	f000 f836 	bl	800d222 <USBD_GetLen>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	005b      	lsls	r3, r3, #1
 800d1be:	b29a      	uxth	r2, r3
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d1c4:	7dfb      	ldrb	r3, [r7, #23]
 800d1c6:	68ba      	ldr	r2, [r7, #8]
 800d1c8:	4413      	add	r3, r2
 800d1ca:	687a      	ldr	r2, [r7, #4]
 800d1cc:	7812      	ldrb	r2, [r2, #0]
 800d1ce:	701a      	strb	r2, [r3, #0]
  idx++;
 800d1d0:	7dfb      	ldrb	r3, [r7, #23]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d1d6:	7dfb      	ldrb	r3, [r7, #23]
 800d1d8:	68ba      	ldr	r2, [r7, #8]
 800d1da:	4413      	add	r3, r2
 800d1dc:	2203      	movs	r2, #3
 800d1de:	701a      	strb	r2, [r3, #0]
  idx++;
 800d1e0:	7dfb      	ldrb	r3, [r7, #23]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d1e6:	e013      	b.n	800d210 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d1e8:	7dfb      	ldrb	r3, [r7, #23]
 800d1ea:	68ba      	ldr	r2, [r7, #8]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	693a      	ldr	r2, [r7, #16]
 800d1f0:	7812      	ldrb	r2, [r2, #0]
 800d1f2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	613b      	str	r3, [r7, #16]
    idx++;
 800d1fa:	7dfb      	ldrb	r3, [r7, #23]
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d200:	7dfb      	ldrb	r3, [r7, #23]
 800d202:	68ba      	ldr	r2, [r7, #8]
 800d204:	4413      	add	r3, r2
 800d206:	2200      	movs	r2, #0
 800d208:	701a      	strb	r2, [r3, #0]
    idx++;
 800d20a:	7dfb      	ldrb	r3, [r7, #23]
 800d20c:	3301      	adds	r3, #1
 800d20e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d1e7      	bne.n	800d1e8 <USBD_GetString+0x52>
 800d218:	e000      	b.n	800d21c <USBD_GetString+0x86>
    return;
 800d21a:	bf00      	nop
  }
}
 800d21c:	3718      	adds	r7, #24
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}

0800d222 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d222:	b480      	push	{r7}
 800d224:	b085      	sub	sp, #20
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d22a:	2300      	movs	r3, #0
 800d22c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d232:	e005      	b.n	800d240 <USBD_GetLen+0x1e>
  {
    len++;
 800d234:	7bfb      	ldrb	r3, [r7, #15]
 800d236:	3301      	adds	r3, #1
 800d238:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	3301      	adds	r3, #1
 800d23e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d1f5      	bne.n	800d234 <USBD_GetLen+0x12>
  }

  return len;
 800d248:	7bfb      	ldrb	r3, [r7, #15]
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3714      	adds	r7, #20
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr

0800d256 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d256:	b580      	push	{r7, lr}
 800d258:	b084      	sub	sp, #16
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	60f8      	str	r0, [r7, #12]
 800d25e:	60b9      	str	r1, [r7, #8]
 800d260:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2202      	movs	r2, #2
 800d266:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	68ba      	ldr	r2, [r7, #8]
 800d27a:	2100      	movs	r1, #0
 800d27c:	68f8      	ldr	r0, [r7, #12]
 800d27e:	f001 ffcc 	bl	800f21a <USBD_LL_Transmit>

  return USBD_OK;
 800d282:	2300      	movs	r3, #0
}
 800d284:	4618      	mov	r0, r3
 800d286:	3710      	adds	r7, #16
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	60f8      	str	r0, [r7, #12]
 800d294:	60b9      	str	r1, [r7, #8]
 800d296:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	68ba      	ldr	r2, [r7, #8]
 800d29c:	2100      	movs	r1, #0
 800d29e:	68f8      	ldr	r0, [r7, #12]
 800d2a0:	f001 ffbb 	bl	800f21a <USBD_LL_Transmit>

  return USBD_OK;
 800d2a4:	2300      	movs	r3, #0
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b084      	sub	sp, #16
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	60f8      	str	r0, [r7, #12]
 800d2b6:	60b9      	str	r1, [r7, #8]
 800d2b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2203      	movs	r2, #3
 800d2be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	68ba      	ldr	r2, [r7, #8]
 800d2d6:	2100      	movs	r1, #0
 800d2d8:	68f8      	ldr	r0, [r7, #12]
 800d2da:	f001 ffbf 	bl	800f25c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d2de:	2300      	movs	r3, #0
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3710      	adds	r7, #16
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60f8      	str	r0, [r7, #12]
 800d2f0:	60b9      	str	r1, [r7, #8]
 800d2f2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	68ba      	ldr	r2, [r7, #8]
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	68f8      	ldr	r0, [r7, #12]
 800d2fc:	f001 ffae 	bl	800f25c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d300:	2300      	movs	r3, #0
}
 800d302:	4618      	mov	r0, r3
 800d304:	3710      	adds	r7, #16
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}

0800d30a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d30a:	b580      	push	{r7, lr}
 800d30c:	b082      	sub	sp, #8
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2204      	movs	r2, #4
 800d316:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d31a:	2300      	movs	r3, #0
 800d31c:	2200      	movs	r2, #0
 800d31e:	2100      	movs	r1, #0
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f001 ff7a 	bl	800f21a <USBD_LL_Transmit>

  return USBD_OK;
 800d326:	2300      	movs	r3, #0
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3708      	adds	r7, #8
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2205      	movs	r2, #5
 800d33c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d340:	2300      	movs	r3, #0
 800d342:	2200      	movs	r2, #0
 800d344:	2100      	movs	r1, #0
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f001 ff88 	bl	800f25c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d34c:	2300      	movs	r3, #0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d356:	b480      	push	{r7}
 800d358:	b085      	sub	sp, #20
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	4603      	mov	r3, r0
 800d35e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d360:	2300      	movs	r3, #0
 800d362:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d364:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d368:	2b84      	cmp	r3, #132	; 0x84
 800d36a:	d005      	beq.n	800d378 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d36c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	4413      	add	r3, r2
 800d374:	3303      	adds	r3, #3
 800d376:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d378:	68fb      	ldr	r3, [r7, #12]
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3714      	adds	r7, #20
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr

0800d386 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d386:	b580      	push	{r7, lr}
 800d388:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d38a:	f000 fb59 	bl	800da40 <vTaskStartScheduler>
  
  return osOK;
 800d38e:	2300      	movs	r3, #0
}
 800d390:	4618      	mov	r0, r3
 800d392:	bd80      	pop	{r7, pc}

0800d394 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d394:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d396:	b089      	sub	sp, #36	; 0x24
 800d398:	af04      	add	r7, sp, #16
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	695b      	ldr	r3, [r3, #20]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d020      	beq.n	800d3e8 <osThreadCreate+0x54>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	699b      	ldr	r3, [r3, #24]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d01c      	beq.n	800d3e8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	685c      	ldr	r4, [r3, #4]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681d      	ldr	r5, [r3, #0]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	691e      	ldr	r6, [r3, #16]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7ff ffc8 	bl	800d356 <makeFreeRtosPriority>
 800d3c6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	695b      	ldr	r3, [r3, #20]
 800d3cc:	687a      	ldr	r2, [r7, #4]
 800d3ce:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d3d0:	9202      	str	r2, [sp, #8]
 800d3d2:	9301      	str	r3, [sp, #4]
 800d3d4:	9100      	str	r1, [sp, #0]
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	4632      	mov	r2, r6
 800d3da:	4629      	mov	r1, r5
 800d3dc:	4620      	mov	r0, r4
 800d3de:	f000 f8ed 	bl	800d5bc <xTaskCreateStatic>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	60fb      	str	r3, [r7, #12]
 800d3e6:	e01c      	b.n	800d422 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	685c      	ldr	r4, [r3, #4]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d3f4:	b29e      	uxth	r6, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7ff ffaa 	bl	800d356 <makeFreeRtosPriority>
 800d402:	4602      	mov	r2, r0
 800d404:	f107 030c 	add.w	r3, r7, #12
 800d408:	9301      	str	r3, [sp, #4]
 800d40a:	9200      	str	r2, [sp, #0]
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	4632      	mov	r2, r6
 800d410:	4629      	mov	r1, r5
 800d412:	4620      	mov	r0, r4
 800d414:	f000 f92c 	bl	800d670 <xTaskCreate>
 800d418:	4603      	mov	r3, r0
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	d001      	beq.n	800d422 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d41e:	2300      	movs	r3, #0
 800d420:	e000      	b.n	800d424 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d422:	68fb      	ldr	r3, [r7, #12]
}
 800d424:	4618      	mov	r0, r3
 800d426:	3714      	adds	r7, #20
 800d428:	46bd      	mov	sp, r7
 800d42a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d42c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d001      	beq.n	800d442 <osDelay+0x16>
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	e000      	b.n	800d444 <osDelay+0x18>
 800d442:	2301      	movs	r3, #1
 800d444:	4618      	mov	r0, r3
 800d446:	f000 fac7 	bl	800d9d8 <vTaskDelay>
  
  return osOK;
 800d44a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3710      	adds	r7, #16
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d454:	b480      	push	{r7}
 800d456:	b083      	sub	sp, #12
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f103 0208 	add.w	r2, r3, #8
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d46c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f103 0208 	add.w	r2, r3, #8
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f103 0208 	add.w	r2, r3, #8
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d488:	bf00      	nop
 800d48a:	370c      	adds	r7, #12
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d4a2:	bf00      	nop
 800d4a4:	370c      	adds	r7, #12
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr

0800d4ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d4ae:	b480      	push	{r7}
 800d4b0:	b085      	sub	sp, #20
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
 800d4b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	68fa      	ldr	r2, [r7, #12]
 800d4c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	689a      	ldr	r2, [r3, #8]
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	689b      	ldr	r3, [r3, #8]
 800d4d0:	683a      	ldr	r2, [r7, #0]
 800d4d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	683a      	ldr	r2, [r7, #0]
 800d4d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	1c5a      	adds	r2, r3, #1
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	601a      	str	r2, [r3, #0]
}
 800d4ea:	bf00      	nop
 800d4ec:	3714      	adds	r7, #20
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr

0800d4f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d4f6:	b480      	push	{r7}
 800d4f8:	b085      	sub	sp, #20
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
 800d4fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d50c:	d103      	bne.n	800d516 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	691b      	ldr	r3, [r3, #16]
 800d512:	60fb      	str	r3, [r7, #12]
 800d514:	e00c      	b.n	800d530 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	3308      	adds	r3, #8
 800d51a:	60fb      	str	r3, [r7, #12]
 800d51c:	e002      	b.n	800d524 <vListInsert+0x2e>
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	60fb      	str	r3, [r7, #12]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	68ba      	ldr	r2, [r7, #8]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d2f6      	bcs.n	800d51e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	685a      	ldr	r2, [r3, #4]
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	683a      	ldr	r2, [r7, #0]
 800d53e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	68fa      	ldr	r2, [r7, #12]
 800d544:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	683a      	ldr	r2, [r7, #0]
 800d54a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	1c5a      	adds	r2, r3, #1
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	601a      	str	r2, [r3, #0]
}
 800d55c:	bf00      	nop
 800d55e:	3714      	adds	r7, #20
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr

0800d568 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d568:	b480      	push	{r7}
 800d56a:	b085      	sub	sp, #20
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	691b      	ldr	r3, [r3, #16]
 800d574:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	687a      	ldr	r2, [r7, #4]
 800d57c:	6892      	ldr	r2, [r2, #8]
 800d57e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	689b      	ldr	r3, [r3, #8]
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	6852      	ldr	r2, [r2, #4]
 800d588:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	429a      	cmp	r2, r3
 800d592:	d103      	bne.n	800d59c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	689a      	ldr	r2, [r3, #8]
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	1e5a      	subs	r2, r3, #1
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3714      	adds	r7, #20
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b08e      	sub	sp, #56	; 0x38
 800d5c0:	af04      	add	r7, sp, #16
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	607a      	str	r2, [r7, #4]
 800d5c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d109      	bne.n	800d5e4 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d4:	f383 8811 	msr	BASEPRI, r3
 800d5d8:	f3bf 8f6f 	isb	sy
 800d5dc:	f3bf 8f4f 	dsb	sy
 800d5e0:	623b      	str	r3, [r7, #32]
 800d5e2:	e7fe      	b.n	800d5e2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800d5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d109      	bne.n	800d5fe <xTaskCreateStatic+0x42>
 800d5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ee:	f383 8811 	msr	BASEPRI, r3
 800d5f2:	f3bf 8f6f 	isb	sy
 800d5f6:	f3bf 8f4f 	dsb	sy
 800d5fa:	61fb      	str	r3, [r7, #28]
 800d5fc:	e7fe      	b.n	800d5fc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d5fe:	2354      	movs	r3, #84	; 0x54
 800d600:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	2b54      	cmp	r3, #84	; 0x54
 800d606:	d009      	beq.n	800d61c <xTaskCreateStatic+0x60>
 800d608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60c:	f383 8811 	msr	BASEPRI, r3
 800d610:	f3bf 8f6f 	isb	sy
 800d614:	f3bf 8f4f 	dsb	sy
 800d618:	61bb      	str	r3, [r7, #24]
 800d61a:	e7fe      	b.n	800d61a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d61c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d620:	2b00      	cmp	r3, #0
 800d622:	d01e      	beq.n	800d662 <xTaskCreateStatic+0xa6>
 800d624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d626:	2b00      	cmp	r3, #0
 800d628:	d01b      	beq.n	800d662 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d62c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d630:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d632:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d636:	2202      	movs	r2, #2
 800d638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d63c:	2300      	movs	r3, #0
 800d63e:	9303      	str	r3, [sp, #12]
 800d640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d642:	9302      	str	r3, [sp, #8]
 800d644:	f107 0314 	add.w	r3, r7, #20
 800d648:	9301      	str	r3, [sp, #4]
 800d64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d64c:	9300      	str	r3, [sp, #0]
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	68b9      	ldr	r1, [r7, #8]
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f000 f850 	bl	800d6fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d65a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d65c:	f000 f8d8 	bl	800d810 <prvAddNewTaskToReadyList>
 800d660:	e001      	b.n	800d666 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800d662:	2300      	movs	r3, #0
 800d664:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d666:	697b      	ldr	r3, [r7, #20]
	}
 800d668:	4618      	mov	r0, r3
 800d66a:	3728      	adds	r7, #40	; 0x28
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d670:	b580      	push	{r7, lr}
 800d672:	b08c      	sub	sp, #48	; 0x30
 800d674:	af04      	add	r7, sp, #16
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	603b      	str	r3, [r7, #0]
 800d67c:	4613      	mov	r3, r2
 800d67e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d680:	88fb      	ldrh	r3, [r7, #6]
 800d682:	009b      	lsls	r3, r3, #2
 800d684:	4618      	mov	r0, r3
 800d686:	f000 ff45 	bl	800e514 <pvPortMalloc>
 800d68a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d00e      	beq.n	800d6b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d692:	2054      	movs	r0, #84	; 0x54
 800d694:	f000 ff3e 	bl	800e514 <pvPortMalloc>
 800d698:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d69a:	69fb      	ldr	r3, [r7, #28]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d003      	beq.n	800d6a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d6a0:	69fb      	ldr	r3, [r7, #28]
 800d6a2:	697a      	ldr	r2, [r7, #20]
 800d6a4:	631a      	str	r2, [r3, #48]	; 0x30
 800d6a6:	e005      	b.n	800d6b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d6a8:	6978      	ldr	r0, [r7, #20]
 800d6aa:	f000 fff5 	bl	800e698 <vPortFree>
 800d6ae:	e001      	b.n	800d6b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d017      	beq.n	800d6ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d6ba:	69fb      	ldr	r3, [r7, #28]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d6c2:	88fa      	ldrh	r2, [r7, #6]
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	9303      	str	r3, [sp, #12]
 800d6c8:	69fb      	ldr	r3, [r7, #28]
 800d6ca:	9302      	str	r3, [sp, #8]
 800d6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ce:	9301      	str	r3, [sp, #4]
 800d6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d2:	9300      	str	r3, [sp, #0]
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	68b9      	ldr	r1, [r7, #8]
 800d6d8:	68f8      	ldr	r0, [r7, #12]
 800d6da:	f000 f80e 	bl	800d6fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d6de:	69f8      	ldr	r0, [r7, #28]
 800d6e0:	f000 f896 	bl	800d810 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	61bb      	str	r3, [r7, #24]
 800d6e8:	e002      	b.n	800d6f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d6ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d6ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d6f0:	69bb      	ldr	r3, [r7, #24]
	}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3720      	adds	r7, #32
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}

0800d6fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d6fa:	b580      	push	{r7, lr}
 800d6fc:	b088      	sub	sp, #32
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	60f8      	str	r0, [r7, #12]
 800d702:	60b9      	str	r1, [r7, #8]
 800d704:	607a      	str	r2, [r7, #4]
 800d706:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d712:	3b01      	subs	r3, #1
 800d714:	009b      	lsls	r3, r3, #2
 800d716:	4413      	add	r3, r2
 800d718:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d71a:	69bb      	ldr	r3, [r7, #24]
 800d71c:	f023 0307 	bic.w	r3, r3, #7
 800d720:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	f003 0307 	and.w	r3, r3, #7
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d009      	beq.n	800d740 <prvInitialiseNewTask+0x46>
 800d72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d730:	f383 8811 	msr	BASEPRI, r3
 800d734:	f3bf 8f6f 	isb	sy
 800d738:	f3bf 8f4f 	dsb	sy
 800d73c:	617b      	str	r3, [r7, #20]
 800d73e:	e7fe      	b.n	800d73e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d01f      	beq.n	800d786 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d746:	2300      	movs	r3, #0
 800d748:	61fb      	str	r3, [r7, #28]
 800d74a:	e012      	b.n	800d772 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d74c:	68ba      	ldr	r2, [r7, #8]
 800d74e:	69fb      	ldr	r3, [r7, #28]
 800d750:	4413      	add	r3, r2
 800d752:	7819      	ldrb	r1, [r3, #0]
 800d754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d756:	69fb      	ldr	r3, [r7, #28]
 800d758:	4413      	add	r3, r2
 800d75a:	3334      	adds	r3, #52	; 0x34
 800d75c:	460a      	mov	r2, r1
 800d75e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d760:	68ba      	ldr	r2, [r7, #8]
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	4413      	add	r3, r2
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d006      	beq.n	800d77a <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d76c:	69fb      	ldr	r3, [r7, #28]
 800d76e:	3301      	adds	r3, #1
 800d770:	61fb      	str	r3, [r7, #28]
 800d772:	69fb      	ldr	r3, [r7, #28]
 800d774:	2b0f      	cmp	r3, #15
 800d776:	d9e9      	bls.n	800d74c <prvInitialiseNewTask+0x52>
 800d778:	e000      	b.n	800d77c <prvInitialiseNewTask+0x82>
			{
				break;
 800d77a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77e:	2200      	movs	r2, #0
 800d780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d784:	e003      	b.n	800d78e <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d788:	2200      	movs	r2, #0
 800d78a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d790:	2b06      	cmp	r3, #6
 800d792:	d901      	bls.n	800d798 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d794:	2306      	movs	r3, #6
 800d796:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d79c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7a2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ac:	3304      	adds	r3, #4
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7ff fe70 	bl	800d494 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b6:	3318      	adds	r3, #24
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7ff fe6b 	bl	800d494 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c6:	f1c3 0207 	rsb	r2, r3, #7
 800d7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7dc:	2200      	movs	r2, #0
 800d7de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800d7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d7ea:	683a      	ldr	r2, [r7, #0]
 800d7ec:	68f9      	ldr	r1, [r7, #12]
 800d7ee:	69b8      	ldr	r0, [r7, #24]
 800d7f0:	f000 fc8c 	bl	800e10c <pxPortInitialiseStack>
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d002      	beq.n	800d806 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d806:	bf00      	nop
 800d808:	3720      	adds	r7, #32
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}
	...

0800d810 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d818:	f000 fda0 	bl	800e35c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d81c:	4b2a      	ldr	r3, [pc, #168]	; (800d8c8 <prvAddNewTaskToReadyList+0xb8>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	3301      	adds	r3, #1
 800d822:	4a29      	ldr	r2, [pc, #164]	; (800d8c8 <prvAddNewTaskToReadyList+0xb8>)
 800d824:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d826:	4b29      	ldr	r3, [pc, #164]	; (800d8cc <prvAddNewTaskToReadyList+0xbc>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d109      	bne.n	800d842 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d82e:	4a27      	ldr	r2, [pc, #156]	; (800d8cc <prvAddNewTaskToReadyList+0xbc>)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d834:	4b24      	ldr	r3, [pc, #144]	; (800d8c8 <prvAddNewTaskToReadyList+0xb8>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d110      	bne.n	800d85e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d83c:	f000 fb42 	bl	800dec4 <prvInitialiseTaskLists>
 800d840:	e00d      	b.n	800d85e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d842:	4b23      	ldr	r3, [pc, #140]	; (800d8d0 <prvAddNewTaskToReadyList+0xc0>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d109      	bne.n	800d85e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d84a:	4b20      	ldr	r3, [pc, #128]	; (800d8cc <prvAddNewTaskToReadyList+0xbc>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d854:	429a      	cmp	r2, r3
 800d856:	d802      	bhi.n	800d85e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d858:	4a1c      	ldr	r2, [pc, #112]	; (800d8cc <prvAddNewTaskToReadyList+0xbc>)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d85e:	4b1d      	ldr	r3, [pc, #116]	; (800d8d4 <prvAddNewTaskToReadyList+0xc4>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	3301      	adds	r3, #1
 800d864:	4a1b      	ldr	r2, [pc, #108]	; (800d8d4 <prvAddNewTaskToReadyList+0xc4>)
 800d866:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86c:	2201      	movs	r2, #1
 800d86e:	409a      	lsls	r2, r3
 800d870:	4b19      	ldr	r3, [pc, #100]	; (800d8d8 <prvAddNewTaskToReadyList+0xc8>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4313      	orrs	r3, r2
 800d876:	4a18      	ldr	r2, [pc, #96]	; (800d8d8 <prvAddNewTaskToReadyList+0xc8>)
 800d878:	6013      	str	r3, [r2, #0]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d87e:	4613      	mov	r3, r2
 800d880:	009b      	lsls	r3, r3, #2
 800d882:	4413      	add	r3, r2
 800d884:	009b      	lsls	r3, r3, #2
 800d886:	4a15      	ldr	r2, [pc, #84]	; (800d8dc <prvAddNewTaskToReadyList+0xcc>)
 800d888:	441a      	add	r2, r3
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	3304      	adds	r3, #4
 800d88e:	4619      	mov	r1, r3
 800d890:	4610      	mov	r0, r2
 800d892:	f7ff fe0c 	bl	800d4ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d896:	f000 fd8f 	bl	800e3b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d89a:	4b0d      	ldr	r3, [pc, #52]	; (800d8d0 <prvAddNewTaskToReadyList+0xc0>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d00e      	beq.n	800d8c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d8a2:	4b0a      	ldr	r3, [pc, #40]	; (800d8cc <prvAddNewTaskToReadyList+0xbc>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d207      	bcs.n	800d8c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d8b0:	4b0b      	ldr	r3, [pc, #44]	; (800d8e0 <prvAddNewTaskToReadyList+0xd0>)
 800d8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8b6:	601a      	str	r2, [r3, #0]
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8c0:	bf00      	nop
 800d8c2:	3708      	adds	r7, #8
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	20000d90 	.word	0x20000d90
 800d8cc:	20000c90 	.word	0x20000c90
 800d8d0:	20000d9c 	.word	0x20000d9c
 800d8d4:	20000dac 	.word	0x20000dac
 800d8d8:	20000d98 	.word	0x20000d98
 800d8dc:	20000c94 	.word	0x20000c94
 800d8e0:	e000ed04 	.word	0xe000ed04

0800d8e4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b08a      	sub	sp, #40	; 0x28
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d109      	bne.n	800d90c <vTaskDelayUntil+0x28>
 800d8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8fc:	f383 8811 	msr	BASEPRI, r3
 800d900:	f3bf 8f6f 	isb	sy
 800d904:	f3bf 8f4f 	dsb	sy
 800d908:	617b      	str	r3, [r7, #20]
 800d90a:	e7fe      	b.n	800d90a <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d109      	bne.n	800d926 <vTaskDelayUntil+0x42>
 800d912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d916:	f383 8811 	msr	BASEPRI, r3
 800d91a:	f3bf 8f6f 	isb	sy
 800d91e:	f3bf 8f4f 	dsb	sy
 800d922:	613b      	str	r3, [r7, #16]
 800d924:	e7fe      	b.n	800d924 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800d926:	4b29      	ldr	r3, [pc, #164]	; (800d9cc <vTaskDelayUntil+0xe8>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d009      	beq.n	800d942 <vTaskDelayUntil+0x5e>
 800d92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d932:	f383 8811 	msr	BASEPRI, r3
 800d936:	f3bf 8f6f 	isb	sy
 800d93a:	f3bf 8f4f 	dsb	sy
 800d93e:	60fb      	str	r3, [r7, #12]
 800d940:	e7fe      	b.n	800d940 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800d942:	f000 f8db 	bl	800dafc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d946:	4b22      	ldr	r3, [pc, #136]	; (800d9d0 <vTaskDelayUntil+0xec>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	683a      	ldr	r2, [r7, #0]
 800d952:	4413      	add	r3, r2
 800d954:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	6a3a      	ldr	r2, [r7, #32]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d20b      	bcs.n	800d978 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	69fa      	ldr	r2, [r7, #28]
 800d966:	429a      	cmp	r2, r3
 800d968:	d211      	bcs.n	800d98e <vTaskDelayUntil+0xaa>
 800d96a:	69fa      	ldr	r2, [r7, #28]
 800d96c:	6a3b      	ldr	r3, [r7, #32]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d90d      	bls.n	800d98e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800d972:	2301      	movs	r3, #1
 800d974:	627b      	str	r3, [r7, #36]	; 0x24
 800d976:	e00a      	b.n	800d98e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	69fa      	ldr	r2, [r7, #28]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d303      	bcc.n	800d98a <vTaskDelayUntil+0xa6>
 800d982:	69fa      	ldr	r2, [r7, #28]
 800d984:	6a3b      	ldr	r3, [r7, #32]
 800d986:	429a      	cmp	r2, r3
 800d988:	d901      	bls.n	800d98e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800d98a:	2301      	movs	r3, #1
 800d98c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	69fa      	ldr	r2, [r7, #28]
 800d992:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d996:	2b00      	cmp	r3, #0
 800d998:	d006      	beq.n	800d9a8 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d99a:	69fa      	ldr	r2, [r7, #28]
 800d99c:	6a3b      	ldr	r3, [r7, #32]
 800d99e:	1ad3      	subs	r3, r2, r3
 800d9a0:	2100      	movs	r1, #0
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f000 fb48 	bl	800e038 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d9a8:	f000 f8b6 	bl	800db18 <xTaskResumeAll>
 800d9ac:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d9ae:	69bb      	ldr	r3, [r7, #24]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d107      	bne.n	800d9c4 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800d9b4:	4b07      	ldr	r3, [pc, #28]	; (800d9d4 <vTaskDelayUntil+0xf0>)
 800d9b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9ba:	601a      	str	r2, [r3, #0]
 800d9bc:	f3bf 8f4f 	dsb	sy
 800d9c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d9c4:	bf00      	nop
 800d9c6:	3728      	adds	r7, #40	; 0x28
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	20000db8 	.word	0x20000db8
 800d9d0:	20000d94 	.word	0x20000d94
 800d9d4:	e000ed04 	.word	0xe000ed04

0800d9d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b084      	sub	sp, #16
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d016      	beq.n	800da18 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d9ea:	4b13      	ldr	r3, [pc, #76]	; (800da38 <vTaskDelay+0x60>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d009      	beq.n	800da06 <vTaskDelay+0x2e>
 800d9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f6:	f383 8811 	msr	BASEPRI, r3
 800d9fa:	f3bf 8f6f 	isb	sy
 800d9fe:	f3bf 8f4f 	dsb	sy
 800da02:	60bb      	str	r3, [r7, #8]
 800da04:	e7fe      	b.n	800da04 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800da06:	f000 f879 	bl	800dafc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800da0a:	2100      	movs	r1, #0
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 fb13 	bl	800e038 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800da12:	f000 f881 	bl	800db18 <xTaskResumeAll>
 800da16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d107      	bne.n	800da2e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800da1e:	4b07      	ldr	r3, [pc, #28]	; (800da3c <vTaskDelay+0x64>)
 800da20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da24:	601a      	str	r2, [r3, #0]
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da2e:	bf00      	nop
 800da30:	3710      	adds	r7, #16
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	20000db8 	.word	0x20000db8
 800da3c:	e000ed04 	.word	0xe000ed04

0800da40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b08a      	sub	sp, #40	; 0x28
 800da44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800da46:	2300      	movs	r3, #0
 800da48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800da4a:	2300      	movs	r3, #0
 800da4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800da4e:	463a      	mov	r2, r7
 800da50:	1d39      	adds	r1, r7, #4
 800da52:	f107 0308 	add.w	r3, r7, #8
 800da56:	4618      	mov	r0, r3
 800da58:	f7f2 fd42 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800da5c:	6839      	ldr	r1, [r7, #0]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	68ba      	ldr	r2, [r7, #8]
 800da62:	9202      	str	r2, [sp, #8]
 800da64:	9301      	str	r3, [sp, #4]
 800da66:	2300      	movs	r3, #0
 800da68:	9300      	str	r3, [sp, #0]
 800da6a:	2300      	movs	r3, #0
 800da6c:	460a      	mov	r2, r1
 800da6e:	491d      	ldr	r1, [pc, #116]	; (800dae4 <vTaskStartScheduler+0xa4>)
 800da70:	481d      	ldr	r0, [pc, #116]	; (800dae8 <vTaskStartScheduler+0xa8>)
 800da72:	f7ff fda3 	bl	800d5bc <xTaskCreateStatic>
 800da76:	4602      	mov	r2, r0
 800da78:	4b1c      	ldr	r3, [pc, #112]	; (800daec <vTaskStartScheduler+0xac>)
 800da7a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800da7c:	4b1b      	ldr	r3, [pc, #108]	; (800daec <vTaskStartScheduler+0xac>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d002      	beq.n	800da8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800da84:	2301      	movs	r3, #1
 800da86:	617b      	str	r3, [r7, #20]
 800da88:	e001      	b.n	800da8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800da8a:	2300      	movs	r3, #0
 800da8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	2b01      	cmp	r3, #1
 800da92:	d115      	bne.n	800dac0 <vTaskStartScheduler+0x80>
 800da94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da98:	f383 8811 	msr	BASEPRI, r3
 800da9c:	f3bf 8f6f 	isb	sy
 800daa0:	f3bf 8f4f 	dsb	sy
 800daa4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800daa6:	4b12      	ldr	r3, [pc, #72]	; (800daf0 <vTaskStartScheduler+0xb0>)
 800daa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800daac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800daae:	4b11      	ldr	r3, [pc, #68]	; (800daf4 <vTaskStartScheduler+0xb4>)
 800dab0:	2201      	movs	r2, #1
 800dab2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dab4:	4b10      	ldr	r3, [pc, #64]	; (800daf8 <vTaskStartScheduler+0xb8>)
 800dab6:	2200      	movs	r2, #0
 800dab8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800daba:	f000 fbb1 	bl	800e220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dabe:	e00d      	b.n	800dadc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dac6:	d109      	bne.n	800dadc <vTaskStartScheduler+0x9c>
 800dac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dacc:	f383 8811 	msr	BASEPRI, r3
 800dad0:	f3bf 8f6f 	isb	sy
 800dad4:	f3bf 8f4f 	dsb	sy
 800dad8:	60fb      	str	r3, [r7, #12]
 800dada:	e7fe      	b.n	800dada <vTaskStartScheduler+0x9a>
}
 800dadc:	bf00      	nop
 800dade:	3718      	adds	r7, #24
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	0800fa78 	.word	0x0800fa78
 800dae8:	0800de95 	.word	0x0800de95
 800daec:	20000db4 	.word	0x20000db4
 800daf0:	20000db0 	.word	0x20000db0
 800daf4:	20000d9c 	.word	0x20000d9c
 800daf8:	20000d94 	.word	0x20000d94

0800dafc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dafc:	b480      	push	{r7}
 800dafe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800db00:	4b04      	ldr	r3, [pc, #16]	; (800db14 <vTaskSuspendAll+0x18>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	3301      	adds	r3, #1
 800db06:	4a03      	ldr	r2, [pc, #12]	; (800db14 <vTaskSuspendAll+0x18>)
 800db08:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800db0a:	bf00      	nop
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr
 800db14:	20000db8 	.word	0x20000db8

0800db18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800db1e:	2300      	movs	r3, #0
 800db20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800db22:	2300      	movs	r3, #0
 800db24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800db26:	4b41      	ldr	r3, [pc, #260]	; (800dc2c <xTaskResumeAll+0x114>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d109      	bne.n	800db42 <xTaskResumeAll+0x2a>
 800db2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db32:	f383 8811 	msr	BASEPRI, r3
 800db36:	f3bf 8f6f 	isb	sy
 800db3a:	f3bf 8f4f 	dsb	sy
 800db3e:	603b      	str	r3, [r7, #0]
 800db40:	e7fe      	b.n	800db40 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800db42:	f000 fc0b 	bl	800e35c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800db46:	4b39      	ldr	r3, [pc, #228]	; (800dc2c <xTaskResumeAll+0x114>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	3b01      	subs	r3, #1
 800db4c:	4a37      	ldr	r2, [pc, #220]	; (800dc2c <xTaskResumeAll+0x114>)
 800db4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db50:	4b36      	ldr	r3, [pc, #216]	; (800dc2c <xTaskResumeAll+0x114>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d161      	bne.n	800dc1c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800db58:	4b35      	ldr	r3, [pc, #212]	; (800dc30 <xTaskResumeAll+0x118>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d05d      	beq.n	800dc1c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db60:	e02e      	b.n	800dbc0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db62:	4b34      	ldr	r3, [pc, #208]	; (800dc34 <xTaskResumeAll+0x11c>)
 800db64:	68db      	ldr	r3, [r3, #12]
 800db66:	68db      	ldr	r3, [r3, #12]
 800db68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	3318      	adds	r3, #24
 800db6e:	4618      	mov	r0, r3
 800db70:	f7ff fcfa 	bl	800d568 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	3304      	adds	r3, #4
 800db78:	4618      	mov	r0, r3
 800db7a:	f7ff fcf5 	bl	800d568 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db82:	2201      	movs	r2, #1
 800db84:	409a      	lsls	r2, r3
 800db86:	4b2c      	ldr	r3, [pc, #176]	; (800dc38 <xTaskResumeAll+0x120>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4313      	orrs	r3, r2
 800db8c:	4a2a      	ldr	r2, [pc, #168]	; (800dc38 <xTaskResumeAll+0x120>)
 800db8e:	6013      	str	r3, [r2, #0]
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db94:	4613      	mov	r3, r2
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	4413      	add	r3, r2
 800db9a:	009b      	lsls	r3, r3, #2
 800db9c:	4a27      	ldr	r2, [pc, #156]	; (800dc3c <xTaskResumeAll+0x124>)
 800db9e:	441a      	add	r2, r3
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	3304      	adds	r3, #4
 800dba4:	4619      	mov	r1, r3
 800dba6:	4610      	mov	r0, r2
 800dba8:	f7ff fc81 	bl	800d4ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbb0:	4b23      	ldr	r3, [pc, #140]	; (800dc40 <xTaskResumeAll+0x128>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d302      	bcc.n	800dbc0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800dbba:	4b22      	ldr	r3, [pc, #136]	; (800dc44 <xTaskResumeAll+0x12c>)
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dbc0:	4b1c      	ldr	r3, [pc, #112]	; (800dc34 <xTaskResumeAll+0x11c>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d1cc      	bne.n	800db62 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d001      	beq.n	800dbd2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dbce:	f000 fa13 	bl	800dff8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800dbd2:	4b1d      	ldr	r3, [pc, #116]	; (800dc48 <xTaskResumeAll+0x130>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d010      	beq.n	800dc00 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dbde:	f000 f847 	bl	800dc70 <xTaskIncrementTick>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d002      	beq.n	800dbee <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800dbe8:	4b16      	ldr	r3, [pc, #88]	; (800dc44 <xTaskResumeAll+0x12c>)
 800dbea:	2201      	movs	r2, #1
 800dbec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	3b01      	subs	r3, #1
 800dbf2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d1f1      	bne.n	800dbde <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800dbfa:	4b13      	ldr	r3, [pc, #76]	; (800dc48 <xTaskResumeAll+0x130>)
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dc00:	4b10      	ldr	r3, [pc, #64]	; (800dc44 <xTaskResumeAll+0x12c>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d009      	beq.n	800dc1c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dc0c:	4b0f      	ldr	r3, [pc, #60]	; (800dc4c <xTaskResumeAll+0x134>)
 800dc0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc12:	601a      	str	r2, [r3, #0]
 800dc14:	f3bf 8f4f 	dsb	sy
 800dc18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc1c:	f000 fbcc 	bl	800e3b8 <vPortExitCritical>

	return xAlreadyYielded;
 800dc20:	68bb      	ldr	r3, [r7, #8]
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3710      	adds	r7, #16
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	20000db8 	.word	0x20000db8
 800dc30:	20000d90 	.word	0x20000d90
 800dc34:	20000d50 	.word	0x20000d50
 800dc38:	20000d98 	.word	0x20000d98
 800dc3c:	20000c94 	.word	0x20000c94
 800dc40:	20000c90 	.word	0x20000c90
 800dc44:	20000da4 	.word	0x20000da4
 800dc48:	20000da0 	.word	0x20000da0
 800dc4c:	e000ed04 	.word	0xe000ed04

0800dc50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dc50:	b480      	push	{r7}
 800dc52:	b083      	sub	sp, #12
 800dc54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dc56:	4b05      	ldr	r3, [pc, #20]	; (800dc6c <xTaskGetTickCount+0x1c>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dc5c:	687b      	ldr	r3, [r7, #4]
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	370c      	adds	r7, #12
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr
 800dc6a:	bf00      	nop
 800dc6c:	20000d94 	.word	0x20000d94

0800dc70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b086      	sub	sp, #24
 800dc74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dc76:	2300      	movs	r3, #0
 800dc78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc7a:	4b4e      	ldr	r3, [pc, #312]	; (800ddb4 <xTaskIncrementTick+0x144>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	f040 8087 	bne.w	800dd92 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dc84:	4b4c      	ldr	r3, [pc, #304]	; (800ddb8 <xTaskIncrementTick+0x148>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	3301      	adds	r3, #1
 800dc8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dc8c:	4a4a      	ldr	r2, [pc, #296]	; (800ddb8 <xTaskIncrementTick+0x148>)
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d11f      	bne.n	800dcd8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800dc98:	4b48      	ldr	r3, [pc, #288]	; (800ddbc <xTaskIncrementTick+0x14c>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d009      	beq.n	800dcb6 <xTaskIncrementTick+0x46>
 800dca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca6:	f383 8811 	msr	BASEPRI, r3
 800dcaa:	f3bf 8f6f 	isb	sy
 800dcae:	f3bf 8f4f 	dsb	sy
 800dcb2:	603b      	str	r3, [r7, #0]
 800dcb4:	e7fe      	b.n	800dcb4 <xTaskIncrementTick+0x44>
 800dcb6:	4b41      	ldr	r3, [pc, #260]	; (800ddbc <xTaskIncrementTick+0x14c>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	60fb      	str	r3, [r7, #12]
 800dcbc:	4b40      	ldr	r3, [pc, #256]	; (800ddc0 <xTaskIncrementTick+0x150>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a3e      	ldr	r2, [pc, #248]	; (800ddbc <xTaskIncrementTick+0x14c>)
 800dcc2:	6013      	str	r3, [r2, #0]
 800dcc4:	4a3e      	ldr	r2, [pc, #248]	; (800ddc0 <xTaskIncrementTick+0x150>)
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	6013      	str	r3, [r2, #0]
 800dcca:	4b3e      	ldr	r3, [pc, #248]	; (800ddc4 <xTaskIncrementTick+0x154>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	4a3c      	ldr	r2, [pc, #240]	; (800ddc4 <xTaskIncrementTick+0x154>)
 800dcd2:	6013      	str	r3, [r2, #0]
 800dcd4:	f000 f990 	bl	800dff8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dcd8:	4b3b      	ldr	r3, [pc, #236]	; (800ddc8 <xTaskIncrementTick+0x158>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	693a      	ldr	r2, [r7, #16]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d348      	bcc.n	800dd74 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dce2:	4b36      	ldr	r3, [pc, #216]	; (800ddbc <xTaskIncrementTick+0x14c>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d104      	bne.n	800dcf6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcec:	4b36      	ldr	r3, [pc, #216]	; (800ddc8 <xTaskIncrementTick+0x158>)
 800dcee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dcf2:	601a      	str	r2, [r3, #0]
					break;
 800dcf4:	e03e      	b.n	800dd74 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcf6:	4b31      	ldr	r3, [pc, #196]	; (800ddbc <xTaskIncrementTick+0x14c>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	68db      	ldr	r3, [r3, #12]
 800dcfc:	68db      	ldr	r3, [r3, #12]
 800dcfe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dd06:	693a      	ldr	r2, [r7, #16]
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d203      	bcs.n	800dd16 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dd0e:	4a2e      	ldr	r2, [pc, #184]	; (800ddc8 <xTaskIncrementTick+0x158>)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dd14:	e02e      	b.n	800dd74 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	3304      	adds	r3, #4
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7ff fc24 	bl	800d568 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d004      	beq.n	800dd32 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	3318      	adds	r3, #24
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7ff fc1b 	bl	800d568 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd36:	2201      	movs	r2, #1
 800dd38:	409a      	lsls	r2, r3
 800dd3a:	4b24      	ldr	r3, [pc, #144]	; (800ddcc <xTaskIncrementTick+0x15c>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	4313      	orrs	r3, r2
 800dd40:	4a22      	ldr	r2, [pc, #136]	; (800ddcc <xTaskIncrementTick+0x15c>)
 800dd42:	6013      	str	r3, [r2, #0]
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd48:	4613      	mov	r3, r2
 800dd4a:	009b      	lsls	r3, r3, #2
 800dd4c:	4413      	add	r3, r2
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	4a1f      	ldr	r2, [pc, #124]	; (800ddd0 <xTaskIncrementTick+0x160>)
 800dd52:	441a      	add	r2, r3
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	3304      	adds	r3, #4
 800dd58:	4619      	mov	r1, r3
 800dd5a:	4610      	mov	r0, r2
 800dd5c:	f7ff fba7 	bl	800d4ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd64:	4b1b      	ldr	r3, [pc, #108]	; (800ddd4 <xTaskIncrementTick+0x164>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d3b9      	bcc.n	800dce2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800dd6e:	2301      	movs	r3, #1
 800dd70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd72:	e7b6      	b.n	800dce2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dd74:	4b17      	ldr	r3, [pc, #92]	; (800ddd4 <xTaskIncrementTick+0x164>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd7a:	4915      	ldr	r1, [pc, #84]	; (800ddd0 <xTaskIncrementTick+0x160>)
 800dd7c:	4613      	mov	r3, r2
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	4413      	add	r3, r2
 800dd82:	009b      	lsls	r3, r3, #2
 800dd84:	440b      	add	r3, r1
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d907      	bls.n	800dd9c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	617b      	str	r3, [r7, #20]
 800dd90:	e004      	b.n	800dd9c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800dd92:	4b11      	ldr	r3, [pc, #68]	; (800ddd8 <xTaskIncrementTick+0x168>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	3301      	adds	r3, #1
 800dd98:	4a0f      	ldr	r2, [pc, #60]	; (800ddd8 <xTaskIncrementTick+0x168>)
 800dd9a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800dd9c:	4b0f      	ldr	r3, [pc, #60]	; (800dddc <xTaskIncrementTick+0x16c>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d001      	beq.n	800dda8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800dda4:	2301      	movs	r3, #1
 800dda6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800dda8:	697b      	ldr	r3, [r7, #20]
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3718      	adds	r7, #24
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}
 800ddb2:	bf00      	nop
 800ddb4:	20000db8 	.word	0x20000db8
 800ddb8:	20000d94 	.word	0x20000d94
 800ddbc:	20000d48 	.word	0x20000d48
 800ddc0:	20000d4c 	.word	0x20000d4c
 800ddc4:	20000da8 	.word	0x20000da8
 800ddc8:	20000db0 	.word	0x20000db0
 800ddcc:	20000d98 	.word	0x20000d98
 800ddd0:	20000c94 	.word	0x20000c94
 800ddd4:	20000c90 	.word	0x20000c90
 800ddd8:	20000da0 	.word	0x20000da0
 800dddc:	20000da4 	.word	0x20000da4

0800dde0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dde0:	b480      	push	{r7}
 800dde2:	b087      	sub	sp, #28
 800dde4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dde6:	4b26      	ldr	r3, [pc, #152]	; (800de80 <vTaskSwitchContext+0xa0>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d003      	beq.n	800ddf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ddee:	4b25      	ldr	r3, [pc, #148]	; (800de84 <vTaskSwitchContext+0xa4>)
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ddf4:	e03e      	b.n	800de74 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800ddf6:	4b23      	ldr	r3, [pc, #140]	; (800de84 <vTaskSwitchContext+0xa4>)
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddfc:	4b22      	ldr	r3, [pc, #136]	; (800de88 <vTaskSwitchContext+0xa8>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	fab3 f383 	clz	r3, r3
 800de08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800de0a:	7afb      	ldrb	r3, [r7, #11]
 800de0c:	f1c3 031f 	rsb	r3, r3, #31
 800de10:	617b      	str	r3, [r7, #20]
 800de12:	491e      	ldr	r1, [pc, #120]	; (800de8c <vTaskSwitchContext+0xac>)
 800de14:	697a      	ldr	r2, [r7, #20]
 800de16:	4613      	mov	r3, r2
 800de18:	009b      	lsls	r3, r3, #2
 800de1a:	4413      	add	r3, r2
 800de1c:	009b      	lsls	r3, r3, #2
 800de1e:	440b      	add	r3, r1
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d109      	bne.n	800de3a <vTaskSwitchContext+0x5a>
	__asm volatile
 800de26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2a:	f383 8811 	msr	BASEPRI, r3
 800de2e:	f3bf 8f6f 	isb	sy
 800de32:	f3bf 8f4f 	dsb	sy
 800de36:	607b      	str	r3, [r7, #4]
 800de38:	e7fe      	b.n	800de38 <vTaskSwitchContext+0x58>
 800de3a:	697a      	ldr	r2, [r7, #20]
 800de3c:	4613      	mov	r3, r2
 800de3e:	009b      	lsls	r3, r3, #2
 800de40:	4413      	add	r3, r2
 800de42:	009b      	lsls	r3, r3, #2
 800de44:	4a11      	ldr	r2, [pc, #68]	; (800de8c <vTaskSwitchContext+0xac>)
 800de46:	4413      	add	r3, r2
 800de48:	613b      	str	r3, [r7, #16]
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	685a      	ldr	r2, [r3, #4]
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	605a      	str	r2, [r3, #4]
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	685a      	ldr	r2, [r3, #4]
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	3308      	adds	r3, #8
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d104      	bne.n	800de6a <vTaskSwitchContext+0x8a>
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	685a      	ldr	r2, [r3, #4]
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	605a      	str	r2, [r3, #4]
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	685b      	ldr	r3, [r3, #4]
 800de6e:	68db      	ldr	r3, [r3, #12]
 800de70:	4a07      	ldr	r2, [pc, #28]	; (800de90 <vTaskSwitchContext+0xb0>)
 800de72:	6013      	str	r3, [r2, #0]
}
 800de74:	bf00      	nop
 800de76:	371c      	adds	r7, #28
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr
 800de80:	20000db8 	.word	0x20000db8
 800de84:	20000da4 	.word	0x20000da4
 800de88:	20000d98 	.word	0x20000d98
 800de8c:	20000c94 	.word	0x20000c94
 800de90:	20000c90 	.word	0x20000c90

0800de94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800de9c:	f000 f852 	bl	800df44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dea0:	4b06      	ldr	r3, [pc, #24]	; (800debc <prvIdleTask+0x28>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d9f9      	bls.n	800de9c <prvIdleTask+0x8>
			{
				taskYIELD();
 800dea8:	4b05      	ldr	r3, [pc, #20]	; (800dec0 <prvIdleTask+0x2c>)
 800deaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deae:	601a      	str	r2, [r3, #0]
 800deb0:	f3bf 8f4f 	dsb	sy
 800deb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800deb8:	e7f0      	b.n	800de9c <prvIdleTask+0x8>
 800deba:	bf00      	nop
 800debc:	20000c94 	.word	0x20000c94
 800dec0:	e000ed04 	.word	0xe000ed04

0800dec4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800deca:	2300      	movs	r3, #0
 800decc:	607b      	str	r3, [r7, #4]
 800dece:	e00c      	b.n	800deea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ded0:	687a      	ldr	r2, [r7, #4]
 800ded2:	4613      	mov	r3, r2
 800ded4:	009b      	lsls	r3, r3, #2
 800ded6:	4413      	add	r3, r2
 800ded8:	009b      	lsls	r3, r3, #2
 800deda:	4a12      	ldr	r2, [pc, #72]	; (800df24 <prvInitialiseTaskLists+0x60>)
 800dedc:	4413      	add	r3, r2
 800dede:	4618      	mov	r0, r3
 800dee0:	f7ff fab8 	bl	800d454 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	3301      	adds	r3, #1
 800dee8:	607b      	str	r3, [r7, #4]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2b06      	cmp	r3, #6
 800deee:	d9ef      	bls.n	800ded0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800def0:	480d      	ldr	r0, [pc, #52]	; (800df28 <prvInitialiseTaskLists+0x64>)
 800def2:	f7ff faaf 	bl	800d454 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800def6:	480d      	ldr	r0, [pc, #52]	; (800df2c <prvInitialiseTaskLists+0x68>)
 800def8:	f7ff faac 	bl	800d454 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800defc:	480c      	ldr	r0, [pc, #48]	; (800df30 <prvInitialiseTaskLists+0x6c>)
 800defe:	f7ff faa9 	bl	800d454 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800df02:	480c      	ldr	r0, [pc, #48]	; (800df34 <prvInitialiseTaskLists+0x70>)
 800df04:	f7ff faa6 	bl	800d454 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800df08:	480b      	ldr	r0, [pc, #44]	; (800df38 <prvInitialiseTaskLists+0x74>)
 800df0a:	f7ff faa3 	bl	800d454 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800df0e:	4b0b      	ldr	r3, [pc, #44]	; (800df3c <prvInitialiseTaskLists+0x78>)
 800df10:	4a05      	ldr	r2, [pc, #20]	; (800df28 <prvInitialiseTaskLists+0x64>)
 800df12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800df14:	4b0a      	ldr	r3, [pc, #40]	; (800df40 <prvInitialiseTaskLists+0x7c>)
 800df16:	4a05      	ldr	r2, [pc, #20]	; (800df2c <prvInitialiseTaskLists+0x68>)
 800df18:	601a      	str	r2, [r3, #0]
}
 800df1a:	bf00      	nop
 800df1c:	3708      	adds	r7, #8
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	20000c94 	.word	0x20000c94
 800df28:	20000d20 	.word	0x20000d20
 800df2c:	20000d34 	.word	0x20000d34
 800df30:	20000d50 	.word	0x20000d50
 800df34:	20000d64 	.word	0x20000d64
 800df38:	20000d7c 	.word	0x20000d7c
 800df3c:	20000d48 	.word	0x20000d48
 800df40:	20000d4c 	.word	0x20000d4c

0800df44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b082      	sub	sp, #8
 800df48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df4a:	e019      	b.n	800df80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800df4c:	f000 fa06 	bl	800e35c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df50:	4b0f      	ldr	r3, [pc, #60]	; (800df90 <prvCheckTasksWaitingTermination+0x4c>)
 800df52:	68db      	ldr	r3, [r3, #12]
 800df54:	68db      	ldr	r3, [r3, #12]
 800df56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	3304      	adds	r3, #4
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7ff fb03 	bl	800d568 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800df62:	4b0c      	ldr	r3, [pc, #48]	; (800df94 <prvCheckTasksWaitingTermination+0x50>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	3b01      	subs	r3, #1
 800df68:	4a0a      	ldr	r2, [pc, #40]	; (800df94 <prvCheckTasksWaitingTermination+0x50>)
 800df6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800df6c:	4b0a      	ldr	r3, [pc, #40]	; (800df98 <prvCheckTasksWaitingTermination+0x54>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	3b01      	subs	r3, #1
 800df72:	4a09      	ldr	r2, [pc, #36]	; (800df98 <prvCheckTasksWaitingTermination+0x54>)
 800df74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800df76:	f000 fa1f 	bl	800e3b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 f80e 	bl	800df9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df80:	4b05      	ldr	r3, [pc, #20]	; (800df98 <prvCheckTasksWaitingTermination+0x54>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d1e1      	bne.n	800df4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800df88:	bf00      	nop
 800df8a:	3708      	adds	r7, #8
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	20000d64 	.word	0x20000d64
 800df94:	20000d90 	.word	0x20000d90
 800df98:	20000d78 	.word	0x20000d78

0800df9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b084      	sub	sp, #16
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d108      	bne.n	800dfc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f000 fb70 	bl	800e698 <vPortFree>
				vPortFree( pxTCB );
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f000 fb6d 	bl	800e698 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dfbe:	e017      	b.n	800dff0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dfc6:	2b01      	cmp	r3, #1
 800dfc8:	d103      	bne.n	800dfd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f000 fb64 	bl	800e698 <vPortFree>
	}
 800dfd0:	e00e      	b.n	800dff0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dfd8:	2b02      	cmp	r3, #2
 800dfda:	d009      	beq.n	800dff0 <prvDeleteTCB+0x54>
 800dfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe0:	f383 8811 	msr	BASEPRI, r3
 800dfe4:	f3bf 8f6f 	isb	sy
 800dfe8:	f3bf 8f4f 	dsb	sy
 800dfec:	60fb      	str	r3, [r7, #12]
 800dfee:	e7fe      	b.n	800dfee <prvDeleteTCB+0x52>
	}
 800dff0:	bf00      	nop
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dff8:	b480      	push	{r7}
 800dffa:	b083      	sub	sp, #12
 800dffc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dffe:	4b0c      	ldr	r3, [pc, #48]	; (800e030 <prvResetNextTaskUnblockTime+0x38>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d104      	bne.n	800e012 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e008:	4b0a      	ldr	r3, [pc, #40]	; (800e034 <prvResetNextTaskUnblockTime+0x3c>)
 800e00a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e00e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e010:	e008      	b.n	800e024 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e012:	4b07      	ldr	r3, [pc, #28]	; (800e030 <prvResetNextTaskUnblockTime+0x38>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	68db      	ldr	r3, [r3, #12]
 800e018:	68db      	ldr	r3, [r3, #12]
 800e01a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	4a04      	ldr	r2, [pc, #16]	; (800e034 <prvResetNextTaskUnblockTime+0x3c>)
 800e022:	6013      	str	r3, [r2, #0]
}
 800e024:	bf00      	nop
 800e026:	370c      	adds	r7, #12
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr
 800e030:	20000d48 	.word	0x20000d48
 800e034:	20000db0 	.word	0x20000db0

0800e038 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e042:	4b2b      	ldr	r3, [pc, #172]	; (800e0f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800e048:	4b2a      	ldr	r3, [pc, #168]	; (800e0f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	2200      	movs	r2, #0
 800e04e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e052:	4b28      	ldr	r3, [pc, #160]	; (800e0f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	3304      	adds	r3, #4
 800e058:	4618      	mov	r0, r3
 800e05a:	f7ff fa85 	bl	800d568 <uxListRemove>
 800e05e:	4603      	mov	r3, r0
 800e060:	2b00      	cmp	r3, #0
 800e062:	d10b      	bne.n	800e07c <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e064:	4b23      	ldr	r3, [pc, #140]	; (800e0f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e06a:	2201      	movs	r2, #1
 800e06c:	fa02 f303 	lsl.w	r3, r2, r3
 800e070:	43da      	mvns	r2, r3
 800e072:	4b21      	ldr	r3, [pc, #132]	; (800e0f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	4013      	ands	r3, r2
 800e078:	4a1f      	ldr	r2, [pc, #124]	; (800e0f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e07a:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e082:	d10a      	bne.n	800e09a <prvAddCurrentTaskToDelayedList+0x62>
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d007      	beq.n	800e09a <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e08a:	4b1a      	ldr	r3, [pc, #104]	; (800e0f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	3304      	adds	r3, #4
 800e090:	4619      	mov	r1, r3
 800e092:	481a      	ldr	r0, [pc, #104]	; (800e0fc <prvAddCurrentTaskToDelayedList+0xc4>)
 800e094:	f7ff fa0b 	bl	800d4ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e098:	e026      	b.n	800e0e8 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e09a:	68fa      	ldr	r2, [r7, #12]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	4413      	add	r3, r2
 800e0a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e0a2:	4b14      	ldr	r3, [pc, #80]	; (800e0f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	68ba      	ldr	r2, [r7, #8]
 800e0a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e0aa:	68ba      	ldr	r2, [r7, #8]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d209      	bcs.n	800e0c6 <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e0b2:	4b13      	ldr	r3, [pc, #76]	; (800e100 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	4b0f      	ldr	r3, [pc, #60]	; (800e0f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	3304      	adds	r3, #4
 800e0bc:	4619      	mov	r1, r3
 800e0be:	4610      	mov	r0, r2
 800e0c0:	f7ff fa19 	bl	800d4f6 <vListInsert>
}
 800e0c4:	e010      	b.n	800e0e8 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e0c6:	4b0f      	ldr	r3, [pc, #60]	; (800e104 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	4b0a      	ldr	r3, [pc, #40]	; (800e0f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	3304      	adds	r3, #4
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	4610      	mov	r0, r2
 800e0d4:	f7ff fa0f 	bl	800d4f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e0d8:	4b0b      	ldr	r3, [pc, #44]	; (800e108 <prvAddCurrentTaskToDelayedList+0xd0>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	68ba      	ldr	r2, [r7, #8]
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d202      	bcs.n	800e0e8 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 800e0e2:	4a09      	ldr	r2, [pc, #36]	; (800e108 <prvAddCurrentTaskToDelayedList+0xd0>)
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	6013      	str	r3, [r2, #0]
}
 800e0e8:	bf00      	nop
 800e0ea:	3710      	adds	r7, #16
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	20000d94 	.word	0x20000d94
 800e0f4:	20000c90 	.word	0x20000c90
 800e0f8:	20000d98 	.word	0x20000d98
 800e0fc:	20000d7c 	.word	0x20000d7c
 800e100:	20000d4c 	.word	0x20000d4c
 800e104:	20000d48 	.word	0x20000d48
 800e108:	20000db0 	.word	0x20000db0

0800e10c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e10c:	b480      	push	{r7}
 800e10e:	b085      	sub	sp, #20
 800e110:	af00      	add	r7, sp, #0
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	60b9      	str	r1, [r7, #8]
 800e116:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	3b04      	subs	r3, #4
 800e11c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	3b04      	subs	r3, #4
 800e12a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	f023 0201 	bic.w	r2, r3, #1
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	3b04      	subs	r3, #4
 800e13a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e13c:	4a0c      	ldr	r2, [pc, #48]	; (800e170 <pxPortInitialiseStack+0x64>)
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	3b14      	subs	r3, #20
 800e146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	3b04      	subs	r3, #4
 800e152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	f06f 0202 	mvn.w	r2, #2
 800e15a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	3b20      	subs	r3, #32
 800e160:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e162:	68fb      	ldr	r3, [r7, #12]
}
 800e164:	4618      	mov	r0, r3
 800e166:	3714      	adds	r7, #20
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr
 800e170:	0800e175 	.word	0x0800e175

0800e174 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e174:	b480      	push	{r7}
 800e176:	b085      	sub	sp, #20
 800e178:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e17a:	2300      	movs	r3, #0
 800e17c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e17e:	4b11      	ldr	r3, [pc, #68]	; (800e1c4 <prvTaskExitError+0x50>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e186:	d009      	beq.n	800e19c <prvTaskExitError+0x28>
 800e188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e18c:	f383 8811 	msr	BASEPRI, r3
 800e190:	f3bf 8f6f 	isb	sy
 800e194:	f3bf 8f4f 	dsb	sy
 800e198:	60fb      	str	r3, [r7, #12]
 800e19a:	e7fe      	b.n	800e19a <prvTaskExitError+0x26>
 800e19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a0:	f383 8811 	msr	BASEPRI, r3
 800e1a4:	f3bf 8f6f 	isb	sy
 800e1a8:	f3bf 8f4f 	dsb	sy
 800e1ac:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e1ae:	bf00      	nop
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d0fc      	beq.n	800e1b0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e1b6:	bf00      	nop
 800e1b8:	3714      	adds	r7, #20
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c0:	4770      	bx	lr
 800e1c2:	bf00      	nop
 800e1c4:	20000124 	.word	0x20000124
	...

0800e1d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e1d0:	4b07      	ldr	r3, [pc, #28]	; (800e1f0 <pxCurrentTCBConst2>)
 800e1d2:	6819      	ldr	r1, [r3, #0]
 800e1d4:	6808      	ldr	r0, [r1, #0]
 800e1d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1da:	f380 8809 	msr	PSP, r0
 800e1de:	f3bf 8f6f 	isb	sy
 800e1e2:	f04f 0000 	mov.w	r0, #0
 800e1e6:	f380 8811 	msr	BASEPRI, r0
 800e1ea:	4770      	bx	lr
 800e1ec:	f3af 8000 	nop.w

0800e1f0 <pxCurrentTCBConst2>:
 800e1f0:	20000c90 	.word	0x20000c90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e1f4:	bf00      	nop
 800e1f6:	bf00      	nop

0800e1f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e1f8:	4808      	ldr	r0, [pc, #32]	; (800e21c <prvPortStartFirstTask+0x24>)
 800e1fa:	6800      	ldr	r0, [r0, #0]
 800e1fc:	6800      	ldr	r0, [r0, #0]
 800e1fe:	f380 8808 	msr	MSP, r0
 800e202:	f04f 0000 	mov.w	r0, #0
 800e206:	f380 8814 	msr	CONTROL, r0
 800e20a:	b662      	cpsie	i
 800e20c:	b661      	cpsie	f
 800e20e:	f3bf 8f4f 	dsb	sy
 800e212:	f3bf 8f6f 	isb	sy
 800e216:	df00      	svc	0
 800e218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e21a:	bf00      	nop
 800e21c:	e000ed08 	.word	0xe000ed08

0800e220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b086      	sub	sp, #24
 800e224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e226:	4b44      	ldr	r3, [pc, #272]	; (800e338 <xPortStartScheduler+0x118>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a44      	ldr	r2, [pc, #272]	; (800e33c <xPortStartScheduler+0x11c>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d109      	bne.n	800e244 <xPortStartScheduler+0x24>
 800e230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e234:	f383 8811 	msr	BASEPRI, r3
 800e238:	f3bf 8f6f 	isb	sy
 800e23c:	f3bf 8f4f 	dsb	sy
 800e240:	613b      	str	r3, [r7, #16]
 800e242:	e7fe      	b.n	800e242 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e244:	4b3c      	ldr	r3, [pc, #240]	; (800e338 <xPortStartScheduler+0x118>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a3d      	ldr	r2, [pc, #244]	; (800e340 <xPortStartScheduler+0x120>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d109      	bne.n	800e262 <xPortStartScheduler+0x42>
 800e24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e252:	f383 8811 	msr	BASEPRI, r3
 800e256:	f3bf 8f6f 	isb	sy
 800e25a:	f3bf 8f4f 	dsb	sy
 800e25e:	60fb      	str	r3, [r7, #12]
 800e260:	e7fe      	b.n	800e260 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e262:	4b38      	ldr	r3, [pc, #224]	; (800e344 <xPortStartScheduler+0x124>)
 800e264:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	781b      	ldrb	r3, [r3, #0]
 800e26a:	b2db      	uxtb	r3, r3
 800e26c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	22ff      	movs	r2, #255	; 0xff
 800e272:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	b2db      	uxtb	r3, r3
 800e27a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e27c:	78fb      	ldrb	r3, [r7, #3]
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e284:	b2da      	uxtb	r2, r3
 800e286:	4b30      	ldr	r3, [pc, #192]	; (800e348 <xPortStartScheduler+0x128>)
 800e288:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e28a:	4b30      	ldr	r3, [pc, #192]	; (800e34c <xPortStartScheduler+0x12c>)
 800e28c:	2207      	movs	r2, #7
 800e28e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e290:	e009      	b.n	800e2a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800e292:	4b2e      	ldr	r3, [pc, #184]	; (800e34c <xPortStartScheduler+0x12c>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	3b01      	subs	r3, #1
 800e298:	4a2c      	ldr	r2, [pc, #176]	; (800e34c <xPortStartScheduler+0x12c>)
 800e29a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e29c:	78fb      	ldrb	r3, [r7, #3]
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	005b      	lsls	r3, r3, #1
 800e2a2:	b2db      	uxtb	r3, r3
 800e2a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e2a6:	78fb      	ldrb	r3, [r7, #3]
 800e2a8:	b2db      	uxtb	r3, r3
 800e2aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2ae:	2b80      	cmp	r3, #128	; 0x80
 800e2b0:	d0ef      	beq.n	800e292 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e2b2:	4b26      	ldr	r3, [pc, #152]	; (800e34c <xPortStartScheduler+0x12c>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f1c3 0307 	rsb	r3, r3, #7
 800e2ba:	2b04      	cmp	r3, #4
 800e2bc:	d009      	beq.n	800e2d2 <xPortStartScheduler+0xb2>
 800e2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c2:	f383 8811 	msr	BASEPRI, r3
 800e2c6:	f3bf 8f6f 	isb	sy
 800e2ca:	f3bf 8f4f 	dsb	sy
 800e2ce:	60bb      	str	r3, [r7, #8]
 800e2d0:	e7fe      	b.n	800e2d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e2d2:	4b1e      	ldr	r3, [pc, #120]	; (800e34c <xPortStartScheduler+0x12c>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	021b      	lsls	r3, r3, #8
 800e2d8:	4a1c      	ldr	r2, [pc, #112]	; (800e34c <xPortStartScheduler+0x12c>)
 800e2da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e2dc:	4b1b      	ldr	r3, [pc, #108]	; (800e34c <xPortStartScheduler+0x12c>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e2e4:	4a19      	ldr	r2, [pc, #100]	; (800e34c <xPortStartScheduler+0x12c>)
 800e2e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	b2da      	uxtb	r2, r3
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e2f0:	4b17      	ldr	r3, [pc, #92]	; (800e350 <xPortStartScheduler+0x130>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4a16      	ldr	r2, [pc, #88]	; (800e350 <xPortStartScheduler+0x130>)
 800e2f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e2fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e2fc:	4b14      	ldr	r3, [pc, #80]	; (800e350 <xPortStartScheduler+0x130>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a13      	ldr	r2, [pc, #76]	; (800e350 <xPortStartScheduler+0x130>)
 800e302:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e306:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e308:	f000 f8d6 	bl	800e4b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e30c:	4b11      	ldr	r3, [pc, #68]	; (800e354 <xPortStartScheduler+0x134>)
 800e30e:	2200      	movs	r2, #0
 800e310:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e312:	f000 f8f5 	bl	800e500 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e316:	4b10      	ldr	r3, [pc, #64]	; (800e358 <xPortStartScheduler+0x138>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	4a0f      	ldr	r2, [pc, #60]	; (800e358 <xPortStartScheduler+0x138>)
 800e31c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e320:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e322:	f7ff ff69 	bl	800e1f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e326:	f7ff fd5b 	bl	800dde0 <vTaskSwitchContext>
	prvTaskExitError();
 800e32a:	f7ff ff23 	bl	800e174 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e32e:	2300      	movs	r3, #0
}
 800e330:	4618      	mov	r0, r3
 800e332:	3718      	adds	r7, #24
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	e000ed00 	.word	0xe000ed00
 800e33c:	410fc271 	.word	0x410fc271
 800e340:	410fc270 	.word	0x410fc270
 800e344:	e000e400 	.word	0xe000e400
 800e348:	20000dbc 	.word	0x20000dbc
 800e34c:	20000dc0 	.word	0x20000dc0
 800e350:	e000ed20 	.word	0xe000ed20
 800e354:	20000124 	.word	0x20000124
 800e358:	e000ef34 	.word	0xe000ef34

0800e35c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
 800e362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e366:	f383 8811 	msr	BASEPRI, r3
 800e36a:	f3bf 8f6f 	isb	sy
 800e36e:	f3bf 8f4f 	dsb	sy
 800e372:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e374:	4b0e      	ldr	r3, [pc, #56]	; (800e3b0 <vPortEnterCritical+0x54>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	3301      	adds	r3, #1
 800e37a:	4a0d      	ldr	r2, [pc, #52]	; (800e3b0 <vPortEnterCritical+0x54>)
 800e37c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e37e:	4b0c      	ldr	r3, [pc, #48]	; (800e3b0 <vPortEnterCritical+0x54>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2b01      	cmp	r3, #1
 800e384:	d10e      	bne.n	800e3a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e386:	4b0b      	ldr	r3, [pc, #44]	; (800e3b4 <vPortEnterCritical+0x58>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	b2db      	uxtb	r3, r3
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d009      	beq.n	800e3a4 <vPortEnterCritical+0x48>
 800e390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e394:	f383 8811 	msr	BASEPRI, r3
 800e398:	f3bf 8f6f 	isb	sy
 800e39c:	f3bf 8f4f 	dsb	sy
 800e3a0:	603b      	str	r3, [r7, #0]
 800e3a2:	e7fe      	b.n	800e3a2 <vPortEnterCritical+0x46>
	}
}
 800e3a4:	bf00      	nop
 800e3a6:	370c      	adds	r7, #12
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr
 800e3b0:	20000124 	.word	0x20000124
 800e3b4:	e000ed04 	.word	0xe000ed04

0800e3b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b083      	sub	sp, #12
 800e3bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e3be:	4b11      	ldr	r3, [pc, #68]	; (800e404 <vPortExitCritical+0x4c>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d109      	bne.n	800e3da <vPortExitCritical+0x22>
 800e3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ca:	f383 8811 	msr	BASEPRI, r3
 800e3ce:	f3bf 8f6f 	isb	sy
 800e3d2:	f3bf 8f4f 	dsb	sy
 800e3d6:	607b      	str	r3, [r7, #4]
 800e3d8:	e7fe      	b.n	800e3d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800e3da:	4b0a      	ldr	r3, [pc, #40]	; (800e404 <vPortExitCritical+0x4c>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	3b01      	subs	r3, #1
 800e3e0:	4a08      	ldr	r2, [pc, #32]	; (800e404 <vPortExitCritical+0x4c>)
 800e3e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e3e4:	4b07      	ldr	r3, [pc, #28]	; (800e404 <vPortExitCritical+0x4c>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d104      	bne.n	800e3f6 <vPortExitCritical+0x3e>
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e3f6:	bf00      	nop
 800e3f8:	370c      	adds	r7, #12
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop
 800e404:	20000124 	.word	0x20000124
	...

0800e410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e410:	f3ef 8009 	mrs	r0, PSP
 800e414:	f3bf 8f6f 	isb	sy
 800e418:	4b15      	ldr	r3, [pc, #84]	; (800e470 <pxCurrentTCBConst>)
 800e41a:	681a      	ldr	r2, [r3, #0]
 800e41c:	f01e 0f10 	tst.w	lr, #16
 800e420:	bf08      	it	eq
 800e422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e42a:	6010      	str	r0, [r2, #0]
 800e42c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e430:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e434:	f380 8811 	msr	BASEPRI, r0
 800e438:	f3bf 8f4f 	dsb	sy
 800e43c:	f3bf 8f6f 	isb	sy
 800e440:	f7ff fcce 	bl	800dde0 <vTaskSwitchContext>
 800e444:	f04f 0000 	mov.w	r0, #0
 800e448:	f380 8811 	msr	BASEPRI, r0
 800e44c:	bc09      	pop	{r0, r3}
 800e44e:	6819      	ldr	r1, [r3, #0]
 800e450:	6808      	ldr	r0, [r1, #0]
 800e452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e456:	f01e 0f10 	tst.w	lr, #16
 800e45a:	bf08      	it	eq
 800e45c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e460:	f380 8809 	msr	PSP, r0
 800e464:	f3bf 8f6f 	isb	sy
 800e468:	4770      	bx	lr
 800e46a:	bf00      	nop
 800e46c:	f3af 8000 	nop.w

0800e470 <pxCurrentTCBConst>:
 800e470:	20000c90 	.word	0x20000c90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e474:	bf00      	nop
 800e476:	bf00      	nop

0800e478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
	__asm volatile
 800e47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e482:	f383 8811 	msr	BASEPRI, r3
 800e486:	f3bf 8f6f 	isb	sy
 800e48a:	f3bf 8f4f 	dsb	sy
 800e48e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e490:	f7ff fbee 	bl	800dc70 <xTaskIncrementTick>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d003      	beq.n	800e4a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e49a:	4b06      	ldr	r3, [pc, #24]	; (800e4b4 <SysTick_Handler+0x3c>)
 800e49c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4a0:	601a      	str	r2, [r3, #0]
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e4ac:	bf00      	nop
 800e4ae:	3708      	adds	r7, #8
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}
 800e4b4:	e000ed04 	.word	0xe000ed04

0800e4b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e4bc:	4b0b      	ldr	r3, [pc, #44]	; (800e4ec <vPortSetupTimerInterrupt+0x34>)
 800e4be:	2200      	movs	r2, #0
 800e4c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e4c2:	4b0b      	ldr	r3, [pc, #44]	; (800e4f0 <vPortSetupTimerInterrupt+0x38>)
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e4c8:	4b0a      	ldr	r3, [pc, #40]	; (800e4f4 <vPortSetupTimerInterrupt+0x3c>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	4a0a      	ldr	r2, [pc, #40]	; (800e4f8 <vPortSetupTimerInterrupt+0x40>)
 800e4ce:	fba2 2303 	umull	r2, r3, r2, r3
 800e4d2:	099b      	lsrs	r3, r3, #6
 800e4d4:	4a09      	ldr	r2, [pc, #36]	; (800e4fc <vPortSetupTimerInterrupt+0x44>)
 800e4d6:	3b01      	subs	r3, #1
 800e4d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e4da:	4b04      	ldr	r3, [pc, #16]	; (800e4ec <vPortSetupTimerInterrupt+0x34>)
 800e4dc:	2207      	movs	r2, #7
 800e4de:	601a      	str	r2, [r3, #0]
}
 800e4e0:	bf00      	nop
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e8:	4770      	bx	lr
 800e4ea:	bf00      	nop
 800e4ec:	e000e010 	.word	0xe000e010
 800e4f0:	e000e018 	.word	0xe000e018
 800e4f4:	20000008 	.word	0x20000008
 800e4f8:	10624dd3 	.word	0x10624dd3
 800e4fc:	e000e014 	.word	0xe000e014

0800e500 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e500:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e510 <vPortEnableVFP+0x10>
 800e504:	6801      	ldr	r1, [r0, #0]
 800e506:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e50a:	6001      	str	r1, [r0, #0]
 800e50c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e50e:	bf00      	nop
 800e510:	e000ed88 	.word	0xe000ed88

0800e514 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b08a      	sub	sp, #40	; 0x28
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e51c:	2300      	movs	r3, #0
 800e51e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e520:	f7ff faec 	bl	800dafc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e524:	4b57      	ldr	r3, [pc, #348]	; (800e684 <pvPortMalloc+0x170>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d101      	bne.n	800e530 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e52c:	f000 f90c 	bl	800e748 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e530:	4b55      	ldr	r3, [pc, #340]	; (800e688 <pvPortMalloc+0x174>)
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	4013      	ands	r3, r2
 800e538:	2b00      	cmp	r3, #0
 800e53a:	f040 808c 	bne.w	800e656 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d01c      	beq.n	800e57e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800e544:	2208      	movs	r2, #8
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	4413      	add	r3, r2
 800e54a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f003 0307 	and.w	r3, r3, #7
 800e552:	2b00      	cmp	r3, #0
 800e554:	d013      	beq.n	800e57e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f023 0307 	bic.w	r3, r3, #7
 800e55c:	3308      	adds	r3, #8
 800e55e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f003 0307 	and.w	r3, r3, #7
 800e566:	2b00      	cmp	r3, #0
 800e568:	d009      	beq.n	800e57e <pvPortMalloc+0x6a>
	__asm volatile
 800e56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e56e:	f383 8811 	msr	BASEPRI, r3
 800e572:	f3bf 8f6f 	isb	sy
 800e576:	f3bf 8f4f 	dsb	sy
 800e57a:	617b      	str	r3, [r7, #20]
 800e57c:	e7fe      	b.n	800e57c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d068      	beq.n	800e656 <pvPortMalloc+0x142>
 800e584:	4b41      	ldr	r3, [pc, #260]	; (800e68c <pvPortMalloc+0x178>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	687a      	ldr	r2, [r7, #4]
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d863      	bhi.n	800e656 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e58e:	4b40      	ldr	r3, [pc, #256]	; (800e690 <pvPortMalloc+0x17c>)
 800e590:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e592:	4b3f      	ldr	r3, [pc, #252]	; (800e690 <pvPortMalloc+0x17c>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e598:	e004      	b.n	800e5a4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800e59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	687a      	ldr	r2, [r7, #4]
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	d903      	bls.n	800e5b6 <pvPortMalloc+0xa2>
 800e5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d1f1      	bne.n	800e59a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e5b6:	4b33      	ldr	r3, [pc, #204]	; (800e684 <pvPortMalloc+0x170>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	d04a      	beq.n	800e656 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e5c0:	6a3b      	ldr	r3, [r7, #32]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	2208      	movs	r2, #8
 800e5c6:	4413      	add	r3, r2
 800e5c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5cc:	681a      	ldr	r2, [r3, #0]
 800e5ce:	6a3b      	ldr	r3, [r7, #32]
 800e5d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d4:	685a      	ldr	r2, [r3, #4]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	1ad2      	subs	r2, r2, r3
 800e5da:	2308      	movs	r3, #8
 800e5dc:	005b      	lsls	r3, r3, #1
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d91e      	bls.n	800e620 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e5e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5ea:	69bb      	ldr	r3, [r7, #24]
 800e5ec:	f003 0307 	and.w	r3, r3, #7
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d009      	beq.n	800e608 <pvPortMalloc+0xf4>
 800e5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f8:	f383 8811 	msr	BASEPRI, r3
 800e5fc:	f3bf 8f6f 	isb	sy
 800e600:	f3bf 8f4f 	dsb	sy
 800e604:	613b      	str	r3, [r7, #16]
 800e606:	e7fe      	b.n	800e606 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60a:	685a      	ldr	r2, [r3, #4]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	1ad2      	subs	r2, r2, r3
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e61a:	69b8      	ldr	r0, [r7, #24]
 800e61c:	f000 f8f6 	bl	800e80c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e620:	4b1a      	ldr	r3, [pc, #104]	; (800e68c <pvPortMalloc+0x178>)
 800e622:	681a      	ldr	r2, [r3, #0]
 800e624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	1ad3      	subs	r3, r2, r3
 800e62a:	4a18      	ldr	r2, [pc, #96]	; (800e68c <pvPortMalloc+0x178>)
 800e62c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e62e:	4b17      	ldr	r3, [pc, #92]	; (800e68c <pvPortMalloc+0x178>)
 800e630:	681a      	ldr	r2, [r3, #0]
 800e632:	4b18      	ldr	r3, [pc, #96]	; (800e694 <pvPortMalloc+0x180>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	429a      	cmp	r2, r3
 800e638:	d203      	bcs.n	800e642 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e63a:	4b14      	ldr	r3, [pc, #80]	; (800e68c <pvPortMalloc+0x178>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	4a15      	ldr	r2, [pc, #84]	; (800e694 <pvPortMalloc+0x180>)
 800e640:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e644:	685a      	ldr	r2, [r3, #4]
 800e646:	4b10      	ldr	r3, [pc, #64]	; (800e688 <pvPortMalloc+0x174>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	431a      	orrs	r2, r3
 800e64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e652:	2200      	movs	r2, #0
 800e654:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e656:	f7ff fa5f 	bl	800db18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e65a:	69fb      	ldr	r3, [r7, #28]
 800e65c:	f003 0307 	and.w	r3, r3, #7
 800e660:	2b00      	cmp	r3, #0
 800e662:	d009      	beq.n	800e678 <pvPortMalloc+0x164>
 800e664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e668:	f383 8811 	msr	BASEPRI, r3
 800e66c:	f3bf 8f6f 	isb	sy
 800e670:	f3bf 8f4f 	dsb	sy
 800e674:	60fb      	str	r3, [r7, #12]
 800e676:	e7fe      	b.n	800e676 <pvPortMalloc+0x162>
	return pvReturn;
 800e678:	69fb      	ldr	r3, [r7, #28]
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3728      	adds	r7, #40	; 0x28
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	200049cc 	.word	0x200049cc
 800e688:	200049d8 	.word	0x200049d8
 800e68c:	200049d0 	.word	0x200049d0
 800e690:	200049c4 	.word	0x200049c4
 800e694:	200049d4 	.word	0x200049d4

0800e698 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b086      	sub	sp, #24
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d046      	beq.n	800e738 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e6aa:	2308      	movs	r3, #8
 800e6ac:	425b      	negs	r3, r3
 800e6ae:	697a      	ldr	r2, [r7, #20]
 800e6b0:	4413      	add	r3, r2
 800e6b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	685a      	ldr	r2, [r3, #4]
 800e6bc:	4b20      	ldr	r3, [pc, #128]	; (800e740 <vPortFree+0xa8>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4013      	ands	r3, r2
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d109      	bne.n	800e6da <vPortFree+0x42>
 800e6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ca:	f383 8811 	msr	BASEPRI, r3
 800e6ce:	f3bf 8f6f 	isb	sy
 800e6d2:	f3bf 8f4f 	dsb	sy
 800e6d6:	60fb      	str	r3, [r7, #12]
 800e6d8:	e7fe      	b.n	800e6d8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d009      	beq.n	800e6f6 <vPortFree+0x5e>
 800e6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e6:	f383 8811 	msr	BASEPRI, r3
 800e6ea:	f3bf 8f6f 	isb	sy
 800e6ee:	f3bf 8f4f 	dsb	sy
 800e6f2:	60bb      	str	r3, [r7, #8]
 800e6f4:	e7fe      	b.n	800e6f4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	685a      	ldr	r2, [r3, #4]
 800e6fa:	4b11      	ldr	r3, [pc, #68]	; (800e740 <vPortFree+0xa8>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	4013      	ands	r3, r2
 800e700:	2b00      	cmp	r3, #0
 800e702:	d019      	beq.n	800e738 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d115      	bne.n	800e738 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	685a      	ldr	r2, [r3, #4]
 800e710:	4b0b      	ldr	r3, [pc, #44]	; (800e740 <vPortFree+0xa8>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	43db      	mvns	r3, r3
 800e716:	401a      	ands	r2, r3
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e71c:	f7ff f9ee 	bl	800dafc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	685a      	ldr	r2, [r3, #4]
 800e724:	4b07      	ldr	r3, [pc, #28]	; (800e744 <vPortFree+0xac>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	4413      	add	r3, r2
 800e72a:	4a06      	ldr	r2, [pc, #24]	; (800e744 <vPortFree+0xac>)
 800e72c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e72e:	6938      	ldr	r0, [r7, #16]
 800e730:	f000 f86c 	bl	800e80c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e734:	f7ff f9f0 	bl	800db18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e738:	bf00      	nop
 800e73a:	3718      	adds	r7, #24
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	200049d8 	.word	0x200049d8
 800e744:	200049d0 	.word	0x200049d0

0800e748 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e748:	b480      	push	{r7}
 800e74a:	b085      	sub	sp, #20
 800e74c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e74e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e752:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e754:	4b27      	ldr	r3, [pc, #156]	; (800e7f4 <prvHeapInit+0xac>)
 800e756:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	f003 0307 	and.w	r3, r3, #7
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d00c      	beq.n	800e77c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	3307      	adds	r3, #7
 800e766:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	f023 0307 	bic.w	r3, r3, #7
 800e76e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e770:	68ba      	ldr	r2, [r7, #8]
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	1ad3      	subs	r3, r2, r3
 800e776:	4a1f      	ldr	r2, [pc, #124]	; (800e7f4 <prvHeapInit+0xac>)
 800e778:	4413      	add	r3, r2
 800e77a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e780:	4a1d      	ldr	r2, [pc, #116]	; (800e7f8 <prvHeapInit+0xb0>)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e786:	4b1c      	ldr	r3, [pc, #112]	; (800e7f8 <prvHeapInit+0xb0>)
 800e788:	2200      	movs	r2, #0
 800e78a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	68ba      	ldr	r2, [r7, #8]
 800e790:	4413      	add	r3, r2
 800e792:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e794:	2208      	movs	r2, #8
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	1a9b      	subs	r3, r3, r2
 800e79a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	f023 0307 	bic.w	r3, r3, #7
 800e7a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	4a15      	ldr	r2, [pc, #84]	; (800e7fc <prvHeapInit+0xb4>)
 800e7a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e7aa:	4b14      	ldr	r3, [pc, #80]	; (800e7fc <prvHeapInit+0xb4>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e7b2:	4b12      	ldr	r3, [pc, #72]	; (800e7fc <prvHeapInit+0xb4>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	68fa      	ldr	r2, [r7, #12]
 800e7c2:	1ad2      	subs	r2, r2, r3
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e7c8:	4b0c      	ldr	r3, [pc, #48]	; (800e7fc <prvHeapInit+0xb4>)
 800e7ca:	681a      	ldr	r2, [r3, #0]
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	685b      	ldr	r3, [r3, #4]
 800e7d4:	4a0a      	ldr	r2, [pc, #40]	; (800e800 <prvHeapInit+0xb8>)
 800e7d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	4a09      	ldr	r2, [pc, #36]	; (800e804 <prvHeapInit+0xbc>)
 800e7de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e7e0:	4b09      	ldr	r3, [pc, #36]	; (800e808 <prvHeapInit+0xc0>)
 800e7e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e7e6:	601a      	str	r2, [r3, #0]
}
 800e7e8:	bf00      	nop
 800e7ea:	3714      	adds	r7, #20
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr
 800e7f4:	20000dc4 	.word	0x20000dc4
 800e7f8:	200049c4 	.word	0x200049c4
 800e7fc:	200049cc 	.word	0x200049cc
 800e800:	200049d4 	.word	0x200049d4
 800e804:	200049d0 	.word	0x200049d0
 800e808:	200049d8 	.word	0x200049d8

0800e80c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e80c:	b480      	push	{r7}
 800e80e:	b085      	sub	sp, #20
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e814:	4b28      	ldr	r3, [pc, #160]	; (800e8b8 <prvInsertBlockIntoFreeList+0xac>)
 800e816:	60fb      	str	r3, [r7, #12]
 800e818:	e002      	b.n	800e820 <prvInsertBlockIntoFreeList+0x14>
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	60fb      	str	r3, [r7, #12]
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	429a      	cmp	r2, r3
 800e828:	d8f7      	bhi.n	800e81a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	685b      	ldr	r3, [r3, #4]
 800e832:	68ba      	ldr	r2, [r7, #8]
 800e834:	4413      	add	r3, r2
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	429a      	cmp	r2, r3
 800e83a:	d108      	bne.n	800e84e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	685a      	ldr	r2, [r3, #4]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	441a      	add	r2, r3
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	68ba      	ldr	r2, [r7, #8]
 800e858:	441a      	add	r2, r3
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	429a      	cmp	r2, r3
 800e860:	d118      	bne.n	800e894 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	4b15      	ldr	r3, [pc, #84]	; (800e8bc <prvInsertBlockIntoFreeList+0xb0>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d00d      	beq.n	800e88a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	685a      	ldr	r2, [r3, #4]
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	441a      	add	r2, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	681a      	ldr	r2, [r3, #0]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	601a      	str	r2, [r3, #0]
 800e888:	e008      	b.n	800e89c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e88a:	4b0c      	ldr	r3, [pc, #48]	; (800e8bc <prvInsertBlockIntoFreeList+0xb0>)
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	601a      	str	r2, [r3, #0]
 800e892:	e003      	b.n	800e89c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681a      	ldr	r2, [r3, #0]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e89c:	68fa      	ldr	r2, [r7, #12]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d002      	beq.n	800e8aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	687a      	ldr	r2, [r7, #4]
 800e8a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e8aa:	bf00      	nop
 800e8ac:	3714      	adds	r7, #20
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b4:	4770      	bx	lr
 800e8b6:	bf00      	nop
 800e8b8:	200049c4 	.word	0x200049c4
 800e8bc:	200049cc 	.word	0x200049cc

0800e8c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	4912      	ldr	r1, [pc, #72]	; (800e910 <MX_USB_DEVICE_Init+0x50>)
 800e8c8:	4812      	ldr	r0, [pc, #72]	; (800e914 <MX_USB_DEVICE_Init+0x54>)
 800e8ca:	f7fd fc3f 	bl	800c14c <USBD_Init>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d001      	beq.n	800e8d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e8d4:	f7f2 fa10 	bl	8000cf8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e8d8:	490f      	ldr	r1, [pc, #60]	; (800e918 <MX_USB_DEVICE_Init+0x58>)
 800e8da:	480e      	ldr	r0, [pc, #56]	; (800e914 <MX_USB_DEVICE_Init+0x54>)
 800e8dc:	f7fd fc6c 	bl	800c1b8 <USBD_RegisterClass>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d001      	beq.n	800e8ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e8e6:	f7f2 fa07 	bl	8000cf8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e8ea:	490c      	ldr	r1, [pc, #48]	; (800e91c <MX_USB_DEVICE_Init+0x5c>)
 800e8ec:	4809      	ldr	r0, [pc, #36]	; (800e914 <MX_USB_DEVICE_Init+0x54>)
 800e8ee:	f7fd fb91 	bl	800c014 <USBD_CDC_RegisterInterface>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d001      	beq.n	800e8fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e8f8:	f7f2 f9fe 	bl	8000cf8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e8fc:	4805      	ldr	r0, [pc, #20]	; (800e914 <MX_USB_DEVICE_Init+0x54>)
 800e8fe:	f7fd fc7c 	bl	800c1fa <USBD_Start>
 800e902:	4603      	mov	r3, r0
 800e904:	2b00      	cmp	r3, #0
 800e906:	d001      	beq.n	800e90c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e908:	f7f2 f9f6 	bl	8000cf8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e90c:	bf00      	nop
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	2000013c 	.word	0x2000013c
 800e914:	20004fd4 	.word	0x20004fd4
 800e918:	20000020 	.word	0x20000020
 800e91c:	20000128 	.word	0x20000128

0800e920 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e924:	2200      	movs	r2, #0
 800e926:	4907      	ldr	r1, [pc, #28]	; (800e944 <CDC_Init_FS+0x24>)
 800e928:	4807      	ldr	r0, [pc, #28]	; (800e948 <CDC_Init_FS+0x28>)
 800e92a:	f7fd fb88 	bl	800c03e <USBD_CDC_SetTxBuffer>
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e92e:	4907      	ldr	r1, [pc, #28]	; (800e94c <CDC_Init_FS+0x2c>)
 800e930:	4805      	ldr	r0, [pc, #20]	; (800e948 <CDC_Init_FS+0x28>)
 800e932:	f7fd fb9d 	bl	800c070 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);                                         //This is new to the function, the rest is standard HAL
 800e936:	4804      	ldr	r0, [pc, #16]	; (800e948 <CDC_Init_FS+0x28>)
 800e938:	f7fd fbde 	bl	800c0f8 <USBD_CDC_ReceivePacket>
	  return (USBD_OK);
 800e93c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e93e:	4618      	mov	r0, r3
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	200056a4 	.word	0x200056a4
 800e948:	20004fd4 	.word	0x20004fd4
 800e94c:	200052a4 	.word	0x200052a4

0800e950 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e950:	b480      	push	{r7}
 800e952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e954:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e956:	4618      	mov	r0, r3
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr

0800e960 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e960:	b480      	push	{r7}
 800e962:	b083      	sub	sp, #12
 800e964:	af00      	add	r7, sp, #0
 800e966:	4603      	mov	r3, r0
 800e968:	6039      	str	r1, [r7, #0]
 800e96a:	71fb      	strb	r3, [r7, #7]
 800e96c:	4613      	mov	r3, r2
 800e96e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e970:	79fb      	ldrb	r3, [r7, #7]
 800e972:	2b23      	cmp	r3, #35	; 0x23
 800e974:	d84a      	bhi.n	800ea0c <CDC_Control_FS+0xac>
 800e976:	a201      	add	r2, pc, #4	; (adr r2, 800e97c <CDC_Control_FS+0x1c>)
 800e978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e97c:	0800ea0d 	.word	0x0800ea0d
 800e980:	0800ea0d 	.word	0x0800ea0d
 800e984:	0800ea0d 	.word	0x0800ea0d
 800e988:	0800ea0d 	.word	0x0800ea0d
 800e98c:	0800ea0d 	.word	0x0800ea0d
 800e990:	0800ea0d 	.word	0x0800ea0d
 800e994:	0800ea0d 	.word	0x0800ea0d
 800e998:	0800ea0d 	.word	0x0800ea0d
 800e99c:	0800ea0d 	.word	0x0800ea0d
 800e9a0:	0800ea0d 	.word	0x0800ea0d
 800e9a4:	0800ea0d 	.word	0x0800ea0d
 800e9a8:	0800ea0d 	.word	0x0800ea0d
 800e9ac:	0800ea0d 	.word	0x0800ea0d
 800e9b0:	0800ea0d 	.word	0x0800ea0d
 800e9b4:	0800ea0d 	.word	0x0800ea0d
 800e9b8:	0800ea0d 	.word	0x0800ea0d
 800e9bc:	0800ea0d 	.word	0x0800ea0d
 800e9c0:	0800ea0d 	.word	0x0800ea0d
 800e9c4:	0800ea0d 	.word	0x0800ea0d
 800e9c8:	0800ea0d 	.word	0x0800ea0d
 800e9cc:	0800ea0d 	.word	0x0800ea0d
 800e9d0:	0800ea0d 	.word	0x0800ea0d
 800e9d4:	0800ea0d 	.word	0x0800ea0d
 800e9d8:	0800ea0d 	.word	0x0800ea0d
 800e9dc:	0800ea0d 	.word	0x0800ea0d
 800e9e0:	0800ea0d 	.word	0x0800ea0d
 800e9e4:	0800ea0d 	.word	0x0800ea0d
 800e9e8:	0800ea0d 	.word	0x0800ea0d
 800e9ec:	0800ea0d 	.word	0x0800ea0d
 800e9f0:	0800ea0d 	.word	0x0800ea0d
 800e9f4:	0800ea0d 	.word	0x0800ea0d
 800e9f8:	0800ea0d 	.word	0x0800ea0d
 800e9fc:	0800ea0d 	.word	0x0800ea0d
 800ea00:	0800ea0d 	.word	0x0800ea0d
 800ea04:	0800ea0d 	.word	0x0800ea0d
 800ea08:	0800ea0d 	.word	0x0800ea0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ea0c:	bf00      	nop
  }

  return (USBD_OK);
 800ea0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	370c      	adds	r7, #12
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


  volatile uint32_t counter = 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	60fb      	str	r3, [r7, #12]

  while(counter < *Len)
 800ea2a:	e01e      	b.n	800ea6a <CDC_Receive_FS+0x4e>
  {
       RxBuffer[RxFifoIndex ] = Buf[counter];
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	687a      	ldr	r2, [r7, #4]
 800ea30:	441a      	add	r2, r3
 800ea32:	4b16      	ldr	r3, [pc, #88]	; (800ea8c <CDC_Receive_FS+0x70>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	7811      	ldrb	r1, [r2, #0]
 800ea38:	4a15      	ldr	r2, [pc, #84]	; (800ea90 <CDC_Receive_FS+0x74>)
 800ea3a:	54d1      	strb	r1, [r2, r3]
       cdc_receive_put(Buf[counter]);
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	687a      	ldr	r2, [r7, #4]
 800ea40:	4413      	add	r3, r2
 800ea42:	781b      	ldrb	r3, [r3, #0]
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7f4 fd7d 	bl	8003544 <cdc_receive_put>
       counter++, RxFifoIndex++;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	3301      	adds	r3, #1
 800ea4e:	60fb      	str	r3, [r7, #12]
 800ea50:	4b0e      	ldr	r3, [pc, #56]	; (800ea8c <CDC_Receive_FS+0x70>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	3301      	adds	r3, #1
 800ea56:	4a0d      	ldr	r2, [pc, #52]	; (800ea8c <CDC_Receive_FS+0x70>)
 800ea58:	6013      	str	r3, [r2, #0]
       if(RxFifoIndex  == RxBufferSize)
 800ea5a:	4b0c      	ldr	r3, [pc, #48]	; (800ea8c <CDC_Receive_FS+0x70>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea62:	d102      	bne.n	800ea6a <CDC_Receive_FS+0x4e>
            RxFifoIndex  = 0;
 800ea64:	4b09      	ldr	r3, [pc, #36]	; (800ea8c <CDC_Receive_FS+0x70>)
 800ea66:	2200      	movs	r2, #0
 800ea68:	601a      	str	r2, [r3, #0]
  while(counter < *Len)
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	681a      	ldr	r2, [r3, #0]
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d8db      	bhi.n	800ea2c <CDC_Receive_FS+0x10>
   }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ea74:	6879      	ldr	r1, [r7, #4]
 800ea76:	4807      	ldr	r0, [pc, #28]	; (800ea94 <CDC_Receive_FS+0x78>)
 800ea78:	f7fd fafa 	bl	800c070 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ea7c:	4805      	ldr	r0, [pc, #20]	; (800ea94 <CDC_Receive_FS+0x78>)
 800ea7e:	f7fd fb3b 	bl	800c0f8 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800ea82:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	3710      	adds	r7, #16
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}
 800ea8c:	200049dc 	.word	0x200049dc
 800ea90:	20005aa4 	.word	0x20005aa4
 800ea94:	20004fd4 	.word	0x20004fd4

0800ea98 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800eaa8:	4b0d      	ldr	r3, [pc, #52]	; (800eae0 <CDC_Transmit_FS+0x48>)
 800eaaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eaae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d001      	beq.n	800eabe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800eaba:	2301      	movs	r3, #1
 800eabc:	e00b      	b.n	800ead6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800eabe:	887b      	ldrh	r3, [r7, #2]
 800eac0:	461a      	mov	r2, r3
 800eac2:	6879      	ldr	r1, [r7, #4]
 800eac4:	4806      	ldr	r0, [pc, #24]	; (800eae0 <CDC_Transmit_FS+0x48>)
 800eac6:	f7fd faba 	bl	800c03e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800eaca:	4805      	ldr	r0, [pc, #20]	; (800eae0 <CDC_Transmit_FS+0x48>)
 800eacc:	f7fd fae4 	bl	800c098 <USBD_CDC_TransmitPacket>
 800ead0:	4603      	mov	r3, r0
 800ead2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ead4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3710      	adds	r7, #16
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}
 800eade:	bf00      	nop
 800eae0:	20004fd4 	.word	0x20004fd4

0800eae4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eae4:	b480      	push	{r7}
 800eae6:	b087      	sub	sp, #28
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	60f8      	str	r0, [r7, #12]
 800eaec:	60b9      	str	r1, [r7, #8]
 800eaee:	4613      	mov	r3, r2
 800eaf0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eaf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	371c      	adds	r7, #28
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr
	...

0800eb08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b083      	sub	sp, #12
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	4603      	mov	r3, r0
 800eb10:	6039      	str	r1, [r7, #0]
 800eb12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	2212      	movs	r2, #18
 800eb18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800eb1a:	4b03      	ldr	r3, [pc, #12]	; (800eb28 <USBD_FS_DeviceDescriptor+0x20>)
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	370c      	adds	r7, #12
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr
 800eb28:	20000158 	.word	0x20000158

0800eb2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b083      	sub	sp, #12
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	4603      	mov	r3, r0
 800eb34:	6039      	str	r1, [r7, #0]
 800eb36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	2204      	movs	r2, #4
 800eb3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eb3e:	4b03      	ldr	r3, [pc, #12]	; (800eb4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	370c      	adds	r7, #12
 800eb44:	46bd      	mov	sp, r7
 800eb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4a:	4770      	bx	lr
 800eb4c:	2000016c 	.word	0x2000016c

0800eb50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	4603      	mov	r3, r0
 800eb58:	6039      	str	r1, [r7, #0]
 800eb5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb5c:	79fb      	ldrb	r3, [r7, #7]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d105      	bne.n	800eb6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb62:	683a      	ldr	r2, [r7, #0]
 800eb64:	4907      	ldr	r1, [pc, #28]	; (800eb84 <USBD_FS_ProductStrDescriptor+0x34>)
 800eb66:	4808      	ldr	r0, [pc, #32]	; (800eb88 <USBD_FS_ProductStrDescriptor+0x38>)
 800eb68:	f7fe fb15 	bl	800d196 <USBD_GetString>
 800eb6c:	e004      	b.n	800eb78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb6e:	683a      	ldr	r2, [r7, #0]
 800eb70:	4904      	ldr	r1, [pc, #16]	; (800eb84 <USBD_FS_ProductStrDescriptor+0x34>)
 800eb72:	4805      	ldr	r0, [pc, #20]	; (800eb88 <USBD_FS_ProductStrDescriptor+0x38>)
 800eb74:	f7fe fb0f 	bl	800d196 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb78:	4b02      	ldr	r3, [pc, #8]	; (800eb84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3708      	adds	r7, #8
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	20005ea4 	.word	0x20005ea4
 800eb88:	0800fa80 	.word	0x0800fa80

0800eb8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b082      	sub	sp, #8
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	4603      	mov	r3, r0
 800eb94:	6039      	str	r1, [r7, #0]
 800eb96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eb98:	683a      	ldr	r2, [r7, #0]
 800eb9a:	4904      	ldr	r1, [pc, #16]	; (800ebac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eb9c:	4804      	ldr	r0, [pc, #16]	; (800ebb0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eb9e:	f7fe fafa 	bl	800d196 <USBD_GetString>
  return USBD_StrDesc;
 800eba2:	4b02      	ldr	r3, [pc, #8]	; (800ebac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3708      	adds	r7, #8
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}
 800ebac:	20005ea4 	.word	0x20005ea4
 800ebb0:	0800fa98 	.word	0x0800fa98

0800ebb4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	4603      	mov	r3, r0
 800ebbc:	6039      	str	r1, [r7, #0]
 800ebbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	221a      	movs	r2, #26
 800ebc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ebc6:	f000 f843 	bl	800ec50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ebca:	4b02      	ldr	r3, [pc, #8]	; (800ebd4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3708      	adds	r7, #8
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}
 800ebd4:	20000170 	.word	0x20000170

0800ebd8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	4603      	mov	r3, r0
 800ebe0:	6039      	str	r1, [r7, #0]
 800ebe2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ebe4:	79fb      	ldrb	r3, [r7, #7]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d105      	bne.n	800ebf6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ebea:	683a      	ldr	r2, [r7, #0]
 800ebec:	4907      	ldr	r1, [pc, #28]	; (800ec0c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ebee:	4808      	ldr	r0, [pc, #32]	; (800ec10 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ebf0:	f7fe fad1 	bl	800d196 <USBD_GetString>
 800ebf4:	e004      	b.n	800ec00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ebf6:	683a      	ldr	r2, [r7, #0]
 800ebf8:	4904      	ldr	r1, [pc, #16]	; (800ec0c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ebfa:	4805      	ldr	r0, [pc, #20]	; (800ec10 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ebfc:	f7fe facb 	bl	800d196 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec00:	4b02      	ldr	r3, [pc, #8]	; (800ec0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3708      	adds	r7, #8
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}
 800ec0a:	bf00      	nop
 800ec0c:	20005ea4 	.word	0x20005ea4
 800ec10:	0800faac 	.word	0x0800faac

0800ec14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	6039      	str	r1, [r7, #0]
 800ec1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ec20:	79fb      	ldrb	r3, [r7, #7]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d105      	bne.n	800ec32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ec26:	683a      	ldr	r2, [r7, #0]
 800ec28:	4907      	ldr	r1, [pc, #28]	; (800ec48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ec2a:	4808      	ldr	r0, [pc, #32]	; (800ec4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ec2c:	f7fe fab3 	bl	800d196 <USBD_GetString>
 800ec30:	e004      	b.n	800ec3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ec32:	683a      	ldr	r2, [r7, #0]
 800ec34:	4904      	ldr	r1, [pc, #16]	; (800ec48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ec36:	4805      	ldr	r0, [pc, #20]	; (800ec4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ec38:	f7fe faad 	bl	800d196 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec3c:	4b02      	ldr	r3, [pc, #8]	; (800ec48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3708      	adds	r7, #8
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop
 800ec48:	20005ea4 	.word	0x20005ea4
 800ec4c:	0800fab8 	.word	0x0800fab8

0800ec50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ec56:	4b0f      	ldr	r3, [pc, #60]	; (800ec94 <Get_SerialNum+0x44>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ec5c:	4b0e      	ldr	r3, [pc, #56]	; (800ec98 <Get_SerialNum+0x48>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ec62:	4b0e      	ldr	r3, [pc, #56]	; (800ec9c <Get_SerialNum+0x4c>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ec68:	68fa      	ldr	r2, [r7, #12]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	4413      	add	r3, r2
 800ec6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d009      	beq.n	800ec8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ec76:	2208      	movs	r2, #8
 800ec78:	4909      	ldr	r1, [pc, #36]	; (800eca0 <Get_SerialNum+0x50>)
 800ec7a:	68f8      	ldr	r0, [r7, #12]
 800ec7c:	f000 f814 	bl	800eca8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ec80:	2204      	movs	r2, #4
 800ec82:	4908      	ldr	r1, [pc, #32]	; (800eca4 <Get_SerialNum+0x54>)
 800ec84:	68b8      	ldr	r0, [r7, #8]
 800ec86:	f000 f80f 	bl	800eca8 <IntToUnicode>
  }
}
 800ec8a:	bf00      	nop
 800ec8c:	3710      	adds	r7, #16
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	bf00      	nop
 800ec94:	1fff7a10 	.word	0x1fff7a10
 800ec98:	1fff7a14 	.word	0x1fff7a14
 800ec9c:	1fff7a18 	.word	0x1fff7a18
 800eca0:	20000172 	.word	0x20000172
 800eca4:	20000182 	.word	0x20000182

0800eca8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800eca8:	b480      	push	{r7}
 800ecaa:	b087      	sub	sp, #28
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	4613      	mov	r3, r2
 800ecb4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ecba:	2300      	movs	r3, #0
 800ecbc:	75fb      	strb	r3, [r7, #23]
 800ecbe:	e027      	b.n	800ed10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	0f1b      	lsrs	r3, r3, #28
 800ecc4:	2b09      	cmp	r3, #9
 800ecc6:	d80b      	bhi.n	800ece0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	0f1b      	lsrs	r3, r3, #28
 800eccc:	b2da      	uxtb	r2, r3
 800ecce:	7dfb      	ldrb	r3, [r7, #23]
 800ecd0:	005b      	lsls	r3, r3, #1
 800ecd2:	4619      	mov	r1, r3
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	440b      	add	r3, r1
 800ecd8:	3230      	adds	r2, #48	; 0x30
 800ecda:	b2d2      	uxtb	r2, r2
 800ecdc:	701a      	strb	r2, [r3, #0]
 800ecde:	e00a      	b.n	800ecf6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	0f1b      	lsrs	r3, r3, #28
 800ece4:	b2da      	uxtb	r2, r3
 800ece6:	7dfb      	ldrb	r3, [r7, #23]
 800ece8:	005b      	lsls	r3, r3, #1
 800ecea:	4619      	mov	r1, r3
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	440b      	add	r3, r1
 800ecf0:	3237      	adds	r2, #55	; 0x37
 800ecf2:	b2d2      	uxtb	r2, r2
 800ecf4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	011b      	lsls	r3, r3, #4
 800ecfa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ecfc:	7dfb      	ldrb	r3, [r7, #23]
 800ecfe:	005b      	lsls	r3, r3, #1
 800ed00:	3301      	adds	r3, #1
 800ed02:	68ba      	ldr	r2, [r7, #8]
 800ed04:	4413      	add	r3, r2
 800ed06:	2200      	movs	r2, #0
 800ed08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ed0a:	7dfb      	ldrb	r3, [r7, #23]
 800ed0c:	3301      	adds	r3, #1
 800ed0e:	75fb      	strb	r3, [r7, #23]
 800ed10:	7dfa      	ldrb	r2, [r7, #23]
 800ed12:	79fb      	ldrb	r3, [r7, #7]
 800ed14:	429a      	cmp	r2, r3
 800ed16:	d3d3      	bcc.n	800ecc0 <IntToUnicode+0x18>
  }
}
 800ed18:	bf00      	nop
 800ed1a:	371c      	adds	r7, #28
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed22:	4770      	bx	lr

0800ed24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b08a      	sub	sp, #40	; 0x28
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed2c:	f107 0314 	add.w	r3, r7, #20
 800ed30:	2200      	movs	r2, #0
 800ed32:	601a      	str	r2, [r3, #0]
 800ed34:	605a      	str	r2, [r3, #4]
 800ed36:	609a      	str	r2, [r3, #8]
 800ed38:	60da      	str	r2, [r3, #12]
 800ed3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ed44:	d13a      	bne.n	800edbc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed46:	2300      	movs	r3, #0
 800ed48:	613b      	str	r3, [r7, #16]
 800ed4a:	4b1e      	ldr	r3, [pc, #120]	; (800edc4 <HAL_PCD_MspInit+0xa0>)
 800ed4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed4e:	4a1d      	ldr	r2, [pc, #116]	; (800edc4 <HAL_PCD_MspInit+0xa0>)
 800ed50:	f043 0301 	orr.w	r3, r3, #1
 800ed54:	6313      	str	r3, [r2, #48]	; 0x30
 800ed56:	4b1b      	ldr	r3, [pc, #108]	; (800edc4 <HAL_PCD_MspInit+0xa0>)
 800ed58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed5a:	f003 0301 	and.w	r3, r3, #1
 800ed5e:	613b      	str	r3, [r7, #16]
 800ed60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ed62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ed66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed68:	2302      	movs	r3, #2
 800ed6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed70:	2303      	movs	r3, #3
 800ed72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ed74:	230a      	movs	r3, #10
 800ed76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed78:	f107 0314 	add.w	r3, r7, #20
 800ed7c:	4619      	mov	r1, r3
 800ed7e:	4812      	ldr	r0, [pc, #72]	; (800edc8 <HAL_PCD_MspInit+0xa4>)
 800ed80:	f7f6 fe80 	bl	8005a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ed84:	4b0f      	ldr	r3, [pc, #60]	; (800edc4 <HAL_PCD_MspInit+0xa0>)
 800ed86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed88:	4a0e      	ldr	r2, [pc, #56]	; (800edc4 <HAL_PCD_MspInit+0xa0>)
 800ed8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed8e:	6353      	str	r3, [r2, #52]	; 0x34
 800ed90:	2300      	movs	r3, #0
 800ed92:	60fb      	str	r3, [r7, #12]
 800ed94:	4b0b      	ldr	r3, [pc, #44]	; (800edc4 <HAL_PCD_MspInit+0xa0>)
 800ed96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed98:	4a0a      	ldr	r2, [pc, #40]	; (800edc4 <HAL_PCD_MspInit+0xa0>)
 800ed9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ed9e:	6453      	str	r3, [r2, #68]	; 0x44
 800eda0:	4b08      	ldr	r3, [pc, #32]	; (800edc4 <HAL_PCD_MspInit+0xa0>)
 800eda2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eda4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eda8:	60fb      	str	r3, [r7, #12]
 800edaa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800edac:	2200      	movs	r2, #0
 800edae:	2100      	movs	r1, #0
 800edb0:	2043      	movs	r0, #67	; 0x43
 800edb2:	f7f6 fe0d 	bl	80059d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800edb6:	2043      	movs	r0, #67	; 0x43
 800edb8:	f7f6 fe26 	bl	8005a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800edbc:	bf00      	nop
 800edbe:	3728      	adds	r7, #40	; 0x28
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}
 800edc4:	40023800 	.word	0x40023800
 800edc8:	40020000 	.word	0x40020000

0800edcc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b082      	sub	sp, #8
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ede0:	4619      	mov	r1, r3
 800ede2:	4610      	mov	r0, r2
 800ede4:	f7fd fa54 	bl	800c290 <USBD_LL_SetupStage>
}
 800ede8:	bf00      	nop
 800edea:	3708      	adds	r7, #8
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	460b      	mov	r3, r1
 800edfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ee02:	78fa      	ldrb	r2, [r7, #3]
 800ee04:	6879      	ldr	r1, [r7, #4]
 800ee06:	4613      	mov	r3, r2
 800ee08:	00db      	lsls	r3, r3, #3
 800ee0a:	1a9b      	subs	r3, r3, r2
 800ee0c:	009b      	lsls	r3, r3, #2
 800ee0e:	440b      	add	r3, r1
 800ee10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ee14:	681a      	ldr	r2, [r3, #0]
 800ee16:	78fb      	ldrb	r3, [r7, #3]
 800ee18:	4619      	mov	r1, r3
 800ee1a:	f7fd fa8c 	bl	800c336 <USBD_LL_DataOutStage>
}
 800ee1e:	bf00      	nop
 800ee20:	3708      	adds	r7, #8
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}

0800ee26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee26:	b580      	push	{r7, lr}
 800ee28:	b082      	sub	sp, #8
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	6078      	str	r0, [r7, #4]
 800ee2e:	460b      	mov	r3, r1
 800ee30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ee38:	78fa      	ldrb	r2, [r7, #3]
 800ee3a:	6879      	ldr	r1, [r7, #4]
 800ee3c:	4613      	mov	r3, r2
 800ee3e:	00db      	lsls	r3, r3, #3
 800ee40:	1a9b      	subs	r3, r3, r2
 800ee42:	009b      	lsls	r3, r3, #2
 800ee44:	440b      	add	r3, r1
 800ee46:	3348      	adds	r3, #72	; 0x48
 800ee48:	681a      	ldr	r2, [r3, #0]
 800ee4a:	78fb      	ldrb	r3, [r7, #3]
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	f7fd fad5 	bl	800c3fc <USBD_LL_DataInStage>
}
 800ee52:	bf00      	nop
 800ee54:	3708      	adds	r7, #8
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}

0800ee5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee5a:	b580      	push	{r7, lr}
 800ee5c:	b082      	sub	sp, #8
 800ee5e:	af00      	add	r7, sp, #0
 800ee60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f7fd fbd9 	bl	800c620 <USBD_LL_SOF>
}
 800ee6e:	bf00      	nop
 800ee70:	3708      	adds	r7, #8
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}

0800ee76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee76:	b580      	push	{r7, lr}
 800ee78:	b084      	sub	sp, #16
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ee7e:	2301      	movs	r3, #1
 800ee80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	68db      	ldr	r3, [r3, #12]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d102      	bne.n	800ee90 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	73fb      	strb	r3, [r7, #15]
 800ee8e:	e008      	b.n	800eea2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	68db      	ldr	r3, [r3, #12]
 800ee94:	2b02      	cmp	r3, #2
 800ee96:	d102      	bne.n	800ee9e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	73fb      	strb	r3, [r7, #15]
 800ee9c:	e001      	b.n	800eea2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ee9e:	f7f1 ff2b 	bl	8000cf8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eea8:	7bfa      	ldrb	r2, [r7, #15]
 800eeaa:	4611      	mov	r1, r2
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7fd fb7c 	bl	800c5aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7fd fb35 	bl	800c528 <USBD_LL_Reset>
}
 800eebe:	bf00      	nop
 800eec0:	3710      	adds	r7, #16
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
	...

0800eec8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b082      	sub	sp, #8
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eed6:	4618      	mov	r0, r3
 800eed8:	f7fd fb77 	bl	800c5ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	687a      	ldr	r2, [r7, #4]
 800eee8:	6812      	ldr	r2, [r2, #0]
 800eeea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eeee:	f043 0301 	orr.w	r3, r3, #1
 800eef2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	6a1b      	ldr	r3, [r3, #32]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d005      	beq.n	800ef08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eefc:	4b04      	ldr	r3, [pc, #16]	; (800ef10 <HAL_PCD_SuspendCallback+0x48>)
 800eefe:	691b      	ldr	r3, [r3, #16]
 800ef00:	4a03      	ldr	r2, [pc, #12]	; (800ef10 <HAL_PCD_SuspendCallback+0x48>)
 800ef02:	f043 0306 	orr.w	r3, r3, #6
 800ef06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ef08:	bf00      	nop
 800ef0a:	3708      	adds	r7, #8
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}
 800ef10:	e000ed00 	.word	0xe000ed00

0800ef14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fd fb66 	bl	800c5f4 <USBD_LL_Resume>
}
 800ef28:	bf00      	nop
 800ef2a:	3708      	adds	r7, #8
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}

0800ef30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	460b      	mov	r3, r1
 800ef3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef42:	78fa      	ldrb	r2, [r7, #3]
 800ef44:	4611      	mov	r1, r2
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7fd fb91 	bl	800c66e <USBD_LL_IsoOUTIncomplete>
}
 800ef4c:	bf00      	nop
 800ef4e:	3708      	adds	r7, #8
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b082      	sub	sp, #8
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	460b      	mov	r3, r1
 800ef5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef66:	78fa      	ldrb	r2, [r7, #3]
 800ef68:	4611      	mov	r1, r2
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7fd fb72 	bl	800c654 <USBD_LL_IsoINIncomplete>
}
 800ef70:	bf00      	nop
 800ef72:	3708      	adds	r7, #8
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b082      	sub	sp, #8
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fd fb7e 	bl	800c688 <USBD_LL_DevConnected>
}
 800ef8c:	bf00      	nop
 800ef8e:	3708      	adds	r7, #8
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b082      	sub	sp, #8
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fd fb7b 	bl	800c69e <USBD_LL_DevDisconnected>
}
 800efa8:	bf00      	nop
 800efaa:	3708      	adds	r7, #8
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d13c      	bne.n	800f03a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800efc0:	4a20      	ldr	r2, [pc, #128]	; (800f044 <USBD_LL_Init+0x94>)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	4a1e      	ldr	r2, [pc, #120]	; (800f044 <USBD_LL_Init+0x94>)
 800efcc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800efd0:	4b1c      	ldr	r3, [pc, #112]	; (800f044 <USBD_LL_Init+0x94>)
 800efd2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800efd6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800efd8:	4b1a      	ldr	r3, [pc, #104]	; (800f044 <USBD_LL_Init+0x94>)
 800efda:	2204      	movs	r2, #4
 800efdc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800efde:	4b19      	ldr	r3, [pc, #100]	; (800f044 <USBD_LL_Init+0x94>)
 800efe0:	2202      	movs	r2, #2
 800efe2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800efe4:	4b17      	ldr	r3, [pc, #92]	; (800f044 <USBD_LL_Init+0x94>)
 800efe6:	2200      	movs	r2, #0
 800efe8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800efea:	4b16      	ldr	r3, [pc, #88]	; (800f044 <USBD_LL_Init+0x94>)
 800efec:	2202      	movs	r2, #2
 800efee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eff0:	4b14      	ldr	r3, [pc, #80]	; (800f044 <USBD_LL_Init+0x94>)
 800eff2:	2200      	movs	r2, #0
 800eff4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800eff6:	4b13      	ldr	r3, [pc, #76]	; (800f044 <USBD_LL_Init+0x94>)
 800eff8:	2200      	movs	r2, #0
 800effa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800effc:	4b11      	ldr	r3, [pc, #68]	; (800f044 <USBD_LL_Init+0x94>)
 800effe:	2200      	movs	r2, #0
 800f000:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f002:	4b10      	ldr	r3, [pc, #64]	; (800f044 <USBD_LL_Init+0x94>)
 800f004:	2200      	movs	r2, #0
 800f006:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f008:	4b0e      	ldr	r3, [pc, #56]	; (800f044 <USBD_LL_Init+0x94>)
 800f00a:	2200      	movs	r2, #0
 800f00c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f00e:	480d      	ldr	r0, [pc, #52]	; (800f044 <USBD_LL_Init+0x94>)
 800f010:	f7f9 fa2e 	bl	8008470 <HAL_PCD_Init>
 800f014:	4603      	mov	r3, r0
 800f016:	2b00      	cmp	r3, #0
 800f018:	d001      	beq.n	800f01e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f01a:	f7f1 fe6d 	bl	8000cf8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f01e:	2180      	movs	r1, #128	; 0x80
 800f020:	4808      	ldr	r0, [pc, #32]	; (800f044 <USBD_LL_Init+0x94>)
 800f022:	f7fa fb8c 	bl	800973e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f026:	2240      	movs	r2, #64	; 0x40
 800f028:	2100      	movs	r1, #0
 800f02a:	4806      	ldr	r0, [pc, #24]	; (800f044 <USBD_LL_Init+0x94>)
 800f02c:	f7fa fb40 	bl	80096b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f030:	2280      	movs	r2, #128	; 0x80
 800f032:	2101      	movs	r1, #1
 800f034:	4803      	ldr	r0, [pc, #12]	; (800f044 <USBD_LL_Init+0x94>)
 800f036:	f7fa fb3b 	bl	80096b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3708      	adds	r7, #8
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}
 800f044:	200060a4 	.word	0x200060a4

0800f048 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b084      	sub	sp, #16
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f050:	2300      	movs	r3, #0
 800f052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f054:	2300      	movs	r3, #0
 800f056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f05e:	4618      	mov	r0, r3
 800f060:	f7f9 fb23 	bl	80086aa <HAL_PCD_Start>
 800f064:	4603      	mov	r3, r0
 800f066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f068:	7bfb      	ldrb	r3, [r7, #15]
 800f06a:	4618      	mov	r0, r3
 800f06c:	f000 f92a 	bl	800f2c4 <USBD_Get_USB_Status>
 800f070:	4603      	mov	r3, r0
 800f072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f074:	7bbb      	ldrb	r3, [r7, #14]
}
 800f076:	4618      	mov	r0, r3
 800f078:	3710      	adds	r7, #16
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}

0800f07e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f07e:	b580      	push	{r7, lr}
 800f080:	b084      	sub	sp, #16
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
 800f086:	4608      	mov	r0, r1
 800f088:	4611      	mov	r1, r2
 800f08a:	461a      	mov	r2, r3
 800f08c:	4603      	mov	r3, r0
 800f08e:	70fb      	strb	r3, [r7, #3]
 800f090:	460b      	mov	r3, r1
 800f092:	70bb      	strb	r3, [r7, #2]
 800f094:	4613      	mov	r3, r2
 800f096:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f098:	2300      	movs	r3, #0
 800f09a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f09c:	2300      	movs	r3, #0
 800f09e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f0a6:	78bb      	ldrb	r3, [r7, #2]
 800f0a8:	883a      	ldrh	r2, [r7, #0]
 800f0aa:	78f9      	ldrb	r1, [r7, #3]
 800f0ac:	f7f9 ff07 	bl	8008ebe <HAL_PCD_EP_Open>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0b4:	7bfb      	ldrb	r3, [r7, #15]
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f000 f904 	bl	800f2c4 <USBD_Get_USB_Status>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3710      	adds	r7, #16
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}

0800f0ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b084      	sub	sp, #16
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
 800f0d2:	460b      	mov	r3, r1
 800f0d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f0e4:	78fa      	ldrb	r2, [r7, #3]
 800f0e6:	4611      	mov	r1, r2
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7f9 ff50 	bl	8008f8e <HAL_PCD_EP_Close>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0f2:	7bfb      	ldrb	r3, [r7, #15]
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f000 f8e5 	bl	800f2c4 <USBD_Get_USB_Status>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800f100:	4618      	mov	r0, r3
 800f102:	3710      	adds	r7, #16
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}

0800f108 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	460b      	mov	r3, r1
 800f112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f114:	2300      	movs	r3, #0
 800f116:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f118:	2300      	movs	r3, #0
 800f11a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f122:	78fa      	ldrb	r2, [r7, #3]
 800f124:	4611      	mov	r1, r2
 800f126:	4618      	mov	r0, r3
 800f128:	f7fa f828 	bl	800917c <HAL_PCD_EP_SetStall>
 800f12c:	4603      	mov	r3, r0
 800f12e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f130:	7bfb      	ldrb	r3, [r7, #15]
 800f132:	4618      	mov	r0, r3
 800f134:	f000 f8c6 	bl	800f2c4 <USBD_Get_USB_Status>
 800f138:	4603      	mov	r3, r0
 800f13a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f13c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3710      	adds	r7, #16
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}

0800f146 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f146:	b580      	push	{r7, lr}
 800f148:	b084      	sub	sp, #16
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	6078      	str	r0, [r7, #4]
 800f14e:	460b      	mov	r3, r1
 800f150:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f152:	2300      	movs	r3, #0
 800f154:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f156:	2300      	movs	r3, #0
 800f158:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f160:	78fa      	ldrb	r2, [r7, #3]
 800f162:	4611      	mov	r1, r2
 800f164:	4618      	mov	r0, r3
 800f166:	f7fa f86d 	bl	8009244 <HAL_PCD_EP_ClrStall>
 800f16a:	4603      	mov	r3, r0
 800f16c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f16e:	7bfb      	ldrb	r3, [r7, #15]
 800f170:	4618      	mov	r0, r3
 800f172:	f000 f8a7 	bl	800f2c4 <USBD_Get_USB_Status>
 800f176:	4603      	mov	r3, r0
 800f178:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f17a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f184:	b480      	push	{r7}
 800f186:	b085      	sub	sp, #20
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	460b      	mov	r3, r1
 800f18e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f196:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f198:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	da0b      	bge.n	800f1b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f1a0:	78fb      	ldrb	r3, [r7, #3]
 800f1a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f1a6:	68f9      	ldr	r1, [r7, #12]
 800f1a8:	4613      	mov	r3, r2
 800f1aa:	00db      	lsls	r3, r3, #3
 800f1ac:	1a9b      	subs	r3, r3, r2
 800f1ae:	009b      	lsls	r3, r3, #2
 800f1b0:	440b      	add	r3, r1
 800f1b2:	333e      	adds	r3, #62	; 0x3e
 800f1b4:	781b      	ldrb	r3, [r3, #0]
 800f1b6:	e00b      	b.n	800f1d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f1b8:	78fb      	ldrb	r3, [r7, #3]
 800f1ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f1be:	68f9      	ldr	r1, [r7, #12]
 800f1c0:	4613      	mov	r3, r2
 800f1c2:	00db      	lsls	r3, r3, #3
 800f1c4:	1a9b      	subs	r3, r3, r2
 800f1c6:	009b      	lsls	r3, r3, #2
 800f1c8:	440b      	add	r3, r1
 800f1ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f1ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3714      	adds	r7, #20
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr

0800f1dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b084      	sub	sp, #16
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
 800f1e4:	460b      	mov	r3, r1
 800f1e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f1f6:	78fa      	ldrb	r2, [r7, #3]
 800f1f8:	4611      	mov	r1, r2
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7f9 fe3a 	bl	8008e74 <HAL_PCD_SetAddress>
 800f200:	4603      	mov	r3, r0
 800f202:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f204:	7bfb      	ldrb	r3, [r7, #15]
 800f206:	4618      	mov	r0, r3
 800f208:	f000 f85c 	bl	800f2c4 <USBD_Get_USB_Status>
 800f20c:	4603      	mov	r3, r0
 800f20e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f210:	7bbb      	ldrb	r3, [r7, #14]
}
 800f212:	4618      	mov	r0, r3
 800f214:	3710      	adds	r7, #16
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}

0800f21a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f21a:	b580      	push	{r7, lr}
 800f21c:	b086      	sub	sp, #24
 800f21e:	af00      	add	r7, sp, #0
 800f220:	60f8      	str	r0, [r7, #12]
 800f222:	607a      	str	r2, [r7, #4]
 800f224:	603b      	str	r3, [r7, #0]
 800f226:	460b      	mov	r3, r1
 800f228:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f22a:	2300      	movs	r3, #0
 800f22c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f22e:	2300      	movs	r3, #0
 800f230:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f238:	7af9      	ldrb	r1, [r7, #11]
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	687a      	ldr	r2, [r7, #4]
 800f23e:	f7f9 ff53 	bl	80090e8 <HAL_PCD_EP_Transmit>
 800f242:	4603      	mov	r3, r0
 800f244:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f246:	7dfb      	ldrb	r3, [r7, #23]
 800f248:	4618      	mov	r0, r3
 800f24a:	f000 f83b 	bl	800f2c4 <USBD_Get_USB_Status>
 800f24e:	4603      	mov	r3, r0
 800f250:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f252:	7dbb      	ldrb	r3, [r7, #22]
}
 800f254:	4618      	mov	r0, r3
 800f256:	3718      	adds	r7, #24
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}

0800f25c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b086      	sub	sp, #24
 800f260:	af00      	add	r7, sp, #0
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	607a      	str	r2, [r7, #4]
 800f266:	603b      	str	r3, [r7, #0]
 800f268:	460b      	mov	r3, r1
 800f26a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f26c:	2300      	movs	r3, #0
 800f26e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f270:	2300      	movs	r3, #0
 800f272:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f27a:	7af9      	ldrb	r1, [r7, #11]
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	687a      	ldr	r2, [r7, #4]
 800f280:	f7f9 fecf 	bl	8009022 <HAL_PCD_EP_Receive>
 800f284:	4603      	mov	r3, r0
 800f286:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f288:	7dfb      	ldrb	r3, [r7, #23]
 800f28a:	4618      	mov	r0, r3
 800f28c:	f000 f81a 	bl	800f2c4 <USBD_Get_USB_Status>
 800f290:	4603      	mov	r3, r0
 800f292:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f294:	7dbb      	ldrb	r3, [r7, #22]
}
 800f296:	4618      	mov	r0, r3
 800f298:	3718      	adds	r7, #24
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}

0800f29e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f29e:	b580      	push	{r7, lr}
 800f2a0:	b082      	sub	sp, #8
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	6078      	str	r0, [r7, #4]
 800f2a6:	460b      	mov	r3, r1
 800f2a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f2b0:	78fa      	ldrb	r2, [r7, #3]
 800f2b2:	4611      	mov	r1, r2
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f7f9 feff 	bl	80090b8 <HAL_PCD_EP_GetRxCount>
 800f2ba:	4603      	mov	r3, r0
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3708      	adds	r7, #8
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}

0800f2c4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b085      	sub	sp, #20
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f2d2:	79fb      	ldrb	r3, [r7, #7]
 800f2d4:	2b03      	cmp	r3, #3
 800f2d6:	d817      	bhi.n	800f308 <USBD_Get_USB_Status+0x44>
 800f2d8:	a201      	add	r2, pc, #4	; (adr r2, 800f2e0 <USBD_Get_USB_Status+0x1c>)
 800f2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2de:	bf00      	nop
 800f2e0:	0800f2f1 	.word	0x0800f2f1
 800f2e4:	0800f2f7 	.word	0x0800f2f7
 800f2e8:	0800f2fd 	.word	0x0800f2fd
 800f2ec:	0800f303 	.word	0x0800f303
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	73fb      	strb	r3, [r7, #15]
    break;
 800f2f4:	e00b      	b.n	800f30e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f2f6:	2303      	movs	r3, #3
 800f2f8:	73fb      	strb	r3, [r7, #15]
    break;
 800f2fa:	e008      	b.n	800f30e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	73fb      	strb	r3, [r7, #15]
    break;
 800f300:	e005      	b.n	800f30e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f302:	2303      	movs	r3, #3
 800f304:	73fb      	strb	r3, [r7, #15]
    break;
 800f306:	e002      	b.n	800f30e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f308:	2303      	movs	r3, #3
 800f30a:	73fb      	strb	r3, [r7, #15]
    break;
 800f30c:	bf00      	nop
  }
  return usb_status;
 800f30e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f310:	4618      	mov	r0, r3
 800f312:	3714      	adds	r7, #20
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr

0800f31c <__cxa_pure_virtual>:
 800f31c:	b508      	push	{r3, lr}
 800f31e:	f000 f80d 	bl	800f33c <_ZSt9terminatev>

0800f322 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f322:	b508      	push	{r3, lr}
 800f324:	4780      	blx	r0
 800f326:	f000 f80e 	bl	800f346 <abort>
	...

0800f32c <_ZSt13get_terminatev>:
 800f32c:	4b02      	ldr	r3, [pc, #8]	; (800f338 <_ZSt13get_terminatev+0xc>)
 800f32e:	6818      	ldr	r0, [r3, #0]
 800f330:	f3bf 8f5b 	dmb	ish
 800f334:	4770      	bx	lr
 800f336:	bf00      	nop
 800f338:	2000018c 	.word	0x2000018c

0800f33c <_ZSt9terminatev>:
 800f33c:	b508      	push	{r3, lr}
 800f33e:	f7ff fff5 	bl	800f32c <_ZSt13get_terminatev>
 800f342:	f7ff ffee 	bl	800f322 <_ZN10__cxxabiv111__terminateEPFvvE>

0800f346 <abort>:
 800f346:	b508      	push	{r3, lr}
 800f348:	2006      	movs	r0, #6
 800f34a:	f000 f939 	bl	800f5c0 <raise>
 800f34e:	2001      	movs	r0, #1
 800f350:	f7f2 fb4c 	bl	80019ec <_exit>

0800f354 <__errno>:
 800f354:	4b01      	ldr	r3, [pc, #4]	; (800f35c <__errno+0x8>)
 800f356:	6818      	ldr	r0, [r3, #0]
 800f358:	4770      	bx	lr
 800f35a:	bf00      	nop
 800f35c:	20000190 	.word	0x20000190

0800f360 <__libc_init_array>:
 800f360:	b570      	push	{r4, r5, r6, lr}
 800f362:	4e0d      	ldr	r6, [pc, #52]	; (800f398 <__libc_init_array+0x38>)
 800f364:	4c0d      	ldr	r4, [pc, #52]	; (800f39c <__libc_init_array+0x3c>)
 800f366:	1ba4      	subs	r4, r4, r6
 800f368:	10a4      	asrs	r4, r4, #2
 800f36a:	2500      	movs	r5, #0
 800f36c:	42a5      	cmp	r5, r4
 800f36e:	d109      	bne.n	800f384 <__libc_init_array+0x24>
 800f370:	4e0b      	ldr	r6, [pc, #44]	; (800f3a0 <__libc_init_array+0x40>)
 800f372:	4c0c      	ldr	r4, [pc, #48]	; (800f3a4 <__libc_init_array+0x44>)
 800f374:	f000 f970 	bl	800f658 <_init>
 800f378:	1ba4      	subs	r4, r4, r6
 800f37a:	10a4      	asrs	r4, r4, #2
 800f37c:	2500      	movs	r5, #0
 800f37e:	42a5      	cmp	r5, r4
 800f380:	d105      	bne.n	800f38e <__libc_init_array+0x2e>
 800f382:	bd70      	pop	{r4, r5, r6, pc}
 800f384:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f388:	4798      	blx	r3
 800f38a:	3501      	adds	r5, #1
 800f38c:	e7ee      	b.n	800f36c <__libc_init_array+0xc>
 800f38e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f392:	4798      	blx	r3
 800f394:	3501      	adds	r5, #1
 800f396:	e7f2      	b.n	800f37e <__libc_init_array+0x1e>
 800f398:	0800fc4c 	.word	0x0800fc4c
 800f39c:	0800fc4c 	.word	0x0800fc4c
 800f3a0:	0800fc4c 	.word	0x0800fc4c
 800f3a4:	0800fc54 	.word	0x0800fc54

0800f3a8 <malloc>:
 800f3a8:	4b02      	ldr	r3, [pc, #8]	; (800f3b4 <malloc+0xc>)
 800f3aa:	4601      	mov	r1, r0
 800f3ac:	6818      	ldr	r0, [r3, #0]
 800f3ae:	f000 b86d 	b.w	800f48c <_malloc_r>
 800f3b2:	bf00      	nop
 800f3b4:	20000190 	.word	0x20000190

0800f3b8 <free>:
 800f3b8:	4b02      	ldr	r3, [pc, #8]	; (800f3c4 <free+0xc>)
 800f3ba:	4601      	mov	r1, r0
 800f3bc:	6818      	ldr	r0, [r3, #0]
 800f3be:	f000 b817 	b.w	800f3f0 <_free_r>
 800f3c2:	bf00      	nop
 800f3c4:	20000190 	.word	0x20000190

0800f3c8 <memcpy>:
 800f3c8:	b510      	push	{r4, lr}
 800f3ca:	1e43      	subs	r3, r0, #1
 800f3cc:	440a      	add	r2, r1
 800f3ce:	4291      	cmp	r1, r2
 800f3d0:	d100      	bne.n	800f3d4 <memcpy+0xc>
 800f3d2:	bd10      	pop	{r4, pc}
 800f3d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3dc:	e7f7      	b.n	800f3ce <memcpy+0x6>

0800f3de <memset>:
 800f3de:	4402      	add	r2, r0
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	d100      	bne.n	800f3e8 <memset+0xa>
 800f3e6:	4770      	bx	lr
 800f3e8:	f803 1b01 	strb.w	r1, [r3], #1
 800f3ec:	e7f9      	b.n	800f3e2 <memset+0x4>
	...

0800f3f0 <_free_r>:
 800f3f0:	b538      	push	{r3, r4, r5, lr}
 800f3f2:	4605      	mov	r5, r0
 800f3f4:	2900      	cmp	r1, #0
 800f3f6:	d045      	beq.n	800f484 <_free_r+0x94>
 800f3f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3fc:	1f0c      	subs	r4, r1, #4
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	bfb8      	it	lt
 800f402:	18e4      	addlt	r4, r4, r3
 800f404:	f000 f8f8 	bl	800f5f8 <__malloc_lock>
 800f408:	4a1f      	ldr	r2, [pc, #124]	; (800f488 <_free_r+0x98>)
 800f40a:	6813      	ldr	r3, [r2, #0]
 800f40c:	4610      	mov	r0, r2
 800f40e:	b933      	cbnz	r3, 800f41e <_free_r+0x2e>
 800f410:	6063      	str	r3, [r4, #4]
 800f412:	6014      	str	r4, [r2, #0]
 800f414:	4628      	mov	r0, r5
 800f416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f41a:	f000 b8ee 	b.w	800f5fa <__malloc_unlock>
 800f41e:	42a3      	cmp	r3, r4
 800f420:	d90c      	bls.n	800f43c <_free_r+0x4c>
 800f422:	6821      	ldr	r1, [r4, #0]
 800f424:	1862      	adds	r2, r4, r1
 800f426:	4293      	cmp	r3, r2
 800f428:	bf04      	itt	eq
 800f42a:	681a      	ldreq	r2, [r3, #0]
 800f42c:	685b      	ldreq	r3, [r3, #4]
 800f42e:	6063      	str	r3, [r4, #4]
 800f430:	bf04      	itt	eq
 800f432:	1852      	addeq	r2, r2, r1
 800f434:	6022      	streq	r2, [r4, #0]
 800f436:	6004      	str	r4, [r0, #0]
 800f438:	e7ec      	b.n	800f414 <_free_r+0x24>
 800f43a:	4613      	mov	r3, r2
 800f43c:	685a      	ldr	r2, [r3, #4]
 800f43e:	b10a      	cbz	r2, 800f444 <_free_r+0x54>
 800f440:	42a2      	cmp	r2, r4
 800f442:	d9fa      	bls.n	800f43a <_free_r+0x4a>
 800f444:	6819      	ldr	r1, [r3, #0]
 800f446:	1858      	adds	r0, r3, r1
 800f448:	42a0      	cmp	r0, r4
 800f44a:	d10b      	bne.n	800f464 <_free_r+0x74>
 800f44c:	6820      	ldr	r0, [r4, #0]
 800f44e:	4401      	add	r1, r0
 800f450:	1858      	adds	r0, r3, r1
 800f452:	4282      	cmp	r2, r0
 800f454:	6019      	str	r1, [r3, #0]
 800f456:	d1dd      	bne.n	800f414 <_free_r+0x24>
 800f458:	6810      	ldr	r0, [r2, #0]
 800f45a:	6852      	ldr	r2, [r2, #4]
 800f45c:	605a      	str	r2, [r3, #4]
 800f45e:	4401      	add	r1, r0
 800f460:	6019      	str	r1, [r3, #0]
 800f462:	e7d7      	b.n	800f414 <_free_r+0x24>
 800f464:	d902      	bls.n	800f46c <_free_r+0x7c>
 800f466:	230c      	movs	r3, #12
 800f468:	602b      	str	r3, [r5, #0]
 800f46a:	e7d3      	b.n	800f414 <_free_r+0x24>
 800f46c:	6820      	ldr	r0, [r4, #0]
 800f46e:	1821      	adds	r1, r4, r0
 800f470:	428a      	cmp	r2, r1
 800f472:	bf04      	itt	eq
 800f474:	6811      	ldreq	r1, [r2, #0]
 800f476:	6852      	ldreq	r2, [r2, #4]
 800f478:	6062      	str	r2, [r4, #4]
 800f47a:	bf04      	itt	eq
 800f47c:	1809      	addeq	r1, r1, r0
 800f47e:	6021      	streq	r1, [r4, #0]
 800f480:	605c      	str	r4, [r3, #4]
 800f482:	e7c7      	b.n	800f414 <_free_r+0x24>
 800f484:	bd38      	pop	{r3, r4, r5, pc}
 800f486:	bf00      	nop
 800f488:	200049e0 	.word	0x200049e0

0800f48c <_malloc_r>:
 800f48c:	b570      	push	{r4, r5, r6, lr}
 800f48e:	1ccd      	adds	r5, r1, #3
 800f490:	f025 0503 	bic.w	r5, r5, #3
 800f494:	3508      	adds	r5, #8
 800f496:	2d0c      	cmp	r5, #12
 800f498:	bf38      	it	cc
 800f49a:	250c      	movcc	r5, #12
 800f49c:	2d00      	cmp	r5, #0
 800f49e:	4606      	mov	r6, r0
 800f4a0:	db01      	blt.n	800f4a6 <_malloc_r+0x1a>
 800f4a2:	42a9      	cmp	r1, r5
 800f4a4:	d903      	bls.n	800f4ae <_malloc_r+0x22>
 800f4a6:	230c      	movs	r3, #12
 800f4a8:	6033      	str	r3, [r6, #0]
 800f4aa:	2000      	movs	r0, #0
 800f4ac:	bd70      	pop	{r4, r5, r6, pc}
 800f4ae:	f000 f8a3 	bl	800f5f8 <__malloc_lock>
 800f4b2:	4a21      	ldr	r2, [pc, #132]	; (800f538 <_malloc_r+0xac>)
 800f4b4:	6814      	ldr	r4, [r2, #0]
 800f4b6:	4621      	mov	r1, r4
 800f4b8:	b991      	cbnz	r1, 800f4e0 <_malloc_r+0x54>
 800f4ba:	4c20      	ldr	r4, [pc, #128]	; (800f53c <_malloc_r+0xb0>)
 800f4bc:	6823      	ldr	r3, [r4, #0]
 800f4be:	b91b      	cbnz	r3, 800f4c8 <_malloc_r+0x3c>
 800f4c0:	4630      	mov	r0, r6
 800f4c2:	f000 f845 	bl	800f550 <_sbrk_r>
 800f4c6:	6020      	str	r0, [r4, #0]
 800f4c8:	4629      	mov	r1, r5
 800f4ca:	4630      	mov	r0, r6
 800f4cc:	f000 f840 	bl	800f550 <_sbrk_r>
 800f4d0:	1c43      	adds	r3, r0, #1
 800f4d2:	d124      	bne.n	800f51e <_malloc_r+0x92>
 800f4d4:	230c      	movs	r3, #12
 800f4d6:	6033      	str	r3, [r6, #0]
 800f4d8:	4630      	mov	r0, r6
 800f4da:	f000 f88e 	bl	800f5fa <__malloc_unlock>
 800f4de:	e7e4      	b.n	800f4aa <_malloc_r+0x1e>
 800f4e0:	680b      	ldr	r3, [r1, #0]
 800f4e2:	1b5b      	subs	r3, r3, r5
 800f4e4:	d418      	bmi.n	800f518 <_malloc_r+0x8c>
 800f4e6:	2b0b      	cmp	r3, #11
 800f4e8:	d90f      	bls.n	800f50a <_malloc_r+0x7e>
 800f4ea:	600b      	str	r3, [r1, #0]
 800f4ec:	50cd      	str	r5, [r1, r3]
 800f4ee:	18cc      	adds	r4, r1, r3
 800f4f0:	4630      	mov	r0, r6
 800f4f2:	f000 f882 	bl	800f5fa <__malloc_unlock>
 800f4f6:	f104 000b 	add.w	r0, r4, #11
 800f4fa:	1d23      	adds	r3, r4, #4
 800f4fc:	f020 0007 	bic.w	r0, r0, #7
 800f500:	1ac3      	subs	r3, r0, r3
 800f502:	d0d3      	beq.n	800f4ac <_malloc_r+0x20>
 800f504:	425a      	negs	r2, r3
 800f506:	50e2      	str	r2, [r4, r3]
 800f508:	e7d0      	b.n	800f4ac <_malloc_r+0x20>
 800f50a:	428c      	cmp	r4, r1
 800f50c:	684b      	ldr	r3, [r1, #4]
 800f50e:	bf16      	itet	ne
 800f510:	6063      	strne	r3, [r4, #4]
 800f512:	6013      	streq	r3, [r2, #0]
 800f514:	460c      	movne	r4, r1
 800f516:	e7eb      	b.n	800f4f0 <_malloc_r+0x64>
 800f518:	460c      	mov	r4, r1
 800f51a:	6849      	ldr	r1, [r1, #4]
 800f51c:	e7cc      	b.n	800f4b8 <_malloc_r+0x2c>
 800f51e:	1cc4      	adds	r4, r0, #3
 800f520:	f024 0403 	bic.w	r4, r4, #3
 800f524:	42a0      	cmp	r0, r4
 800f526:	d005      	beq.n	800f534 <_malloc_r+0xa8>
 800f528:	1a21      	subs	r1, r4, r0
 800f52a:	4630      	mov	r0, r6
 800f52c:	f000 f810 	bl	800f550 <_sbrk_r>
 800f530:	3001      	adds	r0, #1
 800f532:	d0cf      	beq.n	800f4d4 <_malloc_r+0x48>
 800f534:	6025      	str	r5, [r4, #0]
 800f536:	e7db      	b.n	800f4f0 <_malloc_r+0x64>
 800f538:	200049e0 	.word	0x200049e0
 800f53c:	200049e4 	.word	0x200049e4

0800f540 <realloc>:
 800f540:	4b02      	ldr	r3, [pc, #8]	; (800f54c <realloc+0xc>)
 800f542:	460a      	mov	r2, r1
 800f544:	4601      	mov	r1, r0
 800f546:	6818      	ldr	r0, [r3, #0]
 800f548:	f000 b858 	b.w	800f5fc <_realloc_r>
 800f54c:	20000190 	.word	0x20000190

0800f550 <_sbrk_r>:
 800f550:	b538      	push	{r3, r4, r5, lr}
 800f552:	4c06      	ldr	r4, [pc, #24]	; (800f56c <_sbrk_r+0x1c>)
 800f554:	2300      	movs	r3, #0
 800f556:	4605      	mov	r5, r0
 800f558:	4608      	mov	r0, r1
 800f55a:	6023      	str	r3, [r4, #0]
 800f55c:	f7f2 fa50 	bl	8001a00 <_sbrk>
 800f560:	1c43      	adds	r3, r0, #1
 800f562:	d102      	bne.n	800f56a <_sbrk_r+0x1a>
 800f564:	6823      	ldr	r3, [r4, #0]
 800f566:	b103      	cbz	r3, 800f56a <_sbrk_r+0x1a>
 800f568:	602b      	str	r3, [r5, #0]
 800f56a:	bd38      	pop	{r3, r4, r5, pc}
 800f56c:	200064ac 	.word	0x200064ac

0800f570 <_raise_r>:
 800f570:	291f      	cmp	r1, #31
 800f572:	b538      	push	{r3, r4, r5, lr}
 800f574:	4604      	mov	r4, r0
 800f576:	460d      	mov	r5, r1
 800f578:	d904      	bls.n	800f584 <_raise_r+0x14>
 800f57a:	2316      	movs	r3, #22
 800f57c:	6003      	str	r3, [r0, #0]
 800f57e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f582:	bd38      	pop	{r3, r4, r5, pc}
 800f584:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f586:	b112      	cbz	r2, 800f58e <_raise_r+0x1e>
 800f588:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f58c:	b94b      	cbnz	r3, 800f5a2 <_raise_r+0x32>
 800f58e:	4620      	mov	r0, r4
 800f590:	f000 f830 	bl	800f5f4 <_getpid_r>
 800f594:	462a      	mov	r2, r5
 800f596:	4601      	mov	r1, r0
 800f598:	4620      	mov	r0, r4
 800f59a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f59e:	f000 b817 	b.w	800f5d0 <_kill_r>
 800f5a2:	2b01      	cmp	r3, #1
 800f5a4:	d00a      	beq.n	800f5bc <_raise_r+0x4c>
 800f5a6:	1c59      	adds	r1, r3, #1
 800f5a8:	d103      	bne.n	800f5b2 <_raise_r+0x42>
 800f5aa:	2316      	movs	r3, #22
 800f5ac:	6003      	str	r3, [r0, #0]
 800f5ae:	2001      	movs	r0, #1
 800f5b0:	e7e7      	b.n	800f582 <_raise_r+0x12>
 800f5b2:	2400      	movs	r4, #0
 800f5b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f5b8:	4628      	mov	r0, r5
 800f5ba:	4798      	blx	r3
 800f5bc:	2000      	movs	r0, #0
 800f5be:	e7e0      	b.n	800f582 <_raise_r+0x12>

0800f5c0 <raise>:
 800f5c0:	4b02      	ldr	r3, [pc, #8]	; (800f5cc <raise+0xc>)
 800f5c2:	4601      	mov	r1, r0
 800f5c4:	6818      	ldr	r0, [r3, #0]
 800f5c6:	f7ff bfd3 	b.w	800f570 <_raise_r>
 800f5ca:	bf00      	nop
 800f5cc:	20000190 	.word	0x20000190

0800f5d0 <_kill_r>:
 800f5d0:	b538      	push	{r3, r4, r5, lr}
 800f5d2:	4c07      	ldr	r4, [pc, #28]	; (800f5f0 <_kill_r+0x20>)
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	4605      	mov	r5, r0
 800f5d8:	4608      	mov	r0, r1
 800f5da:	4611      	mov	r1, r2
 800f5dc:	6023      	str	r3, [r4, #0]
 800f5de:	f7f2 f9f5 	bl	80019cc <_kill>
 800f5e2:	1c43      	adds	r3, r0, #1
 800f5e4:	d102      	bne.n	800f5ec <_kill_r+0x1c>
 800f5e6:	6823      	ldr	r3, [r4, #0]
 800f5e8:	b103      	cbz	r3, 800f5ec <_kill_r+0x1c>
 800f5ea:	602b      	str	r3, [r5, #0]
 800f5ec:	bd38      	pop	{r3, r4, r5, pc}
 800f5ee:	bf00      	nop
 800f5f0:	200064ac 	.word	0x200064ac

0800f5f4 <_getpid_r>:
 800f5f4:	f7f2 b9e2 	b.w	80019bc <_getpid>

0800f5f8 <__malloc_lock>:
 800f5f8:	4770      	bx	lr

0800f5fa <__malloc_unlock>:
 800f5fa:	4770      	bx	lr

0800f5fc <_realloc_r>:
 800f5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5fe:	4607      	mov	r7, r0
 800f600:	4614      	mov	r4, r2
 800f602:	460e      	mov	r6, r1
 800f604:	b921      	cbnz	r1, 800f610 <_realloc_r+0x14>
 800f606:	4611      	mov	r1, r2
 800f608:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f60c:	f7ff bf3e 	b.w	800f48c <_malloc_r>
 800f610:	b922      	cbnz	r2, 800f61c <_realloc_r+0x20>
 800f612:	f7ff feed 	bl	800f3f0 <_free_r>
 800f616:	4625      	mov	r5, r4
 800f618:	4628      	mov	r0, r5
 800f61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f61c:	f000 f814 	bl	800f648 <_malloc_usable_size_r>
 800f620:	42a0      	cmp	r0, r4
 800f622:	d20f      	bcs.n	800f644 <_realloc_r+0x48>
 800f624:	4621      	mov	r1, r4
 800f626:	4638      	mov	r0, r7
 800f628:	f7ff ff30 	bl	800f48c <_malloc_r>
 800f62c:	4605      	mov	r5, r0
 800f62e:	2800      	cmp	r0, #0
 800f630:	d0f2      	beq.n	800f618 <_realloc_r+0x1c>
 800f632:	4631      	mov	r1, r6
 800f634:	4622      	mov	r2, r4
 800f636:	f7ff fec7 	bl	800f3c8 <memcpy>
 800f63a:	4631      	mov	r1, r6
 800f63c:	4638      	mov	r0, r7
 800f63e:	f7ff fed7 	bl	800f3f0 <_free_r>
 800f642:	e7e9      	b.n	800f618 <_realloc_r+0x1c>
 800f644:	4635      	mov	r5, r6
 800f646:	e7e7      	b.n	800f618 <_realloc_r+0x1c>

0800f648 <_malloc_usable_size_r>:
 800f648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f64c:	1f18      	subs	r0, r3, #4
 800f64e:	2b00      	cmp	r3, #0
 800f650:	bfbc      	itt	lt
 800f652:	580b      	ldrlt	r3, [r1, r0]
 800f654:	18c0      	addlt	r0, r0, r3
 800f656:	4770      	bx	lr

0800f658 <_init>:
 800f658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f65a:	bf00      	nop
 800f65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f65e:	bc08      	pop	{r3}
 800f660:	469e      	mov	lr, r3
 800f662:	4770      	bx	lr

0800f664 <_fini>:
 800f664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f666:	bf00      	nop
 800f668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f66a:	bc08      	pop	{r3}
 800f66c:	469e      	mov	lr, r3
 800f66e:	4770      	bx	lr
