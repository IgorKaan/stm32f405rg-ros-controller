
stm32f405rg-ros-core-controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800fa40  0800fa40  0001fa40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801003c  0801003c  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801003c  0801003c  0002003c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010044  08010044  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010044  08010044  00020044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801004c  0801004c  0002004c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  10000000  08010050  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006300  100001ec  0801023c  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  100064ec  0801023c  000364ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031692  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005f23  00000000  00000000  000618ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002000  00000000  00000000  000677d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001dd8  00000000  00000000  000697d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000292f7  00000000  00000000  0006b5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001bb2d  00000000  00000000  000948a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dce55  00000000  00000000  000b03d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018d229  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a0c  00000000  00000000  0018d2a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	100001ec 	.word	0x100001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fa28 	.word	0x0800fa28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	100001f0 	.word	0x100001f0
 80001cc:	0800fa28 	.word	0x0800fa28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim14);
 80004e4:	4802      	ldr	r0, [pc, #8]	; (80004f0 <configureTimerForRunTimeStats+0x10>)
 80004e6:	f009 fe74 	bl	800a1d2 <HAL_TIM_Base_Start>
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	10004f40 	.word	0x10004f40

080004f4 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
	static unsigned long counter = 0;

	counter += __HAL_TIM_GET_COUNTER(&htim14);
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <getRunTimeCounterValue+0x2c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <getRunTimeCounterValue+0x30>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4413      	add	r3, r2
 8000504:	4a07      	ldr	r2, [pc, #28]	; (8000524 <getRunTimeCounterValue+0x30>)
 8000506:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <getRunTimeCounterValue+0x2c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2200      	movs	r2, #0
 800050e:	625a      	str	r2, [r3, #36]	; 0x24

	return counter;
 8000510:	4b04      	ldr	r3, [pc, #16]	; (8000524 <getRunTimeCounterValue+0x30>)
 8000512:	681b      	ldr	r3, [r3, #0]
}
 8000514:	4618      	mov	r0, r3
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	10004f40 	.word	0x10004f40
 8000524:	1000046c 	.word	0x1000046c

08000528 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4a07      	ldr	r2, [pc, #28]	; (8000554 <vApplicationGetIdleTaskMemory+0x2c>)
 8000538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <vApplicationGetIdleTaskMemory+0x30>)
 800053e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	10000208 	.word	0x10000208
 8000558:	1000026c 	.word	0x1000026c

0800055c <DWT_Init>:
//#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <DWT_Init+0x28>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <DWT_Init+0x28>)
 8000566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800056a:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <DWT_Init+0x2c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a05      	ldr	r2, [pc, #20]	; (8000588 <DWT_Init+0x2c>)
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	6013      	str	r3, [r2, #0]
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000edf0 	.word	0xe000edf0
 8000588:	e0001000 	.word	0xe0001000

0800058c <delay_us>:

__STATIC_INLINE void delay_us(uint32_t us)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <delay_us+0x3c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0c      	ldr	r2, [pc, #48]	; (80005cc <delay_us+0x40>)
 800059a:	fba2 2303 	umull	r2, r3, r2, r3
 800059e:	0c9a      	lsrs	r2, r3, #18
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	fb02 f303 	mul.w	r3, r2, r3
 80005a6:	60fb      	str	r3, [r7, #12]
	DWT->CYCCNT = 0U;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <delay_us+0x44>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	605a      	str	r2, [r3, #4]
	while(DWT->CYCCNT < us_count_tic);
 80005ae:	bf00      	nop
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <delay_us+0x44>)
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	68fa      	ldr	r2, [r7, #12]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d8fa      	bhi.n	80005b0 <delay_us+0x24>
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	10000000 	.word	0x10000000
 80005cc:	431bde83 	.word	0x431bde83
 80005d0:	e0001000 	.word	0xe0001000

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b0aa      	sub	sp, #168	; 0xa8
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f004 fa07 	bl	80049ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f8e7 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f9d7 	bl	8000994 <MX_GPIO_Init>
  MX_CAN1_Init();
 80005e6:	f000 f94d 	bl	8000884 <MX_CAN1_Init>
  MX_I2C1_Init();
 80005ea:	f000 f981 	bl	80008f0 <MX_I2C1_Init>
  MX_TIM14_Init();
 80005ee:	f000 f9ad 	bl	800094c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  MPU9250_calibrate();
 80005f2:	f000 fc73 	bl	8000edc <MPU9250_calibrate>

  HAL_Delay(2000);
 80005f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005fa:	f004 fa39 	bl	8004a70 <HAL_Delay>
  MPU9250_init();
 80005fe:	f000 fc4a 	bl	8000e96 <MPU9250_init>
  HAL_Delay(500);
 8000602:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000606:	f004 fa33 	bl	8004a70 <HAL_Delay>
  init_ROS();
 800060a:	f002 ff97 	bl	800353c <init_ROS>
  HAL_Delay(500);
 800060e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000612:	f004 fa2d 	bl	8004a70 <HAL_Delay>
  DWT_Init();
 8000616:	f7ff ffa1 	bl	800055c <DWT_Init>

  left_wheels_Header.DLC = 4;
 800061a:	4b55      	ldr	r3, [pc, #340]	; (8000770 <main+0x19c>)
 800061c:	2204      	movs	r2, #4
 800061e:	611a      	str	r2, [r3, #16]
  left_wheels_Header.IDE = CAN_ID_STD;
 8000620:	4b53      	ldr	r3, [pc, #332]	; (8000770 <main+0x19c>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  left_wheels_Header.RTR = CAN_RTR_DATA;
 8000626:	4b52      	ldr	r3, [pc, #328]	; (8000770 <main+0x19c>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  left_wheels_Header.StdId = 0xF;
 800062c:	4b50      	ldr	r3, [pc, #320]	; (8000770 <main+0x19c>)
 800062e:	220f      	movs	r2, #15
 8000630:	601a      	str	r2, [r3, #0]

  right_wheels_Header.DLC = 4;
 8000632:	4b50      	ldr	r3, [pc, #320]	; (8000774 <main+0x1a0>)
 8000634:	2204      	movs	r2, #4
 8000636:	611a      	str	r2, [r3, #16]
  right_wheels_Header.IDE = CAN_ID_STD;
 8000638:	4b4e      	ldr	r3, [pc, #312]	; (8000774 <main+0x1a0>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  right_wheels_Header.RTR = CAN_RTR_DATA;
 800063e:	4b4d      	ldr	r3, [pc, #308]	; (8000774 <main+0x1a0>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  right_wheels_Header.StdId = 0x1F;
 8000644:	4b4b      	ldr	r3, [pc, #300]	; (8000774 <main+0x1a0>)
 8000646:	221f      	movs	r2, #31
 8000648:	601a      	str	r2, [r3, #0]

  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800064a:	4b4b      	ldr	r3, [pc, #300]	; (8000778 <main+0x1a4>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0;
 8000650:	4b49      	ldr	r3, [pc, #292]	; (8000778 <main+0x1a4>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 8000656:	4b48      	ldr	r3, [pc, #288]	; (8000778 <main+0x1a4>)
 8000658:	2200      	movs	r2, #0
 800065a:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 800065c:	4b46      	ldr	r3, [pc, #280]	; (8000778 <main+0x1a4>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8000662:	4b45      	ldr	r3, [pc, #276]	; (8000778 <main+0x1a4>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000668:	4b43      	ldr	r3, [pc, #268]	; (8000778 <main+0x1a4>)
 800066a:	2201      	movs	r2, #1
 800066c:	61da      	str	r2, [r3, #28]
  //sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterActivation = ENABLE;
 800066e:	4b42      	ldr	r3, [pc, #264]	; (8000778 <main+0x1a4>)
 8000670:	2201      	movs	r2, #1
 8000672:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000674:	4940      	ldr	r1, [pc, #256]	; (8000778 <main+0x1a4>)
 8000676:	4841      	ldr	r0, [pc, #260]	; (800077c <main+0x1a8>)
 8000678:	f004 fb18 	bl	8004cac <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1);
 800067c:	483f      	ldr	r0, [pc, #252]	; (800077c <main+0x1a8>)
 800067e:	f004 fbf5 	bl	8004e6c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000682:	2102      	movs	r1, #2
 8000684:	483d      	ldr	r0, [pc, #244]	; (800077c <main+0x1a8>)
 8000686:	f004 fe22 	bl	80052ce <HAL_CAN_ActivateNotification>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800068a:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <main+0x1ac>)
 800068c:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000690:	461d      	mov	r5, r3
 8000692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000696:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800069a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800069e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f00c ff11 	bl	800d4cc <osThreadCreate>
 80006aa:	4602      	mov	r2, r0
 80006ac:	4b35      	ldr	r3, [pc, #212]	; (8000784 <main+0x1b0>)
 80006ae:	601a      	str	r2, [r3, #0]

  /* definition and creation of task1 */
  osThreadDef(task1, StartTask02, osPriorityNormal, 0, 256);
 80006b0:	4b35      	ldr	r3, [pc, #212]	; (8000788 <main+0x1b4>)
 80006b2:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80006b6:	461d      	mov	r5, r3
 80006b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 80006c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f00c fefe 	bl	800d4cc <osThreadCreate>
 80006d0:	4602      	mov	r2, r0
 80006d2:	4b2e      	ldr	r3, [pc, #184]	; (800078c <main+0x1b8>)
 80006d4:	601a      	str	r2, [r3, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, StartTask03, osPriorityNormal, 0, 256);
 80006d6:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <main+0x1bc>)
 80006d8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80006dc:	461d      	mov	r5, r3
 80006de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 80006ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f00c feeb 	bl	800d4cc <osThreadCreate>
 80006f6:	4602      	mov	r2, r0
 80006f8:	4b26      	ldr	r3, [pc, #152]	; (8000794 <main+0x1c0>)
 80006fa:	601a      	str	r2, [r3, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, StartTask04, osPriorityNormal, 0, 256);
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <main+0x1c4>)
 80006fe:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000702:	461d      	mov	r5, r3
 8000704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000708:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800070c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3), NULL);
 8000710:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f00c fed8 	bl	800d4cc <osThreadCreate>
 800071c:	4602      	mov	r2, r0
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <main+0x1c8>)
 8000720:	601a      	str	r2, [r3, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, StartTask05, osPriorityNormal, 0, 256);
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <main+0x1cc>)
 8000724:	f107 041c 	add.w	r4, r7, #28
 8000728:	461d      	mov	r5, r3
 800072a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000732:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task4Handle = osThreadCreate(osThread(task4), NULL);
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f00c fec5 	bl	800d4cc <osThreadCreate>
 8000742:	4602      	mov	r2, r0
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <main+0x1d0>)
 8000746:	601a      	str	r2, [r3, #0]

  /* definition and creation of task5 */
  osThreadDef(task5, StartTask06, osPriorityNormal, 0, 256);
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <main+0x1d4>)
 800074a:	463c      	mov	r4, r7
 800074c:	461d      	mov	r5, r3
 800074e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000752:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000756:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task5Handle = osThreadCreate(osThread(task5), NULL);
 800075a:	463b      	mov	r3, r7
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f00c feb4 	bl	800d4cc <osThreadCreate>
 8000764:	4602      	mov	r2, r0
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <main+0x1d8>)
 8000768:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800076a:	f00c fea8 	bl	800d4be <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800076e:	e7fe      	b.n	800076e <main+0x19a>
 8000770:	10004a1c 	.word	0x10004a1c
 8000774:	10004ed8 	.word	0x10004ed8
 8000778:	100049e4 	.word	0x100049e4
 800077c:	10004f18 	.word	0x10004f18
 8000780:	0800fa4c 	.word	0x0800fa4c
 8000784:	10004a10 	.word	0x10004a10
 8000788:	0800fa70 	.word	0x0800fa70
 800078c:	10004a9c 	.word	0x10004a9c
 8000790:	0800fa94 	.word	0x0800fa94
 8000794:	10004fc8 	.word	0x10004fc8
 8000798:	0800fab8 	.word	0x0800fab8
 800079c:	10004ac4 	.word	0x10004ac4
 80007a0:	0800fadc 	.word	0x0800fadc
 80007a4:	10004aac 	.word	0x10004aac
 80007a8:	0800fb00 	.word	0x0800fb00
 80007ac:	10004aa4 	.word	0x10004aa4

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	2230      	movs	r2, #48	; 0x30
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f00e fff5 	bl	800f7ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <SystemClock_Config+0xcc>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a27      	ldr	r2, [pc, #156]	; (800087c <SystemClock_Config+0xcc>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b25      	ldr	r3, [pc, #148]	; (800087c <SystemClock_Config+0xcc>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <SystemClock_Config+0xd0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a21      	ldr	r2, [pc, #132]	; (8000880 <SystemClock_Config+0xd0>)
 80007fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <SystemClock_Config+0xd0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080c:	2301      	movs	r3, #1
 800080e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000820:	2304      	movs	r3, #4
 8000822:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000824:	23a8      	movs	r3, #168	; 0xa8
 8000826:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000828:	2302      	movs	r3, #2
 800082a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800082c:	2307      	movs	r3, #7
 800082e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 0320 	add.w	r3, r7, #32
 8000834:	4618      	mov	r0, r3
 8000836:	f009 f821 	bl	800987c <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000840:	f000 fb22 	bl	8000e88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	230f      	movs	r3, #15
 8000846:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000848:	2302      	movs	r3, #2
 800084a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000850:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000854:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2105      	movs	r1, #5
 8000862:	4618      	mov	r0, r3
 8000864:	f009 fa7a 	bl	8009d5c <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800086e:	f000 fb0b 	bl	8000e88 <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3750      	adds	r7, #80	; 0x50
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40007000 	.word	0x40007000

08000884 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_CAN1_Init+0x64>)
 800088a:	4a18      	ldr	r2, [pc, #96]	; (80008ec <MX_CAN1_Init+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_CAN1_Init+0x64>)
 8000890:	2203      	movs	r2, #3
 8000892:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_CAN1_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_CAN1_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_CAN1_Init+0x64>)
 80008a2:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80008a6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_CAN1_Init+0x64>)
 80008aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008ae:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008b0:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <MX_CAN1_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_CAN1_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_CAN1_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_CAN1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_CAN1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_CAN1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_CAN1_Init+0x64>)
 80008d6:	f004 f8ed 	bl	8004ab4 <HAL_CAN_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80008e0:	f000 fad2 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	10004f18 	.word	0x10004f18
 80008ec:	40006400 	.word	0x40006400

080008f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_I2C1_Init+0x50>)
 80008f6:	4a13      	ldr	r2, [pc, #76]	; (8000944 <MX_I2C1_Init+0x54>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_I2C1_Init+0x50>)
 80008fc:	4a12      	ldr	r2, [pc, #72]	; (8000948 <MX_I2C1_Init+0x58>)
 80008fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_I2C1_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_I2C1_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_I2C1_Init+0x50>)
 800090e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000912:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <MX_I2C1_Init+0x50>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_I2C1_Init+0x50>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <MX_I2C1_Init+0x50>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_I2C1_Init+0x50>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_I2C1_Init+0x50>)
 800092e:	f005 f9c9 	bl	8005cc4 <HAL_I2C_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000938:	f000 faa6 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	10004a40 	.word	0x10004a40
 8000944:	40005400 	.word	0x40005400
 8000948:	00061a80 	.word	0x00061a80

0800094c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_TIM14_Init+0x40>)
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <MX_TIM14_Init+0x44>)
 8000954:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 168;
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <MX_TIM14_Init+0x40>)
 8000958:	22a8      	movs	r2, #168	; 0xa8
 800095a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_TIM14_Init+0x40>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <MX_TIM14_Init+0x40>)
 8000964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000968:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_TIM14_Init+0x40>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_TIM14_Init+0x40>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_TIM14_Init+0x40>)
 8000978:	f009 fc00 	bl	800a17c <HAL_TIM_Base_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000982:	f000 fa81 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	10004f40 	.word	0x10004f40
 8000990:	40002000 	.word	0x40002000

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MX_GPIO_Init+0x68>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a16      	ldr	r2, [pc, #88]	; (80009fc <MX_GPIO_Init+0x68>)
 80009a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_GPIO_Init+0x68>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MX_GPIO_Init+0x68>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a0f      	ldr	r2, [pc, #60]	; (80009fc <MX_GPIO_Init+0x68>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <MX_GPIO_Init+0x68>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_GPIO_Init+0x68>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a08      	ldr	r2, [pc, #32]	; (80009fc <MX_GPIO_Init+0x68>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_GPIO_Init+0x68>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

}
 80009ee:	bf00      	nop
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800

08000a00 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	can_res++;
 8000a08:	4b6d      	ldr	r3, [pc, #436]	; (8000bc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	4a6c      	ldr	r2, [pc, #432]	; (8000bc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8000a10:	6013      	str	r3, [r2, #0]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can_RxHeader, canRXData);
 8000a12:	4b6c      	ldr	r3, [pc, #432]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a14:	4a6c      	ldr	r2, [pc, #432]	; (8000bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000a16:	2100      	movs	r1, #0
 8000a18:	486c      	ldr	r0, [pc, #432]	; (8000bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000a1a:	f004 fb46 	bl	80050aa <HAL_CAN_GetRxMessage>

	if (can_RxHeader.StdId == 0xA) {
 8000a1e:	4b6a      	ldr	r3, [pc, #424]	; (8000bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b0a      	cmp	r3, #10
 8000a24:	d11c      	bne.n	8000a60 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		speedRXDataLeftFrontWheel = canRXData[0];
 8000a26:	4b67      	ldr	r3, [pc, #412]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	4b69      	ldr	r3, [pc, #420]	; (8000bd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000a2c:	701a      	strb	r2, [r3, #0]
		sideRXDataLeftFrontWheel = canRXData[1];
 8000a2e:	4b65      	ldr	r3, [pc, #404]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a30:	785a      	ldrb	r2, [r3, #1]
 8000a32:	4b68      	ldr	r3, [pc, #416]	; (8000bd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000a34:	701a      	strb	r2, [r3, #0]
		speedRXDataLeftBackWheel = canRXData[2];
 8000a36:	4b63      	ldr	r3, [pc, #396]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a38:	789a      	ldrb	r2, [r3, #2]
 8000a3a:	4b67      	ldr	r3, [pc, #412]	; (8000bd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000a3c:	701a      	strb	r2, [r3, #0]
		sideRXDataLeftBackWheel = canRXData[3];
 8000a3e:	4b61      	ldr	r3, [pc, #388]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a40:	78da      	ldrb	r2, [r3, #3]
 8000a42:	4b66      	ldr	r3, [pc, #408]	; (8000bdc <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 8000a44:	701a      	strb	r2, [r3, #0]
		current_left_1 = canRXData[4];
 8000a46:	4b5f      	ldr	r3, [pc, #380]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a48:	791a      	ldrb	r2, [r3, #4]
 8000a4a:	4b65      	ldr	r3, [pc, #404]	; (8000be0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8000a4c:	701a      	strb	r2, [r3, #0]
		current_left_2 = canRXData[5];
 8000a4e:	4b5d      	ldr	r3, [pc, #372]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a50:	795a      	ldrb	r2, [r3, #5]
 8000a52:	4b64      	ldr	r3, [pc, #400]	; (8000be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000a54:	701a      	strb	r2, [r3, #0]
		temp_left = canRXData[6];
 8000a56:	4b5b      	ldr	r3, [pc, #364]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a58:	799a      	ldrb	r2, [r3, #6]
 8000a5a:	4b63      	ldr	r3, [pc, #396]	; (8000be8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000a5c:	701a      	strb	r2, [r3, #0]
 8000a5e:	e08f      	b.n	8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x1A) {
 8000a60:	4b59      	ldr	r3, [pc, #356]	; (8000bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b1a      	cmp	r3, #26
 8000a66:	d11c      	bne.n	8000aa2 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
		speedRXDataRightFrontWheel = canRXData[0];
 8000a68:	4b56      	ldr	r3, [pc, #344]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	4b5f      	ldr	r3, [pc, #380]	; (8000bec <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000a6e:	701a      	strb	r2, [r3, #0]
		sideRXDataRightFrontWheel = canRXData[1];
 8000a70:	4b54      	ldr	r3, [pc, #336]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a72:	785a      	ldrb	r2, [r3, #1]
 8000a74:	4b5e      	ldr	r3, [pc, #376]	; (8000bf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000a76:	701a      	strb	r2, [r3, #0]
		speedRXDataRightBackWheel = canRXData[2];
 8000a78:	4b52      	ldr	r3, [pc, #328]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a7a:	789a      	ldrb	r2, [r3, #2]
 8000a7c:	4b5d      	ldr	r3, [pc, #372]	; (8000bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8000a7e:	701a      	strb	r2, [r3, #0]
		sideRXDataRightBackWheel = canRXData[3];
 8000a80:	4b50      	ldr	r3, [pc, #320]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a82:	78da      	ldrb	r2, [r3, #3]
 8000a84:	4b5c      	ldr	r3, [pc, #368]	; (8000bf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000a86:	701a      	strb	r2, [r3, #0]
		current_right_1 = canRXData[4];
 8000a88:	4b4e      	ldr	r3, [pc, #312]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a8a:	791a      	ldrb	r2, [r3, #4]
 8000a8c:	4b5b      	ldr	r3, [pc, #364]	; (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000a8e:	701a      	strb	r2, [r3, #0]
		current_right_2 = canRXData[5];
 8000a90:	4b4c      	ldr	r3, [pc, #304]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a92:	795a      	ldrb	r2, [r3, #5]
 8000a94:	4b5a      	ldr	r3, [pc, #360]	; (8000c00 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000a96:	701a      	strb	r2, [r3, #0]
		temp_right = canRXData[6];
 8000a98:	4b4a      	ldr	r3, [pc, #296]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a9a:	799a      	ldrb	r2, [r3, #6]
 8000a9c:	4b59      	ldr	r3, [pc, #356]	; (8000c04 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000a9e:	701a      	strb	r2, [r3, #0]
 8000aa0:	e06e      	b.n	8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x1D) {
 8000aa2:	4b49      	ldr	r3, [pc, #292]	; (8000bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b1d      	cmp	r3, #29
 8000aa8:	d109      	bne.n	8000abe <HAL_CAN_RxFifo0MsgPendingCallback+0xbe>
		sensorData1 = canRXData[0];
 8000aaa:	4b46      	ldr	r3, [pc, #280]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000aac:	781a      	ldrb	r2, [r3, #0]
 8000aae:	4b56      	ldr	r3, [pc, #344]	; (8000c08 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000ab0:	701a      	strb	r2, [r3, #0]
		sensors_data[0]++;
 8000ab2:	4b56      	ldr	r3, [pc, #344]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	4a54      	ldr	r2, [pc, #336]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	e060      	b.n	8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x2D) {
 8000abe:	4b42      	ldr	r3, [pc, #264]	; (8000bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2b2d      	cmp	r3, #45	; 0x2d
 8000ac4:	d109      	bne.n	8000ada <HAL_CAN_RxFifo0MsgPendingCallback+0xda>
		sensorData2 = canRXData[0];
 8000ac6:	4b3f      	ldr	r3, [pc, #252]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000ac8:	781a      	ldrb	r2, [r3, #0]
 8000aca:	4b51      	ldr	r3, [pc, #324]	; (8000c10 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000acc:	701a      	strb	r2, [r3, #0]
		sensors_data[1]++;
 8000ace:	4b4f      	ldr	r3, [pc, #316]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	4a4d      	ldr	r2, [pc, #308]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000ad6:	6053      	str	r3, [r2, #4]
 8000ad8:	e052      	b.n	8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x3D) {
 8000ada:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b3d      	cmp	r3, #61	; 0x3d
 8000ae0:	d109      	bne.n	8000af6 <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
		sensorData3 = canRXData[0];
 8000ae2:	4b38      	ldr	r3, [pc, #224]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000ae4:	781a      	ldrb	r2, [r3, #0]
 8000ae6:	4b4b      	ldr	r3, [pc, #300]	; (8000c14 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8000ae8:	701a      	strb	r2, [r3, #0]
		sensors_data[2]++;
 8000aea:	4b48      	ldr	r3, [pc, #288]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	3301      	adds	r3, #1
 8000af0:	4a46      	ldr	r2, [pc, #280]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000af2:	6093      	str	r3, [r2, #8]
 8000af4:	e044      	b.n	8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x4D) {
 8000af6:	4b34      	ldr	r3, [pc, #208]	; (8000bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b4d      	cmp	r3, #77	; 0x4d
 8000afc:	d109      	bne.n	8000b12 <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
		sensorData4 = canRXData[0];
 8000afe:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000b00:	781a      	ldrb	r2, [r3, #0]
 8000b02:	4b45      	ldr	r3, [pc, #276]	; (8000c18 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8000b04:	701a      	strb	r2, [r3, #0]
		sensors_data[3]++;
 8000b06:	4b41      	ldr	r3, [pc, #260]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	4a3f      	ldr	r2, [pc, #252]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000b0e:	60d3      	str	r3, [r2, #12]
 8000b10:	e036      	b.n	8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x5D) {
 8000b12:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b5d      	cmp	r3, #93	; 0x5d
 8000b18:	d109      	bne.n	8000b2e <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
		sensorData5 = canRXData[0];
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000b1c:	781a      	ldrb	r2, [r3, #0]
 8000b1e:	4b3f      	ldr	r3, [pc, #252]	; (8000c1c <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000b20:	701a      	strb	r2, [r3, #0]
		sensors_data[4]++;
 8000b22:	4b3a      	ldr	r3, [pc, #232]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000b24:	691b      	ldr	r3, [r3, #16]
 8000b26:	3301      	adds	r3, #1
 8000b28:	4a38      	ldr	r2, [pc, #224]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000b2a:	6113      	str	r3, [r2, #16]
 8000b2c:	e028      	b.n	8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x6D) {
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b6d      	cmp	r3, #109	; 0x6d
 8000b34:	d109      	bne.n	8000b4a <HAL_CAN_RxFifo0MsgPendingCallback+0x14a>
		sensorData6 = canRXData[0];
 8000b36:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000b38:	781a      	ldrb	r2, [r3, #0]
 8000b3a:	4b39      	ldr	r3, [pc, #228]	; (8000c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000b3c:	701a      	strb	r2, [r3, #0]
		sensors_data[5]++;
 8000b3e:	4b33      	ldr	r3, [pc, #204]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	3301      	adds	r3, #1
 8000b44:	4a31      	ldr	r2, [pc, #196]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000b46:	6153      	str	r3, [r2, #20]
 8000b48:	e01a      	b.n	8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x7D) {
 8000b4a:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b7d      	cmp	r3, #125	; 0x7d
 8000b50:	d109      	bne.n	8000b66 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
		sensorData7 = canRXData[0];
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000b54:	781a      	ldrb	r2, [r3, #0]
 8000b56:	4b33      	ldr	r3, [pc, #204]	; (8000c24 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8000b58:	701a      	strb	r2, [r3, #0]
		sensors_data[6]++;
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	4a2a      	ldr	r2, [pc, #168]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	e00c      	b.n	8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x8D) {
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b8d      	cmp	r3, #141	; 0x8d
 8000b6c:	d108      	bne.n	8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
		sensorData8 = canRXData[0];
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	4b2d      	ldr	r3, [pc, #180]	; (8000c28 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8000b74:	701a      	strb	r2, [r3, #0]
		sensors_data[7]++;
 8000b76:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	4a23      	ldr	r2, [pc, #140]	; (8000c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000b7e:	61d3      	str	r3, [r2, #28]
	}
	diagnostics_data[0] = current_left_1;
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8000b82:	781a      	ldrb	r2, [r3, #0]
 8000b84:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000b86:	701a      	strb	r2, [r3, #0]
	diagnostics_data[1] = current_left_2;
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000b8a:	781a      	ldrb	r2, [r3, #0]
 8000b8c:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000b8e:	705a      	strb	r2, [r3, #1]
	diagnostics_data[2] = current_right_1;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000b92:	781a      	ldrb	r2, [r3, #0]
 8000b94:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000b96:	709a      	strb	r2, [r3, #2]
	diagnostics_data[3] = current_right_2;
 8000b98:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000b9a:	781a      	ldrb	r2, [r3, #0]
 8000b9c:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000b9e:	70da      	strb	r2, [r3, #3]
	diagnostics_data[4] = temp_left;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000ba2:	781a      	ldrb	r2, [r3, #0]
 8000ba4:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000ba6:	711a      	strb	r2, [r3, #4]
	diagnostics_data[5] = temp_right;
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000baa:	781a      	ldrb	r2, [r3, #0]
 8000bac:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000bae:	715a      	strb	r2, [r3, #5]
	can_RxHeader.StdId = 0x0000;
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	10000470 	.word	0x10000470
 8000bc4:	10004ecc 	.word	0x10004ecc
 8000bc8:	10004f88 	.word	0x10004f88
 8000bcc:	10004f18 	.word	0x10004f18
 8000bd0:	10004aa8 	.word	0x10004aa8
 8000bd4:	10004f0c 	.word	0x10004f0c
 8000bd8:	10004ab0 	.word	0x10004ab0
 8000bdc:	10004ac0 	.word	0x10004ac0
 8000be0:	1000048a 	.word	0x1000048a
 8000be4:	1000048b 	.word	0x1000048b
 8000be8:	1000048d 	.word	0x1000048d
 8000bec:	10004f15 	.word	0x10004f15
 8000bf0:	10004ef0 	.word	0x10004ef0
 8000bf4:	10004ac8 	.word	0x10004ac8
 8000bf8:	10004a18 	.word	0x10004a18
 8000bfc:	10000488 	.word	0x10000488
 8000c00:	10000489 	.word	0x10000489
 8000c04:	1000048c 	.word	0x1000048c
 8000c08:	10000480 	.word	0x10000480
 8000c0c:	10004fa4 	.word	0x10004fa4
 8000c10:	10000481 	.word	0x10000481
 8000c14:	10000482 	.word	0x10000482
 8000c18:	10000483 	.word	0x10000483
 8000c1c:	10000484 	.word	0x10000484
 8000c20:	10000485 	.word	0x10000485
 8000c24:	10000486 	.word	0x10000486
 8000c28:	10000487 	.word	0x10000487
 8000c2c:	10000490 	.word	0x10000490

08000c30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c38:	f00e f82a 	bl	800ec90 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 2;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	60fb      	str	r3, [r7, #12]
  xLastWakeTime = xTaskGetTickCount();
 8000c40:	f00d f9d4 	bl	800dfec <xTaskGetTickCount>
 8000c44:	4603      	mov	r3, r0
 8000c46:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
      vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	68f9      	ldr	r1, [r7, #12]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f00c fef6 	bl	800da40 <vTaskDelayUntil>
	  gyro_handler();
 8000c54:	f002 fe40 	bl	80038d8 <gyro_handler>
	  delay_us(100);
 8000c58:	2064      	movs	r0, #100	; 0x64
 8000c5a:	f7ff fc97 	bl	800058c <delay_us>
	  //osDelay(1);
	  accel_handler();
 8000c5e:	f002 fe61 	bl	8003924 <accel_handler>
	  delay_us(100);
 8000c62:	2064      	movs	r0, #100	; 0x64
 8000c64:	f7ff fc92 	bl	800058c <delay_us>
	  osDelay(1);
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f00c fc7b 	bl	800d564 <osDelay>
	  imu_pub_count++;
 8000c6e:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <StartDefaultTask+0x4c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	3301      	adds	r3, #1
 8000c74:	4a01      	ldr	r2, [pc, #4]	; (8000c7c <StartDefaultTask+0x4c>)
 8000c76:	6013      	str	r3, [r2, #0]
      vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000c78:	e7e6      	b.n	8000c48 <StartDefaultTask+0x18>
 8000c7a:	bf00      	nop
 8000c7c:	100004c4 	.word	0x100004c4

08000c80 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 2;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	60fb      	str	r3, [r7, #12]
  xLastWakeTime = xTaskGetTickCount();
 8000c8c:	f00d f9ae 	bl	800dfec <xTaskGetTickCount>
 8000c90:	4603      	mov	r3, r0
 8000c92:	60bb      	str	r3, [r7, #8]
  I2C1->CR2 |= 0x1U << 8;
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <StartTask02+0x44>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <StartTask02+0x44>)
 8000c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9e:	6053      	str	r3, [r2, #4]
  /* Infinite loop */
  for(;;)
  {
      vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	68f9      	ldr	r1, [r7, #12]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f00c feca 	bl	800da40 <vTaskDelayUntil>
	  MPU9250_getAllData(allData);
 8000cac:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <StartTask02+0x48>)
 8000cae:	f000 fb2d 	bl	800130c <MPU9250_getAllData>
	  imu_get_count++;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <StartTask02+0x4c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <StartTask02+0x4c>)
 8000cba:	6013      	str	r3, [r2, #0]
	  osDelay(1);
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f00c fc51 	bl	800d564 <osDelay>
      vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000cc2:	e7ed      	b.n	8000ca0 <StartTask02+0x20>
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	10004f00 	.word	0x10004f00
 8000ccc:	100004c8 	.word	0x100004c8

08000cd0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 10;
 8000cd8:	230a      	movs	r3, #10
 8000cda:	60fb      	str	r3, [r7, #12]
  xLastWakeTime = xTaskGetTickCount();
 8000cdc:	f00d f986 	bl	800dfec <xTaskGetTickCount>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
      vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000ce4:	f107 0308 	add.w	r3, r7, #8
 8000ce8:	68f9      	ldr	r1, [r7, #12]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f00c fea8 	bl	800da40 <vTaskDelayUntil>
	  left_wheels_data[0] = sideDataLeftFrontWheel;
 8000cf0:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <StartTask03+0xb8>)
 8000cf2:	f993 3000 	ldrsb.w	r3, [r3]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <StartTask03+0xbc>)
 8000cfa:	701a      	strb	r2, [r3, #0]
	  left_wheels_data[1] = speedDataLeftFrontWheel;
 8000cfc:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <StartTask03+0xc0>)
 8000cfe:	f993 3000 	ldrsb.w	r3, [r3]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <StartTask03+0xbc>)
 8000d06:	705a      	strb	r2, [r3, #1]
	  left_wheels_data[2] = sideDataLeftBackWheel;
 8000d08:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <StartTask03+0xc4>)
 8000d0a:	f993 3000 	ldrsb.w	r3, [r3]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <StartTask03+0xbc>)
 8000d12:	709a      	strb	r2, [r3, #2]
	  left_wheels_data[3] = speedDataLeftBackWheel;
 8000d14:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <StartTask03+0xc8>)
 8000d16:	f993 3000 	ldrsb.w	r3, [r3]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <StartTask03+0xbc>)
 8000d1e:	70da      	strb	r2, [r3, #3]
	  right_wheels_data[0] = sideDataRightFrontWheel;
 8000d20:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <StartTask03+0xcc>)
 8000d22:	f993 3000 	ldrsb.w	r3, [r3]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <StartTask03+0xd0>)
 8000d2a:	701a      	strb	r2, [r3, #0]
	  right_wheels_data[1] = speedDataRightFrontWheel;
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <StartTask03+0xd4>)
 8000d2e:	f993 3000 	ldrsb.w	r3, [r3]
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <StartTask03+0xd0>)
 8000d36:	705a      	strb	r2, [r3, #1]
	  right_wheels_data[2] = sideDataRightBackWheel;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <StartTask03+0xd8>)
 8000d3a:	f993 3000 	ldrsb.w	r3, [r3]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <StartTask03+0xd0>)
 8000d42:	709a      	strb	r2, [r3, #2]
	  right_wheels_data[3] = speedDataRightBackWheel;
 8000d44:	4b19      	ldr	r3, [pc, #100]	; (8000dac <StartTask03+0xdc>)
 8000d46:	f993 3000 	ldrsb.w	r3, [r3]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <StartTask03+0xd0>)
 8000d4e:	70da      	strb	r2, [r3, #3]
	  if( HAL_CAN_AddTxMessage(&hcan1, &left_wheels_Header, left_wheels_data, &TxMailbox) == HAL_OK) {
 8000d50:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <StartTask03+0xe0>)
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <StartTask03+0xbc>)
 8000d54:	4917      	ldr	r1, [pc, #92]	; (8000db4 <StartTask03+0xe4>)
 8000d56:	4818      	ldr	r0, [pc, #96]	; (8000db8 <StartTask03+0xe8>)
 8000d58:	f004 f8cc 	bl	8004ef4 <HAL_CAN_AddTxMessage>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d104      	bne.n	8000d6c <StartTask03+0x9c>
		  can2++;
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <StartTask03+0xec>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	3301      	adds	r3, #1
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <StartTask03+0xec>)
 8000d6a:	6013      	str	r3, [r2, #0]
	  }
	  delay_us(100);
 8000d6c:	2064      	movs	r0, #100	; 0x64
 8000d6e:	f7ff fc0d 	bl	800058c <delay_us>
	  //osDelay(1);
	  HAL_CAN_AddTxMessage(&hcan1, &right_wheels_Header, right_wheels_data, &TxMailbox);
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <StartTask03+0xe0>)
 8000d74:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <StartTask03+0xd0>)
 8000d76:	4912      	ldr	r1, [pc, #72]	; (8000dc0 <StartTask03+0xf0>)
 8000d78:	480f      	ldr	r0, [pc, #60]	; (8000db8 <StartTask03+0xe8>)
 8000d7a:	f004 f8bb 	bl	8004ef4 <HAL_CAN_AddTxMessage>
	  delay_us(100);
 8000d7e:	2064      	movs	r0, #100	; 0x64
 8000d80:	f7ff fc04 	bl	800058c <delay_us>
      vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000d84:	e7ae      	b.n	8000ce4 <StartTask03+0x14>
 8000d86:	bf00      	nop
 8000d88:	1000047d 	.word	0x1000047d
 8000d8c:	10000498 	.word	0x10000498
 8000d90:	10000479 	.word	0x10000479
 8000d94:	1000047f 	.word	0x1000047f
 8000d98:	1000047b 	.word	0x1000047b
 8000d9c:	1000047c 	.word	0x1000047c
 8000da0:	1000049c 	.word	0x1000049c
 8000da4:	10000478 	.word	0x10000478
 8000da8:	1000047e 	.word	0x1000047e
 8000dac:	1000047a 	.word	0x1000047a
 8000db0:	10004ef4 	.word	0x10004ef4
 8000db4:	10004a1c 	.word	0x10004a1c
 8000db8:	10004f18 	.word	0x10004f18
 8000dbc:	10004a94 	.word	0x10004a94
 8000dc0:	10004ed8 	.word	0x10004ed8

08000dc4 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 20;
 8000dcc:	2314      	movs	r3, #20
 8000dce:	60fb      	str	r3, [r7, #12]
  xLastWakeTime = xTaskGetTickCount();
 8000dd0:	f00d f90c 	bl	800dfec <xTaskGetTickCount>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  //diagnostics_data_handler();
      vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	68f9      	ldr	r1, [r7, #12]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f00c fe2e 	bl	800da40 <vTaskDelayUntil>
	  sensors1_3_data_handler();
 8000de4:	f002 fc54 	bl	8003690 <sensors1_3_data_handler>
	  delay_us(100);
 8000de8:	2064      	movs	r0, #100	; 0x64
 8000dea:	f7ff fbcf 	bl	800058c <delay_us>
	  //osDelay(4);
	  sensors4_6_data_handler();
 8000dee:	f002 fc7d 	bl	80036ec <sensors4_6_data_handler>
	  delay_us(100);
 8000df2:	2064      	movs	r0, #100	; 0x64
 8000df4:	f7ff fbca 	bl	800058c <delay_us>
      vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000df8:	e7ee      	b.n	8000dd8 <StartTask04+0x14>

08000dfa <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
	  spinOnce();
 8000e02:	f002 fdb5 	bl	8003970 <spinOnce>
	  osDelay(10);
 8000e06:	200a      	movs	r0, #10
 8000e08:	f00c fbac 	bl	800d564 <osDelay>
	  spinOnce();
 8000e0c:	e7f9      	b.n	8000e02 <StartTask05+0x8>

08000e0e <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void const * argument)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b084      	sub	sp, #16
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 20;
 8000e16:	2314      	movs	r3, #20
 8000e18:	60fb      	str	r3, [r7, #12]
  xLastWakeTime = xTaskGetTickCount();
 8000e1a:	f00d f8e7 	bl	800dfec <xTaskGetTickCount>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	68f9      	ldr	r1, [r7, #12]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f00c fe09 	bl	800da40 <vTaskDelayUntil>
	  rpm_left_front_handler();
 8000e2e:	f002 fcbd 	bl	80037ac <rpm_left_front_handler>
	  delay_us(100);
 8000e32:	2064      	movs	r0, #100	; 0x64
 8000e34:	f7ff fbaa 	bl	800058c <delay_us>
	  //osDelay(1);
	  rpm_left_back_handler();
 8000e38:	f002 fd1c 	bl	8003874 <rpm_left_back_handler>
	  delay_us(100);
 8000e3c:	2064      	movs	r0, #100	; 0x64
 8000e3e:	f7ff fba5 	bl	800058c <delay_us>
	  //osDelay(1);
	  rpm_right_front_handler();
 8000e42:	f002 fc81 	bl	8003748 <rpm_right_front_handler>
	  delay_us(100);
 8000e46:	2064      	movs	r0, #100	; 0x64
 8000e48:	f7ff fba0 	bl	800058c <delay_us>
	  //osDelay(1);
	  rpm_right_back_handler();
 8000e4c:	f002 fce0 	bl	8003810 <rpm_right_back_handler>
	  delay_us(100);
 8000e50:	2064      	movs	r0, #100	; 0x64
 8000e52:	f7ff fb9b 	bl	800058c <delay_us>
	  vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000e56:	e7e4      	b.n	8000e22 <StartTask06+0x14>

08000e58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  ++tick;
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	3301      	adds	r3, #1
 8000e66:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e68:	6013      	str	r3, [r2, #0]
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d101      	bne.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x20>
    HAL_IncTick();
 8000e74:	f003 fddc 	bl	8004a30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	10000474 	.word	0x10000474
 8000e84:	40000400 	.word	0x40000400

08000e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <MPU9250_init>:
	ctrl = sensor_io_read(0x68, 0x75);
	return ctrl;
}

void MPU9250_init(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0
	//power up gyro
	MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	216b      	movs	r1, #107	; 0x6b
 8000e9e:	2068      	movs	r0, #104	; 0x68
 8000ea0:	f000 fb24 	bl	80014ec <MPU9250_writeReg>
	//delay(100);
	MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	216b      	movs	r1, #107	; 0x6b
 8000ea8:	2068      	movs	r0, #104	; 0x68
 8000eaa:	f000 fb1f 	bl	80014ec <MPU9250_writeReg>

	MPU9250_writeReg(MPU9250_ADDRESS, CONFIG, 0x03);
 8000eae:	2203      	movs	r2, #3
 8000eb0:	211a      	movs	r1, #26
 8000eb2:	2068      	movs	r0, #104	; 0x68
 8000eb4:	f000 fb1a 	bl	80014ec <MPU9250_writeReg>

	MPU9250_writeReg(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);
 8000eb8:	2204      	movs	r2, #4
 8000eba:	2119      	movs	r1, #25
 8000ebc:	2068      	movs	r0, #104	; 0x68
 8000ebe:	f000 fb15 	bl	80014ec <MPU9250_writeReg>
	//MPU6050_SMPLRT_DIV
	//gyro config 500

	MPU9250_writeReg(MPU9250_ADDRESS, GYRO_CONFIG, 0x08);
 8000ec2:	2208      	movs	r2, #8
 8000ec4:	211b      	movs	r1, #27
 8000ec6:	2068      	movs	r0, #104	; 0x68
 8000ec8:	f000 fb10 	bl	80014ec <MPU9250_writeReg>
	//accel config 8g
	MPU9250_writeReg(MPU9250_ADDRESS, ACCEL_CONFIG, 0x10);
 8000ecc:	2210      	movs	r2, #16
 8000ece:	211c      	movs	r1, #28
 8000ed0:	2068      	movs	r0, #104	; 0x68
 8000ed2:	f000 fb0b 	bl	80014ec <MPU9250_writeReg>

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <MPU9250_calibrate>:

//void calibrateMPU9250(float * dest1, float * dest2)
void MPU9250_calibrate()
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
    uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
    uint16_t ii, packet_count, fifo_count;
    //int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};

    // reset device
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	216b      	movs	r1, #107	; 0x6b
 8000ee6:	2068      	movs	r0, #104	; 0x68
 8000ee8:	f000 fb00 	bl	80014ec <MPU9250_writeReg>
    HAL_Delay(100);
 8000eec:	2064      	movs	r0, #100	; 0x64
 8000eee:	f003 fdbf 	bl	8004a70 <HAL_Delay>

    // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
    // else use the internal oscillator, bits 2:0 = 001
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	216b      	movs	r1, #107	; 0x6b
 8000ef6:	2068      	movs	r0, #104	; 0x68
 8000ef8:	f000 faf8 	bl	80014ec <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 8000efc:	2200      	movs	r2, #0
 8000efe:	216c      	movs	r1, #108	; 0x6c
 8000f00:	2068      	movs	r0, #104	; 0x68
 8000f02:	f000 faf3 	bl	80014ec <MPU9250_writeReg>
    HAL_Delay(200);
 8000f06:	20c8      	movs	r0, #200	; 0xc8
 8000f08:	f003 fdb2 	bl	8004a70 <HAL_Delay>

    // Configure device for bias calculation
    MPU9250_writeReg(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2138      	movs	r1, #56	; 0x38
 8000f10:	2068      	movs	r0, #104	; 0x68
 8000f12:	f000 faeb 	bl	80014ec <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 8000f16:	2200      	movs	r2, #0
 8000f18:	2123      	movs	r1, #35	; 0x23
 8000f1a:	2068      	movs	r0, #104	; 0x68
 8000f1c:	f000 fae6 	bl	80014ec <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8000f20:	2200      	movs	r2, #0
 8000f22:	216b      	movs	r1, #107	; 0x6b
 8000f24:	2068      	movs	r0, #104	; 0x68
 8000f26:	f000 fae1 	bl	80014ec <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2124      	movs	r1, #36	; 0x24
 8000f2e:	2068      	movs	r0, #104	; 0x68
 8000f30:	f000 fadc 	bl	80014ec <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8000f34:	2200      	movs	r2, #0
 8000f36:	216a      	movs	r1, #106	; 0x6a
 8000f38:	2068      	movs	r0, #104	; 0x68
 8000f3a:	f000 fad7 	bl	80014ec <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8000f3e:	220c      	movs	r2, #12
 8000f40:	216a      	movs	r1, #106	; 0x6a
 8000f42:	2068      	movs	r0, #104	; 0x68
 8000f44:	f000 fad2 	bl	80014ec <MPU9250_writeReg>
    HAL_Delay(15);
 8000f48:	200f      	movs	r0, #15
 8000f4a:	f003 fd91 	bl	8004a70 <HAL_Delay>

    // Configure MPU6050 gyro and accelerometer for bias calculation
    MPU9250_writeReg(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8000f4e:	2201      	movs	r2, #1
 8000f50:	211a      	movs	r1, #26
 8000f52:	2068      	movs	r0, #104	; 0x68
 8000f54:	f000 faca 	bl	80014ec <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2119      	movs	r1, #25
 8000f5c:	2068      	movs	r0, #104	; 0x68
 8000f5e:	f000 fac5 	bl	80014ec <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8000f62:	2200      	movs	r2, #0
 8000f64:	211b      	movs	r1, #27
 8000f66:	2068      	movs	r0, #104	; 0x68
 8000f68:	f000 fac0 	bl	80014ec <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	211c      	movs	r1, #28
 8000f70:	2068      	movs	r0, #104	; 0x68
 8000f72:	f000 fabb 	bl	80014ec <MPU9250_writeReg>

    //uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
    uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8000f76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f7a:	84bb      	strh	r3, [r7, #36]	; 0x24

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
    MPU9250_writeReg(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 8000f7c:	2240      	movs	r2, #64	; 0x40
 8000f7e:	216a      	movs	r1, #106	; 0x6a
 8000f80:	2068      	movs	r0, #104	; 0x68
 8000f82:	f000 fab3 	bl	80014ec <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8000f86:	2278      	movs	r2, #120	; 0x78
 8000f88:	2123      	movs	r1, #35	; 0x23
 8000f8a:	2068      	movs	r0, #104	; 0x68
 8000f8c:	f000 faae 	bl	80014ec <MPU9250_writeReg>
    HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8000f90:	2028      	movs	r0, #40	; 0x28
 8000f92:	f003 fd6d 	bl	8004a70 <HAL_Delay>

    // At end of sample accumulation, turn off FIFO sensor read
    MPU9250_writeReg(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8000f96:	2200      	movs	r2, #0
 8000f98:	2123      	movs	r1, #35	; 0x23
 8000f9a:	2068      	movs	r0, #104	; 0x68
 8000f9c:	f000 faa6 	bl	80014ec <MPU9250_writeReg>
    //readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
    fifo_count = MPU9250_readReg16Bit(MPU9250_ADDRESS, FIFO_COUNTH);
 8000fa0:	2172      	movs	r1, #114	; 0x72
 8000fa2:	2068      	movs	r0, #104	; 0x68
 8000fa4:	f000 fae2 	bl	800156c <MPU9250_readReg16Bit>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	847b      	strh	r3, [r7, #34]	; 0x22
    packet_count = fifo_count / 12;// How many sets of full gyro and accelerometer data for averaging
 8000fac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000fae:	4a58      	ldr	r2, [pc, #352]	; (8001110 <MPU9250_calibrate+0x234>)
 8000fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb4:	08db      	lsrs	r3, r3, #3
 8000fb6:	843b      	strh	r3, [r7, #32]

    for (ii = 0; ii < packet_count; ii++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000fbc:	e06f      	b.n	800109e <MPU9250_calibrate+0x1c2>
    {
        int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	813b      	strh	r3, [r7, #8]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	817b      	strh	r3, [r7, #10]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	81bb      	strh	r3, [r7, #12]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	803b      	strh	r3, [r7, #0]
 8000fce:	2300      	movs	r3, #0
 8000fd0:	807b      	strh	r3, [r7, #2]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	80bb      	strh	r3, [r7, #4]
        MPU9250_readMulti(MPU9250_ADDRESS, FIFO_R_W, data, 12); // read data for averaging
 8000fd6:	f107 0214 	add.w	r2, r7, #20
 8000fda:	230c      	movs	r3, #12
 8000fdc:	2174      	movs	r1, #116	; 0x74
 8000fde:	2068      	movs	r0, #104	; 0x68
 8000fe0:	f000 fae4 	bl	80015ac <MPU9250_readMulti>
        accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8000fe4:	7d3b      	ldrb	r3, [r7, #20]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	7d7b      	ldrb	r3, [r7, #21]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	813b      	strh	r3, [r7, #8]
        accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8000ff4:	7dbb      	ldrb	r3, [r7, #22]
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	7dfb      	ldrb	r3, [r7, #23]
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21b      	sxth	r3, r3
 8001002:	817b      	strh	r3, [r7, #10]
        accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8001004:	7e3b      	ldrb	r3, [r7, #24]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b21a      	sxth	r2, r3
 800100a:	7e7b      	ldrb	r3, [r7, #25]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21b      	sxth	r3, r3
 8001012:	81bb      	strh	r3, [r7, #12]
        gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8001014:	7ebb      	ldrb	r3, [r7, #26]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21a      	sxth	r2, r3
 800101a:	7efb      	ldrb	r3, [r7, #27]
 800101c:	b21b      	sxth	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b21b      	sxth	r3, r3
 8001022:	803b      	strh	r3, [r7, #0]
        gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8001024:	7f3b      	ldrb	r3, [r7, #28]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21a      	sxth	r2, r3
 800102a:	7f7b      	ldrb	r3, [r7, #29]
 800102c:	b21b      	sxth	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	b21b      	sxth	r3, r3
 8001032:	807b      	strh	r3, [r7, #2]
        gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001034:	7fbb      	ldrb	r3, [r7, #30]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	7ffb      	ldrb	r3, [r7, #31]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21b      	sxth	r3, r3
 8001042:	80bb      	strh	r3, [r7, #4]

        accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001044:	4b33      	ldr	r3, [pc, #204]	; (8001114 <MPU9250_calibrate+0x238>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800104c:	4413      	add	r3, r2
 800104e:	4a31      	ldr	r2, [pc, #196]	; (8001114 <MPU9250_calibrate+0x238>)
 8001050:	6013      	str	r3, [r2, #0]
        accel_bias[1] += (int32_t) accel_temp[1];
 8001052:	4b30      	ldr	r3, [pc, #192]	; (8001114 <MPU9250_calibrate+0x238>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800105a:	4413      	add	r3, r2
 800105c:	4a2d      	ldr	r2, [pc, #180]	; (8001114 <MPU9250_calibrate+0x238>)
 800105e:	6053      	str	r3, [r2, #4]
        accel_bias[2] += (int32_t) accel_temp[2];
 8001060:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <MPU9250_calibrate+0x238>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001068:	4413      	add	r3, r2
 800106a:	4a2a      	ldr	r2, [pc, #168]	; (8001114 <MPU9250_calibrate+0x238>)
 800106c:	6093      	str	r3, [r2, #8]
        gyro_bias[0]  += (int32_t) gyro_temp[0];
 800106e:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <MPU9250_calibrate+0x23c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001076:	4413      	add	r3, r2
 8001078:	4a27      	ldr	r2, [pc, #156]	; (8001118 <MPU9250_calibrate+0x23c>)
 800107a:	6013      	str	r3, [r2, #0]
        gyro_bias[1]  += (int32_t) gyro_temp[1];
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <MPU9250_calibrate+0x23c>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001084:	4413      	add	r3, r2
 8001086:	4a24      	ldr	r2, [pc, #144]	; (8001118 <MPU9250_calibrate+0x23c>)
 8001088:	6053      	str	r3, [r2, #4]
        gyro_bias[2]  += (int32_t) gyro_temp[2];
 800108a:	4b23      	ldr	r3, [pc, #140]	; (8001118 <MPU9250_calibrate+0x23c>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001092:	4413      	add	r3, r2
 8001094:	4a20      	ldr	r2, [pc, #128]	; (8001118 <MPU9250_calibrate+0x23c>)
 8001096:	6093      	str	r3, [r2, #8]
    for (ii = 0; ii < packet_count; ii++)
 8001098:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800109a:	3301      	adds	r3, #1
 800109c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800109e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010a0:	8c3b      	ldrh	r3, [r7, #32]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d38b      	bcc.n	8000fbe <MPU9250_calibrate+0xe2>
    }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 80010a6:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <MPU9250_calibrate+0x238>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	8c3b      	ldrh	r3, [r7, #32]
 80010ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80010b0:	4a18      	ldr	r2, [pc, #96]	; (8001114 <MPU9250_calibrate+0x238>)
 80010b2:	6013      	str	r3, [r2, #0]
    accel_bias[1] /= (int32_t) packet_count;
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MPU9250_calibrate+0x238>)
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	8c3b      	ldrh	r3, [r7, #32]
 80010ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80010be:	4a15      	ldr	r2, [pc, #84]	; (8001114 <MPU9250_calibrate+0x238>)
 80010c0:	6053      	str	r3, [r2, #4]
    accel_bias[2] /= (int32_t) packet_count;
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MPU9250_calibrate+0x238>)
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	8c3b      	ldrh	r3, [r7, #32]
 80010c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80010cc:	4a11      	ldr	r2, [pc, #68]	; (8001114 <MPU9250_calibrate+0x238>)
 80010ce:	6093      	str	r3, [r2, #8]
    gyro_bias[0]  /= (int32_t) packet_count;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MPU9250_calibrate+0x23c>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	8c3b      	ldrh	r3, [r7, #32]
 80010d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80010da:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <MPU9250_calibrate+0x23c>)
 80010dc:	6013      	str	r3, [r2, #0]
    gyro_bias[1]  /= (int32_t) packet_count;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MPU9250_calibrate+0x23c>)
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	8c3b      	ldrh	r3, [r7, #32]
 80010e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80010e8:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <MPU9250_calibrate+0x23c>)
 80010ea:	6053      	str	r3, [r2, #4]
    gyro_bias[2]  /= (int32_t) packet_count;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <MPU9250_calibrate+0x23c>)
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	8c3b      	ldrh	r3, [r7, #32]
 80010f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <MPU9250_calibrate+0x23c>)
 80010f8:	6093      	str	r3, [r2, #8]

    if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MPU9250_calibrate+0x238>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	dd0c      	ble.n	800111c <MPU9250_calibrate+0x240>
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <MPU9250_calibrate+0x238>)
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	4a02      	ldr	r2, [pc, #8]	; (8001114 <MPU9250_calibrate+0x238>)
 800110c:	6093      	str	r3, [r2, #8]
 800110e:	e00b      	b.n	8001128 <MPU9250_calibrate+0x24c>
 8001110:	aaaaaaab 	.word	0xaaaaaaab
 8001114:	100004ac 	.word	0x100004ac
 8001118:	100004a0 	.word	0x100004a0
    else {accel_bias[2] += (int32_t) accelsensitivity;}
 800111c:	4b78      	ldr	r3, [pc, #480]	; (8001300 <MPU9250_calibrate+0x424>)
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001122:	4413      	add	r3, r2
 8001124:	4a76      	ldr	r2, [pc, #472]	; (8001300 <MPU9250_calibrate+0x424>)
 8001126:	6093      	str	r3, [r2, #8]

    // Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
    data[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001128:	4b76      	ldr	r3, [pc, #472]	; (8001304 <MPU9250_calibrate+0x428>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	425b      	negs	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	da00      	bge.n	8001134 <MPU9250_calibrate+0x258>
 8001132:	3303      	adds	r3, #3
 8001134:	109b      	asrs	r3, r3, #2
 8001136:	121b      	asrs	r3, r3, #8
 8001138:	b2db      	uxtb	r3, r3
 800113a:	753b      	strb	r3, [r7, #20]
    data[1] = (-gyro_bias[0] / 4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 800113c:	4b71      	ldr	r3, [pc, #452]	; (8001304 <MPU9250_calibrate+0x428>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	425b      	negs	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	da00      	bge.n	8001148 <MPU9250_calibrate+0x26c>
 8001146:	3303      	adds	r3, #3
 8001148:	109b      	asrs	r3, r3, #2
 800114a:	b2db      	uxtb	r3, r3
 800114c:	757b      	strb	r3, [r7, #21]
    data[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 800114e:	4b6d      	ldr	r3, [pc, #436]	; (8001304 <MPU9250_calibrate+0x428>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	425b      	negs	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	da00      	bge.n	800115a <MPU9250_calibrate+0x27e>
 8001158:	3303      	adds	r3, #3
 800115a:	109b      	asrs	r3, r3, #2
 800115c:	121b      	asrs	r3, r3, #8
 800115e:	b2db      	uxtb	r3, r3
 8001160:	75bb      	strb	r3, [r7, #22]
    data[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8001162:	4b68      	ldr	r3, [pc, #416]	; (8001304 <MPU9250_calibrate+0x428>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	425b      	negs	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	da00      	bge.n	800116e <MPU9250_calibrate+0x292>
 800116c:	3303      	adds	r3, #3
 800116e:	109b      	asrs	r3, r3, #2
 8001170:	b2db      	uxtb	r3, r3
 8001172:	75fb      	strb	r3, [r7, #23]
    data[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8001174:	4b63      	ldr	r3, [pc, #396]	; (8001304 <MPU9250_calibrate+0x428>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	425b      	negs	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	da00      	bge.n	8001180 <MPU9250_calibrate+0x2a4>
 800117e:	3303      	adds	r3, #3
 8001180:	109b      	asrs	r3, r3, #2
 8001182:	121b      	asrs	r3, r3, #8
 8001184:	b2db      	uxtb	r3, r3
 8001186:	763b      	strb	r3, [r7, #24]
    data[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8001188:	4b5e      	ldr	r3, [pc, #376]	; (8001304 <MPU9250_calibrate+0x428>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	425b      	negs	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	da00      	bge.n	8001194 <MPU9250_calibrate+0x2b8>
 8001192:	3303      	adds	r3, #3
 8001194:	109b      	asrs	r3, r3, #2
 8001196:	b2db      	uxtb	r3, r3
 8001198:	767b      	strb	r3, [r7, #25]

    // Push gyro biases to hardware registers
    MPU9250_writeReg(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 800119a:	7d3b      	ldrb	r3, [r7, #20]
 800119c:	461a      	mov	r2, r3
 800119e:	2113      	movs	r1, #19
 80011a0:	2068      	movs	r0, #104	; 0x68
 80011a2:	f000 f9a3 	bl	80014ec <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 80011a6:	7d7b      	ldrb	r3, [r7, #21]
 80011a8:	461a      	mov	r2, r3
 80011aa:	2114      	movs	r1, #20
 80011ac:	2068      	movs	r0, #104	; 0x68
 80011ae:	f000 f99d 	bl	80014ec <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 80011b2:	7dbb      	ldrb	r3, [r7, #22]
 80011b4:	461a      	mov	r2, r3
 80011b6:	2115      	movs	r1, #21
 80011b8:	2068      	movs	r0, #104	; 0x68
 80011ba:	f000 f997 	bl	80014ec <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 80011be:	7dfb      	ldrb	r3, [r7, #23]
 80011c0:	461a      	mov	r2, r3
 80011c2:	2116      	movs	r1, #22
 80011c4:	2068      	movs	r0, #104	; 0x68
 80011c6:	f000 f991 	bl	80014ec <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 80011ca:	7e3b      	ldrb	r3, [r7, #24]
 80011cc:	461a      	mov	r2, r3
 80011ce:	2117      	movs	r1, #23
 80011d0:	2068      	movs	r0, #104	; 0x68
 80011d2:	f000 f98b 	bl	80014ec <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 80011d6:	7e7b      	ldrb	r3, [r7, #25]
 80011d8:	461a      	mov	r2, r3
 80011da:	2118      	movs	r1, #24
 80011dc:	2068      	movs	r0, #104	; 0x68
 80011de:	f000 f985 	bl	80014ec <MPU9250_writeReg>
    // the accelerometer biases calculated above must be divided by 8.


     //int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
     //readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
    data[0] = MPU9250_readReg(MPU9250_ADDRESS, XA_OFFSET_H);
 80011e2:	2177      	movs	r1, #119	; 0x77
 80011e4:	2068      	movs	r0, #104	; 0x68
 80011e6:	f000 f9a1 	bl	800152c <MPU9250_readReg>
 80011ea:	4603      	mov	r3, r0
 80011ec:	753b      	strb	r3, [r7, #20]
    data[1] = MPU9250_readReg(MPU9250_ADDRESS, XA_OFFSET_L);
 80011ee:	2178      	movs	r1, #120	; 0x78
 80011f0:	2068      	movs	r0, #104	; 0x68
 80011f2:	f000 f99b 	bl	800152c <MPU9250_readReg>
 80011f6:	4603      	mov	r3, r0
 80011f8:	757b      	strb	r3, [r7, #21]
    data[2] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_H);
 80011fa:	217a      	movs	r1, #122	; 0x7a
 80011fc:	2068      	movs	r0, #104	; 0x68
 80011fe:	f000 f995 	bl	800152c <MPU9250_readReg>
 8001202:	4603      	mov	r3, r0
 8001204:	75bb      	strb	r3, [r7, #22]
    data[3] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_L);
 8001206:	217b      	movs	r1, #123	; 0x7b
 8001208:	2068      	movs	r0, #104	; 0x68
 800120a:	f000 f98f 	bl	800152c <MPU9250_readReg>
 800120e:	4603      	mov	r3, r0
 8001210:	75fb      	strb	r3, [r7, #23]
    data[4] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_H);
 8001212:	217d      	movs	r1, #125	; 0x7d
 8001214:	2068      	movs	r0, #104	; 0x68
 8001216:	f000 f989 	bl	800152c <MPU9250_readReg>
 800121a:	4603      	mov	r3, r0
 800121c:	763b      	strb	r3, [r7, #24]
    data[5] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_L);
 800121e:	217e      	movs	r1, #126	; 0x7e
 8001220:	2068      	movs	r0, #104	; 0x68
 8001222:	f000 f983 	bl	800152c <MPU9250_readReg>
 8001226:	4603      	mov	r3, r0
 8001228:	767b      	strb	r3, [r7, #25]
    accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]  );
 800122a:	7d3b      	ldrb	r3, [r7, #20]
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	7d7a      	ldrb	r2, [r7, #21]
 8001230:	4313      	orrs	r3, r2
 8001232:	4a35      	ldr	r2, [pc, #212]	; (8001308 <MPU9250_calibrate+0x42c>)
 8001234:	6013      	str	r3, [r2, #0]
    accel_bias_reg[1] = (int32_t) (((int16_t)data[2] << 8) | data[3]  );
 8001236:	7dbb      	ldrb	r3, [r7, #22]
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	7dfa      	ldrb	r2, [r7, #23]
 800123c:	4313      	orrs	r3, r2
 800123e:	4a32      	ldr	r2, [pc, #200]	; (8001308 <MPU9250_calibrate+0x42c>)
 8001240:	6053      	str	r3, [r2, #4]
    accel_bias_reg[2] = (int32_t) (((int16_t)data[4] << 8) | data[5]  );
 8001242:	7e3b      	ldrb	r3, [r7, #24]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	7e7a      	ldrb	r2, [r7, #25]
 8001248:	4313      	orrs	r3, r2
 800124a:	4a2f      	ldr	r2, [pc, #188]	; (8001308 <MPU9250_calibrate+0x42c>)
 800124c:	6093      	str	r3, [r2, #8]
//     accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
//     readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
//     accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);

     //uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
     uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 800124e:	2300      	movs	r3, #0
 8001250:	743b      	strb	r3, [r7, #16]
 8001252:	2300      	movs	r3, #0
 8001254:	747b      	strb	r3, [r7, #17]
 8001256:	2300      	movs	r3, #0
 8001258:	74bb      	strb	r3, [r7, #18]
    // for(ii = 0; ii < 3; ii++) {
    //     if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
    // }

     // Construct total accelerometer bias, including calculated average accelerometer bias from above
    accel_bias_reg[0] -= (accel_bias[0] / 8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 800125a:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <MPU9250_calibrate+0x42c>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4b28      	ldr	r3, [pc, #160]	; (8001300 <MPU9250_calibrate+0x424>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	da00      	bge.n	8001268 <MPU9250_calibrate+0x38c>
 8001266:	3307      	adds	r3, #7
 8001268:	10db      	asrs	r3, r3, #3
 800126a:	425b      	negs	r3, r3
 800126c:	4413      	add	r3, r2
 800126e:	4a26      	ldr	r2, [pc, #152]	; (8001308 <MPU9250_calibrate+0x42c>)
 8001270:	6013      	str	r3, [r2, #0]
    accel_bias_reg[1] -= (accel_bias[1] / 8);
 8001272:	4b25      	ldr	r3, [pc, #148]	; (8001308 <MPU9250_calibrate+0x42c>)
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	4b22      	ldr	r3, [pc, #136]	; (8001300 <MPU9250_calibrate+0x424>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	da00      	bge.n	8001280 <MPU9250_calibrate+0x3a4>
 800127e:	3307      	adds	r3, #7
 8001280:	10db      	asrs	r3, r3, #3
 8001282:	425b      	negs	r3, r3
 8001284:	4413      	add	r3, r2
 8001286:	4a20      	ldr	r2, [pc, #128]	; (8001308 <MPU9250_calibrate+0x42c>)
 8001288:	6053      	str	r3, [r2, #4]
    accel_bias_reg[2] -= (accel_bias[2] / 8);
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <MPU9250_calibrate+0x42c>)
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MPU9250_calibrate+0x424>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2b00      	cmp	r3, #0
 8001294:	da00      	bge.n	8001298 <MPU9250_calibrate+0x3bc>
 8001296:	3307      	adds	r3, #7
 8001298:	10db      	asrs	r3, r3, #3
 800129a:	425b      	negs	r3, r3
 800129c:	4413      	add	r3, r2
 800129e:	4a1a      	ldr	r2, [pc, #104]	; (8001308 <MPU9250_calibrate+0x42c>)
 80012a0:	6093      	str	r3, [r2, #8]

    data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <MPU9250_calibrate+0x42c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	121b      	asrs	r3, r3, #8
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	753b      	strb	r3, [r7, #20]
    data[1] = (accel_bias_reg[0])      & 0xFF;
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <MPU9250_calibrate+0x42c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	757b      	strb	r3, [r7, #21]
    data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80012b4:	7d7a      	ldrb	r2, [r7, #21]
 80012b6:	7c3b      	ldrb	r3, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	757b      	strb	r3, [r7, #21]
    data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <MPU9250_calibrate+0x42c>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	121b      	asrs	r3, r3, #8
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	75bb      	strb	r3, [r7, #22]
    data[3] = (accel_bias_reg[1])      & 0xFF;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MPU9250_calibrate+0x42c>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	75fb      	strb	r3, [r7, #23]
    data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80012d0:	7dfa      	ldrb	r2, [r7, #23]
 80012d2:	7c7b      	ldrb	r3, [r7, #17]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	75fb      	strb	r3, [r7, #23]
    data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <MPU9250_calibrate+0x42c>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	121b      	asrs	r3, r3, #8
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	763b      	strb	r3, [r7, #24]
    data[5] = (accel_bias_reg[2])      & 0xFF;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <MPU9250_calibrate+0x42c>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	767b      	strb	r3, [r7, #25]
    data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80012ec:	7e7a      	ldrb	r2, [r7, #25]
 80012ee:	7cbb      	ldrb	r3, [r7, #18]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	767b      	strb	r3, [r7, #25]
//     MPU9250_writeReg(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
//     MPU9250_writeReg(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
//     MPU9250_writeReg(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
//     MPU9250_writeReg(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);

}
 80012f6:	bf00      	nop
 80012f8:	3728      	adds	r7, #40	; 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	100004ac 	.word	0x100004ac
 8001304:	100004a0 	.word	0x100004a0
 8001308:	100004b8 	.word	0x100004b8

0800130c <MPU9250_getAllData>:

void MPU9250_getAllData(int16_t *Data)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	uint8_t buffer[12];
	buffer[0] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_XOUT_H);
 8001314:	2143      	movs	r1, #67	; 0x43
 8001316:	2068      	movs	r0, #104	; 0x68
 8001318:	f000 f908 	bl	800152c <MPU9250_readReg>
 800131c:	4603      	mov	r3, r0
 800131e:	733b      	strb	r3, [r7, #12]
	buffer[1] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_XOUT_L);
 8001320:	2144      	movs	r1, #68	; 0x44
 8001322:	2068      	movs	r0, #104	; 0x68
 8001324:	f000 f902 	bl	800152c <MPU9250_readReg>
 8001328:	4603      	mov	r3, r0
 800132a:	737b      	strb	r3, [r7, #13]
	buffer[2] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_YOUT_H);
 800132c:	2145      	movs	r1, #69	; 0x45
 800132e:	2068      	movs	r0, #104	; 0x68
 8001330:	f000 f8fc 	bl	800152c <MPU9250_readReg>
 8001334:	4603      	mov	r3, r0
 8001336:	73bb      	strb	r3, [r7, #14]
	buffer[3] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_YOUT_L);
 8001338:	2146      	movs	r1, #70	; 0x46
 800133a:	2068      	movs	r0, #104	; 0x68
 800133c:	f000 f8f6 	bl	800152c <MPU9250_readReg>
 8001340:	4603      	mov	r3, r0
 8001342:	73fb      	strb	r3, [r7, #15]
	buffer[4] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_ZOUT_H);
 8001344:	2147      	movs	r1, #71	; 0x47
 8001346:	2068      	movs	r0, #104	; 0x68
 8001348:	f000 f8f0 	bl	800152c <MPU9250_readReg>
 800134c:	4603      	mov	r3, r0
 800134e:	743b      	strb	r3, [r7, #16]
	buffer[5] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_ZOUT_L);
 8001350:	2148      	movs	r1, #72	; 0x48
 8001352:	2068      	movs	r0, #104	; 0x68
 8001354:	f000 f8ea 	bl	800152c <MPU9250_readReg>
 8001358:	4603      	mov	r3, r0
 800135a:	747b      	strb	r3, [r7, #17]
	buffer[6] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_XOUT_H);
 800135c:	213b      	movs	r1, #59	; 0x3b
 800135e:	2068      	movs	r0, #104	; 0x68
 8001360:	f000 f8e4 	bl	800152c <MPU9250_readReg>
 8001364:	4603      	mov	r3, r0
 8001366:	74bb      	strb	r3, [r7, #18]
	buffer[7] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_XOUT_L);
 8001368:	213c      	movs	r1, #60	; 0x3c
 800136a:	2068      	movs	r0, #104	; 0x68
 800136c:	f000 f8de 	bl	800152c <MPU9250_readReg>
 8001370:	4603      	mov	r3, r0
 8001372:	74fb      	strb	r3, [r7, #19]
	buffer[8] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_YOUT_H);
 8001374:	213d      	movs	r1, #61	; 0x3d
 8001376:	2068      	movs	r0, #104	; 0x68
 8001378:	f000 f8d8 	bl	800152c <MPU9250_readReg>
 800137c:	4603      	mov	r3, r0
 800137e:	753b      	strb	r3, [r7, #20]
	buffer[9] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_YOUT_L);
 8001380:	213e      	movs	r1, #62	; 0x3e
 8001382:	2068      	movs	r0, #104	; 0x68
 8001384:	f000 f8d2 	bl	800152c <MPU9250_readReg>
 8001388:	4603      	mov	r3, r0
 800138a:	757b      	strb	r3, [r7, #21]
	buffer[10] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_ZOUT_H);
 800138c:	213f      	movs	r1, #63	; 0x3f
 800138e:	2068      	movs	r0, #104	; 0x68
 8001390:	f000 f8cc 	bl	800152c <MPU9250_readReg>
 8001394:	4603      	mov	r3, r0
 8001396:	75bb      	strb	r3, [r7, #22]
	buffer[11] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_ZOUT_L);
 8001398:	2140      	movs	r1, #64	; 0x40
 800139a:	2068      	movs	r0, #104	; 0x68
 800139c:	f000 f8c6 	bl	800152c <MPU9250_readReg>
 80013a0:	4603      	mov	r3, r0
 80013a2:	75fb      	strb	r3, [r7, #23]
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 80013a4:	7b3b      	ldrb	r3, [r7, #12]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	7b7b      	ldrb	r3, [r7, #13]
 80013ae:	4413      	add	r3, r2
 80013b0:	ee07 3a90 	vmov	s15, r3
 80013b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013b8:	eddf 6a41 	vldr	s13, [pc, #260]	; 80014c0 <MPU9250_getAllData+0x1b4>
 80013bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c0:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80014c4 <MPU9250_getAllData+0x1b8>
 80013c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013c8:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80014c8 <MPU9250_getAllData+0x1bc>
 80013cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d0:	4b3e      	ldr	r3, [pc, #248]	; (80014cc <MPU9250_getAllData+0x1c0>)
 80013d2:	edc3 7a00 	vstr	s15, [r3]
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 80013d6:	7bbb      	ldrb	r3, [r7, #14]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	b21b      	sxth	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	4413      	add	r3, r2
 80013e2:	ee07 3a90 	vmov	s15, r3
 80013e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ea:	eddf 6a35 	vldr	s13, [pc, #212]	; 80014c0 <MPU9250_getAllData+0x1b4>
 80013ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80014c4 <MPU9250_getAllData+0x1b8>
 80013f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013fa:	eddf 6a33 	vldr	s13, [pc, #204]	; 80014c8 <MPU9250_getAllData+0x1bc>
 80013fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001402:	4b33      	ldr	r3, [pc, #204]	; (80014d0 <MPU9250_getAllData+0x1c4>)
 8001404:	edc3 7a00 	vstr	s15, [r3]
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 8001408:	7c3b      	ldrb	r3, [r7, #16]
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	b21b      	sxth	r3, r3
 800140e:	461a      	mov	r2, r3
 8001410:	7c7b      	ldrb	r3, [r7, #17]
 8001412:	4413      	add	r3, r2
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800141c:	eddf 6a28 	vldr	s13, [pc, #160]	; 80014c0 <MPU9250_getAllData+0x1b4>
 8001420:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001424:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80014c4 <MPU9250_getAllData+0x1b8>
 8001428:	ee27 7a87 	vmul.f32	s14, s15, s14
 800142c:	eddf 6a26 	vldr	s13, [pc, #152]	; 80014c8 <MPU9250_getAllData+0x1bc>
 8001430:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001434:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <MPU9250_getAllData+0x1c8>)
 8001436:	edc3 7a00 	vstr	s15, [r3]
//	accelX=((((int16_t)((uint16_t)buffer[6] << 8) + buffer[7])))/4096.0f*9.8f;
//	accelY=((((int16_t)((uint16_t)buffer[8] << 8) + buffer[9])))/4096.0f*9.8f;
	accelX=((((int16_t)((uint16_t)buffer[6] << 8) + buffer[7])))/4096.0f*9.8f;
 800143a:	7cbb      	ldrb	r3, [r7, #18]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	b21b      	sxth	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	7cfb      	ldrb	r3, [r7, #19]
 8001444:	4413      	add	r3, r2
 8001446:	ee07 3a90 	vmov	s15, r3
 800144a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800144e:	eddf 6a22 	vldr	s13, [pc, #136]	; 80014d8 <MPU9250_getAllData+0x1cc>
 8001452:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001456:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80014dc <MPU9250_getAllData+0x1d0>
 800145a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145e:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <MPU9250_getAllData+0x1d4>)
 8001460:	edc3 7a00 	vstr	s15, [r3]
	accelY=((((int16_t)((uint16_t)buffer[8] << 8) + buffer[9])))/4096.0f*9.8f;
 8001464:	7d3b      	ldrb	r3, [r7, #20]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b21b      	sxth	r3, r3
 800146a:	461a      	mov	r2, r3
 800146c:	7d7b      	ldrb	r3, [r7, #21]
 800146e:	4413      	add	r3, r2
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001478:	eddf 6a17 	vldr	s13, [pc, #92]	; 80014d8 <MPU9250_getAllData+0x1cc>
 800147c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001480:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80014dc <MPU9250_getAllData+0x1d0>
 8001484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MPU9250_getAllData+0x1d8>)
 800148a:	edc3 7a00 	vstr	s15, [r3]
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 800148e:	7dbb      	ldrb	r3, [r7, #22]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	b21b      	sxth	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	7dfb      	ldrb	r3, [r7, #23]
 8001498:	4413      	add	r3, r2
 800149a:	ee07 3a90 	vmov	s15, r3
 800149e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014a2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80014d8 <MPU9250_getAllData+0x1cc>
 80014a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014aa:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80014dc <MPU9250_getAllData+0x1d0>
 80014ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <MPU9250_getAllData+0x1dc>)
 80014b4:	edc3 7a00 	vstr	s15, [r3]
//	gyroZ_filtered = filter(gyroZ);
//	accelX=((((int16_t)((uint16_t)buffer[6] << 8) + buffer[7])));
//	accelY=((((int16_t)((uint16_t)buffer[8] << 8) + buffer[9])));
//	accelZ=((((int16_t)((uint16_t)buffer[10] << 8) + buffer[11])));
	//accelX_offset=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
}
 80014b8:	bf00      	nop
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	42830000 	.word	0x42830000
 80014c4:	4048f5c3 	.word	0x4048f5c3
 80014c8:	43340000 	.word	0x43340000
 80014cc:	10004a98 	.word	0x10004a98
 80014d0:	10004f80 	.word	0x10004f80
 80014d4:	10004ab4 	.word	0x10004ab4
 80014d8:	45800000 	.word	0x45800000
 80014dc:	411ccccd 	.word	0x411ccccd
 80014e0:	10004a14 	.word	0x10004a14
 80014e4:	10004a0c 	.word	0x10004a0c
 80014e8:	10004ef8 	.word	0x10004ef8

080014ec <MPU9250_writeReg>:
//	Xe = G*(val-Zp)+Xp; // "фильтрованное" значение
//return(Xe);
//}

void MPU9250_writeReg(uint16_t Addr, uint8_t reg, uint8_t value)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
 80014f6:	460b      	mov	r3, r1
 80014f8:	717b      	strb	r3, [r7, #5]
 80014fa:	4613      	mov	r3, r2
 80014fc:	713b      	strb	r3, [r7, #4]
	uint8_t buf[2];
	buf[0] = reg;
 80014fe:	797b      	ldrb	r3, [r7, #5]
 8001500:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 8001502:	793b      	ldrb	r3, [r7, #4]
 8001504:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	b299      	uxth	r1, r3
 800150c:	f107 020c 	add.w	r2, r7, #12
 8001510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2302      	movs	r3, #2
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <MPU9250_writeReg+0x3c>)
 800151a:	f004 fd0b 	bl	8005f34 <HAL_I2C_Master_Transmit>
}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	10004a40 	.word	0x10004a40

0800152c <MPU9250_readReg>:
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 5, 1000);
}

// Read an 8-bit register
uint8_t MPU9250_readReg(uint16_t Addr, uint8_t reg)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af04      	add	r7, sp, #16
 8001532:	4603      	mov	r3, r0
 8001534:	460a      	mov	r2, r1
 8001536:	80fb      	strh	r3, [r7, #6]
 8001538:	4613      	mov	r3, r2
 800153a:	717b      	strb	r3, [r7, #5]
	uint8_t value;
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	b299      	uxth	r1, r3
 8001542:	797b      	ldrb	r3, [r7, #5]
 8001544:	b29a      	uxth	r2, r3
 8001546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	2301      	movs	r3, #1
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	f107 030f 	add.w	r3, r7, #15
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2301      	movs	r3, #1
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <MPU9250_readReg+0x3c>)
 800155a:	f004 fde9 	bl	8006130 <HAL_I2C_Mem_Read>
	return value;
 800155e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	10004a40 	.word	0x10004a40

0800156c <MPU9250_readReg16Bit>:

// Read a 16-bit register
uint16_t MPU9250_readReg16Bit(uint16_t Addr, uint8_t reg)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	460a      	mov	r2, r1
 8001576:	80fb      	strh	r3, [r7, #6]
 8001578:	4613      	mov	r3, r2
 800157a:	717b      	strb	r3, [r7, #5]
	uint16_t value;
	uint8_t buff[2];
	MPU9250_readMulti(Addr, reg, buff, 2);
 800157c:	f107 0208 	add.w	r2, r7, #8
 8001580:	7979      	ldrb	r1, [r7, #5]
 8001582:	88f8      	ldrh	r0, [r7, #6]
 8001584:	2302      	movs	r3, #2
 8001586:	f000 f811 	bl	80015ac <MPU9250_readMulti>
	uint16_t tmp;
	tmp = buff[0];
 800158a:	7a3b      	ldrb	r3, [r7, #8]
 800158c:	81fb      	strh	r3, [r7, #14]
	tmp <<= 8;
 800158e:	89fb      	ldrh	r3, [r7, #14]
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	81fb      	strh	r3, [r7, #14]
	tmp |= buff[1];
 8001594:	7a7b      	ldrb	r3, [r7, #9]
 8001596:	b29a      	uxth	r2, r3
 8001598:	89fb      	ldrh	r3, [r7, #14]
 800159a:	4313      	orrs	r3, r2
 800159c:	81fb      	strh	r3, [r7, #14]
	value = tmp;
 800159e:	89fb      	ldrh	r3, [r7, #14]
 80015a0:	81bb      	strh	r3, [r7, #12]
	return value;
 80015a2:	89bb      	ldrh	r3, [r7, #12]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <MPU9250_readMulti>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void MPU9250_readMulti(uint16_t Addr, uint8_t reg, uint8_t * dst, uint8_t count)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af04      	add	r7, sp, #16
 80015b2:	603a      	str	r2, [r7, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4603      	mov	r3, r0
 80015b8:	80fb      	strh	r3, [r7, #6]
 80015ba:	460b      	mov	r3, r1
 80015bc:	717b      	strb	r3, [r7, #5]
 80015be:	4613      	mov	r3, r2
 80015c0:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, dst, count, 1000);
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	b299      	uxth	r1, r3
 80015c8:	797b      	ldrb	r3, [r7, #5]
 80015ca:	b298      	uxth	r0, r3
 80015cc:	793b      	ldrb	r3, [r7, #4]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015d4:	9202      	str	r2, [sp, #8]
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2301      	movs	r3, #1
 80015de:	4602      	mov	r2, r0
 80015e0:	4803      	ldr	r0, [pc, #12]	; (80015f0 <MPU9250_readMulti+0x44>)
 80015e2:	f004 fda5 	bl	8006130 <HAL_I2C_Mem_Read>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	10004a40 	.word	0x10004a40

080015f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <HAL_MspInit+0x58>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a12      	ldr	r2, [pc, #72]	; (800164c <HAL_MspInit+0x58>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <HAL_MspInit+0x58>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_MspInit+0x58>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a0b      	ldr	r2, [pc, #44]	; (800164c <HAL_MspInit+0x58>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_MspInit+0x58>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2005      	movs	r0, #5
 8001638:	f004 f950 	bl	80058dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800163c:	2005      	movs	r0, #5
 800163e:	f004 f969 	bl	8005914 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800

08001650 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a21      	ldr	r2, [pc, #132]	; (80016f4 <HAL_CAN_MspInit+0xa4>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d13c      	bne.n	80016ec <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <HAL_CAN_MspInit+0xa8>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a1f      	ldr	r2, [pc, #124]	; (80016f8 <HAL_CAN_MspInit+0xa8>)
 800167c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <HAL_CAN_MspInit+0xa8>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_CAN_MspInit+0xa8>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a18      	ldr	r2, [pc, #96]	; (80016f8 <HAL_CAN_MspInit+0xa8>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_CAN_MspInit+0xa8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b8:	2303      	movs	r3, #3
 80016ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016bc:	2309      	movs	r3, #9
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	480d      	ldr	r0, [pc, #52]	; (80016fc <HAL_CAN_MspInit+0xac>)
 80016c8:	f004 f962 	bl	8005990 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2100      	movs	r1, #0
 80016d0:	2014      	movs	r0, #20
 80016d2:	f004 f903 	bl	80058dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80016d6:	2014      	movs	r0, #20
 80016d8:	f004 f91c 	bl	8005914 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	2015      	movs	r0, #21
 80016e2:	f004 f8fb 	bl	80058dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80016e6:	2015      	movs	r0, #21
 80016e8:	f004 f914 	bl	8005914 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80016ec:	bf00      	nop
 80016ee:	3728      	adds	r7, #40	; 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40006400 	.word	0x40006400
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020400 	.word	0x40020400

08001700 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <HAL_I2C_MspInit+0xa4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d13b      	bne.n	800179a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_I2C_MspInit+0xa8>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a1f      	ldr	r2, [pc, #124]	; (80017a8 <HAL_I2C_MspInit+0xa8>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <HAL_I2C_MspInit+0xa8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800173e:	23c0      	movs	r3, #192	; 0xc0
 8001740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001742:	2312      	movs	r3, #18
 8001744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001746:	2301      	movs	r3, #1
 8001748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800174e:	2304      	movs	r3, #4
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	4814      	ldr	r0, [pc, #80]	; (80017ac <HAL_I2C_MspInit+0xac>)
 800175a:	f004 f919 	bl	8005990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_I2C_MspInit+0xa8>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	4a10      	ldr	r2, [pc, #64]	; (80017a8 <HAL_I2C_MspInit+0xa8>)
 8001768:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800176c:	6413      	str	r3, [r2, #64]	; 0x40
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_I2C_MspInit+0xa8>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	201f      	movs	r0, #31
 8001780:	f004 f8ac 	bl	80058dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001784:	201f      	movs	r0, #31
 8001786:	f004 f8c5 	bl	8005914 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2100      	movs	r1, #0
 800178e:	2020      	movs	r0, #32
 8001790:	f004 f8a4 	bl	80058dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001794:	2020      	movs	r0, #32
 8001796:	f004 f8bd 	bl	8005914 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800179a:	bf00      	nop
 800179c:	3728      	adds	r7, #40	; 0x28
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40005400 	.word	0x40005400
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40020400 	.word	0x40020400

080017b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <HAL_TIM_Base_MspInit+0x3c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d10d      	bne.n	80017de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <HAL_TIM_Base_MspInit+0x40>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	4a09      	ldr	r2, [pc, #36]	; (80017f0 <HAL_TIM_Base_MspInit+0x40>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d0:	6413      	str	r3, [r2, #64]	; 0x40
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <HAL_TIM_Base_MspInit+0x40>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40002000 	.word	0x40002000
 80017f0:	40023800 	.word	0x40023800

080017f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08c      	sub	sp, #48	; 0x30
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8001804:	2200      	movs	r2, #0
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	201d      	movs	r0, #29
 800180a:	f004 f867 	bl	80058dc <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800180e:	201d      	movs	r0, #29
 8001810:	f004 f880 	bl	8005914 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <HAL_InitTick+0xa4>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <HAL_InitTick+0xa4>)
 800181e:	f043 0302 	orr.w	r3, r3, #2
 8001822:	6413      	str	r3, [r2, #64]	; 0x40
 8001824:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <HAL_InitTick+0xa4>)
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001830:	f107 0210 	add.w	r2, r7, #16
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4611      	mov	r1, r2
 800183a:	4618      	mov	r0, r3
 800183c:	f008 fc6c 	bl	800a118 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001840:	f008 fc56 	bl	800a0f0 <HAL_RCC_GetPCLK1Freq>
 8001844:	4603      	mov	r3, r0
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184c:	4a13      	ldr	r2, [pc, #76]	; (800189c <HAL_InitTick+0xa8>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0c9b      	lsrs	r3, r3, #18
 8001854:	3b01      	subs	r3, #1
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_InitTick+0xac>)
 800185a:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <HAL_InitTick+0xb0>)
 800185c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_InitTick+0xac>)
 8001860:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001864:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001866:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <HAL_InitTick+0xac>)
 8001868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <HAL_InitTick+0xac>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_InitTick+0xac>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001878:	4809      	ldr	r0, [pc, #36]	; (80018a0 <HAL_InitTick+0xac>)
 800187a:	f008 fc7f 	bl	800a17c <HAL_TIM_Base_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d104      	bne.n	800188e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001884:	4806      	ldr	r0, [pc, #24]	; (80018a0 <HAL_InitTick+0xac>)
 8001886:	f008 fcc8 	bl	800a21a <HAL_TIM_Base_Start_IT>
 800188a:	4603      	mov	r3, r0
 800188c:	e000      	b.n	8001890 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	3730      	adds	r7, #48	; 0x30
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	431bde83 	.word	0x431bde83
 80018a0:	10004fcc 	.word	0x10004fcc
 80018a4:	40000400 	.word	0x40000400

080018a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler+0x4>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler+0x4>

080018ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <CAN1_RX0_IRQHandler+0x10>)
 80018f2:	f003 fd12 	bl	800531a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	10004f18 	.word	0x10004f18

08001900 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <CAN1_RX1_IRQHandler+0x10>)
 8001906:	f003 fd08 	bl	800531a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	10004f18 	.word	0x10004f18

08001914 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <TIM3_IRQHandler+0x10>)
 800191a:	f008 fca2 	bl	800a262 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	10004fcc 	.word	0x10004fcc

08001928 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <I2C1_EV_IRQHandler+0x10>)
 800192e:	f004 fe25 	bl	800657c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	10004a40 	.word	0x10004a40

0800193c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */
  vTaskSuspend(task1Handle);
 8001940:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <I2C1_ER_IRQHandler+0x3c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f00c f929 	bl	800db9c <vTaskSuspend>
  MPU9250_calibrate();
 800194a:	f7ff fac7 	bl	8000edc <MPU9250_calibrate>
  HAL_Delay(2000);
 800194e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001952:	f003 f88d 	bl	8004a70 <HAL_Delay>
  MPU9250_init();
 8001956:	f7ff fa9e 	bl	8000e96 <MPU9250_init>
  HAL_Delay(500);
 800195a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800195e:	f003 f887 	bl	8004a70 <HAL_Delay>
  vTaskResume(task1Handle);
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <I2C1_ER_IRQHandler+0x3c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f00c f9da 	bl	800dd20 <vTaskResume>
  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800196c:	4803      	ldr	r0, [pc, #12]	; (800197c <I2C1_ER_IRQHandler+0x40>)
 800196e:	f004 ff72 	bl	8006856 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	10004a9c 	.word	0x10004a9c
 800197c:	10004a40 	.word	0x10004a40

08001980 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <OTG_FS_IRQHandler+0x10>)
 8001986:	f006 ff45 	bl	8008814 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	100060e0 	.word	0x100060e0

08001994 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
	return 1;
 8001998:	2301      	movs	r3, #1
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <_kill>:

int _kill(int pid, int sig)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019ae:	f00d feb9 	bl	800f724 <__errno>
 80019b2:	4602      	mov	r2, r0
 80019b4:	2316      	movs	r3, #22
 80019b6:	6013      	str	r3, [r2, #0]
	return -1;
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <_exit>:

void _exit (int status)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ffe7 	bl	80019a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019d6:	e7fe      	b.n	80019d6 <_exit+0x12>

080019d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e0:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <_sbrk+0x5c>)
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <_sbrk+0x60>)
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d102      	bne.n	80019fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <_sbrk+0x64>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <_sbrk+0x68>)
 80019f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d207      	bcs.n	8001a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a08:	f00d fe8c 	bl	800f724 <__errno>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	230c      	movs	r3, #12
 8001a10:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a16:	e009      	b.n	8001a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <_sbrk+0x64>)
 8001a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20020000 	.word	0x20020000
 8001a38:	00000400 	.word	0x00000400
 8001a3c:	100004cc 	.word	0x100004cc
 8001a40:	100064f0 	.word	0x100064f0

08001a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <SystemInit+0x28>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4e:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <SystemInit+0x28>)
 8001a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <SystemInit+0x28>)
 8001a5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a5e:	609a      	str	r2, [r3, #8]
#endif
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a76:	e003      	b.n	8001a80 <LoopCopyDataInit>

08001a78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a7e:	3104      	adds	r1, #4

08001a80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a80:	480b      	ldr	r0, [pc, #44]	; (8001ab0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a88:	d3f6      	bcc.n	8001a78 <CopyDataInit>
  ldr  r2, =_sbss
 8001a8a:	4a0b      	ldr	r2, [pc, #44]	; (8001ab8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a8c:	e002      	b.n	8001a94 <LoopFillZerobss>

08001a8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a90:	f842 3b04 	str.w	r3, [r2], #4

08001a94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a98:	d3f9      	bcc.n	8001a8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a9a:	f7ff ffd3 	bl	8001a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a9e:	f00d fe47 	bl	800f730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aa2:	f7fe fd97 	bl	80005d4 <main>
  bx  lr    
 8001aa6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001aa8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001aac:	08010050 	.word	0x08010050
  ldr  r0, =_sdata
 8001ab0:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 8001ab4:	100001ec 	.word	0x100001ec
  ldr  r2, =_sbss
 8001ab8:	100001ec 	.word	0x100001ec
  ldr  r3, = _ebss
 8001abc:	100064ec 	.word	0x100064ec

08001ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ac0:	e7fe      	b.n	8001ac0 <ADC_IRQHandler>
	...

08001ac4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	0a5a      	lsrs	r2, r3, #9
 8001ad4:	490f      	ldr	r1, [pc, #60]	; (8001b14 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8001ad6:	fba1 1202 	umull	r1, r2, r1, r2
 8001ada:	09d2      	lsrs	r2, r2, #7
 8001adc:	490e      	ldr	r1, [pc, #56]	; (8001b18 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8001ade:	fb01 f202 	mul.w	r2, r1, r2
 8001ae2:	1a9b      	subs	r3, r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	0a5b      	lsrs	r3, r3, #9
 8001aec:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8001aee:	fba2 2303 	umull	r2, r3, r2, r3
 8001af2:	09db      	lsrs	r3, r3, #7
 8001af4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	441a      	add	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	601a      	str	r2, [r3, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	00044b83 	.word	0x00044b83
 8001b18:	3b9aca00 	.word	0x3b9aca00

08001b1c <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	ed87 0a00 	vstr	s0, [r7]
  {
    const int32_t* val = (int32_t*) &f;
 8001b28:	463b      	mov	r3, r7
 8001b2a:	613b      	str	r3, [r7, #16]
    int32_t exp = ((*val >> 23) & 255);
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	15db      	asrs	r3, r3, #23
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	617b      	str	r3, [r7, #20]
    if (exp != 0)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x28>
    {
      exp += 1023 - 127;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8001b42:	617b      	str	r3, [r7, #20]
    }

    int32_t sig = *val;
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
    *(outbuffer++) = 0;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig << 5) & 0xff;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	0159      	lsls	r1, r3, #5
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	b2ca      	uxtb	r2, r1
 8001b74:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	10d9      	asrs	r1, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	b2ca      	uxtb	r2, r1
 8001b82:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 11) & 0xff;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	12d9      	asrs	r1, r3, #11
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	b2ca      	uxtb	r2, r1
 8001b90:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	b25a      	sxtb	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	14db      	asrs	r3, r3, #19
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	b259      	sxtb	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	b2ca      	uxtb	r2, r1
 8001bb0:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	111b      	asrs	r3, r3, #4
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	1c59      	adds	r1, r3, #1
 8001bbc:	6079      	str	r1, [r7, #4]
 8001bbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8001bc6:	edd7 7a00 	vldr	s15, [r7]
 8001bca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd2:	d508      	bpl.n	8001be6 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0xca>
    {
      *(outbuffer - 1) |= 0x80;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	781a      	ldrb	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8001be6:	2308      	movs	r3, #8
  }
 8001be8:	4618      	mov	r0, r3
 8001bea:	371c      	adds	r7, #28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  {
    uint32_t* val = (uint32_t*)f;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	60fb      	str	r3, [r7, #12]
    inbuffer += 3;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3303      	adds	r3, #3
 8001c06:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	095b      	lsrs	r3, r3, #5
 8001c12:	f003 0207 	and.w	r2, r3, #7
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	00da      	lsls	r2, r3, #3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	02da      	lsls	r2, r3, #11
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	04db      	lsls	r3, r3, #19
 8001c4c:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8001c50:	431a      	orrs	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	601a      	str	r2, [r3, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	091b      	lsrs	r3, r3, #4
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	60bb      	str	r3, [r7, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	f403 62fe 	and.w	r2, r3, #2032	; 0x7f0
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60bb      	str	r3, [r7, #8]
    if (exp != 0)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x9a>
    {
      *val |= ((exp) - 1023 + 127) << 23;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8001c86:	05db      	lsls	r3, r3, #23
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	601a      	str	r2, [r3, #0]
    }

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	061b      	lsls	r3, r3, #24
 8001c98:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	601a      	str	r2, [r3, #0]

    return 8;
 8001ca6:	2308      	movs	r3, #8
  }
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <_ZN3ros3MsgC1Ev>:
class Msg
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <_ZN3ros3MsgC1Ev+0x1c>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	0801002c 	.word	0x0801002c

08001cf8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
      data()
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff ffe8 	bl	8001cd8 <_ZN3ros3MsgC1Ev>
 8001d08:	4a06      	ldr	r2, [pc, #24]	; (8001d24 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3304      	adds	r3, #4
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ffce 	bl	8001cb4 <_ZN3ros4TimeC1Ev>
    {
    }
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	08010014 	.word	0x08010014

08001d28 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6859      	ldr	r1, [r3, #4]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	b2ca      	uxtb	r2, r1
 8001d42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	0a19      	lsrs	r1, r3, #8
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	b2ca      	uxtb	r2, r1
 8001d54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	0c19      	lsrs	r1, r3, #16
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3302      	adds	r3, #2
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	b2ca      	uxtb	r2, r1
 8001d66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	0e19      	lsrs	r1, r3, #24
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3303      	adds	r3, #3
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	4413      	add	r3, r2
 8001d76:	b2ca      	uxtb	r2, r1
 8001d78:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6899      	ldr	r1, [r3, #8]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	4413      	add	r3, r2
 8001d8a:	b2ca      	uxtb	r2, r1
 8001d8c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	0a19      	lsrs	r1, r3, #8
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3301      	adds	r3, #1
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	b2ca      	uxtb	r2, r1
 8001d9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	0c19      	lsrs	r1, r3, #16
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3302      	adds	r3, #2
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	b2ca      	uxtb	r2, r1
 8001db0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	0e19      	lsrs	r1, r3, #24
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3303      	adds	r3, #3
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b2ca      	uxtb	r2, r1
 8001dc2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	60fb      	str	r3, [r7, #12]
      return offset;
 8001dca:	68fb      	ldr	r3, [r7, #12]
    }
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	6839      	ldr	r1, [r7, #0]
 8001dfe:	440b      	add	r3, r1
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	021b      	lsls	r3, r3, #8
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	3302      	adds	r3, #2
 8001e12:	6839      	ldr	r1, [r7, #0]
 8001e14:	440b      	add	r3, r1
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	041b      	lsls	r3, r3, #16
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3303      	adds	r3, #3
 8001e28:	6839      	ldr	r1, [r7, #0]
 8001e2a:	440b      	add	r3, r1
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	061b      	lsls	r3, r3, #24
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	4413      	add	r3, r2
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3301      	adds	r3, #1
 8001e52:	6839      	ldr	r1, [r7, #0]
 8001e54:	440b      	add	r3, r1
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	3302      	adds	r3, #2
 8001e68:	6839      	ldr	r1, [r7, #0]
 8001e6a:	440b      	add	r3, r1
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	041b      	lsls	r3, r3, #16
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3303      	adds	r3, #3
 8001e7e:	6839      	ldr	r1, [r7, #0]
 8001e80:	440b      	add	r3, r1
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	061b      	lsls	r3, r3, #24
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	3304      	adds	r3, #4
 8001e90:	60fb      	str	r3, [r7, #12]
     return offset;
 8001e92:	68fb      	ldr	r3, [r7, #12]
    }
 8001e94:	4618      	mov	r0, r3
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	0800fb1c 	.word	0x0800fb1c

08001ebc <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	0800fb2c 	.word	0x0800fb2c

08001ed8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fef8 	bl	8001cd8 <_ZN3ros3MsgC1Ev>
 8001ee8:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	809a      	strh	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a06      	ldr	r2, [pc, #24]	; (8001f1c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001f04:	611a      	str	r2, [r3, #16]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	615a      	str	r2, [r3, #20]
    {
    }
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	0800fffc 	.word	0x0800fffc
 8001f1c:	0800fb50 	.word	0x0800fb50

08001f20 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	8899      	ldrh	r1, [r3, #4]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	b2ca      	uxtb	r2, r1
 8001f3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	889b      	ldrh	r3, [r3, #4]
 8001f40:	0a1b      	lsrs	r3, r3, #8
 8001f42:	b299      	uxth	r1, r3
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	3301      	adds	r3, #1
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b2ca      	uxtb	r2, r1
 8001f4e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	3302      	adds	r3, #2
 8001f54:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe f938 	bl	80001d0 <strlen>
 8001f60:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	69b9      	ldr	r1, [r7, #24]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f001 fd0a 	bl	8003984 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	3304      	adds	r3, #4
 8001f74:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	18d0      	adds	r0, r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4619      	mov	r1, r3
 8001f84:	f00d fc08 	bl	800f798 <memcpy>
      offset += length_topic_name;
 8001f88:	69fa      	ldr	r2, [r7, #28]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe f91b 	bl	80001d0 <strlen>
 8001f9a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	6979      	ldr	r1, [r7, #20]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f001 fced 	bl	8003984 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3304      	adds	r3, #4
 8001fae:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	18d0      	adds	r0, r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f00d fbeb 	bl	800f798 <memcpy>
      offset += length_message_type;
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe f8fe 	bl	80001d0 <strlen>
 8001fd4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	6939      	ldr	r1, [r7, #16]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f001 fcd0 	bl	8003984 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	18d0      	adds	r0, r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f00d fbce 	bl	800f798 <memcpy>
      offset += length_md5sum;
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4413      	add	r3, r2
 8002002:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800200a:	68f9      	ldr	r1, [r7, #12]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	4413      	add	r3, r2
 8002012:	b2ca      	uxtb	r2, r1
 8002014:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	0a19      	lsrs	r1, r3, #8
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3301      	adds	r3, #1
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	4413      	add	r3, r2
 8002022:	b2ca      	uxtb	r2, r1
 8002024:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	0c19      	lsrs	r1, r3, #16
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3302      	adds	r3, #2
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	4413      	add	r3, r2
 8002032:	b2ca      	uxtb	r2, r1
 8002034:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	0e19      	lsrs	r1, r3, #24
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3303      	adds	r3, #3
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	4413      	add	r3, r2
 8002042:	b2ca      	uxtb	r2, r1
 8002044:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3304      	adds	r3, #4
 800204a:	61fb      	str	r3, [r7, #28]
      return offset;
 800204c:	69fb      	ldr	r3, [r7, #28]
    }
 800204e:	4618      	mov	r0, r3
 8002050:	3720      	adds	r7, #32
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002056:	b580      	push	{r7, lr}
 8002058:	b08a      	sub	sp, #40	; 0x28
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	4413      	add	r3, r2
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b29a      	uxth	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	889b      	ldrh	r3, [r3, #4]
 8002076:	b21a      	sxth	r2, r3
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	3301      	adds	r3, #1
 800207c:	6839      	ldr	r1, [r7, #0]
 800207e:	440b      	add	r3, r1
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	021b      	lsls	r3, r3, #8
 8002084:	b21b      	sxth	r3, r3
 8002086:	4313      	orrs	r3, r2
 8002088:	b21b      	sxth	r3, r3
 800208a:	b29a      	uxth	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	3302      	adds	r3, #2
 8002094:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	441a      	add	r2, r3
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	4611      	mov	r1, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f001 fc8c 	bl	80039c0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	3304      	adds	r3, #4
 80020ac:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	4413      	add	r3, r2
 80020b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d20c      	bcs.n	80020d8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	441a      	add	r2, r3
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	3b01      	subs	r3, #1
 80020c8:	6839      	ldr	r1, [r7, #0]
 80020ca:	440b      	add	r3, r1
 80020cc:	7812      	ldrb	r2, [r2, #0]
 80020ce:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	3301      	adds	r3, #1
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
 80020d6:	e7ec      	b.n	80020b2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	4413      	add	r3, r2
 80020de:	3b01      	subs	r3, #1
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	441a      	add	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	4413      	add	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	441a      	add	r2, r3
 8002102:	f107 0310 	add.w	r3, r7, #16
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f001 fc59 	bl	80039c0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	3304      	adds	r3, #4
 8002112:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	623b      	str	r3, [r7, #32]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4413      	add	r3, r2
 800211e:	6a3a      	ldr	r2, [r7, #32]
 8002120:	429a      	cmp	r2, r3
 8002122:	d20c      	bcs.n	800213e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	441a      	add	r2, r3
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	3b01      	subs	r3, #1
 800212e:	6839      	ldr	r1, [r7, #0]
 8002130:	440b      	add	r3, r1
 8002132:	7812      	ldrb	r2, [r2, #0]
 8002134:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	3301      	adds	r3, #1
 800213a:	623b      	str	r3, [r7, #32]
 800213c:	e7ec      	b.n	8002118 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4413      	add	r3, r2
 8002144:	3b01      	subs	r3, #1
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	4413      	add	r3, r2
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	3b01      	subs	r3, #1
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	441a      	add	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	441a      	add	r2, r3
 8002168:	f107 030c 	add.w	r3, r7, #12
 800216c:	4611      	mov	r1, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f001 fc26 	bl	80039c0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	3304      	adds	r3, #4
 8002178:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4413      	add	r3, r2
 8002184:	69fa      	ldr	r2, [r7, #28]
 8002186:	429a      	cmp	r2, r3
 8002188:	d20c      	bcs.n	80021a4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	441a      	add	r2, r3
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	3b01      	subs	r3, #1
 8002194:	6839      	ldr	r1, [r7, #0]
 8002196:	440b      	add	r3, r1
 8002198:	7812      	ldrb	r2, [r2, #0]
 800219a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	3301      	adds	r3, #1
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	e7ec      	b.n	800217e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4413      	add	r3, r2
 80021aa:	3b01      	subs	r3, #1
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	441a      	add	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4413      	add	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	6839      	ldr	r1, [r7, #0]
 80021d2:	440a      	add	r2, r1
 80021d4:	7812      	ldrb	r2, [r2, #0]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	3301      	adds	r3, #1
 80021e0:	6839      	ldr	r1, [r7, #0]
 80021e2:	440b      	add	r3, r1
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	3302      	adds	r3, #2
 80021f2:	6839      	ldr	r1, [r7, #0]
 80021f4:	440b      	add	r3, r1
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	041b      	lsls	r3, r3, #16
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	3303      	adds	r3, #3
 8002204:	6839      	ldr	r1, [r7, #0]
 8002206:	440b      	add	r3, r1
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	061b      	lsls	r3, r3, #24
 800220c:	4313      	orrs	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	3304      	adds	r3, #4
 800221a:	61bb      	str	r3, [r7, #24]
     return offset;
 800221c:	69bb      	ldr	r3, [r7, #24]
    }
 800221e:	4618      	mov	r0, r3
 8002220:	3728      	adds	r7, #40	; 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	0800fb54 	.word	0x0800fb54

08002244 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	0800fb70 	.word	0x0800fb70

08002260 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fd34 	bl	8001cd8 <_ZN3ros3MsgC1Ev>
 8002270:	4a06      	ldr	r2, [pc, #24]	; (800228c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	711a      	strb	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a04      	ldr	r2, [pc, #16]	; (8002290 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002280:	609a      	str	r2, [r3, #8]
    {
    }
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	0800ffe4 	.word	0x0800ffe4
 8002290:	0800fb50 	.word	0x0800fb50

08002294 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	4413      	add	r3, r2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	7912      	ldrb	r2, [r2, #4]
 80022ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3301      	adds	r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fd ff89 	bl	80001d0 <strlen>
 80022be:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	4413      	add	r3, r2
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f001 fb5b 	bl	8003984 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	3304      	adds	r3, #4
 80022d2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	18d0      	adds	r0, r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	4619      	mov	r1, r3
 80022e2:	f00d fa59 	bl	800f798 <memcpy>
      offset += length_msg;
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4413      	add	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]
      return offset;
 80022ee:	68fb      	ldr	r3, [r7, #12]
    }
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	4413      	add	r3, r2
 800230c:	781a      	ldrb	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	3301      	adds	r3, #1
 8002316:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	441a      	add	r2, r3
 800231e:	f107 030c 	add.w	r3, r7, #12
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f001 fb4b 	bl	80039c0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	3304      	adds	r3, #4
 800232e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4413      	add	r3, r2
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	429a      	cmp	r2, r3
 800233e:	d20c      	bcs.n	800235a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	441a      	add	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3b01      	subs	r3, #1
 800234a:	6839      	ldr	r1, [r7, #0]
 800234c:	440b      	add	r3, r1
 800234e:	7812      	ldrb	r2, [r2, #0]
 8002350:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	3301      	adds	r3, #1
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	e7ec      	b.n	8002334 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4413      	add	r3, r2
 8002360:	3b01      	subs	r3, #1
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	4413      	add	r3, r2
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	3b01      	subs	r3, #1
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	441a      	add	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
     return offset;
 800237e:	693b      	ldr	r3, [r7, #16]
    }
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	0800fb94 	.word	0x0800fb94

080023a4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	4b03      	ldr	r3, [pc, #12]	; (80023bc <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	0800fba8 	.word	0x0800fba8

080023c0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fc84 	bl	8001cd8 <_ZN3ros3MsgC1Ev>
 80023d0:	4a0c      	ldr	r2, [pc, #48]	; (8002404 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	61da      	str	r2, [r3, #28]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	0800ffcc 	.word	0x0800ffcc

08002408 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6859      	ldr	r1, [r3, #4]
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	4413      	add	r3, r2
 8002420:	b2ca      	uxtb	r2, r1
 8002422:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	0a19      	lsrs	r1, r3, #8
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	3301      	adds	r3, #1
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	4413      	add	r3, r2
 8002432:	b2ca      	uxtb	r2, r1
 8002434:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	0c19      	lsrs	r1, r3, #16
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	3302      	adds	r3, #2
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	4413      	add	r3, r2
 8002444:	b2ca      	uxtb	r2, r1
 8002446:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	0e19      	lsrs	r1, r3, #24
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	3303      	adds	r3, #3
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	4413      	add	r3, r2
 8002456:	b2ca      	uxtb	r2, r1
 8002458:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	3304      	adds	r3, #4
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002460:	2300      	movs	r3, #0
 8002462:	623b      	str	r3, [r7, #32]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	6a3a      	ldr	r2, [r7, #32]
 800246a:	429a      	cmp	r2, r3
 800246c:	d22b      	bcs.n	80024c6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800247c:	6939      	ldr	r1, [r7, #16]
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	4413      	add	r3, r2
 8002484:	b2ca      	uxtb	r2, r1
 8002486:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	0a19      	lsrs	r1, r3, #8
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	3301      	adds	r3, #1
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	4413      	add	r3, r2
 8002494:	b2ca      	uxtb	r2, r1
 8002496:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	0c19      	lsrs	r1, r3, #16
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	3302      	adds	r3, #2
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	4413      	add	r3, r2
 80024a4:	b2ca      	uxtb	r2, r1
 80024a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	0e19      	lsrs	r1, r3, #24
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	3303      	adds	r3, #3
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	b2ca      	uxtb	r2, r1
 80024b6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	3304      	adds	r3, #4
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	3301      	adds	r3, #1
 80024c2:	623b      	str	r3, [r7, #32]
 80024c4:	e7ce      	b.n	8002464 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6919      	ldr	r1, [r3, #16]
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	4413      	add	r3, r2
 80024d0:	b2ca      	uxtb	r2, r1
 80024d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	0a19      	lsrs	r1, r3, #8
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	3301      	adds	r3, #1
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	4413      	add	r3, r2
 80024e2:	b2ca      	uxtb	r2, r1
 80024e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	0c19      	lsrs	r1, r3, #16
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	3302      	adds	r3, #2
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	4413      	add	r3, r2
 80024f4:	b2ca      	uxtb	r2, r1
 80024f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	0e19      	lsrs	r1, r3, #24
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	3303      	adds	r3, #3
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	4413      	add	r3, r2
 8002506:	b2ca      	uxtb	r2, r1
 8002508:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	3304      	adds	r3, #4
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	429a      	cmp	r2, r3
 800251c:	d22b      	bcs.n	8002576 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800252c:	68f9      	ldr	r1, [r7, #12]
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	4413      	add	r3, r2
 8002534:	b2ca      	uxtb	r2, r1
 8002536:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	0a19      	lsrs	r1, r3, #8
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	3301      	adds	r3, #1
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	4413      	add	r3, r2
 8002544:	b2ca      	uxtb	r2, r1
 8002546:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	0c19      	lsrs	r1, r3, #16
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	3302      	adds	r3, #2
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	4413      	add	r3, r2
 8002554:	b2ca      	uxtb	r2, r1
 8002556:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	0e19      	lsrs	r1, r3, #24
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	3303      	adds	r3, #3
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	4413      	add	r3, r2
 8002564:	b2ca      	uxtb	r2, r1
 8002566:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	3304      	adds	r3, #4
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3301      	adds	r3, #1
 8002572:	61fb      	str	r3, [r7, #28]
 8002574:	e7ce      	b.n	8002514 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69d9      	ldr	r1, [r3, #28]
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	4413      	add	r3, r2
 8002580:	b2ca      	uxtb	r2, r1
 8002582:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	0a19      	lsrs	r1, r3, #8
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	3301      	adds	r3, #1
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	4413      	add	r3, r2
 8002592:	b2ca      	uxtb	r2, r1
 8002594:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	0c19      	lsrs	r1, r3, #16
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	3302      	adds	r3, #2
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	b2ca      	uxtb	r2, r1
 80025a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	0e19      	lsrs	r1, r3, #24
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	3303      	adds	r3, #3
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	b2ca      	uxtb	r2, r1
 80025b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	3304      	adds	r3, #4
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80025c0:	2300      	movs	r3, #0
 80025c2:	61bb      	str	r3, [r7, #24]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d228      	bcs.n	8002620 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fd fdf8 	bl	80001d0 <strlen>
 80025e0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	6979      	ldr	r1, [r7, #20]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f001 f9ca 	bl	8003984 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	3304      	adds	r3, #4
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	18d0      	adds	r0, r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	4619      	mov	r1, r3
 800260c:	f00d f8c4 	bl	800f798 <memcpy>
      offset += length_stringsi;
 8002610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	4413      	add	r3, r2
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	3301      	adds	r3, #1
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	e7d1      	b.n	80025c4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002622:	4618      	mov	r0, r3
 8002624:	3728      	adds	r7, #40	; 0x28
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800262a:	b580      	push	{r7, lr}
 800262c:	b08e      	sub	sp, #56	; 0x38
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	4413      	add	r3, r2
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002644:	3301      	adds	r3, #1
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	4413      	add	r3, r2
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	6a3a      	ldr	r2, [r7, #32]
 8002650:	4313      	orrs	r3, r2
 8002652:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002656:	3302      	adds	r3, #2
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	4413      	add	r3, r2
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	041b      	lsls	r3, r3, #16
 8002660:	6a3a      	ldr	r2, [r7, #32]
 8002662:	4313      	orrs	r3, r2
 8002664:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002668:	3303      	adds	r3, #3
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	4413      	add	r3, r2
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	061b      	lsls	r3, r3, #24
 8002672:	6a3a      	ldr	r2, [r7, #32]
 8002674:	4313      	orrs	r3, r2
 8002676:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267a:	3304      	adds	r3, #4
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	6a3a      	ldr	r2, [r7, #32]
 8002684:	429a      	cmp	r2, r3
 8002686:	d90a      	bls.n	800269e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4619      	mov	r1, r3
 8002692:	4610      	mov	r0, r2
 8002694:	f00d f93c 	bl	800f910 <realloc>
 8002698:	4602      	mov	r2, r0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a3a      	ldr	r2, [r7, #32]
 80026a2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80026a4:	2300      	movs	r3, #0
 80026a6:	633b      	str	r3, [r7, #48]	; 0x30
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d236      	bcs.n	8002720 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026ba:	6839      	ldr	r1, [r7, #0]
 80026bc:	440a      	add	r2, r1
 80026be:	7812      	ldrb	r2, [r2, #0]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c8:	3301      	adds	r3, #1
 80026ca:	6839      	ldr	r1, [r7, #0]
 80026cc:	440b      	add	r3, r1
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	021b      	lsls	r3, r3, #8
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026da:	3302      	adds	r3, #2
 80026dc:	6839      	ldr	r1, [r7, #0]
 80026de:	440b      	add	r3, r1
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	041b      	lsls	r3, r3, #16
 80026e4:	4313      	orrs	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ec:	3303      	adds	r3, #3
 80026ee:	6839      	ldr	r1, [r7, #0]
 80026f0:	440b      	add	r3, r1
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	4313      	orrs	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002702:	3304      	adds	r3, #4
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	3208      	adds	r2, #8
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271a:	3301      	adds	r3, #1
 800271c:	633b      	str	r3, [r7, #48]	; 0x30
 800271e:	e7c3      	b.n	80026a8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	4413      	add	r3, r2
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800272a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272c:	3301      	adds	r3, #1
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	4413      	add	r3, r2
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	4313      	orrs	r3, r2
 800273a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800273c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273e:	3302      	adds	r3, #2
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	4413      	add	r3, r2
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	041b      	lsls	r3, r3, #16
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	4313      	orrs	r3, r2
 800274c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800274e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002750:	3303      	adds	r3, #3
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	4413      	add	r3, r2
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	061b      	lsls	r3, r3, #24
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	4313      	orrs	r3, r2
 800275e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002762:	3304      	adds	r3, #4
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	429a      	cmp	r2, r3
 800276e:	d90a      	bls.n	8002786 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699a      	ldr	r2, [r3, #24]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4619      	mov	r1, r3
 800277a:	4610      	mov	r0, r2
 800277c:	f00d f8c8 	bl	800f910 <realloc>
 8002780:	4602      	mov	r2, r0
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800278c:	2300      	movs	r3, #0
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002796:	429a      	cmp	r2, r3
 8002798:	d236      	bcs.n	8002808 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027a2:	6839      	ldr	r1, [r7, #0]
 80027a4:	440a      	add	r2, r1
 80027a6:	7812      	ldrb	r2, [r2, #0]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b0:	3301      	adds	r3, #1
 80027b2:	6839      	ldr	r1, [r7, #0]
 80027b4:	440b      	add	r3, r1
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	021b      	lsls	r3, r3, #8
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c2:	3302      	adds	r3, #2
 80027c4:	6839      	ldr	r1, [r7, #0]
 80027c6:	440b      	add	r3, r1
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	041b      	lsls	r3, r3, #16
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d4:	3303      	adds	r3, #3
 80027d6:	6839      	ldr	r1, [r7, #0]
 80027d8:	440b      	add	r3, r1
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	061b      	lsls	r3, r3, #24
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80027e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ea:	3304      	adds	r3, #4
 80027ec:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	3214      	adds	r2, #20
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002802:	3301      	adds	r3, #1
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002806:	e7c3      	b.n	8002790 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	4413      	add	r3, r2
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002814:	3301      	adds	r3, #1
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	4413      	add	r3, r2
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	021b      	lsls	r3, r3, #8
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002826:	3302      	adds	r3, #2
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	4413      	add	r3, r2
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	041b      	lsls	r3, r3, #16
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002838:	3303      	adds	r3, #3
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	4413      	add	r3, r2
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800284a:	3304      	adds	r3, #4
 800284c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	429a      	cmp	r2, r3
 8002856:	d90a      	bls.n	800286e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4619      	mov	r1, r3
 8002862:	4610      	mov	r0, r2
 8002864:	f00d f854 	bl	800f910 <realloc>
 8002868:	4602      	mov	r2, r0
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002874:	2300      	movs	r3, #0
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800287e:	429a      	cmp	r2, r3
 8002880:	d23f      	bcs.n	8002902 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	441a      	add	r2, r3
 8002888:	f107 030c 	add.w	r3, r7, #12
 800288c:	4611      	mov	r1, r2
 800288e:	4618      	mov	r0, r3
 8002890:	f001 f896 	bl	80039c0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002896:	3304      	adds	r3, #4
 8002898:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800289a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
 800289e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4413      	add	r3, r2
 80028a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d20c      	bcs.n	80028c4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	441a      	add	r2, r3
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	3b01      	subs	r3, #1
 80028b4:	6839      	ldr	r1, [r7, #0]
 80028b6:	440b      	add	r3, r1
 80028b8:	7812      	ldrb	r2, [r2, #0]
 80028ba:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	3301      	adds	r3, #1
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
 80028c2:	e7ec      	b.n	800289e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80028c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4413      	add	r3, r2
 80028ca:	3b01      	subs	r3, #1
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	4413      	add	r3, r2
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80028d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d6:	3b01      	subs	r3, #1
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	441a      	add	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80028e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	4413      	add	r3, r2
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	3220      	adds	r2, #32
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	3301      	adds	r3, #1
 80028fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002900:	e7ba      	b.n	8002878 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002904:	4618      	mov	r0, r3
 8002906:	3738      	adds	r7, #56	; 0x38
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	0800fed8 	.word	0x0800fed8

08002928 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	4b03      	ldr	r3, [pc, #12]	; (8002940 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	0800fbcc 	.word	0x0800fbcc

08002944 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	611a      	str	r2, [r3, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68d8      	ldr	r0, [r3, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6891      	ldr	r1, [r2, #8]
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	4798      	blx	r3
 8002990:	4603      	mov	r3, r0
  };
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
  }
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <_ZN13STM32HardwareC1Ev>:
extern struct ringbuffer rb;

class STM32Hardware
{
public:
	STM32Hardware() {
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
	}
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_ZN13STM32Hardware4initEv>:

	void init() {
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
	}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <_ZN13STM32Hardware4readEv>:

	// Read a byte of data from ROS connection.
	// If no data , returns -1
	int read()
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
	{
		uint32_t r;
		uint8_t ch = -1;
 80029e4:	23ff      	movs	r3, #255	; 0xff
 80029e6:	72fb      	strb	r3, [r7, #11]

		r = ringbuffer_getchar(&rb, &ch);
 80029e8:	f107 030b 	add.w	r3, r7, #11
 80029ec:	4619      	mov	r1, r3
 80029ee:	4807      	ldr	r0, [pc, #28]	; (8002a0c <_ZN13STM32Hardware4readEv+0x30>)
 80029f0:	f001 ff73 	bl	80048da <_Z18ringbuffer_getcharP10ringbufferPh>
 80029f4:	60f8      	str	r0, [r7, #12]

		if (1 == r)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <_ZN13STM32Hardware4readEv+0x24>
			return ch;
 80029fc:	7afb      	ldrb	r3, [r7, #11]
 80029fe:	e001      	b.n	8002a04 <_ZN13STM32Hardware4readEv+0x28>
		else
			return -1;
 8002a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	100004d0 	.word	0x100004d0

08002a10 <_ZN13STM32Hardware5writeEPhi>:


	// Send a byte of data to ROS connection
	void write(uint8_t* data, int length)
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
	{
		CDC_Transmit_FS(data, length);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	4619      	mov	r1, r3
 8002a22:	68b8      	ldr	r0, [r7, #8]
 8002a24:	f00c fa20 	bl	800ee68 <CDC_Transmit_FS>
	}
 8002a28:	bf00      	nop
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <_ZN13STM32Hardware4timeEv>:

	// Returns milliseconds since start of program
	unsigned long time(void)
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	{
		return HAL_GetTick();
 8002a38:	f002 f80e 	bl	8004a58 <HAL_GetTick>
 8002a3c:	4603      	mov	r3, r0
	}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <_ZN8std_msgs4Int8C1Ev>:
  {
    public:
      typedef int8_t _data_type;
      _data_type data;

    Int8():
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
      data(0)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff f940 	bl	8001cd8 <_ZN3ros3MsgC1Ev>
 8002a58:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <_ZN8std_msgs4Int8C1Ev+0x28>)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	711a      	strb	r2, [r3, #4]
    {
    }
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	0800ff88 	.word	0x0800ff88

08002a74 <_ZNK8std_msgs4Int89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002a88:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	4413      	add	r3, r2
 8002a90:	7a3a      	ldrb	r2, [r7, #8]
 8002a92:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	3301      	adds	r3, #1
 8002a98:	60fb      	str	r3, [r7, #12]
      return offset;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
    }
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <_ZN8std_msgs4Int811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002aba:	7a3a      	ldrb	r2, [r7, #8]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6839      	ldr	r1, [r7, #0]
 8002ac0:	440b      	add	r3, r1
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8002aca:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	60fb      	str	r3, [r7, #12]
     return offset;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
    }
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <_ZN8std_msgs4Int87getTypeEv>:

    const char * getType(){ return "std_msgs/Int8"; };
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <_ZN8std_msgs4Int87getTypeEv+0x18>)
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	0800fbf0 	.word	0x0800fbf0

08002b04 <_ZN8std_msgs4Int86getMD5Ev>:
    const char * getMD5(){ return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <_ZN8std_msgs4Int86getMD5Ev+0x18>)
 8002b0e:	4618      	mov	r0, r3
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	0800fc00 	.word	0x0800fc00

08002b20 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff f8d4 	bl	8001cd8 <_ZN3ros3MsgC1Ev>
 8002b30:	4a08      	ldr	r2, [pc, #32]	; (8002b54 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a07      	ldr	r2, [pc, #28]	; (8002b58 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	60da      	str	r2, [r3, #12]
    {
    }
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	0800ff70 	.word	0x0800ff70
 8002b58:	0800fb50 	.word	0x0800fb50

08002b5c <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fd fb2e 	bl	80001d0 <strlen>
 8002b74:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 ff00 	bl	8003984 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3304      	adds	r3, #4
 8002b88:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	18d0      	adds	r0, r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	4619      	mov	r1, r3
 8002b98:	f00c fdfe 	bl	800f798 <memcpy>
      offset += length_label;
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6899      	ldr	r1, [r3, #8]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	4413      	add	r3, r2
 8002bae:	b2ca      	uxtb	r2, r1
 8002bb0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	0a19      	lsrs	r1, r3, #8
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	b2ca      	uxtb	r2, r1
 8002bc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	0c19      	lsrs	r1, r3, #16
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3302      	adds	r3, #2
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	b2ca      	uxtb	r2, r1
 8002bd4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	0e19      	lsrs	r1, r3, #24
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	3303      	adds	r3, #3
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	4413      	add	r3, r2
 8002be4:	b2ca      	uxtb	r2, r1
 8002be6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	3304      	adds	r3, #4
 8002bec:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68d9      	ldr	r1, [r3, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	b2ca      	uxtb	r2, r1
 8002bfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	0a19      	lsrs	r1, r3, #8
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	3301      	adds	r3, #1
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	4413      	add	r3, r2
 8002c0a:	b2ca      	uxtb	r2, r1
 8002c0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	0c19      	lsrs	r1, r3, #16
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3302      	adds	r3, #2
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	b2ca      	uxtb	r2, r1
 8002c1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	0e19      	lsrs	r1, r3, #24
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3303      	adds	r3, #3
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	b2ca      	uxtb	r2, r1
 8002c30:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	3304      	adds	r3, #4
 8002c36:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c38:	68fb      	ldr	r3, [r7, #12]
    }
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b086      	sub	sp, #24
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	441a      	add	r2, r3
 8002c56:	f107 030c 	add.w	r3, r7, #12
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 feaf 	bl	80039c0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	3304      	adds	r3, #4
 8002c66:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4413      	add	r3, r2
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d20c      	bcs.n	8002c92 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	441a      	add	r2, r3
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	6839      	ldr	r1, [r7, #0]
 8002c84:	440b      	add	r3, r1
 8002c86:	7812      	ldrb	r2, [r2, #0]
 8002c88:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	e7ec      	b.n	8002c6c <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_label-1]=0;
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4413      	add	r3, r2
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	441a      	add	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	4413      	add	r3, r2
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	6839      	ldr	r1, [r7, #0]
 8002cce:	440b      	add	r3, r1
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	021b      	lsls	r3, r3, #8
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	3302      	adds	r3, #2
 8002ce2:	6839      	ldr	r1, [r7, #0]
 8002ce4:	440b      	add	r3, r1
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	041b      	lsls	r3, r3, #16
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	3303      	adds	r3, #3
 8002cf8:	6839      	ldr	r1, [r7, #0]
 8002cfa:	440b      	add	r3, r1
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	061b      	lsls	r3, r3, #24
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	4413      	add	r3, r2
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	3301      	adds	r3, #1
 8002d22:	6839      	ldr	r1, [r7, #0]
 8002d24:	440b      	add	r3, r1
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	021b      	lsls	r3, r3, #8
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	3302      	adds	r3, #2
 8002d38:	6839      	ldr	r1, [r7, #0]
 8002d3a:	440b      	add	r3, r1
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	041b      	lsls	r3, r3, #16
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	3303      	adds	r3, #3
 8002d4e:	6839      	ldr	r1, [r7, #0]
 8002d50:	440b      	add	r3, r1
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	061b      	lsls	r3, r3, #24
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	613b      	str	r3, [r7, #16]
     return offset;
 8002d62:	693b      	ldr	r3, [r7, #16]
    }
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	4b03      	ldr	r3, [pc, #12]	; (8002d84 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8002d76:	4618      	mov	r0, r3
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	0800fc24 	.word	0x0800fc24

08002d88 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	0800fc44 	.word	0x0800fc44

08002da4 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe ff92 	bl	8001cd8 <_ZN3ros3MsgC1Ev>
 8002db4:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3308      	adds	r3, #8
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff feab 	bl	8002b20 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	619a      	str	r2, [r3, #24]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	61da      	str	r2, [r3, #28]
    {
    }
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	0800ff58 	.word	0x0800ff58

08002de4 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6859      	ldr	r1, [r3, #4]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	b2ca      	uxtb	r2, r1
 8002dfe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	0a19      	lsrs	r1, r3, #8
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	b2ca      	uxtb	r2, r1
 8002e10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	0c19      	lsrs	r1, r3, #16
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	3302      	adds	r3, #2
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	4413      	add	r3, r2
 8002e20:	b2ca      	uxtb	r2, r1
 8002e22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	0e19      	lsrs	r1, r3, #24
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3303      	adds	r3, #3
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	4413      	add	r3, r2
 8002e32:	b2ca      	uxtb	r2, r1
 8002e34:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d218      	bcs.n	8002e7c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x98>
      offset += this->dim[i].serialize(outbuffer + offset);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	18d0      	adds	r0, r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699a      	ldr	r2, [r3, #24]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	4413      	add	r3, r2
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	6839      	ldr	r1, [r7, #0]
 8002e66:	440a      	add	r2, r1
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4798      	blx	r3
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4413      	add	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	3301      	adds	r3, #1
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	e7e1      	b.n	8002e40 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69d9      	ldr	r1, [r3, #28]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	4413      	add	r3, r2
 8002e86:	b2ca      	uxtb	r2, r1
 8002e88:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	0a19      	lsrs	r1, r3, #8
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3301      	adds	r3, #1
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	4413      	add	r3, r2
 8002e98:	b2ca      	uxtb	r2, r1
 8002e9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	0c19      	lsrs	r1, r3, #16
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	b2ca      	uxtb	r2, r1
 8002eac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	0e19      	lsrs	r1, r3, #24
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3303      	adds	r3, #3
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	b2ca      	uxtb	r2, r1
 8002ebe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	60fb      	str	r3, [r7, #12]
      return offset;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
    }
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	3301      	adds	r3, #1
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	4413      	add	r3, r2
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	3302      	adds	r3, #2
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	4413      	add	r3, r2
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	041b      	lsls	r3, r3, #16
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	3303      	adds	r3, #3
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	4413      	add	r3, r2
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	061b      	lsls	r3, r3, #24
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	3304      	adds	r3, #4
 8002f22:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d90a      	bls.n	8002f44 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	4619      	mov	r1, r3
 8002f38:	4610      	mov	r0, r2
 8002f3a:	f00c fce9 	bl	800f910 <realloc>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d21b      	bcs.n	8002f90 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xc0>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f103 0008 	add.w	r0, r3, #8
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	4413      	add	r3, r2
 8002f64:	4619      	mov	r1, r3
 8002f66:	f7ff fe6c 	bl	8002c42 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	4413      	add	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	18d0      	adds	r0, r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3308      	adds	r3, #8
 8002f80:	2210      	movs	r2, #16
 8002f82:	4619      	mov	r1, r3
 8002f84:	f00c fc08 	bl	800f798 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	e7de      	b.n	8002f4e <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7e>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	4413      	add	r3, r2
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69da      	ldr	r2, [r3, #28]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	6839      	ldr	r1, [r7, #0]
 8002fa8:	440b      	add	r3, r1
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	021b      	lsls	r3, r3, #8
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	3302      	adds	r3, #2
 8002fbc:	6839      	ldr	r1, [r7, #0]
 8002fbe:	440b      	add	r3, r1
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	041b      	lsls	r3, r3, #16
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	3303      	adds	r3, #3
 8002fd2:	6839      	ldr	r1, [r7, #0]
 8002fd4:	440b      	add	r3, r1
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	617b      	str	r3, [r7, #20]
     return offset;
 8002fe6:	697b      	ldr	r3, [r7, #20]
    }
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	4b03      	ldr	r3, [pc, #12]	; (8003008 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	0800fc68 	.word	0x0800fc68

0800300c <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	4b03      	ldr	r3, [pc, #12]	; (8003024 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	0800fc84 	.word	0x0800fc84

08003028 <_ZN8std_msgs15UInt8MultiArrayC1Ev>:
      uint32_t data_length;
      typedef uint8_t _data_type;
      _data_type st_data;
      _data_type * data;

    UInt8MultiArray():
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), data(NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4618      	mov	r0, r3
 8003034:	f7fe fe50 	bl	8001cd8 <_ZN3ros3MsgC1Ev>
 8003038:	4a09      	ldr	r2, [pc, #36]	; (8003060 <_ZN8std_msgs15UInt8MultiArrayC1Ev+0x38>)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3304      	adds	r3, #4
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff feae 	bl	8002da4 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	625a      	str	r2, [r3, #36]	; 0x24
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	0800ff40 	.word	0x0800ff40

08003064 <_ZNK8std_msgs15UInt8MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
      offset += this->layout.serialize(outbuffer + offset);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	1d18      	adds	r0, r3, #4
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	4413      	add	r3, r2
 800307c:	4619      	mov	r1, r3
 800307e:	f7ff feb1 	bl	8002de4 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8003082:	4602      	mov	r2, r0
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	4413      	add	r3, r2
 8003094:	b2ca      	uxtb	r2, r1
 8003096:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	0a19      	lsrs	r1, r3, #8
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	3301      	adds	r3, #1
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	4413      	add	r3, r2
 80030a6:	b2ca      	uxtb	r2, r1
 80030a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	0c19      	lsrs	r1, r3, #16
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	3302      	adds	r3, #2
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	4413      	add	r3, r2
 80030b8:	b2ca      	uxtb	r2, r1
 80030ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	0e19      	lsrs	r1, r3, #24
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3303      	adds	r3, #3
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	4413      	add	r3, r2
 80030ca:	b2ca      	uxtb	r2, r1
 80030cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	3304      	adds	r3, #4
 80030d2:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < data_length; i++){
 80030d4:	2300      	movs	r3, #0
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d20f      	bcs.n	8003102 <_ZNK8std_msgs15UInt8MultiArray9serializeEPh+0x9e>
      *(outbuffer + offset + 0) = (this->data[i] >> (8 * 0)) & 0xFF;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	441a      	add	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6839      	ldr	r1, [r7, #0]
 80030ee:	440b      	add	r3, r1
 80030f0:	7812      	ldrb	r2, [r2, #0]
 80030f2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3301      	adds	r3, #1
 80030f8:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < data_length; i++){
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	3301      	adds	r3, #1
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	e7ea      	b.n	80030d8 <_ZNK8std_msgs15UInt8MultiArray9serializeEPh+0x74>
      }
      return offset;
 8003102:	68fb      	ldr	r3, [r7, #12]
    }
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <_ZN8std_msgs15UInt8MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	1d18      	adds	r0, r3, #4
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	4413      	add	r3, r2
 8003124:	4619      	mov	r1, r3
 8003126:	f7ff fed3 	bl	8002ed0 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 800312a:	4602      	mov	r2, r0
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	4413      	add	r3, r2
 8003130:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	4413      	add	r3, r2
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	3301      	adds	r3, #1
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	4413      	add	r3, r2
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	3302      	adds	r3, #2
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	4413      	add	r3, r2
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	041b      	lsls	r3, r3, #16
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	3303      	adds	r3, #3
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	4413      	add	r3, r2
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	061b      	lsls	r3, r3, #24
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	3304      	adds	r3, #4
 8003176:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	429a      	cmp	r2, r3
 8003180:	d908      	bls.n	8003194 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0x88>
        this->data = (uint8_t*)realloc(this->data, data_lengthT * sizeof(uint8_t));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	68f9      	ldr	r1, [r7, #12]
 8003188:	4618      	mov	r0, r3
 800318a:	f00c fbc1 	bl	800f910 <realloc>
 800318e:	4602      	mov	r2, r0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d215      	bcs.n	80031d4 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0xc8>
      this->st_data =  ((uint8_t) (*(inbuffer + offset)));
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	4413      	add	r3, r2
 80031ae:	781a      	ldrb	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	3301      	adds	r3, #1
 80031ba:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(uint8_t));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	3228      	adds	r2, #40	; 0x28
 80031c8:	7812      	ldrb	r2, [r2, #0]
 80031ca:	701a      	strb	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	3301      	adds	r3, #1
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	e7e4      	b.n	800319e <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0x92>
      }
     return offset;
 80031d4:	697b      	ldr	r3, [r7, #20]
    }
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <_ZN8std_msgs15UInt8MultiArray7getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8MultiArray"; };
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <_ZN8std_msgs15UInt8MultiArray7getTypeEv+0x18>)
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	0800fca8 	.word	0x0800fca8

080031fc <_ZN8std_msgs15UInt8MultiArray6getMD5Ev>:
    const char * getMD5(){ return "82373f1612381bb6ee473b5cd6f5d89c"; };
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	4b03      	ldr	r3, [pc, #12]	; (8003214 <_ZN8std_msgs15UInt8MultiArray6getMD5Ev+0x18>)
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	0800fcc4 	.word	0x0800fcc4

08003218 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe fd58 	bl	8001cd8 <_ZN3ros3MsgC1Ev>
 8003228:	4a09      	ldr	r2, [pc, #36]	; (8003250 <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	60da      	str	r2, [r3, #12]
    {
    }
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	0800ff28 	.word	0x0800ff28

08003254 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	441a      	add	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	edd3 7a01 	vldr	s15, [r3, #4]
 800326e:	eeb0 0a67 	vmov.f32	s0, s15
 8003272:	4610      	mov	r0, r2
 8003274:	f7fe fc52 	bl	8001b1c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4413      	add	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	441a      	add	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	edd3 7a02 	vldr	s15, [r3, #8]
 800328c:	eeb0 0a67 	vmov.f32	s0, s15
 8003290:	4610      	mov	r0, r2
 8003292:	f7fe fc43 	bl	8001b1c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003296:	4602      	mov	r2, r0
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	441a      	add	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80032aa:	eeb0 0a67 	vmov.f32	s0, s15
 80032ae:	4610      	mov	r0, r2
 80032b0:	f7fe fc34 	bl	8001b1c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80032b4:	4602      	mov	r2, r0
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4413      	add	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
      return offset;
 80032bc:	68fb      	ldr	r3, [r7, #12]
    }
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	441a      	add	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3304      	adds	r3, #4
 80032de:	4619      	mov	r1, r3
 80032e0:	4610      	mov	r0, r2
 80032e2:	f7fe fc87 	bl	8001bf4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80032e6:	4602      	mov	r2, r0
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	441a      	add	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3308      	adds	r3, #8
 80032f8:	4619      	mov	r1, r3
 80032fa:	4610      	mov	r0, r2
 80032fc:	f7fe fc7a 	bl	8001bf4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003300:	4602      	mov	r2, r0
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4413      	add	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	441a      	add	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	330c      	adds	r3, #12
 8003312:	4619      	mov	r1, r3
 8003314:	4610      	mov	r0, r2
 8003316:	f7fe fc6d 	bl	8001bf4 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800331a:	4602      	mov	r2, r0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4413      	add	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
     return offset;
 8003322:	68fb      	ldr	r3, [r7, #12]
    }
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	4b03      	ldr	r3, [pc, #12]	; (8003344 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	0800fce8 	.word	0x0800fce8

08003348 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	4b03      	ldr	r3, [pc, #12]	; (8003360 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	0800fd00 	.word	0x0800fd00

08003364 <rpm_rightFront_subCb>:
static nbt_t sensors1_3_data_nbt;
static nbt_t sensors4_6_data_nbt;
static nbt_t sensors7_8_data_nbt;

extern "C" void rpm_rightFront_subCb(const std_msgs::Int8& msg)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003372:	2b05      	cmp	r3, #5
 8003374:	dd08      	ble.n	8003388 <rpm_rightFront_subCb+0x24>
		speedDataRightFrontWheel = msg.data;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800337c:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <rpm_rightFront_subCb+0x6c>)
 800337e:	701a      	strb	r2, [r3, #0]
		sideDataRightFrontWheel = 0; //CW
 8003380:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <rpm_rightFront_subCb+0x70>)
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
	}
	else if (msg.data == 0) {
		speedDataRightFrontWheel = 0;
		sideDataRightFrontWheel = 2;
	}
}
 8003386:	e01d      	b.n	80033c4 <rpm_rightFront_subCb+0x60>
	else if (msg.data <= -6) {
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800338e:	f113 0f05 	cmn.w	r3, #5
 8003392:	da0c      	bge.n	80033ae <rpm_rightFront_subCb+0x4a>
		speedDataRightFrontWheel = -(msg.data);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	425b      	negs	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	b25a      	sxtb	r2, r3
 80033a2:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <rpm_rightFront_subCb+0x6c>)
 80033a4:	701a      	strb	r2, [r3, #0]
		sideDataRightFrontWheel = 1; //CCW
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <rpm_rightFront_subCb+0x70>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	701a      	strb	r2, [r3, #0]
}
 80033ac:	e00a      	b.n	80033c4 <rpm_rightFront_subCb+0x60>
	else if (msg.data == 0) {
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d105      	bne.n	80033c4 <rpm_rightFront_subCb+0x60>
		speedDataRightFrontWheel = 0;
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <rpm_rightFront_subCb+0x6c>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]
		sideDataRightFrontWheel = 2;
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <rpm_rightFront_subCb+0x70>)
 80033c0:	2202      	movs	r2, #2
 80033c2:	701a      	strb	r2, [r3, #0]
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	10000478 	.word	0x10000478
 80033d4:	1000047c 	.word	0x1000047c

080033d8 <rpm_leftFront_subCb>:

extern "C" void rpm_leftFront_subCb(const std_msgs::Int8& msg)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80033e6:	2b05      	cmp	r3, #5
 80033e8:	dd08      	ble.n	80033fc <rpm_leftFront_subCb+0x24>
		speedDataLeftFrontWheel = msg.data;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80033f0:	4b12      	ldr	r3, [pc, #72]	; (800343c <rpm_leftFront_subCb+0x64>)
 80033f2:	701a      	strb	r2, [r3, #0]
		sideDataLeftFrontWheel = 1; //CCW
 80033f4:	4b12      	ldr	r3, [pc, #72]	; (8003440 <rpm_leftFront_subCb+0x68>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	701a      	strb	r2, [r3, #0]
	}
	else {
		speedDataLeftFrontWheel = 0;
		sideDataLeftFrontWheel = 2;
	}
}
 80033fa:	e018      	b.n	800342e <rpm_leftFront_subCb+0x56>
	else if (msg.data <= -6) {
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003402:	f113 0f05 	cmn.w	r3, #5
 8003406:	da0c      	bge.n	8003422 <rpm_leftFront_subCb+0x4a>
		speedDataLeftFrontWheel = -(msg.data);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	425b      	negs	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	b25a      	sxtb	r2, r3
 8003416:	4b09      	ldr	r3, [pc, #36]	; (800343c <rpm_leftFront_subCb+0x64>)
 8003418:	701a      	strb	r2, [r3, #0]
		sideDataLeftFrontWheel = 0; //CW
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <rpm_leftFront_subCb+0x68>)
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
}
 8003420:	e005      	b.n	800342e <rpm_leftFront_subCb+0x56>
		speedDataLeftFrontWheel = 0;
 8003422:	4b06      	ldr	r3, [pc, #24]	; (800343c <rpm_leftFront_subCb+0x64>)
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
		sideDataLeftFrontWheel = 2;
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <rpm_leftFront_subCb+0x68>)
 800342a:	2202      	movs	r2, #2
 800342c:	701a      	strb	r2, [r3, #0]
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	10000479 	.word	0x10000479
 8003440:	1000047d 	.word	0x1000047d

08003444 <rpm_rightBack_subCb>:

extern "C" void rpm_rightBack_subCb(const std_msgs::Int8& msg)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003452:	2b05      	cmp	r3, #5
 8003454:	dd08      	ble.n	8003468 <rpm_rightBack_subCb+0x24>
		speedDataRightBackWheel = msg.data;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800345c:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <rpm_rightBack_subCb+0x64>)
 800345e:	701a      	strb	r2, [r3, #0]
		sideDataRightBackWheel = 0; //CW
 8003460:	4b12      	ldr	r3, [pc, #72]	; (80034ac <rpm_rightBack_subCb+0x68>)
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]
	}
	else {
		speedDataRightBackWheel = 0;
		sideDataRightBackWheel = 2;
	}
}
 8003466:	e018      	b.n	800349a <rpm_rightBack_subCb+0x56>
	else if (msg.data <= -6) {
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800346e:	f113 0f05 	cmn.w	r3, #5
 8003472:	da0c      	bge.n	800348e <rpm_rightBack_subCb+0x4a>
		speedDataRightBackWheel = -(msg.data);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	425b      	negs	r3, r3
 800347e:	b2db      	uxtb	r3, r3
 8003480:	b25a      	sxtb	r2, r3
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <rpm_rightBack_subCb+0x64>)
 8003484:	701a      	strb	r2, [r3, #0]
		sideDataRightBackWheel = 1; //CCW
 8003486:	4b09      	ldr	r3, [pc, #36]	; (80034ac <rpm_rightBack_subCb+0x68>)
 8003488:	2201      	movs	r2, #1
 800348a:	701a      	strb	r2, [r3, #0]
}
 800348c:	e005      	b.n	800349a <rpm_rightBack_subCb+0x56>
		speedDataRightBackWheel = 0;
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <rpm_rightBack_subCb+0x64>)
 8003490:	2200      	movs	r2, #0
 8003492:	701a      	strb	r2, [r3, #0]
		sideDataRightBackWheel = 2;
 8003494:	4b05      	ldr	r3, [pc, #20]	; (80034ac <rpm_rightBack_subCb+0x68>)
 8003496:	2202      	movs	r2, #2
 8003498:	701a      	strb	r2, [r3, #0]
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	1000047a 	.word	0x1000047a
 80034ac:	1000047e 	.word	0x1000047e

080034b0 <rpm_leftBack_subCb>:

extern "C" void rpm_leftBack_subCb(const std_msgs::Int8& msg)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80034be:	2b05      	cmp	r3, #5
 80034c0:	dd08      	ble.n	80034d4 <rpm_leftBack_subCb+0x24>
		speedDataLeftBackWheel = msg.data;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80034c8:	4b12      	ldr	r3, [pc, #72]	; (8003514 <rpm_leftBack_subCb+0x64>)
 80034ca:	701a      	strb	r2, [r3, #0]
		sideDataLeftBackWheel = 1; //CCW
 80034cc:	4b12      	ldr	r3, [pc, #72]	; (8003518 <rpm_leftBack_subCb+0x68>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]
	}
	else {
		speedDataLeftBackWheel = 0;
		sideDataLeftBackWheel = 2;
	}
}
 80034d2:	e018      	b.n	8003506 <rpm_leftBack_subCb+0x56>
	else if (msg.data <= -6) {
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80034da:	f113 0f05 	cmn.w	r3, #5
 80034de:	da0c      	bge.n	80034fa <rpm_leftBack_subCb+0x4a>
		speedDataLeftBackWheel = -(msg.data);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	425b      	negs	r3, r3
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	b25a      	sxtb	r2, r3
 80034ee:	4b09      	ldr	r3, [pc, #36]	; (8003514 <rpm_leftBack_subCb+0x64>)
 80034f0:	701a      	strb	r2, [r3, #0]
		sideDataLeftBackWheel = 0; //CW
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <rpm_leftBack_subCb+0x68>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
}
 80034f8:	e005      	b.n	8003506 <rpm_leftBack_subCb+0x56>
		speedDataLeftBackWheel = 0;
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <rpm_leftBack_subCb+0x64>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
		sideDataLeftBackWheel = 2;
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <rpm_leftBack_subCb+0x68>)
 8003502:	2202      	movs	r2, #2
 8003504:	701a      	strb	r2, [r3, #0]
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	1000047b 	.word	0x1000047b
 8003518:	1000047f 	.word	0x1000047f

0800351c <cdc_receive_put>:

extern "C" void cdc_receive_put(uint8_t value)
	{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
		ringbuffer_putchar(&rb, value);
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	4619      	mov	r1, r3
 800352a:	4803      	ldr	r0, [pc, #12]	; (8003538 <cdc_receive_put+0x1c>)
 800352c:	f001 f980 	bl	8004830 <_Z18ringbuffer_putcharP10ringbufferh>
	}
 8003530:	bf00      	nop
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	100004d0 	.word	0x100004d0

0800353c <init_ROS>:
extern "C" void init_ROS(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
	ringbuffer_init(&rb, RxBuffer, RxBufferSize);
 8003540:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003544:	4936      	ldr	r1, [pc, #216]	; (8003620 <init_ROS+0xe4>)
 8003546:	4837      	ldr	r0, [pc, #220]	; (8003624 <init_ROS+0xe8>)
 8003548:	f001 fa18 	bl	800497c <_Z15ringbuffer_initP10ringbufferPhs>
	// Initialize ROS
	nh.initNode();
 800354c:	4836      	ldr	r0, [pc, #216]	; (8003628 <init_ROS+0xec>)
 800354e:	f000 fb1f 	bl	8003b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

	nh.subscribe(rpm_rightFront_sub);
 8003552:	4936      	ldr	r1, [pc, #216]	; (800362c <init_ROS+0xf0>)
 8003554:	4834      	ldr	r0, [pc, #208]	; (8003628 <init_ROS+0xec>)
 8003556:	f000 fb38 	bl	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.subscribe(rpm_leftFront_sub);
 800355a:	4935      	ldr	r1, [pc, #212]	; (8003630 <init_ROS+0xf4>)
 800355c:	4832      	ldr	r0, [pc, #200]	; (8003628 <init_ROS+0xec>)
 800355e:	f000 fb34 	bl	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.subscribe(rpm_rightBack_sub);
 8003562:	4934      	ldr	r1, [pc, #208]	; (8003634 <init_ROS+0xf8>)
 8003564:	4830      	ldr	r0, [pc, #192]	; (8003628 <init_ROS+0xec>)
 8003566:	f000 fb30 	bl	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.subscribe(rpm_leftBack_sub);
 800356a:	4933      	ldr	r1, [pc, #204]	; (8003638 <init_ROS+0xfc>)
 800356c:	482e      	ldr	r0, [pc, #184]	; (8003628 <init_ROS+0xec>)
 800356e:	f000 fb2c 	bl	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>

	nh.advertise(stm);
 8003572:	4932      	ldr	r1, [pc, #200]	; (800363c <init_ROS+0x100>)
 8003574:	482c      	ldr	r0, [pc, #176]	; (8003628 <init_ROS+0xec>)
 8003576:	f000 fb55 	bl	8003c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(gyro);
 800357a:	4931      	ldr	r1, [pc, #196]	; (8003640 <init_ROS+0x104>)
 800357c:	482a      	ldr	r0, [pc, #168]	; (8003628 <init_ROS+0xec>)
 800357e:	f000 fb51 	bl	8003c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(accel);
 8003582:	4930      	ldr	r1, [pc, #192]	; (8003644 <init_ROS+0x108>)
 8003584:	4828      	ldr	r0, [pc, #160]	; (8003628 <init_ROS+0xec>)
 8003586:	f000 fb4d 	bl	8003c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_left_front);
 800358a:	492f      	ldr	r1, [pc, #188]	; (8003648 <init_ROS+0x10c>)
 800358c:	4826      	ldr	r0, [pc, #152]	; (8003628 <init_ROS+0xec>)
 800358e:	f000 fb49 	bl	8003c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_right_front);
 8003592:	492e      	ldr	r1, [pc, #184]	; (800364c <init_ROS+0x110>)
 8003594:	4824      	ldr	r0, [pc, #144]	; (8003628 <init_ROS+0xec>)
 8003596:	f000 fb45 	bl	8003c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_left_back);
 800359a:	492d      	ldr	r1, [pc, #180]	; (8003650 <init_ROS+0x114>)
 800359c:	4822      	ldr	r0, [pc, #136]	; (8003628 <init_ROS+0xec>)
 800359e:	f000 fb41 	bl	8003c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_right_back);
 80035a2:	492c      	ldr	r1, [pc, #176]	; (8003654 <init_ROS+0x118>)
 80035a4:	4820      	ldr	r0, [pc, #128]	; (8003628 <init_ROS+0xec>)
 80035a6:	f000 fb3d 	bl	8003c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	//nh.advertise(diagnostic_data);
	nh.advertise(sensa_data);
 80035aa:	492b      	ldr	r1, [pc, #172]	; (8003658 <init_ROS+0x11c>)
 80035ac:	481e      	ldr	r0, [pc, #120]	; (8003628 <init_ROS+0xec>)
 80035ae:	f000 fb39 	bl	8003c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(sensb_data);
 80035b2:	492a      	ldr	r1, [pc, #168]	; (800365c <init_ROS+0x120>)
 80035b4:	481c      	ldr	r0, [pc, #112]	; (8003628 <init_ROS+0xec>)
 80035b6:	f000 fb35 	bl	8003c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(sensc_data);
 80035ba:	4929      	ldr	r1, [pc, #164]	; (8003660 <init_ROS+0x124>)
 80035bc:	481a      	ldr	r0, [pc, #104]	; (8003628 <init_ROS+0xec>)
 80035be:	f000 fb31 	bl	8003c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	NBT_init(&rpm_left_front_nbt, 5);
 80035c2:	2105      	movs	r1, #5
 80035c4:	4827      	ldr	r0, [pc, #156]	; (8003664 <init_ROS+0x128>)
 80035c6:	f001 f8b6 	bl	8004736 <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_right_front_nbt, 5);
 80035ca:	2105      	movs	r1, #5
 80035cc:	4826      	ldr	r0, [pc, #152]	; (8003668 <init_ROS+0x12c>)
 80035ce:	f001 f8b2 	bl	8004736 <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_left_back_nbt, 5);
 80035d2:	2105      	movs	r1, #5
 80035d4:	4825      	ldr	r0, [pc, #148]	; (800366c <init_ROS+0x130>)
 80035d6:	f001 f8ae 	bl	8004736 <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_right_back_nbt, 5);
 80035da:	2105      	movs	r1, #5
 80035dc:	4824      	ldr	r0, [pc, #144]	; (8003670 <init_ROS+0x134>)
 80035de:	f001 f8aa 	bl	8004736 <_Z8NBT_initP5nbt_tm>

	NBT_init(&diagnostics_data_nbt, 5);
 80035e2:	2105      	movs	r1, #5
 80035e4:	4823      	ldr	r0, [pc, #140]	; (8003674 <init_ROS+0x138>)
 80035e6:	f001 f8a6 	bl	8004736 <_Z8NBT_initP5nbt_tm>
	NBT_init(&sensors1_3_data_nbt, 5);
 80035ea:	2105      	movs	r1, #5
 80035ec:	4822      	ldr	r0, [pc, #136]	; (8003678 <init_ROS+0x13c>)
 80035ee:	f001 f8a2 	bl	8004736 <_Z8NBT_initP5nbt_tm>
	NBT_init(&sensors4_6_data_nbt, 5);
 80035f2:	2105      	movs	r1, #5
 80035f4:	4821      	ldr	r0, [pc, #132]	; (800367c <init_ROS+0x140>)
 80035f6:	f001 f89e 	bl	8004736 <_Z8NBT_initP5nbt_tm>
	NBT_init(&sensors7_8_data_nbt, 5);
 80035fa:	2105      	movs	r1, #5
 80035fc:	4820      	ldr	r0, [pc, #128]	; (8003680 <init_ROS+0x144>)
 80035fe:	f001 f89a 	bl	8004736 <_Z8NBT_initP5nbt_tm>

	NBT_init(&gyro_nbt, 1);
 8003602:	2101      	movs	r1, #1
 8003604:	481f      	ldr	r0, [pc, #124]	; (8003684 <init_ROS+0x148>)
 8003606:	f001 f896 	bl	8004736 <_Z8NBT_initP5nbt_tm>
	NBT_init(&accel_nbt, 1);
 800360a:	2101      	movs	r1, #1
 800360c:	481e      	ldr	r0, [pc, #120]	; (8003688 <init_ROS+0x14c>)
 800360e:	f001 f892 	bl	8004736 <_Z8NBT_initP5nbt_tm>

	NBT_init(&ros_nbt, 1);
 8003612:	2101      	movs	r1, #1
 8003614:	481d      	ldr	r0, [pc, #116]	; (800368c <init_ROS+0x150>)
 8003616:	f001 f88e 	bl	8004736 <_Z8NBT_initP5nbt_tm>
}
 800361a:	bf00      	nop
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	10005ae0 	.word	0x10005ae0
 8003624:	100004d0 	.word	0x100004d0
 8003628:	100004dc 	.word	0x100004dc
 800362c:	10000b68 	.word	0x10000b68
 8003630:	10000b84 	.word	0x10000b84
 8003634:	10000ba0 	.word	0x10000ba0
 8003638:	10000bbc 	.word	0x10000bbc
 800363c:	10000adc 	.word	0x10000adc
 8003640:	10000af0 	.word	0x10000af0
 8003644:	10000b04 	.word	0x10000b04
 8003648:	10000b2c 	.word	0x10000b2c
 800364c:	10000b18 	.word	0x10000b18
 8003650:	10000b54 	.word	0x10000b54
 8003654:	10000b40 	.word	0x10000b40
 8003658:	10000bec 	.word	0x10000bec
 800365c:	10000c00 	.word	0x10000c00
 8003660:	10000c14 	.word	0x10000c14
 8003664:	10000c40 	.word	0x10000c40
 8003668:	10000c38 	.word	0x10000c38
 800366c:	10000c50 	.word	0x10000c50
 8003670:	10000c48 	.word	0x10000c48
 8003674:	10000c60 	.word	0x10000c60
 8003678:	10000c68 	.word	0x10000c68
 800367c:	10000c70 	.word	0x10000c70
 8003680:	10000c78 	.word	0x10000c78
 8003684:	10000c28 	.word	0x10000c28
 8003688:	10000c30 	.word	0x10000c30
 800368c:	10000c58 	.word	0x10000c58

08003690 <sensors1_3_data_handler>:

extern "C" void sensors1_3_data_handler(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
	//if (NBT_handler(&sensors1_3_data_nbt)) {
		sen1_3_msg.x = static_cast<float>(sensorData1);
 8003694:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <sensors1_3_data_handler+0x48>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	ee07 3a90 	vmov	s15, r3
 800369c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a0:	4b0e      	ldr	r3, [pc, #56]	; (80036dc <sensors1_3_data_handler+0x4c>)
 80036a2:	edc3 7a01 	vstr	s15, [r3, #4]
		sen1_3_msg.y = static_cast<float>(sensorData2);
 80036a6:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <sensors1_3_data_handler+0x50>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036b2:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <sensors1_3_data_handler+0x4c>)
 80036b4:	edc3 7a02 	vstr	s15, [r3, #8]
		sen1_3_msg.z = static_cast<float>(sensorData3);
 80036b8:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <sensors1_3_data_handler+0x54>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	ee07 3a90 	vmov	s15, r3
 80036c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <sensors1_3_data_handler+0x4c>)
 80036c6:	edc3 7a03 	vstr	s15, [r3, #12]
    	sensa_data.publish(&sen1_3_msg);
 80036ca:	4904      	ldr	r1, [pc, #16]	; (80036dc <sensors1_3_data_handler+0x4c>)
 80036cc:	4806      	ldr	r0, [pc, #24]	; (80036e8 <sensors1_3_data_handler+0x58>)
 80036ce:	f7ff f950 	bl	8002972 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	//}
}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	10000480 	.word	0x10000480
 80036dc:	10000aac 	.word	0x10000aac
 80036e0:	10000481 	.word	0x10000481
 80036e4:	10000482 	.word	0x10000482
 80036e8:	10000bec 	.word	0x10000bec

080036ec <sensors4_6_data_handler>:

extern "C" void sensors4_6_data_handler(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
	//if (NBT_handler(&sensors4_6_data_nbt)) {
		sen4_6_msg.x = static_cast<float>(sensorData4);
 80036f0:	4b10      	ldr	r3, [pc, #64]	; (8003734 <sensors4_6_data_handler+0x48>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	ee07 3a90 	vmov	s15, r3
 80036f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036fc:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <sensors4_6_data_handler+0x4c>)
 80036fe:	edc3 7a01 	vstr	s15, [r3, #4]
		sen4_6_msg.y = static_cast<float>(sensorData5);
 8003702:	4b0e      	ldr	r3, [pc, #56]	; (800373c <sensors4_6_data_handler+0x50>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	ee07 3a90 	vmov	s15, r3
 800370a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370e:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <sensors4_6_data_handler+0x4c>)
 8003710:	edc3 7a02 	vstr	s15, [r3, #8]
		sen4_6_msg.z = static_cast<float>(sensorData6);
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <sensors4_6_data_handler+0x54>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	ee07 3a90 	vmov	s15, r3
 800371c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003720:	4b05      	ldr	r3, [pc, #20]	; (8003738 <sensors4_6_data_handler+0x4c>)
 8003722:	edc3 7a03 	vstr	s15, [r3, #12]
    	sensb_data.publish(&sen4_6_msg);
 8003726:	4904      	ldr	r1, [pc, #16]	; (8003738 <sensors4_6_data_handler+0x4c>)
 8003728:	4806      	ldr	r0, [pc, #24]	; (8003744 <sensors4_6_data_handler+0x58>)
 800372a:	f7ff f922 	bl	8002972 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	//}
}
 800372e:	bf00      	nop
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	10000483 	.word	0x10000483
 8003738:	10000abc 	.word	0x10000abc
 800373c:	10000484 	.word	0x10000484
 8003740:	10000485 	.word	0x10000485
 8003744:	10000c00 	.word	0x10000c00

08003748 <rpm_right_front_handler>:
    	}
	//}
}

extern "C" void rpm_right_front_handler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
	//if (NBT_handler(&rpm_right_front_nbt))
	//{
		if (sideRXDataRightFrontWheel == 2) {
 800374c:	4b12      	ldr	r3, [pc, #72]	; (8003798 <rpm_right_front_handler+0x50>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d105      	bne.n	8003760 <rpm_right_front_handler+0x18>
		    uint_msg_right_front.data = speedRXDataRightFrontWheel;
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <rpm_right_front_handler+0x54>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	b25a      	sxtb	r2, r3
 800375a:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <rpm_right_front_handler+0x58>)
 800375c:	711a      	strb	r2, [r3, #4]
 800375e:	e00e      	b.n	800377e <rpm_right_front_handler+0x36>
		}
		else if (sideRXDataRightFrontWheel == 1) {
 8003760:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <rpm_right_front_handler+0x50>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d107      	bne.n	8003778 <rpm_right_front_handler+0x30>
			uint_msg_right_front.data = -speedRXDataRightFrontWheel;
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <rpm_right_front_handler+0x54>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	425b      	negs	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	b25a      	sxtb	r2, r3
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <rpm_right_front_handler+0x58>)
 8003774:	711a      	strb	r2, [r3, #4]
 8003776:	e002      	b.n	800377e <rpm_right_front_handler+0x36>
		}
		else {
			uint_msg_right_front.data = 0;
 8003778:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <rpm_right_front_handler+0x58>)
 800377a:	2200      	movs	r2, #0
 800377c:	711a      	strb	r2, [r3, #4]
		}
    	if (nh.connected()) {
 800377e:	4809      	ldr	r0, [pc, #36]	; (80037a4 <rpm_right_front_handler+0x5c>)
 8003780:	f000 fa7e 	bl	8003c80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <rpm_right_front_handler+0x4a>
    		rpm_right_front.publish(&uint_msg_right_front);
 800378a:	4905      	ldr	r1, [pc, #20]	; (80037a0 <rpm_right_front_handler+0x58>)
 800378c:	4806      	ldr	r0, [pc, #24]	; (80037a8 <rpm_right_front_handler+0x60>)
 800378e:	f7ff f8f0 	bl	8002972 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
	//}
}
 8003792:	bf00      	nop
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	10004ef0 	.word	0x10004ef0
 800379c:	10004f15 	.word	0x10004f15
 80037a0:	10000a0c 	.word	0x10000a0c
 80037a4:	100004dc 	.word	0x100004dc
 80037a8:	10000b18 	.word	0x10000b18

080037ac <rpm_left_front_handler>:

extern "C" void rpm_left_front_handler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
	//if (NBT_handler(&rpm_left_front_nbt))
	//{
		if (sideRXDataLeftFrontWheel == 1) {
 80037b0:	4b12      	ldr	r3, [pc, #72]	; (80037fc <rpm_left_front_handler+0x50>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d105      	bne.n	80037c4 <rpm_left_front_handler+0x18>
		    uint_msg_left_front.data = speedRXDataLeftFrontWheel;
 80037b8:	4b11      	ldr	r3, [pc, #68]	; (8003800 <rpm_left_front_handler+0x54>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b25a      	sxtb	r2, r3
 80037be:	4b11      	ldr	r3, [pc, #68]	; (8003804 <rpm_left_front_handler+0x58>)
 80037c0:	711a      	strb	r2, [r3, #4]
 80037c2:	e00e      	b.n	80037e2 <rpm_left_front_handler+0x36>
		}
		else if (sideRXDataLeftFrontWheel == 2) {
 80037c4:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <rpm_left_front_handler+0x50>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d107      	bne.n	80037dc <rpm_left_front_handler+0x30>
		  	uint_msg_left_front.data = -speedRXDataLeftFrontWheel;
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <rpm_left_front_handler+0x54>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	425b      	negs	r3, r3
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	b25a      	sxtb	r2, r3
 80037d6:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <rpm_left_front_handler+0x58>)
 80037d8:	711a      	strb	r2, [r3, #4]
 80037da:	e002      	b.n	80037e2 <rpm_left_front_handler+0x36>
		}
		else {
		  	uint_msg_left_front.data = 0;
 80037dc:	4b09      	ldr	r3, [pc, #36]	; (8003804 <rpm_left_front_handler+0x58>)
 80037de:	2200      	movs	r2, #0
 80037e0:	711a      	strb	r2, [r3, #4]
		}
    	if (nh.connected()) {
 80037e2:	4809      	ldr	r0, [pc, #36]	; (8003808 <rpm_left_front_handler+0x5c>)
 80037e4:	f000 fa4c 	bl	8003c80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <rpm_left_front_handler+0x4a>
    		rpm_left_front.publish(&uint_msg_left_front);
 80037ee:	4905      	ldr	r1, [pc, #20]	; (8003804 <rpm_left_front_handler+0x58>)
 80037f0:	4806      	ldr	r0, [pc, #24]	; (800380c <rpm_left_front_handler+0x60>)
 80037f2:	f7ff f8be 	bl	8002972 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
	//}
}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	10004f0c 	.word	0x10004f0c
 8003800:	10004aa8 	.word	0x10004aa8
 8003804:	10000a14 	.word	0x10000a14
 8003808:	100004dc 	.word	0x100004dc
 800380c:	10000b2c 	.word	0x10000b2c

08003810 <rpm_right_back_handler>:

extern "C" void rpm_right_back_handler(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
	//if (NBT_handler(&rpm_right_back_nbt))
	//{
		if (sideRXDataRightBackWheel == 2) {
 8003814:	4b12      	ldr	r3, [pc, #72]	; (8003860 <rpm_right_back_handler+0x50>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b02      	cmp	r3, #2
 800381a:	d105      	bne.n	8003828 <rpm_right_back_handler+0x18>
		    uint_msg_right_back.data = speedRXDataRightBackWheel;
 800381c:	4b11      	ldr	r3, [pc, #68]	; (8003864 <rpm_right_back_handler+0x54>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	b25a      	sxtb	r2, r3
 8003822:	4b11      	ldr	r3, [pc, #68]	; (8003868 <rpm_right_back_handler+0x58>)
 8003824:	711a      	strb	r2, [r3, #4]
 8003826:	e00e      	b.n	8003846 <rpm_right_back_handler+0x36>
		}
		else if (sideRXDataRightBackWheel == 1) {
 8003828:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <rpm_right_back_handler+0x50>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d107      	bne.n	8003840 <rpm_right_back_handler+0x30>
			uint_msg_right_back.data = -speedRXDataRightBackWheel;
 8003830:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <rpm_right_back_handler+0x54>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	425b      	negs	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	b25a      	sxtb	r2, r3
 800383a:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <rpm_right_back_handler+0x58>)
 800383c:	711a      	strb	r2, [r3, #4]
 800383e:	e002      	b.n	8003846 <rpm_right_back_handler+0x36>
		}
		else {
			uint_msg_right_back.data = 0;
 8003840:	4b09      	ldr	r3, [pc, #36]	; (8003868 <rpm_right_back_handler+0x58>)
 8003842:	2200      	movs	r2, #0
 8003844:	711a      	strb	r2, [r3, #4]
		}
    	if (nh.connected()) {
 8003846:	4809      	ldr	r0, [pc, #36]	; (800386c <rpm_right_back_handler+0x5c>)
 8003848:	f000 fa1a 	bl	8003c80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <rpm_right_back_handler+0x4a>
    		rpm_right_back.publish(&uint_msg_right_back);
 8003852:	4905      	ldr	r1, [pc, #20]	; (8003868 <rpm_right_back_handler+0x58>)
 8003854:	4806      	ldr	r0, [pc, #24]	; (8003870 <rpm_right_back_handler+0x60>)
 8003856:	f7ff f88c 	bl	8002972 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
	//}
}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	10004a18 	.word	0x10004a18
 8003864:	10004ac8 	.word	0x10004ac8
 8003868:	10000a1c 	.word	0x10000a1c
 800386c:	100004dc 	.word	0x100004dc
 8003870:	10000b40 	.word	0x10000b40

08003874 <rpm_left_back_handler>:

extern "C" void rpm_left_back_handler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
	//if (NBT_handler(&rpm_left_back_nbt))
	//{
		if (sideRXDataLeftBackWheel == 1) {
 8003878:	4b12      	ldr	r3, [pc, #72]	; (80038c4 <rpm_left_back_handler+0x50>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d105      	bne.n	800388c <rpm_left_back_handler+0x18>
		  	uint_msg_left_back.data = speedRXDataLeftBackWheel;
 8003880:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <rpm_left_back_handler+0x54>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	b25a      	sxtb	r2, r3
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <rpm_left_back_handler+0x58>)
 8003888:	711a      	strb	r2, [r3, #4]
 800388a:	e00e      	b.n	80038aa <rpm_left_back_handler+0x36>
		}
		else if (sideRXDataLeftBackWheel == 2) {
 800388c:	4b0d      	ldr	r3, [pc, #52]	; (80038c4 <rpm_left_back_handler+0x50>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d107      	bne.n	80038a4 <rpm_left_back_handler+0x30>
			uint_msg_left_back.data = -speedRXDataLeftBackWheel;
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <rpm_left_back_handler+0x54>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	425b      	negs	r3, r3
 800389a:	b2db      	uxtb	r3, r3
 800389c:	b25a      	sxtb	r2, r3
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <rpm_left_back_handler+0x58>)
 80038a0:	711a      	strb	r2, [r3, #4]
 80038a2:	e002      	b.n	80038aa <rpm_left_back_handler+0x36>
		}
		else {
			uint_msg_left_back.data = 0;
 80038a4:	4b09      	ldr	r3, [pc, #36]	; (80038cc <rpm_left_back_handler+0x58>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	711a      	strb	r2, [r3, #4]
		}
		if (nh.connected()) {
 80038aa:	4809      	ldr	r0, [pc, #36]	; (80038d0 <rpm_left_back_handler+0x5c>)
 80038ac:	f000 f9e8 	bl	8003c80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <rpm_left_back_handler+0x4a>
			rpm_left_back.publish(&uint_msg_left_back);
 80038b6:	4905      	ldr	r1, [pc, #20]	; (80038cc <rpm_left_back_handler+0x58>)
 80038b8:	4806      	ldr	r0, [pc, #24]	; (80038d4 <rpm_left_back_handler+0x60>)
 80038ba:	f7ff f85a 	bl	8002972 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		}
	//}
}
 80038be:	bf00      	nop
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	10004ac0 	.word	0x10004ac0
 80038c8:	10004ab0 	.word	0x10004ab0
 80038cc:	10000a24 	.word	0x10000a24
 80038d0:	100004dc 	.word	0x100004dc
 80038d4:	10000b54 	.word	0x10000b54

080038d8 <gyro_handler>:

extern "C" void gyro_handler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
    gyro_msg.x = gyroX;
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <gyro_handler+0x34>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a0b      	ldr	r2, [pc, #44]	; (8003910 <gyro_handler+0x38>)
 80038e2:	6053      	str	r3, [r2, #4]
    gyro_msg.y = gyroY;
 80038e4:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <gyro_handler+0x3c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a09      	ldr	r2, [pc, #36]	; (8003910 <gyro_handler+0x38>)
 80038ea:	6093      	str	r3, [r2, #8]
    gyro_msg.z = gyroZ;
 80038ec:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <gyro_handler+0x40>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a07      	ldr	r2, [pc, #28]	; (8003910 <gyro_handler+0x38>)
 80038f2:	60d3      	str	r3, [r2, #12]
    if (nh.connected()) {
 80038f4:	4809      	ldr	r0, [pc, #36]	; (800391c <gyro_handler+0x44>)
 80038f6:	f000 f9c3 	bl	8003c80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <gyro_handler+0x30>
    	//if (NBT_handler(&gyro_nbt))
    	{
    		gyro.publish(&gyro_msg);
 8003900:	4903      	ldr	r1, [pc, #12]	; (8003910 <gyro_handler+0x38>)
 8003902:	4807      	ldr	r0, [pc, #28]	; (8003920 <gyro_handler+0x48>)
 8003904:	f7ff f835 	bl	8002972 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
    }
}
 8003908:	bf00      	nop
 800390a:	bd80      	pop	{r7, pc}
 800390c:	10004a98 	.word	0x10004a98
 8003910:	10000a8c 	.word	0x10000a8c
 8003914:	10004f80 	.word	0x10004f80
 8003918:	10004ab4 	.word	0x10004ab4
 800391c:	100004dc 	.word	0x100004dc
 8003920:	10000af0 	.word	0x10000af0

08003924 <accel_handler>:

extern "C" void accel_handler(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
    accel_msg.x = accelX;
 8003928:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <accel_handler+0x34>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a0b      	ldr	r2, [pc, #44]	; (800395c <accel_handler+0x38>)
 800392e:	6053      	str	r3, [r2, #4]
    accel_msg.y = accelY;
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <accel_handler+0x3c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a09      	ldr	r2, [pc, #36]	; (800395c <accel_handler+0x38>)
 8003936:	6093      	str	r3, [r2, #8]
    accel_msg.z = accelZ;
 8003938:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <accel_handler+0x40>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a07      	ldr	r2, [pc, #28]	; (800395c <accel_handler+0x38>)
 800393e:	60d3      	str	r3, [r2, #12]
    if (nh.connected()) {
 8003940:	4809      	ldr	r0, [pc, #36]	; (8003968 <accel_handler+0x44>)
 8003942:	f000 f99d 	bl	8003c80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <accel_handler+0x30>
    	//if (NBT_handler(&accel_nbt))
    	{
    		accel.publish(&accel_msg);
 800394c:	4903      	ldr	r1, [pc, #12]	; (800395c <accel_handler+0x38>)
 800394e:	4807      	ldr	r0, [pc, #28]	; (800396c <accel_handler+0x48>)
 8003950:	f7ff f80f 	bl	8002972 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
    }
}
 8003954:	bf00      	nop
 8003956:	bd80      	pop	{r7, pc}
 8003958:	10004a14 	.word	0x10004a14
 800395c:	10000a9c 	.word	0x10000a9c
 8003960:	10004a0c 	.word	0x10004a0c
 8003964:	10004ef8 	.word	0x10004ef8
 8003968:	100004dc 	.word	0x100004dc
 800396c:	10000b04 	.word	0x10000b04

08003970 <spinOnce>:

extern "C" void spinOnce(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
	//if (NBT_handler(&ros_nbt))	{
		nh.spinOnce();
 8003974:	4802      	ldr	r0, [pc, #8]	; (8003980 <spinOnce+0x10>)
 8003976:	f000 f990 	bl	8003c9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	//}
}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	100004dc 	.word	0x100004dc

08003984 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2b03      	cmp	r3, #3
 8003996:	d80d      	bhi.n	80039b4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	fa22 f103 	lsr.w	r1, r2, r3
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	b2ca      	uxtb	r2, r1
 80039aa:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	3301      	adds	r3, #1
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	e7ee      	b.n	8003992 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80039b4:	bf00      	nop
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d811      	bhi.n	80039fe <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6839      	ldr	r1, [r7, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	440a      	add	r2, r1
 80039e4:	7812      	ldrb	r2, [r2, #0]
 80039e6:	4611      	mov	r1, r2
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	00d2      	lsls	r2, r2, #3
 80039ec:	fa01 f202 	lsl.w	r2, r1, r2
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	3301      	adds	r3, #1
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	e7ea      	b.n	80039d4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
	...

08003a0c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	4a04      	ldr	r2, [pc, #16]	; (8003a28 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	0800ffb8 	.word	0x0800ffb8

08003a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff ffe8 	bl	8003a0c <_ZN3ros15NodeHandleBase_C1Ev>
 8003a3c:	4a39      	ldr	r2, [pc, #228]	; (8003b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xf8>)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3304      	adds	r3, #4
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe ffb3 	bl	80029b2 <_ZN13STM32HardwareC1Ev>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fe fcb0 	bl	80023c0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2b18      	cmp	r3, #24
 8003a68:	d80a      	bhi.n	8003a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003a72:	2100      	movs	r1, #0
 8003a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	e7f1      	b.n	8003a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a80:	2300      	movs	r3, #0
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b18      	cmp	r3, #24
 8003a88:	d80b      	bhi.n	8003aa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	2200      	movs	r2, #0
 8003a98:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	e7f0      	b.n	8003a84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aac:	d209      	bcs.n	8003ac2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x96>
      message_in[i] = 0;
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3318      	adds	r3, #24
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3301      	adds	r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	e7f1      	b.n	8003aa6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003acc:	d20a      	bcs.n	8003ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xb8>
      message_out[i] = 0;
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8003ad8:	2200      	movs	r2, #0
 8003ada:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	e7f0      	b.n	8003ac6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    req_param_resp.floats_length = 0;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    req_param_resp.floats = NULL;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    req_param_resp.ints_length = 0;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514

    spin_timeout_ = 0;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	615a      	str	r2, [r3, #20]
  }
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	0800ff14 	.word	0x0800ff14

08003b28 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	4a04      	ldr	r2, [pc, #16]	; (8003b44 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	0800ffa0 	.word	0x0800ffa0

08003b48 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff ffe5 	bl	8003b28 <_ZN3ros11Subscriber_C1Ev>
 8003b5e:	4a0b      	ldr	r2, [pc, #44]	; (8003b8c <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	330c      	adds	r3, #12
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fe ff6d 	bl	8002a48 <_ZN8std_msgs4Int8C1Ev>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	615a      	str	r2, [r3, #20]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	609a      	str	r2, [r3, #8]
  };
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	0800fefc 	.word	0x0800fefc

08003b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fe ff13 	bl	80029c8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003bca:	b480      	push	{r7}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b18      	cmp	r3, #24
 8003bdc:	dc1b      	bgt.n	8003c16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10e      	bne.n	8003c0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	605a      	str	r2, [r3, #4]
        return true;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e004      	b.n	8003c18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	3301      	adds	r3, #1
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e7e0      	b.n	8003bd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0xe>
      }
    }
    return false;
 8003c16:	2300      	movs	r3, #0
  }
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b18      	cmp	r3, #24
 8003c36:	dc1c      	bgt.n	8003c72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4e>
      if (publishers[i] == 0) // empty slot
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d110      	bne.n	8003c6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003c50:	6839      	ldr	r1, [r7, #0]
 8003c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	60da      	str	r2, [r3, #12]
        return true;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e004      	b.n	8003c74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	e7df      	b.n	8003c32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8003c72:	2300      	movs	r3, #0
  }
 8003c74:	4618      	mov	r0, r3
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
    return configured_;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 8003c8e:	4618      	mov	r0, r3
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe fec2 	bl	8002a30 <_ZN13STM32Hardware4timeEv>
 8003cac:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d903      	bls.n	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d009      	beq.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d903      	bls.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d013      	beq.n	8003d16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe fe9c 	bl	8002a30 <_ZN13STM32Hardware4timeEv>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad2      	subs	r2, r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	bf8c      	ite	hi
 8003d06:	2301      	movhi	r3, #1
 8003d08:	2300      	movls	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8003d10:	f06f 0301 	mvn.w	r3, #1
 8003d14:	e193      	b.n	800403e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      int data = hardware_.read();
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fe fe5e 	bl	80029dc <_ZN13STM32Hardware4readEv>
 8003d20:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f2c0 8173 	blt.w	8004010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x376>
      checksum_ += data;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	441a      	add	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003d40:	2b07      	cmp	r3, #7
 8003d42:	d11d      	bne.n	8003d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003d4a:	1c59      	adds	r1, r3, #1
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	b2d1      	uxtb	r1, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	4413      	add	r3, r2
 8003d5a:	460a      	mov	r2, r1
 8003d5c:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8003d64:	1e5a      	subs	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1b7      	bne.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2208      	movs	r2, #8
 8003d7a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003d7e:	e7b2      	b.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d128      	bne.n	8003ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2bff      	cmp	r3, #255	; 0xff
 8003d8e:	d10d      	bne.n	8003dac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f103 0214 	add.w	r2, r3, #20
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8003daa:	e79c      	b.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fe fe3d 	bl	8002a30 <_ZN13STM32Hardware4timeEv>
 8003db6:	4602      	mov	r2, r0
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	bf8c      	ite	hi
 8003dc4:	2301      	movhi	r3, #1
 8003dc6:	2300      	movls	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d08b      	beq.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 8003dd6:	f06f 0301 	mvn.w	r3, #1
 8003dda:	e130      	b.n	800403e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d11b      	bne.n	8003e1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2bfe      	cmp	r3, #254	; 0xfe
 8003dea:	d107      	bne.n	8003dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003dfa:	e774      	b.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003e0a:	f083 0301 	eor.w	r3, r3, #1
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f43f af68 	beq.w	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f915 	bl	8004046 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003e1c:	e763      	b.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d113      	bne.n	8003e50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8003e4e:	e74a      	b.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d110      	bne.n	8003e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	441a      	add	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003e7a:	e734      	b.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d116      	bne.n	8003eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003e8c:	425a      	negs	r2, r3
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	bf58      	it	pl
 8003e94:	4253      	negpl	r3, r2
 8003e96:	2bff      	cmp	r3, #255	; 0xff
 8003e98:	d107      	bne.n	8003eaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003ea8:	e71d      	b.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003eb2:	e718      	b.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003eba:	2b05      	cmp	r3, #5
 8003ebc:	d10f      	bne.n	8003ede <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8003edc:	e703      	b.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003ee4:	2b06      	cmp	r3, #6
 8003ee6:	d117      	bne.n	8003f18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	441a      	add	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2207      	movs	r2, #7
 8003efe:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f47f aeec 	bne.w	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2208      	movs	r2, #8
 8003f12:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003f16:	e6e6      	b.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	f47f aee1 	bne.w	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003f32:	425a      	negs	r2, r3
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	bf58      	it	pl
 8003f3a:	4253      	negpl	r3, r2
 8003f3c:	2bff      	cmp	r3, #255	; 0xff
 8003f3e:	f47f aed2 	bne.w	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d110      	bne.n	8003f6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f87a 	bl	8004046 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f894 	bl	8004080 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 8003f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f6c:	e067      	b.n	800403e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
          else if (topic_ == TopicInfo::ID_TIME)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8003f74:	2b0a      	cmp	r3, #10
 8003f76:	d106      	bne.n	8003f86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ec>
            syncTime(message_in);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3318      	adds	r3, #24
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f964 	bl	800424c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003f84:	e6af      	b.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8003f8c:	2b06      	cmp	r3, #6
 8003f8e:	d10d      	bne.n	8003fac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
            req_param_resp.deserialize(message_in);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3318      	adds	r3, #24
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	f7fe fb44 	bl	800262a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8003faa:	e69c      	b.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8003fb2:	2b0b      	cmp	r3, #11
 8003fb4:	d104      	bne.n	8003fc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x326>
            configured_ = false;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8003fbe:	e692      	b.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8003fc6:	3b64      	subs	r3, #100	; 0x64
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f43f ae86 	beq.w	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8003fe0:	3b64      	subs	r3, #100	; 0x64
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	6858      	ldr	r0, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8003ff4:	3b64      	subs	r3, #100	; 0x64
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	3218      	adds	r2, #24
 800400a:	4611      	mov	r1, r2
 800400c:	4798      	blx	r3
    while (true)
 800400e:	e66a      	b.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004010:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00f      	beq.n	800403c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800402a:	4293      	cmp	r3, r2
 800402c:	d906      	bls.n	800403c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
      requestSyncTime();
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f809 	bl	8004046 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 800403c:	2300      	movs	r3, #0
  }
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004046:	b580      	push	{r7, lr}
 8004048:	b086      	sub	sp, #24
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800404e:	f107 030c 	add.w	r3, r7, #12
 8004052:	4618      	mov	r0, r3
 8004054:	f7fd fe50 	bl	8001cf8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f107 020c 	add.w	r2, r7, #12
 8004062:	210a      	movs	r1, #10
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	4798      	blx	r3
    rt_time = hardware_.time();
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	4618      	mov	r0, r3
 800406e:	f7fe fcdf 	bl	8002a30 <_ZN13STM32Hardware4timeEv>
 8004072:	4602      	mov	r2, r0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	609a      	str	r2, [r3, #8]
  }
 8004078:	bf00      	nop
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b08b      	sub	sp, #44	; 0x2c
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004088:	f107 030c 	add.w	r3, r7, #12
 800408c:	4618      	mov	r0, r3
 800408e:	f7fd ff23 	bl	8001ed8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004092:	2300      	movs	r3, #0
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	2b18      	cmp	r3, #24
 800409a:	dc5e      	bgt.n	800415a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
    {
      if (publishers[i] != 0) // non-empty slot
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a0:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80040a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d052      	beq.n	8004152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd2>
      {
        ti.topic_id = publishers[i]->id_;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b0:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80040b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c2:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80040c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d2:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80040d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040da:	6859      	ldr	r1, [r3, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e0:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80040e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3308      	adds	r3, #8
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4608      	mov	r0, r1
 80040f2:	4798      	blx	r3
 80040f4:	4603      	mov	r3, r0
 80040f6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fc:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004104:	6859      	ldr	r1, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800410a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800410e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	330c      	adds	r3, #12
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4608      	mov	r0, r1
 800411c:	4798      	blx	r3
 800411e:	4603      	mov	r3, r0
 8004120:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004122:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004126:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681c      	ldr	r4, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004132:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe fc2d 	bl	800299a <_ZN3ros9Publisher15getEndpointTypeEv>
 8004140:	4601      	mov	r1, r0
 8004142:	f107 030c 	add.w	r3, r7, #12
 8004146:	461a      	mov	r2, r3
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	47a0      	blx	r4
        HAL_Delay(10);
 800414c:	200a      	movs	r0, #10
 800414e:	f000 fc8f 	bl	8004a70 <HAL_Delay>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	3301      	adds	r3, #1
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
 8004158:	e79d      	b.n	8004096 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800415a:	2300      	movs	r3, #0
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	2b18      	cmp	r3, #24
 8004162:	dc6b      	bgt.n	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1bc>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d05e      	beq.n	8004234 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b4>
      {
        ti.topic_id = subscribers[i]->id_;
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	b29b      	uxth	r3, r3
 8004188:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	6859      	ldr	r1, [r3, #4]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3308      	adds	r3, #8
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4608      	mov	r0, r1
 80041c0:	4798      	blx	r3
 80041c2:	4603      	mov	r3, r0
 80041c4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	6859      	ldr	r1, [r3, #4]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	330c      	adds	r3, #12
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4608      	mov	r0, r1
 80041ea:	4798      	blx	r3
 80041ec:	4603      	mov	r3, r0
 80041ee:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80041f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041f4:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681c      	ldr	r4, [r3, #0]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	6859      	ldr	r1, [r3, #4]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3304      	adds	r3, #4
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4608      	mov	r0, r1
 8004220:	4798      	blx	r3
 8004222:	4601      	mov	r1, r0
 8004224:	f107 030c 	add.w	r3, r7, #12
 8004228:	461a      	mov	r2, r3
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	47a0      	blx	r4
        HAL_Delay(10);
 800422e:	200a      	movs	r0, #10
 8004230:	f000 fc1e 	bl	8004a70 <HAL_Delay>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	3301      	adds	r3, #1
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
 800423a:	e790      	b.n	800415e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
      }
    }
    configured_ = true;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 8004244:	bf00      	nop
 8004246:	372c      	adds	r7, #44	; 0x2c
 8004248:	46bd      	mov	sp, r7
 800424a:	bd90      	pop	{r4, r7, pc}

0800424c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004256:	f107 0308 	add.w	r3, r7, #8
 800425a:	4618      	mov	r0, r3
 800425c:	f7fd fd4c 	bl	8001cf8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3304      	adds	r3, #4
 8004264:	4618      	mov	r0, r3
 8004266:	f7fe fbe3 	bl	8002a30 <_ZN13STM32Hardware4timeEv>
 800426a:	4602      	mov	r2, r0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004274:	f107 0308 	add.w	r3, r7, #8
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f7fd fdac 	bl	8001dd8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	4914      	ldr	r1, [pc, #80]	; (80042d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8004286:	fba1 1303 	umull	r1, r3, r1, r3
 800428a:	099b      	lsrs	r3, r3, #6
 800428c:	4413      	add	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004290:	6939      	ldr	r1, [r7, #16]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4b10      	ldr	r3, [pc, #64]	; (80042d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8004296:	fba3 0302 	umull	r0, r3, r3, r2
 800429a:	099b      	lsrs	r3, r3, #6
 800429c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042a0:	fb00 f303 	mul.w	r3, r0, r3
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	4a0d      	ldr	r2, [pc, #52]	; (80042dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80042a8:	fb02 f303 	mul.w	r3, r2, r3
 80042ac:	440b      	add	r3, r1
 80042ae:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80042b0:	f107 0308 	add.w	r3, r7, #8
 80042b4:	3304      	adds	r3, #4
 80042b6:	4619      	mov	r1, r3
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f8a3 	bl	8004404 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3304      	adds	r3, #4
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fe fbb4 	bl	8002a30 <_ZN13STM32Hardware4timeEv>
 80042c8:	4602      	mov	r2, r0
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 80042d0:	bf00      	nop
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	10624dd3 	.word	0x10624dd3
 80042dc:	000f4240 	.word	0x000f4240

080042e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b63      	cmp	r3, #99	; 0x63
 80042f0:	dd09      	ble.n	8004306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80042f8:	f083 0301 	eor.w	r3, r3, #1
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004302:	2300      	movs	r3, #0
 8004304:	e077      	b.n	80043f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	f502 7206 	add.w	r2, r2, #536	; 0x218
 8004312:	3207      	adds	r2, #7
 8004314:	4611      	mov	r1, r2
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	4798      	blx	r3
 800431a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	22ff      	movs	r2, #255	; 0xff
 8004320:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	22fe      	movs	r2, #254	; 0xfe
 8004328:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	b2da      	uxtb	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	b29b      	uxth	r3, r3
 800433a:	121b      	asrs	r3, r3, #8
 800433c:	b2da      	uxtb	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8004350:	4413      	add	r3, r2
 8004352:	b2db      	uxtb	r3, r3
 8004354:	43db      	mvns	r3, r3
 8004356:	b2da      	uxtb	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	b2da      	uxtb	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	b21b      	sxth	r3, r3
 800436c:	121b      	asrs	r3, r3, #8
 800436e:	b2da      	uxtb	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800437a:	2305      	movs	r3, #5
 800437c:	61bb      	str	r3, [r7, #24]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	3307      	adds	r3, #7
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	429a      	cmp	r2, r3
 8004386:	da0d      	bge.n	80043a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	4413      	add	r3, r2
 800438e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	4413      	add	r3, r2
 800439a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	3301      	adds	r3, #1
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	e7ec      	b.n	800437e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	3307      	adds	r3, #7
 80043a8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	425a      	negs	r2, r3
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	bf58      	it	pl
 80043b4:	4253      	negpl	r3, r2
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	1c59      	adds	r1, r3, #1
 80043bc:	6179      	str	r1, [r7, #20]
 80043be:	43d2      	mvns	r2, r2
 80043c0:	b2d1      	uxtb	r1, r2
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4413      	add	r3, r2
 80043c6:	460a      	mov	r2, r1
 80043c8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043d2:	dc0a      	bgt.n	80043ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1d18      	adds	r0, r3, #4
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4619      	mov	r1, r3
 80043e2:	f7fe fb15 	bl	8002a10 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	e005      	b.n	80043f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80043ea:	4905      	ldr	r1, [pc, #20]	; (8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f847 	bl	8004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80043f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 80043f6:	4618      	mov	r0, r3
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	0800fd24 	.word	0x0800fd24

08004404 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3304      	adds	r3, #4
 8004412:	4618      	mov	r0, r3
 8004414:	f7fe fb0c 	bl	8002a30 <_ZN13STM32Hardware4timeEv>
 8004418:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4914      	ldr	r1, [pc, #80]	; (8004474 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 8004422:	fba1 1303 	umull	r1, r3, r1, r3
 8004426:	099b      	lsrs	r3, r3, #6
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	1e5a      	subs	r2, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	6859      	ldr	r1, [r3, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4b0f      	ldr	r3, [pc, #60]	; (8004474 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 8004438:	fba3 0302 	umull	r0, r3, r3, r2
 800443c:	099b      	lsrs	r3, r3, #6
 800443e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004442:	fb00 f303 	mul.w	r3, r0, r3
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	4a0b      	ldr	r2, [pc, #44]	; (8004478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800444a:	fb02 f303 	mul.w	r3, r2, r3
 800444e:	1aca      	subs	r2, r1, r3
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8004452:	4413      	add	r3, r2
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f103 020c 	add.w	r2, r3, #12
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3310      	adds	r3, #16
 8004462:	4619      	mov	r1, r3
 8004464:	4610      	mov	r0, r2
 8004466:	f7fd fb2d 	bl	8001ac4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	10624dd3 	.word	0x10624dd3
 8004478:	000f4240 	.word	0x000f4240
 800447c:	3b9aca00 	.word	0x3b9aca00

08004480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	2103      	movs	r1, #3
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f804 	bl	800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004494:	bf00      	nop
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	460b      	mov	r3, r1
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80044aa:	f107 0314 	add.w	r3, r7, #20
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fd fed6 	bl	8002260 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80044b4:	7afb      	ldrb	r3, [r7, #11]
 80044b6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f107 0214 	add.w	r2, r7, #20
 80044c6:	2107      	movs	r1, #7
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	4798      	blx	r3
  }
 80044cc:	bf00      	nop
 80044ce:	3720      	adds	r7, #32
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <_Z41__static_initialization_and_destruction_0ii>:
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	f040 8083 	bne.w	80045ec <_Z41__static_initialization_and_destruction_0ii+0x118>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d17d      	bne.n	80045ec <_Z41__static_initialization_and_destruction_0ii+0x118>
ros::NodeHandle nh;
 80044f0:	4840      	ldr	r0, [pc, #256]	; (80045f4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80044f2:	f7ff fa9b 	bl	8003a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int8 uint_msg_right_front;
 80044f6:	4840      	ldr	r0, [pc, #256]	; (80045f8 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80044f8:	f7fe faa6 	bl	8002a48 <_ZN8std_msgs4Int8C1Ev>
std_msgs::Int8 uint_msg_left_front;
 80044fc:	483f      	ldr	r0, [pc, #252]	; (80045fc <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80044fe:	f7fe faa3 	bl	8002a48 <_ZN8std_msgs4Int8C1Ev>
std_msgs::Int8 uint_msg_right_back;
 8004502:	483f      	ldr	r0, [pc, #252]	; (8004600 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8004504:	f7fe faa0 	bl	8002a48 <_ZN8std_msgs4Int8C1Ev>
std_msgs::Int8 uint_msg_left_back;
 8004508:	483e      	ldr	r0, [pc, #248]	; (8004604 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 800450a:	f7fe fa9d 	bl	8002a48 <_ZN8std_msgs4Int8C1Ev>
std_msgs::UInt8MultiArray diagnostics_data_array;
 800450e:	483e      	ldr	r0, [pc, #248]	; (8004608 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8004510:	f7fe fd8a 	bl	8003028 <_ZN8std_msgs15UInt8MultiArrayC1Ev>
std_msgs::UInt8MultiArray sensors_data_array;
 8004514:	483d      	ldr	r0, [pc, #244]	; (800460c <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8004516:	f7fe fd87 	bl	8003028 <_ZN8std_msgs15UInt8MultiArrayC1Ev>
geometry_msgs::Vector3 gyro_msg;
 800451a:	483d      	ldr	r0, [pc, #244]	; (8004610 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 800451c:	f7fe fe7c 	bl	8003218 <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 accel_msg;
 8004520:	483c      	ldr	r0, [pc, #240]	; (8004614 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004522:	f7fe fe79 	bl	8003218 <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 sen1_3_msg;
 8004526:	483c      	ldr	r0, [pc, #240]	; (8004618 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004528:	f7fe fe76 	bl	8003218 <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 sen4_6_msg;
 800452c:	483b      	ldr	r0, [pc, #236]	; (800461c <_Z41__static_initialization_and_destruction_0ii+0x148>)
 800452e:	f7fe fe73 	bl	8003218 <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 sen7_8_msg;
 8004532:	483b      	ldr	r0, [pc, #236]	; (8004620 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004534:	f7fe fe70 	bl	8003218 <_ZN13geometry_msgs7Vector3C1Ev>
ros::Publisher stm("stm", &gyro_msg);
 8004538:	2300      	movs	r3, #0
 800453a:	4a35      	ldr	r2, [pc, #212]	; (8004610 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 800453c:	4939      	ldr	r1, [pc, #228]	; (8004624 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800453e:	483a      	ldr	r0, [pc, #232]	; (8004628 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8004540:	f7fe fa00 	bl	8002944 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher gyro("gyro", &gyro_msg);
 8004544:	2300      	movs	r3, #0
 8004546:	4a32      	ldr	r2, [pc, #200]	; (8004610 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 8004548:	4938      	ldr	r1, [pc, #224]	; (800462c <_Z41__static_initialization_and_destruction_0ii+0x158>)
 800454a:	4839      	ldr	r0, [pc, #228]	; (8004630 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 800454c:	f7fe f9fa 	bl	8002944 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher accel("accel", &accel_msg);
 8004550:	2300      	movs	r3, #0
 8004552:	4a30      	ldr	r2, [pc, #192]	; (8004614 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004554:	4937      	ldr	r1, [pc, #220]	; (8004634 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8004556:	4838      	ldr	r0, [pc, #224]	; (8004638 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004558:	f7fe f9f4 	bl	8002944 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_right_front("rpm_right_front", &uint_msg_right_front);
 800455c:	2300      	movs	r3, #0
 800455e:	4a26      	ldr	r2, [pc, #152]	; (80045f8 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8004560:	4936      	ldr	r1, [pc, #216]	; (800463c <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004562:	4837      	ldr	r0, [pc, #220]	; (8004640 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004564:	f7fe f9ee 	bl	8002944 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_left_front("rpm_left_front", &uint_msg_left_front);
 8004568:	2300      	movs	r3, #0
 800456a:	4a24      	ldr	r2, [pc, #144]	; (80045fc <_Z41__static_initialization_and_destruction_0ii+0x128>)
 800456c:	4935      	ldr	r1, [pc, #212]	; (8004644 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 800456e:	4836      	ldr	r0, [pc, #216]	; (8004648 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004570:	f7fe f9e8 	bl	8002944 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_right_back("rpm_right_back", &uint_msg_right_back);
 8004574:	2300      	movs	r3, #0
 8004576:	4a22      	ldr	r2, [pc, #136]	; (8004600 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8004578:	4934      	ldr	r1, [pc, #208]	; (800464c <_Z41__static_initialization_and_destruction_0ii+0x178>)
 800457a:	4835      	ldr	r0, [pc, #212]	; (8004650 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 800457c:	f7fe f9e2 	bl	8002944 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_left_back("rpm_left_back", &uint_msg_left_back);
 8004580:	2300      	movs	r3, #0
 8004582:	4a20      	ldr	r2, [pc, #128]	; (8004604 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8004584:	4933      	ldr	r1, [pc, #204]	; (8004654 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004586:	4834      	ldr	r0, [pc, #208]	; (8004658 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004588:	f7fe f9dc 	bl	8002944 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int8> rpm_rightFront_sub("rpm_rightFront_sub", rpm_rightFront_subCb);
 800458c:	2301      	movs	r3, #1
 800458e:	4a33      	ldr	r2, [pc, #204]	; (800465c <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004590:	4933      	ldr	r1, [pc, #204]	; (8004660 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004592:	4834      	ldr	r0, [pc, #208]	; (8004664 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8004594:	f7ff fad8 	bl	8003b48 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> rpm_leftFront_sub("rpm_leftFront_sub", rpm_leftFront_subCb);
 8004598:	2301      	movs	r3, #1
 800459a:	4a33      	ldr	r2, [pc, #204]	; (8004668 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 800459c:	4933      	ldr	r1, [pc, #204]	; (800466c <_Z41__static_initialization_and_destruction_0ii+0x198>)
 800459e:	4834      	ldr	r0, [pc, #208]	; (8004670 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 80045a0:	f7ff fad2 	bl	8003b48 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> rpm_rightBack_sub("rpm_rightBack_sub", rpm_rightBack_subCb);
 80045a4:	2301      	movs	r3, #1
 80045a6:	4a33      	ldr	r2, [pc, #204]	; (8004674 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 80045a8:	4933      	ldr	r1, [pc, #204]	; (8004678 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 80045aa:	4834      	ldr	r0, [pc, #208]	; (800467c <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 80045ac:	f7ff facc 	bl	8003b48 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> rpm_leftBack_sub("rpm_leftBack_sub", rpm_leftBack_subCb);
 80045b0:	2301      	movs	r3, #1
 80045b2:	4a33      	ldr	r2, [pc, #204]	; (8004680 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 80045b4:	4933      	ldr	r1, [pc, #204]	; (8004684 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 80045b6:	4834      	ldr	r0, [pc, #208]	; (8004688 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 80045b8:	f7ff fac6 	bl	8003b48 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Publisher diagnostic_data("diagnostics_data", &diagnostics_data_array);
 80045bc:	2300      	movs	r3, #0
 80045be:	4a12      	ldr	r2, [pc, #72]	; (8004608 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80045c0:	4932      	ldr	r1, [pc, #200]	; (800468c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 80045c2:	4833      	ldr	r0, [pc, #204]	; (8004690 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 80045c4:	f7fe f9be 	bl	8002944 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher sensa_data("sensors1_3_data", &sen1_3_msg);
 80045c8:	2300      	movs	r3, #0
 80045ca:	4a13      	ldr	r2, [pc, #76]	; (8004618 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80045cc:	4931      	ldr	r1, [pc, #196]	; (8004694 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 80045ce:	4832      	ldr	r0, [pc, #200]	; (8004698 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 80045d0:	f7fe f9b8 	bl	8002944 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher sensb_data("sensors4_6_data", &sen4_6_msg);
 80045d4:	2300      	movs	r3, #0
 80045d6:	4a11      	ldr	r2, [pc, #68]	; (800461c <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80045d8:	4930      	ldr	r1, [pc, #192]	; (800469c <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 80045da:	4831      	ldr	r0, [pc, #196]	; (80046a0 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 80045dc:	f7fe f9b2 	bl	8002944 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher sensc_data("sensors7_8_data", &sen7_8_msg);
 80045e0:	2300      	movs	r3, #0
 80045e2:	4a0f      	ldr	r2, [pc, #60]	; (8004620 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80045e4:	492f      	ldr	r1, [pc, #188]	; (80046a4 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 80045e6:	4830      	ldr	r0, [pc, #192]	; (80046a8 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 80045e8:	f7fe f9ac 	bl	8002944 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	100004dc 	.word	0x100004dc
 80045f8:	10000a0c 	.word	0x10000a0c
 80045fc:	10000a14 	.word	0x10000a14
 8004600:	10000a1c 	.word	0x10000a1c
 8004604:	10000a24 	.word	0x10000a24
 8004608:	10000a2c 	.word	0x10000a2c
 800460c:	10000a5c 	.word	0x10000a5c
 8004610:	10000a8c 	.word	0x10000a8c
 8004614:	10000a9c 	.word	0x10000a9c
 8004618:	10000aac 	.word	0x10000aac
 800461c:	10000abc 	.word	0x10000abc
 8004620:	10000acc 	.word	0x10000acc
 8004624:	0800fd60 	.word	0x0800fd60
 8004628:	10000adc 	.word	0x10000adc
 800462c:	0800fd64 	.word	0x0800fd64
 8004630:	10000af0 	.word	0x10000af0
 8004634:	0800fd6c 	.word	0x0800fd6c
 8004638:	10000b04 	.word	0x10000b04
 800463c:	0800fd74 	.word	0x0800fd74
 8004640:	10000b18 	.word	0x10000b18
 8004644:	0800fd84 	.word	0x0800fd84
 8004648:	10000b2c 	.word	0x10000b2c
 800464c:	0800fd94 	.word	0x0800fd94
 8004650:	10000b40 	.word	0x10000b40
 8004654:	0800fda4 	.word	0x0800fda4
 8004658:	10000b54 	.word	0x10000b54
 800465c:	08003365 	.word	0x08003365
 8004660:	0800fdb4 	.word	0x0800fdb4
 8004664:	10000b68 	.word	0x10000b68
 8004668:	080033d9 	.word	0x080033d9
 800466c:	0800fdc8 	.word	0x0800fdc8
 8004670:	10000b84 	.word	0x10000b84
 8004674:	08003445 	.word	0x08003445
 8004678:	0800fddc 	.word	0x0800fddc
 800467c:	10000ba0 	.word	0x10000ba0
 8004680:	080034b1 	.word	0x080034b1
 8004684:	0800fdf0 	.word	0x0800fdf0
 8004688:	10000bbc 	.word	0x10000bbc
 800468c:	0800fe04 	.word	0x0800fe04
 8004690:	10000bd8 	.word	0x10000bd8
 8004694:	0800fe18 	.word	0x0800fe18
 8004698:	10000bec 	.word	0x10000bec
 800469c:	0800fe28 	.word	0x0800fe28
 80046a0:	10000c00 	.word	0x10000c00
 80046a4:	0800fe38 	.word	0x0800fe38
 80046a8:	10000c14 	.word	0x10000c14

080046ac <_ZN3ros10SubscriberIN8std_msgs4Int8EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	330c      	adds	r3, #12
 80046ba:	6839      	ldr	r1, [r7, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fe f9f3 	bl	8002aa8 <_ZN8std_msgs4Int811deserializeEPh>
    this->cb_(msg);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	320c      	adds	r2, #12
 80046ca:	4610      	mov	r0, r2
 80046cc:	4798      	blx	r3
  }
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
  }
 80046e2:	4618      	mov	r0, r3
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b082      	sub	sp, #8
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	330c      	adds	r3, #12
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fe f9f4 	bl	8002ae8 <_ZN8std_msgs4Int87getTypeEv>
 8004700:	4603      	mov	r3, r0
  }
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800470a:	b580      	push	{r7, lr}
 800470c:	b082      	sub	sp, #8
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	330c      	adds	r3, #12
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe f9f4 	bl	8002b04 <_ZN8std_msgs4Int86getMD5Ev>
 800471c:	4603      	mov	r3, r0
  }
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <_GLOBAL__sub_I_rb>:
 8004726:	b580      	push	{r7, lr}
 8004728:	af00      	add	r7, sp, #0
 800472a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800472e:	2001      	movs	r0, #1
 8004730:	f7ff fed0 	bl	80044d4 <_Z41__static_initialization_and_destruction_0ii>
 8004734:	bd80      	pop	{r7, pc}

08004736 <_Z8NBT_initP5nbt_tm>:
#include "stm32f4xx_hal.h"
#include "nbt.h"

//NBT - Non Blocking Timer
void NBT_init(nbt_t * nbt, uint32_t interval)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
 800473e:	6039      	str	r1, [r7, #0]
	nbt->timeout = interval;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	601a      	str	r2, [r3, #0]
	nbt->previousMillis = HAL_GetTick();
 8004746:	f000 f987 	bl	8004a58 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	605a      	str	r2, [r3, #4]
}
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <_Z17ringbuffer_statusP10ringbuffer>:
#include <string.h>

#define ASSERT(EX)                                                         \

__inline enum ringbuffer_state  ringbuffer_status(struct  ringbuffer *rb)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
	if (rb->read_index == rb->write_index) {
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	889b      	ldrh	r3, [r3, #4]
 8004764:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004768:	b29a      	uxth	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	88db      	ldrh	r3, [r3, #6]
 800476e:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004772:	b29b      	uxth	r3, r3
 8004774:	429a      	cmp	r2, r3
 8004776:	d10f      	bne.n	8004798 <_Z17ringbuffer_statusP10ringbuffer+0x40>
		if (rb->read_mirror == rb->write_mirror)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	791b      	ldrb	r3, [r3, #4]
 800477c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004780:	b2da      	uxtb	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	799b      	ldrb	r3, [r3, #6]
 8004786:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800478a:	b2db      	uxtb	r3, r3
 800478c:	429a      	cmp	r2, r3
 800478e:	d101      	bne.n	8004794 <_Z17ringbuffer_statusP10ringbuffer+0x3c>
			return RT_RINGBUFFER_EMPTY;
 8004790:	2300      	movs	r3, #0
 8004792:	e002      	b.n	800479a <_Z17ringbuffer_statusP10ringbuffer+0x42>
		else
			return RT_RINGBUFFER_FULL;
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <_Z17ringbuffer_statusP10ringbuffer+0x42>
	}
	return RT_RINGBUFFER_HALFFULL;
 8004798:	2302      	movs	r3, #2
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <_Z19ringbuffer_data_lenP10ringbuffer>:

/** return the size of data in rb */
uint16_t  ringbuffer_data_len(struct  ringbuffer *rb)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
	switch ( ringbuffer_status(rb)) {
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff ffd2 	bl	8004758 <_Z17ringbuffer_statusP10ringbuffer>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <_Z19ringbuffer_data_lenP10ringbuffer+0x1a>
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d002      	beq.n	80047c4 <_Z19ringbuffer_data_lenP10ringbuffer+0x1e>
 80047be:	e006      	b.n	80047ce <_Z19ringbuffer_data_lenP10ringbuffer+0x28>
	case RT_RINGBUFFER_EMPTY:
		return 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	e031      	b.n	8004828 <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
	case RT_RINGBUFFER_FULL:
		return rb->buffer_size;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	e02c      	b.n	8004828 <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
	case RT_RINGBUFFER_HALFFULL:
	default:
		if (rb->write_index > rb->read_index)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	88db      	ldrh	r3, [r3, #6]
 80047d2:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	889b      	ldrh	r3, [r3, #4]
 80047dc:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d90d      	bls.n	8004802 <_Z19ringbuffer_data_lenP10ringbuffer+0x5c>
			return rb->write_index - rb->read_index;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	88db      	ldrh	r3, [r3, #6]
 80047ea:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	461a      	mov	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	889b      	ldrh	r3, [r3, #4]
 80047f6:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	b29b      	uxth	r3, r3
 8004800:	e012      	b.n	8004828 <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
		else
			return rb->buffer_size - (rb->read_index - rb->write_index);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004808:	b29a      	uxth	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	88db      	ldrh	r3, [r3, #6]
 800480e:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004812:	b29b      	uxth	r3, r3
 8004814:	4619      	mov	r1, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	889b      	ldrh	r3, [r3, #4]
 800481a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800481e:	b29b      	uxth	r3, r3
 8004820:	1acb      	subs	r3, r1, r3
 8004822:	b29b      	uxth	r3, r3
 8004824:	4413      	add	r3, r2
 8004826:	b29b      	uxth	r3, r3
	};
}
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <_Z18ringbuffer_putcharP10ringbufferh>:

/**
 * put a character into ring buffer
 */
uint32_t  ringbuffer_putchar(struct  ringbuffer *rb, const uint8_t ch)
{
 8004830:	b590      	push	{r4, r7, lr}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	70fb      	strb	r3, [r7, #3]
    ASSERT(rb != NULL);

    /* whether has enough space */
	if (! ringbuffer_empty_space(rb))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004842:	461c      	mov	r4, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff ffad 	bl	80047a6 <_Z19ringbuffer_data_lenP10ringbuffer>
 800484c:	4603      	mov	r3, r0
 800484e:	429c      	cmp	r4, r3
 8004850:	bf0c      	ite	eq
 8004852:	2301      	moveq	r3, #1
 8004854:	2300      	movne	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <_Z18ringbuffer_putcharP10ringbufferh+0x30>
		return 0;
 800485c:	2300      	movs	r3, #0
 800485e:	e038      	b.n	80048d2 <_Z18ringbuffer_putcharP10ringbufferh+0xa2>

	rb->buffer_ptr[rb->write_index] = ch;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	88d2      	ldrh	r2, [r2, #6]
 8004868:	f3c2 024e 	ubfx	r2, r2, #1, #15
 800486c:	b292      	uxth	r2, r2
 800486e:	4413      	add	r3, r2
 8004870:	78fa      	ldrb	r2, [r7, #3]
 8004872:	701a      	strb	r2, [r3, #0]

	/* flip mirror */
	if (rb->write_index == rb->buffer_size - 1) {
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	88db      	ldrh	r3, [r3, #6]
 8004878:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800487c:	b29b      	uxth	r3, r3
 800487e:	461a      	mov	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004886:	3b01      	subs	r3, #1
 8004888:	429a      	cmp	r2, r3
 800488a:	d114      	bne.n	80048b6 <_Z18ringbuffer_putcharP10ringbufferh+0x86>
		rb->write_mirror = ~rb->write_mirror;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	799b      	ldrb	r3, [r3, #6]
 8004890:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004894:	b2db      	uxtb	r3, r3
 8004896:	43db      	mvns	r3, r3
 8004898:	b2db      	uxtb	r3, r3
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	b2d9      	uxtb	r1, r3
 80048a2:	7993      	ldrb	r3, [r2, #6]
 80048a4:	f361 0300 	bfi	r3, r1, #0, #1
 80048a8:	7193      	strb	r3, [r2, #6]
		rb->write_index = 0;
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	88d3      	ldrh	r3, [r2, #6]
 80048ae:	f36f 034f 	bfc	r3, #1, #15
 80048b2:	80d3      	strh	r3, [r2, #6]
 80048b4:	e00c      	b.n	80048d0 <_Z18ringbuffer_putcharP10ringbufferh+0xa0>
	} else {
		rb->write_index++;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	88da      	ldrh	r2, [r3, #6]
 80048ba:	f3c2 024e 	ubfx	r2, r2, #1, #15
 80048be:	b292      	uxth	r2, r2
 80048c0:	3201      	adds	r2, #1
 80048c2:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80048c6:	b291      	uxth	r1, r2
 80048c8:	88da      	ldrh	r2, [r3, #6]
 80048ca:	f361 024f 	bfi	r2, r1, #1, #15
 80048ce:	80da      	strh	r2, [r3, #6]
	}

	return 1;
 80048d0:	2301      	movs	r3, #1
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd90      	pop	{r4, r7, pc}

080048da <_Z18ringbuffer_getcharP10ringbufferPh>:

/**
 * get a character from a ringbuffer
 */
uint32_t  ringbuffer_getchar(struct  ringbuffer *rb, uint8_t *ch)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b082      	sub	sp, #8
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]
    ASSERT(rb != NULL);

    /* ringbuffer is empty */
    if (! ringbuffer_data_len(rb))
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff ff5e 	bl	80047a6 <_Z19ringbuffer_data_lenP10ringbuffer>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	bf0c      	ite	eq
 80048f0:	2301      	moveq	r3, #1
 80048f2:	2300      	movne	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <_Z18ringbuffer_getcharP10ringbufferPh+0x24>
        return 0;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e03a      	b.n	8004974 <_Z18ringbuffer_getcharP10ringbufferPh+0x9a>

    /* put character */
    *ch = rb->buffer_ptr[rb->read_index];
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	8892      	ldrh	r2, [r2, #4]
 8004906:	f3c2 024e 	ubfx	r2, r2, #1, #15
 800490a:	b292      	uxth	r2, r2
 800490c:	4413      	add	r3, r2
 800490e:	781a      	ldrb	r2, [r3, #0]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	701a      	strb	r2, [r3, #0]

    if (rb->read_index == rb->buffer_size-1)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	889b      	ldrh	r3, [r3, #4]
 8004918:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800491c:	b29b      	uxth	r3, r3
 800491e:	461a      	mov	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004926:	3b01      	subs	r3, #1
 8004928:	429a      	cmp	r2, r3
 800492a:	d114      	bne.n	8004956 <_Z18ringbuffer_getcharP10ringbufferPh+0x7c>
    {
        rb->read_mirror = ~rb->read_mirror;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	791b      	ldrb	r3, [r3, #4]
 8004930:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004934:	b2db      	uxtb	r3, r3
 8004936:	43db      	mvns	r3, r3
 8004938:	b2db      	uxtb	r3, r3
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	b2d9      	uxtb	r1, r3
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	7913      	ldrb	r3, [r2, #4]
 8004944:	f361 0300 	bfi	r3, r1, #0, #1
 8004948:	7113      	strb	r3, [r2, #4]
        rb->read_index = 0;
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	8893      	ldrh	r3, [r2, #4]
 800494e:	f36f 034f 	bfc	r3, #1, #15
 8004952:	8093      	strh	r3, [r2, #4]
 8004954:	e00d      	b.n	8004972 <_Z18ringbuffer_getcharP10ringbufferPh+0x98>
    }
    else
    {
        rb->read_index++;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	889b      	ldrh	r3, [r3, #4]
 800495a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800495e:	b29b      	uxth	r3, r3
 8004960:	3301      	adds	r3, #1
 8004962:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004966:	b299      	uxth	r1, r3
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	8893      	ldrh	r3, [r2, #4]
 800496c:	f361 034f 	bfi	r3, r1, #1, #15
 8004970:	8093      	strh	r3, [r2, #4]
    }

    return 1;
 8004972:	2301      	movs	r3, #1
}
 8004974:	4618      	mov	r0, r3
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <_Z15ringbuffer_initP10ringbufferPhs>:
}

void  ringbuffer_init(struct  ringbuffer *rb,
                        uint8_t           *pool,
                        int16_t            size)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	4613      	mov	r3, r2
 8004988:	80fb      	strh	r3, [r7, #6]
    ASSERT(rb != NULL);
    ASSERT(size > 0);

    /* initialize read and write index */
    rb->read_mirror = rb->read_index = 0;
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	8893      	ldrh	r3, [r2, #4]
 800498e:	f36f 034f 	bfc	r3, #1, #15
 8004992:	8093      	strh	r3, [r2, #4]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	889b      	ldrh	r3, [r3, #4]
 8004998:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800499c:	b29b      	uxth	r3, r3
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	b2d9      	uxtb	r1, r3
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	7913      	ldrb	r3, [r2, #4]
 80049a8:	f361 0300 	bfi	r3, r1, #0, #1
 80049ac:	7113      	strb	r3, [r2, #4]
    rb->write_mirror = rb->write_index = 0;
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	88d3      	ldrh	r3, [r2, #6]
 80049b2:	f36f 034f 	bfc	r3, #1, #15
 80049b6:	80d3      	strh	r3, [r2, #6]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	88db      	ldrh	r3, [r3, #6]
 80049bc:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	b2d9      	uxtb	r1, r3
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	7993      	ldrb	r3, [r2, #6]
 80049cc:	f361 0300 	bfi	r3, r1, #0, #1
 80049d0:	7193      	strb	r3, [r2, #6]

    /* set buffer pool and size */
    rb->buffer_ptr = pool;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	601a      	str	r2, [r3, #0]
    rb->buffer_size = size; //ALIGN_DOWN(size, ALIGN_SIZE);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	88fa      	ldrh	r2, [r7, #6]
 80049dc:	811a      	strh	r2, [r3, #8]
}
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
	...

080049ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049f0:	4b0e      	ldr	r3, [pc, #56]	; (8004a2c <HAL_Init+0x40>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a0d      	ldr	r2, [pc, #52]	; (8004a2c <HAL_Init+0x40>)
 80049f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049fc:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <HAL_Init+0x40>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a0a      	ldr	r2, [pc, #40]	; (8004a2c <HAL_Init+0x40>)
 8004a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a08:	4b08      	ldr	r3, [pc, #32]	; (8004a2c <HAL_Init+0x40>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a07      	ldr	r2, [pc, #28]	; (8004a2c <HAL_Init+0x40>)
 8004a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a14:	2003      	movs	r0, #3
 8004a16:	f000 ff56 	bl	80058c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	f7fc feea 	bl	80017f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a20:	f7fc fde8 	bl	80015f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40023c00 	.word	0x40023c00

08004a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a34:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <HAL_IncTick+0x20>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <HAL_IncTick+0x24>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4413      	add	r3, r2
 8004a40:	4a04      	ldr	r2, [pc, #16]	; (8004a54 <HAL_IncTick+0x24>)
 8004a42:	6013      	str	r3, [r2, #0]
}
 8004a44:	bf00      	nop
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	10000008 	.word	0x10000008
 8004a54:	1000500c 	.word	0x1000500c

08004a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8004a5c:	4b03      	ldr	r3, [pc, #12]	; (8004a6c <HAL_GetTick+0x14>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	1000500c 	.word	0x1000500c

08004a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a78:	f7ff ffee 	bl	8004a58 <HAL_GetTick>
 8004a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a88:	d005      	beq.n	8004a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a8a:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <HAL_Delay+0x40>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a96:	bf00      	nop
 8004a98:	f7ff ffde 	bl	8004a58 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d8f7      	bhi.n	8004a98 <HAL_Delay+0x28>
  {
  }
}
 8004aa8:	bf00      	nop
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	10000008 	.word	0x10000008

08004ab4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e0ed      	b.n	8004ca2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d102      	bne.n	8004ad8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fc fdbc 	bl	8001650 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0202 	bic.w	r2, r2, #2
 8004ae6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ae8:	f7ff ffb6 	bl	8004a58 <HAL_GetTick>
 8004aec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004aee:	e012      	b.n	8004b16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004af0:	f7ff ffb2 	bl	8004a58 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b0a      	cmp	r3, #10
 8004afc:	d90b      	bls.n	8004b16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2205      	movs	r2, #5
 8004b0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e0c5      	b.n	8004ca2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1e5      	bne.n	8004af0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b34:	f7ff ff90 	bl	8004a58 <HAL_GetTick>
 8004b38:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b3a:	e012      	b.n	8004b62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b3c:	f7ff ff8c 	bl	8004a58 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b0a      	cmp	r3, #10
 8004b48:	d90b      	bls.n	8004b62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2205      	movs	r2, #5
 8004b5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e09f      	b.n	8004ca2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0e5      	beq.n	8004b3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	7e1b      	ldrb	r3, [r3, #24]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d108      	bne.n	8004b8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	e007      	b.n	8004b9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	7e5b      	ldrb	r3, [r3, #25]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d108      	bne.n	8004bb4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	e007      	b.n	8004bc4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	7e9b      	ldrb	r3, [r3, #26]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d108      	bne.n	8004bde <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f042 0220 	orr.w	r2, r2, #32
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	e007      	b.n	8004bee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0220 	bic.w	r2, r2, #32
 8004bec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	7edb      	ldrb	r3, [r3, #27]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d108      	bne.n	8004c08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0210 	bic.w	r2, r2, #16
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	e007      	b.n	8004c18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0210 	orr.w	r2, r2, #16
 8004c16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	7f1b      	ldrb	r3, [r3, #28]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d108      	bne.n	8004c32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0208 	orr.w	r2, r2, #8
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	e007      	b.n	8004c42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0208 	bic.w	r2, r2, #8
 8004c40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	7f5b      	ldrb	r3, [r3, #29]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d108      	bne.n	8004c5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0204 	orr.w	r2, r2, #4
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	e007      	b.n	8004c6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0204 	bic.w	r2, r2, #4
 8004c6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	ea42 0103 	orr.w	r1, r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	1e5a      	subs	r2, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cc2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004cc4:	7cfb      	ldrb	r3, [r7, #19]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d003      	beq.n	8004cd2 <HAL_CAN_ConfigFilter+0x26>
 8004cca:	7cfb      	ldrb	r3, [r7, #19]
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	f040 80be 	bne.w	8004e4e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004cd2:	4b65      	ldr	r3, [pc, #404]	; (8004e68 <HAL_CAN_ConfigFilter+0x1bc>)
 8004cd4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004cdc:	f043 0201 	orr.w	r2, r3, #1
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004cec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	021b      	lsls	r3, r3, #8
 8004d02:	431a      	orrs	r2, r3
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f003 031f 	and.w	r3, r3, #31
 8004d12:	2201      	movs	r2, #1
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	43db      	mvns	r3, r3
 8004d24:	401a      	ands	r2, r3
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d123      	bne.n	8004d7c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	401a      	ands	r2, r3
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004d56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	3248      	adds	r2, #72	; 0x48
 8004d5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d72:	6979      	ldr	r1, [r7, #20]
 8004d74:	3348      	adds	r3, #72	; 0x48
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	440b      	add	r3, r1
 8004d7a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d122      	bne.n	8004dca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004da4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	3248      	adds	r2, #72	; 0x48
 8004daa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004dbe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004dc0:	6979      	ldr	r1, [r7, #20]
 8004dc2:	3348      	adds	r3, #72	; 0x48
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	440b      	add	r3, r1
 8004dc8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d109      	bne.n	8004de6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	43db      	mvns	r3, r3
 8004ddc:	401a      	ands	r2, r3
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004de4:	e007      	b.n	8004df6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	43db      	mvns	r3, r3
 8004e08:	401a      	ands	r2, r3
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004e10:	e007      	b.n	8004e22 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d107      	bne.n	8004e3a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e40:	f023 0201 	bic.w	r2, r3, #1
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e006      	b.n	8004e5c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
  }
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	40006400 	.word	0x40006400

08004e6c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d12e      	bne.n	8004ede <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e98:	f7ff fdde 	bl	8004a58 <HAL_GetTick>
 8004e9c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004e9e:	e012      	b.n	8004ec6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ea0:	f7ff fdda 	bl	8004a58 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b0a      	cmp	r3, #10
 8004eac:	d90b      	bls.n	8004ec6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2205      	movs	r2, #5
 8004ebe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e012      	b.n	8004eec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e5      	bne.n	8004ea0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	e006      	b.n	8004eec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
  }
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b089      	sub	sp, #36	; 0x24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f08:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f12:	7ffb      	ldrb	r3, [r7, #31]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d003      	beq.n	8004f20 <HAL_CAN_AddTxMessage+0x2c>
 8004f18:	7ffb      	ldrb	r3, [r7, #31]
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	f040 80b8 	bne.w	8005090 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10a      	bne.n	8004f40 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d105      	bne.n	8004f40 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 80a0 	beq.w	8005080 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	0e1b      	lsrs	r3, r3, #24
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d907      	bls.n	8004f60 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e09e      	b.n	800509e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004f60:	2201      	movs	r2, #1
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	409a      	lsls	r2, r3
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10d      	bne.n	8004f8e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004f7c:	68f9      	ldr	r1, [r7, #12]
 8004f7e:	6809      	ldr	r1, [r1, #0]
 8004f80:	431a      	orrs	r2, r3
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	3318      	adds	r3, #24
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	440b      	add	r3, r1
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	e00f      	b.n	8004fae <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f98:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f9e:	68f9      	ldr	r1, [r7, #12]
 8004fa0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004fa2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	3318      	adds	r3, #24
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	440b      	add	r3, r1
 8004fac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6819      	ldr	r1, [r3, #0]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	3318      	adds	r3, #24
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	440b      	add	r3, r1
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	7d1b      	ldrb	r3, [r3, #20]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d111      	bne.n	8004fee <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	3318      	adds	r3, #24
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	4413      	add	r3, r2
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	6811      	ldr	r1, [r2, #0]
 8004fde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	3318      	adds	r3, #24
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	440b      	add	r3, r1
 8004fea:	3304      	adds	r3, #4
 8004fec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3307      	adds	r3, #7
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	061a      	lsls	r2, r3, #24
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3306      	adds	r3, #6
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	041b      	lsls	r3, r3, #16
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3305      	adds	r3, #5
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	021b      	lsls	r3, r3, #8
 8005008:	4313      	orrs	r3, r2
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	3204      	adds	r2, #4
 800500e:	7812      	ldrb	r2, [r2, #0]
 8005010:	4610      	mov	r0, r2
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	6811      	ldr	r1, [r2, #0]
 8005016:	ea43 0200 	orr.w	r2, r3, r0
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	440b      	add	r3, r1
 8005020:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005024:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3303      	adds	r3, #3
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	061a      	lsls	r2, r3, #24
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3302      	adds	r3, #2
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	041b      	lsls	r3, r3, #16
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3301      	adds	r3, #1
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	4313      	orrs	r3, r2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	7812      	ldrb	r2, [r2, #0]
 8005046:	4610      	mov	r0, r2
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	6811      	ldr	r1, [r2, #0]
 800504c:	ea43 0200 	orr.w	r2, r3, r0
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	440b      	add	r3, r1
 8005056:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800505a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	3318      	adds	r3, #24
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	4413      	add	r3, r2
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	6811      	ldr	r1, [r2, #0]
 800506e:	f043 0201 	orr.w	r2, r3, #1
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	3318      	adds	r3, #24
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	440b      	add	r3, r1
 800507a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	e00e      	b.n	800509e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e006      	b.n	800509e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
  }
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3724      	adds	r7, #36	; 0x24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80050aa:	b480      	push	{r7}
 80050ac:	b087      	sub	sp, #28
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	607a      	str	r2, [r7, #4]
 80050b6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050be:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80050c0:	7dfb      	ldrb	r3, [r7, #23]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d003      	beq.n	80050ce <HAL_CAN_GetRxMessage+0x24>
 80050c6:	7dfb      	ldrb	r3, [r7, #23]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	f040 80f3 	bne.w	80052b4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10e      	bne.n	80050f2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d116      	bne.n	8005110 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e0e7      	b.n	80052c2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f003 0303 	and.w	r3, r3, #3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d107      	bne.n	8005110 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e0d8      	b.n	80052c2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	331b      	adds	r3, #27
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	4413      	add	r3, r2
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0204 	and.w	r2, r3, #4
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10c      	bne.n	8005148 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	331b      	adds	r3, #27
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	4413      	add	r3, r2
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	0d5b      	lsrs	r3, r3, #21
 800513e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	e00b      	b.n	8005160 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	331b      	adds	r3, #27
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	4413      	add	r3, r2
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	08db      	lsrs	r3, r3, #3
 8005158:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	331b      	adds	r3, #27
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	4413      	add	r3, r2
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0202 	and.w	r2, r3, #2
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	331b      	adds	r3, #27
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	4413      	add	r3, r2
 8005182:	3304      	adds	r3, #4
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 020f 	and.w	r2, r3, #15
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	331b      	adds	r3, #27
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	4413      	add	r3, r2
 800519a:	3304      	adds	r3, #4
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	0a1b      	lsrs	r3, r3, #8
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	331b      	adds	r3, #27
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	4413      	add	r3, r2
 80051b2:	3304      	adds	r3, #4
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	0c1b      	lsrs	r3, r3, #16
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	011b      	lsls	r3, r3, #4
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	4413      	add	r3, r2
 80051de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	0a1a      	lsrs	r2, r3, #8
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	3301      	adds	r3, #1
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	0c1a      	lsrs	r2, r3, #16
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	3302      	adds	r3, #2
 8005204:	b2d2      	uxtb	r2, r2
 8005206:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	4413      	add	r3, r2
 8005212:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	0e1a      	lsrs	r2, r3, #24
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	3303      	adds	r3, #3
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	4413      	add	r3, r2
 800522c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	3304      	adds	r3, #4
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	4413      	add	r3, r2
 8005244:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	0a1a      	lsrs	r2, r3, #8
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	3305      	adds	r3, #5
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	4413      	add	r3, r2
 800525e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	0c1a      	lsrs	r2, r3, #16
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	3306      	adds	r3, #6
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	4413      	add	r3, r2
 8005278:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	0e1a      	lsrs	r2, r3, #24
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	3307      	adds	r3, #7
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d108      	bne.n	80052a0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0220 	orr.w	r2, r2, #32
 800529c:	60da      	str	r2, [r3, #12]
 800529e:	e007      	b.n	80052b0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691a      	ldr	r2, [r3, #16]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0220 	orr.w	r2, r2, #32
 80052ae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	e006      	b.n	80052c2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
  }
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	371c      	adds	r7, #28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b085      	sub	sp, #20
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052de:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d002      	beq.n	80052ec <HAL_CAN_ActivateNotification+0x1e>
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d109      	bne.n	8005300 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6959      	ldr	r1, [r3, #20]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	e006      	b.n	800530e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
  }
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b08a      	sub	sp, #40	; 0x28
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005322:	2300      	movs	r3, #0
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d07c      	beq.n	800545a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d023      	beq.n	80053b2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2201      	movs	r2, #1
 8005370:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f97d 	bl	800567c <HAL_CAN_TxMailbox0CompleteCallback>
 8005382:	e016      	b.n	80053b2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b00      	cmp	r3, #0
 800538c:	d004      	beq.n	8005398 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
 8005396:	e00c      	b.n	80053b2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d004      	beq.n	80053ac <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
 80053aa:	e002      	b.n	80053b2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f983 	bl	80056b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d024      	beq.n	8005406 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f95d 	bl	8005690 <HAL_CAN_TxMailbox1CompleteCallback>
 80053d6:	e016      	b.n	8005406 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ea:	e00c      	b.n	8005406 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d004      	beq.n	8005400 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
 80053fe:	e002      	b.n	8005406 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f963 	bl	80056cc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d024      	beq.n	800545a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005418:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f93d 	bl	80056a4 <HAL_CAN_TxMailbox2CompleteCallback>
 800542a:	e016      	b.n	800545a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d004      	beq.n	8005440 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
 800543e:	e00c      	b.n	800545a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d004      	beq.n	8005454 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
 8005452:	e002      	b.n	800545a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f943 	bl	80056e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00c      	beq.n	800547e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	2b00      	cmp	r3, #0
 800546c:	d007      	beq.n	800547e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005474:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2210      	movs	r2, #16
 800547c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00b      	beq.n	80054a0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d006      	beq.n	80054a0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2208      	movs	r2, #8
 8005498:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f92a 	bl	80056f4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d009      	beq.n	80054be <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7fb faa1 	bl	8000a00 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00c      	beq.n	80054e2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f003 0310 	and.w	r3, r3, #16
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d007      	beq.n	80054e2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2210      	movs	r2, #16
 80054e0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00b      	beq.n	8005504 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f003 0308 	and.w	r3, r3, #8
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d006      	beq.n	8005504 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2208      	movs	r2, #8
 80054fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f90c 	bl	800571c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	f003 0310 	and.w	r3, r3, #16
 800550a:	2b00      	cmp	r3, #0
 800550c:	d009      	beq.n	8005522 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	f003 0303 	and.w	r3, r3, #3
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f8f3 	bl	8005708 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00b      	beq.n	8005544 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	2b00      	cmp	r3, #0
 8005534:	d006      	beq.n	8005544 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2210      	movs	r2, #16
 800553c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f8f6 	bl	8005730 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00b      	beq.n	8005566 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b00      	cmp	r3, #0
 8005556:	d006      	beq.n	8005566 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2208      	movs	r2, #8
 800555e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f8ef 	bl	8005744 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d075      	beq.n	800565c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b00      	cmp	r3, #0
 8005578:	d06c      	beq.n	8005654 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005580:	2b00      	cmp	r3, #0
 8005582:	d008      	beq.n	8005596 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	f043 0301 	orr.w	r3, r3, #1
 8005594:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800559c:	2b00      	cmp	r3, #0
 800559e:	d008      	beq.n	80055b2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	f043 0302 	orr.w	r3, r3, #2
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d008      	beq.n	80055ce <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	f043 0304 	orr.w	r3, r3, #4
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d03d      	beq.n	8005654 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d038      	beq.n	8005654 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055e8:	2b30      	cmp	r3, #48	; 0x30
 80055ea:	d017      	beq.n	800561c <HAL_CAN_IRQHandler+0x302>
 80055ec:	2b30      	cmp	r3, #48	; 0x30
 80055ee:	d804      	bhi.n	80055fa <HAL_CAN_IRQHandler+0x2e0>
 80055f0:	2b10      	cmp	r3, #16
 80055f2:	d009      	beq.n	8005608 <HAL_CAN_IRQHandler+0x2ee>
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d00c      	beq.n	8005612 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80055f8:	e024      	b.n	8005644 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80055fa:	2b50      	cmp	r3, #80	; 0x50
 80055fc:	d018      	beq.n	8005630 <HAL_CAN_IRQHandler+0x316>
 80055fe:	2b60      	cmp	r3, #96	; 0x60
 8005600:	d01b      	beq.n	800563a <HAL_CAN_IRQHandler+0x320>
 8005602:	2b40      	cmp	r3, #64	; 0x40
 8005604:	d00f      	beq.n	8005626 <HAL_CAN_IRQHandler+0x30c>
            break;
 8005606:	e01d      	b.n	8005644 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	f043 0308 	orr.w	r3, r3, #8
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005610:	e018      	b.n	8005644 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	f043 0310 	orr.w	r3, r3, #16
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800561a:	e013      	b.n	8005644 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	f043 0320 	orr.w	r3, r3, #32
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005624:	e00e      	b.n	8005644 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800562e:	e009      	b.n	8005644 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005638:	e004      	b.n	8005644 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005642:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699a      	ldr	r2, [r3, #24]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005652:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2204      	movs	r2, #4
 800565a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	2b00      	cmp	r3, #0
 8005660:	d008      	beq.n	8005674 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	431a      	orrs	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f872 	bl	8005758 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005674:	bf00      	nop
 8005676:	3728      	adds	r7, #40	; 0x28
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800577c:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <__NVIC_SetPriorityGrouping+0x44>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005788:	4013      	ands	r3, r2
 800578a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800579c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800579e:	4a04      	ldr	r2, [pc, #16]	; (80057b0 <__NVIC_SetPriorityGrouping+0x44>)
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	60d3      	str	r3, [r2, #12]
}
 80057a4:	bf00      	nop
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	e000ed00 	.word	0xe000ed00

080057b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057b8:	4b04      	ldr	r3, [pc, #16]	; (80057cc <__NVIC_GetPriorityGrouping+0x18>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	0a1b      	lsrs	r3, r3, #8
 80057be:	f003 0307 	and.w	r3, r3, #7
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	e000ed00 	.word	0xe000ed00

080057d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	4603      	mov	r3, r0
 80057d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	db0b      	blt.n	80057fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057e2:	79fb      	ldrb	r3, [r7, #7]
 80057e4:	f003 021f 	and.w	r2, r3, #31
 80057e8:	4907      	ldr	r1, [pc, #28]	; (8005808 <__NVIC_EnableIRQ+0x38>)
 80057ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	2001      	movs	r0, #1
 80057f2:	fa00 f202 	lsl.w	r2, r0, r2
 80057f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80057fa:	bf00      	nop
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	e000e100 	.word	0xe000e100

0800580c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	4603      	mov	r3, r0
 8005814:	6039      	str	r1, [r7, #0]
 8005816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800581c:	2b00      	cmp	r3, #0
 800581e:	db0a      	blt.n	8005836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	b2da      	uxtb	r2, r3
 8005824:	490c      	ldr	r1, [pc, #48]	; (8005858 <__NVIC_SetPriority+0x4c>)
 8005826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800582a:	0112      	lsls	r2, r2, #4
 800582c:	b2d2      	uxtb	r2, r2
 800582e:	440b      	add	r3, r1
 8005830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005834:	e00a      	b.n	800584c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	b2da      	uxtb	r2, r3
 800583a:	4908      	ldr	r1, [pc, #32]	; (800585c <__NVIC_SetPriority+0x50>)
 800583c:	79fb      	ldrb	r3, [r7, #7]
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	3b04      	subs	r3, #4
 8005844:	0112      	lsls	r2, r2, #4
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	440b      	add	r3, r1
 800584a:	761a      	strb	r2, [r3, #24]
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	e000e100 	.word	0xe000e100
 800585c:	e000ed00 	.word	0xe000ed00

08005860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005860:	b480      	push	{r7}
 8005862:	b089      	sub	sp, #36	; 0x24
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f1c3 0307 	rsb	r3, r3, #7
 800587a:	2b04      	cmp	r3, #4
 800587c:	bf28      	it	cs
 800587e:	2304      	movcs	r3, #4
 8005880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	3304      	adds	r3, #4
 8005886:	2b06      	cmp	r3, #6
 8005888:	d902      	bls.n	8005890 <NVIC_EncodePriority+0x30>
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	3b03      	subs	r3, #3
 800588e:	e000      	b.n	8005892 <NVIC_EncodePriority+0x32>
 8005890:	2300      	movs	r3, #0
 8005892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005894:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	43da      	mvns	r2, r3
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	401a      	ands	r2, r3
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	fa01 f303 	lsl.w	r3, r1, r3
 80058b2:	43d9      	mvns	r1, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058b8:	4313      	orrs	r3, r2
         );
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3724      	adds	r7, #36	; 0x24
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b082      	sub	sp, #8
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7ff ff4c 	bl	800576c <__NVIC_SetPriorityGrouping>
}
 80058d4:	bf00      	nop
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4603      	mov	r3, r0
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058ee:	f7ff ff61 	bl	80057b4 <__NVIC_GetPriorityGrouping>
 80058f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	68b9      	ldr	r1, [r7, #8]
 80058f8:	6978      	ldr	r0, [r7, #20]
 80058fa:	f7ff ffb1 	bl	8005860 <NVIC_EncodePriority>
 80058fe:	4602      	mov	r2, r0
 8005900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005904:	4611      	mov	r1, r2
 8005906:	4618      	mov	r0, r3
 8005908:	f7ff ff80 	bl	800580c <__NVIC_SetPriority>
}
 800590c:	bf00      	nop
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800591e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005922:	4618      	mov	r0, r3
 8005924:	f7ff ff54 	bl	80057d0 <__NVIC_EnableIRQ>
}
 8005928:	bf00      	nop
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d004      	beq.n	800594e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2280      	movs	r2, #128	; 0x80
 8005948:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e00c      	b.n	8005968 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2205      	movs	r2, #5
 8005952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0201 	bic.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005982:	b2db      	uxtb	r3, r3
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005990:	b480      	push	{r7}
 8005992:	b089      	sub	sp, #36	; 0x24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800599e:	2300      	movs	r3, #0
 80059a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059a6:	2300      	movs	r3, #0
 80059a8:	61fb      	str	r3, [r7, #28]
 80059aa:	e16b      	b.n	8005c84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059ac:	2201      	movs	r2, #1
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	fa02 f303 	lsl.w	r3, r2, r3
 80059b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	4013      	ands	r3, r2
 80059be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	f040 815a 	bne.w	8005c7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d00b      	beq.n	80059ea <HAL_GPIO_Init+0x5a>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d007      	beq.n	80059ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059de:	2b11      	cmp	r3, #17
 80059e0:	d003      	beq.n	80059ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2b12      	cmp	r3, #18
 80059e8:	d130      	bne.n	8005a4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	2203      	movs	r2, #3
 80059f6:	fa02 f303 	lsl.w	r3, r2, r3
 80059fa:	43db      	mvns	r3, r3
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	4013      	ands	r3, r2
 8005a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a20:	2201      	movs	r2, #1
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	fa02 f303 	lsl.w	r3, r2, r3
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	091b      	lsrs	r3, r3, #4
 8005a36:	f003 0201 	and.w	r2, r3, #1
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	2203      	movs	r2, #3
 8005a58:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	4013      	ands	r3, r2
 8005a62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d003      	beq.n	8005a8c <HAL_GPIO_Init+0xfc>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b12      	cmp	r3, #18
 8005a8a:	d123      	bne.n	8005ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	08da      	lsrs	r2, r3, #3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3208      	adds	r2, #8
 8005a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	f003 0307 	and.w	r3, r3, #7
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	220f      	movs	r2, #15
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	4013      	ands	r3, r2
 8005aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	08da      	lsrs	r2, r3, #3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	3208      	adds	r2, #8
 8005ace:	69b9      	ldr	r1, [r7, #24]
 8005ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	2203      	movs	r2, #3
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	43db      	mvns	r3, r3
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f003 0203 	and.w	r2, r3, #3
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	fa02 f303 	lsl.w	r3, r2, r3
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 80b4 	beq.w	8005c7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	4b5f      	ldr	r3, [pc, #380]	; (8005c98 <HAL_GPIO_Init+0x308>)
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1e:	4a5e      	ldr	r2, [pc, #376]	; (8005c98 <HAL_GPIO_Init+0x308>)
 8005b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b24:	6453      	str	r3, [r2, #68]	; 0x44
 8005b26:	4b5c      	ldr	r3, [pc, #368]	; (8005c98 <HAL_GPIO_Init+0x308>)
 8005b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b32:	4a5a      	ldr	r2, [pc, #360]	; (8005c9c <HAL_GPIO_Init+0x30c>)
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	089b      	lsrs	r3, r3, #2
 8005b38:	3302      	adds	r3, #2
 8005b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	220f      	movs	r2, #15
 8005b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4e:	43db      	mvns	r3, r3
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	4013      	ands	r3, r2
 8005b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a51      	ldr	r2, [pc, #324]	; (8005ca0 <HAL_GPIO_Init+0x310>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d02b      	beq.n	8005bb6 <HAL_GPIO_Init+0x226>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a50      	ldr	r2, [pc, #320]	; (8005ca4 <HAL_GPIO_Init+0x314>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d025      	beq.n	8005bb2 <HAL_GPIO_Init+0x222>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a4f      	ldr	r2, [pc, #316]	; (8005ca8 <HAL_GPIO_Init+0x318>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d01f      	beq.n	8005bae <HAL_GPIO_Init+0x21e>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a4e      	ldr	r2, [pc, #312]	; (8005cac <HAL_GPIO_Init+0x31c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d019      	beq.n	8005baa <HAL_GPIO_Init+0x21a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a4d      	ldr	r2, [pc, #308]	; (8005cb0 <HAL_GPIO_Init+0x320>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <HAL_GPIO_Init+0x216>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a4c      	ldr	r2, [pc, #304]	; (8005cb4 <HAL_GPIO_Init+0x324>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00d      	beq.n	8005ba2 <HAL_GPIO_Init+0x212>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a4b      	ldr	r2, [pc, #300]	; (8005cb8 <HAL_GPIO_Init+0x328>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d007      	beq.n	8005b9e <HAL_GPIO_Init+0x20e>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a4a      	ldr	r2, [pc, #296]	; (8005cbc <HAL_GPIO_Init+0x32c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d101      	bne.n	8005b9a <HAL_GPIO_Init+0x20a>
 8005b96:	2307      	movs	r3, #7
 8005b98:	e00e      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005b9a:	2308      	movs	r3, #8
 8005b9c:	e00c      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005b9e:	2306      	movs	r3, #6
 8005ba0:	e00a      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005ba2:	2305      	movs	r3, #5
 8005ba4:	e008      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005ba6:	2304      	movs	r3, #4
 8005ba8:	e006      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005baa:	2303      	movs	r3, #3
 8005bac:	e004      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e002      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <HAL_GPIO_Init+0x228>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	f002 0203 	and.w	r2, r2, #3
 8005bbe:	0092      	lsls	r2, r2, #2
 8005bc0:	4093      	lsls	r3, r2
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bc8:	4934      	ldr	r1, [pc, #208]	; (8005c9c <HAL_GPIO_Init+0x30c>)
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	089b      	lsrs	r3, r3, #2
 8005bce:	3302      	adds	r3, #2
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005bd6:	4b3a      	ldr	r3, [pc, #232]	; (8005cc0 <HAL_GPIO_Init+0x330>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	43db      	mvns	r3, r3
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	4013      	ands	r3, r2
 8005be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005bfa:	4a31      	ldr	r2, [pc, #196]	; (8005cc0 <HAL_GPIO_Init+0x330>)
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005c00:	4b2f      	ldr	r3, [pc, #188]	; (8005cc0 <HAL_GPIO_Init+0x330>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	43db      	mvns	r3, r3
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c24:	4a26      	ldr	r2, [pc, #152]	; (8005cc0 <HAL_GPIO_Init+0x330>)
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c2a:	4b25      	ldr	r3, [pc, #148]	; (8005cc0 <HAL_GPIO_Init+0x330>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	43db      	mvns	r3, r3
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	4013      	ands	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c4e:	4a1c      	ldr	r2, [pc, #112]	; (8005cc0 <HAL_GPIO_Init+0x330>)
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c54:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <HAL_GPIO_Init+0x330>)
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	4013      	ands	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c78:	4a11      	ldr	r2, [pc, #68]	; (8005cc0 <HAL_GPIO_Init+0x330>)
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	3301      	adds	r3, #1
 8005c82:	61fb      	str	r3, [r7, #28]
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	2b0f      	cmp	r3, #15
 8005c88:	f67f ae90 	bls.w	80059ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c8c:	bf00      	nop
 8005c8e:	3724      	adds	r7, #36	; 0x24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	40013800 	.word	0x40013800
 8005ca0:	40020000 	.word	0x40020000
 8005ca4:	40020400 	.word	0x40020400
 8005ca8:	40020800 	.word	0x40020800
 8005cac:	40020c00 	.word	0x40020c00
 8005cb0:	40021000 	.word	0x40021000
 8005cb4:	40021400 	.word	0x40021400
 8005cb8:	40021800 	.word	0x40021800
 8005cbc:	40021c00 	.word	0x40021c00
 8005cc0:	40013c00 	.word	0x40013c00

08005cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e11f      	b.n	8005f16 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7fb fd08 	bl	8001700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2224      	movs	r2, #36	; 0x24
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0201 	bic.w	r2, r2, #1
 8005d06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d28:	f004 f9e2 	bl	800a0f0 <HAL_RCC_GetPCLK1Freq>
 8005d2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	4a7b      	ldr	r2, [pc, #492]	; (8005f20 <HAL_I2C_Init+0x25c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d807      	bhi.n	8005d48 <HAL_I2C_Init+0x84>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4a7a      	ldr	r2, [pc, #488]	; (8005f24 <HAL_I2C_Init+0x260>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	bf94      	ite	ls
 8005d40:	2301      	movls	r3, #1
 8005d42:	2300      	movhi	r3, #0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	e006      	b.n	8005d56 <HAL_I2C_Init+0x92>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4a77      	ldr	r2, [pc, #476]	; (8005f28 <HAL_I2C_Init+0x264>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	bf94      	ite	ls
 8005d50:	2301      	movls	r3, #1
 8005d52:	2300      	movhi	r3, #0
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e0db      	b.n	8005f16 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	4a72      	ldr	r2, [pc, #456]	; (8005f2c <HAL_I2C_Init+0x268>)
 8005d62:	fba2 2303 	umull	r2, r3, r2, r3
 8005d66:	0c9b      	lsrs	r3, r3, #18
 8005d68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	4a64      	ldr	r2, [pc, #400]	; (8005f20 <HAL_I2C_Init+0x25c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d802      	bhi.n	8005d98 <HAL_I2C_Init+0xd4>
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	3301      	adds	r3, #1
 8005d96:	e009      	b.n	8005dac <HAL_I2C_Init+0xe8>
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005d9e:	fb02 f303 	mul.w	r3, r2, r3
 8005da2:	4a63      	ldr	r2, [pc, #396]	; (8005f30 <HAL_I2C_Init+0x26c>)
 8005da4:	fba2 2303 	umull	r2, r3, r2, r3
 8005da8:	099b      	lsrs	r3, r3, #6
 8005daa:	3301      	adds	r3, #1
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6812      	ldr	r2, [r2, #0]
 8005db0:	430b      	orrs	r3, r1
 8005db2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005dbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	4956      	ldr	r1, [pc, #344]	; (8005f20 <HAL_I2C_Init+0x25c>)
 8005dc8:	428b      	cmp	r3, r1
 8005dca:	d80d      	bhi.n	8005de8 <HAL_I2C_Init+0x124>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	1e59      	subs	r1, r3, #1
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dda:	3301      	adds	r3, #1
 8005ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	bf38      	it	cc
 8005de4:	2304      	movcc	r3, #4
 8005de6:	e04f      	b.n	8005e88 <HAL_I2C_Init+0x1c4>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d111      	bne.n	8005e14 <HAL_I2C_Init+0x150>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	1e58      	subs	r0, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6859      	ldr	r1, [r3, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	440b      	add	r3, r1
 8005dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e02:	3301      	adds	r3, #1
 8005e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	bf0c      	ite	eq
 8005e0c:	2301      	moveq	r3, #1
 8005e0e:	2300      	movne	r3, #0
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	e012      	b.n	8005e3a <HAL_I2C_Init+0x176>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	1e58      	subs	r0, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6859      	ldr	r1, [r3, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	440b      	add	r3, r1
 8005e22:	0099      	lsls	r1, r3, #2
 8005e24:	440b      	add	r3, r1
 8005e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bf0c      	ite	eq
 8005e34:	2301      	moveq	r3, #1
 8005e36:	2300      	movne	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <HAL_I2C_Init+0x17e>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e022      	b.n	8005e88 <HAL_I2C_Init+0x1c4>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10e      	bne.n	8005e68 <HAL_I2C_Init+0x1a4>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	1e58      	subs	r0, r3, #1
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6859      	ldr	r1, [r3, #4]
 8005e52:	460b      	mov	r3, r1
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	440b      	add	r3, r1
 8005e58:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e66:	e00f      	b.n	8005e88 <HAL_I2C_Init+0x1c4>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	1e58      	subs	r0, r3, #1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6859      	ldr	r1, [r3, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	440b      	add	r3, r1
 8005e76:	0099      	lsls	r1, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e7e:	3301      	adds	r3, #1
 8005e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	6809      	ldr	r1, [r1, #0]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69da      	ldr	r2, [r3, #28]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005eb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6911      	ldr	r1, [r2, #16]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	68d2      	ldr	r2, [r2, #12]
 8005ec2:	4311      	orrs	r1, r2
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6812      	ldr	r2, [r2, #0]
 8005ec8:	430b      	orrs	r3, r1
 8005eca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	695a      	ldr	r2, [r3, #20]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0201 	orr.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	000186a0 	.word	0x000186a0
 8005f24:	001e847f 	.word	0x001e847f
 8005f28:	003d08ff 	.word	0x003d08ff
 8005f2c:	431bde83 	.word	0x431bde83
 8005f30:	10624dd3 	.word	0x10624dd3

08005f34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b088      	sub	sp, #32
 8005f38:	af02      	add	r7, sp, #8
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	607a      	str	r2, [r7, #4]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	460b      	mov	r3, r1
 8005f42:	817b      	strh	r3, [r7, #10]
 8005f44:	4613      	mov	r3, r2
 8005f46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f48:	f7fe fd86 	bl	8004a58 <HAL_GetTick>
 8005f4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	f040 80e0 	bne.w	800611c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	2319      	movs	r3, #25
 8005f62:	2201      	movs	r2, #1
 8005f64:	4970      	ldr	r1, [pc, #448]	; (8006128 <HAL_I2C_Master_Transmit+0x1f4>)
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f002 f8da 	bl	8008120 <I2C_WaitOnFlagUntilTimeout>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005f72:	2302      	movs	r3, #2
 8005f74:	e0d3      	b.n	800611e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_I2C_Master_Transmit+0x50>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e0cc      	b.n	800611e <HAL_I2C_Master_Transmit+0x1ea>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d007      	beq.n	8005faa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f042 0201 	orr.w	r2, r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2221      	movs	r2, #33	; 0x21
 8005fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2210      	movs	r2, #16
 8005fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	893a      	ldrh	r2, [r7, #8]
 8005fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4a50      	ldr	r2, [pc, #320]	; (800612c <HAL_I2C_Master_Transmit+0x1f8>)
 8005fea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005fec:	8979      	ldrh	r1, [r7, #10]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	6a3a      	ldr	r2, [r7, #32]
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f001 fe82 	bl	8007cfc <I2C_MasterRequestWrite>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e08d      	b.n	800611e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006002:	2300      	movs	r3, #0
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	613b      	str	r3, [r7, #16]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006018:	e066      	b.n	80060e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	6a39      	ldr	r1, [r7, #32]
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f002 f954 	bl	80082cc <I2C_WaitOnTXEFlagUntilTimeout>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00d      	beq.n	8006046 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	2b04      	cmp	r3, #4
 8006030:	d107      	bne.n	8006042 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006040:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e06b      	b.n	800611e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	781a      	ldrb	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006060:	b29b      	uxth	r3, r3
 8006062:	3b01      	subs	r3, #1
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800606e:	3b01      	subs	r3, #1
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b04      	cmp	r3, #4
 8006082:	d11b      	bne.n	80060bc <HAL_I2C_Master_Transmit+0x188>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006088:	2b00      	cmp	r3, #0
 800608a:	d017      	beq.n	80060bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006090:	781a      	ldrb	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b4:	3b01      	subs	r3, #1
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	6a39      	ldr	r1, [r7, #32]
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f002 f944 	bl	800834e <I2C_WaitOnBTFFlagUntilTimeout>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00d      	beq.n	80060e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d107      	bne.n	80060e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e01a      	b.n	800611e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d194      	bne.n	800601a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2220      	movs	r2, #32
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	e000      	b.n	800611e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800611c:	2302      	movs	r3, #2
  }
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	00100002 	.word	0x00100002
 800612c:	ffff0000 	.word	0xffff0000

08006130 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08c      	sub	sp, #48	; 0x30
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	4608      	mov	r0, r1
 800613a:	4611      	mov	r1, r2
 800613c:	461a      	mov	r2, r3
 800613e:	4603      	mov	r3, r0
 8006140:	817b      	strh	r3, [r7, #10]
 8006142:	460b      	mov	r3, r1
 8006144:	813b      	strh	r3, [r7, #8]
 8006146:	4613      	mov	r3, r2
 8006148:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800614a:	f7fe fc85 	bl	8004a58 <HAL_GetTick>
 800614e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b20      	cmp	r3, #32
 800615a:	f040 8208 	bne.w	800656e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	2319      	movs	r3, #25
 8006164:	2201      	movs	r2, #1
 8006166:	497b      	ldr	r1, [pc, #492]	; (8006354 <HAL_I2C_Mem_Read+0x224>)
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f001 ffd9 	bl	8008120 <I2C_WaitOnFlagUntilTimeout>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006174:	2302      	movs	r3, #2
 8006176:	e1fb      	b.n	8006570 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800617e:	2b01      	cmp	r3, #1
 8006180:	d101      	bne.n	8006186 <HAL_I2C_Mem_Read+0x56>
 8006182:	2302      	movs	r3, #2
 8006184:	e1f4      	b.n	8006570 <HAL_I2C_Mem_Read+0x440>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b01      	cmp	r3, #1
 800619a:	d007      	beq.n	80061ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0201 	orr.w	r2, r2, #1
 80061aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2222      	movs	r2, #34	; 0x22
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2240      	movs	r2, #64	; 0x40
 80061c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80061dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	4a5b      	ldr	r2, [pc, #364]	; (8006358 <HAL_I2C_Mem_Read+0x228>)
 80061ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80061ee:	88f8      	ldrh	r0, [r7, #6]
 80061f0:	893a      	ldrh	r2, [r7, #8]
 80061f2:	8979      	ldrh	r1, [r7, #10]
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	9301      	str	r3, [sp, #4]
 80061f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	4603      	mov	r3, r0
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f001 fdfe 	bl	8007e00 <I2C_RequestMemoryRead>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e1b0      	b.n	8006570 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006212:	2b00      	cmp	r3, #0
 8006214:	d113      	bne.n	800623e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006216:	2300      	movs	r3, #0
 8006218:	623b      	str	r3, [r7, #32]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	623b      	str	r3, [r7, #32]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	623b      	str	r3, [r7, #32]
 800622a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	e184      	b.n	8006548 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006242:	2b01      	cmp	r3, #1
 8006244:	d11b      	bne.n	800627e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006254:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006256:	2300      	movs	r3, #0
 8006258:	61fb      	str	r3, [r7, #28]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	61fb      	str	r3, [r7, #28]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	61fb      	str	r3, [r7, #28]
 800626a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	e164      	b.n	8006548 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006282:	2b02      	cmp	r3, #2
 8006284:	d11b      	bne.n	80062be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006294:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062a6:	2300      	movs	r3, #0
 80062a8:	61bb      	str	r3, [r7, #24]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	61bb      	str	r3, [r7, #24]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	61bb      	str	r3, [r7, #24]
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	e144      	b.n	8006548 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062be:	2300      	movs	r3, #0
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80062d4:	e138      	b.n	8006548 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062da:	2b03      	cmp	r3, #3
 80062dc:	f200 80f1 	bhi.w	80064c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d123      	bne.n	8006330 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f002 f8a1 	bl	8008434 <I2C_WaitOnRXNEFlagUntilTimeout>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e139      	b.n	8006570 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006324:	b29b      	uxth	r3, r3
 8006326:	3b01      	subs	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800632e:	e10b      	b.n	8006548 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006334:	2b02      	cmp	r3, #2
 8006336:	d14e      	bne.n	80063d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633e:	2200      	movs	r2, #0
 8006340:	4906      	ldr	r1, [pc, #24]	; (800635c <HAL_I2C_Mem_Read+0x22c>)
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f001 feec 	bl	8008120 <I2C_WaitOnFlagUntilTimeout>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d008      	beq.n	8006360 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e10e      	b.n	8006570 <HAL_I2C_Mem_Read+0x440>
 8006352:	bf00      	nop
 8006354:	00100002 	.word	0x00100002
 8006358:	ffff0000 	.word	0xffff0000
 800635c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800636e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691a      	ldr	r2, [r3, #16]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	b2d2      	uxtb	r2, r2
 800637c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800638c:	3b01      	subs	r3, #1
 800638e:	b29a      	uxth	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006398:	b29b      	uxth	r3, r3
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	3b01      	subs	r3, #1
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063d4:	e0b8      	b.n	8006548 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063dc:	2200      	movs	r2, #0
 80063de:	4966      	ldr	r1, [pc, #408]	; (8006578 <HAL_I2C_Mem_Read+0x448>)
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f001 fe9d 	bl	8008120 <I2C_WaitOnFlagUntilTimeout>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e0bf      	b.n	8006570 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691a      	ldr	r2, [r3, #16]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800641c:	3b01      	subs	r3, #1
 800641e:	b29a      	uxth	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b01      	subs	r3, #1
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006438:	2200      	movs	r2, #0
 800643a:	494f      	ldr	r1, [pc, #316]	; (8006578 <HAL_I2C_Mem_Read+0x448>)
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f001 fe6f 	bl	8008120 <I2C_WaitOnFlagUntilTimeout>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e091      	b.n	8006570 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800645a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	691a      	ldr	r2, [r3, #16]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006478:	3b01      	subs	r3, #1
 800647a:	b29a      	uxth	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006484:	b29b      	uxth	r3, r3
 8006486:	3b01      	subs	r3, #1
 8006488:	b29a      	uxth	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	691a      	ldr	r2, [r3, #16]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064aa:	3b01      	subs	r3, #1
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064c0:	e042      	b.n	8006548 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f001 ffb4 	bl	8008434 <I2C_WaitOnRXNEFlagUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e04c      	b.n	8006570 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	691a      	ldr	r2, [r3, #16]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	b2d2      	uxtb	r2, r2
 80064e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f2:	3b01      	subs	r3, #1
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fe:	b29b      	uxth	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b29a      	uxth	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b04      	cmp	r3, #4
 8006514:	d118      	bne.n	8006548 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	691a      	ldr	r2, [r3, #16]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006520:	b2d2      	uxtb	r2, r2
 8006522:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006532:	3b01      	subs	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800653e:	b29b      	uxth	r3, r3
 8006540:	3b01      	subs	r3, #1
 8006542:	b29a      	uxth	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654c:	2b00      	cmp	r3, #0
 800654e:	f47f aec2 	bne.w	80062d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2220      	movs	r2, #32
 8006556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	e000      	b.n	8006570 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800656e:	2302      	movs	r3, #2
  }
}
 8006570:	4618      	mov	r0, r3
 8006572:	3728      	adds	r7, #40	; 0x28
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	00010004 	.word	0x00010004

0800657c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b088      	sub	sp, #32
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006594:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800659c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	2b10      	cmp	r3, #16
 80065aa:	d003      	beq.n	80065b4 <HAL_I2C_EV_IRQHandler+0x38>
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	2b40      	cmp	r3, #64	; 0x40
 80065b0:	f040 80bd 	bne.w	800672e <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10d      	bne.n	80065ea <HAL_I2C_EV_IRQHandler+0x6e>
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80065d4:	d003      	beq.n	80065de <HAL_I2C_EV_IRQHandler+0x62>
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80065dc:	d101      	bne.n	80065e2 <HAL_I2C_EV_IRQHandler+0x66>
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <HAL_I2C_EV_IRQHandler+0x68>
 80065e2:	2300      	movs	r3, #0
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	f000 812e 	beq.w	8006846 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00c      	beq.n	800660e <HAL_I2C_EV_IRQHandler+0x92>
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	0a5b      	lsrs	r3, r3, #9
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d006      	beq.n	800660e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f001 ff9c 	bl	800853e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fd62 	bl	80070d0 <I2C_Master_SB>
 800660c:	e08e      	b.n	800672c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	08db      	lsrs	r3, r3, #3
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d009      	beq.n	800662e <HAL_I2C_EV_IRQHandler+0xb2>
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	0a5b      	lsrs	r3, r3, #9
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fdd8 	bl	80071dc <I2C_Master_ADD10>
 800662c:	e07e      	b.n	800672c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	085b      	lsrs	r3, r3, #1
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d009      	beq.n	800664e <HAL_I2C_EV_IRQHandler+0xd2>
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	0a5b      	lsrs	r3, r3, #9
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fdf2 	bl	8007230 <I2C_Master_ADDR>
 800664c:	e06e      	b.n	800672c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	089b      	lsrs	r3, r3, #2
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d037      	beq.n	80066ca <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006668:	f000 80ef 	beq.w	800684a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	09db      	lsrs	r3, r3, #7
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00f      	beq.n	8006698 <HAL_I2C_EV_IRQHandler+0x11c>
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	0a9b      	lsrs	r3, r3, #10
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	d009      	beq.n	8006698 <HAL_I2C_EV_IRQHandler+0x11c>
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	089b      	lsrs	r3, r3, #2
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b00      	cmp	r3, #0
 800668e:	d103      	bne.n	8006698 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f9ef 	bl	8006a74 <I2C_MasterTransmit_TXE>
 8006696:	e049      	b.n	800672c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	089b      	lsrs	r3, r3, #2
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 80d2 	beq.w	800684a <HAL_I2C_EV_IRQHandler+0x2ce>
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	0a5b      	lsrs	r3, r3, #9
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 80cb 	beq.w	800684a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	2b10      	cmp	r3, #16
 80066b8:	d103      	bne.n	80066c2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fa76 	bl	8006bac <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066c0:	e0c3      	b.n	800684a <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fada 	bl	8006c7c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066c8:	e0bf      	b.n	800684a <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066d8:	f000 80b7 	beq.w	800684a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	099b      	lsrs	r3, r3, #6
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00f      	beq.n	8006708 <HAL_I2C_EV_IRQHandler+0x18c>
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	0a9b      	lsrs	r3, r3, #10
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d009      	beq.n	8006708 <HAL_I2C_EV_IRQHandler+0x18c>
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	089b      	lsrs	r3, r3, #2
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d103      	bne.n	8006708 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fb4a 	bl	8006d9a <I2C_MasterReceive_RXNE>
 8006706:	e011      	b.n	800672c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	089b      	lsrs	r3, r3, #2
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 809a 	beq.w	800684a <HAL_I2C_EV_IRQHandler+0x2ce>
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	0a5b      	lsrs	r3, r3, #9
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 8093 	beq.w	800684a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fbe9 	bl	8006efc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800672a:	e08e      	b.n	800684a <HAL_I2C_EV_IRQHandler+0x2ce>
 800672c:	e08d      	b.n	800684a <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	2b00      	cmp	r3, #0
 8006734:	d004      	beq.n	8006740 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	61fb      	str	r3, [r7, #28]
 800673e:	e007      	b.n	8006750 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	085b      	lsrs	r3, r3, #1
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	d012      	beq.n	8006782 <HAL_I2C_EV_IRQHandler+0x206>
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	0a5b      	lsrs	r3, r3, #9
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00c      	beq.n	8006782 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006778:	69b9      	ldr	r1, [r7, #24]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 ffa7 	bl	80076ce <I2C_Slave_ADDR>
 8006780:	e066      	b.n	8006850 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	091b      	lsrs	r3, r3, #4
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <HAL_I2C_EV_IRQHandler+0x226>
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	0a5b      	lsrs	r3, r3, #9
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 ffdc 	bl	8007758 <I2C_Slave_STOPF>
 80067a0:	e056      	b.n	8006850 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80067a2:	7bbb      	ldrb	r3, [r7, #14]
 80067a4:	2b21      	cmp	r3, #33	; 0x21
 80067a6:	d002      	beq.n	80067ae <HAL_I2C_EV_IRQHandler+0x232>
 80067a8:	7bbb      	ldrb	r3, [r7, #14]
 80067aa:	2b29      	cmp	r3, #41	; 0x29
 80067ac:	d125      	bne.n	80067fa <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	09db      	lsrs	r3, r3, #7
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00f      	beq.n	80067da <HAL_I2C_EV_IRQHandler+0x25e>
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	0a9b      	lsrs	r3, r3, #10
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d009      	beq.n	80067da <HAL_I2C_EV_IRQHandler+0x25e>
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	089b      	lsrs	r3, r3, #2
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d103      	bne.n	80067da <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 febd 	bl	8007552 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067d8:	e039      	b.n	800684e <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	089b      	lsrs	r3, r3, #2
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d033      	beq.n	800684e <HAL_I2C_EV_IRQHandler+0x2d2>
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	0a5b      	lsrs	r3, r3, #9
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d02d      	beq.n	800684e <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 feea 	bl	80075cc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067f8:	e029      	b.n	800684e <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	099b      	lsrs	r3, r3, #6
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00f      	beq.n	8006826 <HAL_I2C_EV_IRQHandler+0x2aa>
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	0a9b      	lsrs	r3, r3, #10
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d009      	beq.n	8006826 <HAL_I2C_EV_IRQHandler+0x2aa>
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	089b      	lsrs	r3, r3, #2
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d103      	bne.n	8006826 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fef5 	bl	800760e <I2C_SlaveReceive_RXNE>
 8006824:	e014      	b.n	8006850 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	089b      	lsrs	r3, r3, #2
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00e      	beq.n	8006850 <HAL_I2C_EV_IRQHandler+0x2d4>
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	0a5b      	lsrs	r3, r3, #9
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d008      	beq.n	8006850 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 ff23 	bl	800768a <I2C_SlaveReceive_BTF>
 8006844:	e004      	b.n	8006850 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8006846:	bf00      	nop
 8006848:	e002      	b.n	8006850 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800684a:	bf00      	nop
 800684c:	e000      	b.n	8006850 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800684e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006850:	3720      	adds	r7, #32
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b08a      	sub	sp, #40	; 0x28
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800686e:	2300      	movs	r3, #0
 8006870:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006878:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	0a1b      	lsrs	r3, r3, #8
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00e      	beq.n	80068a4 <HAL_I2C_ER_IRQHandler+0x4e>
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	0a1b      	lsrs	r3, r3, #8
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d008      	beq.n	80068a4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006894:	f043 0301 	orr.w	r3, r3, #1
 8006898:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80068a2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	0a5b      	lsrs	r3, r3, #9
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00e      	beq.n	80068ce <HAL_I2C_ER_IRQHandler+0x78>
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	0a1b      	lsrs	r3, r3, #8
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d008      	beq.n	80068ce <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	f043 0302 	orr.w	r3, r3, #2
 80068c2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80068cc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	0a9b      	lsrs	r3, r3, #10
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d03f      	beq.n	800695a <HAL_I2C_ER_IRQHandler+0x104>
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	0a1b      	lsrs	r3, r3, #8
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d039      	beq.n	800695a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80068e6:	7efb      	ldrb	r3, [r7, #27]
 80068e8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006900:	7ebb      	ldrb	r3, [r7, #26]
 8006902:	2b20      	cmp	r3, #32
 8006904:	d112      	bne.n	800692c <HAL_I2C_ER_IRQHandler+0xd6>
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10f      	bne.n	800692c <HAL_I2C_ER_IRQHandler+0xd6>
 800690c:	7cfb      	ldrb	r3, [r7, #19]
 800690e:	2b21      	cmp	r3, #33	; 0x21
 8006910:	d008      	beq.n	8006924 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006912:	7cfb      	ldrb	r3, [r7, #19]
 8006914:	2b29      	cmp	r3, #41	; 0x29
 8006916:	d005      	beq.n	8006924 <HAL_I2C_ER_IRQHandler+0xce>
 8006918:	7cfb      	ldrb	r3, [r7, #19]
 800691a:	2b28      	cmp	r3, #40	; 0x28
 800691c:	d106      	bne.n	800692c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b21      	cmp	r3, #33	; 0x21
 8006922:	d103      	bne.n	800692c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f001 f847 	bl	80079b8 <I2C_Slave_AF>
 800692a:	e016      	b.n	800695a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006934:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	f043 0304 	orr.w	r3, r3, #4
 800693c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800693e:	7efb      	ldrb	r3, [r7, #27]
 8006940:	2b10      	cmp	r3, #16
 8006942:	d002      	beq.n	800694a <HAL_I2C_ER_IRQHandler+0xf4>
 8006944:	7efb      	ldrb	r3, [r7, #27]
 8006946:	2b40      	cmp	r3, #64	; 0x40
 8006948:	d107      	bne.n	800695a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006958:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	0adb      	lsrs	r3, r3, #11
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00e      	beq.n	8006984 <HAL_I2C_ER_IRQHandler+0x12e>
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	0a1b      	lsrs	r3, r3, #8
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d008      	beq.n	8006984 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	f043 0308 	orr.w	r3, r3, #8
 8006978:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006982:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	2b00      	cmp	r3, #0
 8006988:	d008      	beq.n	800699c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	431a      	orrs	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f001 f87e 	bl	8007a98 <I2C_ITError>
  }
}
 800699c:	bf00      	nop
 800699e:	3728      	adds	r7, #40	; 0x28
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	70fb      	strb	r3, [r7, #3]
 8006a00:	4613      	mov	r3, r2
 8006a02:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a82:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a8a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a90:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d150      	bne.n	8006b3c <I2C_MasterTransmit_TXE+0xc8>
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	2b21      	cmp	r3, #33	; 0x21
 8006a9e:	d14d      	bne.n	8006b3c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2b08      	cmp	r3, #8
 8006aa4:	d01d      	beq.n	8006ae2 <I2C_MasterTransmit_TXE+0x6e>
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2b20      	cmp	r3, #32
 8006aaa:	d01a      	beq.n	8006ae2 <I2C_MasterTransmit_TXE+0x6e>
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ab2:	d016      	beq.n	8006ae2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ac2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2211      	movs	r2, #17
 8006ac8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff ff62 	bl	80069a4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ae0:	e060      	b.n	8006ba4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006af0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b00:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b40      	cmp	r3, #64	; 0x40
 8006b1a:	d107      	bne.n	8006b2c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f7ff ff7d 	bl	8006a24 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b2a:	e03b      	b.n	8006ba4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7ff ff35 	bl	80069a4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b3a:	e033      	b.n	8006ba4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
 8006b3e:	2b21      	cmp	r3, #33	; 0x21
 8006b40:	d005      	beq.n	8006b4e <I2C_MasterTransmit_TXE+0xda>
 8006b42:	7bbb      	ldrb	r3, [r7, #14]
 8006b44:	2b40      	cmp	r3, #64	; 0x40
 8006b46:	d12d      	bne.n	8006ba4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
 8006b4a:	2b22      	cmp	r3, #34	; 0x22
 8006b4c:	d12a      	bne.n	8006ba4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d108      	bne.n	8006b6a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b66:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006b68:	e01c      	b.n	8006ba4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b40      	cmp	r3, #64	; 0x40
 8006b74:	d103      	bne.n	8006b7e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f880 	bl	8006c7c <I2C_MemoryTransmit_TXE_BTF>
}
 8006b7c:	e012      	b.n	8006ba4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	781a      	ldrb	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	1c5a      	adds	r2, r3, #1
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006ba2:	e7ff      	b.n	8006ba4 <I2C_MasterTransmit_TXE+0x130>
 8006ba4:	bf00      	nop
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b21      	cmp	r3, #33	; 0x21
 8006bc4:	d156      	bne.n	8006c74 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d012      	beq.n	8006bf6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd4:	781a      	ldrb	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	1c5a      	adds	r2, r3, #1
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	3b01      	subs	r3, #1
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006bf4:	e03e      	b.n	8006c74 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d01d      	beq.n	8006c38 <I2C_MasterTransmit_BTF+0x8c>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2b20      	cmp	r3, #32
 8006c00:	d01a      	beq.n	8006c38 <I2C_MasterTransmit_BTF+0x8c>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c08:	d016      	beq.n	8006c38 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c18:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2211      	movs	r2, #17
 8006c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7ff feb7 	bl	80069a4 <HAL_I2C_MasterTxCpltCallback>
}
 8006c36:	e01d      	b.n	8006c74 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c46:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c56:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2220      	movs	r2, #32
 8006c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7ff fe98 	bl	80069a4 <HAL_I2C_MasterTxCpltCallback>
}
 8006c74:	bf00      	nop
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d11d      	bne.n	8006cd0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d10b      	bne.n	8006cb4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cac:	1c9a      	adds	r2, r3, #2
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006cb2:	e06e      	b.n	8006d92 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	121b      	asrs	r3, r3, #8
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc8:	1c5a      	adds	r2, r3, #1
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006cce:	e060      	b.n	8006d92 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d10b      	bne.n	8006cf0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006cee:	e050      	b.n	8006d92 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d14c      	bne.n	8006d92 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	2b22      	cmp	r3, #34	; 0x22
 8006cfc:	d108      	bne.n	8006d10 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d0c:	601a      	str	r2, [r3, #0]
}
 8006d0e:	e040      	b.n	8006d92 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d015      	beq.n	8006d46 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
 8006d1c:	2b21      	cmp	r3, #33	; 0x21
 8006d1e:	d112      	bne.n	8006d46 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	781a      	ldrb	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006d44:	e025      	b.n	8006d92 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d120      	bne.n	8006d92 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	2b21      	cmp	r3, #33	; 0x21
 8006d54:	d11d      	bne.n	8006d92 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d64:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d74:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff fe49 	bl	8006a24 <HAL_I2C_MemTxCpltCallback>
}
 8006d92:	bf00      	nop
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b22      	cmp	r3, #34	; 0x22
 8006dac:	f040 80a2 	bne.w	8006ef4 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d921      	bls.n	8006e02 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	691a      	ldr	r2, [r3, #16]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc8:	b2d2      	uxtb	r2, r2
 8006dca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	f040 8082 	bne.w	8006ef4 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dfe:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8006e00:	e078      	b.n	8006ef4 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d074      	beq.n	8006ef4 <I2C_MasterReceive_RXNE+0x15a>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d002      	beq.n	8006e16 <I2C_MasterReceive_RXNE+0x7c>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d16e      	bne.n	8006ef4 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 fada 	bl	80083d0 <I2C_WaitOnSTOPRequestThroughIT>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d142      	bne.n	8006ea8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e30:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e40:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	691a      	ldr	r2, [r3, #16]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	b2d2      	uxtb	r2, r2
 8006e4e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	3b01      	subs	r3, #1
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b40      	cmp	r3, #64	; 0x40
 8006e7a:	d10a      	bne.n	8006e92 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7ff fdd4 	bl	8006a38 <HAL_I2C_MemRxCpltCallback>
}
 8006e90:	e030      	b.n	8006ef4 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2212      	movs	r2, #18
 8006e9e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f7ff fd89 	bl	80069b8 <HAL_I2C_MasterRxCpltCallback>
}
 8006ea6:	e025      	b.n	8006ef4 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006eb6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	691a      	ldr	r2, [r3, #16]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	b2d2      	uxtb	r2, r2
 8006ec4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7ff fdac 	bl	8006a4c <HAL_I2C_ErrorCallback>
}
 8006ef4:	bf00      	nop
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f08:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	2b04      	cmp	r3, #4
 8006f12:	d11b      	bne.n	8006f4c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f22:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691a      	ldr	r2, [r3, #16]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	b2d2      	uxtb	r2, r2
 8006f30:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006f4a:	e0bd      	b.n	80070c8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	2b03      	cmp	r3, #3
 8006f54:	d129      	bne.n	8006faa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f64:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b04      	cmp	r3, #4
 8006f6a:	d00a      	beq.n	8006f82 <I2C_MasterReceive_BTF+0x86>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d007      	beq.n	8006f82 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f80:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	691a      	ldr	r2, [r3, #16]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8c:	b2d2      	uxtb	r2, r2
 8006f8e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006fa8:	e08e      	b.n	80070c8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d176      	bne.n	80070a2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d002      	beq.n	8006fc0 <I2C_MasterReceive_BTF+0xc4>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b10      	cmp	r3, #16
 8006fbe:	d108      	bne.n	8006fd2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	e019      	b.n	8007006 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d002      	beq.n	8006fde <I2C_MasterReceive_BTF+0xe2>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d108      	bne.n	8006ff0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	e00a      	b.n	8007006 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b10      	cmp	r3, #16
 8006ff4:	d007      	beq.n	8007006 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007004:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	691a      	ldr	r2, [r3, #16]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	b2d2      	uxtb	r2, r2
 8007012:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007022:	b29b      	uxth	r3, r3
 8007024:	3b01      	subs	r3, #1
 8007026:	b29a      	uxth	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	691a      	ldr	r2, [r3, #16]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007048:	b29b      	uxth	r3, r3
 800704a:	3b01      	subs	r3, #1
 800704c:	b29a      	uxth	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007060:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2220      	movs	r2, #32
 8007066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b40      	cmp	r3, #64	; 0x40
 8007074:	d10a      	bne.n	800708c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7ff fcd7 	bl	8006a38 <HAL_I2C_MemRxCpltCallback>
}
 800708a:	e01d      	b.n	80070c8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2212      	movs	r2, #18
 8007098:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f7ff fc8c 	bl	80069b8 <HAL_I2C_MasterRxCpltCallback>
}
 80070a0:	e012      	b.n	80070c8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	691a      	ldr	r2, [r3, #16]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	b2d2      	uxtb	r2, r2
 80070ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070be:	b29b      	uxth	r3, r3
 80070c0:	3b01      	subs	r3, #1
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80070c8:	bf00      	nop
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b40      	cmp	r3, #64	; 0x40
 80070e2:	d117      	bne.n	8007114 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d109      	bne.n	8007100 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	461a      	mov	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070fc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80070fe:	e067      	b.n	80071d0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007104:	b2db      	uxtb	r3, r3
 8007106:	f043 0301 	orr.w	r3, r3, #1
 800710a:	b2da      	uxtb	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	611a      	str	r2, [r3, #16]
}
 8007112:	e05d      	b.n	80071d0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800711c:	d133      	bne.n	8007186 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b21      	cmp	r3, #33	; 0x21
 8007128:	d109      	bne.n	800713e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712e:	b2db      	uxtb	r3, r3
 8007130:	461a      	mov	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800713a:	611a      	str	r2, [r3, #16]
 800713c:	e008      	b.n	8007150 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007142:	b2db      	uxtb	r3, r3
 8007144:	f043 0301 	orr.w	r3, r3, #1
 8007148:	b2da      	uxtb	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007154:	2b00      	cmp	r3, #0
 8007156:	d004      	beq.n	8007162 <I2C_Master_SB+0x92>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715e:	2b00      	cmp	r3, #0
 8007160:	d108      	bne.n	8007174 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007166:	2b00      	cmp	r3, #0
 8007168:	d032      	beq.n	80071d0 <I2C_Master_SB+0x100>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007170:	2b00      	cmp	r3, #0
 8007172:	d02d      	beq.n	80071d0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007182:	605a      	str	r2, [r3, #4]
}
 8007184:	e024      	b.n	80071d0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10e      	bne.n	80071ac <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007192:	b29b      	uxth	r3, r3
 8007194:	11db      	asrs	r3, r3, #7
 8007196:	b2db      	uxtb	r3, r3
 8007198:	f003 0306 	and.w	r3, r3, #6
 800719c:	b2db      	uxtb	r3, r3
 800719e:	f063 030f 	orn	r3, r3, #15
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	611a      	str	r2, [r3, #16]
}
 80071aa:	e011      	b.n	80071d0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d10d      	bne.n	80071d0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	11db      	asrs	r3, r3, #7
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	f003 0306 	and.w	r3, r3, #6
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	f063 030e 	orn	r3, r3, #14
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	611a      	str	r2, [r3, #16]
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d103      	bne.n	8007200 <I2C_Master_ADD10+0x24>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d011      	beq.n	8007224 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007206:	2b00      	cmp	r3, #0
 8007208:	d104      	bne.n	8007214 <I2C_Master_ADD10+0x38>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007210:	2b00      	cmp	r3, #0
 8007212:	d007      	beq.n	8007224 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007222:	605a      	str	r2, [r3, #4]
    }
  }
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007230:	b480      	push	{r7}
 8007232:	b091      	sub	sp, #68	; 0x44
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800723e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007246:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b22      	cmp	r3, #34	; 0x22
 8007258:	f040 8169 	bne.w	800752e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10f      	bne.n	8007284 <I2C_Master_ADDR+0x54>
 8007264:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007268:	2b40      	cmp	r3, #64	; 0x40
 800726a:	d10b      	bne.n	8007284 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800726c:	2300      	movs	r3, #0
 800726e:	633b      	str	r3, [r7, #48]	; 0x30
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	633b      	str	r3, [r7, #48]	; 0x30
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	633b      	str	r3, [r7, #48]	; 0x30
 8007280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007282:	e160      	b.n	8007546 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007288:	2b00      	cmp	r3, #0
 800728a:	d11d      	bne.n	80072c8 <I2C_Master_ADDR+0x98>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007294:	d118      	bne.n	80072c8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007296:	2300      	movs	r3, #0
 8007298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072ba:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c0:	1c5a      	adds	r2, r3, #1
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	651a      	str	r2, [r3, #80]	; 0x50
 80072c6:	e13e      	b.n	8007546 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d113      	bne.n	80072fa <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072d2:	2300      	movs	r3, #0
 80072d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80072e6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072f6:	601a      	str	r2, [r3, #0]
 80072f8:	e115      	b.n	8007526 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072fe:	b29b      	uxth	r3, r3
 8007300:	2b01      	cmp	r3, #1
 8007302:	f040 808a 	bne.w	800741a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007308:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800730c:	d137      	bne.n	800737e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800731c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800732c:	d113      	bne.n	8007356 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800733c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800733e:	2300      	movs	r3, #0
 8007340:	627b      	str	r3, [r7, #36]	; 0x24
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	627b      	str	r3, [r7, #36]	; 0x24
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	627b      	str	r3, [r7, #36]	; 0x24
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	e0e7      	b.n	8007526 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007356:	2300      	movs	r3, #0
 8007358:	623b      	str	r3, [r7, #32]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	623b      	str	r3, [r7, #32]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	623b      	str	r3, [r7, #32]
 800736a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	e0d3      	b.n	8007526 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800737e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007380:	2b08      	cmp	r3, #8
 8007382:	d02e      	beq.n	80073e2 <I2C_Master_ADDR+0x1b2>
 8007384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007386:	2b20      	cmp	r3, #32
 8007388:	d02b      	beq.n	80073e2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800738a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738c:	2b12      	cmp	r3, #18
 800738e:	d102      	bne.n	8007396 <I2C_Master_ADDR+0x166>
 8007390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007392:	2b01      	cmp	r3, #1
 8007394:	d125      	bne.n	80073e2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007398:	2b04      	cmp	r3, #4
 800739a:	d00e      	beq.n	80073ba <I2C_Master_ADDR+0x18a>
 800739c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d00b      	beq.n	80073ba <I2C_Master_ADDR+0x18a>
 80073a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a4:	2b10      	cmp	r3, #16
 80073a6:	d008      	beq.n	80073ba <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	e007      	b.n	80073ca <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073ca:	2300      	movs	r3, #0
 80073cc:	61fb      	str	r3, [r7, #28]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	61fb      	str	r3, [r7, #28]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	61fb      	str	r3, [r7, #28]
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	e0a1      	b.n	8007526 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073f0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073f2:	2300      	movs	r3, #0
 80073f4:	61bb      	str	r3, [r7, #24]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	61bb      	str	r3, [r7, #24]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	61bb      	str	r3, [r7, #24]
 8007406:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	e085      	b.n	8007526 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800741e:	b29b      	uxth	r3, r3
 8007420:	2b02      	cmp	r3, #2
 8007422:	d14d      	bne.n	80074c0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007426:	2b04      	cmp	r3, #4
 8007428:	d016      	beq.n	8007458 <I2C_Master_ADDR+0x228>
 800742a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742c:	2b02      	cmp	r3, #2
 800742e:	d013      	beq.n	8007458 <I2C_Master_ADDR+0x228>
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	2b10      	cmp	r3, #16
 8007434:	d010      	beq.n	8007458 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007444:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	e007      	b.n	8007468 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007466:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007476:	d117      	bne.n	80074a8 <I2C_Master_ADDR+0x278>
 8007478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800747e:	d00b      	beq.n	8007498 <I2C_Master_ADDR+0x268>
 8007480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007482:	2b01      	cmp	r3, #1
 8007484:	d008      	beq.n	8007498 <I2C_Master_ADDR+0x268>
 8007486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007488:	2b08      	cmp	r3, #8
 800748a:	d005      	beq.n	8007498 <I2C_Master_ADDR+0x268>
 800748c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748e:	2b10      	cmp	r3, #16
 8007490:	d002      	beq.n	8007498 <I2C_Master_ADDR+0x268>
 8007492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007494:	2b20      	cmp	r3, #32
 8007496:	d107      	bne.n	80074a8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074a6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074a8:	2300      	movs	r3, #0
 80074aa:	617b      	str	r3, [r7, #20]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	e032      	b.n	8007526 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074ce:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074de:	d117      	bne.n	8007510 <I2C_Master_ADDR+0x2e0>
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074e6:	d00b      	beq.n	8007500 <I2C_Master_ADDR+0x2d0>
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d008      	beq.n	8007500 <I2C_Master_ADDR+0x2d0>
 80074ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	d005      	beq.n	8007500 <I2C_Master_ADDR+0x2d0>
 80074f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f6:	2b10      	cmp	r3, #16
 80074f8:	d002      	beq.n	8007500 <I2C_Master_ADDR+0x2d0>
 80074fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fc:	2b20      	cmp	r3, #32
 80074fe:	d107      	bne.n	8007510 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800750e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007510:	2300      	movs	r3, #0
 8007512:	613b      	str	r3, [r7, #16]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	613b      	str	r3, [r7, #16]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	613b      	str	r3, [r7, #16]
 8007524:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800752c:	e00b      	b.n	8007546 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800752e:	2300      	movs	r3, #0
 8007530:	60fb      	str	r3, [r7, #12]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	68fb      	ldr	r3, [r7, #12]
}
 8007544:	e7ff      	b.n	8007546 <I2C_Master_ADDR+0x316>
 8007546:	bf00      	nop
 8007548:	3744      	adds	r7, #68	; 0x44
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b084      	sub	sp, #16
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007560:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007566:	b29b      	uxth	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	d02b      	beq.n	80075c4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	781a      	ldrb	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007586:	b29b      	uxth	r3, r3
 8007588:	3b01      	subs	r3, #1
 800758a:	b29a      	uxth	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007594:	b29b      	uxth	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d114      	bne.n	80075c4 <I2C_SlaveTransmit_TXE+0x72>
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	2b29      	cmp	r3, #41	; 0x29
 800759e:	d111      	bne.n	80075c4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685a      	ldr	r2, [r3, #4]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075ae:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2221      	movs	r2, #33	; 0x21
 80075b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2228      	movs	r2, #40	; 0x28
 80075ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7ff fa04 	bl	80069cc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80075c4:	bf00      	nop
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d8:	b29b      	uxth	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d011      	beq.n	8007602 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	781a      	ldrb	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ee:	1c5a      	adds	r2, r3, #1
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	3b01      	subs	r3, #1
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007602:	bf00      	nop
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b084      	sub	sp, #16
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800761c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007622:	b29b      	uxth	r3, r3
 8007624:	2b00      	cmp	r3, #0
 8007626:	d02c      	beq.n	8007682 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	691a      	ldr	r2, [r3, #16]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007632:	b2d2      	uxtb	r2, r2
 8007634:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007644:	b29b      	uxth	r3, r3
 8007646:	3b01      	subs	r3, #1
 8007648:	b29a      	uxth	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007652:	b29b      	uxth	r3, r3
 8007654:	2b00      	cmp	r3, #0
 8007656:	d114      	bne.n	8007682 <I2C_SlaveReceive_RXNE+0x74>
 8007658:	7bfb      	ldrb	r3, [r7, #15]
 800765a:	2b2a      	cmp	r3, #42	; 0x2a
 800765c:	d111      	bne.n	8007682 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800766c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2222      	movs	r2, #34	; 0x22
 8007672:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2228      	movs	r2, #40	; 0x28
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff f9af 	bl	80069e0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007682:	bf00      	nop
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007696:	b29b      	uxth	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	d012      	beq.n	80076c2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	691a      	ldr	r2, [r3, #16]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	b2d2      	uxtb	r2, r2
 80076a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	3b01      	subs	r3, #1
 80076bc:	b29a      	uxth	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80076c2:	bf00      	nop
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80076d8:	2300      	movs	r3, #0
 80076da:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80076e8:	2b28      	cmp	r3, #40	; 0x28
 80076ea:	d127      	bne.n	800773c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685a      	ldr	r2, [r3, #4]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076fa:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	089b      	lsrs	r3, r3, #2
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	d101      	bne.n	800770c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007708:	2301      	movs	r3, #1
 800770a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	09db      	lsrs	r3, r3, #7
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b00      	cmp	r3, #0
 8007716:	d103      	bne.n	8007720 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	81bb      	strh	r3, [r7, #12]
 800771e:	e002      	b.n	8007726 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800772e:	89ba      	ldrh	r2, [r7, #12]
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7ff f95d 	bl	80069f4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800773a:	e008      	b.n	800774e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f06f 0202 	mvn.w	r2, #2
 8007744:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800774e:	bf00      	nop
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007766:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007776:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007778:	2300      	movs	r3, #0
 800777a:	60bb      	str	r3, [r7, #8]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	60bb      	str	r3, [r7, #8]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f042 0201 	orr.w	r2, r2, #1
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077b4:	d172      	bne.n	800789c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80077b6:	7bfb      	ldrb	r3, [r7, #15]
 80077b8:	2b22      	cmp	r3, #34	; 0x22
 80077ba:	d002      	beq.n	80077c2 <I2C_Slave_STOPF+0x6a>
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	2b2a      	cmp	r3, #42	; 0x2a
 80077c0:	d135      	bne.n	800782e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d005      	beq.n	80077e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077de:	f043 0204 	orr.w	r2, r3, #4
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fe f8ba 	bl	8005974 <HAL_DMA_GetState>
 8007800:	4603      	mov	r3, r0
 8007802:	2b01      	cmp	r3, #1
 8007804:	d049      	beq.n	800789a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780a:	4a69      	ldr	r2, [pc, #420]	; (80079b0 <I2C_Slave_STOPF+0x258>)
 800780c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe f88c 	bl	8005930 <HAL_DMA_Abort_IT>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d03d      	beq.n	800789a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007828:	4610      	mov	r0, r2
 800782a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800782c:	e035      	b.n	800789a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	b29a      	uxth	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007840:	b29b      	uxth	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d005      	beq.n	8007852 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	f043 0204 	orr.w	r2, r3, #4
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007860:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe f884 	bl	8005974 <HAL_DMA_GetState>
 800786c:	4603      	mov	r3, r0
 800786e:	2b01      	cmp	r3, #1
 8007870:	d014      	beq.n	800789c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007876:	4a4e      	ldr	r2, [pc, #312]	; (80079b0 <I2C_Slave_STOPF+0x258>)
 8007878:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787e:	4618      	mov	r0, r3
 8007880:	f7fe f856 	bl	8005930 <HAL_DMA_Abort_IT>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d008      	beq.n	800789c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007894:	4610      	mov	r0, r2
 8007896:	4798      	blx	r3
 8007898:	e000      	b.n	800789c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800789a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d03e      	beq.n	8007924 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	695b      	ldr	r3, [r3, #20]
 80078ac:	f003 0304 	and.w	r3, r3, #4
 80078b0:	2b04      	cmp	r3, #4
 80078b2:	d112      	bne.n	80078da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	691a      	ldr	r2, [r3, #16]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c6:	1c5a      	adds	r2, r3, #1
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	3b01      	subs	r3, #1
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e4:	2b40      	cmp	r3, #64	; 0x40
 80078e6:	d112      	bne.n	800790e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	691a      	ldr	r2, [r3, #16]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f2:	b2d2      	uxtb	r2, r2
 80078f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007904:	b29b      	uxth	r3, r3
 8007906:	3b01      	subs	r3, #1
 8007908:	b29a      	uxth	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007912:	b29b      	uxth	r3, r3
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791c:	f043 0204 	orr.w	r2, r3, #4
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f8b3 	bl	8007a98 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007932:	e039      	b.n	80079a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	2b2a      	cmp	r3, #42	; 0x2a
 8007938:	d109      	bne.n	800794e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2228      	movs	r2, #40	; 0x28
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7ff f849 	bl	80069e0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b28      	cmp	r3, #40	; 0x28
 8007958:	d111      	bne.n	800797e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a15      	ldr	r2, [pc, #84]	; (80079b4 <I2C_Slave_STOPF+0x25c>)
 800795e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2220      	movs	r2, #32
 800796a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f7ff f84a 	bl	8006a10 <HAL_I2C_ListenCpltCallback>
}
 800797c:	e014      	b.n	80079a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007982:	2b22      	cmp	r3, #34	; 0x22
 8007984:	d002      	beq.n	800798c <I2C_Slave_STOPF+0x234>
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	2b22      	cmp	r3, #34	; 0x22
 800798a:	d10d      	bne.n	80079a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2220      	movs	r2, #32
 8007996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7ff f81c 	bl	80069e0 <HAL_I2C_SlaveRxCpltCallback>
}
 80079a8:	bf00      	nop
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	08007fd1 	.word	0x08007fd1
 80079b4:	ffff0000 	.word	0xffff0000

080079b8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079c6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079cc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	2b08      	cmp	r3, #8
 80079d2:	d002      	beq.n	80079da <I2C_Slave_AF+0x22>
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	2b20      	cmp	r3, #32
 80079d8:	d129      	bne.n	8007a2e <I2C_Slave_AF+0x76>
 80079da:	7bfb      	ldrb	r3, [r7, #15]
 80079dc:	2b28      	cmp	r3, #40	; 0x28
 80079de:	d126      	bne.n	8007a2e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a2c      	ldr	r2, [pc, #176]	; (8007a94 <I2C_Slave_AF+0xdc>)
 80079e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80079f4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80079fe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a0e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7fe fff2 	bl	8006a10 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007a2c:	e02e      	b.n	8007a8c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
 8007a30:	2b21      	cmp	r3, #33	; 0x21
 8007a32:	d126      	bne.n	8007a82 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a17      	ldr	r2, [pc, #92]	; (8007a94 <I2C_Slave_AF+0xdc>)
 8007a38:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2221      	movs	r2, #33	; 0x21
 8007a3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2220      	movs	r2, #32
 8007a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685a      	ldr	r2, [r3, #4]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a5e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a68:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a78:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7fe ffa6 	bl	80069cc <HAL_I2C_SlaveTxCpltCallback>
}
 8007a80:	e004      	b.n	8007a8c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a8a:	615a      	str	r2, [r3, #20]
}
 8007a8c:	bf00      	nop
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	ffff0000 	.word	0xffff0000

08007a98 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aa6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007aae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	2b10      	cmp	r3, #16
 8007ab4:	d002      	beq.n	8007abc <I2C_ITError+0x24>
 8007ab6:	7bbb      	ldrb	r3, [r7, #14]
 8007ab8:	2b40      	cmp	r3, #64	; 0x40
 8007aba:	d10a      	bne.n	8007ad2 <I2C_ITError+0x3a>
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
 8007abe:	2b22      	cmp	r3, #34	; 0x22
 8007ac0:	d107      	bne.n	8007ad2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ad0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
 8007ad4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ad8:	2b28      	cmp	r3, #40	; 0x28
 8007ada:	d107      	bne.n	8007aec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2228      	movs	r2, #40	; 0x28
 8007ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007aea:	e015      	b.n	8007b18 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007afa:	d00a      	beq.n	8007b12 <I2C_ITError+0x7a>
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
 8007afe:	2b60      	cmp	r3, #96	; 0x60
 8007b00:	d007      	beq.n	8007b12 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2220      	movs	r2, #32
 8007b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b26:	d162      	bne.n	8007bee <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	685a      	ldr	r2, [r3, #4]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b36:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d020      	beq.n	8007b88 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b4a:	4a6a      	ldr	r2, [pc, #424]	; (8007cf4 <I2C_ITError+0x25c>)
 8007b4c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fd feec 	bl	8005930 <HAL_DMA_Abort_IT>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 8089 	beq.w	8007c72 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 0201 	bic.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2220      	movs	r2, #32
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007b82:	4610      	mov	r0, r2
 8007b84:	4798      	blx	r3
 8007b86:	e074      	b.n	8007c72 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8c:	4a59      	ldr	r2, [pc, #356]	; (8007cf4 <I2C_ITError+0x25c>)
 8007b8e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fd fecb 	bl	8005930 <HAL_DMA_Abort_IT>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d068      	beq.n	8007c72 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007baa:	2b40      	cmp	r3, #64	; 0x40
 8007bac:	d10b      	bne.n	8007bc6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	691a      	ldr	r2, [r3, #16]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	b2d2      	uxtb	r2, r2
 8007bba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc0:	1c5a      	adds	r2, r3, #1
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 0201 	bic.w	r2, r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007be8:	4610      	mov	r0, r2
 8007bea:	4798      	blx	r3
 8007bec:	e041      	b.n	8007c72 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b60      	cmp	r3, #96	; 0x60
 8007bf8:	d125      	bne.n	8007c46 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2220      	movs	r2, #32
 8007bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c12:	2b40      	cmp	r3, #64	; 0x40
 8007c14:	d10b      	bne.n	8007c2e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	691a      	ldr	r2, [r3, #16]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c20:	b2d2      	uxtb	r2, r2
 8007c22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c28:	1c5a      	adds	r2, r3, #1
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 0201 	bic.w	r2, r2, #1
 8007c3c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7fe ff0e 	bl	8006a60 <HAL_I2C_AbortCpltCallback>
 8007c44:	e015      	b.n	8007c72 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c50:	2b40      	cmp	r3, #64	; 0x40
 8007c52:	d10b      	bne.n	8007c6c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	691a      	ldr	r2, [r3, #16]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5e:	b2d2      	uxtb	r2, r2
 8007c60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7fe feed 	bl	8006a4c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c76:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10e      	bne.n	8007ca0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d109      	bne.n	8007ca0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d104      	bne.n	8007ca0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d007      	beq.n	8007cb0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007cae:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cb6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbc:	f003 0304 	and.w	r3, r3, #4
 8007cc0:	2b04      	cmp	r3, #4
 8007cc2:	d113      	bne.n	8007cec <I2C_ITError+0x254>
 8007cc4:	7bfb      	ldrb	r3, [r7, #15]
 8007cc6:	2b28      	cmp	r3, #40	; 0x28
 8007cc8:	d110      	bne.n	8007cec <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a0a      	ldr	r2, [pc, #40]	; (8007cf8 <I2C_ITError+0x260>)
 8007cce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2220      	movs	r2, #32
 8007cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7fe fe92 	bl	8006a10 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007cec:	bf00      	nop
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	08007fd1 	.word	0x08007fd1
 8007cf8:	ffff0000 	.word	0xffff0000

08007cfc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b088      	sub	sp, #32
 8007d00:	af02      	add	r7, sp, #8
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	607a      	str	r2, [r7, #4]
 8007d06:	603b      	str	r3, [r7, #0]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d006      	beq.n	8007d26 <I2C_MasterRequestWrite+0x2a>
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d003      	beq.n	8007d26 <I2C_MasterRequestWrite+0x2a>
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d24:	d108      	bne.n	8007d38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	e00b      	b.n	8007d50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3c:	2b12      	cmp	r3, #18
 8007d3e:	d107      	bne.n	8007d50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 f9df 	bl	8008120 <I2C_WaitOnFlagUntilTimeout>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00d      	beq.n	8007d84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d76:	d103      	bne.n	8007d80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e035      	b.n	8007df0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d8c:	d108      	bne.n	8007da0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d8e:	897b      	ldrh	r3, [r7, #10]
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	461a      	mov	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d9c:	611a      	str	r2, [r3, #16]
 8007d9e:	e01b      	b.n	8007dd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007da0:	897b      	ldrh	r3, [r7, #10]
 8007da2:	11db      	asrs	r3, r3, #7
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	f003 0306 	and.w	r3, r3, #6
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	f063 030f 	orn	r3, r3, #15
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	490e      	ldr	r1, [pc, #56]	; (8007df8 <I2C_MasterRequestWrite+0xfc>)
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f000 fa05 	bl	80081ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e010      	b.n	8007df0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007dce:	897b      	ldrh	r3, [r7, #10]
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	4907      	ldr	r1, [pc, #28]	; (8007dfc <I2C_MasterRequestWrite+0x100>)
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f000 f9f5 	bl	80081ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e000      	b.n	8007df0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3718      	adds	r7, #24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	00010008 	.word	0x00010008
 8007dfc:	00010002 	.word	0x00010002

08007e00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b088      	sub	sp, #32
 8007e04:	af02      	add	r7, sp, #8
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	4608      	mov	r0, r1
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	4603      	mov	r3, r0
 8007e10:	817b      	strh	r3, [r7, #10]
 8007e12:	460b      	mov	r3, r1
 8007e14:	813b      	strh	r3, [r7, #8]
 8007e16:	4613      	mov	r3, r2
 8007e18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	6a3b      	ldr	r3, [r7, #32]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f000 f96a 	bl	8008120 <I2C_WaitOnFlagUntilTimeout>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00d      	beq.n	8007e6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e60:	d103      	bne.n	8007e6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e0aa      	b.n	8007fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007e6e:	897b      	ldrh	r3, [r7, #10]
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	461a      	mov	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007e7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	6a3a      	ldr	r2, [r7, #32]
 8007e82:	4952      	ldr	r1, [pc, #328]	; (8007fcc <I2C_RequestMemoryRead+0x1cc>)
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 f9a2 	bl	80081ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e097      	b.n	8007fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e94:	2300      	movs	r3, #0
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	617b      	str	r3, [r7, #20]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	617b      	str	r3, [r7, #20]
 8007ea8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eac:	6a39      	ldr	r1, [r7, #32]
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 fa0c 	bl	80082cc <I2C_WaitOnTXEFlagUntilTimeout>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00d      	beq.n	8007ed6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	d107      	bne.n	8007ed2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ed0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e076      	b.n	8007fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ed6:	88fb      	ldrh	r3, [r7, #6]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d105      	bne.n	8007ee8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007edc:	893b      	ldrh	r3, [r7, #8]
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	611a      	str	r2, [r3, #16]
 8007ee6:	e021      	b.n	8007f2c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ee8:	893b      	ldrh	r3, [r7, #8]
 8007eea:	0a1b      	lsrs	r3, r3, #8
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ef8:	6a39      	ldr	r1, [r7, #32]
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f000 f9e6 	bl	80082cc <I2C_WaitOnTXEFlagUntilTimeout>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00d      	beq.n	8007f22 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	d107      	bne.n	8007f1e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e050      	b.n	8007fc4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f22:	893b      	ldrh	r3, [r7, #8]
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f2e:	6a39      	ldr	r1, [r7, #32]
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 f9cb 	bl	80082cc <I2C_WaitOnTXEFlagUntilTimeout>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00d      	beq.n	8007f58 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f40:	2b04      	cmp	r3, #4
 8007f42:	d107      	bne.n	8007f54 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f52:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e035      	b.n	8007fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f66:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f000 f8d3 	bl	8008120 <I2C_WaitOnFlagUntilTimeout>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00d      	beq.n	8007f9c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f8e:	d103      	bne.n	8007f98 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e013      	b.n	8007fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007f9c:	897b      	ldrh	r3, [r7, #10]
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	f043 0301 	orr.w	r3, r3, #1
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	6a3a      	ldr	r2, [r7, #32]
 8007fb0:	4906      	ldr	r1, [pc, #24]	; (8007fcc <I2C_RequestMemoryRead+0x1cc>)
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f000 f90b 	bl	80081ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e000      	b.n	8007fc4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3718      	adds	r7, #24
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	00010002 	.word	0x00010002

08007fd0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007fea:	4b4b      	ldr	r3, [pc, #300]	; (8008118 <I2C_DMAAbort+0x148>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	08db      	lsrs	r3, r3, #3
 8007ff0:	4a4a      	ldr	r2, [pc, #296]	; (800811c <I2C_DMAAbort+0x14c>)
 8007ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff6:	0a1a      	lsrs	r2, r3, #8
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	00da      	lsls	r2, r3, #3
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d106      	bne.n	8008018 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800e:	f043 0220 	orr.w	r2, r3, #32
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008016:	e00a      	b.n	800802e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3b01      	subs	r3, #1
 800801c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800802c:	d0ea      	beq.n	8008004 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800803a:	2200      	movs	r2, #0
 800803c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804a:	2200      	movs	r2, #0
 800804c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800805c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2200      	movs	r2, #0
 8008062:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008070:	2200      	movs	r2, #0
 8008072:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008078:	2b00      	cmp	r3, #0
 800807a:	d003      	beq.n	8008084 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	2200      	movs	r2, #0
 8008082:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0201 	bic.w	r2, r2, #1
 8008092:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b60      	cmp	r3, #96	; 0x60
 800809e:	d10e      	bne.n	80080be <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	2220      	movs	r2, #32
 80080a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	2200      	movs	r2, #0
 80080b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80080b6:	6978      	ldr	r0, [r7, #20]
 80080b8:	f7fe fcd2 	bl	8006a60 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80080bc:	e027      	b.n	800810e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80080be:	7cfb      	ldrb	r3, [r7, #19]
 80080c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80080c4:	2b28      	cmp	r3, #40	; 0x28
 80080c6:	d117      	bne.n	80080f8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f042 0201 	orr.w	r2, r2, #1
 80080d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	2200      	movs	r2, #0
 80080ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2228      	movs	r2, #40	; 0x28
 80080f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80080f6:	e007      	b.n	8008108 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	2220      	movs	r2, #32
 80080fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008108:	6978      	ldr	r0, [r7, #20]
 800810a:	f7fe fc9f 	bl	8006a4c <HAL_I2C_ErrorCallback>
}
 800810e:	bf00      	nop
 8008110:	3718      	adds	r7, #24
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	10000000 	.word	0x10000000
 800811c:	14f8b589 	.word	0x14f8b589

08008120 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	603b      	str	r3, [r7, #0]
 800812c:	4613      	mov	r3, r2
 800812e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008130:	e025      	b.n	800817e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008138:	d021      	beq.n	800817e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800813a:	f7fc fc8d 	bl	8004a58 <HAL_GetTick>
 800813e:	4602      	mov	r2, r0
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	429a      	cmp	r2, r3
 8008148:	d302      	bcc.n	8008150 <I2C_WaitOnFlagUntilTimeout+0x30>
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d116      	bne.n	800817e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2220      	movs	r2, #32
 800815a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	f043 0220 	orr.w	r2, r3, #32
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e023      	b.n	80081c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	0c1b      	lsrs	r3, r3, #16
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b01      	cmp	r3, #1
 8008186:	d10d      	bne.n	80081a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	43da      	mvns	r2, r3
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	4013      	ands	r3, r2
 8008194:	b29b      	uxth	r3, r3
 8008196:	2b00      	cmp	r3, #0
 8008198:	bf0c      	ite	eq
 800819a:	2301      	moveq	r3, #1
 800819c:	2300      	movne	r3, #0
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	461a      	mov	r2, r3
 80081a2:	e00c      	b.n	80081be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	43da      	mvns	r2, r3
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	4013      	ands	r3, r2
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	bf0c      	ite	eq
 80081b6:	2301      	moveq	r3, #1
 80081b8:	2300      	movne	r3, #0
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	461a      	mov	r2, r3
 80081be:	79fb      	ldrb	r3, [r7, #7]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d0b6      	beq.n	8008132 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b084      	sub	sp, #16
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	60f8      	str	r0, [r7, #12]
 80081d6:	60b9      	str	r1, [r7, #8]
 80081d8:	607a      	str	r2, [r7, #4]
 80081da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80081dc:	e051      	b.n	8008282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ec:	d123      	bne.n	8008236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008206:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2220      	movs	r2, #32
 8008212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008222:	f043 0204 	orr.w	r2, r3, #4
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e046      	b.n	80082c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800823c:	d021      	beq.n	8008282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800823e:	f7fc fc0b 	bl	8004a58 <HAL_GetTick>
 8008242:	4602      	mov	r2, r0
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	429a      	cmp	r2, r3
 800824c:	d302      	bcc.n	8008254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d116      	bne.n	8008282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2220      	movs	r2, #32
 800825e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826e:	f043 0220 	orr.w	r2, r3, #32
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e020      	b.n	80082c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	0c1b      	lsrs	r3, r3, #16
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b01      	cmp	r3, #1
 800828a:	d10c      	bne.n	80082a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	43da      	mvns	r2, r3
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	4013      	ands	r3, r2
 8008298:	b29b      	uxth	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	bf14      	ite	ne
 800829e:	2301      	movne	r3, #1
 80082a0:	2300      	moveq	r3, #0
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	e00b      	b.n	80082be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	43da      	mvns	r2, r3
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	4013      	ands	r3, r2
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	bf14      	ite	ne
 80082b8:	2301      	movne	r3, #1
 80082ba:	2300      	moveq	r3, #0
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d18d      	bne.n	80081de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082d8:	e02d      	b.n	8008336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f000 f900 	bl	80084e0 <I2C_IsAcknowledgeFailed>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e02d      	b.n	8008346 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082f0:	d021      	beq.n	8008336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082f2:	f7fc fbb1 	bl	8004a58 <HAL_GetTick>
 80082f6:	4602      	mov	r2, r0
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d302      	bcc.n	8008308 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d116      	bne.n	8008336 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2220      	movs	r2, #32
 8008312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008322:	f043 0220 	orr.w	r2, r3, #32
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e007      	b.n	8008346 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008340:	2b80      	cmp	r3, #128	; 0x80
 8008342:	d1ca      	bne.n	80082da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b084      	sub	sp, #16
 8008352:	af00      	add	r7, sp, #0
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800835a:	e02d      	b.n	80083b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f000 f8bf 	bl	80084e0 <I2C_IsAcknowledgeFailed>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	e02d      	b.n	80083c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008372:	d021      	beq.n	80083b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008374:	f7fc fb70 	bl	8004a58 <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	429a      	cmp	r2, r3
 8008382:	d302      	bcc.n	800838a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d116      	bne.n	80083b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2220      	movs	r2, #32
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a4:	f043 0220 	orr.w	r2, r3, #32
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e007      	b.n	80083c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	f003 0304 	and.w	r3, r3, #4
 80083c2:	2b04      	cmp	r3, #4
 80083c4:	d1ca      	bne.n	800835c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083d8:	2300      	movs	r3, #0
 80083da:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80083dc:	4b13      	ldr	r3, [pc, #76]	; (800842c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	08db      	lsrs	r3, r3, #3
 80083e2:	4a13      	ldr	r2, [pc, #76]	; (8008430 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80083e4:	fba2 2303 	umull	r2, r3, r2, r3
 80083e8:	0a1a      	lsrs	r2, r3, #8
 80083ea:	4613      	mov	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	3b01      	subs	r3, #1
 80083f6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d107      	bne.n	800840e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008402:	f043 0220 	orr.w	r2, r3, #32
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e008      	b.n	8008420 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800841c:	d0e9      	beq.n	80083f2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr
 800842c:	10000000 	.word	0x10000000
 8008430:	14f8b589 	.word	0x14f8b589

08008434 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008440:	e042      	b.n	80084c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	f003 0310 	and.w	r3, r3, #16
 800844c:	2b10      	cmp	r3, #16
 800844e:	d119      	bne.n	8008484 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f06f 0210 	mvn.w	r2, #16
 8008458:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2220      	movs	r2, #32
 8008464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e029      	b.n	80084d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008484:	f7fc fae8 	bl	8004a58 <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	429a      	cmp	r2, r3
 8008492:	d302      	bcc.n	800849a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d116      	bne.n	80084c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2220      	movs	r2, #32
 80084a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b4:	f043 0220 	orr.w	r2, r3, #32
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e007      	b.n	80084d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d2:	2b40      	cmp	r3, #64	; 0x40
 80084d4:	d1b5      	bne.n	8008442 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084f6:	d11b      	bne.n	8008530 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008500:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2220      	movs	r2, #32
 800850c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851c:	f043 0204 	orr.w	r2, r3, #4
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e000      	b.n	8008532 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800853e:	b480      	push	{r7}
 8008540:	b083      	sub	sp, #12
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800854e:	d103      	bne.n	8008558 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008556:	e007      	b.n	8008568 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008560:	d102      	bne.n	8008568 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2208      	movs	r2, #8
 8008566:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008576:	b08f      	sub	sp, #60	; 0x3c
 8008578:	af0a      	add	r7, sp, #40	; 0x28
 800857a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e10f      	b.n	80087a6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b00      	cmp	r3, #0
 8008596:	d106      	bne.n	80085a6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f006 fda7 	bl	800f0f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2203      	movs	r2, #3
 80085aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d102      	bne.n	80085c0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f002 f946 	bl	800a856 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	603b      	str	r3, [r7, #0]
 80085d0:	687e      	ldr	r6, [r7, #4]
 80085d2:	466d      	mov	r5, sp
 80085d4:	f106 0410 	add.w	r4, r6, #16
 80085d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80085da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80085dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80085de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80085e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80085e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80085e8:	1d33      	adds	r3, r6, #4
 80085ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085ec:	6838      	ldr	r0, [r7, #0]
 80085ee:	f002 f81d 	bl	800a62c <USB_CoreInit>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d005      	beq.n	8008604 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2202      	movs	r2, #2
 80085fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e0d0      	b.n	80087a6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2100      	movs	r1, #0
 800860a:	4618      	mov	r0, r3
 800860c:	f002 f934 	bl	800a878 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008610:	2300      	movs	r3, #0
 8008612:	73fb      	strb	r3, [r7, #15]
 8008614:	e04a      	b.n	80086ac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008616:	7bfa      	ldrb	r2, [r7, #15]
 8008618:	6879      	ldr	r1, [r7, #4]
 800861a:	4613      	mov	r3, r2
 800861c:	00db      	lsls	r3, r3, #3
 800861e:	1a9b      	subs	r3, r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	440b      	add	r3, r1
 8008624:	333d      	adds	r3, #61	; 0x3d
 8008626:	2201      	movs	r2, #1
 8008628:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800862a:	7bfa      	ldrb	r2, [r7, #15]
 800862c:	6879      	ldr	r1, [r7, #4]
 800862e:	4613      	mov	r3, r2
 8008630:	00db      	lsls	r3, r3, #3
 8008632:	1a9b      	subs	r3, r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	440b      	add	r3, r1
 8008638:	333c      	adds	r3, #60	; 0x3c
 800863a:	7bfa      	ldrb	r2, [r7, #15]
 800863c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800863e:	7bfa      	ldrb	r2, [r7, #15]
 8008640:	7bfb      	ldrb	r3, [r7, #15]
 8008642:	b298      	uxth	r0, r3
 8008644:	6879      	ldr	r1, [r7, #4]
 8008646:	4613      	mov	r3, r2
 8008648:	00db      	lsls	r3, r3, #3
 800864a:	1a9b      	subs	r3, r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	440b      	add	r3, r1
 8008650:	3342      	adds	r3, #66	; 0x42
 8008652:	4602      	mov	r2, r0
 8008654:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008656:	7bfa      	ldrb	r2, [r7, #15]
 8008658:	6879      	ldr	r1, [r7, #4]
 800865a:	4613      	mov	r3, r2
 800865c:	00db      	lsls	r3, r3, #3
 800865e:	1a9b      	subs	r3, r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	440b      	add	r3, r1
 8008664:	333f      	adds	r3, #63	; 0x3f
 8008666:	2200      	movs	r2, #0
 8008668:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800866a:	7bfa      	ldrb	r2, [r7, #15]
 800866c:	6879      	ldr	r1, [r7, #4]
 800866e:	4613      	mov	r3, r2
 8008670:	00db      	lsls	r3, r3, #3
 8008672:	1a9b      	subs	r3, r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	440b      	add	r3, r1
 8008678:	3344      	adds	r3, #68	; 0x44
 800867a:	2200      	movs	r2, #0
 800867c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800867e:	7bfa      	ldrb	r2, [r7, #15]
 8008680:	6879      	ldr	r1, [r7, #4]
 8008682:	4613      	mov	r3, r2
 8008684:	00db      	lsls	r3, r3, #3
 8008686:	1a9b      	subs	r3, r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	440b      	add	r3, r1
 800868c:	3348      	adds	r3, #72	; 0x48
 800868e:	2200      	movs	r2, #0
 8008690:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008692:	7bfa      	ldrb	r2, [r7, #15]
 8008694:	6879      	ldr	r1, [r7, #4]
 8008696:	4613      	mov	r3, r2
 8008698:	00db      	lsls	r3, r3, #3
 800869a:	1a9b      	subs	r3, r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	440b      	add	r3, r1
 80086a0:	3350      	adds	r3, #80	; 0x50
 80086a2:	2200      	movs	r2, #0
 80086a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
 80086a8:	3301      	adds	r3, #1
 80086aa:	73fb      	strb	r3, [r7, #15]
 80086ac:	7bfa      	ldrb	r2, [r7, #15]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d3af      	bcc.n	8008616 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086b6:	2300      	movs	r3, #0
 80086b8:	73fb      	strb	r3, [r7, #15]
 80086ba:	e044      	b.n	8008746 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80086bc:	7bfa      	ldrb	r2, [r7, #15]
 80086be:	6879      	ldr	r1, [r7, #4]
 80086c0:	4613      	mov	r3, r2
 80086c2:	00db      	lsls	r3, r3, #3
 80086c4:	1a9b      	subs	r3, r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	440b      	add	r3, r1
 80086ca:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80086ce:	2200      	movs	r2, #0
 80086d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80086d2:	7bfa      	ldrb	r2, [r7, #15]
 80086d4:	6879      	ldr	r1, [r7, #4]
 80086d6:	4613      	mov	r3, r2
 80086d8:	00db      	lsls	r3, r3, #3
 80086da:	1a9b      	subs	r3, r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	440b      	add	r3, r1
 80086e0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80086e4:	7bfa      	ldrb	r2, [r7, #15]
 80086e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80086e8:	7bfa      	ldrb	r2, [r7, #15]
 80086ea:	6879      	ldr	r1, [r7, #4]
 80086ec:	4613      	mov	r3, r2
 80086ee:	00db      	lsls	r3, r3, #3
 80086f0:	1a9b      	subs	r3, r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	440b      	add	r3, r1
 80086f6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80086fa:	2200      	movs	r2, #0
 80086fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80086fe:	7bfa      	ldrb	r2, [r7, #15]
 8008700:	6879      	ldr	r1, [r7, #4]
 8008702:	4613      	mov	r3, r2
 8008704:	00db      	lsls	r3, r3, #3
 8008706:	1a9b      	subs	r3, r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	440b      	add	r3, r1
 800870c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008710:	2200      	movs	r2, #0
 8008712:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008714:	7bfa      	ldrb	r2, [r7, #15]
 8008716:	6879      	ldr	r1, [r7, #4]
 8008718:	4613      	mov	r3, r2
 800871a:	00db      	lsls	r3, r3, #3
 800871c:	1a9b      	subs	r3, r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	440b      	add	r3, r1
 8008722:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008726:	2200      	movs	r2, #0
 8008728:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800872a:	7bfa      	ldrb	r2, [r7, #15]
 800872c:	6879      	ldr	r1, [r7, #4]
 800872e:	4613      	mov	r3, r2
 8008730:	00db      	lsls	r3, r3, #3
 8008732:	1a9b      	subs	r3, r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	440b      	add	r3, r1
 8008738:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800873c:	2200      	movs	r2, #0
 800873e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008740:	7bfb      	ldrb	r3, [r7, #15]
 8008742:	3301      	adds	r3, #1
 8008744:	73fb      	strb	r3, [r7, #15]
 8008746:	7bfa      	ldrb	r2, [r7, #15]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	429a      	cmp	r2, r3
 800874e:	d3b5      	bcc.n	80086bc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	603b      	str	r3, [r7, #0]
 8008756:	687e      	ldr	r6, [r7, #4]
 8008758:	466d      	mov	r5, sp
 800875a:	f106 0410 	add.w	r4, r6, #16
 800875e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008766:	e894 0003 	ldmia.w	r4, {r0, r1}
 800876a:	e885 0003 	stmia.w	r5, {r0, r1}
 800876e:	1d33      	adds	r3, r6, #4
 8008770:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008772:	6838      	ldr	r0, [r7, #0]
 8008774:	f002 f8aa 	bl	800a8cc <USB_DevInit>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d005      	beq.n	800878a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2202      	movs	r2, #2
 8008782:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e00d      	b.n	80087a6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4618      	mov	r0, r3
 80087a0:	f003 f8f2 	bl	800b988 <USB_DevDisconnect>

  return HAL_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080087ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b084      	sub	sp, #16
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d101      	bne.n	80087ca <HAL_PCD_Start+0x1c>
 80087c6:	2302      	movs	r3, #2
 80087c8:	e020      	b.n	800880c <HAL_PCD_Start+0x5e>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d109      	bne.n	80087ee <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d005      	beq.n	80087ee <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4618      	mov	r0, r3
 80087f4:	f002 f81e 	bl	800a834 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f003 f8a2 	bl	800b946 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008814:	b590      	push	{r4, r7, lr}
 8008816:	b08d      	sub	sp, #52	; 0x34
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008822:	6a3b      	ldr	r3, [r7, #32]
 8008824:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4618      	mov	r0, r3
 800882c:	f003 f960 	bl	800baf0 <USB_GetMode>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	f040 839d 	bne.w	8008f72 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4618      	mov	r0, r3
 800883e:	f003 f8c4 	bl	800b9ca <USB_ReadInterrupts>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 8393 	beq.w	8008f70 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4618      	mov	r0, r3
 8008850:	f003 f8bb 	bl	800b9ca <USB_ReadInterrupts>
 8008854:	4603      	mov	r3, r0
 8008856:	f003 0302 	and.w	r3, r3, #2
 800885a:	2b02      	cmp	r3, #2
 800885c:	d107      	bne.n	800886e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	695a      	ldr	r2, [r3, #20]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f002 0202 	and.w	r2, r2, #2
 800886c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4618      	mov	r0, r3
 8008874:	f003 f8a9 	bl	800b9ca <USB_ReadInterrupts>
 8008878:	4603      	mov	r3, r0
 800887a:	f003 0310 	and.w	r3, r3, #16
 800887e:	2b10      	cmp	r3, #16
 8008880:	d161      	bne.n	8008946 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	699a      	ldr	r2, [r3, #24]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f022 0210 	bic.w	r2, r2, #16
 8008890:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	f003 020f 	and.w	r2, r3, #15
 800889e:	4613      	mov	r3, r2
 80088a0:	00db      	lsls	r3, r3, #3
 80088a2:	1a9b      	subs	r3, r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	4413      	add	r3, r2
 80088ae:	3304      	adds	r3, #4
 80088b0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	0c5b      	lsrs	r3, r3, #17
 80088b6:	f003 030f 	and.w	r3, r3, #15
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d124      	bne.n	8008908 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80088be:	69ba      	ldr	r2, [r7, #24]
 80088c0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80088c4:	4013      	ands	r3, r2
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d035      	beq.n	8008936 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	091b      	lsrs	r3, r3, #4
 80088d2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80088d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80088d8:	b29b      	uxth	r3, r3
 80088da:	461a      	mov	r2, r3
 80088dc:	6a38      	ldr	r0, [r7, #32]
 80088de:	f002 ff0f 	bl	800b700 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	68da      	ldr	r2, [r3, #12]
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	091b      	lsrs	r3, r3, #4
 80088ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80088ee:	441a      	add	r2, r3
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	699a      	ldr	r2, [r3, #24]
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	091b      	lsrs	r3, r3, #4
 80088fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008900:	441a      	add	r2, r3
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	619a      	str	r2, [r3, #24]
 8008906:	e016      	b.n	8008936 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	0c5b      	lsrs	r3, r3, #17
 800890c:	f003 030f 	and.w	r3, r3, #15
 8008910:	2b06      	cmp	r3, #6
 8008912:	d110      	bne.n	8008936 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800891a:	2208      	movs	r2, #8
 800891c:	4619      	mov	r1, r3
 800891e:	6a38      	ldr	r0, [r7, #32]
 8008920:	f002 feee 	bl	800b700 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	699a      	ldr	r2, [r3, #24]
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	091b      	lsrs	r3, r3, #4
 800892c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008930:	441a      	add	r2, r3
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	699a      	ldr	r2, [r3, #24]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f042 0210 	orr.w	r2, r2, #16
 8008944:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4618      	mov	r0, r3
 800894c:	f003 f83d 	bl	800b9ca <USB_ReadInterrupts>
 8008950:	4603      	mov	r3, r0
 8008952:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008956:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800895a:	d16e      	bne.n	8008a3a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800895c:	2300      	movs	r3, #0
 800895e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4618      	mov	r0, r3
 8008966:	f003 f843 	bl	800b9f0 <USB_ReadDevAllOutEpInterrupt>
 800896a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800896c:	e062      	b.n	8008a34 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800896e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008970:	f003 0301 	and.w	r3, r3, #1
 8008974:	2b00      	cmp	r3, #0
 8008976:	d057      	beq.n	8008a28 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800897e:	b2d2      	uxtb	r2, r2
 8008980:	4611      	mov	r1, r2
 8008982:	4618      	mov	r0, r3
 8008984:	f003 f868 	bl	800ba58 <USB_ReadDevOutEPInterrupt>
 8008988:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00c      	beq.n	80089ae <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a0:	461a      	mov	r2, r3
 80089a2:	2301      	movs	r3, #1
 80089a4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80089a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fdb1 	bl	8009510 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f003 0308 	and.w	r3, r3, #8
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00c      	beq.n	80089d2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80089b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c4:	461a      	mov	r2, r3
 80089c6:	2308      	movs	r3, #8
 80089c8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80089ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 feab 	bl	8009728 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	f003 0310 	and.w	r3, r3, #16
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d008      	beq.n	80089ee <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e8:	461a      	mov	r2, r3
 80089ea:	2310      	movs	r3, #16
 80089ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	f003 0320 	and.w	r3, r3, #32
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d008      	beq.n	8008a0a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a04:	461a      	mov	r2, r3
 8008a06:	2320      	movs	r3, #32
 8008a08:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d009      	beq.n	8008a28 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	015a      	lsls	r2, r3, #5
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a20:	461a      	mov	r2, r3
 8008a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a26:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a30:	085b      	lsrs	r3, r3, #1
 8008a32:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d199      	bne.n	800896e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f002 ffc3 	bl	800b9ca <USB_ReadInterrupts>
 8008a44:	4603      	mov	r3, r0
 8008a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a4e:	f040 80c0 	bne.w	8008bd2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f002 ffe4 	bl	800ba24 <USB_ReadDevAllInEpInterrupt>
 8008a5c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008a62:	e0b2      	b.n	8008bca <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a66:	f003 0301 	and.w	r3, r3, #1
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f000 80a7 	beq.w	8008bbe <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a76:	b2d2      	uxtb	r2, r2
 8008a78:	4611      	mov	r1, r2
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f003 f80a 	bl	800ba94 <USB_ReadDevInEPInterrupt>
 8008a80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	f003 0301 	and.w	r3, r3, #1
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d057      	beq.n	8008b3c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8e:	f003 030f 	and.w	r3, r3, #15
 8008a92:	2201      	movs	r2, #1
 8008a94:	fa02 f303 	lsl.w	r3, r2, r3
 8008a98:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	43db      	mvns	r3, r3
 8008aa6:	69f9      	ldr	r1, [r7, #28]
 8008aa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008aac:	4013      	ands	r3, r2
 8008aae:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	015a      	lsls	r2, r3, #5
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008abc:	461a      	mov	r2, r3
 8008abe:	2301      	movs	r3, #1
 8008ac0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d132      	bne.n	8008b30 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008aca:	6879      	ldr	r1, [r7, #4]
 8008acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ace:	4613      	mov	r3, r2
 8008ad0:	00db      	lsls	r3, r3, #3
 8008ad2:	1a9b      	subs	r3, r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	440b      	add	r3, r1
 8008ad8:	3348      	adds	r3, #72	; 0x48
 8008ada:	6819      	ldr	r1, [r3, #0]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	00db      	lsls	r3, r3, #3
 8008ae4:	1a9b      	subs	r3, r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4403      	add	r3, r0
 8008aea:	3344      	adds	r3, #68	; 0x44
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4419      	add	r1, r3
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af4:	4613      	mov	r3, r2
 8008af6:	00db      	lsls	r3, r3, #3
 8008af8:	1a9b      	subs	r3, r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4403      	add	r3, r0
 8008afe:	3348      	adds	r3, #72	; 0x48
 8008b00:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d113      	bne.n	8008b30 <HAL_PCD_IRQHandler+0x31c>
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	00db      	lsls	r3, r3, #3
 8008b10:	1a9b      	subs	r3, r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	440b      	add	r3, r1
 8008b16:	3350      	adds	r3, #80	; 0x50
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d108      	bne.n	8008b30 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6818      	ldr	r0, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008b28:	461a      	mov	r2, r3
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	f003 f812 	bl	800bb54 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	4619      	mov	r1, r3
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f006 fb5d 	bl	800f1f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	f003 0308 	and.w	r3, r3, #8
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d008      	beq.n	8008b58 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b52:	461a      	mov	r2, r3
 8008b54:	2308      	movs	r3, #8
 8008b56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	f003 0310 	and.w	r3, r3, #16
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d008      	beq.n	8008b74 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b64:	015a      	lsls	r2, r3, #5
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	4413      	add	r3, r2
 8008b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b6e:	461a      	mov	r2, r3
 8008b70:	2310      	movs	r3, #16
 8008b72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d008      	beq.n	8008b90 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b80:	015a      	lsls	r2, r3, #5
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	4413      	add	r3, r2
 8008b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	2340      	movs	r3, #64	; 0x40
 8008b8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	f003 0302 	and.w	r3, r3, #2
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d008      	beq.n	8008bac <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	015a      	lsls	r2, r3, #5
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	2302      	movs	r3, #2
 8008baa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008bb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fc1b 	bl	80093f4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	085b      	lsrs	r3, r3, #1
 8008bc8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f47f af49 	bne.w	8008a64 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f002 fef7 	bl	800b9ca <USB_ReadInterrupts>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008be6:	d122      	bne.n	8008c2e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	69fa      	ldr	r2, [r7, #28]
 8008bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bf6:	f023 0301 	bic.w	r3, r3, #1
 8008bfa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d108      	bne.n	8008c18 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008c0e:	2100      	movs	r1, #0
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 fe27 	bl	8009864 <HAL_PCDEx_LPM_Callback>
 8008c16:	e002      	b.n	8008c1e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f006 fb63 	bl	800f2e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	695a      	ldr	r2, [r3, #20]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008c2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f002 fec9 	bl	800b9ca <USB_ReadInterrupts>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c42:	d112      	bne.n	8008c6a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	f003 0301 	and.w	r3, r3, #1
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d102      	bne.n	8008c5a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f006 fb1f 	bl	800f298 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	695a      	ldr	r2, [r3, #20]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008c68:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f002 feab 	bl	800b9ca <USB_ReadInterrupts>
 8008c74:	4603      	mov	r3, r0
 8008c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c7e:	f040 80c7 	bne.w	8008e10 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	69fa      	ldr	r2, [r7, #28]
 8008c8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c90:	f023 0301 	bic.w	r3, r3, #1
 8008c94:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2110      	movs	r1, #16
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f001 ff79 	bl	800ab94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ca6:	e056      	b.n	8008d56 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008caa:	015a      	lsls	r2, r3, #5
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008cba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbe:	015a      	lsls	r2, r3, #5
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ccc:	0151      	lsls	r1, r2, #5
 8008cce:	69fa      	ldr	r2, [r7, #28]
 8008cd0:	440a      	add	r2, r1
 8008cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008cda:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cec:	0151      	lsls	r1, r2, #5
 8008cee:	69fa      	ldr	r2, [r7, #28]
 8008cf0:	440a      	add	r2, r1
 8008cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cf6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008cfa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d08:	461a      	mov	r2, r3
 8008d0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d0e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d12:	015a      	lsls	r2, r3, #5
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d20:	0151      	lsls	r1, r2, #5
 8008d22:	69fa      	ldr	r2, [r7, #28]
 8008d24:	440a      	add	r2, r1
 8008d26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d40:	0151      	lsls	r1, r2, #5
 8008d42:	69fa      	ldr	r2, [r7, #28]
 8008d44:	440a      	add	r2, r1
 8008d46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d4e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d52:	3301      	adds	r3, #1
 8008d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d3a3      	bcc.n	8008ca8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	69fa      	ldr	r2, [r7, #28]
 8008d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d6e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008d72:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d016      	beq.n	8008daa <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d86:	69fa      	ldr	r2, [r7, #28]
 8008d88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d8c:	f043 030b 	orr.w	r3, r3, #11
 8008d90:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d9c:	69fa      	ldr	r2, [r7, #28]
 8008d9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008da2:	f043 030b 	orr.w	r3, r3, #11
 8008da6:	6453      	str	r3, [r2, #68]	; 0x44
 8008da8:	e015      	b.n	8008dd6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	69fa      	ldr	r2, [r7, #28]
 8008db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008db8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008dbc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008dc0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	69fa      	ldr	r2, [r7, #28]
 8008dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dd0:	f043 030b 	orr.w	r3, r3, #11
 8008dd4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	69fa      	ldr	r2, [r7, #28]
 8008de0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008de4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008de8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6818      	ldr	r0, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	f002 feaa 	bl	800bb54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	695a      	ldr	r2, [r3, #20]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f002 fdd8 	bl	800b9ca <USB_ReadInterrupts>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e24:	d124      	bne.n	8008e70 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f002 fe6e 	bl	800bb0c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4618      	mov	r0, r3
 8008e36:	f001 ff0e 	bl	800ac56 <USB_GetDevSpeed>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681c      	ldr	r4, [r3, #0]
 8008e46:	f001 f947 	bl	800a0d8 <HAL_RCC_GetHCLKFreq>
 8008e4a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	461a      	mov	r2, r3
 8008e54:	4620      	mov	r0, r4
 8008e56:	f001 fc4b 	bl	800a6f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f006 f9f3 	bl	800f246 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	695a      	ldr	r2, [r3, #20]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008e6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f002 fda8 	bl	800b9ca <USB_ReadInterrupts>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	f003 0308 	and.w	r3, r3, #8
 8008e80:	2b08      	cmp	r3, #8
 8008e82:	d10a      	bne.n	8008e9a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f006 f9d0 	bl	800f22a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	695a      	ldr	r2, [r3, #20]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f002 0208 	and.w	r2, r2, #8
 8008e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f002 fd93 	bl	800b9ca <USB_ReadInterrupts>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008eae:	d10f      	bne.n	8008ed0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	4619      	mov	r1, r3
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f006 fa32 	bl	800f324 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	695a      	ldr	r2, [r3, #20]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008ece:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f002 fd78 	bl	800b9ca <USB_ReadInterrupts>
 8008eda:	4603      	mov	r3, r0
 8008edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ee0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ee4:	d10f      	bne.n	8008f06 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	4619      	mov	r1, r3
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f006 fa05 	bl	800f300 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	695a      	ldr	r2, [r3, #20]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008f04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f002 fd5d 	bl	800b9ca <USB_ReadInterrupts>
 8008f10:	4603      	mov	r3, r0
 8008f12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f1a:	d10a      	bne.n	8008f32 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f006 fa13 	bl	800f348 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	695a      	ldr	r2, [r3, #20]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008f30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f002 fd47 	bl	800b9ca <USB_ReadInterrupts>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	f003 0304 	and.w	r3, r3, #4
 8008f42:	2b04      	cmp	r3, #4
 8008f44:	d115      	bne.n	8008f72 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	f003 0304 	and.w	r3, r3, #4
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d002      	beq.n	8008f5e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f006 fa03 	bl	800f364 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6859      	ldr	r1, [r3, #4]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	69ba      	ldr	r2, [r7, #24]
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	605a      	str	r2, [r3, #4]
 8008f6e:	e000      	b.n	8008f72 <HAL_PCD_IRQHandler+0x75e>
      return;
 8008f70:	bf00      	nop
    }
  }
}
 8008f72:	3734      	adds	r7, #52	; 0x34
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd90      	pop	{r4, r7, pc}

08008f78 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	460b      	mov	r3, r1
 8008f82:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d101      	bne.n	8008f92 <HAL_PCD_SetAddress+0x1a>
 8008f8e:	2302      	movs	r3, #2
 8008f90:	e013      	b.n	8008fba <HAL_PCD_SetAddress+0x42>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	78fa      	ldrb	r2, [r7, #3]
 8008f9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	78fa      	ldrb	r2, [r7, #3]
 8008fa8:	4611      	mov	r1, r2
 8008faa:	4618      	mov	r0, r3
 8008fac:	f002 fca5 	bl	800b8fa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
 8008fca:	4608      	mov	r0, r1
 8008fcc:	4611      	mov	r1, r2
 8008fce:	461a      	mov	r2, r3
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	70fb      	strb	r3, [r7, #3]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	803b      	strh	r3, [r7, #0]
 8008fd8:	4613      	mov	r3, r2
 8008fda:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	da0f      	bge.n	8009008 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fe8:	78fb      	ldrb	r3, [r7, #3]
 8008fea:	f003 020f 	and.w	r2, r3, #15
 8008fee:	4613      	mov	r3, r2
 8008ff0:	00db      	lsls	r3, r3, #3
 8008ff2:	1a9b      	subs	r3, r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	3338      	adds	r3, #56	; 0x38
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2201      	movs	r2, #1
 8009004:	705a      	strb	r2, [r3, #1]
 8009006:	e00f      	b.n	8009028 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009008:	78fb      	ldrb	r3, [r7, #3]
 800900a:	f003 020f 	and.w	r2, r3, #15
 800900e:	4613      	mov	r3, r2
 8009010:	00db      	lsls	r3, r3, #3
 8009012:	1a9b      	subs	r3, r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	4413      	add	r3, r2
 800901e:	3304      	adds	r3, #4
 8009020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009028:	78fb      	ldrb	r3, [r7, #3]
 800902a:	f003 030f 	and.w	r3, r3, #15
 800902e:	b2da      	uxtb	r2, r3
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009034:	883a      	ldrh	r2, [r7, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	78ba      	ldrb	r2, [r7, #2]
 800903e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	785b      	ldrb	r3, [r3, #1]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d004      	beq.n	8009052 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	b29a      	uxth	r2, r3
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009052:	78bb      	ldrb	r3, [r7, #2]
 8009054:	2b02      	cmp	r3, #2
 8009056:	d102      	bne.n	800905e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009064:	2b01      	cmp	r3, #1
 8009066:	d101      	bne.n	800906c <HAL_PCD_EP_Open+0xaa>
 8009068:	2302      	movs	r3, #2
 800906a:	e00e      	b.n	800908a <HAL_PCD_EP_Open+0xc8>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68f9      	ldr	r1, [r7, #12]
 800907a:	4618      	mov	r0, r3
 800907c:	f001 fe10 	bl	800aca0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009088:	7afb      	ldrb	r3, [r7, #11]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b084      	sub	sp, #16
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	460b      	mov	r3, r1
 800909c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800909e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	da0f      	bge.n	80090c6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090a6:	78fb      	ldrb	r3, [r7, #3]
 80090a8:	f003 020f 	and.w	r2, r3, #15
 80090ac:	4613      	mov	r3, r2
 80090ae:	00db      	lsls	r3, r3, #3
 80090b0:	1a9b      	subs	r3, r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	3338      	adds	r3, #56	; 0x38
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	4413      	add	r3, r2
 80090ba:	3304      	adds	r3, #4
 80090bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2201      	movs	r2, #1
 80090c2:	705a      	strb	r2, [r3, #1]
 80090c4:	e00f      	b.n	80090e6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090c6:	78fb      	ldrb	r3, [r7, #3]
 80090c8:	f003 020f 	and.w	r2, r3, #15
 80090cc:	4613      	mov	r3, r2
 80090ce:	00db      	lsls	r3, r3, #3
 80090d0:	1a9b      	subs	r3, r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	4413      	add	r3, r2
 80090dc:	3304      	adds	r3, #4
 80090de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80090e6:	78fb      	ldrb	r3, [r7, #3]
 80090e8:	f003 030f 	and.w	r3, r3, #15
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d101      	bne.n	8009100 <HAL_PCD_EP_Close+0x6e>
 80090fc:	2302      	movs	r3, #2
 80090fe:	e00e      	b.n	800911e <HAL_PCD_EP_Close+0x8c>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68f9      	ldr	r1, [r7, #12]
 800910e:	4618      	mov	r0, r3
 8009110:	f001 fe4e 	bl	800adb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b086      	sub	sp, #24
 800912a:	af00      	add	r7, sp, #0
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	607a      	str	r2, [r7, #4]
 8009130:	603b      	str	r3, [r7, #0]
 8009132:	460b      	mov	r3, r1
 8009134:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009136:	7afb      	ldrb	r3, [r7, #11]
 8009138:	f003 020f 	and.w	r2, r3, #15
 800913c:	4613      	mov	r3, r2
 800913e:	00db      	lsls	r3, r3, #3
 8009140:	1a9b      	subs	r3, r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	4413      	add	r3, r2
 800914c:	3304      	adds	r3, #4
 800914e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	683a      	ldr	r2, [r7, #0]
 800915a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	2200      	movs	r2, #0
 8009160:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2200      	movs	r2, #0
 8009166:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009168:	7afb      	ldrb	r3, [r7, #11]
 800916a:	f003 030f 	and.w	r3, r3, #15
 800916e:	b2da      	uxtb	r2, r3
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d102      	bne.n	8009182 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009182:	7afb      	ldrb	r3, [r7, #11]
 8009184:	f003 030f 	and.w	r3, r3, #15
 8009188:	2b00      	cmp	r3, #0
 800918a:	d109      	bne.n	80091a0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6818      	ldr	r0, [r3, #0]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	b2db      	uxtb	r3, r3
 8009196:	461a      	mov	r2, r3
 8009198:	6979      	ldr	r1, [r7, #20]
 800919a:	f002 f929 	bl	800b3f0 <USB_EP0StartXfer>
 800919e:	e008      	b.n	80091b2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6818      	ldr	r0, [r3, #0]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	461a      	mov	r2, r3
 80091ac:	6979      	ldr	r1, [r7, #20]
 80091ae:	f001 fedb 	bl	800af68 <USB_EPStartXfer>
  }

  return HAL_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3718      	adds	r7, #24
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	460b      	mov	r3, r1
 80091c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80091c8:	78fb      	ldrb	r3, [r7, #3]
 80091ca:	f003 020f 	and.w	r2, r3, #15
 80091ce:	6879      	ldr	r1, [r7, #4]
 80091d0:	4613      	mov	r3, r2
 80091d2:	00db      	lsls	r3, r3, #3
 80091d4:	1a9b      	subs	r3, r3, r2
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	440b      	add	r3, r1
 80091da:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80091de:	681b      	ldr	r3, [r3, #0]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b086      	sub	sp, #24
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	607a      	str	r2, [r7, #4]
 80091f6:	603b      	str	r3, [r7, #0]
 80091f8:	460b      	mov	r3, r1
 80091fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091fc:	7afb      	ldrb	r3, [r7, #11]
 80091fe:	f003 020f 	and.w	r2, r3, #15
 8009202:	4613      	mov	r3, r2
 8009204:	00db      	lsls	r3, r3, #3
 8009206:	1a9b      	subs	r3, r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	3338      	adds	r3, #56	; 0x38
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	4413      	add	r3, r2
 8009210:	3304      	adds	r3, #4
 8009212:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	2200      	movs	r2, #0
 8009224:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	2201      	movs	r2, #1
 800922a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800922c:	7afb      	ldrb	r3, [r7, #11]
 800922e:	f003 030f 	and.w	r3, r3, #15
 8009232:	b2da      	uxtb	r2, r3
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d102      	bne.n	8009246 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009246:	7afb      	ldrb	r3, [r7, #11]
 8009248:	f003 030f 	and.w	r3, r3, #15
 800924c:	2b00      	cmp	r3, #0
 800924e:	d109      	bne.n	8009264 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6818      	ldr	r0, [r3, #0]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	b2db      	uxtb	r3, r3
 800925a:	461a      	mov	r2, r3
 800925c:	6979      	ldr	r1, [r7, #20]
 800925e:	f002 f8c7 	bl	800b3f0 <USB_EP0StartXfer>
 8009262:	e008      	b.n	8009276 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6818      	ldr	r0, [r3, #0]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	b2db      	uxtb	r3, r3
 800926e:	461a      	mov	r2, r3
 8009270:	6979      	ldr	r1, [r7, #20]
 8009272:	f001 fe79 	bl	800af68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3718      	adds	r7, #24
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	460b      	mov	r3, r1
 800928a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800928c:	78fb      	ldrb	r3, [r7, #3]
 800928e:	f003 020f 	and.w	r2, r3, #15
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	429a      	cmp	r2, r3
 8009298:	d901      	bls.n	800929e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e050      	b.n	8009340 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800929e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	da0f      	bge.n	80092c6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092a6:	78fb      	ldrb	r3, [r7, #3]
 80092a8:	f003 020f 	and.w	r2, r3, #15
 80092ac:	4613      	mov	r3, r2
 80092ae:	00db      	lsls	r3, r3, #3
 80092b0:	1a9b      	subs	r3, r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	3338      	adds	r3, #56	; 0x38
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	4413      	add	r3, r2
 80092ba:	3304      	adds	r3, #4
 80092bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2201      	movs	r2, #1
 80092c2:	705a      	strb	r2, [r3, #1]
 80092c4:	e00d      	b.n	80092e2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80092c6:	78fa      	ldrb	r2, [r7, #3]
 80092c8:	4613      	mov	r3, r2
 80092ca:	00db      	lsls	r3, r3, #3
 80092cc:	1a9b      	subs	r3, r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	4413      	add	r3, r2
 80092d8:	3304      	adds	r3, #4
 80092da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2201      	movs	r2, #1
 80092e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092e8:	78fb      	ldrb	r3, [r7, #3]
 80092ea:	f003 030f 	and.w	r3, r3, #15
 80092ee:	b2da      	uxtb	r2, r3
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d101      	bne.n	8009302 <HAL_PCD_EP_SetStall+0x82>
 80092fe:	2302      	movs	r3, #2
 8009300:	e01e      	b.n	8009340 <HAL_PCD_EP_SetStall+0xc0>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68f9      	ldr	r1, [r7, #12]
 8009310:	4618      	mov	r0, r3
 8009312:	f002 fa1e 	bl	800b752 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009316:	78fb      	ldrb	r3, [r7, #3]
 8009318:	f003 030f 	and.w	r3, r3, #15
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10a      	bne.n	8009336 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6818      	ldr	r0, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	b2d9      	uxtb	r1, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009330:	461a      	mov	r2, r3
 8009332:	f002 fc0f 	bl	800bb54 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	460b      	mov	r3, r1
 8009352:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009354:	78fb      	ldrb	r3, [r7, #3]
 8009356:	f003 020f 	and.w	r2, r3, #15
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	429a      	cmp	r2, r3
 8009360:	d901      	bls.n	8009366 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	e042      	b.n	80093ec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009366:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800936a:	2b00      	cmp	r3, #0
 800936c:	da0f      	bge.n	800938e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800936e:	78fb      	ldrb	r3, [r7, #3]
 8009370:	f003 020f 	and.w	r2, r3, #15
 8009374:	4613      	mov	r3, r2
 8009376:	00db      	lsls	r3, r3, #3
 8009378:	1a9b      	subs	r3, r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	3338      	adds	r3, #56	; 0x38
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	4413      	add	r3, r2
 8009382:	3304      	adds	r3, #4
 8009384:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2201      	movs	r2, #1
 800938a:	705a      	strb	r2, [r3, #1]
 800938c:	e00f      	b.n	80093ae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800938e:	78fb      	ldrb	r3, [r7, #3]
 8009390:	f003 020f 	and.w	r2, r3, #15
 8009394:	4613      	mov	r3, r2
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	1a9b      	subs	r3, r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	4413      	add	r3, r2
 80093a4:	3304      	adds	r3, #4
 80093a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80093b4:	78fb      	ldrb	r3, [r7, #3]
 80093b6:	f003 030f 	and.w	r3, r3, #15
 80093ba:	b2da      	uxtb	r2, r3
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d101      	bne.n	80093ce <HAL_PCD_EP_ClrStall+0x86>
 80093ca:	2302      	movs	r3, #2
 80093cc:	e00e      	b.n	80093ec <HAL_PCD_EP_ClrStall+0xa4>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2201      	movs	r2, #1
 80093d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68f9      	ldr	r1, [r7, #12]
 80093dc:	4618      	mov	r0, r3
 80093de:	f002 fa26 	bl	800b82e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b08a      	sub	sp, #40	; 0x28
 80093f8:	af02      	add	r7, sp, #8
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009408:	683a      	ldr	r2, [r7, #0]
 800940a:	4613      	mov	r3, r2
 800940c:	00db      	lsls	r3, r3, #3
 800940e:	1a9b      	subs	r3, r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	3338      	adds	r3, #56	; 0x38
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	4413      	add	r3, r2
 8009418:	3304      	adds	r3, #4
 800941a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	699a      	ldr	r2, [r3, #24]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	695b      	ldr	r3, [r3, #20]
 8009424:	429a      	cmp	r2, r3
 8009426:	d901      	bls.n	800942c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	e06c      	b.n	8009506 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	695a      	ldr	r2, [r3, #20]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	69fa      	ldr	r2, [r7, #28]
 800943e:	429a      	cmp	r2, r3
 8009440:	d902      	bls.n	8009448 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	3303      	adds	r3, #3
 800944c:	089b      	lsrs	r3, r3, #2
 800944e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009450:	e02b      	b.n	80094aa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	695a      	ldr	r2, [r3, #20]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	69fa      	ldr	r2, [r7, #28]
 8009464:	429a      	cmp	r2, r3
 8009466:	d902      	bls.n	800946e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	3303      	adds	r3, #3
 8009472:	089b      	lsrs	r3, r3, #2
 8009474:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	68d9      	ldr	r1, [r3, #12]
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	b2da      	uxtb	r2, r3
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009486:	b2db      	uxtb	r3, r3
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	4603      	mov	r3, r0
 800948c:	6978      	ldr	r0, [r7, #20]
 800948e:	f002 f902 	bl	800b696 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	68da      	ldr	r2, [r3, #12]
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	441a      	add	r2, r3
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	699a      	ldr	r2, [r3, #24]
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	441a      	add	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	015a      	lsls	r2, r3, #5
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	4413      	add	r3, r2
 80094b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	69ba      	ldr	r2, [r7, #24]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d809      	bhi.n	80094d4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	699a      	ldr	r2, [r3, #24]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d203      	bcs.n	80094d4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	695b      	ldr	r3, [r3, #20]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1be      	bne.n	8009452 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	695a      	ldr	r2, [r3, #20]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d811      	bhi.n	8009504 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	f003 030f 	and.w	r3, r3, #15
 80094e6:	2201      	movs	r2, #1
 80094e8:	fa02 f303 	lsl.w	r3, r2, r3
 80094ec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	43db      	mvns	r3, r3
 80094fa:	6939      	ldr	r1, [r7, #16]
 80094fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009500:	4013      	ands	r3, r2
 8009502:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3720      	adds	r7, #32
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
	...

08009510 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	333c      	adds	r3, #60	; 0x3c
 8009528:	3304      	adds	r3, #4
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	015a      	lsls	r2, r3, #5
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	4413      	add	r3, r2
 8009536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	2b01      	cmp	r3, #1
 8009544:	f040 80a0 	bne.w	8009688 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	f003 0308 	and.w	r3, r3, #8
 800954e:	2b00      	cmp	r3, #0
 8009550:	d015      	beq.n	800957e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	4a72      	ldr	r2, [pc, #456]	; (8009720 <PCD_EP_OutXfrComplete_int+0x210>)
 8009556:	4293      	cmp	r3, r2
 8009558:	f240 80dd 	bls.w	8009716 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009562:	2b00      	cmp	r3, #0
 8009564:	f000 80d7 	beq.w	8009716 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	015a      	lsls	r2, r3, #5
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	4413      	add	r3, r2
 8009570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009574:	461a      	mov	r2, r3
 8009576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800957a:	6093      	str	r3, [r2, #8]
 800957c:	e0cb      	b.n	8009716 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	f003 0320 	and.w	r3, r3, #32
 8009584:	2b00      	cmp	r3, #0
 8009586:	d009      	beq.n	800959c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	4413      	add	r3, r2
 8009590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009594:	461a      	mov	r2, r3
 8009596:	2320      	movs	r3, #32
 8009598:	6093      	str	r3, [r2, #8]
 800959a:	e0bc      	b.n	8009716 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f040 80b7 	bne.w	8009716 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	4a5d      	ldr	r2, [pc, #372]	; (8009720 <PCD_EP_OutXfrComplete_int+0x210>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d90f      	bls.n	80095d0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d00a      	beq.n	80095d0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	015a      	lsls	r2, r3, #5
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	4413      	add	r3, r2
 80095c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c6:	461a      	mov	r2, r3
 80095c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095cc:	6093      	str	r3, [r2, #8]
 80095ce:	e0a2      	b.n	8009716 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80095d0:	6879      	ldr	r1, [r7, #4]
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	4613      	mov	r3, r2
 80095d6:	00db      	lsls	r3, r3, #3
 80095d8:	1a9b      	subs	r3, r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	440b      	add	r3, r1
 80095de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80095e2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	0159      	lsls	r1, r3, #5
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	440b      	add	r3, r1
 80095ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80095f6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	4613      	mov	r3, r2
 80095fe:	00db      	lsls	r3, r3, #3
 8009600:	1a9b      	subs	r3, r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4403      	add	r3, r0
 8009606:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800960a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800960c:	6879      	ldr	r1, [r7, #4]
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	4613      	mov	r3, r2
 8009612:	00db      	lsls	r3, r3, #3
 8009614:	1a9b      	subs	r3, r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	440b      	add	r3, r1
 800961a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800961e:	6819      	ldr	r1, [r3, #0]
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	4613      	mov	r3, r2
 8009626:	00db      	lsls	r3, r3, #3
 8009628:	1a9b      	subs	r3, r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4403      	add	r3, r0
 800962e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4419      	add	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	683a      	ldr	r2, [r7, #0]
 800963a:	4613      	mov	r3, r2
 800963c:	00db      	lsls	r3, r3, #3
 800963e:	1a9b      	subs	r3, r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	4403      	add	r3, r0
 8009644:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009648:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d114      	bne.n	800967a <PCD_EP_OutXfrComplete_int+0x16a>
 8009650:	6879      	ldr	r1, [r7, #4]
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	4613      	mov	r3, r2
 8009656:	00db      	lsls	r3, r3, #3
 8009658:	1a9b      	subs	r3, r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	440b      	add	r3, r1
 800965e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d108      	bne.n	800967a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6818      	ldr	r0, [r3, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009672:	461a      	mov	r2, r3
 8009674:	2101      	movs	r1, #1
 8009676:	f002 fa6d 	bl	800bb54 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	b2db      	uxtb	r3, r3
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f005 fd9d 	bl	800f1c0 <HAL_PCD_DataOutStageCallback>
 8009686:	e046      	b.n	8009716 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	4a26      	ldr	r2, [pc, #152]	; (8009724 <PCD_EP_OutXfrComplete_int+0x214>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d124      	bne.n	80096da <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00a      	beq.n	80096b0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	015a      	lsls	r2, r3, #5
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	4413      	add	r3, r2
 80096a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a6:	461a      	mov	r2, r3
 80096a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096ac:	6093      	str	r3, [r2, #8]
 80096ae:	e032      	b.n	8009716 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	f003 0320 	and.w	r3, r3, #32
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d008      	beq.n	80096cc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	015a      	lsls	r2, r3, #5
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	4413      	add	r3, r2
 80096c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c6:	461a      	mov	r2, r3
 80096c8:	2320      	movs	r3, #32
 80096ca:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	4619      	mov	r1, r3
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f005 fd74 	bl	800f1c0 <HAL_PCD_DataOutStageCallback>
 80096d8:	e01d      	b.n	8009716 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d114      	bne.n	800970a <PCD_EP_OutXfrComplete_int+0x1fa>
 80096e0:	6879      	ldr	r1, [r7, #4]
 80096e2:	683a      	ldr	r2, [r7, #0]
 80096e4:	4613      	mov	r3, r2
 80096e6:	00db      	lsls	r3, r3, #3
 80096e8:	1a9b      	subs	r3, r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	440b      	add	r3, r1
 80096ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d108      	bne.n	800970a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6818      	ldr	r0, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009702:	461a      	mov	r2, r3
 8009704:	2100      	movs	r1, #0
 8009706:	f002 fa25 	bl	800bb54 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	b2db      	uxtb	r3, r3
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f005 fd55 	bl	800f1c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3718      	adds	r7, #24
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	4f54300a 	.word	0x4f54300a
 8009724:	4f54310a 	.word	0x4f54310a

08009728 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	333c      	adds	r3, #60	; 0x3c
 8009740:	3304      	adds	r3, #4
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	015a      	lsls	r2, r3, #5
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	4413      	add	r3, r2
 800974e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	4a15      	ldr	r2, [pc, #84]	; (80097b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d90e      	bls.n	800977c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009764:	2b00      	cmp	r3, #0
 8009766:	d009      	beq.n	800977c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	4413      	add	r3, r2
 8009770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009774:	461a      	mov	r2, r3
 8009776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800977a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f005 fd0d 	bl	800f19c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	4a0a      	ldr	r2, [pc, #40]	; (80097b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d90c      	bls.n	80097a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	2b01      	cmp	r3, #1
 8009790:	d108      	bne.n	80097a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6818      	ldr	r0, [r3, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800979c:	461a      	mov	r2, r3
 800979e:	2101      	movs	r1, #1
 80097a0:	f002 f9d8 	bl	800bb54 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3718      	adds	r7, #24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	4f54300a 	.word	0x4f54300a

080097b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	460b      	mov	r3, r1
 80097be:	70fb      	strb	r3, [r7, #3]
 80097c0:	4613      	mov	r3, r2
 80097c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80097cc:	78fb      	ldrb	r3, [r7, #3]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d107      	bne.n	80097e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80097d2:	883b      	ldrh	r3, [r7, #0]
 80097d4:	0419      	lsls	r1, r3, #16
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	430a      	orrs	r2, r1
 80097de:	629a      	str	r2, [r3, #40]	; 0x28
 80097e0:	e028      	b.n	8009834 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e8:	0c1b      	lsrs	r3, r3, #16
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	4413      	add	r3, r2
 80097ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80097f0:	2300      	movs	r3, #0
 80097f2:	73fb      	strb	r3, [r7, #15]
 80097f4:	e00d      	b.n	8009812 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
 80097fc:	3340      	adds	r3, #64	; 0x40
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4413      	add	r3, r2
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	0c1b      	lsrs	r3, r3, #16
 8009806:	68ba      	ldr	r2, [r7, #8]
 8009808:	4413      	add	r3, r2
 800980a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800980c:	7bfb      	ldrb	r3, [r7, #15]
 800980e:	3301      	adds	r3, #1
 8009810:	73fb      	strb	r3, [r7, #15]
 8009812:	7bfa      	ldrb	r2, [r7, #15]
 8009814:	78fb      	ldrb	r3, [r7, #3]
 8009816:	3b01      	subs	r3, #1
 8009818:	429a      	cmp	r2, r3
 800981a:	d3ec      	bcc.n	80097f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800981c:	883b      	ldrh	r3, [r7, #0]
 800981e:	0418      	lsls	r0, r3, #16
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6819      	ldr	r1, [r3, #0]
 8009824:	78fb      	ldrb	r3, [r7, #3]
 8009826:	3b01      	subs	r3, #1
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	4302      	orrs	r2, r0
 800982c:	3340      	adds	r3, #64	; 0x40
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	440b      	add	r3, r1
 8009832:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3714      	adds	r7, #20
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr

08009842 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009842:	b480      	push	{r7}
 8009844:	b083      	sub	sp, #12
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	460b      	mov	r3, r1
 800984c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	887a      	ldrh	r2, [r7, #2]
 8009854:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	460b      	mov	r3, r1
 800986e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d101      	bne.n	800988e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e25b      	b.n	8009d46 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f003 0301 	and.w	r3, r3, #1
 8009896:	2b00      	cmp	r3, #0
 8009898:	d075      	beq.n	8009986 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800989a:	4ba3      	ldr	r3, [pc, #652]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	f003 030c 	and.w	r3, r3, #12
 80098a2:	2b04      	cmp	r3, #4
 80098a4:	d00c      	beq.n	80098c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80098a6:	4ba0      	ldr	r3, [pc, #640]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80098ae:	2b08      	cmp	r3, #8
 80098b0:	d112      	bne.n	80098d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80098b2:	4b9d      	ldr	r3, [pc, #628]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098be:	d10b      	bne.n	80098d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098c0:	4b99      	ldr	r3, [pc, #612]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d05b      	beq.n	8009984 <HAL_RCC_OscConfig+0x108>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d157      	bne.n	8009984 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	e236      	b.n	8009d46 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098e0:	d106      	bne.n	80098f0 <HAL_RCC_OscConfig+0x74>
 80098e2:	4b91      	ldr	r3, [pc, #580]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a90      	ldr	r2, [pc, #576]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 80098e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098ec:	6013      	str	r3, [r2, #0]
 80098ee:	e01d      	b.n	800992c <HAL_RCC_OscConfig+0xb0>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098f8:	d10c      	bne.n	8009914 <HAL_RCC_OscConfig+0x98>
 80098fa:	4b8b      	ldr	r3, [pc, #556]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a8a      	ldr	r2, [pc, #552]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 8009900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009904:	6013      	str	r3, [r2, #0]
 8009906:	4b88      	ldr	r3, [pc, #544]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a87      	ldr	r2, [pc, #540]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 800990c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	e00b      	b.n	800992c <HAL_RCC_OscConfig+0xb0>
 8009914:	4b84      	ldr	r3, [pc, #528]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a83      	ldr	r2, [pc, #524]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 800991a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800991e:	6013      	str	r3, [r2, #0]
 8009920:	4b81      	ldr	r3, [pc, #516]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a80      	ldr	r2, [pc, #512]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 8009926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800992a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d013      	beq.n	800995c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009934:	f7fb f890 	bl	8004a58 <HAL_GetTick>
 8009938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800993a:	e008      	b.n	800994e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800993c:	f7fb f88c 	bl	8004a58 <HAL_GetTick>
 8009940:	4602      	mov	r2, r0
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	2b64      	cmp	r3, #100	; 0x64
 8009948:	d901      	bls.n	800994e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	e1fb      	b.n	8009d46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800994e:	4b76      	ldr	r3, [pc, #472]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009956:	2b00      	cmp	r3, #0
 8009958:	d0f0      	beq.n	800993c <HAL_RCC_OscConfig+0xc0>
 800995a:	e014      	b.n	8009986 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800995c:	f7fb f87c 	bl	8004a58 <HAL_GetTick>
 8009960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009962:	e008      	b.n	8009976 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009964:	f7fb f878 	bl	8004a58 <HAL_GetTick>
 8009968:	4602      	mov	r2, r0
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	2b64      	cmp	r3, #100	; 0x64
 8009970:	d901      	bls.n	8009976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	e1e7      	b.n	8009d46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009976:	4b6c      	ldr	r3, [pc, #432]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1f0      	bne.n	8009964 <HAL_RCC_OscConfig+0xe8>
 8009982:	e000      	b.n	8009986 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 0302 	and.w	r3, r3, #2
 800998e:	2b00      	cmp	r3, #0
 8009990:	d063      	beq.n	8009a5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009992:	4b65      	ldr	r3, [pc, #404]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	f003 030c 	and.w	r3, r3, #12
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00b      	beq.n	80099b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800999e:	4b62      	ldr	r3, [pc, #392]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 80099a0:	689b      	ldr	r3, [r3, #8]
 80099a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80099a6:	2b08      	cmp	r3, #8
 80099a8:	d11c      	bne.n	80099e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80099aa:	4b5f      	ldr	r3, [pc, #380]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d116      	bne.n	80099e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80099b6:	4b5c      	ldr	r3, [pc, #368]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 0302 	and.w	r3, r3, #2
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d005      	beq.n	80099ce <HAL_RCC_OscConfig+0x152>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d001      	beq.n	80099ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	e1bb      	b.n	8009d46 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099ce:	4b56      	ldr	r3, [pc, #344]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	4952      	ldr	r1, [pc, #328]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 80099de:	4313      	orrs	r3, r2
 80099e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80099e2:	e03a      	b.n	8009a5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d020      	beq.n	8009a2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80099ec:	4b4f      	ldr	r3, [pc, #316]	; (8009b2c <HAL_RCC_OscConfig+0x2b0>)
 80099ee:	2201      	movs	r2, #1
 80099f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f2:	f7fb f831 	bl	8004a58 <HAL_GetTick>
 80099f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099f8:	e008      	b.n	8009a0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099fa:	f7fb f82d 	bl	8004a58 <HAL_GetTick>
 80099fe:	4602      	mov	r2, r0
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d901      	bls.n	8009a0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e19c      	b.n	8009d46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a0c:	4b46      	ldr	r3, [pc, #280]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 0302 	and.w	r3, r3, #2
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d0f0      	beq.n	80099fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a18:	4b43      	ldr	r3, [pc, #268]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	00db      	lsls	r3, r3, #3
 8009a26:	4940      	ldr	r1, [pc, #256]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	600b      	str	r3, [r1, #0]
 8009a2c:	e015      	b.n	8009a5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a2e:	4b3f      	ldr	r3, [pc, #252]	; (8009b2c <HAL_RCC_OscConfig+0x2b0>)
 8009a30:	2200      	movs	r2, #0
 8009a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a34:	f7fb f810 	bl	8004a58 <HAL_GetTick>
 8009a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a3a:	e008      	b.n	8009a4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a3c:	f7fb f80c 	bl	8004a58 <HAL_GetTick>
 8009a40:	4602      	mov	r2, r0
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d901      	bls.n	8009a4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e17b      	b.n	8009d46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a4e:	4b36      	ldr	r3, [pc, #216]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 0302 	and.w	r3, r3, #2
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1f0      	bne.n	8009a3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f003 0308 	and.w	r3, r3, #8
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d030      	beq.n	8009ac8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	695b      	ldr	r3, [r3, #20]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d016      	beq.n	8009a9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a6e:	4b30      	ldr	r3, [pc, #192]	; (8009b30 <HAL_RCC_OscConfig+0x2b4>)
 8009a70:	2201      	movs	r2, #1
 8009a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a74:	f7fa fff0 	bl	8004a58 <HAL_GetTick>
 8009a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a7a:	e008      	b.n	8009a8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a7c:	f7fa ffec 	bl	8004a58 <HAL_GetTick>
 8009a80:	4602      	mov	r2, r0
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d901      	bls.n	8009a8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e15b      	b.n	8009d46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a8e:	4b26      	ldr	r3, [pc, #152]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 8009a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a92:	f003 0302 	and.w	r3, r3, #2
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d0f0      	beq.n	8009a7c <HAL_RCC_OscConfig+0x200>
 8009a9a:	e015      	b.n	8009ac8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a9c:	4b24      	ldr	r3, [pc, #144]	; (8009b30 <HAL_RCC_OscConfig+0x2b4>)
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009aa2:	f7fa ffd9 	bl	8004a58 <HAL_GetTick>
 8009aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009aa8:	e008      	b.n	8009abc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009aaa:	f7fa ffd5 	bl	8004a58 <HAL_GetTick>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d901      	bls.n	8009abc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	e144      	b.n	8009d46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009abc:	4b1a      	ldr	r3, [pc, #104]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 8009abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ac0:	f003 0302 	and.w	r3, r3, #2
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1f0      	bne.n	8009aaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f003 0304 	and.w	r3, r3, #4
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f000 80a0 	beq.w	8009c16 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ada:	4b13      	ldr	r3, [pc, #76]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 8009adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10f      	bne.n	8009b06 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	60bb      	str	r3, [r7, #8]
 8009aea:	4b0f      	ldr	r3, [pc, #60]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 8009aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aee:	4a0e      	ldr	r2, [pc, #56]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 8009af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009af4:	6413      	str	r3, [r2, #64]	; 0x40
 8009af6:	4b0c      	ldr	r3, [pc, #48]	; (8009b28 <HAL_RCC_OscConfig+0x2ac>)
 8009af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009afe:	60bb      	str	r3, [r7, #8]
 8009b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b02:	2301      	movs	r3, #1
 8009b04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b06:	4b0b      	ldr	r3, [pc, #44]	; (8009b34 <HAL_RCC_OscConfig+0x2b8>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d121      	bne.n	8009b56 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009b12:	4b08      	ldr	r3, [pc, #32]	; (8009b34 <HAL_RCC_OscConfig+0x2b8>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a07      	ldr	r2, [pc, #28]	; (8009b34 <HAL_RCC_OscConfig+0x2b8>)
 8009b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009b1e:	f7fa ff9b 	bl	8004a58 <HAL_GetTick>
 8009b22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b24:	e011      	b.n	8009b4a <HAL_RCC_OscConfig+0x2ce>
 8009b26:	bf00      	nop
 8009b28:	40023800 	.word	0x40023800
 8009b2c:	42470000 	.word	0x42470000
 8009b30:	42470e80 	.word	0x42470e80
 8009b34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b38:	f7fa ff8e 	bl	8004a58 <HAL_GetTick>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d901      	bls.n	8009b4a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	e0fd      	b.n	8009d46 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b4a:	4b81      	ldr	r3, [pc, #516]	; (8009d50 <HAL_RCC_OscConfig+0x4d4>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d0f0      	beq.n	8009b38 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d106      	bne.n	8009b6c <HAL_RCC_OscConfig+0x2f0>
 8009b5e:	4b7d      	ldr	r3, [pc, #500]	; (8009d54 <HAL_RCC_OscConfig+0x4d8>)
 8009b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b62:	4a7c      	ldr	r2, [pc, #496]	; (8009d54 <HAL_RCC_OscConfig+0x4d8>)
 8009b64:	f043 0301 	orr.w	r3, r3, #1
 8009b68:	6713      	str	r3, [r2, #112]	; 0x70
 8009b6a:	e01c      	b.n	8009ba6 <HAL_RCC_OscConfig+0x32a>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	2b05      	cmp	r3, #5
 8009b72:	d10c      	bne.n	8009b8e <HAL_RCC_OscConfig+0x312>
 8009b74:	4b77      	ldr	r3, [pc, #476]	; (8009d54 <HAL_RCC_OscConfig+0x4d8>)
 8009b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b78:	4a76      	ldr	r2, [pc, #472]	; (8009d54 <HAL_RCC_OscConfig+0x4d8>)
 8009b7a:	f043 0304 	orr.w	r3, r3, #4
 8009b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8009b80:	4b74      	ldr	r3, [pc, #464]	; (8009d54 <HAL_RCC_OscConfig+0x4d8>)
 8009b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b84:	4a73      	ldr	r2, [pc, #460]	; (8009d54 <HAL_RCC_OscConfig+0x4d8>)
 8009b86:	f043 0301 	orr.w	r3, r3, #1
 8009b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8009b8c:	e00b      	b.n	8009ba6 <HAL_RCC_OscConfig+0x32a>
 8009b8e:	4b71      	ldr	r3, [pc, #452]	; (8009d54 <HAL_RCC_OscConfig+0x4d8>)
 8009b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b92:	4a70      	ldr	r2, [pc, #448]	; (8009d54 <HAL_RCC_OscConfig+0x4d8>)
 8009b94:	f023 0301 	bic.w	r3, r3, #1
 8009b98:	6713      	str	r3, [r2, #112]	; 0x70
 8009b9a:	4b6e      	ldr	r3, [pc, #440]	; (8009d54 <HAL_RCC_OscConfig+0x4d8>)
 8009b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b9e:	4a6d      	ldr	r2, [pc, #436]	; (8009d54 <HAL_RCC_OscConfig+0x4d8>)
 8009ba0:	f023 0304 	bic.w	r3, r3, #4
 8009ba4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d015      	beq.n	8009bda <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bae:	f7fa ff53 	bl	8004a58 <HAL_GetTick>
 8009bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bb4:	e00a      	b.n	8009bcc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009bb6:	f7fa ff4f 	bl	8004a58 <HAL_GetTick>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d901      	bls.n	8009bcc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	e0bc      	b.n	8009d46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bcc:	4b61      	ldr	r3, [pc, #388]	; (8009d54 <HAL_RCC_OscConfig+0x4d8>)
 8009bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bd0:	f003 0302 	and.w	r3, r3, #2
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d0ee      	beq.n	8009bb6 <HAL_RCC_OscConfig+0x33a>
 8009bd8:	e014      	b.n	8009c04 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009bda:	f7fa ff3d 	bl	8004a58 <HAL_GetTick>
 8009bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009be0:	e00a      	b.n	8009bf8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009be2:	f7fa ff39 	bl	8004a58 <HAL_GetTick>
 8009be6:	4602      	mov	r2, r0
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d901      	bls.n	8009bf8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	e0a6      	b.n	8009d46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009bf8:	4b56      	ldr	r3, [pc, #344]	; (8009d54 <HAL_RCC_OscConfig+0x4d8>)
 8009bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bfc:	f003 0302 	and.w	r3, r3, #2
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1ee      	bne.n	8009be2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009c04:	7dfb      	ldrb	r3, [r7, #23]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d105      	bne.n	8009c16 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c0a:	4b52      	ldr	r3, [pc, #328]	; (8009d54 <HAL_RCC_OscConfig+0x4d8>)
 8009c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0e:	4a51      	ldr	r2, [pc, #324]	; (8009d54 <HAL_RCC_OscConfig+0x4d8>)
 8009c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	f000 8092 	beq.w	8009d44 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009c20:	4b4c      	ldr	r3, [pc, #304]	; (8009d54 <HAL_RCC_OscConfig+0x4d8>)
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	f003 030c 	and.w	r3, r3, #12
 8009c28:	2b08      	cmp	r3, #8
 8009c2a:	d05c      	beq.n	8009ce6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d141      	bne.n	8009cb8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c34:	4b48      	ldr	r3, [pc, #288]	; (8009d58 <HAL_RCC_OscConfig+0x4dc>)
 8009c36:	2200      	movs	r2, #0
 8009c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c3a:	f7fa ff0d 	bl	8004a58 <HAL_GetTick>
 8009c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c40:	e008      	b.n	8009c54 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c42:	f7fa ff09 	bl	8004a58 <HAL_GetTick>
 8009c46:	4602      	mov	r2, r0
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d901      	bls.n	8009c54 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009c50:	2303      	movs	r3, #3
 8009c52:	e078      	b.n	8009d46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c54:	4b3f      	ldr	r3, [pc, #252]	; (8009d54 <HAL_RCC_OscConfig+0x4d8>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1f0      	bne.n	8009c42 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	69da      	ldr	r2, [r3, #28]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a1b      	ldr	r3, [r3, #32]
 8009c68:	431a      	orrs	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6e:	019b      	lsls	r3, r3, #6
 8009c70:	431a      	orrs	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c76:	085b      	lsrs	r3, r3, #1
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	041b      	lsls	r3, r3, #16
 8009c7c:	431a      	orrs	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c82:	061b      	lsls	r3, r3, #24
 8009c84:	4933      	ldr	r1, [pc, #204]	; (8009d54 <HAL_RCC_OscConfig+0x4d8>)
 8009c86:	4313      	orrs	r3, r2
 8009c88:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c8a:	4b33      	ldr	r3, [pc, #204]	; (8009d58 <HAL_RCC_OscConfig+0x4dc>)
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c90:	f7fa fee2 	bl	8004a58 <HAL_GetTick>
 8009c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c96:	e008      	b.n	8009caa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c98:	f7fa fede 	bl	8004a58 <HAL_GetTick>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	2b02      	cmp	r3, #2
 8009ca4:	d901      	bls.n	8009caa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	e04d      	b.n	8009d46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009caa:	4b2a      	ldr	r3, [pc, #168]	; (8009d54 <HAL_RCC_OscConfig+0x4d8>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d0f0      	beq.n	8009c98 <HAL_RCC_OscConfig+0x41c>
 8009cb6:	e045      	b.n	8009d44 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cb8:	4b27      	ldr	r3, [pc, #156]	; (8009d58 <HAL_RCC_OscConfig+0x4dc>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cbe:	f7fa fecb 	bl	8004a58 <HAL_GetTick>
 8009cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cc4:	e008      	b.n	8009cd8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009cc6:	f7fa fec7 	bl	8004a58 <HAL_GetTick>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	1ad3      	subs	r3, r2, r3
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d901      	bls.n	8009cd8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	e036      	b.n	8009d46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cd8:	4b1e      	ldr	r3, [pc, #120]	; (8009d54 <HAL_RCC_OscConfig+0x4d8>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d1f0      	bne.n	8009cc6 <HAL_RCC_OscConfig+0x44a>
 8009ce4:	e02e      	b.n	8009d44 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d101      	bne.n	8009cf2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e029      	b.n	8009d46 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009cf2:	4b18      	ldr	r3, [pc, #96]	; (8009d54 <HAL_RCC_OscConfig+0x4d8>)
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	69db      	ldr	r3, [r3, #28]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d11c      	bne.n	8009d40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d115      	bne.n	8009d40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d10d      	bne.n	8009d40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d106      	bne.n	8009d40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d001      	beq.n	8009d44 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	e000      	b.n	8009d46 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3718      	adds	r7, #24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	40007000 	.word	0x40007000
 8009d54:	40023800 	.word	0x40023800
 8009d58:	42470060 	.word	0x42470060

08009d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d101      	bne.n	8009d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e0cc      	b.n	8009f0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009d70:	4b68      	ldr	r3, [pc, #416]	; (8009f14 <HAL_RCC_ClockConfig+0x1b8>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 030f 	and.w	r3, r3, #15
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d90c      	bls.n	8009d98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d7e:	4b65      	ldr	r3, [pc, #404]	; (8009f14 <HAL_RCC_ClockConfig+0x1b8>)
 8009d80:	683a      	ldr	r2, [r7, #0]
 8009d82:	b2d2      	uxtb	r2, r2
 8009d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d86:	4b63      	ldr	r3, [pc, #396]	; (8009f14 <HAL_RCC_ClockConfig+0x1b8>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 030f 	and.w	r3, r3, #15
 8009d8e:	683a      	ldr	r2, [r7, #0]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d001      	beq.n	8009d98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009d94:	2301      	movs	r3, #1
 8009d96:	e0b8      	b.n	8009f0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f003 0302 	and.w	r3, r3, #2
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d020      	beq.n	8009de6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 0304 	and.w	r3, r3, #4
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d005      	beq.n	8009dbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009db0:	4b59      	ldr	r3, [pc, #356]	; (8009f18 <HAL_RCC_ClockConfig+0x1bc>)
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	4a58      	ldr	r2, [pc, #352]	; (8009f18 <HAL_RCC_ClockConfig+0x1bc>)
 8009db6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009dba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 0308 	and.w	r3, r3, #8
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d005      	beq.n	8009dd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009dc8:	4b53      	ldr	r3, [pc, #332]	; (8009f18 <HAL_RCC_ClockConfig+0x1bc>)
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	4a52      	ldr	r2, [pc, #328]	; (8009f18 <HAL_RCC_ClockConfig+0x1bc>)
 8009dce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009dd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009dd4:	4b50      	ldr	r3, [pc, #320]	; (8009f18 <HAL_RCC_ClockConfig+0x1bc>)
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	494d      	ldr	r1, [pc, #308]	; (8009f18 <HAL_RCC_ClockConfig+0x1bc>)
 8009de2:	4313      	orrs	r3, r2
 8009de4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f003 0301 	and.w	r3, r3, #1
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d044      	beq.n	8009e7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d107      	bne.n	8009e0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009dfa:	4b47      	ldr	r3, [pc, #284]	; (8009f18 <HAL_RCC_ClockConfig+0x1bc>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d119      	bne.n	8009e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	e07f      	b.n	8009f0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d003      	beq.n	8009e1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009e16:	2b03      	cmp	r3, #3
 8009e18:	d107      	bne.n	8009e2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e1a:	4b3f      	ldr	r3, [pc, #252]	; (8009f18 <HAL_RCC_ClockConfig+0x1bc>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d109      	bne.n	8009e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	e06f      	b.n	8009f0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e2a:	4b3b      	ldr	r3, [pc, #236]	; (8009f18 <HAL_RCC_ClockConfig+0x1bc>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 0302 	and.w	r3, r3, #2
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d101      	bne.n	8009e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	e067      	b.n	8009f0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009e3a:	4b37      	ldr	r3, [pc, #220]	; (8009f18 <HAL_RCC_ClockConfig+0x1bc>)
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	f023 0203 	bic.w	r2, r3, #3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	4934      	ldr	r1, [pc, #208]	; (8009f18 <HAL_RCC_ClockConfig+0x1bc>)
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009e4c:	f7fa fe04 	bl	8004a58 <HAL_GetTick>
 8009e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e52:	e00a      	b.n	8009e6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e54:	f7fa fe00 	bl	8004a58 <HAL_GetTick>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d901      	bls.n	8009e6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009e66:	2303      	movs	r3, #3
 8009e68:	e04f      	b.n	8009f0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e6a:	4b2b      	ldr	r3, [pc, #172]	; (8009f18 <HAL_RCC_ClockConfig+0x1bc>)
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	f003 020c 	and.w	r2, r3, #12
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d1eb      	bne.n	8009e54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009e7c:	4b25      	ldr	r3, [pc, #148]	; (8009f14 <HAL_RCC_ClockConfig+0x1b8>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f003 030f 	and.w	r3, r3, #15
 8009e84:	683a      	ldr	r2, [r7, #0]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d20c      	bcs.n	8009ea4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e8a:	4b22      	ldr	r3, [pc, #136]	; (8009f14 <HAL_RCC_ClockConfig+0x1b8>)
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	b2d2      	uxtb	r2, r2
 8009e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e92:	4b20      	ldr	r3, [pc, #128]	; (8009f14 <HAL_RCC_ClockConfig+0x1b8>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f003 030f 	and.w	r3, r3, #15
 8009e9a:	683a      	ldr	r2, [r7, #0]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d001      	beq.n	8009ea4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e032      	b.n	8009f0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 0304 	and.w	r3, r3, #4
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d008      	beq.n	8009ec2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009eb0:	4b19      	ldr	r3, [pc, #100]	; (8009f18 <HAL_RCC_ClockConfig+0x1bc>)
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	68db      	ldr	r3, [r3, #12]
 8009ebc:	4916      	ldr	r1, [pc, #88]	; (8009f18 <HAL_RCC_ClockConfig+0x1bc>)
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f003 0308 	and.w	r3, r3, #8
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d009      	beq.n	8009ee2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009ece:	4b12      	ldr	r3, [pc, #72]	; (8009f18 <HAL_RCC_ClockConfig+0x1bc>)
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	00db      	lsls	r3, r3, #3
 8009edc:	490e      	ldr	r1, [pc, #56]	; (8009f18 <HAL_RCC_ClockConfig+0x1bc>)
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009ee2:	f000 f821 	bl	8009f28 <HAL_RCC_GetSysClockFreq>
 8009ee6:	4601      	mov	r1, r0
 8009ee8:	4b0b      	ldr	r3, [pc, #44]	; (8009f18 <HAL_RCC_ClockConfig+0x1bc>)
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	091b      	lsrs	r3, r3, #4
 8009eee:	f003 030f 	and.w	r3, r3, #15
 8009ef2:	4a0a      	ldr	r2, [pc, #40]	; (8009f1c <HAL_RCC_ClockConfig+0x1c0>)
 8009ef4:	5cd3      	ldrb	r3, [r2, r3]
 8009ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8009efa:	4a09      	ldr	r2, [pc, #36]	; (8009f20 <HAL_RCC_ClockConfig+0x1c4>)
 8009efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009efe:	4b09      	ldr	r3, [pc, #36]	; (8009f24 <HAL_RCC_ClockConfig+0x1c8>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7f7 fc76 	bl	80017f4 <HAL_InitTick>

  return HAL_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	40023c00 	.word	0x40023c00
 8009f18:	40023800 	.word	0x40023800
 8009f1c:	0800fec0 	.word	0x0800fec0
 8009f20:	10000000 	.word	0x10000000
 8009f24:	10000004 	.word	0x10000004

08009f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	607b      	str	r3, [r7, #4]
 8009f32:	2300      	movs	r3, #0
 8009f34:	60fb      	str	r3, [r7, #12]
 8009f36:	2300      	movs	r3, #0
 8009f38:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f3e:	4b63      	ldr	r3, [pc, #396]	; (800a0cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	f003 030c 	and.w	r3, r3, #12
 8009f46:	2b04      	cmp	r3, #4
 8009f48:	d007      	beq.n	8009f5a <HAL_RCC_GetSysClockFreq+0x32>
 8009f4a:	2b08      	cmp	r3, #8
 8009f4c:	d008      	beq.n	8009f60 <HAL_RCC_GetSysClockFreq+0x38>
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f040 80b4 	bne.w	800a0bc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009f54:	4b5e      	ldr	r3, [pc, #376]	; (800a0d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009f56:	60bb      	str	r3, [r7, #8]
       break;
 8009f58:	e0b3      	b.n	800a0c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009f5a:	4b5e      	ldr	r3, [pc, #376]	; (800a0d4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8009f5c:	60bb      	str	r3, [r7, #8]
      break;
 8009f5e:	e0b0      	b.n	800a0c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009f60:	4b5a      	ldr	r3, [pc, #360]	; (800a0cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009f6a:	4b58      	ldr	r3, [pc, #352]	; (800a0cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d04a      	beq.n	800a00c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f76:	4b55      	ldr	r3, [pc, #340]	; (800a0cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	099b      	lsrs	r3, r3, #6
 8009f7c:	f04f 0400 	mov.w	r4, #0
 8009f80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009f84:	f04f 0200 	mov.w	r2, #0
 8009f88:	ea03 0501 	and.w	r5, r3, r1
 8009f8c:	ea04 0602 	and.w	r6, r4, r2
 8009f90:	4629      	mov	r1, r5
 8009f92:	4632      	mov	r2, r6
 8009f94:	f04f 0300 	mov.w	r3, #0
 8009f98:	f04f 0400 	mov.w	r4, #0
 8009f9c:	0154      	lsls	r4, r2, #5
 8009f9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009fa2:	014b      	lsls	r3, r1, #5
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	4622      	mov	r2, r4
 8009fa8:	1b49      	subs	r1, r1, r5
 8009faa:	eb62 0206 	sbc.w	r2, r2, r6
 8009fae:	f04f 0300 	mov.w	r3, #0
 8009fb2:	f04f 0400 	mov.w	r4, #0
 8009fb6:	0194      	lsls	r4, r2, #6
 8009fb8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009fbc:	018b      	lsls	r3, r1, #6
 8009fbe:	1a5b      	subs	r3, r3, r1
 8009fc0:	eb64 0402 	sbc.w	r4, r4, r2
 8009fc4:	f04f 0100 	mov.w	r1, #0
 8009fc8:	f04f 0200 	mov.w	r2, #0
 8009fcc:	00e2      	lsls	r2, r4, #3
 8009fce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009fd2:	00d9      	lsls	r1, r3, #3
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	4614      	mov	r4, r2
 8009fd8:	195b      	adds	r3, r3, r5
 8009fda:	eb44 0406 	adc.w	r4, r4, r6
 8009fde:	f04f 0100 	mov.w	r1, #0
 8009fe2:	f04f 0200 	mov.w	r2, #0
 8009fe6:	0262      	lsls	r2, r4, #9
 8009fe8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009fec:	0259      	lsls	r1, r3, #9
 8009fee:	460b      	mov	r3, r1
 8009ff0:	4614      	mov	r4, r2
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	4621      	mov	r1, r4
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f04f 0400 	mov.w	r4, #0
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	4623      	mov	r3, r4
 800a000:	f7f6 f8ee 	bl	80001e0 <__aeabi_uldivmod>
 800a004:	4603      	mov	r3, r0
 800a006:	460c      	mov	r4, r1
 800a008:	60fb      	str	r3, [r7, #12]
 800a00a:	e049      	b.n	800a0a0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a00c:	4b2f      	ldr	r3, [pc, #188]	; (800a0cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	099b      	lsrs	r3, r3, #6
 800a012:	f04f 0400 	mov.w	r4, #0
 800a016:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a01a:	f04f 0200 	mov.w	r2, #0
 800a01e:	ea03 0501 	and.w	r5, r3, r1
 800a022:	ea04 0602 	and.w	r6, r4, r2
 800a026:	4629      	mov	r1, r5
 800a028:	4632      	mov	r2, r6
 800a02a:	f04f 0300 	mov.w	r3, #0
 800a02e:	f04f 0400 	mov.w	r4, #0
 800a032:	0154      	lsls	r4, r2, #5
 800a034:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a038:	014b      	lsls	r3, r1, #5
 800a03a:	4619      	mov	r1, r3
 800a03c:	4622      	mov	r2, r4
 800a03e:	1b49      	subs	r1, r1, r5
 800a040:	eb62 0206 	sbc.w	r2, r2, r6
 800a044:	f04f 0300 	mov.w	r3, #0
 800a048:	f04f 0400 	mov.w	r4, #0
 800a04c:	0194      	lsls	r4, r2, #6
 800a04e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a052:	018b      	lsls	r3, r1, #6
 800a054:	1a5b      	subs	r3, r3, r1
 800a056:	eb64 0402 	sbc.w	r4, r4, r2
 800a05a:	f04f 0100 	mov.w	r1, #0
 800a05e:	f04f 0200 	mov.w	r2, #0
 800a062:	00e2      	lsls	r2, r4, #3
 800a064:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a068:	00d9      	lsls	r1, r3, #3
 800a06a:	460b      	mov	r3, r1
 800a06c:	4614      	mov	r4, r2
 800a06e:	195b      	adds	r3, r3, r5
 800a070:	eb44 0406 	adc.w	r4, r4, r6
 800a074:	f04f 0100 	mov.w	r1, #0
 800a078:	f04f 0200 	mov.w	r2, #0
 800a07c:	02a2      	lsls	r2, r4, #10
 800a07e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a082:	0299      	lsls	r1, r3, #10
 800a084:	460b      	mov	r3, r1
 800a086:	4614      	mov	r4, r2
 800a088:	4618      	mov	r0, r3
 800a08a:	4621      	mov	r1, r4
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f04f 0400 	mov.w	r4, #0
 800a092:	461a      	mov	r2, r3
 800a094:	4623      	mov	r3, r4
 800a096:	f7f6 f8a3 	bl	80001e0 <__aeabi_uldivmod>
 800a09a:	4603      	mov	r3, r0
 800a09c:	460c      	mov	r4, r1
 800a09e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a0a0:	4b0a      	ldr	r3, [pc, #40]	; (800a0cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	0c1b      	lsrs	r3, r3, #16
 800a0a6:	f003 0303 	and.w	r3, r3, #3
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	005b      	lsls	r3, r3, #1
 800a0ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0b8:	60bb      	str	r3, [r7, #8]
      break;
 800a0ba:	e002      	b.n	800a0c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a0bc:	4b04      	ldr	r3, [pc, #16]	; (800a0d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a0be:	60bb      	str	r3, [r7, #8]
      break;
 800a0c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0cc:	40023800 	.word	0x40023800
 800a0d0:	00f42400 	.word	0x00f42400
 800a0d4:	007a1200 	.word	0x007a1200

0800a0d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a0dc:	4b03      	ldr	r3, [pc, #12]	; (800a0ec <HAL_RCC_GetHCLKFreq+0x14>)
 800a0de:	681b      	ldr	r3, [r3, #0]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	10000000 	.word	0x10000000

0800a0f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a0f4:	f7ff fff0 	bl	800a0d8 <HAL_RCC_GetHCLKFreq>
 800a0f8:	4601      	mov	r1, r0
 800a0fa:	4b05      	ldr	r3, [pc, #20]	; (800a110 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	0a9b      	lsrs	r3, r3, #10
 800a100:	f003 0307 	and.w	r3, r3, #7
 800a104:	4a03      	ldr	r2, [pc, #12]	; (800a114 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a106:	5cd3      	ldrb	r3, [r2, r3]
 800a108:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	40023800 	.word	0x40023800
 800a114:	0800fed0 	.word	0x0800fed0

0800a118 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	220f      	movs	r2, #15
 800a126:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a128:	4b12      	ldr	r3, [pc, #72]	; (800a174 <HAL_RCC_GetClockConfig+0x5c>)
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	f003 0203 	and.w	r2, r3, #3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a134:	4b0f      	ldr	r3, [pc, #60]	; (800a174 <HAL_RCC_GetClockConfig+0x5c>)
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a140:	4b0c      	ldr	r3, [pc, #48]	; (800a174 <HAL_RCC_GetClockConfig+0x5c>)
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a14c:	4b09      	ldr	r3, [pc, #36]	; (800a174 <HAL_RCC_GetClockConfig+0x5c>)
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	08db      	lsrs	r3, r3, #3
 800a152:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a15a:	4b07      	ldr	r3, [pc, #28]	; (800a178 <HAL_RCC_GetClockConfig+0x60>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f003 020f 	and.w	r2, r3, #15
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	601a      	str	r2, [r3, #0]
}
 800a166:	bf00      	nop
 800a168:	370c      	adds	r7, #12
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	40023800 	.word	0x40023800
 800a178:	40023c00 	.word	0x40023c00

0800a17c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e01d      	b.n	800a1ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b00      	cmp	r3, #0
 800a198:	d106      	bne.n	800a1a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7f7 fb04 	bl	80017b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2202      	movs	r2, #2
 800a1ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	4610      	mov	r0, r2
 800a1bc:	f000 f982 	bl	800a4c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a1d2:	b480      	push	{r7}
 800a1d4:	b085      	sub	sp, #20
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2202      	movs	r2, #2
 800a1de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	f003 0307 	and.w	r3, r3, #7
 800a1ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2b06      	cmp	r3, #6
 800a1f2:	d007      	beq.n	800a204 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f042 0201 	orr.w	r2, r2, #1
 800a202:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3714      	adds	r7, #20
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a21a:	b480      	push	{r7}
 800a21c:	b085      	sub	sp, #20
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	68da      	ldr	r2, [r3, #12]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f042 0201 	orr.w	r2, r2, #1
 800a230:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	f003 0307 	and.w	r3, r3, #7
 800a23c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2b06      	cmp	r3, #6
 800a242:	d007      	beq.n	800a254 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f042 0201 	orr.w	r2, r2, #1
 800a252:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr

0800a262 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b082      	sub	sp, #8
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	f003 0302 	and.w	r3, r3, #2
 800a274:	2b02      	cmp	r3, #2
 800a276:	d122      	bne.n	800a2be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	f003 0302 	and.w	r3, r3, #2
 800a282:	2b02      	cmp	r3, #2
 800a284:	d11b      	bne.n	800a2be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f06f 0202 	mvn.w	r2, #2
 800a28e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	699b      	ldr	r3, [r3, #24]
 800a29c:	f003 0303 	and.w	r3, r3, #3
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d003      	beq.n	800a2ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 f8ee 	bl	800a486 <HAL_TIM_IC_CaptureCallback>
 800a2aa:	e005      	b.n	800a2b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f8e0 	bl	800a472 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f8f1 	bl	800a49a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	f003 0304 	and.w	r3, r3, #4
 800a2c8:	2b04      	cmp	r3, #4
 800a2ca:	d122      	bne.n	800a312 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	f003 0304 	and.w	r3, r3, #4
 800a2d6:	2b04      	cmp	r3, #4
 800a2d8:	d11b      	bne.n	800a312 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f06f 0204 	mvn.w	r2, #4
 800a2e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2202      	movs	r2, #2
 800a2e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d003      	beq.n	800a300 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f8c4 	bl	800a486 <HAL_TIM_IC_CaptureCallback>
 800a2fe:	e005      	b.n	800a30c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f8b6 	bl	800a472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f8c7 	bl	800a49a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	f003 0308 	and.w	r3, r3, #8
 800a31c:	2b08      	cmp	r3, #8
 800a31e:	d122      	bne.n	800a366 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	f003 0308 	and.w	r3, r3, #8
 800a32a:	2b08      	cmp	r3, #8
 800a32c:	d11b      	bne.n	800a366 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f06f 0208 	mvn.w	r2, #8
 800a336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2204      	movs	r2, #4
 800a33c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	69db      	ldr	r3, [r3, #28]
 800a344:	f003 0303 	and.w	r3, r3, #3
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d003      	beq.n	800a354 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 f89a 	bl	800a486 <HAL_TIM_IC_CaptureCallback>
 800a352:	e005      	b.n	800a360 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 f88c 	bl	800a472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f89d 	bl	800a49a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	f003 0310 	and.w	r3, r3, #16
 800a370:	2b10      	cmp	r3, #16
 800a372:	d122      	bne.n	800a3ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	f003 0310 	and.w	r3, r3, #16
 800a37e:	2b10      	cmp	r3, #16
 800a380:	d11b      	bne.n	800a3ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f06f 0210 	mvn.w	r2, #16
 800a38a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2208      	movs	r2, #8
 800a390:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	69db      	ldr	r3, [r3, #28]
 800a398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d003      	beq.n	800a3a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f870 	bl	800a486 <HAL_TIM_IC_CaptureCallback>
 800a3a6:	e005      	b.n	800a3b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 f862 	bl	800a472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f873 	bl	800a49a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	f003 0301 	and.w	r3, r3, #1
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d10e      	bne.n	800a3e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	f003 0301 	and.w	r3, r3, #1
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d107      	bne.n	800a3e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f06f 0201 	mvn.w	r2, #1
 800a3de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f7f6 fd39 	bl	8000e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3f0:	2b80      	cmp	r3, #128	; 0x80
 800a3f2:	d10e      	bne.n	800a412 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3fe:	2b80      	cmp	r3, #128	; 0x80
 800a400:	d107      	bne.n	800a412 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a40a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f903 	bl	800a618 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a41c:	2b40      	cmp	r3, #64	; 0x40
 800a41e:	d10e      	bne.n	800a43e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a42a:	2b40      	cmp	r3, #64	; 0x40
 800a42c:	d107      	bne.n	800a43e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 f838 	bl	800a4ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	f003 0320 	and.w	r3, r3, #32
 800a448:	2b20      	cmp	r3, #32
 800a44a:	d10e      	bne.n	800a46a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	f003 0320 	and.w	r3, r3, #32
 800a456:	2b20      	cmp	r3, #32
 800a458:	d107      	bne.n	800a46a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f06f 0220 	mvn.w	r2, #32
 800a462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 f8cd 	bl	800a604 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a46a:	bf00      	nop
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a472:	b480      	push	{r7}
 800a474:	b083      	sub	sp, #12
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a47a:	bf00      	nop
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr

0800a486 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a486:	b480      	push	{r7}
 800a488:	b083      	sub	sp, #12
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a48e:	bf00      	nop
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b083      	sub	sp, #12
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4a2:	bf00      	nop
 800a4a4:	370c      	adds	r7, #12
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr

0800a4ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b083      	sub	sp, #12
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4b6:	bf00      	nop
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
	...

0800a4c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	4a40      	ldr	r2, [pc, #256]	; (800a5d8 <TIM_Base_SetConfig+0x114>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d013      	beq.n	800a504 <TIM_Base_SetConfig+0x40>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4e2:	d00f      	beq.n	800a504 <TIM_Base_SetConfig+0x40>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	4a3d      	ldr	r2, [pc, #244]	; (800a5dc <TIM_Base_SetConfig+0x118>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d00b      	beq.n	800a504 <TIM_Base_SetConfig+0x40>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4a3c      	ldr	r2, [pc, #240]	; (800a5e0 <TIM_Base_SetConfig+0x11c>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d007      	beq.n	800a504 <TIM_Base_SetConfig+0x40>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	4a3b      	ldr	r2, [pc, #236]	; (800a5e4 <TIM_Base_SetConfig+0x120>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d003      	beq.n	800a504 <TIM_Base_SetConfig+0x40>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4a3a      	ldr	r2, [pc, #232]	; (800a5e8 <TIM_Base_SetConfig+0x124>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d108      	bne.n	800a516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a50a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	4313      	orrs	r3, r2
 800a514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a2f      	ldr	r2, [pc, #188]	; (800a5d8 <TIM_Base_SetConfig+0x114>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d02b      	beq.n	800a576 <TIM_Base_SetConfig+0xb2>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a524:	d027      	beq.n	800a576 <TIM_Base_SetConfig+0xb2>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4a2c      	ldr	r2, [pc, #176]	; (800a5dc <TIM_Base_SetConfig+0x118>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d023      	beq.n	800a576 <TIM_Base_SetConfig+0xb2>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a2b      	ldr	r2, [pc, #172]	; (800a5e0 <TIM_Base_SetConfig+0x11c>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d01f      	beq.n	800a576 <TIM_Base_SetConfig+0xb2>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a2a      	ldr	r2, [pc, #168]	; (800a5e4 <TIM_Base_SetConfig+0x120>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d01b      	beq.n	800a576 <TIM_Base_SetConfig+0xb2>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a29      	ldr	r2, [pc, #164]	; (800a5e8 <TIM_Base_SetConfig+0x124>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d017      	beq.n	800a576 <TIM_Base_SetConfig+0xb2>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a28      	ldr	r2, [pc, #160]	; (800a5ec <TIM_Base_SetConfig+0x128>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d013      	beq.n	800a576 <TIM_Base_SetConfig+0xb2>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a27      	ldr	r2, [pc, #156]	; (800a5f0 <TIM_Base_SetConfig+0x12c>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d00f      	beq.n	800a576 <TIM_Base_SetConfig+0xb2>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a26      	ldr	r2, [pc, #152]	; (800a5f4 <TIM_Base_SetConfig+0x130>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d00b      	beq.n	800a576 <TIM_Base_SetConfig+0xb2>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a25      	ldr	r2, [pc, #148]	; (800a5f8 <TIM_Base_SetConfig+0x134>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d007      	beq.n	800a576 <TIM_Base_SetConfig+0xb2>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a24      	ldr	r2, [pc, #144]	; (800a5fc <TIM_Base_SetConfig+0x138>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d003      	beq.n	800a576 <TIM_Base_SetConfig+0xb2>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a23      	ldr	r2, [pc, #140]	; (800a600 <TIM_Base_SetConfig+0x13c>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d108      	bne.n	800a588 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a57c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	4313      	orrs	r3, r2
 800a586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	695b      	ldr	r3, [r3, #20]
 800a592:	4313      	orrs	r3, r2
 800a594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	689a      	ldr	r2, [r3, #8]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a0a      	ldr	r2, [pc, #40]	; (800a5d8 <TIM_Base_SetConfig+0x114>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d003      	beq.n	800a5bc <TIM_Base_SetConfig+0xf8>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a0c      	ldr	r2, [pc, #48]	; (800a5e8 <TIM_Base_SetConfig+0x124>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d103      	bne.n	800a5c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	691a      	ldr	r2, [r3, #16]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	615a      	str	r2, [r3, #20]
}
 800a5ca:	bf00      	nop
 800a5cc:	3714      	adds	r7, #20
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	40010000 	.word	0x40010000
 800a5dc:	40000400 	.word	0x40000400
 800a5e0:	40000800 	.word	0x40000800
 800a5e4:	40000c00 	.word	0x40000c00
 800a5e8:	40010400 	.word	0x40010400
 800a5ec:	40014000 	.word	0x40014000
 800a5f0:	40014400 	.word	0x40014400
 800a5f4:	40014800 	.word	0x40014800
 800a5f8:	40001800 	.word	0x40001800
 800a5fc:	40001c00 	.word	0x40001c00
 800a600:	40002000 	.word	0x40002000

0800a604 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a60c:	bf00      	nop
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a62c:	b084      	sub	sp, #16
 800a62e:	b580      	push	{r7, lr}
 800a630:	b084      	sub	sp, #16
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	f107 001c 	add.w	r0, r7, #28
 800a63a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a640:	2b01      	cmp	r3, #1
 800a642:	d122      	bne.n	800a68a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a648:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a66c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d105      	bne.n	800a67e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f001 fac6 	bl	800bc10 <USB_CoreReset>
 800a684:	4603      	mov	r3, r0
 800a686:	73fb      	strb	r3, [r7, #15]
 800a688:	e01a      	b.n	800a6c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f001 faba 	bl	800bc10 <USB_CoreReset>
 800a69c:	4603      	mov	r3, r0
 800a69e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a6a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d106      	bne.n	800a6b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	639a      	str	r2, [r3, #56]	; 0x38
 800a6b2:	e005      	b.n	800a6c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d10b      	bne.n	800a6de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	f043 0206 	orr.w	r2, r3, #6
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	689b      	ldr	r3, [r3, #8]
 800a6d6:	f043 0220 	orr.w	r2, r3, #32
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a6de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3710      	adds	r7, #16
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6ea:	b004      	add	sp, #16
 800a6ec:	4770      	bx	lr
	...

0800a6f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b087      	sub	sp, #28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a6fe:	79fb      	ldrb	r3, [r7, #7]
 800a700:	2b02      	cmp	r3, #2
 800a702:	d165      	bne.n	800a7d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	4a41      	ldr	r2, [pc, #260]	; (800a80c <USB_SetTurnaroundTime+0x11c>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d906      	bls.n	800a71a <USB_SetTurnaroundTime+0x2a>
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	4a40      	ldr	r2, [pc, #256]	; (800a810 <USB_SetTurnaroundTime+0x120>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d802      	bhi.n	800a71a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a714:	230f      	movs	r3, #15
 800a716:	617b      	str	r3, [r7, #20]
 800a718:	e062      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	4a3c      	ldr	r2, [pc, #240]	; (800a810 <USB_SetTurnaroundTime+0x120>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d906      	bls.n	800a730 <USB_SetTurnaroundTime+0x40>
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	4a3b      	ldr	r2, [pc, #236]	; (800a814 <USB_SetTurnaroundTime+0x124>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d802      	bhi.n	800a730 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a72a:	230e      	movs	r3, #14
 800a72c:	617b      	str	r3, [r7, #20]
 800a72e:	e057      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	4a38      	ldr	r2, [pc, #224]	; (800a814 <USB_SetTurnaroundTime+0x124>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d906      	bls.n	800a746 <USB_SetTurnaroundTime+0x56>
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	4a37      	ldr	r2, [pc, #220]	; (800a818 <USB_SetTurnaroundTime+0x128>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d802      	bhi.n	800a746 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a740:	230d      	movs	r3, #13
 800a742:	617b      	str	r3, [r7, #20]
 800a744:	e04c      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	4a33      	ldr	r2, [pc, #204]	; (800a818 <USB_SetTurnaroundTime+0x128>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d906      	bls.n	800a75c <USB_SetTurnaroundTime+0x6c>
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	4a32      	ldr	r2, [pc, #200]	; (800a81c <USB_SetTurnaroundTime+0x12c>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d802      	bhi.n	800a75c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a756:	230c      	movs	r3, #12
 800a758:	617b      	str	r3, [r7, #20]
 800a75a:	e041      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	4a2f      	ldr	r2, [pc, #188]	; (800a81c <USB_SetTurnaroundTime+0x12c>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d906      	bls.n	800a772 <USB_SetTurnaroundTime+0x82>
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	4a2e      	ldr	r2, [pc, #184]	; (800a820 <USB_SetTurnaroundTime+0x130>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d802      	bhi.n	800a772 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a76c:	230b      	movs	r3, #11
 800a76e:	617b      	str	r3, [r7, #20]
 800a770:	e036      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	4a2a      	ldr	r2, [pc, #168]	; (800a820 <USB_SetTurnaroundTime+0x130>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d906      	bls.n	800a788 <USB_SetTurnaroundTime+0x98>
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	4a29      	ldr	r2, [pc, #164]	; (800a824 <USB_SetTurnaroundTime+0x134>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d802      	bhi.n	800a788 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a782:	230a      	movs	r3, #10
 800a784:	617b      	str	r3, [r7, #20]
 800a786:	e02b      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	4a26      	ldr	r2, [pc, #152]	; (800a824 <USB_SetTurnaroundTime+0x134>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d906      	bls.n	800a79e <USB_SetTurnaroundTime+0xae>
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	4a25      	ldr	r2, [pc, #148]	; (800a828 <USB_SetTurnaroundTime+0x138>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d802      	bhi.n	800a79e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a798:	2309      	movs	r3, #9
 800a79a:	617b      	str	r3, [r7, #20]
 800a79c:	e020      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	4a21      	ldr	r2, [pc, #132]	; (800a828 <USB_SetTurnaroundTime+0x138>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d906      	bls.n	800a7b4 <USB_SetTurnaroundTime+0xc4>
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	4a20      	ldr	r2, [pc, #128]	; (800a82c <USB_SetTurnaroundTime+0x13c>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d802      	bhi.n	800a7b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a7ae:	2308      	movs	r3, #8
 800a7b0:	617b      	str	r3, [r7, #20]
 800a7b2:	e015      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	4a1d      	ldr	r2, [pc, #116]	; (800a82c <USB_SetTurnaroundTime+0x13c>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d906      	bls.n	800a7ca <USB_SetTurnaroundTime+0xda>
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	4a1c      	ldr	r2, [pc, #112]	; (800a830 <USB_SetTurnaroundTime+0x140>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d802      	bhi.n	800a7ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a7c4:	2307      	movs	r3, #7
 800a7c6:	617b      	str	r3, [r7, #20]
 800a7c8:	e00a      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a7ca:	2306      	movs	r3, #6
 800a7cc:	617b      	str	r3, [r7, #20]
 800a7ce:	e007      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a7d0:	79fb      	ldrb	r3, [r7, #7]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d102      	bne.n	800a7dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a7d6:	2309      	movs	r3, #9
 800a7d8:	617b      	str	r3, [r7, #20]
 800a7da:	e001      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a7dc:	2309      	movs	r3, #9
 800a7de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	68da      	ldr	r2, [r3, #12]
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	029b      	lsls	r3, r3, #10
 800a7f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a7f8:	431a      	orrs	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	371c      	adds	r7, #28
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr
 800a80c:	00d8acbf 	.word	0x00d8acbf
 800a810:	00e4e1bf 	.word	0x00e4e1bf
 800a814:	00f423ff 	.word	0x00f423ff
 800a818:	0106737f 	.word	0x0106737f
 800a81c:	011a499f 	.word	0x011a499f
 800a820:	01312cff 	.word	0x01312cff
 800a824:	014ca43f 	.word	0x014ca43f
 800a828:	016e35ff 	.word	0x016e35ff
 800a82c:	01a6ab1f 	.word	0x01a6ab1f
 800a830:	01e847ff 	.word	0x01e847ff

0800a834 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	f043 0201 	orr.w	r2, r3, #1
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	370c      	adds	r7, #12
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a856:	b480      	push	{r7}
 800a858:	b083      	sub	sp, #12
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f023 0201 	bic.w	r2, r3, #1
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	460b      	mov	r3, r1
 800a882:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a890:	78fb      	ldrb	r3, [r7, #3]
 800a892:	2b01      	cmp	r3, #1
 800a894:	d106      	bne.n	800a8a4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	60da      	str	r2, [r3, #12]
 800a8a2:	e00b      	b.n	800a8bc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a8a4:	78fb      	ldrb	r3, [r7, #3]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d106      	bne.n	800a8b8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	60da      	str	r2, [r3, #12]
 800a8b6:	e001      	b.n	800a8bc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e003      	b.n	800a8c4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a8bc:	2032      	movs	r0, #50	; 0x32
 800a8be:	f7fa f8d7 	bl	8004a70 <HAL_Delay>

  return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3708      	adds	r7, #8
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8cc:	b084      	sub	sp, #16
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b086      	sub	sp, #24
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a8da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	613b      	str	r3, [r7, #16]
 800a8ea:	e009      	b.n	800a900 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	3340      	adds	r3, #64	; 0x40
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4413      	add	r3, r2
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	613b      	str	r3, [r7, #16]
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	2b0e      	cmp	r3, #14
 800a904:	d9f2      	bls.n	800a8ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d11c      	bne.n	800a946 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a91a:	f043 0302 	orr.w	r3, r3, #2
 800a91e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a924:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a930:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	639a      	str	r2, [r3, #56]	; 0x38
 800a944:	e00b      	b.n	800a95e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a956:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a964:	461a      	mov	r2, r3
 800a966:	2300      	movs	r3, #0
 800a968:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a970:	4619      	mov	r1, r3
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a978:	461a      	mov	r2, r3
 800a97a:	680b      	ldr	r3, [r1, #0]
 800a97c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a980:	2b01      	cmp	r3, #1
 800a982:	d10c      	bne.n	800a99e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a986:	2b00      	cmp	r3, #0
 800a988:	d104      	bne.n	800a994 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a98a:	2100      	movs	r1, #0
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f949 	bl	800ac24 <USB_SetDevSpeed>
 800a992:	e008      	b.n	800a9a6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a994:	2101      	movs	r1, #1
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 f944 	bl	800ac24 <USB_SetDevSpeed>
 800a99c:	e003      	b.n	800a9a6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a99e:	2103      	movs	r1, #3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 f93f 	bl	800ac24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a9a6:	2110      	movs	r1, #16
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 f8f3 	bl	800ab94 <USB_FlushTxFifo>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d001      	beq.n	800a9b8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 f911 	bl	800abe0 <USB_FlushRxFifo>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d001      	beq.n	800a9c8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9da:	461a      	mov	r2, r3
 800a9dc:	2300      	movs	r3, #0
 800a9de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	613b      	str	r3, [r7, #16]
 800a9f0:	e043      	b.n	800aa7a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	015a      	lsls	r2, r3, #5
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa08:	d118      	bne.n	800aa3c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10a      	bne.n	800aa26 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	015a      	lsls	r2, r3, #5
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	4413      	add	r3, r2
 800aa18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa22:	6013      	str	r3, [r2, #0]
 800aa24:	e013      	b.n	800aa4e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	015a      	lsls	r2, r3, #5
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa32:	461a      	mov	r2, r3
 800aa34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa38:	6013      	str	r3, [r2, #0]
 800aa3a:	e008      	b.n	800aa4e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	015a      	lsls	r2, r3, #5
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	4413      	add	r3, r2
 800aa44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa48:	461a      	mov	r2, r3
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	015a      	lsls	r2, r3, #5
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	4413      	add	r3, r2
 800aa56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	015a      	lsls	r2, r3, #5
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	4413      	add	r3, r2
 800aa68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	3301      	adds	r3, #1
 800aa78:	613b      	str	r3, [r7, #16]
 800aa7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7c:	693a      	ldr	r2, [r7, #16]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d3b7      	bcc.n	800a9f2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa82:	2300      	movs	r3, #0
 800aa84:	613b      	str	r3, [r7, #16]
 800aa86:	e043      	b.n	800ab10 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	015a      	lsls	r2, r3, #5
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	4413      	add	r3, r2
 800aa90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa9e:	d118      	bne.n	800aad2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d10a      	bne.n	800aabc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	015a      	lsls	r2, r3, #5
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	4413      	add	r3, r2
 800aaae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aab2:	461a      	mov	r2, r3
 800aab4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aab8:	6013      	str	r3, [r2, #0]
 800aaba:	e013      	b.n	800aae4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	015a      	lsls	r2, r3, #5
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	4413      	add	r3, r2
 800aac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aac8:	461a      	mov	r2, r3
 800aaca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aace:	6013      	str	r3, [r2, #0]
 800aad0:	e008      	b.n	800aae4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	015a      	lsls	r2, r3, #5
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	4413      	add	r3, r2
 800aada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aade:	461a      	mov	r2, r3
 800aae0:	2300      	movs	r3, #0
 800aae2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	015a      	lsls	r2, r3, #5
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	4413      	add	r3, r2
 800aaec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	015a      	lsls	r2, r3, #5
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	4413      	add	r3, r2
 800aafe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab02:	461a      	mov	r2, r3
 800ab04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	613b      	str	r3, [r7, #16]
 800ab10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d3b7      	bcc.n	800aa88 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab1e:	691b      	ldr	r3, [r3, #16]
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ab38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d105      	bne.n	800ab4c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	699b      	ldr	r3, [r3, #24]
 800ab44:	f043 0210 	orr.w	r2, r3, #16
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	699a      	ldr	r2, [r3, #24]
 800ab50:	4b0f      	ldr	r3, [pc, #60]	; (800ab90 <USB_DevInit+0x2c4>)
 800ab52:	4313      	orrs	r3, r2
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ab58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d005      	beq.n	800ab6a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	f043 0208 	orr.w	r2, r3, #8
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ab6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d107      	bne.n	800ab80 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	699b      	ldr	r3, [r3, #24]
 800ab74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab78:	f043 0304 	orr.w	r3, r3, #4
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ab80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3718      	adds	r7, #24
 800ab86:	46bd      	mov	sp, r7
 800ab88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab8c:	b004      	add	sp, #16
 800ab8e:	4770      	bx	lr
 800ab90:	803c3800 	.word	0x803c3800

0800ab94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b085      	sub	sp, #20
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	019b      	lsls	r3, r3, #6
 800aba6:	f043 0220 	orr.w	r2, r3, #32
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	3301      	adds	r3, #1
 800abb2:	60fb      	str	r3, [r7, #12]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	4a09      	ldr	r2, [pc, #36]	; (800abdc <USB_FlushTxFifo+0x48>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d901      	bls.n	800abc0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800abbc:	2303      	movs	r3, #3
 800abbe:	e006      	b.n	800abce <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	f003 0320 	and.w	r3, r3, #32
 800abc8:	2b20      	cmp	r3, #32
 800abca:	d0f0      	beq.n	800abae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3714      	adds	r7, #20
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	00030d40 	.word	0x00030d40

0800abe0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800abe8:	2300      	movs	r3, #0
 800abea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2210      	movs	r2, #16
 800abf0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	3301      	adds	r3, #1
 800abf6:	60fb      	str	r3, [r7, #12]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	4a09      	ldr	r2, [pc, #36]	; (800ac20 <USB_FlushRxFifo+0x40>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d901      	bls.n	800ac04 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ac00:	2303      	movs	r3, #3
 800ac02:	e006      	b.n	800ac12 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	691b      	ldr	r3, [r3, #16]
 800ac08:	f003 0310 	and.w	r3, r3, #16
 800ac0c:	2b10      	cmp	r3, #16
 800ac0e:	d0f0      	beq.n	800abf2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3714      	adds	r7, #20
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	00030d40 	.word	0x00030d40

0800ac24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b085      	sub	sp, #20
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	78fb      	ldrb	r3, [r7, #3]
 800ac3e:	68f9      	ldr	r1, [r7, #12]
 800ac40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac44:	4313      	orrs	r3, r2
 800ac46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3714      	adds	r7, #20
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ac56:	b480      	push	{r7}
 800ac58:	b087      	sub	sp, #28
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	f003 0306 	and.w	r3, r3, #6
 800ac6e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d102      	bne.n	800ac7c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ac76:	2300      	movs	r3, #0
 800ac78:	75fb      	strb	r3, [r7, #23]
 800ac7a:	e00a      	b.n	800ac92 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2b02      	cmp	r3, #2
 800ac80:	d002      	beq.n	800ac88 <USB_GetDevSpeed+0x32>
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2b06      	cmp	r3, #6
 800ac86:	d102      	bne.n	800ac8e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ac88:	2302      	movs	r3, #2
 800ac8a:	75fb      	strb	r3, [r7, #23]
 800ac8c:	e001      	b.n	800ac92 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ac8e:	230f      	movs	r3, #15
 800ac90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ac92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	371c      	adds	r7, #28
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	785b      	ldrb	r3, [r3, #1]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d13a      	bne.n	800ad32 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acc2:	69da      	ldr	r2, [r3, #28]
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	f003 030f 	and.w	r3, r3, #15
 800accc:	2101      	movs	r1, #1
 800acce:	fa01 f303 	lsl.w	r3, r1, r3
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	68f9      	ldr	r1, [r7, #12]
 800acd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acda:	4313      	orrs	r3, r2
 800acdc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	015a      	lsls	r2, r3, #5
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	4413      	add	r3, r2
 800ace6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d155      	bne.n	800ada0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	015a      	lsls	r2, r3, #5
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	4413      	add	r3, r2
 800acfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	78db      	ldrb	r3, [r3, #3]
 800ad0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	059b      	lsls	r3, r3, #22
 800ad16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	68ba      	ldr	r2, [r7, #8]
 800ad1c:	0151      	lsls	r1, r2, #5
 800ad1e:	68fa      	ldr	r2, [r7, #12]
 800ad20:	440a      	add	r2, r1
 800ad22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad2e:	6013      	str	r3, [r2, #0]
 800ad30:	e036      	b.n	800ada0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad38:	69da      	ldr	r2, [r3, #28]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	f003 030f 	and.w	r3, r3, #15
 800ad42:	2101      	movs	r1, #1
 800ad44:	fa01 f303 	lsl.w	r3, r1, r3
 800ad48:	041b      	lsls	r3, r3, #16
 800ad4a:	68f9      	ldr	r1, [r7, #12]
 800ad4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad50:	4313      	orrs	r3, r2
 800ad52:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	015a      	lsls	r2, r3, #5
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	4413      	add	r3, r2
 800ad5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d11a      	bne.n	800ada0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	015a      	lsls	r2, r3, #5
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	4413      	add	r3, r2
 800ad72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	78db      	ldrb	r3, [r3, #3]
 800ad84:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad86:	430b      	orrs	r3, r1
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	0151      	lsls	r1, r2, #5
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	440a      	add	r2, r1
 800ad92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad9e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ada0:	2300      	movs	r3, #0
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr
	...

0800adb0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b085      	sub	sp, #20
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	785b      	ldrb	r3, [r3, #1]
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d161      	bne.n	800ae90 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	015a      	lsls	r2, r3, #5
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	4413      	add	r3, r2
 800add4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800adde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ade2:	d11f      	bne.n	800ae24 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	015a      	lsls	r2, r3, #5
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	4413      	add	r3, r2
 800adec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	0151      	lsls	r1, r2, #5
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	440a      	add	r2, r1
 800adfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae02:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	015a      	lsls	r2, r3, #5
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	4413      	add	r3, r2
 800ae0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	68ba      	ldr	r2, [r7, #8]
 800ae14:	0151      	lsls	r1, r2, #5
 800ae16:	68fa      	ldr	r2, [r7, #12]
 800ae18:	440a      	add	r2, r1
 800ae1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	f003 030f 	and.w	r3, r3, #15
 800ae34:	2101      	movs	r1, #1
 800ae36:	fa01 f303 	lsl.w	r3, r1, r3
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	43db      	mvns	r3, r3
 800ae3e:	68f9      	ldr	r1, [r7, #12]
 800ae40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae44:	4013      	ands	r3, r2
 800ae46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae4e:	69da      	ldr	r2, [r3, #28]
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	f003 030f 	and.w	r3, r3, #15
 800ae58:	2101      	movs	r1, #1
 800ae5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	43db      	mvns	r3, r3
 800ae62:	68f9      	ldr	r1, [r7, #12]
 800ae64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae68:	4013      	ands	r3, r2
 800ae6a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	015a      	lsls	r2, r3, #5
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	4413      	add	r3, r2
 800ae74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	0159      	lsls	r1, r3, #5
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	440b      	add	r3, r1
 800ae82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae86:	4619      	mov	r1, r3
 800ae88:	4b35      	ldr	r3, [pc, #212]	; (800af60 <USB_DeactivateEndpoint+0x1b0>)
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	600b      	str	r3, [r1, #0]
 800ae8e:	e060      	b.n	800af52 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	015a      	lsls	r2, r3, #5
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	4413      	add	r3, r2
 800ae98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aea2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aea6:	d11f      	bne.n	800aee8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	015a      	lsls	r2, r3, #5
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	4413      	add	r3, r2
 800aeb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	68ba      	ldr	r2, [r7, #8]
 800aeb8:	0151      	lsls	r1, r2, #5
 800aeba:	68fa      	ldr	r2, [r7, #12]
 800aebc:	440a      	add	r2, r1
 800aebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aec2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aec6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	015a      	lsls	r2, r3, #5
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	4413      	add	r3, r2
 800aed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68ba      	ldr	r2, [r7, #8]
 800aed8:	0151      	lsls	r1, r2, #5
 800aeda:	68fa      	ldr	r2, [r7, #12]
 800aedc:	440a      	add	r2, r1
 800aede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aee2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aee6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	f003 030f 	and.w	r3, r3, #15
 800aef8:	2101      	movs	r1, #1
 800aefa:	fa01 f303 	lsl.w	r3, r1, r3
 800aefe:	041b      	lsls	r3, r3, #16
 800af00:	43db      	mvns	r3, r3
 800af02:	68f9      	ldr	r1, [r7, #12]
 800af04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af08:	4013      	ands	r3, r2
 800af0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af12:	69da      	ldr	r2, [r3, #28]
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	f003 030f 	and.w	r3, r3, #15
 800af1c:	2101      	movs	r1, #1
 800af1e:	fa01 f303 	lsl.w	r3, r1, r3
 800af22:	041b      	lsls	r3, r3, #16
 800af24:	43db      	mvns	r3, r3
 800af26:	68f9      	ldr	r1, [r7, #12]
 800af28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af2c:	4013      	ands	r3, r2
 800af2e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	015a      	lsls	r2, r3, #5
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	4413      	add	r3, r2
 800af38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	0159      	lsls	r1, r3, #5
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	440b      	add	r3, r1
 800af46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af4a:	4619      	mov	r1, r3
 800af4c:	4b05      	ldr	r3, [pc, #20]	; (800af64 <USB_DeactivateEndpoint+0x1b4>)
 800af4e:	4013      	ands	r3, r2
 800af50:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800af52:	2300      	movs	r3, #0
}
 800af54:	4618      	mov	r0, r3
 800af56:	3714      	adds	r7, #20
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr
 800af60:	ec337800 	.word	0xec337800
 800af64:	eff37800 	.word	0xeff37800

0800af68 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b08a      	sub	sp, #40	; 0x28
 800af6c:	af02      	add	r7, sp, #8
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	4613      	mov	r3, r2
 800af74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	785b      	ldrb	r3, [r3, #1]
 800af84:	2b01      	cmp	r3, #1
 800af86:	f040 815c 	bne.w	800b242 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	695b      	ldr	r3, [r3, #20]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d132      	bne.n	800aff8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	015a      	lsls	r2, r3, #5
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	4413      	add	r3, r2
 800af9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	69ba      	ldr	r2, [r7, #24]
 800afa2:	0151      	lsls	r1, r2, #5
 800afa4:	69fa      	ldr	r2, [r7, #28]
 800afa6:	440a      	add	r2, r1
 800afa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800afb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800afb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	015a      	lsls	r2, r3, #5
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	4413      	add	r3, r2
 800afbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	69ba      	ldr	r2, [r7, #24]
 800afc6:	0151      	lsls	r1, r2, #5
 800afc8:	69fa      	ldr	r2, [r7, #28]
 800afca:	440a      	add	r2, r1
 800afcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800afd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	015a      	lsls	r2, r3, #5
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	4413      	add	r3, r2
 800afde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	69ba      	ldr	r2, [r7, #24]
 800afe6:	0151      	lsls	r1, r2, #5
 800afe8:	69fa      	ldr	r2, [r7, #28]
 800afea:	440a      	add	r2, r1
 800afec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aff0:	0cdb      	lsrs	r3, r3, #19
 800aff2:	04db      	lsls	r3, r3, #19
 800aff4:	6113      	str	r3, [r2, #16]
 800aff6:	e074      	b.n	800b0e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	015a      	lsls	r2, r3, #5
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	4413      	add	r3, r2
 800b000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	69ba      	ldr	r2, [r7, #24]
 800b008:	0151      	lsls	r1, r2, #5
 800b00a:	69fa      	ldr	r2, [r7, #28]
 800b00c:	440a      	add	r2, r1
 800b00e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b012:	0cdb      	lsrs	r3, r3, #19
 800b014:	04db      	lsls	r3, r3, #19
 800b016:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	015a      	lsls	r2, r3, #5
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	4413      	add	r3, r2
 800b020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b024:	691b      	ldr	r3, [r3, #16]
 800b026:	69ba      	ldr	r2, [r7, #24]
 800b028:	0151      	lsls	r1, r2, #5
 800b02a:	69fa      	ldr	r2, [r7, #28]
 800b02c:	440a      	add	r2, r1
 800b02e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b032:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b036:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b03a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	015a      	lsls	r2, r3, #5
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	4413      	add	r3, r2
 800b044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b048:	691a      	ldr	r2, [r3, #16]
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	6959      	ldr	r1, [r3, #20]
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	440b      	add	r3, r1
 800b054:	1e59      	subs	r1, r3, #1
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	689b      	ldr	r3, [r3, #8]
 800b05a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b05e:	04d9      	lsls	r1, r3, #19
 800b060:	4b9d      	ldr	r3, [pc, #628]	; (800b2d8 <USB_EPStartXfer+0x370>)
 800b062:	400b      	ands	r3, r1
 800b064:	69b9      	ldr	r1, [r7, #24]
 800b066:	0148      	lsls	r0, r1, #5
 800b068:	69f9      	ldr	r1, [r7, #28]
 800b06a:	4401      	add	r1, r0
 800b06c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b070:	4313      	orrs	r3, r2
 800b072:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	015a      	lsls	r2, r3, #5
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	4413      	add	r3, r2
 800b07c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b080:	691a      	ldr	r2, [r3, #16]
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b08a:	69b9      	ldr	r1, [r7, #24]
 800b08c:	0148      	lsls	r0, r1, #5
 800b08e:	69f9      	ldr	r1, [r7, #28]
 800b090:	4401      	add	r1, r0
 800b092:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b096:	4313      	orrs	r3, r2
 800b098:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	78db      	ldrb	r3, [r3, #3]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d11f      	bne.n	800b0e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b0a2:	69bb      	ldr	r3, [r7, #24]
 800b0a4:	015a      	lsls	r2, r3, #5
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ae:	691b      	ldr	r3, [r3, #16]
 800b0b0:	69ba      	ldr	r2, [r7, #24]
 800b0b2:	0151      	lsls	r1, r2, #5
 800b0b4:	69fa      	ldr	r2, [r7, #28]
 800b0b6:	440a      	add	r2, r1
 800b0b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b0c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	015a      	lsls	r2, r3, #5
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ce:	691b      	ldr	r3, [r3, #16]
 800b0d0:	69ba      	ldr	r2, [r7, #24]
 800b0d2:	0151      	lsls	r1, r2, #5
 800b0d4:	69fa      	ldr	r2, [r7, #28]
 800b0d6:	440a      	add	r2, r1
 800b0d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b0e2:	79fb      	ldrb	r3, [r7, #7]
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d14b      	bne.n	800b180 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	691b      	ldr	r3, [r3, #16]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d009      	beq.n	800b104 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	015a      	lsls	r2, r3, #5
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	78db      	ldrb	r3, [r3, #3]
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d128      	bne.n	800b15e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d110      	bne.n	800b13e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	015a      	lsls	r2, r3, #5
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	4413      	add	r3, r2
 800b124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	69ba      	ldr	r2, [r7, #24]
 800b12c:	0151      	lsls	r1, r2, #5
 800b12e:	69fa      	ldr	r2, [r7, #28]
 800b130:	440a      	add	r2, r1
 800b132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b136:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b13a:	6013      	str	r3, [r2, #0]
 800b13c:	e00f      	b.n	800b15e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	015a      	lsls	r2, r3, #5
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	4413      	add	r3, r2
 800b146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	69ba      	ldr	r2, [r7, #24]
 800b14e:	0151      	lsls	r1, r2, #5
 800b150:	69fa      	ldr	r2, [r7, #28]
 800b152:	440a      	add	r2, r1
 800b154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b15c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	015a      	lsls	r2, r3, #5
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	4413      	add	r3, r2
 800b166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	69ba      	ldr	r2, [r7, #24]
 800b16e:	0151      	lsls	r1, r2, #5
 800b170:	69fa      	ldr	r2, [r7, #28]
 800b172:	440a      	add	r2, r1
 800b174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b178:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b17c:	6013      	str	r3, [r2, #0]
 800b17e:	e12f      	b.n	800b3e0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	015a      	lsls	r2, r3, #5
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	4413      	add	r3, r2
 800b188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	69ba      	ldr	r2, [r7, #24]
 800b190:	0151      	lsls	r1, r2, #5
 800b192:	69fa      	ldr	r2, [r7, #28]
 800b194:	440a      	add	r2, r1
 800b196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b19a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b19e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	78db      	ldrb	r3, [r3, #3]
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d015      	beq.n	800b1d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	695b      	ldr	r3, [r3, #20]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f000 8117 	beq.w	800b3e0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	f003 030f 	and.w	r3, r3, #15
 800b1c2:	2101      	movs	r1, #1
 800b1c4:	fa01 f303 	lsl.w	r3, r1, r3
 800b1c8:	69f9      	ldr	r1, [r7, #28]
 800b1ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	634b      	str	r3, [r1, #52]	; 0x34
 800b1d2:	e105      	b.n	800b3e0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d110      	bne.n	800b206 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	015a      	lsls	r2, r3, #5
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	69ba      	ldr	r2, [r7, #24]
 800b1f4:	0151      	lsls	r1, r2, #5
 800b1f6:	69fa      	ldr	r2, [r7, #28]
 800b1f8:	440a      	add	r2, r1
 800b1fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b202:	6013      	str	r3, [r2, #0]
 800b204:	e00f      	b.n	800b226 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	015a      	lsls	r2, r3, #5
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	4413      	add	r3, r2
 800b20e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	69ba      	ldr	r2, [r7, #24]
 800b216:	0151      	lsls	r1, r2, #5
 800b218:	69fa      	ldr	r2, [r7, #28]
 800b21a:	440a      	add	r2, r1
 800b21c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b224:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	68d9      	ldr	r1, [r3, #12]
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	781a      	ldrb	r2, [r3, #0]
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	695b      	ldr	r3, [r3, #20]
 800b232:	b298      	uxth	r0, r3
 800b234:	79fb      	ldrb	r3, [r7, #7]
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	4603      	mov	r3, r0
 800b23a:	68f8      	ldr	r0, [r7, #12]
 800b23c:	f000 fa2b 	bl	800b696 <USB_WritePacket>
 800b240:	e0ce      	b.n	800b3e0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	015a      	lsls	r2, r3, #5
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	4413      	add	r3, r2
 800b24a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b24e:	691b      	ldr	r3, [r3, #16]
 800b250:	69ba      	ldr	r2, [r7, #24]
 800b252:	0151      	lsls	r1, r2, #5
 800b254:	69fa      	ldr	r2, [r7, #28]
 800b256:	440a      	add	r2, r1
 800b258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b25c:	0cdb      	lsrs	r3, r3, #19
 800b25e:	04db      	lsls	r3, r3, #19
 800b260:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	015a      	lsls	r2, r3, #5
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	4413      	add	r3, r2
 800b26a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	69ba      	ldr	r2, [r7, #24]
 800b272:	0151      	lsls	r1, r2, #5
 800b274:	69fa      	ldr	r2, [r7, #28]
 800b276:	440a      	add	r2, r1
 800b278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b27c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b280:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b284:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	695b      	ldr	r3, [r3, #20]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d126      	bne.n	800b2dc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	015a      	lsls	r2, r3, #5
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	4413      	add	r3, r2
 800b296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b29a:	691a      	ldr	r2, [r3, #16]
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2a4:	69b9      	ldr	r1, [r7, #24]
 800b2a6:	0148      	lsls	r0, r1, #5
 800b2a8:	69f9      	ldr	r1, [r7, #28]
 800b2aa:	4401      	add	r1, r0
 800b2ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	015a      	lsls	r2, r3, #5
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	69ba      	ldr	r2, [r7, #24]
 800b2c4:	0151      	lsls	r1, r2, #5
 800b2c6:	69fa      	ldr	r2, [r7, #28]
 800b2c8:	440a      	add	r2, r1
 800b2ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2d2:	6113      	str	r3, [r2, #16]
 800b2d4:	e036      	b.n	800b344 <USB_EPStartXfer+0x3dc>
 800b2d6:	bf00      	nop
 800b2d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	695a      	ldr	r2, [r3, #20]
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	1e5a      	subs	r2, r3, #1
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2f0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	015a      	lsls	r2, r3, #5
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2fe:	691a      	ldr	r2, [r3, #16]
 800b300:	8afb      	ldrh	r3, [r7, #22]
 800b302:	04d9      	lsls	r1, r3, #19
 800b304:	4b39      	ldr	r3, [pc, #228]	; (800b3ec <USB_EPStartXfer+0x484>)
 800b306:	400b      	ands	r3, r1
 800b308:	69b9      	ldr	r1, [r7, #24]
 800b30a:	0148      	lsls	r0, r1, #5
 800b30c:	69f9      	ldr	r1, [r7, #28]
 800b30e:	4401      	add	r1, r0
 800b310:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b314:	4313      	orrs	r3, r2
 800b316:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	015a      	lsls	r2, r3, #5
 800b31c:	69fb      	ldr	r3, [r7, #28]
 800b31e:	4413      	add	r3, r2
 800b320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b324:	691a      	ldr	r2, [r3, #16]
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	8af9      	ldrh	r1, [r7, #22]
 800b32c:	fb01 f303 	mul.w	r3, r1, r3
 800b330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b334:	69b9      	ldr	r1, [r7, #24]
 800b336:	0148      	lsls	r0, r1, #5
 800b338:	69f9      	ldr	r1, [r7, #28]
 800b33a:	4401      	add	r1, r0
 800b33c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b340:	4313      	orrs	r3, r2
 800b342:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b344:	79fb      	ldrb	r3, [r7, #7]
 800b346:	2b01      	cmp	r3, #1
 800b348:	d10d      	bne.n	800b366 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d009      	beq.n	800b366 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	68d9      	ldr	r1, [r3, #12]
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	015a      	lsls	r2, r3, #5
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	4413      	add	r3, r2
 800b35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b362:	460a      	mov	r2, r1
 800b364:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	78db      	ldrb	r3, [r3, #3]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d128      	bne.n	800b3c0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d110      	bne.n	800b3a0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	015a      	lsls	r2, r3, #5
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	4413      	add	r3, r2
 800b386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	69ba      	ldr	r2, [r7, #24]
 800b38e:	0151      	lsls	r1, r2, #5
 800b390:	69fa      	ldr	r2, [r7, #28]
 800b392:	440a      	add	r2, r1
 800b394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b398:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b39c:	6013      	str	r3, [r2, #0]
 800b39e:	e00f      	b.n	800b3c0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	015a      	lsls	r2, r3, #5
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	69ba      	ldr	r2, [r7, #24]
 800b3b0:	0151      	lsls	r1, r2, #5
 800b3b2:	69fa      	ldr	r2, [r7, #28]
 800b3b4:	440a      	add	r2, r1
 800b3b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	015a      	lsls	r2, r3, #5
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	69ba      	ldr	r2, [r7, #24]
 800b3d0:	0151      	lsls	r1, r2, #5
 800b3d2:	69fa      	ldr	r2, [r7, #28]
 800b3d4:	440a      	add	r2, r1
 800b3d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b3e0:	2300      	movs	r3, #0
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3720      	adds	r7, #32
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	1ff80000 	.word	0x1ff80000

0800b3f0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b087      	sub	sp, #28
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	785b      	ldrb	r3, [r3, #1]
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	f040 80cd 	bne.w	800b5ac <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	695b      	ldr	r3, [r3, #20]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d132      	bne.n	800b480 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	015a      	lsls	r2, r3, #5
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	4413      	add	r3, r2
 800b422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b426:	691b      	ldr	r3, [r3, #16]
 800b428:	693a      	ldr	r2, [r7, #16]
 800b42a:	0151      	lsls	r1, r2, #5
 800b42c:	697a      	ldr	r2, [r7, #20]
 800b42e:	440a      	add	r2, r1
 800b430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b434:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b438:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b43c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	015a      	lsls	r2, r3, #5
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	4413      	add	r3, r2
 800b446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b44a:	691b      	ldr	r3, [r3, #16]
 800b44c:	693a      	ldr	r2, [r7, #16]
 800b44e:	0151      	lsls	r1, r2, #5
 800b450:	697a      	ldr	r2, [r7, #20]
 800b452:	440a      	add	r2, r1
 800b454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b458:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b45c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	015a      	lsls	r2, r3, #5
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	4413      	add	r3, r2
 800b466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b46a:	691b      	ldr	r3, [r3, #16]
 800b46c:	693a      	ldr	r2, [r7, #16]
 800b46e:	0151      	lsls	r1, r2, #5
 800b470:	697a      	ldr	r2, [r7, #20]
 800b472:	440a      	add	r2, r1
 800b474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b478:	0cdb      	lsrs	r3, r3, #19
 800b47a:	04db      	lsls	r3, r3, #19
 800b47c:	6113      	str	r3, [r2, #16]
 800b47e:	e04e      	b.n	800b51e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	015a      	lsls	r2, r3, #5
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	4413      	add	r3, r2
 800b488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	693a      	ldr	r2, [r7, #16]
 800b490:	0151      	lsls	r1, r2, #5
 800b492:	697a      	ldr	r2, [r7, #20]
 800b494:	440a      	add	r2, r1
 800b496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b49a:	0cdb      	lsrs	r3, r3, #19
 800b49c:	04db      	lsls	r3, r3, #19
 800b49e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	015a      	lsls	r2, r3, #5
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	693a      	ldr	r2, [r7, #16]
 800b4b0:	0151      	lsls	r1, r2, #5
 800b4b2:	697a      	ldr	r2, [r7, #20]
 800b4b4:	440a      	add	r2, r1
 800b4b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b4be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b4c2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	695a      	ldr	r2, [r3, #20]
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d903      	bls.n	800b4d8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	689a      	ldr	r2, [r3, #8]
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	015a      	lsls	r2, r3, #5
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	4413      	add	r3, r2
 800b4e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	693a      	ldr	r2, [r7, #16]
 800b4e8:	0151      	lsls	r1, r2, #5
 800b4ea:	697a      	ldr	r2, [r7, #20]
 800b4ec:	440a      	add	r2, r1
 800b4ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b4f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	015a      	lsls	r2, r3, #5
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	4413      	add	r3, r2
 800b500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b504:	691a      	ldr	r2, [r3, #16]
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	695b      	ldr	r3, [r3, #20]
 800b50a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b50e:	6939      	ldr	r1, [r7, #16]
 800b510:	0148      	lsls	r0, r1, #5
 800b512:	6979      	ldr	r1, [r7, #20]
 800b514:	4401      	add	r1, r0
 800b516:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b51a:	4313      	orrs	r3, r2
 800b51c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b51e:	79fb      	ldrb	r3, [r7, #7]
 800b520:	2b01      	cmp	r3, #1
 800b522:	d11e      	bne.n	800b562 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	691b      	ldr	r3, [r3, #16]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d009      	beq.n	800b540 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	015a      	lsls	r2, r3, #5
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	4413      	add	r3, r2
 800b534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b538:	461a      	mov	r2, r3
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	691b      	ldr	r3, [r3, #16]
 800b53e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	015a      	lsls	r2, r3, #5
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	4413      	add	r3, r2
 800b548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	693a      	ldr	r2, [r7, #16]
 800b550:	0151      	lsls	r1, r2, #5
 800b552:	697a      	ldr	r2, [r7, #20]
 800b554:	440a      	add	r2, r1
 800b556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b55a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b55e:	6013      	str	r3, [r2, #0]
 800b560:	e092      	b.n	800b688 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	015a      	lsls	r2, r3, #5
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	4413      	add	r3, r2
 800b56a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	693a      	ldr	r2, [r7, #16]
 800b572:	0151      	lsls	r1, r2, #5
 800b574:	697a      	ldr	r2, [r7, #20]
 800b576:	440a      	add	r2, r1
 800b578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b57c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b580:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	695b      	ldr	r3, [r3, #20]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d07e      	beq.n	800b688 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	f003 030f 	and.w	r3, r3, #15
 800b59a:	2101      	movs	r1, #1
 800b59c:	fa01 f303 	lsl.w	r3, r1, r3
 800b5a0:	6979      	ldr	r1, [r7, #20]
 800b5a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	634b      	str	r3, [r1, #52]	; 0x34
 800b5aa:	e06d      	b.n	800b688 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	015a      	lsls	r2, r3, #5
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5b8:	691b      	ldr	r3, [r3, #16]
 800b5ba:	693a      	ldr	r2, [r7, #16]
 800b5bc:	0151      	lsls	r1, r2, #5
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	440a      	add	r2, r1
 800b5c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5c6:	0cdb      	lsrs	r3, r3, #19
 800b5c8:	04db      	lsls	r3, r3, #19
 800b5ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	015a      	lsls	r2, r3, #5
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	4413      	add	r3, r2
 800b5d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5d8:	691b      	ldr	r3, [r3, #16]
 800b5da:	693a      	ldr	r2, [r7, #16]
 800b5dc:	0151      	lsls	r1, r2, #5
 800b5de:	697a      	ldr	r2, [r7, #20]
 800b5e0:	440a      	add	r2, r1
 800b5e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b5ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b5ee:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d003      	beq.n	800b600 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	689a      	ldr	r2, [r3, #8]
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	015a      	lsls	r2, r3, #5
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	4413      	add	r3, r2
 800b608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b60c:	691b      	ldr	r3, [r3, #16]
 800b60e:	693a      	ldr	r2, [r7, #16]
 800b610:	0151      	lsls	r1, r2, #5
 800b612:	697a      	ldr	r2, [r7, #20]
 800b614:	440a      	add	r2, r1
 800b616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b61a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b61e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	015a      	lsls	r2, r3, #5
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	4413      	add	r3, r2
 800b628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b62c:	691a      	ldr	r2, [r3, #16]
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b636:	6939      	ldr	r1, [r7, #16]
 800b638:	0148      	lsls	r0, r1, #5
 800b63a:	6979      	ldr	r1, [r7, #20]
 800b63c:	4401      	add	r1, r0
 800b63e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b642:	4313      	orrs	r3, r2
 800b644:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b646:	79fb      	ldrb	r3, [r7, #7]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d10d      	bne.n	800b668 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d009      	beq.n	800b668 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	68d9      	ldr	r1, [r3, #12]
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	015a      	lsls	r2, r3, #5
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	4413      	add	r3, r2
 800b660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b664:	460a      	mov	r2, r1
 800b666:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	015a      	lsls	r2, r3, #5
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	4413      	add	r3, r2
 800b670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	693a      	ldr	r2, [r7, #16]
 800b678:	0151      	lsls	r1, r2, #5
 800b67a:	697a      	ldr	r2, [r7, #20]
 800b67c:	440a      	add	r2, r1
 800b67e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b682:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b686:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	371c      	adds	r7, #28
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr

0800b696 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b696:	b480      	push	{r7}
 800b698:	b089      	sub	sp, #36	; 0x24
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	60f8      	str	r0, [r7, #12]
 800b69e:	60b9      	str	r1, [r7, #8]
 800b6a0:	4611      	mov	r1, r2
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	71fb      	strb	r3, [r7, #7]
 800b6a8:	4613      	mov	r3, r2
 800b6aa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b6b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d11a      	bne.n	800b6f2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b6bc:	88bb      	ldrh	r3, [r7, #4]
 800b6be:	3303      	adds	r3, #3
 800b6c0:	089b      	lsrs	r3, r3, #2
 800b6c2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	61bb      	str	r3, [r7, #24]
 800b6c8:	e00f      	b.n	800b6ea <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b6ca:	79fb      	ldrb	r3, [r7, #7]
 800b6cc:	031a      	lsls	r2, r3, #12
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	69fb      	ldr	r3, [r7, #28]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	3304      	adds	r3, #4
 800b6e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b6e4:	69bb      	ldr	r3, [r7, #24]
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	61bb      	str	r3, [r7, #24]
 800b6ea:	69ba      	ldr	r2, [r7, #24]
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d3eb      	bcc.n	800b6ca <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3724      	adds	r7, #36	; 0x24
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr

0800b700 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b700:	b480      	push	{r7}
 800b702:	b089      	sub	sp, #36	; 0x24
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	4613      	mov	r3, r2
 800b70c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b716:	88fb      	ldrh	r3, [r7, #6]
 800b718:	3303      	adds	r3, #3
 800b71a:	089b      	lsrs	r3, r3, #2
 800b71c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b71e:	2300      	movs	r3, #0
 800b720:	61bb      	str	r3, [r7, #24]
 800b722:	e00b      	b.n	800b73c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	601a      	str	r2, [r3, #0]
    pDest++;
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	3304      	adds	r3, #4
 800b734:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b736:	69bb      	ldr	r3, [r7, #24]
 800b738:	3301      	adds	r3, #1
 800b73a:	61bb      	str	r3, [r7, #24]
 800b73c:	69ba      	ldr	r2, [r7, #24]
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	429a      	cmp	r2, r3
 800b742:	d3ef      	bcc.n	800b724 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b744:	69fb      	ldr	r3, [r7, #28]
}
 800b746:	4618      	mov	r0, r3
 800b748:	3724      	adds	r7, #36	; 0x24
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr

0800b752 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b752:	b480      	push	{r7}
 800b754:	b085      	sub	sp, #20
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
 800b75a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	785b      	ldrb	r3, [r3, #1]
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d12c      	bne.n	800b7c8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	015a      	lsls	r2, r3, #5
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	4413      	add	r3, r2
 800b776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	db12      	blt.n	800b7a6 <USB_EPSetStall+0x54>
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d00f      	beq.n	800b7a6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	015a      	lsls	r2, r3, #5
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	4413      	add	r3, r2
 800b78e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	68ba      	ldr	r2, [r7, #8]
 800b796:	0151      	lsls	r1, r2, #5
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	440a      	add	r2, r1
 800b79c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b7a4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	015a      	lsls	r2, r3, #5
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	68ba      	ldr	r2, [r7, #8]
 800b7b6:	0151      	lsls	r1, r2, #5
 800b7b8:	68fa      	ldr	r2, [r7, #12]
 800b7ba:	440a      	add	r2, r1
 800b7bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b7c4:	6013      	str	r3, [r2, #0]
 800b7c6:	e02b      	b.n	800b820 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	015a      	lsls	r2, r3, #5
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	db12      	blt.n	800b800 <USB_EPSetStall+0xae>
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d00f      	beq.n	800b800 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	015a      	lsls	r2, r3, #5
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	68ba      	ldr	r2, [r7, #8]
 800b7f0:	0151      	lsls	r1, r2, #5
 800b7f2:	68fa      	ldr	r2, [r7, #12]
 800b7f4:	440a      	add	r2, r1
 800b7f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b7fe:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	015a      	lsls	r2, r3, #5
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	4413      	add	r3, r2
 800b808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	68ba      	ldr	r2, [r7, #8]
 800b810:	0151      	lsls	r1, r2, #5
 800b812:	68fa      	ldr	r2, [r7, #12]
 800b814:	440a      	add	r2, r1
 800b816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b81a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b81e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b82e:	b480      	push	{r7}
 800b830:	b085      	sub	sp, #20
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	785b      	ldrb	r3, [r3, #1]
 800b846:	2b01      	cmp	r3, #1
 800b848:	d128      	bne.n	800b89c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	015a      	lsls	r2, r3, #5
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	4413      	add	r3, r2
 800b852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	0151      	lsls	r1, r2, #5
 800b85c:	68fa      	ldr	r2, [r7, #12]
 800b85e:	440a      	add	r2, r1
 800b860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b864:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b868:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	78db      	ldrb	r3, [r3, #3]
 800b86e:	2b03      	cmp	r3, #3
 800b870:	d003      	beq.n	800b87a <USB_EPClearStall+0x4c>
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	78db      	ldrb	r3, [r3, #3]
 800b876:	2b02      	cmp	r3, #2
 800b878:	d138      	bne.n	800b8ec <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	015a      	lsls	r2, r3, #5
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	4413      	add	r3, r2
 800b882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	0151      	lsls	r1, r2, #5
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	440a      	add	r2, r1
 800b890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b898:	6013      	str	r3, [r2, #0]
 800b89a:	e027      	b.n	800b8ec <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	015a      	lsls	r2, r3, #5
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	0151      	lsls	r1, r2, #5
 800b8ae:	68fa      	ldr	r2, [r7, #12]
 800b8b0:	440a      	add	r2, r1
 800b8b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b8ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	78db      	ldrb	r3, [r3, #3]
 800b8c0:	2b03      	cmp	r3, #3
 800b8c2:	d003      	beq.n	800b8cc <USB_EPClearStall+0x9e>
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	78db      	ldrb	r3, [r3, #3]
 800b8c8:	2b02      	cmp	r3, #2
 800b8ca:	d10f      	bne.n	800b8ec <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	015a      	lsls	r2, r3, #5
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	4413      	add	r3, r2
 800b8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	68ba      	ldr	r2, [r7, #8]
 800b8dc:	0151      	lsls	r1, r2, #5
 800b8de:	68fa      	ldr	r2, [r7, #12]
 800b8e0:	440a      	add	r2, r1
 800b8e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8ea:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3714      	adds	r7, #20
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr

0800b8fa <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b8fa:	b480      	push	{r7}
 800b8fc:	b085      	sub	sp, #20
 800b8fe:	af00      	add	r7, sp, #0
 800b900:	6078      	str	r0, [r7, #4]
 800b902:	460b      	mov	r3, r1
 800b904:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	68fa      	ldr	r2, [r7, #12]
 800b914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b918:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b91c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	78fb      	ldrb	r3, [r7, #3]
 800b928:	011b      	lsls	r3, r3, #4
 800b92a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b92e:	68f9      	ldr	r1, [r7, #12]
 800b930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b934:	4313      	orrs	r3, r2
 800b936:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b938:	2300      	movs	r3, #0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3714      	adds	r7, #20
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr

0800b946 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b946:	b480      	push	{r7}
 800b948:	b085      	sub	sp, #20
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b960:	f023 0303 	bic.w	r3, r3, #3
 800b964:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b974:	f023 0302 	bic.w	r3, r3, #2
 800b978:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b97a:	2300      	movs	r3, #0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3714      	adds	r7, #20
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b988:	b480      	push	{r7}
 800b98a:	b085      	sub	sp, #20
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b9a2:	f023 0303 	bic.w	r3, r3, #3
 800b9a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	68fa      	ldr	r2, [r7, #12]
 800b9b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9b6:	f043 0302 	orr.w	r3, r3, #2
 800b9ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3714      	adds	r7, #20
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b9ca:	b480      	push	{r7}
 800b9cc:	b085      	sub	sp, #20
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	695b      	ldr	r3, [r3, #20]
 800b9d6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	699b      	ldr	r3, [r3, #24]
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	4013      	ands	r3, r2
 800b9e0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3714      	adds	r7, #20
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b085      	sub	sp, #20
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba02:	699b      	ldr	r3, [r3, #24]
 800ba04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba0c:	69db      	ldr	r3, [r3, #28]
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	4013      	ands	r3, r2
 800ba12:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	0c1b      	lsrs	r3, r3, #16
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3714      	adds	r7, #20
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr

0800ba24 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b085      	sub	sp, #20
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba36:	699b      	ldr	r3, [r3, #24]
 800ba38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba40:	69db      	ldr	r3, [r3, #28]
 800ba42:	68ba      	ldr	r2, [r7, #8]
 800ba44:	4013      	ands	r3, r2
 800ba46:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	b29b      	uxth	r3, r3
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	460b      	mov	r3, r1
 800ba62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ba68:	78fb      	ldrb	r3, [r7, #3]
 800ba6a:	015a      	lsls	r2, r3, #5
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	4413      	add	r3, r2
 800ba70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba7e:	695b      	ldr	r3, [r3, #20]
 800ba80:	68ba      	ldr	r2, [r7, #8]
 800ba82:	4013      	ands	r3, r2
 800ba84:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba86:	68bb      	ldr	r3, [r7, #8]
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3714      	adds	r7, #20
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr

0800ba94 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b087      	sub	sp, #28
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baaa:	691b      	ldr	r3, [r3, #16]
 800baac:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bab6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bab8:	78fb      	ldrb	r3, [r7, #3]
 800baba:	f003 030f 	and.w	r3, r3, #15
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	fa22 f303 	lsr.w	r3, r2, r3
 800bac4:	01db      	lsls	r3, r3, #7
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	693a      	ldr	r2, [r7, #16]
 800baca:	4313      	orrs	r3, r2
 800bacc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bace:	78fb      	ldrb	r3, [r7, #3]
 800bad0:	015a      	lsls	r2, r3, #5
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	4413      	add	r3, r2
 800bad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	693a      	ldr	r2, [r7, #16]
 800bade:	4013      	ands	r3, r2
 800bae0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bae2:	68bb      	ldr	r3, [r7, #8]
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	371c      	adds	r7, #28
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	695b      	ldr	r3, [r3, #20]
 800bafc:	f003 0301 	and.w	r3, r3, #1
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b085      	sub	sp, #20
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	68fa      	ldr	r2, [r7, #12]
 800bb22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb26:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bb2a:	f023 0307 	bic.w	r3, r3, #7
 800bb2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3714      	adds	r7, #20
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr
	...

0800bb54 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b087      	sub	sp, #28
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	607a      	str	r2, [r7, #4]
 800bb60:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	333c      	adds	r3, #60	; 0x3c
 800bb6a:	3304      	adds	r3, #4
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	4a26      	ldr	r2, [pc, #152]	; (800bc0c <USB_EP0_OutStart+0xb8>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d90a      	bls.n	800bb8e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb88:	d101      	bne.n	800bb8e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	e037      	b.n	800bbfe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb94:	461a      	mov	r2, r3
 800bb96:	2300      	movs	r3, #0
 800bb98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	697a      	ldr	r2, [r7, #20]
 800bba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bba8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bbac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbb4:	691b      	ldr	r3, [r3, #16]
 800bbb6:	697a      	ldr	r2, [r7, #20]
 800bbb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbbc:	f043 0318 	orr.w	r3, r3, #24
 800bbc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbc8:	691b      	ldr	r3, [r3, #16]
 800bbca:	697a      	ldr	r2, [r7, #20]
 800bbcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbd0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bbd4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bbd6:	7afb      	ldrb	r3, [r7, #11]
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d10f      	bne.n	800bbfc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	697a      	ldr	r2, [r7, #20]
 800bbf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbf6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bbfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	371c      	adds	r7, #28
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr
 800bc0a:	bf00      	nop
 800bc0c:	4f54300a 	.word	0x4f54300a

0800bc10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	60fb      	str	r3, [r7, #12]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	4a13      	ldr	r2, [pc, #76]	; (800bc74 <USB_CoreReset+0x64>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d901      	bls.n	800bc2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bc2a:	2303      	movs	r3, #3
 800bc2c:	e01b      	b.n	800bc66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	daf2      	bge.n	800bc1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bc36:	2300      	movs	r3, #0
 800bc38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	691b      	ldr	r3, [r3, #16]
 800bc3e:	f043 0201 	orr.w	r2, r3, #1
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	60fb      	str	r3, [r7, #12]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	4a09      	ldr	r2, [pc, #36]	; (800bc74 <USB_CoreReset+0x64>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d901      	bls.n	800bc58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bc54:	2303      	movs	r3, #3
 800bc56:	e006      	b.n	800bc66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	f003 0301 	and.w	r3, r3, #1
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d0f0      	beq.n	800bc46 <USB_CoreReset+0x36>

  return HAL_OK;
 800bc64:	2300      	movs	r3, #0
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3714      	adds	r7, #20
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	00030d40 	.word	0x00030d40

0800bc78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	460b      	mov	r3, r1
 800bc82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bc84:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bc88:	f003 fd76 	bl	800f778 <malloc>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d105      	bne.n	800bca2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bc9e:	2302      	movs	r3, #2
 800bca0:	e066      	b.n	800bd70 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	7c1b      	ldrb	r3, [r3, #16]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d119      	bne.n	800bce6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bcb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcb6:	2202      	movs	r2, #2
 800bcb8:	2181      	movs	r1, #129	; 0x81
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f003 fbc7 	bl	800f44e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bcc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcca:	2202      	movs	r2, #2
 800bccc:	2101      	movs	r1, #1
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f003 fbbd 	bl	800f44e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2210      	movs	r2, #16
 800bce0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bce4:	e016      	b.n	800bd14 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bce6:	2340      	movs	r3, #64	; 0x40
 800bce8:	2202      	movs	r2, #2
 800bcea:	2181      	movs	r1, #129	; 0x81
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f003 fbae 	bl	800f44e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bcf8:	2340      	movs	r3, #64	; 0x40
 800bcfa:	2202      	movs	r2, #2
 800bcfc:	2101      	movs	r1, #1
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f003 fba5 	bl	800f44e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2201      	movs	r2, #1
 800bd08:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2210      	movs	r2, #16
 800bd10:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bd14:	2308      	movs	r3, #8
 800bd16:	2203      	movs	r2, #3
 800bd18:	2182      	movs	r1, #130	; 0x82
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f003 fb97 	bl	800f44e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	7c1b      	ldrb	r3, [r3, #16]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d109      	bne.n	800bd5e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd50:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd54:	2101      	movs	r1, #1
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f003 fc68 	bl	800f62c <USBD_LL_PrepareReceive>
 800bd5c:	e007      	b.n	800bd6e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd64:	2340      	movs	r3, #64	; 0x40
 800bd66:	2101      	movs	r1, #1
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f003 fc5f 	bl	800f62c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3710      	adds	r7, #16
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	460b      	mov	r3, r1
 800bd82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800bd84:	2300      	movs	r3, #0
 800bd86:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bd88:	2181      	movs	r1, #129	; 0x81
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f003 fb85 	bl	800f49a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bd96:	2101      	movs	r1, #1
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f003 fb7e 	bl	800f49a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bda6:	2182      	movs	r1, #130	; 0x82
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f003 fb76 	bl	800f49a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00e      	beq.n	800bde6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f003 fcd5 	bl	800f788 <free>
    pdev->pClassData = NULL;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800bde6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3710      	adds	r7, #16
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b086      	sub	sp, #24
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be00:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800be02:	2300      	movs	r3, #0
 800be04:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800be06:	2300      	movs	r3, #0
 800be08:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800be0a:	2300      	movs	r3, #0
 800be0c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be16:	2b00      	cmp	r3, #0
 800be18:	d03a      	beq.n	800be90 <USBD_CDC_Setup+0xa0>
 800be1a:	2b20      	cmp	r3, #32
 800be1c:	f040 8097 	bne.w	800bf4e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	88db      	ldrh	r3, [r3, #6]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d029      	beq.n	800be7c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	b25b      	sxtb	r3, r3
 800be2e:	2b00      	cmp	r3, #0
 800be30:	da11      	bge.n	800be56 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	683a      	ldr	r2, [r7, #0]
 800be3c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800be3e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be40:	683a      	ldr	r2, [r7, #0]
 800be42:	88d2      	ldrh	r2, [r2, #6]
 800be44:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800be46:	6939      	ldr	r1, [r7, #16]
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	88db      	ldrh	r3, [r3, #6]
 800be4c:	461a      	mov	r2, r3
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f001 fa9d 	bl	800d38e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800be54:	e082      	b.n	800bf5c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	785a      	ldrb	r2, [r3, #1]
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	88db      	ldrh	r3, [r3, #6]
 800be64:	b2da      	uxtb	r2, r3
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800be6c:	6939      	ldr	r1, [r7, #16]
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	88db      	ldrh	r3, [r3, #6]
 800be72:	461a      	mov	r2, r3
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f001 fab6 	bl	800d3e6 <USBD_CtlPrepareRx>
    break;
 800be7a:	e06f      	b.n	800bf5c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be82:	689b      	ldr	r3, [r3, #8]
 800be84:	683a      	ldr	r2, [r7, #0]
 800be86:	7850      	ldrb	r0, [r2, #1]
 800be88:	2200      	movs	r2, #0
 800be8a:	6839      	ldr	r1, [r7, #0]
 800be8c:	4798      	blx	r3
    break;
 800be8e:	e065      	b.n	800bf5c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	785b      	ldrb	r3, [r3, #1]
 800be94:	2b0b      	cmp	r3, #11
 800be96:	d84f      	bhi.n	800bf38 <USBD_CDC_Setup+0x148>
 800be98:	a201      	add	r2, pc, #4	; (adr r2, 800bea0 <USBD_CDC_Setup+0xb0>)
 800be9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be9e:	bf00      	nop
 800bea0:	0800bed1 	.word	0x0800bed1
 800bea4:	0800bf47 	.word	0x0800bf47
 800bea8:	0800bf39 	.word	0x0800bf39
 800beac:	0800bf39 	.word	0x0800bf39
 800beb0:	0800bf39 	.word	0x0800bf39
 800beb4:	0800bf39 	.word	0x0800bf39
 800beb8:	0800bf39 	.word	0x0800bf39
 800bebc:	0800bf39 	.word	0x0800bf39
 800bec0:	0800bf39 	.word	0x0800bf39
 800bec4:	0800bf39 	.word	0x0800bf39
 800bec8:	0800bef9 	.word	0x0800bef9
 800becc:	0800bf21 	.word	0x0800bf21
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bed6:	2b03      	cmp	r3, #3
 800bed8:	d107      	bne.n	800beea <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800beda:	f107 030c 	add.w	r3, r7, #12
 800bede:	2202      	movs	r2, #2
 800bee0:	4619      	mov	r1, r3
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f001 fa53 	bl	800d38e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800bee8:	e030      	b.n	800bf4c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800beea:	6839      	ldr	r1, [r7, #0]
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f001 f9dd 	bl	800d2ac <USBD_CtlError>
        ret = USBD_FAIL;
 800bef2:	2303      	movs	r3, #3
 800bef4:	75fb      	strb	r3, [r7, #23]
      break;
 800bef6:	e029      	b.n	800bf4c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800befe:	2b03      	cmp	r3, #3
 800bf00:	d107      	bne.n	800bf12 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bf02:	f107 030f 	add.w	r3, r7, #15
 800bf06:	2201      	movs	r2, #1
 800bf08:	4619      	mov	r1, r3
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f001 fa3f 	bl	800d38e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800bf10:	e01c      	b.n	800bf4c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800bf12:	6839      	ldr	r1, [r7, #0]
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f001 f9c9 	bl	800d2ac <USBD_CtlError>
        ret = USBD_FAIL;
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	75fb      	strb	r3, [r7, #23]
      break;
 800bf1e:	e015      	b.n	800bf4c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf26:	2b03      	cmp	r3, #3
 800bf28:	d00f      	beq.n	800bf4a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800bf2a:	6839      	ldr	r1, [r7, #0]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f001 f9bd 	bl	800d2ac <USBD_CtlError>
        ret = USBD_FAIL;
 800bf32:	2303      	movs	r3, #3
 800bf34:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800bf36:	e008      	b.n	800bf4a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f001 f9b6 	bl	800d2ac <USBD_CtlError>
      ret = USBD_FAIL;
 800bf40:	2303      	movs	r3, #3
 800bf42:	75fb      	strb	r3, [r7, #23]
      break;
 800bf44:	e002      	b.n	800bf4c <USBD_CDC_Setup+0x15c>
      break;
 800bf46:	bf00      	nop
 800bf48:	e008      	b.n	800bf5c <USBD_CDC_Setup+0x16c>
      break;
 800bf4a:	bf00      	nop
    }
    break;
 800bf4c:	e006      	b.n	800bf5c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800bf4e:	6839      	ldr	r1, [r7, #0]
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f001 f9ab 	bl	800d2ac <USBD_CtlError>
    ret = USBD_FAIL;
 800bf56:	2303      	movs	r3, #3
 800bf58:	75fb      	strb	r3, [r7, #23]
    break;
 800bf5a:	bf00      	nop
  }

  return (uint8_t)ret;
 800bf5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3718      	adds	r7, #24
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop

0800bf68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	460b      	mov	r3, r1
 800bf72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d101      	bne.n	800bf8a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bf86:	2303      	movs	r3, #3
 800bf88:	e049      	b.n	800c01e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf90:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bf92:	78fa      	ldrb	r2, [r7, #3]
 800bf94:	6879      	ldr	r1, [r7, #4]
 800bf96:	4613      	mov	r3, r2
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	4413      	add	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	440b      	add	r3, r1
 800bfa0:	3318      	adds	r3, #24
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d029      	beq.n	800bffc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bfa8:	78fa      	ldrb	r2, [r7, #3]
 800bfaa:	6879      	ldr	r1, [r7, #4]
 800bfac:	4613      	mov	r3, r2
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	4413      	add	r3, r2
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	440b      	add	r3, r1
 800bfb6:	3318      	adds	r3, #24
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	78f9      	ldrb	r1, [r7, #3]
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	00db      	lsls	r3, r3, #3
 800bfc2:	1a5b      	subs	r3, r3, r1
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	4403      	add	r3, r0
 800bfc8:	3344      	adds	r3, #68	; 0x44
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	fbb2 f1f3 	udiv	r1, r2, r3
 800bfd0:	fb03 f301 	mul.w	r3, r3, r1
 800bfd4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d110      	bne.n	800bffc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bfda:	78fa      	ldrb	r2, [r7, #3]
 800bfdc:	6879      	ldr	r1, [r7, #4]
 800bfde:	4613      	mov	r3, r2
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	4413      	add	r3, r2
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	440b      	add	r3, r1
 800bfe8:	3318      	adds	r3, #24
 800bfea:	2200      	movs	r2, #0
 800bfec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bfee:	78f9      	ldrb	r1, [r7, #3]
 800bff0:	2300      	movs	r3, #0
 800bff2:	2200      	movs	r2, #0
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f003 faf8 	bl	800f5ea <USBD_LL_Transmit>
 800bffa:	e00f      	b.n	800c01c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	2200      	movs	r2, #0
 800c000:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c00a:	691b      	ldr	r3, [r3, #16]
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c012:	68ba      	ldr	r2, [r7, #8]
 800c014:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c018:	78fa      	ldrb	r2, [r7, #3]
 800c01a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b084      	sub	sp, #16
 800c02a:	af00      	add	r7, sp, #0
 800c02c:	6078      	str	r0, [r7, #4]
 800c02e:	460b      	mov	r3, r1
 800c030:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c038:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c040:	2b00      	cmp	r3, #0
 800c042:	d101      	bne.n	800c048 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c044:	2303      	movs	r3, #3
 800c046:	e015      	b.n	800c074 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c048:	78fb      	ldrb	r3, [r7, #3]
 800c04a:	4619      	mov	r1, r3
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f003 fb0e 	bl	800f66e <USBD_LL_GetRxDataSize>
 800c052:	4602      	mov	r2, r0
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c060:	68db      	ldr	r3, [r3, #12]
 800c062:	68fa      	ldr	r2, [r7, #12]
 800c064:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c06e:	4611      	mov	r1, r2
 800c070:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c072:	2300      	movs	r3, #0
}
 800c074:	4618      	mov	r0, r3
 800c076:	3710      	adds	r7, #16
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c08a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d015      	beq.n	800c0c2 <USBD_CDC_EP0_RxReady+0x46>
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c09c:	2bff      	cmp	r3, #255	; 0xff
 800c09e:	d010      	beq.n	800c0c2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	68fa      	ldr	r2, [r7, #12]
 800c0aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c0ae:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c0b6:	b292      	uxth	r2, r2
 800c0b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	22ff      	movs	r2, #255	; 0xff
 800c0be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800c0c2:	2300      	movs	r3, #0
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3710      	adds	r7, #16
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2243      	movs	r2, #67	; 0x43
 800c0d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c0da:	4b03      	ldr	r3, [pc, #12]	; (800c0e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr
 800c0e8:	10000094 	.word	0x10000094

0800c0ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2243      	movs	r2, #67	; 0x43
 800c0f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c0fa:	4b03      	ldr	r3, [pc, #12]	; (800c108 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	370c      	adds	r7, #12
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr
 800c108:	10000050 	.word	0x10000050

0800c10c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2243      	movs	r2, #67	; 0x43
 800c118:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c11a:	4b03      	ldr	r3, [pc, #12]	; (800c128 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr
 800c128:	100000d8 	.word	0x100000d8

0800c12c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	220a      	movs	r2, #10
 800c138:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c13a:	4b03      	ldr	r3, [pc, #12]	; (800c148 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr
 800c148:	1000000c 	.word	0x1000000c

0800c14c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d101      	bne.n	800c160 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c15c:	2303      	movs	r3, #3
 800c15e:	e004      	b.n	800c16a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	683a      	ldr	r2, [r7, #0]
 800c164:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c168:	2300      	movs	r3, #0
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	370c      	adds	r7, #12
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr

0800c176 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c176:	b480      	push	{r7}
 800c178:	b087      	sub	sp, #28
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	60f8      	str	r0, [r7, #12]
 800c17e:	60b9      	str	r1, [r7, #8]
 800c180:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c188:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c19a:	2300      	movs	r3, #0
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	371c      	adds	r7, #28
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b085      	sub	sp, #20
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1b8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	683a      	ldr	r2, [r7, #0]
 800c1be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c1c2:	2300      	movs	r3, #0
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3714      	adds	r7, #20
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1de:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d101      	bne.n	800c1f2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c1ee:	2303      	movs	r3, #3
 800c1f0:	e01a      	b.n	800c228 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d114      	bne.n	800c226 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	2201      	movs	r2, #1
 800c200:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c21a:	2181      	movs	r1, #129	; 0x81
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f003 f9e4 	bl	800f5ea <USBD_LL_Transmit>

    ret = USBD_OK;
 800c222:	2300      	movs	r3, #0
 800c224:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c226:	7bfb      	ldrb	r3, [r7, #15]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3710      	adds	r7, #16
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c23e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c246:	2b00      	cmp	r3, #0
 800c248:	d101      	bne.n	800c24e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c24a:	2303      	movs	r3, #3
 800c24c:	e016      	b.n	800c27c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	7c1b      	ldrb	r3, [r3, #16]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d109      	bne.n	800c26a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c25c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c260:	2101      	movs	r1, #1
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f003 f9e2 	bl	800f62c <USBD_LL_PrepareReceive>
 800c268:	e007      	b.n	800c27a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c270:	2340      	movs	r3, #64	; 0x40
 800c272:	2101      	movs	r1, #1
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f003 f9d9 	bl	800f62c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c27a:	2300      	movs	r3, #0
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3710      	adds	r7, #16
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	4613      	mov	r3, r2
 800c290:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d101      	bne.n	800c29c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c298:	2303      	movs	r3, #3
 800c29a:	e025      	b.n	800c2e8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d003      	beq.n	800c2ae <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d003      	beq.n	800c2c0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d003      	beq.n	800c2ce <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	68ba      	ldr	r2, [r7, #8]
 800c2ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	79fa      	ldrb	r2, [r7, #7]
 800c2da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c2dc:	68f8      	ldr	r0, [r7, #12]
 800c2de:	f003 f84f 	bl	800f380 <USBD_LL_Init>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c2e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3718      	adds	r7, #24
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b084      	sub	sp, #16
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d101      	bne.n	800c308 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c304:	2303      	movs	r3, #3
 800c306:	e010      	b.n	800c32a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	683a      	ldr	r2, [r7, #0]
 800c30c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c318:	f107 020e 	add.w	r2, r7, #14
 800c31c:	4610      	mov	r0, r2
 800c31e:	4798      	blx	r3
 800c320:	4602      	mov	r2, r0
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800c328:	2300      	movs	r3, #0
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b082      	sub	sp, #8
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f003 f86c 	bl	800f418 <USBD_LL_Start>
 800c340:	4603      	mov	r3, r0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3708      	adds	r7, #8
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c34a:	b480      	push	{r7}
 800c34c:	b083      	sub	sp, #12
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c352:	2300      	movs	r3, #0
}
 800c354:	4618      	mov	r0, r3
 800c356:	370c      	adds	r7, #12
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr

0800c360 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	460b      	mov	r3, r1
 800c36a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c36c:	2303      	movs	r3, #3
 800c36e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c376:	2b00      	cmp	r3, #0
 800c378:	d009      	beq.n	800c38e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	78fa      	ldrb	r2, [r7, #3]
 800c384:	4611      	mov	r1, r2
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	4798      	blx	r3
 800c38a:	4603      	mov	r3, r0
 800c38c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c38e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c390:	4618      	mov	r0, r3
 800c392:	3710      	adds	r7, #16
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d007      	beq.n	800c3be <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	78fa      	ldrb	r2, [r7, #3]
 800c3b8:	4611      	mov	r1, r2
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	4798      	blx	r3
  }

  return USBD_OK;
 800c3be:	2300      	movs	r3, #0
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3708      	adds	r7, #8
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b084      	sub	sp, #16
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c3d8:	6839      	ldr	r1, [r7, #0]
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f000 ff2c 	bl	800d238 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c3fc:	f003 031f 	and.w	r3, r3, #31
 800c400:	2b01      	cmp	r3, #1
 800c402:	d00e      	beq.n	800c422 <USBD_LL_SetupStage+0x5a>
 800c404:	2b01      	cmp	r3, #1
 800c406:	d302      	bcc.n	800c40e <USBD_LL_SetupStage+0x46>
 800c408:	2b02      	cmp	r3, #2
 800c40a:	d014      	beq.n	800c436 <USBD_LL_SetupStage+0x6e>
 800c40c:	e01d      	b.n	800c44a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c414:	4619      	mov	r1, r3
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 fa18 	bl	800c84c <USBD_StdDevReq>
 800c41c:	4603      	mov	r3, r0
 800c41e:	73fb      	strb	r3, [r7, #15]
      break;
 800c420:	e020      	b.n	800c464 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c428:	4619      	mov	r1, r3
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 fa7c 	bl	800c928 <USBD_StdItfReq>
 800c430:	4603      	mov	r3, r0
 800c432:	73fb      	strb	r3, [r7, #15]
      break;
 800c434:	e016      	b.n	800c464 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c43c:	4619      	mov	r1, r3
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 fab8 	bl	800c9b4 <USBD_StdEPReq>
 800c444:	4603      	mov	r3, r0
 800c446:	73fb      	strb	r3, [r7, #15]
      break;
 800c448:	e00c      	b.n	800c464 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c450:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c454:	b2db      	uxtb	r3, r3
 800c456:	4619      	mov	r1, r3
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f003 f83d 	bl	800f4d8 <USBD_LL_StallEP>
 800c45e:	4603      	mov	r3, r0
 800c460:	73fb      	strb	r3, [r7, #15]
      break;
 800c462:	bf00      	nop
  }

  return ret;
 800c464:	7bfb      	ldrb	r3, [r7, #15]
}
 800c466:	4618      	mov	r0, r3
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c46e:	b580      	push	{r7, lr}
 800c470:	b086      	sub	sp, #24
 800c472:	af00      	add	r7, sp, #0
 800c474:	60f8      	str	r0, [r7, #12]
 800c476:	460b      	mov	r3, r1
 800c478:	607a      	str	r2, [r7, #4]
 800c47a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c47c:	7afb      	ldrb	r3, [r7, #11]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d137      	bne.n	800c4f2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c488:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c490:	2b03      	cmp	r3, #3
 800c492:	d14a      	bne.n	800c52a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	689a      	ldr	r2, [r3, #8]
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d913      	bls.n	800c4c8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	689a      	ldr	r2, [r3, #8]
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	1ad2      	subs	r2, r2, r3
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	68da      	ldr	r2, [r3, #12]
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	689b      	ldr	r3, [r3, #8]
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	bf28      	it	cs
 800c4ba:	4613      	movcs	r3, r2
 800c4bc:	461a      	mov	r2, r3
 800c4be:	6879      	ldr	r1, [r7, #4]
 800c4c0:	68f8      	ldr	r0, [r7, #12]
 800c4c2:	f000 ffad 	bl	800d420 <USBD_CtlContinueRx>
 800c4c6:	e030      	b.n	800c52a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4ce:	691b      	ldr	r3, [r3, #16]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d00a      	beq.n	800c4ea <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c4da:	2b03      	cmp	r3, #3
 800c4dc:	d105      	bne.n	800c4ea <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	68f8      	ldr	r0, [r7, #12]
 800c4e8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800c4ea:	68f8      	ldr	r0, [r7, #12]
 800c4ec:	f000 ffa9 	bl	800d442 <USBD_CtlSendStatus>
 800c4f0:	e01b      	b.n	800c52a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4f8:	699b      	ldr	r3, [r3, #24]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d013      	beq.n	800c526 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c504:	2b03      	cmp	r3, #3
 800c506:	d10e      	bne.n	800c526 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c50e:	699b      	ldr	r3, [r3, #24]
 800c510:	7afa      	ldrb	r2, [r7, #11]
 800c512:	4611      	mov	r1, r2
 800c514:	68f8      	ldr	r0, [r7, #12]
 800c516:	4798      	blx	r3
 800c518:	4603      	mov	r3, r0
 800c51a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c51c:	7dfb      	ldrb	r3, [r7, #23]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d003      	beq.n	800c52a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800c522:	7dfb      	ldrb	r3, [r7, #23]
 800c524:	e002      	b.n	800c52c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c526:	2303      	movs	r3, #3
 800c528:	e000      	b.n	800c52c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3718      	adds	r7, #24
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b086      	sub	sp, #24
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	460b      	mov	r3, r1
 800c53e:	607a      	str	r2, [r7, #4]
 800c540:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c542:	7afb      	ldrb	r3, [r7, #11]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d16a      	bne.n	800c61e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	3314      	adds	r3, #20
 800c54c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c554:	2b02      	cmp	r3, #2
 800c556:	d155      	bne.n	800c604 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	689a      	ldr	r2, [r3, #8]
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	429a      	cmp	r2, r3
 800c562:	d914      	bls.n	800c58e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	689a      	ldr	r2, [r3, #8]
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	68db      	ldr	r3, [r3, #12]
 800c56c:	1ad2      	subs	r2, r2, r3
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	689b      	ldr	r3, [r3, #8]
 800c576:	461a      	mov	r2, r3
 800c578:	6879      	ldr	r1, [r7, #4]
 800c57a:	68f8      	ldr	r0, [r7, #12]
 800c57c:	f000 ff22 	bl	800d3c4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c580:	2300      	movs	r3, #0
 800c582:	2200      	movs	r2, #0
 800c584:	2100      	movs	r1, #0
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f003 f850 	bl	800f62c <USBD_LL_PrepareReceive>
 800c58c:	e03a      	b.n	800c604 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	68da      	ldr	r2, [r3, #12]
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	689b      	ldr	r3, [r3, #8]
 800c596:	429a      	cmp	r2, r3
 800c598:	d11c      	bne.n	800c5d4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	685a      	ldr	r2, [r3, #4]
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d316      	bcc.n	800c5d4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	685a      	ldr	r2, [r3, #4]
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d20f      	bcs.n	800c5d4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	2100      	movs	r1, #0
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f000 ff03 	bl	800d3c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	f003 f82d 	bl	800f62c <USBD_LL_PrepareReceive>
 800c5d2:	e017      	b.n	800c604 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d00a      	beq.n	800c5f6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c5e6:	2b03      	cmp	r3, #3
 800c5e8:	d105      	bne.n	800c5f6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	68f8      	ldr	r0, [r7, #12]
 800c5f4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5f6:	2180      	movs	r1, #128	; 0x80
 800c5f8:	68f8      	ldr	r0, [r7, #12]
 800c5fa:	f002 ff6d 	bl	800f4d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f000 ff32 	bl	800d468 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d123      	bne.n	800c656 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c60e:	68f8      	ldr	r0, [r7, #12]
 800c610:	f7ff fe9b 	bl	800c34a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2200      	movs	r2, #0
 800c618:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c61c:	e01b      	b.n	800c656 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c624:	695b      	ldr	r3, [r3, #20]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d013      	beq.n	800c652 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c630:	2b03      	cmp	r3, #3
 800c632:	d10e      	bne.n	800c652 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c63a:	695b      	ldr	r3, [r3, #20]
 800c63c:	7afa      	ldrb	r2, [r7, #11]
 800c63e:	4611      	mov	r1, r2
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	4798      	blx	r3
 800c644:	4603      	mov	r3, r0
 800c646:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c648:	7dfb      	ldrb	r3, [r7, #23]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d003      	beq.n	800c656 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800c64e:	7dfb      	ldrb	r3, [r7, #23]
 800c650:	e002      	b.n	800c658 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c652:	2303      	movs	r3, #3
 800c654:	e000      	b.n	800c658 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800c656:	2300      	movs	r3, #0
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3718      	adds	r7, #24
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2200      	movs	r2, #0
 800c674:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2200      	movs	r2, #0
 800c682:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d009      	beq.n	800c6a4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	6852      	ldr	r2, [r2, #4]
 800c69c:	b2d2      	uxtb	r2, r2
 800c69e:	4611      	mov	r1, r2
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c6a4:	2340      	movs	r3, #64	; 0x40
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f002 fecf 	bl	800f44e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2240      	movs	r2, #64	; 0x40
 800c6bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c6c0:	2340      	movs	r3, #64	; 0x40
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	2180      	movs	r1, #128	; 0x80
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f002 fec1 	bl	800f44e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2240      	movs	r2, #64	; 0x40
 800c6d6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c6d8:	2300      	movs	r3, #0
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3708      	adds	r7, #8
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}

0800c6e2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c6e2:	b480      	push	{r7}
 800c6e4:	b083      	sub	sp, #12
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
 800c6ea:	460b      	mov	r3, r1
 800c6ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	78fa      	ldrb	r2, [r7, #3]
 800c6f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c6f4:	2300      	movs	r3, #0
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	370c      	adds	r7, #12
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr

0800c702 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c702:	b480      	push	{r7}
 800c704:	b083      	sub	sp, #12
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2204      	movs	r2, #4
 800c71a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c71e:	2300      	movs	r3, #0
}
 800c720:	4618      	mov	r0, r3
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr

0800c72c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b083      	sub	sp, #12
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c73a:	2b04      	cmp	r3, #4
 800c73c:	d105      	bne.n	800c74a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c74a:	2300      	movs	r3, #0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	370c      	adds	r7, #12
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c766:	2b03      	cmp	r3, #3
 800c768:	d10b      	bne.n	800c782 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c770:	69db      	ldr	r3, [r3, #28]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d005      	beq.n	800c782 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c77c:	69db      	ldr	r3, [r3, #28]
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c782:	2300      	movs	r3, #0
}
 800c784:	4618      	mov	r0, r3
 800c786:	3708      	adds	r7, #8
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b083      	sub	sp, #12
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	460b      	mov	r3, r1
 800c796:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	370c      	adds	r7, #12
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr

0800c7a6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c7a6:	b480      	push	{r7}
 800c7a8:	b083      	sub	sp, #12
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c7b2:	2300      	movs	r3, #0
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	370c      	adds	r7, #12
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr

0800c7c0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b083      	sub	sp, #12
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c7c8:	2300      	movs	r3, #0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	370c      	adds	r7, #12
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr

0800c7d6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b082      	sub	sp, #8
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d009      	beq.n	800c804 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	6852      	ldr	r2, [r2, #4]
 800c7fc:	b2d2      	uxtb	r2, r2
 800c7fe:	4611      	mov	r1, r2
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	4798      	blx	r3
  }

  return USBD_OK;
 800c804:	2300      	movs	r3, #0
}
 800c806:	4618      	mov	r0, r3
 800c808:	3708      	adds	r7, #8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c80e:	b480      	push	{r7}
 800c810:	b087      	sub	sp, #28
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	3301      	adds	r3, #1
 800c824:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c82c:	8a3b      	ldrh	r3, [r7, #16]
 800c82e:	021b      	lsls	r3, r3, #8
 800c830:	b21a      	sxth	r2, r3
 800c832:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c836:	4313      	orrs	r3, r2
 800c838:	b21b      	sxth	r3, r3
 800c83a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c83c:	89fb      	ldrh	r3, [r7, #14]
}
 800c83e:	4618      	mov	r0, r3
 800c840:	371c      	adds	r7, #28
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr
	...

0800c84c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c856:	2300      	movs	r3, #0
 800c858:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c862:	2b20      	cmp	r3, #32
 800c864:	d004      	beq.n	800c870 <USBD_StdDevReq+0x24>
 800c866:	2b40      	cmp	r3, #64	; 0x40
 800c868:	d002      	beq.n	800c870 <USBD_StdDevReq+0x24>
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00a      	beq.n	800c884 <USBD_StdDevReq+0x38>
 800c86e:	e050      	b.n	800c912 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	6839      	ldr	r1, [r7, #0]
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	4798      	blx	r3
 800c87e:	4603      	mov	r3, r0
 800c880:	73fb      	strb	r3, [r7, #15]
    break;
 800c882:	e04b      	b.n	800c91c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	785b      	ldrb	r3, [r3, #1]
 800c888:	2b09      	cmp	r3, #9
 800c88a:	d83c      	bhi.n	800c906 <USBD_StdDevReq+0xba>
 800c88c:	a201      	add	r2, pc, #4	; (adr r2, 800c894 <USBD_StdDevReq+0x48>)
 800c88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c892:	bf00      	nop
 800c894:	0800c8e9 	.word	0x0800c8e9
 800c898:	0800c8fd 	.word	0x0800c8fd
 800c89c:	0800c907 	.word	0x0800c907
 800c8a0:	0800c8f3 	.word	0x0800c8f3
 800c8a4:	0800c907 	.word	0x0800c907
 800c8a8:	0800c8c7 	.word	0x0800c8c7
 800c8ac:	0800c8bd 	.word	0x0800c8bd
 800c8b0:	0800c907 	.word	0x0800c907
 800c8b4:	0800c8df 	.word	0x0800c8df
 800c8b8:	0800c8d1 	.word	0x0800c8d1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c8bc:	6839      	ldr	r1, [r7, #0]
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 f9ce 	bl	800cc60 <USBD_GetDescriptor>
      break;
 800c8c4:	e024      	b.n	800c910 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c8c6:	6839      	ldr	r1, [r7, #0]
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f000 fb33 	bl	800cf34 <USBD_SetAddress>
      break;
 800c8ce:	e01f      	b.n	800c910 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c8d0:	6839      	ldr	r1, [r7, #0]
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 fb70 	bl	800cfb8 <USBD_SetConfig>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	73fb      	strb	r3, [r7, #15]
      break;
 800c8dc:	e018      	b.n	800c910 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c8de:	6839      	ldr	r1, [r7, #0]
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 fc0d 	bl	800d100 <USBD_GetConfig>
      break;
 800c8e6:	e013      	b.n	800c910 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c8e8:	6839      	ldr	r1, [r7, #0]
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 fc3c 	bl	800d168 <USBD_GetStatus>
      break;
 800c8f0:	e00e      	b.n	800c910 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c8f2:	6839      	ldr	r1, [r7, #0]
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 fc6a 	bl	800d1ce <USBD_SetFeature>
      break;
 800c8fa:	e009      	b.n	800c910 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c8fc:	6839      	ldr	r1, [r7, #0]
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 fc79 	bl	800d1f6 <USBD_ClrFeature>
      break;
 800c904:	e004      	b.n	800c910 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c906:	6839      	ldr	r1, [r7, #0]
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 fccf 	bl	800d2ac <USBD_CtlError>
      break;
 800c90e:	bf00      	nop
    }
    break;
 800c910:	e004      	b.n	800c91c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c912:	6839      	ldr	r1, [r7, #0]
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 fcc9 	bl	800d2ac <USBD_CtlError>
    break;
 800c91a:	bf00      	nop
  }

  return ret;
 800c91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3710      	adds	r7, #16
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop

0800c928 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c932:	2300      	movs	r3, #0
 800c934:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c93e:	2b20      	cmp	r3, #32
 800c940:	d003      	beq.n	800c94a <USBD_StdItfReq+0x22>
 800c942:	2b40      	cmp	r3, #64	; 0x40
 800c944:	d001      	beq.n	800c94a <USBD_StdItfReq+0x22>
 800c946:	2b00      	cmp	r3, #0
 800c948:	d12a      	bne.n	800c9a0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c950:	3b01      	subs	r3, #1
 800c952:	2b02      	cmp	r3, #2
 800c954:	d81d      	bhi.n	800c992 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	889b      	ldrh	r3, [r3, #4]
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	2b01      	cmp	r3, #1
 800c95e:	d813      	bhi.n	800c988 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	6839      	ldr	r1, [r7, #0]
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	4798      	blx	r3
 800c96e:	4603      	mov	r3, r0
 800c970:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	88db      	ldrh	r3, [r3, #6]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d110      	bne.n	800c99c <USBD_StdItfReq+0x74>
 800c97a:	7bfb      	ldrb	r3, [r7, #15]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d10d      	bne.n	800c99c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 fd5e 	bl	800d442 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c986:	e009      	b.n	800c99c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c988:	6839      	ldr	r1, [r7, #0]
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 fc8e 	bl	800d2ac <USBD_CtlError>
      break;
 800c990:	e004      	b.n	800c99c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c992:	6839      	ldr	r1, [r7, #0]
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f000 fc89 	bl	800d2ac <USBD_CtlError>
      break;
 800c99a:	e000      	b.n	800c99e <USBD_StdItfReq+0x76>
      break;
 800c99c:	bf00      	nop
    }
    break;
 800c99e:	e004      	b.n	800c9aa <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c9a0:	6839      	ldr	r1, [r7, #0]
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f000 fc82 	bl	800d2ac <USBD_CtlError>
    break;
 800c9a8:	bf00      	nop
  }

  return ret;
 800c9aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3710      	adds	r7, #16
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	889b      	ldrh	r3, [r3, #4]
 800c9c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9d0:	2b20      	cmp	r3, #32
 800c9d2:	d004      	beq.n	800c9de <USBD_StdEPReq+0x2a>
 800c9d4:	2b40      	cmp	r3, #64	; 0x40
 800c9d6:	d002      	beq.n	800c9de <USBD_StdEPReq+0x2a>
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00a      	beq.n	800c9f2 <USBD_StdEPReq+0x3e>
 800c9dc:	e135      	b.n	800cc4a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9e4:	689b      	ldr	r3, [r3, #8]
 800c9e6:	6839      	ldr	r1, [r7, #0]
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	4798      	blx	r3
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	73fb      	strb	r3, [r7, #15]
    break;
 800c9f0:	e130      	b.n	800cc54 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	785b      	ldrb	r3, [r3, #1]
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d03e      	beq.n	800ca78 <USBD_StdEPReq+0xc4>
 800c9fa:	2b03      	cmp	r3, #3
 800c9fc:	d002      	beq.n	800ca04 <USBD_StdEPReq+0x50>
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d077      	beq.n	800caf2 <USBD_StdEPReq+0x13e>
 800ca02:	e11c      	b.n	800cc3e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca0a:	2b02      	cmp	r3, #2
 800ca0c:	d002      	beq.n	800ca14 <USBD_StdEPReq+0x60>
 800ca0e:	2b03      	cmp	r3, #3
 800ca10:	d015      	beq.n	800ca3e <USBD_StdEPReq+0x8a>
 800ca12:	e02b      	b.n	800ca6c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca14:	7bbb      	ldrb	r3, [r7, #14]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00c      	beq.n	800ca34 <USBD_StdEPReq+0x80>
 800ca1a:	7bbb      	ldrb	r3, [r7, #14]
 800ca1c:	2b80      	cmp	r3, #128	; 0x80
 800ca1e:	d009      	beq.n	800ca34 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca20:	7bbb      	ldrb	r3, [r7, #14]
 800ca22:	4619      	mov	r1, r3
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f002 fd57 	bl	800f4d8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca2a:	2180      	movs	r1, #128	; 0x80
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f002 fd53 	bl	800f4d8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ca32:	e020      	b.n	800ca76 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800ca34:	6839      	ldr	r1, [r7, #0]
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f000 fc38 	bl	800d2ac <USBD_CtlError>
        break;
 800ca3c:	e01b      	b.n	800ca76 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	885b      	ldrh	r3, [r3, #2]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d10e      	bne.n	800ca64 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ca46:	7bbb      	ldrb	r3, [r7, #14]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d00b      	beq.n	800ca64 <USBD_StdEPReq+0xb0>
 800ca4c:	7bbb      	ldrb	r3, [r7, #14]
 800ca4e:	2b80      	cmp	r3, #128	; 0x80
 800ca50:	d008      	beq.n	800ca64 <USBD_StdEPReq+0xb0>
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	88db      	ldrh	r3, [r3, #6]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d104      	bne.n	800ca64 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca5a:	7bbb      	ldrb	r3, [r7, #14]
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f002 fd3a 	bl	800f4d8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 fcec 	bl	800d442 <USBD_CtlSendStatus>

        break;
 800ca6a:	e004      	b.n	800ca76 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 fc1c 	bl	800d2ac <USBD_CtlError>
        break;
 800ca74:	bf00      	nop
      }
      break;
 800ca76:	e0e7      	b.n	800cc48 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	d002      	beq.n	800ca88 <USBD_StdEPReq+0xd4>
 800ca82:	2b03      	cmp	r3, #3
 800ca84:	d015      	beq.n	800cab2 <USBD_StdEPReq+0xfe>
 800ca86:	e02d      	b.n	800cae4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca88:	7bbb      	ldrb	r3, [r7, #14]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00c      	beq.n	800caa8 <USBD_StdEPReq+0xf4>
 800ca8e:	7bbb      	ldrb	r3, [r7, #14]
 800ca90:	2b80      	cmp	r3, #128	; 0x80
 800ca92:	d009      	beq.n	800caa8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca94:	7bbb      	ldrb	r3, [r7, #14]
 800ca96:	4619      	mov	r1, r3
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f002 fd1d 	bl	800f4d8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca9e:	2180      	movs	r1, #128	; 0x80
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f002 fd19 	bl	800f4d8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800caa6:	e023      	b.n	800caf0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800caa8:	6839      	ldr	r1, [r7, #0]
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 fbfe 	bl	800d2ac <USBD_CtlError>
        break;
 800cab0:	e01e      	b.n	800caf0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	885b      	ldrh	r3, [r3, #2]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d119      	bne.n	800caee <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800caba:	7bbb      	ldrb	r3, [r7, #14]
 800cabc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d004      	beq.n	800cace <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cac4:	7bbb      	ldrb	r3, [r7, #14]
 800cac6:	4619      	mov	r1, r3
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f002 fd24 	bl	800f516 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 fcb7 	bl	800d442 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cada:	689b      	ldr	r3, [r3, #8]
 800cadc:	6839      	ldr	r1, [r7, #0]
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	4798      	blx	r3
        }
        break;
 800cae2:	e004      	b.n	800caee <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800cae4:	6839      	ldr	r1, [r7, #0]
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 fbe0 	bl	800d2ac <USBD_CtlError>
        break;
 800caec:	e000      	b.n	800caf0 <USBD_StdEPReq+0x13c>
        break;
 800caee:	bf00      	nop
      }
      break;
 800caf0:	e0aa      	b.n	800cc48 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caf8:	2b02      	cmp	r3, #2
 800cafa:	d002      	beq.n	800cb02 <USBD_StdEPReq+0x14e>
 800cafc:	2b03      	cmp	r3, #3
 800cafe:	d032      	beq.n	800cb66 <USBD_StdEPReq+0x1b2>
 800cb00:	e097      	b.n	800cc32 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb02:	7bbb      	ldrb	r3, [r7, #14]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d007      	beq.n	800cb18 <USBD_StdEPReq+0x164>
 800cb08:	7bbb      	ldrb	r3, [r7, #14]
 800cb0a:	2b80      	cmp	r3, #128	; 0x80
 800cb0c:	d004      	beq.n	800cb18 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800cb0e:	6839      	ldr	r1, [r7, #0]
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f000 fbcb 	bl	800d2ac <USBD_CtlError>
          break;
 800cb16:	e091      	b.n	800cc3c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	da0b      	bge.n	800cb38 <USBD_StdEPReq+0x184>
 800cb20:	7bbb      	ldrb	r3, [r7, #14]
 800cb22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb26:	4613      	mov	r3, r2
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4413      	add	r3, r2
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	3310      	adds	r3, #16
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	4413      	add	r3, r2
 800cb34:	3304      	adds	r3, #4
 800cb36:	e00b      	b.n	800cb50 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800cb38:	7bbb      	ldrb	r3, [r7, #14]
 800cb3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb3e:	4613      	mov	r3, r2
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	4413      	add	r3, r2
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	3304      	adds	r3, #4
 800cb50:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	2200      	movs	r2, #0
 800cb56:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	2202      	movs	r2, #2
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f000 fc15 	bl	800d38e <USBD_CtlSendData>
        break;
 800cb64:	e06a      	b.n	800cc3c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800cb66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	da11      	bge.n	800cb92 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cb6e:	7bbb      	ldrb	r3, [r7, #14]
 800cb70:	f003 020f 	and.w	r2, r3, #15
 800cb74:	6879      	ldr	r1, [r7, #4]
 800cb76:	4613      	mov	r3, r2
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	4413      	add	r3, r2
 800cb7c:	009b      	lsls	r3, r3, #2
 800cb7e:	440b      	add	r3, r1
 800cb80:	3324      	adds	r3, #36	; 0x24
 800cb82:	881b      	ldrh	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d117      	bne.n	800cbb8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800cb88:	6839      	ldr	r1, [r7, #0]
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 fb8e 	bl	800d2ac <USBD_CtlError>
            break;
 800cb90:	e054      	b.n	800cc3c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cb92:	7bbb      	ldrb	r3, [r7, #14]
 800cb94:	f003 020f 	and.w	r2, r3, #15
 800cb98:	6879      	ldr	r1, [r7, #4]
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	4413      	add	r3, r2
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	440b      	add	r3, r1
 800cba4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cba8:	881b      	ldrh	r3, [r3, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d104      	bne.n	800cbb8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800cbae:	6839      	ldr	r1, [r7, #0]
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f000 fb7b 	bl	800d2ac <USBD_CtlError>
            break;
 800cbb6:	e041      	b.n	800cc3c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	da0b      	bge.n	800cbd8 <USBD_StdEPReq+0x224>
 800cbc0:	7bbb      	ldrb	r3, [r7, #14]
 800cbc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	4413      	add	r3, r2
 800cbcc:	009b      	lsls	r3, r3, #2
 800cbce:	3310      	adds	r3, #16
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	4413      	add	r3, r2
 800cbd4:	3304      	adds	r3, #4
 800cbd6:	e00b      	b.n	800cbf0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800cbd8:	7bbb      	ldrb	r3, [r7, #14]
 800cbda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbde:	4613      	mov	r3, r2
 800cbe0:	009b      	lsls	r3, r3, #2
 800cbe2:	4413      	add	r3, r2
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	4413      	add	r3, r2
 800cbee:	3304      	adds	r3, #4
 800cbf0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cbf2:	7bbb      	ldrb	r3, [r7, #14]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d002      	beq.n	800cbfe <USBD_StdEPReq+0x24a>
 800cbf8:	7bbb      	ldrb	r3, [r7, #14]
 800cbfa:	2b80      	cmp	r3, #128	; 0x80
 800cbfc:	d103      	bne.n	800cc06 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	2200      	movs	r2, #0
 800cc02:	601a      	str	r2, [r3, #0]
 800cc04:	e00e      	b.n	800cc24 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cc06:	7bbb      	ldrb	r3, [r7, #14]
 800cc08:	4619      	mov	r1, r3
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f002 fca2 	bl	800f554 <USBD_LL_IsStallEP>
 800cc10:	4603      	mov	r3, r0
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d003      	beq.n	800cc1e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	2201      	movs	r2, #1
 800cc1a:	601a      	str	r2, [r3, #0]
 800cc1c:	e002      	b.n	800cc24 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	2200      	movs	r2, #0
 800cc22:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	2202      	movs	r2, #2
 800cc28:	4619      	mov	r1, r3
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f000 fbaf 	bl	800d38e <USBD_CtlSendData>
          break;
 800cc30:	e004      	b.n	800cc3c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800cc32:	6839      	ldr	r1, [r7, #0]
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 fb39 	bl	800d2ac <USBD_CtlError>
        break;
 800cc3a:	bf00      	nop
      }
      break;
 800cc3c:	e004      	b.n	800cc48 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800cc3e:	6839      	ldr	r1, [r7, #0]
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 fb33 	bl	800d2ac <USBD_CtlError>
      break;
 800cc46:	bf00      	nop
    }
    break;
 800cc48:	e004      	b.n	800cc54 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800cc4a:	6839      	ldr	r1, [r7, #0]
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 fb2d 	bl	800d2ac <USBD_CtlError>
    break;
 800cc52:	bf00      	nop
  }

  return ret;
 800cc54:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3710      	adds	r7, #16
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
	...

0800cc60 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cc72:	2300      	movs	r3, #0
 800cc74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	885b      	ldrh	r3, [r3, #2]
 800cc7a:	0a1b      	lsrs	r3, r3, #8
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	3b01      	subs	r3, #1
 800cc80:	2b06      	cmp	r3, #6
 800cc82:	f200 8128 	bhi.w	800ced6 <USBD_GetDescriptor+0x276>
 800cc86:	a201      	add	r2, pc, #4	; (adr r2, 800cc8c <USBD_GetDescriptor+0x2c>)
 800cc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc8c:	0800cca9 	.word	0x0800cca9
 800cc90:	0800ccc1 	.word	0x0800ccc1
 800cc94:	0800cd01 	.word	0x0800cd01
 800cc98:	0800ced7 	.word	0x0800ced7
 800cc9c:	0800ced7 	.word	0x0800ced7
 800cca0:	0800ce77 	.word	0x0800ce77
 800cca4:	0800cea3 	.word	0x0800cea3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	7c12      	ldrb	r2, [r2, #16]
 800ccb4:	f107 0108 	add.w	r1, r7, #8
 800ccb8:	4610      	mov	r0, r2
 800ccba:	4798      	blx	r3
 800ccbc:	60f8      	str	r0, [r7, #12]
    break;
 800ccbe:	e112      	b.n	800cee6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	7c1b      	ldrb	r3, [r3, #16]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d10d      	bne.n	800cce4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd0:	f107 0208 	add.w	r2, r7, #8
 800ccd4:	4610      	mov	r0, r2
 800ccd6:	4798      	blx	r3
 800ccd8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	2202      	movs	r2, #2
 800cce0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800cce2:	e100      	b.n	800cee6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccec:	f107 0208 	add.w	r2, r7, #8
 800ccf0:	4610      	mov	r0, r2
 800ccf2:	4798      	blx	r3
 800ccf4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	2202      	movs	r2, #2
 800ccfc:	701a      	strb	r2, [r3, #0]
    break;
 800ccfe:	e0f2      	b.n	800cee6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	885b      	ldrh	r3, [r3, #2]
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	2b05      	cmp	r3, #5
 800cd08:	f200 80ac 	bhi.w	800ce64 <USBD_GetDescriptor+0x204>
 800cd0c:	a201      	add	r2, pc, #4	; (adr r2, 800cd14 <USBD_GetDescriptor+0xb4>)
 800cd0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd12:	bf00      	nop
 800cd14:	0800cd2d 	.word	0x0800cd2d
 800cd18:	0800cd61 	.word	0x0800cd61
 800cd1c:	0800cd95 	.word	0x0800cd95
 800cd20:	0800cdc9 	.word	0x0800cdc9
 800cd24:	0800cdfd 	.word	0x0800cdfd
 800cd28:	0800ce31 	.word	0x0800ce31
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d00b      	beq.n	800cd50 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	7c12      	ldrb	r2, [r2, #16]
 800cd44:	f107 0108 	add.w	r1, r7, #8
 800cd48:	4610      	mov	r0, r2
 800cd4a:	4798      	blx	r3
 800cd4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd4e:	e091      	b.n	800ce74 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cd50:	6839      	ldr	r1, [r7, #0]
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f000 faaa 	bl	800d2ac <USBD_CtlError>
        err++;
 800cd58:	7afb      	ldrb	r3, [r7, #11]
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	72fb      	strb	r3, [r7, #11]
      break;
 800cd5e:	e089      	b.n	800ce74 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d00b      	beq.n	800cd84 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd72:	689b      	ldr	r3, [r3, #8]
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	7c12      	ldrb	r2, [r2, #16]
 800cd78:	f107 0108 	add.w	r1, r7, #8
 800cd7c:	4610      	mov	r0, r2
 800cd7e:	4798      	blx	r3
 800cd80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd82:	e077      	b.n	800ce74 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cd84:	6839      	ldr	r1, [r7, #0]
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f000 fa90 	bl	800d2ac <USBD_CtlError>
        err++;
 800cd8c:	7afb      	ldrb	r3, [r7, #11]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	72fb      	strb	r3, [r7, #11]
      break;
 800cd92:	e06f      	b.n	800ce74 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd9a:	68db      	ldr	r3, [r3, #12]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d00b      	beq.n	800cdb8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cda6:	68db      	ldr	r3, [r3, #12]
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	7c12      	ldrb	r2, [r2, #16]
 800cdac:	f107 0108 	add.w	r1, r7, #8
 800cdb0:	4610      	mov	r0, r2
 800cdb2:	4798      	blx	r3
 800cdb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cdb6:	e05d      	b.n	800ce74 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cdb8:	6839      	ldr	r1, [r7, #0]
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 fa76 	bl	800d2ac <USBD_CtlError>
        err++;
 800cdc0:	7afb      	ldrb	r3, [r7, #11]
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	72fb      	strb	r3, [r7, #11]
      break;
 800cdc6:	e055      	b.n	800ce74 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdce:	691b      	ldr	r3, [r3, #16]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d00b      	beq.n	800cdec <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdda:	691b      	ldr	r3, [r3, #16]
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	7c12      	ldrb	r2, [r2, #16]
 800cde0:	f107 0108 	add.w	r1, r7, #8
 800cde4:	4610      	mov	r0, r2
 800cde6:	4798      	blx	r3
 800cde8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cdea:	e043      	b.n	800ce74 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cdec:	6839      	ldr	r1, [r7, #0]
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 fa5c 	bl	800d2ac <USBD_CtlError>
        err++;
 800cdf4:	7afb      	ldrb	r3, [r7, #11]
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	72fb      	strb	r3, [r7, #11]
      break;
 800cdfa:	e03b      	b.n	800ce74 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce02:	695b      	ldr	r3, [r3, #20]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d00b      	beq.n	800ce20 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce0e:	695b      	ldr	r3, [r3, #20]
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	7c12      	ldrb	r2, [r2, #16]
 800ce14:	f107 0108 	add.w	r1, r7, #8
 800ce18:	4610      	mov	r0, r2
 800ce1a:	4798      	blx	r3
 800ce1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce1e:	e029      	b.n	800ce74 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ce20:	6839      	ldr	r1, [r7, #0]
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 fa42 	bl	800d2ac <USBD_CtlError>
        err++;
 800ce28:	7afb      	ldrb	r3, [r7, #11]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	72fb      	strb	r3, [r7, #11]
      break;
 800ce2e:	e021      	b.n	800ce74 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce36:	699b      	ldr	r3, [r3, #24]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d00b      	beq.n	800ce54 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce42:	699b      	ldr	r3, [r3, #24]
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	7c12      	ldrb	r2, [r2, #16]
 800ce48:	f107 0108 	add.w	r1, r7, #8
 800ce4c:	4610      	mov	r0, r2
 800ce4e:	4798      	blx	r3
 800ce50:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce52:	e00f      	b.n	800ce74 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ce54:	6839      	ldr	r1, [r7, #0]
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f000 fa28 	bl	800d2ac <USBD_CtlError>
        err++;
 800ce5c:	7afb      	ldrb	r3, [r7, #11]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	72fb      	strb	r3, [r7, #11]
      break;
 800ce62:	e007      	b.n	800ce74 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800ce64:	6839      	ldr	r1, [r7, #0]
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f000 fa20 	bl	800d2ac <USBD_CtlError>
      err++;
 800ce6c:	7afb      	ldrb	r3, [r7, #11]
 800ce6e:	3301      	adds	r3, #1
 800ce70:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800ce72:	bf00      	nop
    }
    break;
 800ce74:	e037      	b.n	800cee6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	7c1b      	ldrb	r3, [r3, #16]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d109      	bne.n	800ce92 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce86:	f107 0208 	add.w	r2, r7, #8
 800ce8a:	4610      	mov	r0, r2
 800ce8c:	4798      	blx	r3
 800ce8e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ce90:	e029      	b.n	800cee6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800ce92:	6839      	ldr	r1, [r7, #0]
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f000 fa09 	bl	800d2ac <USBD_CtlError>
      err++;
 800ce9a:	7afb      	ldrb	r3, [r7, #11]
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	72fb      	strb	r3, [r7, #11]
    break;
 800cea0:	e021      	b.n	800cee6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	7c1b      	ldrb	r3, [r3, #16]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d10d      	bne.n	800cec6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ceb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceb2:	f107 0208 	add.w	r2, r7, #8
 800ceb6:	4610      	mov	r0, r2
 800ceb8:	4798      	blx	r3
 800ceba:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	3301      	adds	r3, #1
 800cec0:	2207      	movs	r2, #7
 800cec2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800cec4:	e00f      	b.n	800cee6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800cec6:	6839      	ldr	r1, [r7, #0]
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f000 f9ef 	bl	800d2ac <USBD_CtlError>
      err++;
 800cece:	7afb      	ldrb	r3, [r7, #11]
 800ced0:	3301      	adds	r3, #1
 800ced2:	72fb      	strb	r3, [r7, #11]
    break;
 800ced4:	e007      	b.n	800cee6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800ced6:	6839      	ldr	r1, [r7, #0]
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f000 f9e7 	bl	800d2ac <USBD_CtlError>
    err++;
 800cede:	7afb      	ldrb	r3, [r7, #11]
 800cee0:	3301      	adds	r3, #1
 800cee2:	72fb      	strb	r3, [r7, #11]
    break;
 800cee4:	bf00      	nop
  }

  if (err != 0U)
 800cee6:	7afb      	ldrb	r3, [r7, #11]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d11e      	bne.n	800cf2a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	88db      	ldrh	r3, [r3, #6]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d016      	beq.n	800cf22 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800cef4:	893b      	ldrh	r3, [r7, #8]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d00e      	beq.n	800cf18 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	88da      	ldrh	r2, [r3, #6]
 800cefe:	893b      	ldrh	r3, [r7, #8]
 800cf00:	4293      	cmp	r3, r2
 800cf02:	bf28      	it	cs
 800cf04:	4613      	movcs	r3, r2
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800cf0a:	893b      	ldrh	r3, [r7, #8]
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	68f9      	ldr	r1, [r7, #12]
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f000 fa3c 	bl	800d38e <USBD_CtlSendData>
 800cf16:	e009      	b.n	800cf2c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800cf18:	6839      	ldr	r1, [r7, #0]
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 f9c6 	bl	800d2ac <USBD_CtlError>
 800cf20:	e004      	b.n	800cf2c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 fa8d 	bl	800d442 <USBD_CtlSendStatus>
 800cf28:	e000      	b.n	800cf2c <USBD_GetDescriptor+0x2cc>
    return;
 800cf2a:	bf00      	nop
    }
  }
}
 800cf2c:	3710      	adds	r7, #16
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop

0800cf34 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	889b      	ldrh	r3, [r3, #4]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d130      	bne.n	800cfa8 <USBD_SetAddress+0x74>
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	88db      	ldrh	r3, [r3, #6]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d12c      	bne.n	800cfa8 <USBD_SetAddress+0x74>
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	885b      	ldrh	r3, [r3, #2]
 800cf52:	2b7f      	cmp	r3, #127	; 0x7f
 800cf54:	d828      	bhi.n	800cfa8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	885b      	ldrh	r3, [r3, #2]
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf68:	2b03      	cmp	r3, #3
 800cf6a:	d104      	bne.n	800cf76 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800cf6c:	6839      	ldr	r1, [r7, #0]
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f000 f99c 	bl	800d2ac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf74:	e01c      	b.n	800cfb0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	7bfa      	ldrb	r2, [r7, #15]
 800cf7a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cf7e:	7bfb      	ldrb	r3, [r7, #15]
 800cf80:	4619      	mov	r1, r3
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f002 fb12 	bl	800f5ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 fa5a 	bl	800d442 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cf8e:	7bfb      	ldrb	r3, [r7, #15]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d004      	beq.n	800cf9e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2202      	movs	r2, #2
 800cf98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf9c:	e008      	b.n	800cfb0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfa6:	e003      	b.n	800cfb0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cfa8:	6839      	ldr	r1, [r7, #0]
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 f97e 	bl	800d2ac <USBD_CtlError>
  }
}
 800cfb0:	bf00      	nop
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	885b      	ldrh	r3, [r3, #2]
 800cfca:	b2da      	uxtb	r2, r3
 800cfcc:	4b4b      	ldr	r3, [pc, #300]	; (800d0fc <USBD_SetConfig+0x144>)
 800cfce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cfd0:	4b4a      	ldr	r3, [pc, #296]	; (800d0fc <USBD_SetConfig+0x144>)
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d905      	bls.n	800cfe4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cfd8:	6839      	ldr	r1, [r7, #0]
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f000 f966 	bl	800d2ac <USBD_CtlError>
    return USBD_FAIL;
 800cfe0:	2303      	movs	r3, #3
 800cfe2:	e087      	b.n	800d0f4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfea:	2b02      	cmp	r3, #2
 800cfec:	d002      	beq.n	800cff4 <USBD_SetConfig+0x3c>
 800cfee:	2b03      	cmp	r3, #3
 800cff0:	d025      	beq.n	800d03e <USBD_SetConfig+0x86>
 800cff2:	e071      	b.n	800d0d8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800cff4:	4b41      	ldr	r3, [pc, #260]	; (800d0fc <USBD_SetConfig+0x144>)
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d01c      	beq.n	800d036 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800cffc:	4b3f      	ldr	r3, [pc, #252]	; (800d0fc <USBD_SetConfig+0x144>)
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	461a      	mov	r2, r3
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800d006:	4b3d      	ldr	r3, [pc, #244]	; (800d0fc <USBD_SetConfig+0x144>)
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	4619      	mov	r1, r3
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f7ff f9a7 	bl	800c360 <USBD_SetClassConfig>
 800d012:	4603      	mov	r3, r0
 800d014:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800d016:	7bfb      	ldrb	r3, [r7, #15]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d004      	beq.n	800d026 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800d01c:	6839      	ldr	r1, [r7, #0]
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 f944 	bl	800d2ac <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800d024:	e065      	b.n	800d0f2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 fa0b 	bl	800d442 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2203      	movs	r2, #3
 800d030:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800d034:	e05d      	b.n	800d0f2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 fa03 	bl	800d442 <USBD_CtlSendStatus>
    break;
 800d03c:	e059      	b.n	800d0f2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800d03e:	4b2f      	ldr	r3, [pc, #188]	; (800d0fc <USBD_SetConfig+0x144>)
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d112      	bne.n	800d06c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2202      	movs	r2, #2
 800d04a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800d04e:	4b2b      	ldr	r3, [pc, #172]	; (800d0fc <USBD_SetConfig+0x144>)
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	461a      	mov	r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d058:	4b28      	ldr	r3, [pc, #160]	; (800d0fc <USBD_SetConfig+0x144>)
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	4619      	mov	r1, r3
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f7ff f99a 	bl	800c398 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 f9ec 	bl	800d442 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800d06a:	e042      	b.n	800d0f2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800d06c:	4b23      	ldr	r3, [pc, #140]	; (800d0fc <USBD_SetConfig+0x144>)
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	461a      	mov	r2, r3
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	429a      	cmp	r2, r3
 800d078:	d02a      	beq.n	800d0d0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	b2db      	uxtb	r3, r3
 800d080:	4619      	mov	r1, r3
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f7ff f988 	bl	800c398 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800d088:	4b1c      	ldr	r3, [pc, #112]	; (800d0fc <USBD_SetConfig+0x144>)
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	461a      	mov	r2, r3
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800d092:	4b1a      	ldr	r3, [pc, #104]	; (800d0fc <USBD_SetConfig+0x144>)
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	4619      	mov	r1, r3
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f7ff f961 	bl	800c360 <USBD_SetClassConfig>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800d0a2:	7bfb      	ldrb	r3, [r7, #15]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00f      	beq.n	800d0c8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800d0a8:	6839      	ldr	r1, [r7, #0]
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f000 f8fe 	bl	800d2ac <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	685b      	ldr	r3, [r3, #4]
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f7ff f96d 	bl	800c398 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2202      	movs	r2, #2
 800d0c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800d0c6:	e014      	b.n	800d0f2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 f9ba 	bl	800d442 <USBD_CtlSendStatus>
    break;
 800d0ce:	e010      	b.n	800d0f2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 f9b6 	bl	800d442 <USBD_CtlSendStatus>
    break;
 800d0d6:	e00c      	b.n	800d0f2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800d0d8:	6839      	ldr	r1, [r7, #0]
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 f8e6 	bl	800d2ac <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d0e0:	4b06      	ldr	r3, [pc, #24]	; (800d0fc <USBD_SetConfig+0x144>)
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f7ff f956 	bl	800c398 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800d0ec:	2303      	movs	r3, #3
 800d0ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d0f0:	bf00      	nop
  }

  return ret;
 800d0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3710      	adds	r7, #16
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	10000c80 	.word	0x10000c80

0800d100 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b082      	sub	sp, #8
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	88db      	ldrh	r3, [r3, #6]
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d004      	beq.n	800d11c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d112:	6839      	ldr	r1, [r7, #0]
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 f8c9 	bl	800d2ac <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800d11a:	e021      	b.n	800d160 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d122:	2b01      	cmp	r3, #1
 800d124:	db17      	blt.n	800d156 <USBD_GetConfig+0x56>
 800d126:	2b02      	cmp	r3, #2
 800d128:	dd02      	ble.n	800d130 <USBD_GetConfig+0x30>
 800d12a:	2b03      	cmp	r3, #3
 800d12c:	d00b      	beq.n	800d146 <USBD_GetConfig+0x46>
 800d12e:	e012      	b.n	800d156 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2200      	movs	r2, #0
 800d134:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	3308      	adds	r3, #8
 800d13a:	2201      	movs	r2, #1
 800d13c:	4619      	mov	r1, r3
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 f925 	bl	800d38e <USBD_CtlSendData>
      break;
 800d144:	e00c      	b.n	800d160 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	3304      	adds	r3, #4
 800d14a:	2201      	movs	r2, #1
 800d14c:	4619      	mov	r1, r3
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 f91d 	bl	800d38e <USBD_CtlSendData>
      break;
 800d154:	e004      	b.n	800d160 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800d156:	6839      	ldr	r1, [r7, #0]
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f000 f8a7 	bl	800d2ac <USBD_CtlError>
      break;
 800d15e:	bf00      	nop
}
 800d160:	bf00      	nop
 800d162:	3708      	adds	r7, #8
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d178:	3b01      	subs	r3, #1
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	d81e      	bhi.n	800d1bc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	88db      	ldrh	r3, [r3, #6]
 800d182:	2b02      	cmp	r3, #2
 800d184:	d004      	beq.n	800d190 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800d186:	6839      	ldr	r1, [r7, #0]
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 f88f 	bl	800d2ac <USBD_CtlError>
      break;
 800d18e:	e01a      	b.n	800d1c6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2201      	movs	r2, #1
 800d194:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d005      	beq.n	800d1ac <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	68db      	ldr	r3, [r3, #12]
 800d1a4:	f043 0202 	orr.w	r2, r3, #2
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	330c      	adds	r3, #12
 800d1b0:	2202      	movs	r2, #2
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 f8ea 	bl	800d38e <USBD_CtlSendData>
    break;
 800d1ba:	e004      	b.n	800d1c6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800d1bc:	6839      	ldr	r1, [r7, #0]
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 f874 	bl	800d2ac <USBD_CtlError>
    break;
 800d1c4:	bf00      	nop
  }
}
 800d1c6:	bf00      	nop
 800d1c8:	3708      	adds	r7, #8
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b082      	sub	sp, #8
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
 800d1d6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	885b      	ldrh	r3, [r3, #2]
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d106      	bne.n	800d1ee <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 f92a 	bl	800d442 <USBD_CtlSendStatus>
  }
}
 800d1ee:	bf00      	nop
 800d1f0:	3708      	adds	r7, #8
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}

0800d1f6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b082      	sub	sp, #8
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	6078      	str	r0, [r7, #4]
 800d1fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d206:	3b01      	subs	r3, #1
 800d208:	2b02      	cmp	r3, #2
 800d20a:	d80b      	bhi.n	800d224 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	885b      	ldrh	r3, [r3, #2]
 800d210:	2b01      	cmp	r3, #1
 800d212:	d10c      	bne.n	800d22e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 f910 	bl	800d442 <USBD_CtlSendStatus>
      }
      break;
 800d222:	e004      	b.n	800d22e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d224:	6839      	ldr	r1, [r7, #0]
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f000 f840 	bl	800d2ac <USBD_CtlError>
      break;
 800d22c:	e000      	b.n	800d230 <USBD_ClrFeature+0x3a>
      break;
 800d22e:	bf00      	nop
  }
}
 800d230:	bf00      	nop
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	781a      	ldrb	r2, [r3, #0]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	3301      	adds	r3, #1
 800d252:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	781a      	ldrb	r2, [r3, #0]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	3301      	adds	r3, #1
 800d260:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d262:	68f8      	ldr	r0, [r7, #12]
 800d264:	f7ff fad3 	bl	800c80e <SWAPBYTE>
 800d268:	4603      	mov	r3, r0
 800d26a:	461a      	mov	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	3301      	adds	r3, #1
 800d274:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	3301      	adds	r3, #1
 800d27a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d27c:	68f8      	ldr	r0, [r7, #12]
 800d27e:	f7ff fac6 	bl	800c80e <SWAPBYTE>
 800d282:	4603      	mov	r3, r0
 800d284:	461a      	mov	r2, r3
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	3301      	adds	r3, #1
 800d28e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	3301      	adds	r3, #1
 800d294:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d296:	68f8      	ldr	r0, [r7, #12]
 800d298:	f7ff fab9 	bl	800c80e <SWAPBYTE>
 800d29c:	4603      	mov	r3, r0
 800d29e:	461a      	mov	r2, r3
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	80da      	strh	r2, [r3, #6]
}
 800d2a4:	bf00      	nop
 800d2a6:	3710      	adds	r7, #16
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d2b6:	2180      	movs	r1, #128	; 0x80
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f002 f90d 	bl	800f4d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d2be:	2100      	movs	r1, #0
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f002 f909 	bl	800f4d8 <USBD_LL_StallEP>
}
 800d2c6:	bf00      	nop
 800d2c8:	3708      	adds	r7, #8
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}

0800d2ce <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d2ce:	b580      	push	{r7, lr}
 800d2d0:	b086      	sub	sp, #24
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	60f8      	str	r0, [r7, #12]
 800d2d6:	60b9      	str	r1, [r7, #8]
 800d2d8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d036      	beq.n	800d352 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d2e8:	6938      	ldr	r0, [r7, #16]
 800d2ea:	f000 f836 	bl	800d35a <USBD_GetLen>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	005b      	lsls	r3, r3, #1
 800d2f6:	b29a      	uxth	r2, r3
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d2fc:	7dfb      	ldrb	r3, [r7, #23]
 800d2fe:	68ba      	ldr	r2, [r7, #8]
 800d300:	4413      	add	r3, r2
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	7812      	ldrb	r2, [r2, #0]
 800d306:	701a      	strb	r2, [r3, #0]
  idx++;
 800d308:	7dfb      	ldrb	r3, [r7, #23]
 800d30a:	3301      	adds	r3, #1
 800d30c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d30e:	7dfb      	ldrb	r3, [r7, #23]
 800d310:	68ba      	ldr	r2, [r7, #8]
 800d312:	4413      	add	r3, r2
 800d314:	2203      	movs	r2, #3
 800d316:	701a      	strb	r2, [r3, #0]
  idx++;
 800d318:	7dfb      	ldrb	r3, [r7, #23]
 800d31a:	3301      	adds	r3, #1
 800d31c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d31e:	e013      	b.n	800d348 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d320:	7dfb      	ldrb	r3, [r7, #23]
 800d322:	68ba      	ldr	r2, [r7, #8]
 800d324:	4413      	add	r3, r2
 800d326:	693a      	ldr	r2, [r7, #16]
 800d328:	7812      	ldrb	r2, [r2, #0]
 800d32a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	3301      	adds	r3, #1
 800d330:	613b      	str	r3, [r7, #16]
    idx++;
 800d332:	7dfb      	ldrb	r3, [r7, #23]
 800d334:	3301      	adds	r3, #1
 800d336:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d338:	7dfb      	ldrb	r3, [r7, #23]
 800d33a:	68ba      	ldr	r2, [r7, #8]
 800d33c:	4413      	add	r3, r2
 800d33e:	2200      	movs	r2, #0
 800d340:	701a      	strb	r2, [r3, #0]
    idx++;
 800d342:	7dfb      	ldrb	r3, [r7, #23]
 800d344:	3301      	adds	r3, #1
 800d346:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d1e7      	bne.n	800d320 <USBD_GetString+0x52>
 800d350:	e000      	b.n	800d354 <USBD_GetString+0x86>
    return;
 800d352:	bf00      	nop
  }
}
 800d354:	3718      	adds	r7, #24
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}

0800d35a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d35a:	b480      	push	{r7}
 800d35c:	b085      	sub	sp, #20
 800d35e:	af00      	add	r7, sp, #0
 800d360:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d362:	2300      	movs	r3, #0
 800d364:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d36a:	e005      	b.n	800d378 <USBD_GetLen+0x1e>
  {
    len++;
 800d36c:	7bfb      	ldrb	r3, [r7, #15]
 800d36e:	3301      	adds	r3, #1
 800d370:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	3301      	adds	r3, #1
 800d376:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d1f5      	bne.n	800d36c <USBD_GetLen+0x12>
  }

  return len;
 800d380:	7bfb      	ldrb	r3, [r7, #15]
}
 800d382:	4618      	mov	r0, r3
 800d384:	3714      	adds	r7, #20
 800d386:	46bd      	mov	sp, r7
 800d388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38c:	4770      	bx	lr

0800d38e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d38e:	b580      	push	{r7, lr}
 800d390:	b084      	sub	sp, #16
 800d392:	af00      	add	r7, sp, #0
 800d394:	60f8      	str	r0, [r7, #12]
 800d396:	60b9      	str	r1, [r7, #8]
 800d398:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2202      	movs	r2, #2
 800d39e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	68ba      	ldr	r2, [r7, #8]
 800d3b2:	2100      	movs	r1, #0
 800d3b4:	68f8      	ldr	r0, [r7, #12]
 800d3b6:	f002 f918 	bl	800f5ea <USBD_LL_Transmit>

  return USBD_OK;
 800d3ba:	2300      	movs	r3, #0
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3710      	adds	r7, #16
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b084      	sub	sp, #16
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	60b9      	str	r1, [r7, #8]
 800d3ce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	68ba      	ldr	r2, [r7, #8]
 800d3d4:	2100      	movs	r1, #0
 800d3d6:	68f8      	ldr	r0, [r7, #12]
 800d3d8:	f002 f907 	bl	800f5ea <USBD_LL_Transmit>

  return USBD_OK;
 800d3dc:	2300      	movs	r3, #0
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b084      	sub	sp, #16
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	60f8      	str	r0, [r7, #12]
 800d3ee:	60b9      	str	r1, [r7, #8]
 800d3f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2203      	movs	r2, #3
 800d3f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	687a      	ldr	r2, [r7, #4]
 800d406:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	68ba      	ldr	r2, [r7, #8]
 800d40e:	2100      	movs	r1, #0
 800d410:	68f8      	ldr	r0, [r7, #12]
 800d412:	f002 f90b 	bl	800f62c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d416:	2300      	movs	r3, #0
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3710      	adds	r7, #16
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
 800d426:	60f8      	str	r0, [r7, #12]
 800d428:	60b9      	str	r1, [r7, #8]
 800d42a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	68ba      	ldr	r2, [r7, #8]
 800d430:	2100      	movs	r1, #0
 800d432:	68f8      	ldr	r0, [r7, #12]
 800d434:	f002 f8fa 	bl	800f62c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d438:	2300      	movs	r3, #0
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3710      	adds	r7, #16
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}

0800d442 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b082      	sub	sp, #8
 800d446:	af00      	add	r7, sp, #0
 800d448:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2204      	movs	r2, #4
 800d44e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d452:	2300      	movs	r3, #0
 800d454:	2200      	movs	r2, #0
 800d456:	2100      	movs	r1, #0
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f002 f8c6 	bl	800f5ea <USBD_LL_Transmit>

  return USBD_OK;
 800d45e:	2300      	movs	r3, #0
}
 800d460:	4618      	mov	r0, r3
 800d462:	3708      	adds	r7, #8
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2205      	movs	r2, #5
 800d474:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d478:	2300      	movs	r3, #0
 800d47a:	2200      	movs	r2, #0
 800d47c:	2100      	movs	r1, #0
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f002 f8d4 	bl	800f62c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d484:	2300      	movs	r3, #0
}
 800d486:	4618      	mov	r0, r3
 800d488:	3708      	adds	r7, #8
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}

0800d48e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d48e:	b480      	push	{r7}
 800d490:	b085      	sub	sp, #20
 800d492:	af00      	add	r7, sp, #0
 800d494:	4603      	mov	r3, r0
 800d496:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d498:	2300      	movs	r3, #0
 800d49a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d49c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d4a0:	2b84      	cmp	r3, #132	; 0x84
 800d4a2:	d005      	beq.n	800d4b0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d4a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	3303      	adds	r3, #3
 800d4ae:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3714      	adds	r7, #20
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr

0800d4be <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d4be:	b580      	push	{r7, lr}
 800d4c0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d4c2:	f000 fc89 	bl	800ddd8 <vTaskStartScheduler>
  
  return osOK;
 800d4c6:	2300      	movs	r3, #0
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4ce:	b089      	sub	sp, #36	; 0x24
 800d4d0:	af04      	add	r7, sp, #16
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	695b      	ldr	r3, [r3, #20]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d020      	beq.n	800d520 <osThreadCreate+0x54>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	699b      	ldr	r3, [r3, #24]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d01c      	beq.n	800d520 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	685c      	ldr	r4, [r3, #4]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681d      	ldr	r5, [r3, #0]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	691e      	ldr	r6, [r3, #16]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7ff ffc8 	bl	800d48e <makeFreeRtosPriority>
 800d4fe:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	695b      	ldr	r3, [r3, #20]
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d508:	9202      	str	r2, [sp, #8]
 800d50a:	9301      	str	r3, [sp, #4]
 800d50c:	9100      	str	r1, [sp, #0]
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	4632      	mov	r2, r6
 800d512:	4629      	mov	r1, r5
 800d514:	4620      	mov	r0, r4
 800d516:	f000 f8ed 	bl	800d6f4 <xTaskCreateStatic>
 800d51a:	4603      	mov	r3, r0
 800d51c:	60fb      	str	r3, [r7, #12]
 800d51e:	e01c      	b.n	800d55a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	685c      	ldr	r4, [r3, #4]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d52c:	b29e      	uxth	r6, r3
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d534:	4618      	mov	r0, r3
 800d536:	f7ff ffaa 	bl	800d48e <makeFreeRtosPriority>
 800d53a:	4602      	mov	r2, r0
 800d53c:	f107 030c 	add.w	r3, r7, #12
 800d540:	9301      	str	r3, [sp, #4]
 800d542:	9200      	str	r2, [sp, #0]
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	4632      	mov	r2, r6
 800d548:	4629      	mov	r1, r5
 800d54a:	4620      	mov	r0, r4
 800d54c:	f000 f92c 	bl	800d7a8 <xTaskCreate>
 800d550:	4603      	mov	r3, r0
 800d552:	2b01      	cmp	r3, #1
 800d554:	d001      	beq.n	800d55a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d556:	2300      	movs	r3, #0
 800d558:	e000      	b.n	800d55c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d55a:	68fb      	ldr	r3, [r7, #12]
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3714      	adds	r7, #20
 800d560:	46bd      	mov	sp, r7
 800d562:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d564 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d001      	beq.n	800d57a <osDelay+0x16>
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	e000      	b.n	800d57c <osDelay+0x18>
 800d57a:	2301      	movs	r3, #1
 800d57c:	4618      	mov	r0, r3
 800d57e:	f000 fad9 	bl	800db34 <vTaskDelay>
  
  return osOK;
 800d582:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d584:	4618      	mov	r0, r3
 800d586:	3710      	adds	r7, #16
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d58c:	b480      	push	{r7}
 800d58e:	b083      	sub	sp, #12
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f103 0208 	add.w	r2, r3, #8
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f103 0208 	add.w	r2, r3, #8
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f103 0208 	add.w	r2, r3, #8
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d5c0:	bf00      	nop
 800d5c2:	370c      	adds	r7, #12
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d5da:	bf00      	nop
 800d5dc:	370c      	adds	r7, #12
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e4:	4770      	bx	lr

0800d5e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d5e6:	b480      	push	{r7}
 800d5e8:	b085      	sub	sp, #20
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
 800d5ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	68fa      	ldr	r2, [r7, #12]
 800d5fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	689a      	ldr	r2, [r3, #8]
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	689b      	ldr	r3, [r3, #8]
 800d608:	683a      	ldr	r2, [r7, #0]
 800d60a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	683a      	ldr	r2, [r7, #0]
 800d610:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	1c5a      	adds	r2, r3, #1
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	601a      	str	r2, [r3, #0]
}
 800d622:	bf00      	nop
 800d624:	3714      	adds	r7, #20
 800d626:	46bd      	mov	sp, r7
 800d628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62c:	4770      	bx	lr

0800d62e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d62e:	b480      	push	{r7}
 800d630:	b085      	sub	sp, #20
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
 800d636:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d644:	d103      	bne.n	800d64e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	691b      	ldr	r3, [r3, #16]
 800d64a:	60fb      	str	r3, [r7, #12]
 800d64c:	e00c      	b.n	800d668 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	3308      	adds	r3, #8
 800d652:	60fb      	str	r3, [r7, #12]
 800d654:	e002      	b.n	800d65c <vListInsert+0x2e>
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	60fb      	str	r3, [r7, #12]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	68ba      	ldr	r2, [r7, #8]
 800d664:	429a      	cmp	r2, r3
 800d666:	d2f6      	bcs.n	800d656 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	685a      	ldr	r2, [r3, #4]
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	683a      	ldr	r2, [r7, #0]
 800d676:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	68fa      	ldr	r2, [r7, #12]
 800d67c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	683a      	ldr	r2, [r7, #0]
 800d682:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	1c5a      	adds	r2, r3, #1
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	601a      	str	r2, [r3, #0]
}
 800d694:	bf00      	nop
 800d696:	3714      	adds	r7, #20
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr

0800d6a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b085      	sub	sp, #20
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	691b      	ldr	r3, [r3, #16]
 800d6ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	6892      	ldr	r2, [r2, #8]
 800d6b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	689b      	ldr	r3, [r3, #8]
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	6852      	ldr	r2, [r2, #4]
 800d6c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d103      	bne.n	800d6d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	689a      	ldr	r2, [r3, #8]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	1e5a      	subs	r2, r3, #1
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3714      	adds	r7, #20
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr

0800d6f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b08e      	sub	sp, #56	; 0x38
 800d6f8:	af04      	add	r7, sp, #16
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	607a      	str	r2, [r7, #4]
 800d700:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d704:	2b00      	cmp	r3, #0
 800d706:	d109      	bne.n	800d71c <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70c:	f383 8811 	msr	BASEPRI, r3
 800d710:	f3bf 8f6f 	isb	sy
 800d714:	f3bf 8f4f 	dsb	sy
 800d718:	623b      	str	r3, [r7, #32]
 800d71a:	e7fe      	b.n	800d71a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800d71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d109      	bne.n	800d736 <xTaskCreateStatic+0x42>
 800d722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d726:	f383 8811 	msr	BASEPRI, r3
 800d72a:	f3bf 8f6f 	isb	sy
 800d72e:	f3bf 8f4f 	dsb	sy
 800d732:	61fb      	str	r3, [r7, #28]
 800d734:	e7fe      	b.n	800d734 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d736:	2364      	movs	r3, #100	; 0x64
 800d738:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	2b64      	cmp	r3, #100	; 0x64
 800d73e:	d009      	beq.n	800d754 <xTaskCreateStatic+0x60>
 800d740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d744:	f383 8811 	msr	BASEPRI, r3
 800d748:	f3bf 8f6f 	isb	sy
 800d74c:	f3bf 8f4f 	dsb	sy
 800d750:	61bb      	str	r3, [r7, #24]
 800d752:	e7fe      	b.n	800d752 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d754:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d01e      	beq.n	800d79a <xTaskCreateStatic+0xa6>
 800d75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d01b      	beq.n	800d79a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d764:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d76a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76e:	2202      	movs	r2, #2
 800d770:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d774:	2300      	movs	r3, #0
 800d776:	9303      	str	r3, [sp, #12]
 800d778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77a:	9302      	str	r3, [sp, #8]
 800d77c:	f107 0314 	add.w	r3, r7, #20
 800d780:	9301      	str	r3, [sp, #4]
 800d782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	687a      	ldr	r2, [r7, #4]
 800d78a:	68b9      	ldr	r1, [r7, #8]
 800d78c:	68f8      	ldr	r0, [r7, #12]
 800d78e:	f000 f850 	bl	800d832 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d792:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d794:	f000 f8e6 	bl	800d964 <prvAddNewTaskToReadyList>
 800d798:	e001      	b.n	800d79e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800d79a:	2300      	movs	r3, #0
 800d79c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d79e:	697b      	ldr	r3, [r7, #20]
	}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3728      	adds	r7, #40	; 0x28
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b08c      	sub	sp, #48	; 0x30
 800d7ac:	af04      	add	r7, sp, #16
 800d7ae:	60f8      	str	r0, [r7, #12]
 800d7b0:	60b9      	str	r1, [r7, #8]
 800d7b2:	603b      	str	r3, [r7, #0]
 800d7b4:	4613      	mov	r3, r2
 800d7b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d7b8:	88fb      	ldrh	r3, [r7, #6]
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f001 f891 	bl	800e8e4 <pvPortMalloc>
 800d7c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d00e      	beq.n	800d7e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d7ca:	2064      	movs	r0, #100	; 0x64
 800d7cc:	f001 f88a 	bl	800e8e4 <pvPortMalloc>
 800d7d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d003      	beq.n	800d7e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	697a      	ldr	r2, [r7, #20]
 800d7dc:	631a      	str	r2, [r3, #48]	; 0x30
 800d7de:	e005      	b.n	800d7ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d7e0:	6978      	ldr	r0, [r7, #20]
 800d7e2:	f001 f941 	bl	800ea68 <vPortFree>
 800d7e6:	e001      	b.n	800d7ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d7ec:	69fb      	ldr	r3, [r7, #28]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d017      	beq.n	800d822 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d7f2:	69fb      	ldr	r3, [r7, #28]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d7fa:	88fa      	ldrh	r2, [r7, #6]
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	9303      	str	r3, [sp, #12]
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	9302      	str	r3, [sp, #8]
 800d804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d806:	9301      	str	r3, [sp, #4]
 800d808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80a:	9300      	str	r3, [sp, #0]
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	68b9      	ldr	r1, [r7, #8]
 800d810:	68f8      	ldr	r0, [r7, #12]
 800d812:	f000 f80e 	bl	800d832 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d816:	69f8      	ldr	r0, [r7, #28]
 800d818:	f000 f8a4 	bl	800d964 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d81c:	2301      	movs	r3, #1
 800d81e:	61bb      	str	r3, [r7, #24]
 800d820:	e002      	b.n	800d828 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d826:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d828:	69bb      	ldr	r3, [r7, #24]
	}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3720      	adds	r7, #32
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}

0800d832 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d832:	b580      	push	{r7, lr}
 800d834:	b088      	sub	sp, #32
 800d836:	af00      	add	r7, sp, #0
 800d838:	60f8      	str	r0, [r7, #12]
 800d83a:	60b9      	str	r1, [r7, #8]
 800d83c:	607a      	str	r2, [r7, #4]
 800d83e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d842:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	461a      	mov	r2, r3
 800d84a:	21a5      	movs	r1, #165	; 0xa5
 800d84c:	f001 ffaf 	bl	800f7ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d85a:	3b01      	subs	r3, #1
 800d85c:	009b      	lsls	r3, r3, #2
 800d85e:	4413      	add	r3, r2
 800d860:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d862:	69bb      	ldr	r3, [r7, #24]
 800d864:	f023 0307 	bic.w	r3, r3, #7
 800d868:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d86a:	69bb      	ldr	r3, [r7, #24]
 800d86c:	f003 0307 	and.w	r3, r3, #7
 800d870:	2b00      	cmp	r3, #0
 800d872:	d009      	beq.n	800d888 <prvInitialiseNewTask+0x56>
 800d874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d878:	f383 8811 	msr	BASEPRI, r3
 800d87c:	f3bf 8f6f 	isb	sy
 800d880:	f3bf 8f4f 	dsb	sy
 800d884:	617b      	str	r3, [r7, #20]
 800d886:	e7fe      	b.n	800d886 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800d888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d88a:	69ba      	ldr	r2, [r7, #24]
 800d88c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d01f      	beq.n	800d8d4 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d894:	2300      	movs	r3, #0
 800d896:	61fb      	str	r3, [r7, #28]
 800d898:	e012      	b.n	800d8c0 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d89a:	68ba      	ldr	r2, [r7, #8]
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	4413      	add	r3, r2
 800d8a0:	7819      	ldrb	r1, [r3, #0]
 800d8a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8a4:	69fb      	ldr	r3, [r7, #28]
 800d8a6:	4413      	add	r3, r2
 800d8a8:	3334      	adds	r3, #52	; 0x34
 800d8aa:	460a      	mov	r2, r1
 800d8ac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d8ae:	68ba      	ldr	r2, [r7, #8]
 800d8b0:	69fb      	ldr	r3, [r7, #28]
 800d8b2:	4413      	add	r3, r2
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d006      	beq.n	800d8c8 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8ba:	69fb      	ldr	r3, [r7, #28]
 800d8bc:	3301      	adds	r3, #1
 800d8be:	61fb      	str	r3, [r7, #28]
 800d8c0:	69fb      	ldr	r3, [r7, #28]
 800d8c2:	2b0f      	cmp	r3, #15
 800d8c4:	d9e9      	bls.n	800d89a <prvInitialiseNewTask+0x68>
 800d8c6:	e000      	b.n	800d8ca <prvInitialiseNewTask+0x98>
			{
				break;
 800d8c8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d8d2:	e003      	b.n	800d8dc <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8de:	2b06      	cmp	r3, #6
 800d8e0:	d901      	bls.n	800d8e6 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d8e2:	2306      	movs	r3, #6
 800d8e4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8ea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8f0:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800d8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fa:	3304      	adds	r3, #4
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7ff fe65 	bl	800d5cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d904:	3318      	adds	r3, #24
 800d906:	4618      	mov	r0, r3
 800d908:	f7ff fe60 	bl	800d5cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d90e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d910:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d914:	f1c3 0207 	rsb	r2, r3, #7
 800d918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d920:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800d922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d924:	2200      	movs	r2, #0
 800d926:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92a:	2200      	movs	r2, #0
 800d92c:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d930:	2200      	movs	r2, #0
 800d932:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800d936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d938:	2200      	movs	r2, #0
 800d93a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d93e:	683a      	ldr	r2, [r7, #0]
 800d940:	68f9      	ldr	r1, [r7, #12]
 800d942:	69b8      	ldr	r0, [r7, #24]
 800d944:	f000 fdcc 	bl	800e4e0 <pxPortInitialiseStack>
 800d948:	4602      	mov	r2, r0
 800d94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d950:	2b00      	cmp	r3, #0
 800d952:	d002      	beq.n	800d95a <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d958:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d95a:	bf00      	nop
 800d95c:	3720      	adds	r7, #32
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}
	...

0800d964 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d96c:	f000 fede 	bl	800e72c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d970:	4b2c      	ldr	r3, [pc, #176]	; (800da24 <prvAddNewTaskToReadyList+0xc0>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	3301      	adds	r3, #1
 800d976:	4a2b      	ldr	r2, [pc, #172]	; (800da24 <prvAddNewTaskToReadyList+0xc0>)
 800d978:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d97a:	4b2b      	ldr	r3, [pc, #172]	; (800da28 <prvAddNewTaskToReadyList+0xc4>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d109      	bne.n	800d996 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d982:	4a29      	ldr	r2, [pc, #164]	; (800da28 <prvAddNewTaskToReadyList+0xc4>)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d988:	4b26      	ldr	r3, [pc, #152]	; (800da24 <prvAddNewTaskToReadyList+0xc0>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d110      	bne.n	800d9b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d990:	f000 fc82 	bl	800e298 <prvInitialiseTaskLists>
 800d994:	e00d      	b.n	800d9b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d996:	4b25      	ldr	r3, [pc, #148]	; (800da2c <prvAddNewTaskToReadyList+0xc8>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d109      	bne.n	800d9b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d99e:	4b22      	ldr	r3, [pc, #136]	; (800da28 <prvAddNewTaskToReadyList+0xc4>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d802      	bhi.n	800d9b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d9ac:	4a1e      	ldr	r2, [pc, #120]	; (800da28 <prvAddNewTaskToReadyList+0xc4>)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d9b2:	4b1f      	ldr	r3, [pc, #124]	; (800da30 <prvAddNewTaskToReadyList+0xcc>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	4a1d      	ldr	r2, [pc, #116]	; (800da30 <prvAddNewTaskToReadyList+0xcc>)
 800d9ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d9bc:	4b1c      	ldr	r3, [pc, #112]	; (800da30 <prvAddNewTaskToReadyList+0xcc>)
 800d9be:	681a      	ldr	r2, [r3, #0]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	409a      	lsls	r2, r3
 800d9cc:	4b19      	ldr	r3, [pc, #100]	; (800da34 <prvAddNewTaskToReadyList+0xd0>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	4a18      	ldr	r2, [pc, #96]	; (800da34 <prvAddNewTaskToReadyList+0xd0>)
 800d9d4:	6013      	str	r3, [r2, #0]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9da:	4613      	mov	r3, r2
 800d9dc:	009b      	lsls	r3, r3, #2
 800d9de:	4413      	add	r3, r2
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	4a15      	ldr	r2, [pc, #84]	; (800da38 <prvAddNewTaskToReadyList+0xd4>)
 800d9e4:	441a      	add	r2, r3
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	3304      	adds	r3, #4
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	4610      	mov	r0, r2
 800d9ee:	f7ff fdfa 	bl	800d5e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d9f2:	f000 fec9 	bl	800e788 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d9f6:	4b0d      	ldr	r3, [pc, #52]	; (800da2c <prvAddNewTaskToReadyList+0xc8>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d00e      	beq.n	800da1c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d9fe:	4b0a      	ldr	r3, [pc, #40]	; (800da28 <prvAddNewTaskToReadyList+0xc4>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da08:	429a      	cmp	r2, r3
 800da0a:	d207      	bcs.n	800da1c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800da0c:	4b0b      	ldr	r3, [pc, #44]	; (800da3c <prvAddNewTaskToReadyList+0xd8>)
 800da0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da12:	601a      	str	r2, [r3, #0]
 800da14:	f3bf 8f4f 	dsb	sy
 800da18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da1c:	bf00      	nop
 800da1e:	3708      	adds	r7, #8
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	10000d84 	.word	0x10000d84
 800da28:	10000c84 	.word	0x10000c84
 800da2c:	10000d90 	.word	0x10000d90
 800da30:	10000da0 	.word	0x10000da0
 800da34:	10000d8c 	.word	0x10000d8c
 800da38:	10000c88 	.word	0x10000c88
 800da3c:	e000ed04 	.word	0xe000ed04

0800da40 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800da40:	b580      	push	{r7, lr}
 800da42:	b08a      	sub	sp, #40	; 0x28
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800da4a:	2300      	movs	r3, #0
 800da4c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d109      	bne.n	800da68 <vTaskDelayUntil+0x28>
 800da54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da58:	f383 8811 	msr	BASEPRI, r3
 800da5c:	f3bf 8f6f 	isb	sy
 800da60:	f3bf 8f4f 	dsb	sy
 800da64:	617b      	str	r3, [r7, #20]
 800da66:	e7fe      	b.n	800da66 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d109      	bne.n	800da82 <vTaskDelayUntil+0x42>
 800da6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da72:	f383 8811 	msr	BASEPRI, r3
 800da76:	f3bf 8f6f 	isb	sy
 800da7a:	f3bf 8f4f 	dsb	sy
 800da7e:	613b      	str	r3, [r7, #16]
 800da80:	e7fe      	b.n	800da80 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800da82:	4b29      	ldr	r3, [pc, #164]	; (800db28 <vTaskDelayUntil+0xe8>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d009      	beq.n	800da9e <vTaskDelayUntil+0x5e>
 800da8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8e:	f383 8811 	msr	BASEPRI, r3
 800da92:	f3bf 8f6f 	isb	sy
 800da96:	f3bf 8f4f 	dsb	sy
 800da9a:	60fb      	str	r3, [r7, #12]
 800da9c:	e7fe      	b.n	800da9c <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800da9e:	f000 f9fb 	bl	800de98 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800daa2:	4b22      	ldr	r3, [pc, #136]	; (800db2c <vTaskDelayUntil+0xec>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	683a      	ldr	r2, [r7, #0]
 800daae:	4413      	add	r3, r2
 800dab0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	6a3a      	ldr	r2, [r7, #32]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d20b      	bcs.n	800dad4 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	69fa      	ldr	r2, [r7, #28]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d211      	bcs.n	800daea <vTaskDelayUntil+0xaa>
 800dac6:	69fa      	ldr	r2, [r7, #28]
 800dac8:	6a3b      	ldr	r3, [r7, #32]
 800daca:	429a      	cmp	r2, r3
 800dacc:	d90d      	bls.n	800daea <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800dace:	2301      	movs	r3, #1
 800dad0:	627b      	str	r3, [r7, #36]	; 0x24
 800dad2:	e00a      	b.n	800daea <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	69fa      	ldr	r2, [r7, #28]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d303      	bcc.n	800dae6 <vTaskDelayUntil+0xa6>
 800dade:	69fa      	ldr	r2, [r7, #28]
 800dae0:	6a3b      	ldr	r3, [r7, #32]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d901      	bls.n	800daea <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800dae6:	2301      	movs	r3, #1
 800dae8:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	69fa      	ldr	r2, [r7, #28]
 800daee:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800daf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d006      	beq.n	800db04 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800daf6:	69fa      	ldr	r2, [r7, #28]
 800daf8:	6a3b      	ldr	r3, [r7, #32]
 800dafa:	1ad3      	subs	r3, r2, r3
 800dafc:	2100      	movs	r1, #0
 800dafe:	4618      	mov	r0, r3
 800db00:	f000 fc84 	bl	800e40c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800db04:	f000 f9d6 	bl	800deb4 <xTaskResumeAll>
 800db08:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800db0a:	69bb      	ldr	r3, [r7, #24]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d107      	bne.n	800db20 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800db10:	4b07      	ldr	r3, [pc, #28]	; (800db30 <vTaskDelayUntil+0xf0>)
 800db12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db16:	601a      	str	r2, [r3, #0]
 800db18:	f3bf 8f4f 	dsb	sy
 800db1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db20:	bf00      	nop
 800db22:	3728      	adds	r7, #40	; 0x28
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}
 800db28:	10000dac 	.word	0x10000dac
 800db2c:	10000d88 	.word	0x10000d88
 800db30:	e000ed04 	.word	0xe000ed04

0800db34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800db3c:	2300      	movs	r3, #0
 800db3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d016      	beq.n	800db74 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800db46:	4b13      	ldr	r3, [pc, #76]	; (800db94 <vTaskDelay+0x60>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d009      	beq.n	800db62 <vTaskDelay+0x2e>
 800db4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db52:	f383 8811 	msr	BASEPRI, r3
 800db56:	f3bf 8f6f 	isb	sy
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	60bb      	str	r3, [r7, #8]
 800db60:	e7fe      	b.n	800db60 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800db62:	f000 f999 	bl	800de98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800db66:	2100      	movs	r1, #0
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f000 fc4f 	bl	800e40c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800db6e:	f000 f9a1 	bl	800deb4 <xTaskResumeAll>
 800db72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d107      	bne.n	800db8a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800db7a:	4b07      	ldr	r3, [pc, #28]	; (800db98 <vTaskDelay+0x64>)
 800db7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db80:	601a      	str	r2, [r3, #0]
 800db82:	f3bf 8f4f 	dsb	sy
 800db86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db8a:	bf00      	nop
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
 800db92:	bf00      	nop
 800db94:	10000dac 	.word	0x10000dac
 800db98:	e000ed04 	.word	0xe000ed04

0800db9c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800dba4:	f000 fdc2 	bl	800e72c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d102      	bne.n	800dbb4 <vTaskSuspend+0x18>
 800dbae:	4b3c      	ldr	r3, [pc, #240]	; (800dca0 <vTaskSuspend+0x104>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	e000      	b.n	800dbb6 <vTaskSuspend+0x1a>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	3304      	adds	r3, #4
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f7ff fd6f 	bl	800d6a0 <uxListRemove>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d115      	bne.n	800dbf4 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbcc:	4935      	ldr	r1, [pc, #212]	; (800dca4 <vTaskSuspend+0x108>)
 800dbce:	4613      	mov	r3, r2
 800dbd0:	009b      	lsls	r3, r3, #2
 800dbd2:	4413      	add	r3, r2
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	440b      	add	r3, r1
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d10a      	bne.n	800dbf4 <vTaskSuspend+0x58>
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	fa02 f303 	lsl.w	r3, r2, r3
 800dbe8:	43da      	mvns	r2, r3
 800dbea:	4b2f      	ldr	r3, [pc, #188]	; (800dca8 <vTaskSuspend+0x10c>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	4013      	ands	r3, r2
 800dbf0:	4a2d      	ldr	r2, [pc, #180]	; (800dca8 <vTaskSuspend+0x10c>)
 800dbf2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d004      	beq.n	800dc06 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	3318      	adds	r3, #24
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7ff fd4d 	bl	800d6a0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	3304      	adds	r3, #4
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	4827      	ldr	r0, [pc, #156]	; (800dcac <vTaskSuspend+0x110>)
 800dc0e:	f7ff fcea 	bl	800d5e6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d103      	bne.n	800dc26 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2200      	movs	r2, #0
 800dc22:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800dc26:	f000 fdaf 	bl	800e788 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800dc2a:	4b21      	ldr	r3, [pc, #132]	; (800dcb0 <vTaskSuspend+0x114>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d005      	beq.n	800dc3e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800dc32:	f000 fd7b 	bl	800e72c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800dc36:	f000 fbc9 	bl	800e3cc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800dc3a:	f000 fda5 	bl	800e788 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800dc3e:	4b18      	ldr	r3, [pc, #96]	; (800dca0 <vTaskSuspend+0x104>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	68fa      	ldr	r2, [r7, #12]
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d126      	bne.n	800dc96 <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 800dc48:	4b19      	ldr	r3, [pc, #100]	; (800dcb0 <vTaskSuspend+0x114>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d016      	beq.n	800dc7e <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800dc50:	4b18      	ldr	r3, [pc, #96]	; (800dcb4 <vTaskSuspend+0x118>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d009      	beq.n	800dc6c <vTaskSuspend+0xd0>
 800dc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc5c:	f383 8811 	msr	BASEPRI, r3
 800dc60:	f3bf 8f6f 	isb	sy
 800dc64:	f3bf 8f4f 	dsb	sy
 800dc68:	60bb      	str	r3, [r7, #8]
 800dc6a:	e7fe      	b.n	800dc6a <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 800dc6c:	4b12      	ldr	r3, [pc, #72]	; (800dcb8 <vTaskSuspend+0x11c>)
 800dc6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc72:	601a      	str	r2, [r3, #0]
 800dc74:	f3bf 8f4f 	dsb	sy
 800dc78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc7c:	e00b      	b.n	800dc96 <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800dc7e:	4b0b      	ldr	r3, [pc, #44]	; (800dcac <vTaskSuspend+0x110>)
 800dc80:	681a      	ldr	r2, [r3, #0]
 800dc82:	4b0e      	ldr	r3, [pc, #56]	; (800dcbc <vTaskSuspend+0x120>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d103      	bne.n	800dc92 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 800dc8a:	4b05      	ldr	r3, [pc, #20]	; (800dca0 <vTaskSuspend+0x104>)
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	601a      	str	r2, [r3, #0]
	}
 800dc90:	e001      	b.n	800dc96 <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 800dc92:	f000 fa73 	bl	800e17c <vTaskSwitchContext>
	}
 800dc96:	bf00      	nop
 800dc98:	3710      	adds	r7, #16
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	10000c84 	.word	0x10000c84
 800dca4:	10000c88 	.word	0x10000c88
 800dca8:	10000d8c 	.word	0x10000d8c
 800dcac:	10000d70 	.word	0x10000d70
 800dcb0:	10000d90 	.word	0x10000d90
 800dcb4:	10000dac 	.word	0x10000dac
 800dcb8:	e000ed04 	.word	0xe000ed04
 800dcbc:	10000d84 	.word	0x10000d84

0800dcc0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b087      	sub	sp, #28
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d109      	bne.n	800dcea <prvTaskIsTaskSuspended+0x2a>
 800dcd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcda:	f383 8811 	msr	BASEPRI, r3
 800dcde:	f3bf 8f6f 	isb	sy
 800dce2:	f3bf 8f4f 	dsb	sy
 800dce6:	60fb      	str	r3, [r7, #12]
 800dce8:	e7fe      	b.n	800dce8 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	695b      	ldr	r3, [r3, #20]
 800dcee:	4a0a      	ldr	r2, [pc, #40]	; (800dd18 <prvTaskIsTaskSuspended+0x58>)
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d10a      	bne.n	800dd0a <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcf8:	4a08      	ldr	r2, [pc, #32]	; (800dd1c <prvTaskIsTaskSuspended+0x5c>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d005      	beq.n	800dd0a <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d101      	bne.n	800dd0a <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 800dd06:	2301      	movs	r3, #1
 800dd08:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dd0a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	371c      	adds	r7, #28
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr
 800dd18:	10000d70 	.word	0x10000d70
 800dd1c:	10000d44 	.word	0x10000d44

0800dd20 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d109      	bne.n	800dd46 <vTaskResume+0x26>
 800dd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd36:	f383 8811 	msr	BASEPRI, r3
 800dd3a:	f3bf 8f6f 	isb	sy
 800dd3e:	f3bf 8f4f 	dsb	sy
 800dd42:	60bb      	str	r3, [r7, #8]
 800dd44:	e7fe      	b.n	800dd44 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800dd46:	4b20      	ldr	r3, [pc, #128]	; (800ddc8 <vTaskResume+0xa8>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	68fa      	ldr	r2, [r7, #12]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d037      	beq.n	800ddc0 <vTaskResume+0xa0>
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d034      	beq.n	800ddc0 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 800dd56:	f000 fce9 	bl	800e72c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f7ff ffb0 	bl	800dcc0 <prvTaskIsTaskSuspended>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d02a      	beq.n	800ddbc <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	3304      	adds	r3, #4
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7ff fc98 	bl	800d6a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd74:	2201      	movs	r2, #1
 800dd76:	409a      	lsls	r2, r3
 800dd78:	4b14      	ldr	r3, [pc, #80]	; (800ddcc <vTaskResume+0xac>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	4a13      	ldr	r2, [pc, #76]	; (800ddcc <vTaskResume+0xac>)
 800dd80:	6013      	str	r3, [r2, #0]
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd86:	4613      	mov	r3, r2
 800dd88:	009b      	lsls	r3, r3, #2
 800dd8a:	4413      	add	r3, r2
 800dd8c:	009b      	lsls	r3, r3, #2
 800dd8e:	4a10      	ldr	r2, [pc, #64]	; (800ddd0 <vTaskResume+0xb0>)
 800dd90:	441a      	add	r2, r3
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	3304      	adds	r3, #4
 800dd96:	4619      	mov	r1, r3
 800dd98:	4610      	mov	r0, r2
 800dd9a:	f7ff fc24 	bl	800d5e6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dda2:	4b09      	ldr	r3, [pc, #36]	; (800ddc8 <vTaskResume+0xa8>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d307      	bcc.n	800ddbc <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800ddac:	4b09      	ldr	r3, [pc, #36]	; (800ddd4 <vTaskResume+0xb4>)
 800ddae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddb2:	601a      	str	r2, [r3, #0]
 800ddb4:	f3bf 8f4f 	dsb	sy
 800ddb8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800ddbc:	f000 fce4 	bl	800e788 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ddc0:	bf00      	nop
 800ddc2:	3710      	adds	r7, #16
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}
 800ddc8:	10000c84 	.word	0x10000c84
 800ddcc:	10000d8c 	.word	0x10000d8c
 800ddd0:	10000c88 	.word	0x10000c88
 800ddd4:	e000ed04 	.word	0xe000ed04

0800ddd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b08a      	sub	sp, #40	; 0x28
 800dddc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ddde:	2300      	movs	r3, #0
 800dde0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dde2:	2300      	movs	r3, #0
 800dde4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dde6:	463a      	mov	r2, r7
 800dde8:	1d39      	adds	r1, r7, #4
 800ddea:	f107 0308 	add.w	r3, r7, #8
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7f2 fb9a 	bl	8000528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ddf4:	6839      	ldr	r1, [r7, #0]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	68ba      	ldr	r2, [r7, #8]
 800ddfa:	9202      	str	r2, [sp, #8]
 800ddfc:	9301      	str	r3, [sp, #4]
 800ddfe:	2300      	movs	r3, #0
 800de00:	9300      	str	r3, [sp, #0]
 800de02:	2300      	movs	r3, #0
 800de04:	460a      	mov	r2, r1
 800de06:	491e      	ldr	r1, [pc, #120]	; (800de80 <vTaskStartScheduler+0xa8>)
 800de08:	481e      	ldr	r0, [pc, #120]	; (800de84 <vTaskStartScheduler+0xac>)
 800de0a:	f7ff fc73 	bl	800d6f4 <xTaskCreateStatic>
 800de0e:	4602      	mov	r2, r0
 800de10:	4b1d      	ldr	r3, [pc, #116]	; (800de88 <vTaskStartScheduler+0xb0>)
 800de12:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800de14:	4b1c      	ldr	r3, [pc, #112]	; (800de88 <vTaskStartScheduler+0xb0>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d002      	beq.n	800de22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800de1c:	2301      	movs	r3, #1
 800de1e:	617b      	str	r3, [r7, #20]
 800de20:	e001      	b.n	800de26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800de22:	2300      	movs	r3, #0
 800de24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	2b01      	cmp	r3, #1
 800de2a:	d117      	bne.n	800de5c <vTaskStartScheduler+0x84>
 800de2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de30:	f383 8811 	msr	BASEPRI, r3
 800de34:	f3bf 8f6f 	isb	sy
 800de38:	f3bf 8f4f 	dsb	sy
 800de3c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800de3e:	4b13      	ldr	r3, [pc, #76]	; (800de8c <vTaskStartScheduler+0xb4>)
 800de40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800de46:	4b12      	ldr	r3, [pc, #72]	; (800de90 <vTaskStartScheduler+0xb8>)
 800de48:	2201      	movs	r2, #1
 800de4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800de4c:	4b11      	ldr	r3, [pc, #68]	; (800de94 <vTaskStartScheduler+0xbc>)
 800de4e:	2200      	movs	r2, #0
 800de50:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800de52:	f7f2 fb45 	bl	80004e0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800de56:	f000 fbcb 	bl	800e5f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800de5a:	e00d      	b.n	800de78 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de62:	d109      	bne.n	800de78 <vTaskStartScheduler+0xa0>
 800de64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de68:	f383 8811 	msr	BASEPRI, r3
 800de6c:	f3bf 8f6f 	isb	sy
 800de70:	f3bf 8f4f 	dsb	sy
 800de74:	60fb      	str	r3, [r7, #12]
 800de76:	e7fe      	b.n	800de76 <vTaskStartScheduler+0x9e>
}
 800de78:	bf00      	nop
 800de7a:	3718      	adds	r7, #24
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	0800fe48 	.word	0x0800fe48
 800de84:	0800e269 	.word	0x0800e269
 800de88:	10000da8 	.word	0x10000da8
 800de8c:	10000da4 	.word	0x10000da4
 800de90:	10000d90 	.word	0x10000d90
 800de94:	10000d88 	.word	0x10000d88

0800de98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800de98:	b480      	push	{r7}
 800de9a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800de9c:	4b04      	ldr	r3, [pc, #16]	; (800deb0 <vTaskSuspendAll+0x18>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	3301      	adds	r3, #1
 800dea2:	4a03      	ldr	r2, [pc, #12]	; (800deb0 <vTaskSuspendAll+0x18>)
 800dea4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800dea6:	bf00      	nop
 800dea8:	46bd      	mov	sp, r7
 800deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deae:	4770      	bx	lr
 800deb0:	10000dac 	.word	0x10000dac

0800deb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b084      	sub	sp, #16
 800deb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800deba:	2300      	movs	r3, #0
 800debc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800debe:	2300      	movs	r3, #0
 800dec0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dec2:	4b41      	ldr	r3, [pc, #260]	; (800dfc8 <xTaskResumeAll+0x114>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d109      	bne.n	800dede <xTaskResumeAll+0x2a>
 800deca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dece:	f383 8811 	msr	BASEPRI, r3
 800ded2:	f3bf 8f6f 	isb	sy
 800ded6:	f3bf 8f4f 	dsb	sy
 800deda:	603b      	str	r3, [r7, #0]
 800dedc:	e7fe      	b.n	800dedc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dede:	f000 fc25 	bl	800e72c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dee2:	4b39      	ldr	r3, [pc, #228]	; (800dfc8 <xTaskResumeAll+0x114>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	3b01      	subs	r3, #1
 800dee8:	4a37      	ldr	r2, [pc, #220]	; (800dfc8 <xTaskResumeAll+0x114>)
 800deea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800deec:	4b36      	ldr	r3, [pc, #216]	; (800dfc8 <xTaskResumeAll+0x114>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d161      	bne.n	800dfb8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800def4:	4b35      	ldr	r3, [pc, #212]	; (800dfcc <xTaskResumeAll+0x118>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d05d      	beq.n	800dfb8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800defc:	e02e      	b.n	800df5c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800defe:	4b34      	ldr	r3, [pc, #208]	; (800dfd0 <xTaskResumeAll+0x11c>)
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	68db      	ldr	r3, [r3, #12]
 800df04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	3318      	adds	r3, #24
 800df0a:	4618      	mov	r0, r3
 800df0c:	f7ff fbc8 	bl	800d6a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	3304      	adds	r3, #4
 800df14:	4618      	mov	r0, r3
 800df16:	f7ff fbc3 	bl	800d6a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df1e:	2201      	movs	r2, #1
 800df20:	409a      	lsls	r2, r3
 800df22:	4b2c      	ldr	r3, [pc, #176]	; (800dfd4 <xTaskResumeAll+0x120>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	4313      	orrs	r3, r2
 800df28:	4a2a      	ldr	r2, [pc, #168]	; (800dfd4 <xTaskResumeAll+0x120>)
 800df2a:	6013      	str	r3, [r2, #0]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df30:	4613      	mov	r3, r2
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	4413      	add	r3, r2
 800df36:	009b      	lsls	r3, r3, #2
 800df38:	4a27      	ldr	r2, [pc, #156]	; (800dfd8 <xTaskResumeAll+0x124>)
 800df3a:	441a      	add	r2, r3
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	3304      	adds	r3, #4
 800df40:	4619      	mov	r1, r3
 800df42:	4610      	mov	r0, r2
 800df44:	f7ff fb4f 	bl	800d5e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df4c:	4b23      	ldr	r3, [pc, #140]	; (800dfdc <xTaskResumeAll+0x128>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df52:	429a      	cmp	r2, r3
 800df54:	d302      	bcc.n	800df5c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800df56:	4b22      	ldr	r3, [pc, #136]	; (800dfe0 <xTaskResumeAll+0x12c>)
 800df58:	2201      	movs	r2, #1
 800df5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df5c:	4b1c      	ldr	r3, [pc, #112]	; (800dfd0 <xTaskResumeAll+0x11c>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d1cc      	bne.n	800defe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d001      	beq.n	800df6e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800df6a:	f000 fa2f 	bl	800e3cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800df6e:	4b1d      	ldr	r3, [pc, #116]	; (800dfe4 <xTaskResumeAll+0x130>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d010      	beq.n	800df9c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800df7a:	f000 f847 	bl	800e00c <xTaskIncrementTick>
 800df7e:	4603      	mov	r3, r0
 800df80:	2b00      	cmp	r3, #0
 800df82:	d002      	beq.n	800df8a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800df84:	4b16      	ldr	r3, [pc, #88]	; (800dfe0 <xTaskResumeAll+0x12c>)
 800df86:	2201      	movs	r2, #1
 800df88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	3b01      	subs	r3, #1
 800df8e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d1f1      	bne.n	800df7a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800df96:	4b13      	ldr	r3, [pc, #76]	; (800dfe4 <xTaskResumeAll+0x130>)
 800df98:	2200      	movs	r2, #0
 800df9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800df9c:	4b10      	ldr	r3, [pc, #64]	; (800dfe0 <xTaskResumeAll+0x12c>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d009      	beq.n	800dfb8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dfa8:	4b0f      	ldr	r3, [pc, #60]	; (800dfe8 <xTaskResumeAll+0x134>)
 800dfaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfae:	601a      	str	r2, [r3, #0]
 800dfb0:	f3bf 8f4f 	dsb	sy
 800dfb4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dfb8:	f000 fbe6 	bl	800e788 <vPortExitCritical>

	return xAlreadyYielded;
 800dfbc:	68bb      	ldr	r3, [r7, #8]
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3710      	adds	r7, #16
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	bf00      	nop
 800dfc8:	10000dac 	.word	0x10000dac
 800dfcc:	10000d84 	.word	0x10000d84
 800dfd0:	10000d44 	.word	0x10000d44
 800dfd4:	10000d8c 	.word	0x10000d8c
 800dfd8:	10000c88 	.word	0x10000c88
 800dfdc:	10000c84 	.word	0x10000c84
 800dfe0:	10000d98 	.word	0x10000d98
 800dfe4:	10000d94 	.word	0x10000d94
 800dfe8:	e000ed04 	.word	0xe000ed04

0800dfec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dff2:	4b05      	ldr	r3, [pc, #20]	; (800e008 <xTaskGetTickCount+0x1c>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dff8:	687b      	ldr	r3, [r7, #4]
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	370c      	adds	r7, #12
 800dffe:	46bd      	mov	sp, r7
 800e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e004:	4770      	bx	lr
 800e006:	bf00      	nop
 800e008:	10000d88 	.word	0x10000d88

0800e00c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b086      	sub	sp, #24
 800e010:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e012:	2300      	movs	r3, #0
 800e014:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e016:	4b4e      	ldr	r3, [pc, #312]	; (800e150 <xTaskIncrementTick+0x144>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	f040 8087 	bne.w	800e12e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e020:	4b4c      	ldr	r3, [pc, #304]	; (800e154 <xTaskIncrementTick+0x148>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	3301      	adds	r3, #1
 800e026:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e028:	4a4a      	ldr	r2, [pc, #296]	; (800e154 <xTaskIncrementTick+0x148>)
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d11f      	bne.n	800e074 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800e034:	4b48      	ldr	r3, [pc, #288]	; (800e158 <xTaskIncrementTick+0x14c>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d009      	beq.n	800e052 <xTaskIncrementTick+0x46>
 800e03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e042:	f383 8811 	msr	BASEPRI, r3
 800e046:	f3bf 8f6f 	isb	sy
 800e04a:	f3bf 8f4f 	dsb	sy
 800e04e:	603b      	str	r3, [r7, #0]
 800e050:	e7fe      	b.n	800e050 <xTaskIncrementTick+0x44>
 800e052:	4b41      	ldr	r3, [pc, #260]	; (800e158 <xTaskIncrementTick+0x14c>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	60fb      	str	r3, [r7, #12]
 800e058:	4b40      	ldr	r3, [pc, #256]	; (800e15c <xTaskIncrementTick+0x150>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	4a3e      	ldr	r2, [pc, #248]	; (800e158 <xTaskIncrementTick+0x14c>)
 800e05e:	6013      	str	r3, [r2, #0]
 800e060:	4a3e      	ldr	r2, [pc, #248]	; (800e15c <xTaskIncrementTick+0x150>)
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	6013      	str	r3, [r2, #0]
 800e066:	4b3e      	ldr	r3, [pc, #248]	; (800e160 <xTaskIncrementTick+0x154>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	3301      	adds	r3, #1
 800e06c:	4a3c      	ldr	r2, [pc, #240]	; (800e160 <xTaskIncrementTick+0x154>)
 800e06e:	6013      	str	r3, [r2, #0]
 800e070:	f000 f9ac 	bl	800e3cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e074:	4b3b      	ldr	r3, [pc, #236]	; (800e164 <xTaskIncrementTick+0x158>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	693a      	ldr	r2, [r7, #16]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d348      	bcc.n	800e110 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e07e:	4b36      	ldr	r3, [pc, #216]	; (800e158 <xTaskIncrementTick+0x14c>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d104      	bne.n	800e092 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e088:	4b36      	ldr	r3, [pc, #216]	; (800e164 <xTaskIncrementTick+0x158>)
 800e08a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e08e:	601a      	str	r2, [r3, #0]
					break;
 800e090:	e03e      	b.n	800e110 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e092:	4b31      	ldr	r3, [pc, #196]	; (800e158 <xTaskIncrementTick+0x14c>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	68db      	ldr	r3, [r3, #12]
 800e09a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e0a2:	693a      	ldr	r2, [r7, #16]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d203      	bcs.n	800e0b2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e0aa:	4a2e      	ldr	r2, [pc, #184]	; (800e164 <xTaskIncrementTick+0x158>)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e0b0:	e02e      	b.n	800e110 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	3304      	adds	r3, #4
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7ff faf2 	bl	800d6a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d004      	beq.n	800e0ce <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	3318      	adds	r3, #24
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7ff fae9 	bl	800d6a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	409a      	lsls	r2, r3
 800e0d6:	4b24      	ldr	r3, [pc, #144]	; (800e168 <xTaskIncrementTick+0x15c>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	4a22      	ldr	r2, [pc, #136]	; (800e168 <xTaskIncrementTick+0x15c>)
 800e0de:	6013      	str	r3, [r2, #0]
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0e4:	4613      	mov	r3, r2
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	4413      	add	r3, r2
 800e0ea:	009b      	lsls	r3, r3, #2
 800e0ec:	4a1f      	ldr	r2, [pc, #124]	; (800e16c <xTaskIncrementTick+0x160>)
 800e0ee:	441a      	add	r2, r3
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	3304      	adds	r3, #4
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	4610      	mov	r0, r2
 800e0f8:	f7ff fa75 	bl	800d5e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e100:	4b1b      	ldr	r3, [pc, #108]	; (800e170 <xTaskIncrementTick+0x164>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e106:	429a      	cmp	r2, r3
 800e108:	d3b9      	bcc.n	800e07e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800e10a:	2301      	movs	r3, #1
 800e10c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e10e:	e7b6      	b.n	800e07e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e110:	4b17      	ldr	r3, [pc, #92]	; (800e170 <xTaskIncrementTick+0x164>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e116:	4915      	ldr	r1, [pc, #84]	; (800e16c <xTaskIncrementTick+0x160>)
 800e118:	4613      	mov	r3, r2
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	4413      	add	r3, r2
 800e11e:	009b      	lsls	r3, r3, #2
 800e120:	440b      	add	r3, r1
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2b01      	cmp	r3, #1
 800e126:	d907      	bls.n	800e138 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800e128:	2301      	movs	r3, #1
 800e12a:	617b      	str	r3, [r7, #20]
 800e12c:	e004      	b.n	800e138 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e12e:	4b11      	ldr	r3, [pc, #68]	; (800e174 <xTaskIncrementTick+0x168>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	3301      	adds	r3, #1
 800e134:	4a0f      	ldr	r2, [pc, #60]	; (800e174 <xTaskIncrementTick+0x168>)
 800e136:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e138:	4b0f      	ldr	r3, [pc, #60]	; (800e178 <xTaskIncrementTick+0x16c>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d001      	beq.n	800e144 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800e140:	2301      	movs	r3, #1
 800e142:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e144:	697b      	ldr	r3, [r7, #20]
}
 800e146:	4618      	mov	r0, r3
 800e148:	3718      	adds	r7, #24
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}
 800e14e:	bf00      	nop
 800e150:	10000dac 	.word	0x10000dac
 800e154:	10000d88 	.word	0x10000d88
 800e158:	10000d3c 	.word	0x10000d3c
 800e15c:	10000d40 	.word	0x10000d40
 800e160:	10000d9c 	.word	0x10000d9c
 800e164:	10000da4 	.word	0x10000da4
 800e168:	10000d8c 	.word	0x10000d8c
 800e16c:	10000c88 	.word	0x10000c88
 800e170:	10000c84 	.word	0x10000c84
 800e174:	10000d94 	.word	0x10000d94
 800e178:	10000d98 	.word	0x10000d98

0800e17c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b086      	sub	sp, #24
 800e180:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e182:	4b32      	ldr	r3, [pc, #200]	; (800e24c <vTaskSwitchContext+0xd0>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d003      	beq.n	800e192 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e18a:	4b31      	ldr	r3, [pc, #196]	; (800e250 <vTaskSwitchContext+0xd4>)
 800e18c:	2201      	movs	r2, #1
 800e18e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e190:	e057      	b.n	800e242 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 800e192:	4b2f      	ldr	r3, [pc, #188]	; (800e250 <vTaskSwitchContext+0xd4>)
 800e194:	2200      	movs	r2, #0
 800e196:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e198:	f7f2 f9ac 	bl	80004f4 <getRunTimeCounterValue>
 800e19c:	4602      	mov	r2, r0
 800e19e:	4b2d      	ldr	r3, [pc, #180]	; (800e254 <vTaskSwitchContext+0xd8>)
 800e1a0:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e1a2:	4b2c      	ldr	r3, [pc, #176]	; (800e254 <vTaskSwitchContext+0xd8>)
 800e1a4:	681a      	ldr	r2, [r3, #0]
 800e1a6:	4b2c      	ldr	r3, [pc, #176]	; (800e258 <vTaskSwitchContext+0xdc>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d909      	bls.n	800e1c2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e1ae:	4b2b      	ldr	r3, [pc, #172]	; (800e25c <vTaskSwitchContext+0xe0>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800e1b4:	4a27      	ldr	r2, [pc, #156]	; (800e254 <vTaskSwitchContext+0xd8>)
 800e1b6:	6810      	ldr	r0, [r2, #0]
 800e1b8:	4a27      	ldr	r2, [pc, #156]	; (800e258 <vTaskSwitchContext+0xdc>)
 800e1ba:	6812      	ldr	r2, [r2, #0]
 800e1bc:	1a82      	subs	r2, r0, r2
 800e1be:	440a      	add	r2, r1
 800e1c0:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e1c2:	4b24      	ldr	r3, [pc, #144]	; (800e254 <vTaskSwitchContext+0xd8>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4a24      	ldr	r2, [pc, #144]	; (800e258 <vTaskSwitchContext+0xdc>)
 800e1c8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1ca:	4b25      	ldr	r3, [pc, #148]	; (800e260 <vTaskSwitchContext+0xe4>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	fab3 f383 	clz	r3, r3
 800e1d6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e1d8:	7afb      	ldrb	r3, [r7, #11]
 800e1da:	f1c3 031f 	rsb	r3, r3, #31
 800e1de:	617b      	str	r3, [r7, #20]
 800e1e0:	4920      	ldr	r1, [pc, #128]	; (800e264 <vTaskSwitchContext+0xe8>)
 800e1e2:	697a      	ldr	r2, [r7, #20]
 800e1e4:	4613      	mov	r3, r2
 800e1e6:	009b      	lsls	r3, r3, #2
 800e1e8:	4413      	add	r3, r2
 800e1ea:	009b      	lsls	r3, r3, #2
 800e1ec:	440b      	add	r3, r1
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d109      	bne.n	800e208 <vTaskSwitchContext+0x8c>
	__asm volatile
 800e1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f8:	f383 8811 	msr	BASEPRI, r3
 800e1fc:	f3bf 8f6f 	isb	sy
 800e200:	f3bf 8f4f 	dsb	sy
 800e204:	607b      	str	r3, [r7, #4]
 800e206:	e7fe      	b.n	800e206 <vTaskSwitchContext+0x8a>
 800e208:	697a      	ldr	r2, [r7, #20]
 800e20a:	4613      	mov	r3, r2
 800e20c:	009b      	lsls	r3, r3, #2
 800e20e:	4413      	add	r3, r2
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	4a14      	ldr	r2, [pc, #80]	; (800e264 <vTaskSwitchContext+0xe8>)
 800e214:	4413      	add	r3, r2
 800e216:	613b      	str	r3, [r7, #16]
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	685b      	ldr	r3, [r3, #4]
 800e21c:	685a      	ldr	r2, [r3, #4]
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	605a      	str	r2, [r3, #4]
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	685a      	ldr	r2, [r3, #4]
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	3308      	adds	r3, #8
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d104      	bne.n	800e238 <vTaskSwitchContext+0xbc>
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	685a      	ldr	r2, [r3, #4]
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	605a      	str	r2, [r3, #4]
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	4a07      	ldr	r2, [pc, #28]	; (800e25c <vTaskSwitchContext+0xe0>)
 800e240:	6013      	str	r3, [r2, #0]
}
 800e242:	bf00      	nop
 800e244:	3718      	adds	r7, #24
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	10000dac 	.word	0x10000dac
 800e250:	10000d98 	.word	0x10000d98
 800e254:	10000db4 	.word	0x10000db4
 800e258:	10000db0 	.word	0x10000db0
 800e25c:	10000c84 	.word	0x10000c84
 800e260:	10000d8c 	.word	0x10000d8c
 800e264:	10000c88 	.word	0x10000c88

0800e268 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e270:	f000 f852 	bl	800e318 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e274:	4b06      	ldr	r3, [pc, #24]	; (800e290 <prvIdleTask+0x28>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	2b01      	cmp	r3, #1
 800e27a:	d9f9      	bls.n	800e270 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e27c:	4b05      	ldr	r3, [pc, #20]	; (800e294 <prvIdleTask+0x2c>)
 800e27e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e282:	601a      	str	r2, [r3, #0]
 800e284:	f3bf 8f4f 	dsb	sy
 800e288:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e28c:	e7f0      	b.n	800e270 <prvIdleTask+0x8>
 800e28e:	bf00      	nop
 800e290:	10000c88 	.word	0x10000c88
 800e294:	e000ed04 	.word	0xe000ed04

0800e298 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e29e:	2300      	movs	r3, #0
 800e2a0:	607b      	str	r3, [r7, #4]
 800e2a2:	e00c      	b.n	800e2be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	4613      	mov	r3, r2
 800e2a8:	009b      	lsls	r3, r3, #2
 800e2aa:	4413      	add	r3, r2
 800e2ac:	009b      	lsls	r3, r3, #2
 800e2ae:	4a12      	ldr	r2, [pc, #72]	; (800e2f8 <prvInitialiseTaskLists+0x60>)
 800e2b0:	4413      	add	r3, r2
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7ff f96a 	bl	800d58c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	607b      	str	r3, [r7, #4]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2b06      	cmp	r3, #6
 800e2c2:	d9ef      	bls.n	800e2a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e2c4:	480d      	ldr	r0, [pc, #52]	; (800e2fc <prvInitialiseTaskLists+0x64>)
 800e2c6:	f7ff f961 	bl	800d58c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e2ca:	480d      	ldr	r0, [pc, #52]	; (800e300 <prvInitialiseTaskLists+0x68>)
 800e2cc:	f7ff f95e 	bl	800d58c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e2d0:	480c      	ldr	r0, [pc, #48]	; (800e304 <prvInitialiseTaskLists+0x6c>)
 800e2d2:	f7ff f95b 	bl	800d58c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e2d6:	480c      	ldr	r0, [pc, #48]	; (800e308 <prvInitialiseTaskLists+0x70>)
 800e2d8:	f7ff f958 	bl	800d58c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e2dc:	480b      	ldr	r0, [pc, #44]	; (800e30c <prvInitialiseTaskLists+0x74>)
 800e2de:	f7ff f955 	bl	800d58c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e2e2:	4b0b      	ldr	r3, [pc, #44]	; (800e310 <prvInitialiseTaskLists+0x78>)
 800e2e4:	4a05      	ldr	r2, [pc, #20]	; (800e2fc <prvInitialiseTaskLists+0x64>)
 800e2e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e2e8:	4b0a      	ldr	r3, [pc, #40]	; (800e314 <prvInitialiseTaskLists+0x7c>)
 800e2ea:	4a05      	ldr	r2, [pc, #20]	; (800e300 <prvInitialiseTaskLists+0x68>)
 800e2ec:	601a      	str	r2, [r3, #0]
}
 800e2ee:	bf00      	nop
 800e2f0:	3708      	adds	r7, #8
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	10000c88 	.word	0x10000c88
 800e2fc:	10000d14 	.word	0x10000d14
 800e300:	10000d28 	.word	0x10000d28
 800e304:	10000d44 	.word	0x10000d44
 800e308:	10000d58 	.word	0x10000d58
 800e30c:	10000d70 	.word	0x10000d70
 800e310:	10000d3c 	.word	0x10000d3c
 800e314:	10000d40 	.word	0x10000d40

0800e318 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b082      	sub	sp, #8
 800e31c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e31e:	e019      	b.n	800e354 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e320:	f000 fa04 	bl	800e72c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e324:	4b0f      	ldr	r3, [pc, #60]	; (800e364 <prvCheckTasksWaitingTermination+0x4c>)
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	68db      	ldr	r3, [r3, #12]
 800e32a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	3304      	adds	r3, #4
 800e330:	4618      	mov	r0, r3
 800e332:	f7ff f9b5 	bl	800d6a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e336:	4b0c      	ldr	r3, [pc, #48]	; (800e368 <prvCheckTasksWaitingTermination+0x50>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	3b01      	subs	r3, #1
 800e33c:	4a0a      	ldr	r2, [pc, #40]	; (800e368 <prvCheckTasksWaitingTermination+0x50>)
 800e33e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e340:	4b0a      	ldr	r3, [pc, #40]	; (800e36c <prvCheckTasksWaitingTermination+0x54>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	3b01      	subs	r3, #1
 800e346:	4a09      	ldr	r2, [pc, #36]	; (800e36c <prvCheckTasksWaitingTermination+0x54>)
 800e348:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e34a:	f000 fa1d 	bl	800e788 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 f80e 	bl	800e370 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e354:	4b05      	ldr	r3, [pc, #20]	; (800e36c <prvCheckTasksWaitingTermination+0x54>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d1e1      	bne.n	800e320 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e35c:	bf00      	nop
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}
 800e364:	10000d58 	.word	0x10000d58
 800e368:	10000d84 	.word	0x10000d84
 800e36c:	10000d6c 	.word	0x10000d6c

0800e370 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d108      	bne.n	800e394 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e386:	4618      	mov	r0, r3
 800e388:	f000 fb6e 	bl	800ea68 <vPortFree>
				vPortFree( pxTCB );
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f000 fb6b 	bl	800ea68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e392:	e017      	b.n	800e3c4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	d103      	bne.n	800e3a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f000 fb62 	bl	800ea68 <vPortFree>
	}
 800e3a4:	e00e      	b.n	800e3c4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800e3ac:	2b02      	cmp	r3, #2
 800e3ae:	d009      	beq.n	800e3c4 <prvDeleteTCB+0x54>
 800e3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b4:	f383 8811 	msr	BASEPRI, r3
 800e3b8:	f3bf 8f6f 	isb	sy
 800e3bc:	f3bf 8f4f 	dsb	sy
 800e3c0:	60fb      	str	r3, [r7, #12]
 800e3c2:	e7fe      	b.n	800e3c2 <prvDeleteTCB+0x52>
	}
 800e3c4:	bf00      	nop
 800e3c6:	3710      	adds	r7, #16
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	b083      	sub	sp, #12
 800e3d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3d2:	4b0c      	ldr	r3, [pc, #48]	; (800e404 <prvResetNextTaskUnblockTime+0x38>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d104      	bne.n	800e3e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e3dc:	4b0a      	ldr	r3, [pc, #40]	; (800e408 <prvResetNextTaskUnblockTime+0x3c>)
 800e3de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e3e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e3e4:	e008      	b.n	800e3f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3e6:	4b07      	ldr	r3, [pc, #28]	; (800e404 <prvResetNextTaskUnblockTime+0x38>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	68db      	ldr	r3, [r3, #12]
 800e3ec:	68db      	ldr	r3, [r3, #12]
 800e3ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	4a04      	ldr	r2, [pc, #16]	; (800e408 <prvResetNextTaskUnblockTime+0x3c>)
 800e3f6:	6013      	str	r3, [r2, #0]
}
 800e3f8:	bf00      	nop
 800e3fa:	370c      	adds	r7, #12
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr
 800e404:	10000d3c 	.word	0x10000d3c
 800e408:	10000da4 	.word	0x10000da4

0800e40c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b084      	sub	sp, #16
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e416:	4b2b      	ldr	r3, [pc, #172]	; (800e4c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800e41c:	4b2a      	ldr	r3, [pc, #168]	; (800e4c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	2200      	movs	r2, #0
 800e422:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e426:	4b28      	ldr	r3, [pc, #160]	; (800e4c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	3304      	adds	r3, #4
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7ff f937 	bl	800d6a0 <uxListRemove>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d10b      	bne.n	800e450 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e438:	4b23      	ldr	r3, [pc, #140]	; (800e4c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e43e:	2201      	movs	r2, #1
 800e440:	fa02 f303 	lsl.w	r3, r2, r3
 800e444:	43da      	mvns	r2, r3
 800e446:	4b21      	ldr	r3, [pc, #132]	; (800e4cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	4013      	ands	r3, r2
 800e44c:	4a1f      	ldr	r2, [pc, #124]	; (800e4cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800e44e:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e456:	d10a      	bne.n	800e46e <prvAddCurrentTaskToDelayedList+0x62>
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d007      	beq.n	800e46e <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e45e:	4b1a      	ldr	r3, [pc, #104]	; (800e4c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	3304      	adds	r3, #4
 800e464:	4619      	mov	r1, r3
 800e466:	481a      	ldr	r0, [pc, #104]	; (800e4d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e468:	f7ff f8bd 	bl	800d5e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e46c:	e026      	b.n	800e4bc <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e46e:	68fa      	ldr	r2, [r7, #12]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	4413      	add	r3, r2
 800e474:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e476:	4b14      	ldr	r3, [pc, #80]	; (800e4c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	68ba      	ldr	r2, [r7, #8]
 800e47c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e47e:	68ba      	ldr	r2, [r7, #8]
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	429a      	cmp	r2, r3
 800e484:	d209      	bcs.n	800e49a <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e486:	4b13      	ldr	r3, [pc, #76]	; (800e4d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e488:	681a      	ldr	r2, [r3, #0]
 800e48a:	4b0f      	ldr	r3, [pc, #60]	; (800e4c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	3304      	adds	r3, #4
 800e490:	4619      	mov	r1, r3
 800e492:	4610      	mov	r0, r2
 800e494:	f7ff f8cb 	bl	800d62e <vListInsert>
}
 800e498:	e010      	b.n	800e4bc <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e49a:	4b0f      	ldr	r3, [pc, #60]	; (800e4d8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800e49c:	681a      	ldr	r2, [r3, #0]
 800e49e:	4b0a      	ldr	r3, [pc, #40]	; (800e4c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	3304      	adds	r3, #4
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	4610      	mov	r0, r2
 800e4a8:	f7ff f8c1 	bl	800d62e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e4ac:	4b0b      	ldr	r3, [pc, #44]	; (800e4dc <prvAddCurrentTaskToDelayedList+0xd0>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	68ba      	ldr	r2, [r7, #8]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d202      	bcs.n	800e4bc <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 800e4b6:	4a09      	ldr	r2, [pc, #36]	; (800e4dc <prvAddCurrentTaskToDelayedList+0xd0>)
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	6013      	str	r3, [r2, #0]
}
 800e4bc:	bf00      	nop
 800e4be:	3710      	adds	r7, #16
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	10000d88 	.word	0x10000d88
 800e4c8:	10000c84 	.word	0x10000c84
 800e4cc:	10000d8c 	.word	0x10000d8c
 800e4d0:	10000d70 	.word	0x10000d70
 800e4d4:	10000d40 	.word	0x10000d40
 800e4d8:	10000d3c 	.word	0x10000d3c
 800e4dc:	10000da4 	.word	0x10000da4

0800e4e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b085      	sub	sp, #20
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	60f8      	str	r0, [r7, #12]
 800e4e8:	60b9      	str	r1, [r7, #8]
 800e4ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	3b04      	subs	r3, #4
 800e4f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e4f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	3b04      	subs	r3, #4
 800e4fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	f023 0201 	bic.w	r2, r3, #1
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	3b04      	subs	r3, #4
 800e50e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e510:	4a0c      	ldr	r2, [pc, #48]	; (800e544 <pxPortInitialiseStack+0x64>)
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	3b14      	subs	r3, #20
 800e51a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	3b04      	subs	r3, #4
 800e526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	f06f 0202 	mvn.w	r2, #2
 800e52e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	3b20      	subs	r3, #32
 800e534:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e536:	68fb      	ldr	r3, [r7, #12]
}
 800e538:	4618      	mov	r0, r3
 800e53a:	3714      	adds	r7, #20
 800e53c:	46bd      	mov	sp, r7
 800e53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e542:	4770      	bx	lr
 800e544:	0800e549 	.word	0x0800e549

0800e548 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e548:	b480      	push	{r7}
 800e54a:	b085      	sub	sp, #20
 800e54c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e54e:	2300      	movs	r3, #0
 800e550:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e552:	4b11      	ldr	r3, [pc, #68]	; (800e598 <prvTaskExitError+0x50>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e55a:	d009      	beq.n	800e570 <prvTaskExitError+0x28>
 800e55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e560:	f383 8811 	msr	BASEPRI, r3
 800e564:	f3bf 8f6f 	isb	sy
 800e568:	f3bf 8f4f 	dsb	sy
 800e56c:	60fb      	str	r3, [r7, #12]
 800e56e:	e7fe      	b.n	800e56e <prvTaskExitError+0x26>
 800e570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e574:	f383 8811 	msr	BASEPRI, r3
 800e578:	f3bf 8f6f 	isb	sy
 800e57c:	f3bf 8f4f 	dsb	sy
 800e580:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e582:	bf00      	nop
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d0fc      	beq.n	800e584 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e58a:	bf00      	nop
 800e58c:	3714      	adds	r7, #20
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	4770      	bx	lr
 800e596:	bf00      	nop
 800e598:	1000011c 	.word	0x1000011c
 800e59c:	00000000 	.word	0x00000000

0800e5a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e5a0:	4b07      	ldr	r3, [pc, #28]	; (800e5c0 <pxCurrentTCBConst2>)
 800e5a2:	6819      	ldr	r1, [r3, #0]
 800e5a4:	6808      	ldr	r0, [r1, #0]
 800e5a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5aa:	f380 8809 	msr	PSP, r0
 800e5ae:	f3bf 8f6f 	isb	sy
 800e5b2:	f04f 0000 	mov.w	r0, #0
 800e5b6:	f380 8811 	msr	BASEPRI, r0
 800e5ba:	4770      	bx	lr
 800e5bc:	f3af 8000 	nop.w

0800e5c0 <pxCurrentTCBConst2>:
 800e5c0:	10000c84 	.word	0x10000c84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e5c4:	bf00      	nop
 800e5c6:	bf00      	nop

0800e5c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e5c8:	4808      	ldr	r0, [pc, #32]	; (800e5ec <prvPortStartFirstTask+0x24>)
 800e5ca:	6800      	ldr	r0, [r0, #0]
 800e5cc:	6800      	ldr	r0, [r0, #0]
 800e5ce:	f380 8808 	msr	MSP, r0
 800e5d2:	f04f 0000 	mov.w	r0, #0
 800e5d6:	f380 8814 	msr	CONTROL, r0
 800e5da:	b662      	cpsie	i
 800e5dc:	b661      	cpsie	f
 800e5de:	f3bf 8f4f 	dsb	sy
 800e5e2:	f3bf 8f6f 	isb	sy
 800e5e6:	df00      	svc	0
 800e5e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e5ea:	bf00      	nop
 800e5ec:	e000ed08 	.word	0xe000ed08

0800e5f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b086      	sub	sp, #24
 800e5f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e5f6:	4b44      	ldr	r3, [pc, #272]	; (800e708 <xPortStartScheduler+0x118>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	4a44      	ldr	r2, [pc, #272]	; (800e70c <xPortStartScheduler+0x11c>)
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d109      	bne.n	800e614 <xPortStartScheduler+0x24>
 800e600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e604:	f383 8811 	msr	BASEPRI, r3
 800e608:	f3bf 8f6f 	isb	sy
 800e60c:	f3bf 8f4f 	dsb	sy
 800e610:	613b      	str	r3, [r7, #16]
 800e612:	e7fe      	b.n	800e612 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e614:	4b3c      	ldr	r3, [pc, #240]	; (800e708 <xPortStartScheduler+0x118>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	4a3d      	ldr	r2, [pc, #244]	; (800e710 <xPortStartScheduler+0x120>)
 800e61a:	4293      	cmp	r3, r2
 800e61c:	d109      	bne.n	800e632 <xPortStartScheduler+0x42>
 800e61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e622:	f383 8811 	msr	BASEPRI, r3
 800e626:	f3bf 8f6f 	isb	sy
 800e62a:	f3bf 8f4f 	dsb	sy
 800e62e:	60fb      	str	r3, [r7, #12]
 800e630:	e7fe      	b.n	800e630 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e632:	4b38      	ldr	r3, [pc, #224]	; (800e714 <xPortStartScheduler+0x124>)
 800e634:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	22ff      	movs	r2, #255	; 0xff
 800e642:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	b2db      	uxtb	r3, r3
 800e64a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e64c:	78fb      	ldrb	r3, [r7, #3]
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e654:	b2da      	uxtb	r2, r3
 800e656:	4b30      	ldr	r3, [pc, #192]	; (800e718 <xPortStartScheduler+0x128>)
 800e658:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e65a:	4b30      	ldr	r3, [pc, #192]	; (800e71c <xPortStartScheduler+0x12c>)
 800e65c:	2207      	movs	r2, #7
 800e65e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e660:	e009      	b.n	800e676 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800e662:	4b2e      	ldr	r3, [pc, #184]	; (800e71c <xPortStartScheduler+0x12c>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	3b01      	subs	r3, #1
 800e668:	4a2c      	ldr	r2, [pc, #176]	; (800e71c <xPortStartScheduler+0x12c>)
 800e66a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e66c:	78fb      	ldrb	r3, [r7, #3]
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	005b      	lsls	r3, r3, #1
 800e672:	b2db      	uxtb	r3, r3
 800e674:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e676:	78fb      	ldrb	r3, [r7, #3]
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e67e:	2b80      	cmp	r3, #128	; 0x80
 800e680:	d0ef      	beq.n	800e662 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e682:	4b26      	ldr	r3, [pc, #152]	; (800e71c <xPortStartScheduler+0x12c>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f1c3 0307 	rsb	r3, r3, #7
 800e68a:	2b04      	cmp	r3, #4
 800e68c:	d009      	beq.n	800e6a2 <xPortStartScheduler+0xb2>
 800e68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e692:	f383 8811 	msr	BASEPRI, r3
 800e696:	f3bf 8f6f 	isb	sy
 800e69a:	f3bf 8f4f 	dsb	sy
 800e69e:	60bb      	str	r3, [r7, #8]
 800e6a0:	e7fe      	b.n	800e6a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e6a2:	4b1e      	ldr	r3, [pc, #120]	; (800e71c <xPortStartScheduler+0x12c>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	021b      	lsls	r3, r3, #8
 800e6a8:	4a1c      	ldr	r2, [pc, #112]	; (800e71c <xPortStartScheduler+0x12c>)
 800e6aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6ac:	4b1b      	ldr	r3, [pc, #108]	; (800e71c <xPortStartScheduler+0x12c>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e6b4:	4a19      	ldr	r2, [pc, #100]	; (800e71c <xPortStartScheduler+0x12c>)
 800e6b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	b2da      	uxtb	r2, r3
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e6c0:	4b17      	ldr	r3, [pc, #92]	; (800e720 <xPortStartScheduler+0x130>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4a16      	ldr	r2, [pc, #88]	; (800e720 <xPortStartScheduler+0x130>)
 800e6c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e6ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e6cc:	4b14      	ldr	r3, [pc, #80]	; (800e720 <xPortStartScheduler+0x130>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	4a13      	ldr	r2, [pc, #76]	; (800e720 <xPortStartScheduler+0x130>)
 800e6d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e6d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e6d8:	f000 f8d6 	bl	800e888 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e6dc:	4b11      	ldr	r3, [pc, #68]	; (800e724 <xPortStartScheduler+0x134>)
 800e6de:	2200      	movs	r2, #0
 800e6e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e6e2:	f000 f8f5 	bl	800e8d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e6e6:	4b10      	ldr	r3, [pc, #64]	; (800e728 <xPortStartScheduler+0x138>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	4a0f      	ldr	r2, [pc, #60]	; (800e728 <xPortStartScheduler+0x138>)
 800e6ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e6f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e6f2:	f7ff ff69 	bl	800e5c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e6f6:	f7ff fd41 	bl	800e17c <vTaskSwitchContext>
	prvTaskExitError();
 800e6fa:	f7ff ff25 	bl	800e548 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e6fe:	2300      	movs	r3, #0
}
 800e700:	4618      	mov	r0, r3
 800e702:	3718      	adds	r7, #24
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}
 800e708:	e000ed00 	.word	0xe000ed00
 800e70c:	410fc271 	.word	0x410fc271
 800e710:	410fc270 	.word	0x410fc270
 800e714:	e000e400 	.word	0xe000e400
 800e718:	10000db8 	.word	0x10000db8
 800e71c:	10000dbc 	.word	0x10000dbc
 800e720:	e000ed20 	.word	0xe000ed20
 800e724:	1000011c 	.word	0x1000011c
 800e728:	e000ef34 	.word	0xe000ef34

0800e72c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
 800e732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e736:	f383 8811 	msr	BASEPRI, r3
 800e73a:	f3bf 8f6f 	isb	sy
 800e73e:	f3bf 8f4f 	dsb	sy
 800e742:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e744:	4b0e      	ldr	r3, [pc, #56]	; (800e780 <vPortEnterCritical+0x54>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	3301      	adds	r3, #1
 800e74a:	4a0d      	ldr	r2, [pc, #52]	; (800e780 <vPortEnterCritical+0x54>)
 800e74c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e74e:	4b0c      	ldr	r3, [pc, #48]	; (800e780 <vPortEnterCritical+0x54>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	2b01      	cmp	r3, #1
 800e754:	d10e      	bne.n	800e774 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e756:	4b0b      	ldr	r3, [pc, #44]	; (800e784 <vPortEnterCritical+0x58>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d009      	beq.n	800e774 <vPortEnterCritical+0x48>
 800e760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e764:	f383 8811 	msr	BASEPRI, r3
 800e768:	f3bf 8f6f 	isb	sy
 800e76c:	f3bf 8f4f 	dsb	sy
 800e770:	603b      	str	r3, [r7, #0]
 800e772:	e7fe      	b.n	800e772 <vPortEnterCritical+0x46>
	}
}
 800e774:	bf00      	nop
 800e776:	370c      	adds	r7, #12
 800e778:	46bd      	mov	sp, r7
 800e77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77e:	4770      	bx	lr
 800e780:	1000011c 	.word	0x1000011c
 800e784:	e000ed04 	.word	0xe000ed04

0800e788 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e788:	b480      	push	{r7}
 800e78a:	b083      	sub	sp, #12
 800e78c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e78e:	4b11      	ldr	r3, [pc, #68]	; (800e7d4 <vPortExitCritical+0x4c>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d109      	bne.n	800e7aa <vPortExitCritical+0x22>
 800e796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e79a:	f383 8811 	msr	BASEPRI, r3
 800e79e:	f3bf 8f6f 	isb	sy
 800e7a2:	f3bf 8f4f 	dsb	sy
 800e7a6:	607b      	str	r3, [r7, #4]
 800e7a8:	e7fe      	b.n	800e7a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800e7aa:	4b0a      	ldr	r3, [pc, #40]	; (800e7d4 <vPortExitCritical+0x4c>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	3b01      	subs	r3, #1
 800e7b0:	4a08      	ldr	r2, [pc, #32]	; (800e7d4 <vPortExitCritical+0x4c>)
 800e7b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e7b4:	4b07      	ldr	r3, [pc, #28]	; (800e7d4 <vPortExitCritical+0x4c>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d104      	bne.n	800e7c6 <vPortExitCritical+0x3e>
 800e7bc:	2300      	movs	r3, #0
 800e7be:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e7c6:	bf00      	nop
 800e7c8:	370c      	adds	r7, #12
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop
 800e7d4:	1000011c 	.word	0x1000011c
	...

0800e7e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e7e0:	f3ef 8009 	mrs	r0, PSP
 800e7e4:	f3bf 8f6f 	isb	sy
 800e7e8:	4b15      	ldr	r3, [pc, #84]	; (800e840 <pxCurrentTCBConst>)
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	f01e 0f10 	tst.w	lr, #16
 800e7f0:	bf08      	it	eq
 800e7f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e7f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7fa:	6010      	str	r0, [r2, #0]
 800e7fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e800:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e804:	f380 8811 	msr	BASEPRI, r0
 800e808:	f3bf 8f4f 	dsb	sy
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	f7ff fcb4 	bl	800e17c <vTaskSwitchContext>
 800e814:	f04f 0000 	mov.w	r0, #0
 800e818:	f380 8811 	msr	BASEPRI, r0
 800e81c:	bc09      	pop	{r0, r3}
 800e81e:	6819      	ldr	r1, [r3, #0]
 800e820:	6808      	ldr	r0, [r1, #0]
 800e822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e826:	f01e 0f10 	tst.w	lr, #16
 800e82a:	bf08      	it	eq
 800e82c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e830:	f380 8809 	msr	PSP, r0
 800e834:	f3bf 8f6f 	isb	sy
 800e838:	4770      	bx	lr
 800e83a:	bf00      	nop
 800e83c:	f3af 8000 	nop.w

0800e840 <pxCurrentTCBConst>:
 800e840:	10000c84 	.word	0x10000c84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e844:	bf00      	nop
 800e846:	bf00      	nop

0800e848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
	__asm volatile
 800e84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e852:	f383 8811 	msr	BASEPRI, r3
 800e856:	f3bf 8f6f 	isb	sy
 800e85a:	f3bf 8f4f 	dsb	sy
 800e85e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e860:	f7ff fbd4 	bl	800e00c <xTaskIncrementTick>
 800e864:	4603      	mov	r3, r0
 800e866:	2b00      	cmp	r3, #0
 800e868:	d003      	beq.n	800e872 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e86a:	4b06      	ldr	r3, [pc, #24]	; (800e884 <SysTick_Handler+0x3c>)
 800e86c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e870:	601a      	str	r2, [r3, #0]
 800e872:	2300      	movs	r3, #0
 800e874:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e87c:	bf00      	nop
 800e87e:	3708      	adds	r7, #8
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}
 800e884:	e000ed04 	.word	0xe000ed04

0800e888 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e888:	b480      	push	{r7}
 800e88a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e88c:	4b0b      	ldr	r3, [pc, #44]	; (800e8bc <vPortSetupTimerInterrupt+0x34>)
 800e88e:	2200      	movs	r2, #0
 800e890:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e892:	4b0b      	ldr	r3, [pc, #44]	; (800e8c0 <vPortSetupTimerInterrupt+0x38>)
 800e894:	2200      	movs	r2, #0
 800e896:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e898:	4b0a      	ldr	r3, [pc, #40]	; (800e8c4 <vPortSetupTimerInterrupt+0x3c>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	4a0a      	ldr	r2, [pc, #40]	; (800e8c8 <vPortSetupTimerInterrupt+0x40>)
 800e89e:	fba2 2303 	umull	r2, r3, r2, r3
 800e8a2:	099b      	lsrs	r3, r3, #6
 800e8a4:	4a09      	ldr	r2, [pc, #36]	; (800e8cc <vPortSetupTimerInterrupt+0x44>)
 800e8a6:	3b01      	subs	r3, #1
 800e8a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e8aa:	4b04      	ldr	r3, [pc, #16]	; (800e8bc <vPortSetupTimerInterrupt+0x34>)
 800e8ac:	2207      	movs	r2, #7
 800e8ae:	601a      	str	r2, [r3, #0]
}
 800e8b0:	bf00      	nop
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b8:	4770      	bx	lr
 800e8ba:	bf00      	nop
 800e8bc:	e000e010 	.word	0xe000e010
 800e8c0:	e000e018 	.word	0xe000e018
 800e8c4:	10000000 	.word	0x10000000
 800e8c8:	10624dd3 	.word	0x10624dd3
 800e8cc:	e000e014 	.word	0xe000e014

0800e8d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e8d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e8e0 <vPortEnableVFP+0x10>
 800e8d4:	6801      	ldr	r1, [r0, #0]
 800e8d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e8da:	6001      	str	r1, [r0, #0]
 800e8dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e8de:	bf00      	nop
 800e8e0:	e000ed88 	.word	0xe000ed88

0800e8e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b08a      	sub	sp, #40	; 0x28
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e8f0:	f7ff fad2 	bl	800de98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e8f4:	4b57      	ldr	r3, [pc, #348]	; (800ea54 <pvPortMalloc+0x170>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d101      	bne.n	800e900 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e8fc:	f000 f90c 	bl	800eb18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e900:	4b55      	ldr	r3, [pc, #340]	; (800ea58 <pvPortMalloc+0x174>)
 800e902:	681a      	ldr	r2, [r3, #0]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	4013      	ands	r3, r2
 800e908:	2b00      	cmp	r3, #0
 800e90a:	f040 808c 	bne.w	800ea26 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d01c      	beq.n	800e94e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800e914:	2208      	movs	r2, #8
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	4413      	add	r3, r2
 800e91a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f003 0307 	and.w	r3, r3, #7
 800e922:	2b00      	cmp	r3, #0
 800e924:	d013      	beq.n	800e94e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f023 0307 	bic.w	r3, r3, #7
 800e92c:	3308      	adds	r3, #8
 800e92e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f003 0307 	and.w	r3, r3, #7
 800e936:	2b00      	cmp	r3, #0
 800e938:	d009      	beq.n	800e94e <pvPortMalloc+0x6a>
	__asm volatile
 800e93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e93e:	f383 8811 	msr	BASEPRI, r3
 800e942:	f3bf 8f6f 	isb	sy
 800e946:	f3bf 8f4f 	dsb	sy
 800e94a:	617b      	str	r3, [r7, #20]
 800e94c:	e7fe      	b.n	800e94c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d068      	beq.n	800ea26 <pvPortMalloc+0x142>
 800e954:	4b41      	ldr	r3, [pc, #260]	; (800ea5c <pvPortMalloc+0x178>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	687a      	ldr	r2, [r7, #4]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d863      	bhi.n	800ea26 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e95e:	4b40      	ldr	r3, [pc, #256]	; (800ea60 <pvPortMalloc+0x17c>)
 800e960:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e962:	4b3f      	ldr	r3, [pc, #252]	; (800ea60 <pvPortMalloc+0x17c>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e968:	e004      	b.n	800e974 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800e96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	687a      	ldr	r2, [r7, #4]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d903      	bls.n	800e986 <pvPortMalloc+0xa2>
 800e97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d1f1      	bne.n	800e96a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e986:	4b33      	ldr	r3, [pc, #204]	; (800ea54 <pvPortMalloc+0x170>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d04a      	beq.n	800ea26 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e990:	6a3b      	ldr	r3, [r7, #32]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	2208      	movs	r2, #8
 800e996:	4413      	add	r3, r2
 800e998:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99c:	681a      	ldr	r2, [r3, #0]
 800e99e:	6a3b      	ldr	r3, [r7, #32]
 800e9a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a4:	685a      	ldr	r2, [r3, #4]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	1ad2      	subs	r2, r2, r3
 800e9aa:	2308      	movs	r3, #8
 800e9ac:	005b      	lsls	r3, r3, #1
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d91e      	bls.n	800e9f0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e9b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	4413      	add	r3, r2
 800e9b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9ba:	69bb      	ldr	r3, [r7, #24]
 800e9bc:	f003 0307 	and.w	r3, r3, #7
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d009      	beq.n	800e9d8 <pvPortMalloc+0xf4>
 800e9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c8:	f383 8811 	msr	BASEPRI, r3
 800e9cc:	f3bf 8f6f 	isb	sy
 800e9d0:	f3bf 8f4f 	dsb	sy
 800e9d4:	613b      	str	r3, [r7, #16]
 800e9d6:	e7fe      	b.n	800e9d6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9da:	685a      	ldr	r2, [r3, #4]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	1ad2      	subs	r2, r2, r3
 800e9e0:	69bb      	ldr	r3, [r7, #24]
 800e9e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e6:	687a      	ldr	r2, [r7, #4]
 800e9e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e9ea:	69b8      	ldr	r0, [r7, #24]
 800e9ec:	f000 f8f6 	bl	800ebdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e9f0:	4b1a      	ldr	r3, [pc, #104]	; (800ea5c <pvPortMalloc+0x178>)
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	1ad3      	subs	r3, r2, r3
 800e9fa:	4a18      	ldr	r2, [pc, #96]	; (800ea5c <pvPortMalloc+0x178>)
 800e9fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e9fe:	4b17      	ldr	r3, [pc, #92]	; (800ea5c <pvPortMalloc+0x178>)
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	4b18      	ldr	r3, [pc, #96]	; (800ea64 <pvPortMalloc+0x180>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d203      	bcs.n	800ea12 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ea0a:	4b14      	ldr	r3, [pc, #80]	; (800ea5c <pvPortMalloc+0x178>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	4a15      	ldr	r2, [pc, #84]	; (800ea64 <pvPortMalloc+0x180>)
 800ea10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ea12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea14:	685a      	ldr	r2, [r3, #4]
 800ea16:	4b10      	ldr	r3, [pc, #64]	; (800ea58 <pvPortMalloc+0x174>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	431a      	orrs	r2, r3
 800ea1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ea20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea22:	2200      	movs	r2, #0
 800ea24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ea26:	f7ff fa45 	bl	800deb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea2a:	69fb      	ldr	r3, [r7, #28]
 800ea2c:	f003 0307 	and.w	r3, r3, #7
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d009      	beq.n	800ea48 <pvPortMalloc+0x164>
 800ea34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea38:	f383 8811 	msr	BASEPRI, r3
 800ea3c:	f3bf 8f6f 	isb	sy
 800ea40:	f3bf 8f4f 	dsb	sy
 800ea44:	60fb      	str	r3, [r7, #12]
 800ea46:	e7fe      	b.n	800ea46 <pvPortMalloc+0x162>
	return pvReturn;
 800ea48:	69fb      	ldr	r3, [r7, #28]
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3728      	adds	r7, #40	; 0x28
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	100049c8 	.word	0x100049c8
 800ea58:	100049d4 	.word	0x100049d4
 800ea5c:	100049cc 	.word	0x100049cc
 800ea60:	100049c0 	.word	0x100049c0
 800ea64:	100049d0 	.word	0x100049d0

0800ea68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b086      	sub	sp, #24
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d046      	beq.n	800eb08 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ea7a:	2308      	movs	r3, #8
 800ea7c:	425b      	negs	r3, r3
 800ea7e:	697a      	ldr	r2, [r7, #20]
 800ea80:	4413      	add	r3, r2
 800ea82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	685a      	ldr	r2, [r3, #4]
 800ea8c:	4b20      	ldr	r3, [pc, #128]	; (800eb10 <vPortFree+0xa8>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4013      	ands	r3, r2
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d109      	bne.n	800eaaa <vPortFree+0x42>
 800ea96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea9a:	f383 8811 	msr	BASEPRI, r3
 800ea9e:	f3bf 8f6f 	isb	sy
 800eaa2:	f3bf 8f4f 	dsb	sy
 800eaa6:	60fb      	str	r3, [r7, #12]
 800eaa8:	e7fe      	b.n	800eaa8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d009      	beq.n	800eac6 <vPortFree+0x5e>
 800eab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab6:	f383 8811 	msr	BASEPRI, r3
 800eaba:	f3bf 8f6f 	isb	sy
 800eabe:	f3bf 8f4f 	dsb	sy
 800eac2:	60bb      	str	r3, [r7, #8]
 800eac4:	e7fe      	b.n	800eac4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	685a      	ldr	r2, [r3, #4]
 800eaca:	4b11      	ldr	r3, [pc, #68]	; (800eb10 <vPortFree+0xa8>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	4013      	ands	r3, r2
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d019      	beq.n	800eb08 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d115      	bne.n	800eb08 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	685a      	ldr	r2, [r3, #4]
 800eae0:	4b0b      	ldr	r3, [pc, #44]	; (800eb10 <vPortFree+0xa8>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	43db      	mvns	r3, r3
 800eae6:	401a      	ands	r2, r3
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eaec:	f7ff f9d4 	bl	800de98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	685a      	ldr	r2, [r3, #4]
 800eaf4:	4b07      	ldr	r3, [pc, #28]	; (800eb14 <vPortFree+0xac>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4413      	add	r3, r2
 800eafa:	4a06      	ldr	r2, [pc, #24]	; (800eb14 <vPortFree+0xac>)
 800eafc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eafe:	6938      	ldr	r0, [r7, #16]
 800eb00:	f000 f86c 	bl	800ebdc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eb04:	f7ff f9d6 	bl	800deb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eb08:	bf00      	nop
 800eb0a:	3718      	adds	r7, #24
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	100049d4 	.word	0x100049d4
 800eb14:	100049cc 	.word	0x100049cc

0800eb18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b085      	sub	sp, #20
 800eb1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eb1e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800eb22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eb24:	4b27      	ldr	r3, [pc, #156]	; (800ebc4 <prvHeapInit+0xac>)
 800eb26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f003 0307 	and.w	r3, r3, #7
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d00c      	beq.n	800eb4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	3307      	adds	r3, #7
 800eb36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	f023 0307 	bic.w	r3, r3, #7
 800eb3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eb40:	68ba      	ldr	r2, [r7, #8]
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	1ad3      	subs	r3, r2, r3
 800eb46:	4a1f      	ldr	r2, [pc, #124]	; (800ebc4 <prvHeapInit+0xac>)
 800eb48:	4413      	add	r3, r2
 800eb4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eb50:	4a1d      	ldr	r2, [pc, #116]	; (800ebc8 <prvHeapInit+0xb0>)
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eb56:	4b1c      	ldr	r3, [pc, #112]	; (800ebc8 <prvHeapInit+0xb0>)
 800eb58:	2200      	movs	r2, #0
 800eb5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	68ba      	ldr	r2, [r7, #8]
 800eb60:	4413      	add	r3, r2
 800eb62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eb64:	2208      	movs	r2, #8
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	1a9b      	subs	r3, r3, r2
 800eb6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	f023 0307 	bic.w	r3, r3, #7
 800eb72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	4a15      	ldr	r2, [pc, #84]	; (800ebcc <prvHeapInit+0xb4>)
 800eb78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eb7a:	4b14      	ldr	r3, [pc, #80]	; (800ebcc <prvHeapInit+0xb4>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	2200      	movs	r2, #0
 800eb80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eb82:	4b12      	ldr	r3, [pc, #72]	; (800ebcc <prvHeapInit+0xb4>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	2200      	movs	r2, #0
 800eb88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	68fa      	ldr	r2, [r7, #12]
 800eb92:	1ad2      	subs	r2, r2, r3
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eb98:	4b0c      	ldr	r3, [pc, #48]	; (800ebcc <prvHeapInit+0xb4>)
 800eb9a:	681a      	ldr	r2, [r3, #0]
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	4a0a      	ldr	r2, [pc, #40]	; (800ebd0 <prvHeapInit+0xb8>)
 800eba6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	4a09      	ldr	r2, [pc, #36]	; (800ebd4 <prvHeapInit+0xbc>)
 800ebae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ebb0:	4b09      	ldr	r3, [pc, #36]	; (800ebd8 <prvHeapInit+0xc0>)
 800ebb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ebb6:	601a      	str	r2, [r3, #0]
}
 800ebb8:	bf00      	nop
 800ebba:	3714      	adds	r7, #20
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc2:	4770      	bx	lr
 800ebc4:	10000dc0 	.word	0x10000dc0
 800ebc8:	100049c0 	.word	0x100049c0
 800ebcc:	100049c8 	.word	0x100049c8
 800ebd0:	100049d0 	.word	0x100049d0
 800ebd4:	100049cc 	.word	0x100049cc
 800ebd8:	100049d4 	.word	0x100049d4

0800ebdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b085      	sub	sp, #20
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ebe4:	4b28      	ldr	r3, [pc, #160]	; (800ec88 <prvInsertBlockIntoFreeList+0xac>)
 800ebe6:	60fb      	str	r3, [r7, #12]
 800ebe8:	e002      	b.n	800ebf0 <prvInsertBlockIntoFreeList+0x14>
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	60fb      	str	r3, [r7, #12]
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	687a      	ldr	r2, [r7, #4]
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d8f7      	bhi.n	800ebea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	68ba      	ldr	r2, [r7, #8]
 800ec04:	4413      	add	r3, r2
 800ec06:	687a      	ldr	r2, [r7, #4]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d108      	bne.n	800ec1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	685a      	ldr	r2, [r3, #4]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	441a      	add	r2, r3
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	68ba      	ldr	r2, [r7, #8]
 800ec28:	441a      	add	r2, r3
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d118      	bne.n	800ec64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681a      	ldr	r2, [r3, #0]
 800ec36:	4b15      	ldr	r3, [pc, #84]	; (800ec8c <prvInsertBlockIntoFreeList+0xb0>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d00d      	beq.n	800ec5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	685a      	ldr	r2, [r3, #4]
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	441a      	add	r2, r3
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	681a      	ldr	r2, [r3, #0]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	601a      	str	r2, [r3, #0]
 800ec58:	e008      	b.n	800ec6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec5a:	4b0c      	ldr	r3, [pc, #48]	; (800ec8c <prvInsertBlockIntoFreeList+0xb0>)
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	601a      	str	r2, [r3, #0]
 800ec62:	e003      	b.n	800ec6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681a      	ldr	r2, [r3, #0]
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ec6c:	68fa      	ldr	r2, [r7, #12]
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d002      	beq.n	800ec7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	687a      	ldr	r2, [r7, #4]
 800ec78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec7a:	bf00      	nop
 800ec7c:	3714      	adds	r7, #20
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec84:	4770      	bx	lr
 800ec86:	bf00      	nop
 800ec88:	100049c0 	.word	0x100049c0
 800ec8c:	100049c8 	.word	0x100049c8

0800ec90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ec94:	2200      	movs	r2, #0
 800ec96:	4912      	ldr	r1, [pc, #72]	; (800ece0 <MX_USB_DEVICE_Init+0x50>)
 800ec98:	4812      	ldr	r0, [pc, #72]	; (800ece4 <MX_USB_DEVICE_Init+0x54>)
 800ec9a:	f7fd faf3 	bl	800c284 <USBD_Init>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d001      	beq.n	800eca8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800eca4:	f7f2 f8f0 	bl	8000e88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800eca8:	490f      	ldr	r1, [pc, #60]	; (800ece8 <MX_USB_DEVICE_Init+0x58>)
 800ecaa:	480e      	ldr	r0, [pc, #56]	; (800ece4 <MX_USB_DEVICE_Init+0x54>)
 800ecac:	f7fd fb20 	bl	800c2f0 <USBD_RegisterClass>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d001      	beq.n	800ecba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ecb6:	f7f2 f8e7 	bl	8000e88 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ecba:	490c      	ldr	r1, [pc, #48]	; (800ecec <MX_USB_DEVICE_Init+0x5c>)
 800ecbc:	4809      	ldr	r0, [pc, #36]	; (800ece4 <MX_USB_DEVICE_Init+0x54>)
 800ecbe:	f7fd fa45 	bl	800c14c <USBD_CDC_RegisterInterface>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d001      	beq.n	800eccc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ecc8:	f7f2 f8de 	bl	8000e88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800eccc:	4805      	ldr	r0, [pc, #20]	; (800ece4 <MX_USB_DEVICE_Init+0x54>)
 800ecce:	f7fd fb30 	bl	800c332 <USBD_Start>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d001      	beq.n	800ecdc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ecd8:	f7f2 f8d6 	bl	8000e88 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ecdc:	bf00      	nop
 800ecde:	bd80      	pop	{r7, pc}
 800ece0:	10000134 	.word	0x10000134
 800ece4:	10005010 	.word	0x10005010
 800ece8:	10000018 	.word	0x10000018
 800ecec:	10000120 	.word	0x10000120

0800ecf0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	4907      	ldr	r1, [pc, #28]	; (800ed14 <CDC_Init_FS+0x24>)
 800ecf8:	4807      	ldr	r0, [pc, #28]	; (800ed18 <CDC_Init_FS+0x28>)
 800ecfa:	f7fd fa3c 	bl	800c176 <USBD_CDC_SetTxBuffer>
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ecfe:	4907      	ldr	r1, [pc, #28]	; (800ed1c <CDC_Init_FS+0x2c>)
 800ed00:	4805      	ldr	r0, [pc, #20]	; (800ed18 <CDC_Init_FS+0x28>)
 800ed02:	f7fd fa51 	bl	800c1a8 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);                                         //This is new to the function, the rest is standard HAL
 800ed06:	4804      	ldr	r0, [pc, #16]	; (800ed18 <CDC_Init_FS+0x28>)
 800ed08:	f7fd fa92 	bl	800c230 <USBD_CDC_ReceivePacket>
	  return (USBD_OK);
 800ed0c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	100056e0 	.word	0x100056e0
 800ed18:	10005010 	.word	0x10005010
 800ed1c:	100052e0 	.word	0x100052e0

0800ed20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ed20:	b480      	push	{r7}
 800ed22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ed24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b083      	sub	sp, #12
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	4603      	mov	r3, r0
 800ed38:	6039      	str	r1, [r7, #0]
 800ed3a:	71fb      	strb	r3, [r7, #7]
 800ed3c:	4613      	mov	r3, r2
 800ed3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ed40:	79fb      	ldrb	r3, [r7, #7]
 800ed42:	2b23      	cmp	r3, #35	; 0x23
 800ed44:	d84a      	bhi.n	800eddc <CDC_Control_FS+0xac>
 800ed46:	a201      	add	r2, pc, #4	; (adr r2, 800ed4c <CDC_Control_FS+0x1c>)
 800ed48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed4c:	0800eddd 	.word	0x0800eddd
 800ed50:	0800eddd 	.word	0x0800eddd
 800ed54:	0800eddd 	.word	0x0800eddd
 800ed58:	0800eddd 	.word	0x0800eddd
 800ed5c:	0800eddd 	.word	0x0800eddd
 800ed60:	0800eddd 	.word	0x0800eddd
 800ed64:	0800eddd 	.word	0x0800eddd
 800ed68:	0800eddd 	.word	0x0800eddd
 800ed6c:	0800eddd 	.word	0x0800eddd
 800ed70:	0800eddd 	.word	0x0800eddd
 800ed74:	0800eddd 	.word	0x0800eddd
 800ed78:	0800eddd 	.word	0x0800eddd
 800ed7c:	0800eddd 	.word	0x0800eddd
 800ed80:	0800eddd 	.word	0x0800eddd
 800ed84:	0800eddd 	.word	0x0800eddd
 800ed88:	0800eddd 	.word	0x0800eddd
 800ed8c:	0800eddd 	.word	0x0800eddd
 800ed90:	0800eddd 	.word	0x0800eddd
 800ed94:	0800eddd 	.word	0x0800eddd
 800ed98:	0800eddd 	.word	0x0800eddd
 800ed9c:	0800eddd 	.word	0x0800eddd
 800eda0:	0800eddd 	.word	0x0800eddd
 800eda4:	0800eddd 	.word	0x0800eddd
 800eda8:	0800eddd 	.word	0x0800eddd
 800edac:	0800eddd 	.word	0x0800eddd
 800edb0:	0800eddd 	.word	0x0800eddd
 800edb4:	0800eddd 	.word	0x0800eddd
 800edb8:	0800eddd 	.word	0x0800eddd
 800edbc:	0800eddd 	.word	0x0800eddd
 800edc0:	0800eddd 	.word	0x0800eddd
 800edc4:	0800eddd 	.word	0x0800eddd
 800edc8:	0800eddd 	.word	0x0800eddd
 800edcc:	0800eddd 	.word	0x0800eddd
 800edd0:	0800eddd 	.word	0x0800eddd
 800edd4:	0800eddd 	.word	0x0800eddd
 800edd8:	0800eddd 	.word	0x0800eddd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eddc:	bf00      	nop
  }

  return (USBD_OK);
 800edde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	370c      	adds	r7, #12
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr

0800edec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b084      	sub	sp, #16
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


  volatile uint32_t counter = 0;
 800edf6:	2300      	movs	r3, #0
 800edf8:	60fb      	str	r3, [r7, #12]

  while(counter < *Len)
 800edfa:	e01e      	b.n	800ee3a <CDC_Receive_FS+0x4e>
  {
       RxBuffer[RxFifoIndex ] = Buf[counter];
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	441a      	add	r2, r3
 800ee02:	4b16      	ldr	r3, [pc, #88]	; (800ee5c <CDC_Receive_FS+0x70>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	7811      	ldrb	r1, [r2, #0]
 800ee08:	4a15      	ldr	r2, [pc, #84]	; (800ee60 <CDC_Receive_FS+0x74>)
 800ee0a:	54d1      	strb	r1, [r2, r3]
       cdc_receive_put(Buf[counter]);
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	687a      	ldr	r2, [r7, #4]
 800ee10:	4413      	add	r3, r2
 800ee12:	781b      	ldrb	r3, [r3, #0]
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7f4 fb81 	bl	800351c <cdc_receive_put>
       counter++, RxFifoIndex++;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	60fb      	str	r3, [r7, #12]
 800ee20:	4b0e      	ldr	r3, [pc, #56]	; (800ee5c <CDC_Receive_FS+0x70>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	3301      	adds	r3, #1
 800ee26:	4a0d      	ldr	r2, [pc, #52]	; (800ee5c <CDC_Receive_FS+0x70>)
 800ee28:	6013      	str	r3, [r2, #0]
       if(RxFifoIndex  == RxBufferSize)
 800ee2a:	4b0c      	ldr	r3, [pc, #48]	; (800ee5c <CDC_Receive_FS+0x70>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee32:	d102      	bne.n	800ee3a <CDC_Receive_FS+0x4e>
            RxFifoIndex  = 0;
 800ee34:	4b09      	ldr	r3, [pc, #36]	; (800ee5c <CDC_Receive_FS+0x70>)
 800ee36:	2200      	movs	r2, #0
 800ee38:	601a      	str	r2, [r3, #0]
  while(counter < *Len)
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	681a      	ldr	r2, [r3, #0]
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d8db      	bhi.n	800edfc <CDC_Receive_FS+0x10>
   }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ee44:	6879      	ldr	r1, [r7, #4]
 800ee46:	4807      	ldr	r0, [pc, #28]	; (800ee64 <CDC_Receive_FS+0x78>)
 800ee48:	f7fd f9ae 	bl	800c1a8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ee4c:	4805      	ldr	r0, [pc, #20]	; (800ee64 <CDC_Receive_FS+0x78>)
 800ee4e:	f7fd f9ef 	bl	800c230 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800ee52:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3710      	adds	r7, #16
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	100049d8 	.word	0x100049d8
 800ee60:	10005ae0 	.word	0x10005ae0
 800ee64:	10005010 	.word	0x10005010

0800ee68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	460b      	mov	r3, r1
 800ee72:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ee74:	2300      	movs	r3, #0
 800ee76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ee78:	4b0d      	ldr	r3, [pc, #52]	; (800eeb0 <CDC_Transmit_FS+0x48>)
 800ee7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d001      	beq.n	800ee8e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	e00b      	b.n	800eea6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ee8e:	887b      	ldrh	r3, [r7, #2]
 800ee90:	461a      	mov	r2, r3
 800ee92:	6879      	ldr	r1, [r7, #4]
 800ee94:	4806      	ldr	r0, [pc, #24]	; (800eeb0 <CDC_Transmit_FS+0x48>)
 800ee96:	f7fd f96e 	bl	800c176 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ee9a:	4805      	ldr	r0, [pc, #20]	; (800eeb0 <CDC_Transmit_FS+0x48>)
 800ee9c:	f7fd f998 	bl	800c1d0 <USBD_CDC_TransmitPacket>
 800eea0:	4603      	mov	r3, r0
 800eea2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800eea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3710      	adds	r7, #16
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	10005010 	.word	0x10005010

0800eeb4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b087      	sub	sp, #28
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	60f8      	str	r0, [r7, #12]
 800eebc:	60b9      	str	r1, [r7, #8]
 800eebe:	4613      	mov	r3, r2
 800eec0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eec2:	2300      	movs	r3, #0
 800eec4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eec6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	371c      	adds	r7, #28
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr
	...

0800eed8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
 800eede:	4603      	mov	r3, r0
 800eee0:	6039      	str	r1, [r7, #0]
 800eee2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	2212      	movs	r2, #18
 800eee8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800eeea:	4b03      	ldr	r3, [pc, #12]	; (800eef8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	370c      	adds	r7, #12
 800eef0:	46bd      	mov	sp, r7
 800eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef6:	4770      	bx	lr
 800eef8:	10000150 	.word	0x10000150

0800eefc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eefc:	b480      	push	{r7}
 800eefe:	b083      	sub	sp, #12
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	4603      	mov	r3, r0
 800ef04:	6039      	str	r1, [r7, #0]
 800ef06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	2204      	movs	r2, #4
 800ef0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ef0e:	4b03      	ldr	r3, [pc, #12]	; (800ef1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	370c      	adds	r7, #12
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr
 800ef1c:	10000164 	.word	0x10000164

0800ef20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	4603      	mov	r3, r0
 800ef28:	6039      	str	r1, [r7, #0]
 800ef2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ef2c:	79fb      	ldrb	r3, [r7, #7]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d105      	bne.n	800ef3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ef32:	683a      	ldr	r2, [r7, #0]
 800ef34:	4907      	ldr	r1, [pc, #28]	; (800ef54 <USBD_FS_ProductStrDescriptor+0x34>)
 800ef36:	4808      	ldr	r0, [pc, #32]	; (800ef58 <USBD_FS_ProductStrDescriptor+0x38>)
 800ef38:	f7fe f9c9 	bl	800d2ce <USBD_GetString>
 800ef3c:	e004      	b.n	800ef48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ef3e:	683a      	ldr	r2, [r7, #0]
 800ef40:	4904      	ldr	r1, [pc, #16]	; (800ef54 <USBD_FS_ProductStrDescriptor+0x34>)
 800ef42:	4805      	ldr	r0, [pc, #20]	; (800ef58 <USBD_FS_ProductStrDescriptor+0x38>)
 800ef44:	f7fe f9c3 	bl	800d2ce <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef48:	4b02      	ldr	r3, [pc, #8]	; (800ef54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3708      	adds	r7, #8
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	10005ee0 	.word	0x10005ee0
 800ef58:	0800fe78 	.word	0x0800fe78

0800ef5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	4603      	mov	r3, r0
 800ef64:	6039      	str	r1, [r7, #0]
 800ef66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ef68:	683a      	ldr	r2, [r7, #0]
 800ef6a:	4904      	ldr	r1, [pc, #16]	; (800ef7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ef6c:	4804      	ldr	r0, [pc, #16]	; (800ef80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ef6e:	f7fe f9ae 	bl	800d2ce <USBD_GetString>
  return USBD_StrDesc;
 800ef72:	4b02      	ldr	r3, [pc, #8]	; (800ef7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	3708      	adds	r7, #8
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}
 800ef7c:	10005ee0 	.word	0x10005ee0
 800ef80:	0800fe90 	.word	0x0800fe90

0800ef84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	6039      	str	r1, [r7, #0]
 800ef8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	221a      	movs	r2, #26
 800ef94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ef96:	f000 f843 	bl	800f020 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ef9a:	4b02      	ldr	r3, [pc, #8]	; (800efa4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3708      	adds	r7, #8
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	10000168 	.word	0x10000168

0800efa8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
 800efae:	4603      	mov	r3, r0
 800efb0:	6039      	str	r1, [r7, #0]
 800efb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800efb4:	79fb      	ldrb	r3, [r7, #7]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d105      	bne.n	800efc6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800efba:	683a      	ldr	r2, [r7, #0]
 800efbc:	4907      	ldr	r1, [pc, #28]	; (800efdc <USBD_FS_ConfigStrDescriptor+0x34>)
 800efbe:	4808      	ldr	r0, [pc, #32]	; (800efe0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800efc0:	f7fe f985 	bl	800d2ce <USBD_GetString>
 800efc4:	e004      	b.n	800efd0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800efc6:	683a      	ldr	r2, [r7, #0]
 800efc8:	4904      	ldr	r1, [pc, #16]	; (800efdc <USBD_FS_ConfigStrDescriptor+0x34>)
 800efca:	4805      	ldr	r0, [pc, #20]	; (800efe0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800efcc:	f7fe f97f 	bl	800d2ce <USBD_GetString>
  }
  return USBD_StrDesc;
 800efd0:	4b02      	ldr	r3, [pc, #8]	; (800efdc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3708      	adds	r7, #8
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	10005ee0 	.word	0x10005ee0
 800efe0:	0800fea4 	.word	0x0800fea4

0800efe4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b082      	sub	sp, #8
 800efe8:	af00      	add	r7, sp, #0
 800efea:	4603      	mov	r3, r0
 800efec:	6039      	str	r1, [r7, #0]
 800efee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eff0:	79fb      	ldrb	r3, [r7, #7]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d105      	bne.n	800f002 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eff6:	683a      	ldr	r2, [r7, #0]
 800eff8:	4907      	ldr	r1, [pc, #28]	; (800f018 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800effa:	4808      	ldr	r0, [pc, #32]	; (800f01c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800effc:	f7fe f967 	bl	800d2ce <USBD_GetString>
 800f000:	e004      	b.n	800f00c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f002:	683a      	ldr	r2, [r7, #0]
 800f004:	4904      	ldr	r1, [pc, #16]	; (800f018 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f006:	4805      	ldr	r0, [pc, #20]	; (800f01c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f008:	f7fe f961 	bl	800d2ce <USBD_GetString>
  }
  return USBD_StrDesc;
 800f00c:	4b02      	ldr	r3, [pc, #8]	; (800f018 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3708      	adds	r7, #8
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	10005ee0 	.word	0x10005ee0
 800f01c:	0800feb0 	.word	0x0800feb0

0800f020 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b084      	sub	sp, #16
 800f024:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f026:	4b0f      	ldr	r3, [pc, #60]	; (800f064 <Get_SerialNum+0x44>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f02c:	4b0e      	ldr	r3, [pc, #56]	; (800f068 <Get_SerialNum+0x48>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f032:	4b0e      	ldr	r3, [pc, #56]	; (800f06c <Get_SerialNum+0x4c>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f038:	68fa      	ldr	r2, [r7, #12]
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	4413      	add	r3, r2
 800f03e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d009      	beq.n	800f05a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f046:	2208      	movs	r2, #8
 800f048:	4909      	ldr	r1, [pc, #36]	; (800f070 <Get_SerialNum+0x50>)
 800f04a:	68f8      	ldr	r0, [r7, #12]
 800f04c:	f000 f814 	bl	800f078 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f050:	2204      	movs	r2, #4
 800f052:	4908      	ldr	r1, [pc, #32]	; (800f074 <Get_SerialNum+0x54>)
 800f054:	68b8      	ldr	r0, [r7, #8]
 800f056:	f000 f80f 	bl	800f078 <IntToUnicode>
  }
}
 800f05a:	bf00      	nop
 800f05c:	3710      	adds	r7, #16
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
 800f062:	bf00      	nop
 800f064:	1fff7a10 	.word	0x1fff7a10
 800f068:	1fff7a14 	.word	0x1fff7a14
 800f06c:	1fff7a18 	.word	0x1fff7a18
 800f070:	1000016a 	.word	0x1000016a
 800f074:	1000017a 	.word	0x1000017a

0800f078 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f078:	b480      	push	{r7}
 800f07a:	b087      	sub	sp, #28
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	60f8      	str	r0, [r7, #12]
 800f080:	60b9      	str	r1, [r7, #8]
 800f082:	4613      	mov	r3, r2
 800f084:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f086:	2300      	movs	r3, #0
 800f088:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f08a:	2300      	movs	r3, #0
 800f08c:	75fb      	strb	r3, [r7, #23]
 800f08e:	e027      	b.n	800f0e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	0f1b      	lsrs	r3, r3, #28
 800f094:	2b09      	cmp	r3, #9
 800f096:	d80b      	bhi.n	800f0b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	0f1b      	lsrs	r3, r3, #28
 800f09c:	b2da      	uxtb	r2, r3
 800f09e:	7dfb      	ldrb	r3, [r7, #23]
 800f0a0:	005b      	lsls	r3, r3, #1
 800f0a2:	4619      	mov	r1, r3
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	440b      	add	r3, r1
 800f0a8:	3230      	adds	r2, #48	; 0x30
 800f0aa:	b2d2      	uxtb	r2, r2
 800f0ac:	701a      	strb	r2, [r3, #0]
 800f0ae:	e00a      	b.n	800f0c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	0f1b      	lsrs	r3, r3, #28
 800f0b4:	b2da      	uxtb	r2, r3
 800f0b6:	7dfb      	ldrb	r3, [r7, #23]
 800f0b8:	005b      	lsls	r3, r3, #1
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	440b      	add	r3, r1
 800f0c0:	3237      	adds	r2, #55	; 0x37
 800f0c2:	b2d2      	uxtb	r2, r2
 800f0c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	011b      	lsls	r3, r3, #4
 800f0ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f0cc:	7dfb      	ldrb	r3, [r7, #23]
 800f0ce:	005b      	lsls	r3, r3, #1
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	68ba      	ldr	r2, [r7, #8]
 800f0d4:	4413      	add	r3, r2
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f0da:	7dfb      	ldrb	r3, [r7, #23]
 800f0dc:	3301      	adds	r3, #1
 800f0de:	75fb      	strb	r3, [r7, #23]
 800f0e0:	7dfa      	ldrb	r2, [r7, #23]
 800f0e2:	79fb      	ldrb	r3, [r7, #7]
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d3d3      	bcc.n	800f090 <IntToUnicode+0x18>
  }
}
 800f0e8:	bf00      	nop
 800f0ea:	371c      	adds	r7, #28
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f2:	4770      	bx	lr

0800f0f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b08a      	sub	sp, #40	; 0x28
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f0fc:	f107 0314 	add.w	r3, r7, #20
 800f100:	2200      	movs	r2, #0
 800f102:	601a      	str	r2, [r3, #0]
 800f104:	605a      	str	r2, [r3, #4]
 800f106:	609a      	str	r2, [r3, #8]
 800f108:	60da      	str	r2, [r3, #12]
 800f10a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f114:	d13a      	bne.n	800f18c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f116:	2300      	movs	r3, #0
 800f118:	613b      	str	r3, [r7, #16]
 800f11a:	4b1e      	ldr	r3, [pc, #120]	; (800f194 <HAL_PCD_MspInit+0xa0>)
 800f11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f11e:	4a1d      	ldr	r2, [pc, #116]	; (800f194 <HAL_PCD_MspInit+0xa0>)
 800f120:	f043 0301 	orr.w	r3, r3, #1
 800f124:	6313      	str	r3, [r2, #48]	; 0x30
 800f126:	4b1b      	ldr	r3, [pc, #108]	; (800f194 <HAL_PCD_MspInit+0xa0>)
 800f128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f12a:	f003 0301 	and.w	r3, r3, #1
 800f12e:	613b      	str	r3, [r7, #16]
 800f130:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f132:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f138:	2302      	movs	r3, #2
 800f13a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f13c:	2300      	movs	r3, #0
 800f13e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f140:	2303      	movs	r3, #3
 800f142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f144:	230a      	movs	r3, #10
 800f146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f148:	f107 0314 	add.w	r3, r7, #20
 800f14c:	4619      	mov	r1, r3
 800f14e:	4812      	ldr	r0, [pc, #72]	; (800f198 <HAL_PCD_MspInit+0xa4>)
 800f150:	f7f6 fc1e 	bl	8005990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f154:	4b0f      	ldr	r3, [pc, #60]	; (800f194 <HAL_PCD_MspInit+0xa0>)
 800f156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f158:	4a0e      	ldr	r2, [pc, #56]	; (800f194 <HAL_PCD_MspInit+0xa0>)
 800f15a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f15e:	6353      	str	r3, [r2, #52]	; 0x34
 800f160:	2300      	movs	r3, #0
 800f162:	60fb      	str	r3, [r7, #12]
 800f164:	4b0b      	ldr	r3, [pc, #44]	; (800f194 <HAL_PCD_MspInit+0xa0>)
 800f166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f168:	4a0a      	ldr	r2, [pc, #40]	; (800f194 <HAL_PCD_MspInit+0xa0>)
 800f16a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f16e:	6453      	str	r3, [r2, #68]	; 0x44
 800f170:	4b08      	ldr	r3, [pc, #32]	; (800f194 <HAL_PCD_MspInit+0xa0>)
 800f172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f178:	60fb      	str	r3, [r7, #12]
 800f17a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f17c:	2200      	movs	r2, #0
 800f17e:	2100      	movs	r1, #0
 800f180:	2043      	movs	r0, #67	; 0x43
 800f182:	f7f6 fbab 	bl	80058dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f186:	2043      	movs	r0, #67	; 0x43
 800f188:	f7f6 fbc4 	bl	8005914 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f18c:	bf00      	nop
 800f18e:	3728      	adds	r7, #40	; 0x28
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}
 800f194:	40023800 	.word	0x40023800
 800f198:	40020000 	.word	0x40020000

0800f19c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b082      	sub	sp, #8
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	4610      	mov	r0, r2
 800f1b4:	f7fd f908 	bl	800c3c8 <USBD_LL_SetupStage>
}
 800f1b8:	bf00      	nop
 800f1ba:	3708      	adds	r7, #8
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}

0800f1c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b082      	sub	sp, #8
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f1d2:	78fa      	ldrb	r2, [r7, #3]
 800f1d4:	6879      	ldr	r1, [r7, #4]
 800f1d6:	4613      	mov	r3, r2
 800f1d8:	00db      	lsls	r3, r3, #3
 800f1da:	1a9b      	subs	r3, r3, r2
 800f1dc:	009b      	lsls	r3, r3, #2
 800f1de:	440b      	add	r3, r1
 800f1e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f1e4:	681a      	ldr	r2, [r3, #0]
 800f1e6:	78fb      	ldrb	r3, [r7, #3]
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	f7fd f940 	bl	800c46e <USBD_LL_DataOutStage>
}
 800f1ee:	bf00      	nop
 800f1f0:	3708      	adds	r7, #8
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}

0800f1f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1f6:	b580      	push	{r7, lr}
 800f1f8:	b082      	sub	sp, #8
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	6078      	str	r0, [r7, #4]
 800f1fe:	460b      	mov	r3, r1
 800f200:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f208:	78fa      	ldrb	r2, [r7, #3]
 800f20a:	6879      	ldr	r1, [r7, #4]
 800f20c:	4613      	mov	r3, r2
 800f20e:	00db      	lsls	r3, r3, #3
 800f210:	1a9b      	subs	r3, r3, r2
 800f212:	009b      	lsls	r3, r3, #2
 800f214:	440b      	add	r3, r1
 800f216:	3348      	adds	r3, #72	; 0x48
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	78fb      	ldrb	r3, [r7, #3]
 800f21c:	4619      	mov	r1, r3
 800f21e:	f7fd f989 	bl	800c534 <USBD_LL_DataInStage>
}
 800f222:	bf00      	nop
 800f224:	3708      	adds	r7, #8
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}

0800f22a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f22a:	b580      	push	{r7, lr}
 800f22c:	b082      	sub	sp, #8
 800f22e:	af00      	add	r7, sp, #0
 800f230:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f238:	4618      	mov	r0, r3
 800f23a:	f7fd fa8d 	bl	800c758 <USBD_LL_SOF>
}
 800f23e:	bf00      	nop
 800f240:	3708      	adds	r7, #8
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}

0800f246 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f246:	b580      	push	{r7, lr}
 800f248:	b084      	sub	sp, #16
 800f24a:	af00      	add	r7, sp, #0
 800f24c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f24e:	2301      	movs	r3, #1
 800f250:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	68db      	ldr	r3, [r3, #12]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d102      	bne.n	800f260 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f25a:	2300      	movs	r3, #0
 800f25c:	73fb      	strb	r3, [r7, #15]
 800f25e:	e008      	b.n	800f272 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	68db      	ldr	r3, [r3, #12]
 800f264:	2b02      	cmp	r3, #2
 800f266:	d102      	bne.n	800f26e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f268:	2301      	movs	r3, #1
 800f26a:	73fb      	strb	r3, [r7, #15]
 800f26c:	e001      	b.n	800f272 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f26e:	f7f1 fe0b 	bl	8000e88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f278:	7bfa      	ldrb	r2, [r7, #15]
 800f27a:	4611      	mov	r1, r2
 800f27c:	4618      	mov	r0, r3
 800f27e:	f7fd fa30 	bl	800c6e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f288:	4618      	mov	r0, r3
 800f28a:	f7fd f9e9 	bl	800c660 <USBD_LL_Reset>
}
 800f28e:	bf00      	nop
 800f290:	3710      	adds	r7, #16
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
	...

0800f298 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b082      	sub	sp, #8
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7fd fa2b 	bl	800c702 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	6812      	ldr	r2, [r2, #0]
 800f2ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f2be:	f043 0301 	orr.w	r3, r3, #1
 800f2c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6a1b      	ldr	r3, [r3, #32]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d005      	beq.n	800f2d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f2cc:	4b04      	ldr	r3, [pc, #16]	; (800f2e0 <HAL_PCD_SuspendCallback+0x48>)
 800f2ce:	691b      	ldr	r3, [r3, #16]
 800f2d0:	4a03      	ldr	r2, [pc, #12]	; (800f2e0 <HAL_PCD_SuspendCallback+0x48>)
 800f2d2:	f043 0306 	orr.w	r3, r3, #6
 800f2d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f2d8:	bf00      	nop
 800f2da:	3708      	adds	r7, #8
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	e000ed00 	.word	0xe000ed00

0800f2e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7fd fa1a 	bl	800c72c <USBD_LL_Resume>
}
 800f2f8:	bf00      	nop
 800f2fa:	3708      	adds	r7, #8
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}

0800f300 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b082      	sub	sp, #8
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	460b      	mov	r3, r1
 800f30a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f312:	78fa      	ldrb	r2, [r7, #3]
 800f314:	4611      	mov	r1, r2
 800f316:	4618      	mov	r0, r3
 800f318:	f7fd fa45 	bl	800c7a6 <USBD_LL_IsoOUTIncomplete>
}
 800f31c:	bf00      	nop
 800f31e:	3708      	adds	r7, #8
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}

0800f324 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	460b      	mov	r3, r1
 800f32e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f336:	78fa      	ldrb	r2, [r7, #3]
 800f338:	4611      	mov	r1, r2
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7fd fa26 	bl	800c78c <USBD_LL_IsoINIncomplete>
}
 800f340:	bf00      	nop
 800f342:	3708      	adds	r7, #8
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}

0800f348 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b082      	sub	sp, #8
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f356:	4618      	mov	r0, r3
 800f358:	f7fd fa32 	bl	800c7c0 <USBD_LL_DevConnected>
}
 800f35c:	bf00      	nop
 800f35e:	3708      	adds	r7, #8
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b082      	sub	sp, #8
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f372:	4618      	mov	r0, r3
 800f374:	f7fd fa2f 	bl	800c7d6 <USBD_LL_DevDisconnected>
}
 800f378:	bf00      	nop
 800f37a:	3708      	adds	r7, #8
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d13c      	bne.n	800f40a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f390:	4a20      	ldr	r2, [pc, #128]	; (800f414 <USBD_LL_Init+0x94>)
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	4a1e      	ldr	r2, [pc, #120]	; (800f414 <USBD_LL_Init+0x94>)
 800f39c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f3a0:	4b1c      	ldr	r3, [pc, #112]	; (800f414 <USBD_LL_Init+0x94>)
 800f3a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f3a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f3a8:	4b1a      	ldr	r3, [pc, #104]	; (800f414 <USBD_LL_Init+0x94>)
 800f3aa:	2204      	movs	r2, #4
 800f3ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f3ae:	4b19      	ldr	r3, [pc, #100]	; (800f414 <USBD_LL_Init+0x94>)
 800f3b0:	2202      	movs	r2, #2
 800f3b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f3b4:	4b17      	ldr	r3, [pc, #92]	; (800f414 <USBD_LL_Init+0x94>)
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f3ba:	4b16      	ldr	r3, [pc, #88]	; (800f414 <USBD_LL_Init+0x94>)
 800f3bc:	2202      	movs	r2, #2
 800f3be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f3c0:	4b14      	ldr	r3, [pc, #80]	; (800f414 <USBD_LL_Init+0x94>)
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f3c6:	4b13      	ldr	r3, [pc, #76]	; (800f414 <USBD_LL_Init+0x94>)
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f3cc:	4b11      	ldr	r3, [pc, #68]	; (800f414 <USBD_LL_Init+0x94>)
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f3d2:	4b10      	ldr	r3, [pc, #64]	; (800f414 <USBD_LL_Init+0x94>)
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f3d8:	4b0e      	ldr	r3, [pc, #56]	; (800f414 <USBD_LL_Init+0x94>)
 800f3da:	2200      	movs	r2, #0
 800f3dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f3de:	480d      	ldr	r0, [pc, #52]	; (800f414 <USBD_LL_Init+0x94>)
 800f3e0:	f7f9 f8c8 	bl	8008574 <HAL_PCD_Init>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d001      	beq.n	800f3ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f3ea:	f7f1 fd4d 	bl	8000e88 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f3ee:	2180      	movs	r1, #128	; 0x80
 800f3f0:	4808      	ldr	r0, [pc, #32]	; (800f414 <USBD_LL_Init+0x94>)
 800f3f2:	f7fa fa26 	bl	8009842 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f3f6:	2240      	movs	r2, #64	; 0x40
 800f3f8:	2100      	movs	r1, #0
 800f3fa:	4806      	ldr	r0, [pc, #24]	; (800f414 <USBD_LL_Init+0x94>)
 800f3fc:	f7fa f9da 	bl	80097b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f400:	2280      	movs	r2, #128	; 0x80
 800f402:	2101      	movs	r1, #1
 800f404:	4803      	ldr	r0, [pc, #12]	; (800f414 <USBD_LL_Init+0x94>)
 800f406:	f7fa f9d5 	bl	80097b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f40a:	2300      	movs	r3, #0
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	3708      	adds	r7, #8
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}
 800f414:	100060e0 	.word	0x100060e0

0800f418 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b084      	sub	sp, #16
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f420:	2300      	movs	r3, #0
 800f422:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f424:	2300      	movs	r3, #0
 800f426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f42e:	4618      	mov	r0, r3
 800f430:	f7f9 f9bd 	bl	80087ae <HAL_PCD_Start>
 800f434:	4603      	mov	r3, r0
 800f436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f438:	7bfb      	ldrb	r3, [r7, #15]
 800f43a:	4618      	mov	r0, r3
 800f43c:	f000 f92a 	bl	800f694 <USBD_Get_USB_Status>
 800f440:	4603      	mov	r3, r0
 800f442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f444:	7bbb      	ldrb	r3, [r7, #14]
}
 800f446:	4618      	mov	r0, r3
 800f448:	3710      	adds	r7, #16
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}

0800f44e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f44e:	b580      	push	{r7, lr}
 800f450:	b084      	sub	sp, #16
 800f452:	af00      	add	r7, sp, #0
 800f454:	6078      	str	r0, [r7, #4]
 800f456:	4608      	mov	r0, r1
 800f458:	4611      	mov	r1, r2
 800f45a:	461a      	mov	r2, r3
 800f45c:	4603      	mov	r3, r0
 800f45e:	70fb      	strb	r3, [r7, #3]
 800f460:	460b      	mov	r3, r1
 800f462:	70bb      	strb	r3, [r7, #2]
 800f464:	4613      	mov	r3, r2
 800f466:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f468:	2300      	movs	r3, #0
 800f46a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f46c:	2300      	movs	r3, #0
 800f46e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f476:	78bb      	ldrb	r3, [r7, #2]
 800f478:	883a      	ldrh	r2, [r7, #0]
 800f47a:	78f9      	ldrb	r1, [r7, #3]
 800f47c:	f7f9 fda1 	bl	8008fc2 <HAL_PCD_EP_Open>
 800f480:	4603      	mov	r3, r0
 800f482:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f484:	7bfb      	ldrb	r3, [r7, #15]
 800f486:	4618      	mov	r0, r3
 800f488:	f000 f904 	bl	800f694 <USBD_Get_USB_Status>
 800f48c:	4603      	mov	r3, r0
 800f48e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f490:	7bbb      	ldrb	r3, [r7, #14]
}
 800f492:	4618      	mov	r0, r3
 800f494:	3710      	adds	r7, #16
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}

0800f49a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f49a:	b580      	push	{r7, lr}
 800f49c:	b084      	sub	sp, #16
 800f49e:	af00      	add	r7, sp, #0
 800f4a0:	6078      	str	r0, [r7, #4]
 800f4a2:	460b      	mov	r3, r1
 800f4a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f4b4:	78fa      	ldrb	r2, [r7, #3]
 800f4b6:	4611      	mov	r1, r2
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7f9 fdea 	bl	8009092 <HAL_PCD_EP_Close>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4c2:	7bfb      	ldrb	r3, [r7, #15]
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f000 f8e5 	bl	800f694 <USBD_Get_USB_Status>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3710      	adds	r7, #16
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	460b      	mov	r3, r1
 800f4e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f4f2:	78fa      	ldrb	r2, [r7, #3]
 800f4f4:	4611      	mov	r1, r2
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7f9 fec2 	bl	8009280 <HAL_PCD_EP_SetStall>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f500:	7bfb      	ldrb	r3, [r7, #15]
 800f502:	4618      	mov	r0, r3
 800f504:	f000 f8c6 	bl	800f694 <USBD_Get_USB_Status>
 800f508:	4603      	mov	r3, r0
 800f50a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f50c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3710      	adds	r7, #16
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}

0800f516 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f516:	b580      	push	{r7, lr}
 800f518:	b084      	sub	sp, #16
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
 800f51e:	460b      	mov	r3, r1
 800f520:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f522:	2300      	movs	r3, #0
 800f524:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f526:	2300      	movs	r3, #0
 800f528:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f530:	78fa      	ldrb	r2, [r7, #3]
 800f532:	4611      	mov	r1, r2
 800f534:	4618      	mov	r0, r3
 800f536:	f7f9 ff07 	bl	8009348 <HAL_PCD_EP_ClrStall>
 800f53a:	4603      	mov	r3, r0
 800f53c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f53e:	7bfb      	ldrb	r3, [r7, #15]
 800f540:	4618      	mov	r0, r3
 800f542:	f000 f8a7 	bl	800f694 <USBD_Get_USB_Status>
 800f546:	4603      	mov	r3, r0
 800f548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f54a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	3710      	adds	r7, #16
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}

0800f554 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f554:	b480      	push	{r7}
 800f556:	b085      	sub	sp, #20
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	460b      	mov	r3, r1
 800f55e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f566:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	da0b      	bge.n	800f588 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f570:	78fb      	ldrb	r3, [r7, #3]
 800f572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f576:	68f9      	ldr	r1, [r7, #12]
 800f578:	4613      	mov	r3, r2
 800f57a:	00db      	lsls	r3, r3, #3
 800f57c:	1a9b      	subs	r3, r3, r2
 800f57e:	009b      	lsls	r3, r3, #2
 800f580:	440b      	add	r3, r1
 800f582:	333e      	adds	r3, #62	; 0x3e
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	e00b      	b.n	800f5a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f588:	78fb      	ldrb	r3, [r7, #3]
 800f58a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f58e:	68f9      	ldr	r1, [r7, #12]
 800f590:	4613      	mov	r3, r2
 800f592:	00db      	lsls	r3, r3, #3
 800f594:	1a9b      	subs	r3, r3, r2
 800f596:	009b      	lsls	r3, r3, #2
 800f598:	440b      	add	r3, r1
 800f59a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f59e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3714      	adds	r7, #20
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr

0800f5ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b084      	sub	sp, #16
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f5c6:	78fa      	ldrb	r2, [r7, #3]
 800f5c8:	4611      	mov	r1, r2
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f7f9 fcd4 	bl	8008f78 <HAL_PCD_SetAddress>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5d4:	7bfb      	ldrb	r3, [r7, #15]
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f000 f85c 	bl	800f694 <USBD_Get_USB_Status>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3710      	adds	r7, #16
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}

0800f5ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f5ea:	b580      	push	{r7, lr}
 800f5ec:	b086      	sub	sp, #24
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	60f8      	str	r0, [r7, #12]
 800f5f2:	607a      	str	r2, [r7, #4]
 800f5f4:	603b      	str	r3, [r7, #0]
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5fe:	2300      	movs	r3, #0
 800f600:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f608:	7af9      	ldrb	r1, [r7, #11]
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	f7f9 fded 	bl	80091ec <HAL_PCD_EP_Transmit>
 800f612:	4603      	mov	r3, r0
 800f614:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f616:	7dfb      	ldrb	r3, [r7, #23]
 800f618:	4618      	mov	r0, r3
 800f61a:	f000 f83b 	bl	800f694 <USBD_Get_USB_Status>
 800f61e:	4603      	mov	r3, r0
 800f620:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f622:	7dbb      	ldrb	r3, [r7, #22]
}
 800f624:	4618      	mov	r0, r3
 800f626:	3718      	adds	r7, #24
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b086      	sub	sp, #24
 800f630:	af00      	add	r7, sp, #0
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	607a      	str	r2, [r7, #4]
 800f636:	603b      	str	r3, [r7, #0]
 800f638:	460b      	mov	r3, r1
 800f63a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f63c:	2300      	movs	r3, #0
 800f63e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f640:	2300      	movs	r3, #0
 800f642:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f64a:	7af9      	ldrb	r1, [r7, #11]
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	687a      	ldr	r2, [r7, #4]
 800f650:	f7f9 fd69 	bl	8009126 <HAL_PCD_EP_Receive>
 800f654:	4603      	mov	r3, r0
 800f656:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f658:	7dfb      	ldrb	r3, [r7, #23]
 800f65a:	4618      	mov	r0, r3
 800f65c:	f000 f81a 	bl	800f694 <USBD_Get_USB_Status>
 800f660:	4603      	mov	r3, r0
 800f662:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f664:	7dbb      	ldrb	r3, [r7, #22]
}
 800f666:	4618      	mov	r0, r3
 800f668:	3718      	adds	r7, #24
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}

0800f66e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f66e:	b580      	push	{r7, lr}
 800f670:	b082      	sub	sp, #8
 800f672:	af00      	add	r7, sp, #0
 800f674:	6078      	str	r0, [r7, #4]
 800f676:	460b      	mov	r3, r1
 800f678:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f680:	78fa      	ldrb	r2, [r7, #3]
 800f682:	4611      	mov	r1, r2
 800f684:	4618      	mov	r0, r3
 800f686:	f7f9 fd99 	bl	80091bc <HAL_PCD_EP_GetRxCount>
 800f68a:	4603      	mov	r3, r0
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3708      	adds	r7, #8
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f694:	b480      	push	{r7}
 800f696:	b085      	sub	sp, #20
 800f698:	af00      	add	r7, sp, #0
 800f69a:	4603      	mov	r3, r0
 800f69c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f6a2:	79fb      	ldrb	r3, [r7, #7]
 800f6a4:	2b03      	cmp	r3, #3
 800f6a6:	d817      	bhi.n	800f6d8 <USBD_Get_USB_Status+0x44>
 800f6a8:	a201      	add	r2, pc, #4	; (adr r2, 800f6b0 <USBD_Get_USB_Status+0x1c>)
 800f6aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ae:	bf00      	nop
 800f6b0:	0800f6c1 	.word	0x0800f6c1
 800f6b4:	0800f6c7 	.word	0x0800f6c7
 800f6b8:	0800f6cd 	.word	0x0800f6cd
 800f6bc:	0800f6d3 	.word	0x0800f6d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	73fb      	strb	r3, [r7, #15]
    break;
 800f6c4:	e00b      	b.n	800f6de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f6c6:	2303      	movs	r3, #3
 800f6c8:	73fb      	strb	r3, [r7, #15]
    break;
 800f6ca:	e008      	b.n	800f6de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f6d0:	e005      	b.n	800f6de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f6d2:	2303      	movs	r3, #3
 800f6d4:	73fb      	strb	r3, [r7, #15]
    break;
 800f6d6:	e002      	b.n	800f6de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f6d8:	2303      	movs	r3, #3
 800f6da:	73fb      	strb	r3, [r7, #15]
    break;
 800f6dc:	bf00      	nop
  }
  return usb_status;
 800f6de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3714      	adds	r7, #20
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr

0800f6ec <__cxa_pure_virtual>:
 800f6ec:	b508      	push	{r3, lr}
 800f6ee:	f000 f80d 	bl	800f70c <_ZSt9terminatev>

0800f6f2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f6f2:	b508      	push	{r3, lr}
 800f6f4:	4780      	blx	r0
 800f6f6:	f000 f80e 	bl	800f716 <abort>
	...

0800f6fc <_ZSt13get_terminatev>:
 800f6fc:	4b02      	ldr	r3, [pc, #8]	; (800f708 <_ZSt13get_terminatev+0xc>)
 800f6fe:	6818      	ldr	r0, [r3, #0]
 800f700:	f3bf 8f5b 	dmb	ish
 800f704:	4770      	bx	lr
 800f706:	bf00      	nop
 800f708:	10000184 	.word	0x10000184

0800f70c <_ZSt9terminatev>:
 800f70c:	b508      	push	{r3, lr}
 800f70e:	f7ff fff5 	bl	800f6fc <_ZSt13get_terminatev>
 800f712:	f7ff ffee 	bl	800f6f2 <_ZN10__cxxabiv111__terminateEPFvvE>

0800f716 <abort>:
 800f716:	b508      	push	{r3, lr}
 800f718:	2006      	movs	r0, #6
 800f71a:	f000 f939 	bl	800f990 <raise>
 800f71e:	2001      	movs	r0, #1
 800f720:	f7f2 f950 	bl	80019c4 <_exit>

0800f724 <__errno>:
 800f724:	4b01      	ldr	r3, [pc, #4]	; (800f72c <__errno+0x8>)
 800f726:	6818      	ldr	r0, [r3, #0]
 800f728:	4770      	bx	lr
 800f72a:	bf00      	nop
 800f72c:	10000188 	.word	0x10000188

0800f730 <__libc_init_array>:
 800f730:	b570      	push	{r4, r5, r6, lr}
 800f732:	4e0d      	ldr	r6, [pc, #52]	; (800f768 <__libc_init_array+0x38>)
 800f734:	4c0d      	ldr	r4, [pc, #52]	; (800f76c <__libc_init_array+0x3c>)
 800f736:	1ba4      	subs	r4, r4, r6
 800f738:	10a4      	asrs	r4, r4, #2
 800f73a:	2500      	movs	r5, #0
 800f73c:	42a5      	cmp	r5, r4
 800f73e:	d109      	bne.n	800f754 <__libc_init_array+0x24>
 800f740:	4e0b      	ldr	r6, [pc, #44]	; (800f770 <__libc_init_array+0x40>)
 800f742:	4c0c      	ldr	r4, [pc, #48]	; (800f774 <__libc_init_array+0x44>)
 800f744:	f000 f970 	bl	800fa28 <_init>
 800f748:	1ba4      	subs	r4, r4, r6
 800f74a:	10a4      	asrs	r4, r4, #2
 800f74c:	2500      	movs	r5, #0
 800f74e:	42a5      	cmp	r5, r4
 800f750:	d105      	bne.n	800f75e <__libc_init_array+0x2e>
 800f752:	bd70      	pop	{r4, r5, r6, pc}
 800f754:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f758:	4798      	blx	r3
 800f75a:	3501      	adds	r5, #1
 800f75c:	e7ee      	b.n	800f73c <__libc_init_array+0xc>
 800f75e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f762:	4798      	blx	r3
 800f764:	3501      	adds	r5, #1
 800f766:	e7f2      	b.n	800f74e <__libc_init_array+0x1e>
 800f768:	08010044 	.word	0x08010044
 800f76c:	08010044 	.word	0x08010044
 800f770:	08010044 	.word	0x08010044
 800f774:	0801004c 	.word	0x0801004c

0800f778 <malloc>:
 800f778:	4b02      	ldr	r3, [pc, #8]	; (800f784 <malloc+0xc>)
 800f77a:	4601      	mov	r1, r0
 800f77c:	6818      	ldr	r0, [r3, #0]
 800f77e:	f000 b86d 	b.w	800f85c <_malloc_r>
 800f782:	bf00      	nop
 800f784:	10000188 	.word	0x10000188

0800f788 <free>:
 800f788:	4b02      	ldr	r3, [pc, #8]	; (800f794 <free+0xc>)
 800f78a:	4601      	mov	r1, r0
 800f78c:	6818      	ldr	r0, [r3, #0]
 800f78e:	f000 b817 	b.w	800f7c0 <_free_r>
 800f792:	bf00      	nop
 800f794:	10000188 	.word	0x10000188

0800f798 <memcpy>:
 800f798:	b510      	push	{r4, lr}
 800f79a:	1e43      	subs	r3, r0, #1
 800f79c:	440a      	add	r2, r1
 800f79e:	4291      	cmp	r1, r2
 800f7a0:	d100      	bne.n	800f7a4 <memcpy+0xc>
 800f7a2:	bd10      	pop	{r4, pc}
 800f7a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7ac:	e7f7      	b.n	800f79e <memcpy+0x6>

0800f7ae <memset>:
 800f7ae:	4402      	add	r2, r0
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	d100      	bne.n	800f7b8 <memset+0xa>
 800f7b6:	4770      	bx	lr
 800f7b8:	f803 1b01 	strb.w	r1, [r3], #1
 800f7bc:	e7f9      	b.n	800f7b2 <memset+0x4>
	...

0800f7c0 <_free_r>:
 800f7c0:	b538      	push	{r3, r4, r5, lr}
 800f7c2:	4605      	mov	r5, r0
 800f7c4:	2900      	cmp	r1, #0
 800f7c6:	d045      	beq.n	800f854 <_free_r+0x94>
 800f7c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7cc:	1f0c      	subs	r4, r1, #4
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	bfb8      	it	lt
 800f7d2:	18e4      	addlt	r4, r4, r3
 800f7d4:	f000 f8f8 	bl	800f9c8 <__malloc_lock>
 800f7d8:	4a1f      	ldr	r2, [pc, #124]	; (800f858 <_free_r+0x98>)
 800f7da:	6813      	ldr	r3, [r2, #0]
 800f7dc:	4610      	mov	r0, r2
 800f7de:	b933      	cbnz	r3, 800f7ee <_free_r+0x2e>
 800f7e0:	6063      	str	r3, [r4, #4]
 800f7e2:	6014      	str	r4, [r2, #0]
 800f7e4:	4628      	mov	r0, r5
 800f7e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7ea:	f000 b8ee 	b.w	800f9ca <__malloc_unlock>
 800f7ee:	42a3      	cmp	r3, r4
 800f7f0:	d90c      	bls.n	800f80c <_free_r+0x4c>
 800f7f2:	6821      	ldr	r1, [r4, #0]
 800f7f4:	1862      	adds	r2, r4, r1
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	bf04      	itt	eq
 800f7fa:	681a      	ldreq	r2, [r3, #0]
 800f7fc:	685b      	ldreq	r3, [r3, #4]
 800f7fe:	6063      	str	r3, [r4, #4]
 800f800:	bf04      	itt	eq
 800f802:	1852      	addeq	r2, r2, r1
 800f804:	6022      	streq	r2, [r4, #0]
 800f806:	6004      	str	r4, [r0, #0]
 800f808:	e7ec      	b.n	800f7e4 <_free_r+0x24>
 800f80a:	4613      	mov	r3, r2
 800f80c:	685a      	ldr	r2, [r3, #4]
 800f80e:	b10a      	cbz	r2, 800f814 <_free_r+0x54>
 800f810:	42a2      	cmp	r2, r4
 800f812:	d9fa      	bls.n	800f80a <_free_r+0x4a>
 800f814:	6819      	ldr	r1, [r3, #0]
 800f816:	1858      	adds	r0, r3, r1
 800f818:	42a0      	cmp	r0, r4
 800f81a:	d10b      	bne.n	800f834 <_free_r+0x74>
 800f81c:	6820      	ldr	r0, [r4, #0]
 800f81e:	4401      	add	r1, r0
 800f820:	1858      	adds	r0, r3, r1
 800f822:	4282      	cmp	r2, r0
 800f824:	6019      	str	r1, [r3, #0]
 800f826:	d1dd      	bne.n	800f7e4 <_free_r+0x24>
 800f828:	6810      	ldr	r0, [r2, #0]
 800f82a:	6852      	ldr	r2, [r2, #4]
 800f82c:	605a      	str	r2, [r3, #4]
 800f82e:	4401      	add	r1, r0
 800f830:	6019      	str	r1, [r3, #0]
 800f832:	e7d7      	b.n	800f7e4 <_free_r+0x24>
 800f834:	d902      	bls.n	800f83c <_free_r+0x7c>
 800f836:	230c      	movs	r3, #12
 800f838:	602b      	str	r3, [r5, #0]
 800f83a:	e7d3      	b.n	800f7e4 <_free_r+0x24>
 800f83c:	6820      	ldr	r0, [r4, #0]
 800f83e:	1821      	adds	r1, r4, r0
 800f840:	428a      	cmp	r2, r1
 800f842:	bf04      	itt	eq
 800f844:	6811      	ldreq	r1, [r2, #0]
 800f846:	6852      	ldreq	r2, [r2, #4]
 800f848:	6062      	str	r2, [r4, #4]
 800f84a:	bf04      	itt	eq
 800f84c:	1809      	addeq	r1, r1, r0
 800f84e:	6021      	streq	r1, [r4, #0]
 800f850:	605c      	str	r4, [r3, #4]
 800f852:	e7c7      	b.n	800f7e4 <_free_r+0x24>
 800f854:	bd38      	pop	{r3, r4, r5, pc}
 800f856:	bf00      	nop
 800f858:	100049dc 	.word	0x100049dc

0800f85c <_malloc_r>:
 800f85c:	b570      	push	{r4, r5, r6, lr}
 800f85e:	1ccd      	adds	r5, r1, #3
 800f860:	f025 0503 	bic.w	r5, r5, #3
 800f864:	3508      	adds	r5, #8
 800f866:	2d0c      	cmp	r5, #12
 800f868:	bf38      	it	cc
 800f86a:	250c      	movcc	r5, #12
 800f86c:	2d00      	cmp	r5, #0
 800f86e:	4606      	mov	r6, r0
 800f870:	db01      	blt.n	800f876 <_malloc_r+0x1a>
 800f872:	42a9      	cmp	r1, r5
 800f874:	d903      	bls.n	800f87e <_malloc_r+0x22>
 800f876:	230c      	movs	r3, #12
 800f878:	6033      	str	r3, [r6, #0]
 800f87a:	2000      	movs	r0, #0
 800f87c:	bd70      	pop	{r4, r5, r6, pc}
 800f87e:	f000 f8a3 	bl	800f9c8 <__malloc_lock>
 800f882:	4a21      	ldr	r2, [pc, #132]	; (800f908 <_malloc_r+0xac>)
 800f884:	6814      	ldr	r4, [r2, #0]
 800f886:	4621      	mov	r1, r4
 800f888:	b991      	cbnz	r1, 800f8b0 <_malloc_r+0x54>
 800f88a:	4c20      	ldr	r4, [pc, #128]	; (800f90c <_malloc_r+0xb0>)
 800f88c:	6823      	ldr	r3, [r4, #0]
 800f88e:	b91b      	cbnz	r3, 800f898 <_malloc_r+0x3c>
 800f890:	4630      	mov	r0, r6
 800f892:	f000 f845 	bl	800f920 <_sbrk_r>
 800f896:	6020      	str	r0, [r4, #0]
 800f898:	4629      	mov	r1, r5
 800f89a:	4630      	mov	r0, r6
 800f89c:	f000 f840 	bl	800f920 <_sbrk_r>
 800f8a0:	1c43      	adds	r3, r0, #1
 800f8a2:	d124      	bne.n	800f8ee <_malloc_r+0x92>
 800f8a4:	230c      	movs	r3, #12
 800f8a6:	6033      	str	r3, [r6, #0]
 800f8a8:	4630      	mov	r0, r6
 800f8aa:	f000 f88e 	bl	800f9ca <__malloc_unlock>
 800f8ae:	e7e4      	b.n	800f87a <_malloc_r+0x1e>
 800f8b0:	680b      	ldr	r3, [r1, #0]
 800f8b2:	1b5b      	subs	r3, r3, r5
 800f8b4:	d418      	bmi.n	800f8e8 <_malloc_r+0x8c>
 800f8b6:	2b0b      	cmp	r3, #11
 800f8b8:	d90f      	bls.n	800f8da <_malloc_r+0x7e>
 800f8ba:	600b      	str	r3, [r1, #0]
 800f8bc:	50cd      	str	r5, [r1, r3]
 800f8be:	18cc      	adds	r4, r1, r3
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	f000 f882 	bl	800f9ca <__malloc_unlock>
 800f8c6:	f104 000b 	add.w	r0, r4, #11
 800f8ca:	1d23      	adds	r3, r4, #4
 800f8cc:	f020 0007 	bic.w	r0, r0, #7
 800f8d0:	1ac3      	subs	r3, r0, r3
 800f8d2:	d0d3      	beq.n	800f87c <_malloc_r+0x20>
 800f8d4:	425a      	negs	r2, r3
 800f8d6:	50e2      	str	r2, [r4, r3]
 800f8d8:	e7d0      	b.n	800f87c <_malloc_r+0x20>
 800f8da:	428c      	cmp	r4, r1
 800f8dc:	684b      	ldr	r3, [r1, #4]
 800f8de:	bf16      	itet	ne
 800f8e0:	6063      	strne	r3, [r4, #4]
 800f8e2:	6013      	streq	r3, [r2, #0]
 800f8e4:	460c      	movne	r4, r1
 800f8e6:	e7eb      	b.n	800f8c0 <_malloc_r+0x64>
 800f8e8:	460c      	mov	r4, r1
 800f8ea:	6849      	ldr	r1, [r1, #4]
 800f8ec:	e7cc      	b.n	800f888 <_malloc_r+0x2c>
 800f8ee:	1cc4      	adds	r4, r0, #3
 800f8f0:	f024 0403 	bic.w	r4, r4, #3
 800f8f4:	42a0      	cmp	r0, r4
 800f8f6:	d005      	beq.n	800f904 <_malloc_r+0xa8>
 800f8f8:	1a21      	subs	r1, r4, r0
 800f8fa:	4630      	mov	r0, r6
 800f8fc:	f000 f810 	bl	800f920 <_sbrk_r>
 800f900:	3001      	adds	r0, #1
 800f902:	d0cf      	beq.n	800f8a4 <_malloc_r+0x48>
 800f904:	6025      	str	r5, [r4, #0]
 800f906:	e7db      	b.n	800f8c0 <_malloc_r+0x64>
 800f908:	100049dc 	.word	0x100049dc
 800f90c:	100049e0 	.word	0x100049e0

0800f910 <realloc>:
 800f910:	4b02      	ldr	r3, [pc, #8]	; (800f91c <realloc+0xc>)
 800f912:	460a      	mov	r2, r1
 800f914:	4601      	mov	r1, r0
 800f916:	6818      	ldr	r0, [r3, #0]
 800f918:	f000 b858 	b.w	800f9cc <_realloc_r>
 800f91c:	10000188 	.word	0x10000188

0800f920 <_sbrk_r>:
 800f920:	b538      	push	{r3, r4, r5, lr}
 800f922:	4c06      	ldr	r4, [pc, #24]	; (800f93c <_sbrk_r+0x1c>)
 800f924:	2300      	movs	r3, #0
 800f926:	4605      	mov	r5, r0
 800f928:	4608      	mov	r0, r1
 800f92a:	6023      	str	r3, [r4, #0]
 800f92c:	f7f2 f854 	bl	80019d8 <_sbrk>
 800f930:	1c43      	adds	r3, r0, #1
 800f932:	d102      	bne.n	800f93a <_sbrk_r+0x1a>
 800f934:	6823      	ldr	r3, [r4, #0]
 800f936:	b103      	cbz	r3, 800f93a <_sbrk_r+0x1a>
 800f938:	602b      	str	r3, [r5, #0]
 800f93a:	bd38      	pop	{r3, r4, r5, pc}
 800f93c:	100064e8 	.word	0x100064e8

0800f940 <_raise_r>:
 800f940:	291f      	cmp	r1, #31
 800f942:	b538      	push	{r3, r4, r5, lr}
 800f944:	4604      	mov	r4, r0
 800f946:	460d      	mov	r5, r1
 800f948:	d904      	bls.n	800f954 <_raise_r+0x14>
 800f94a:	2316      	movs	r3, #22
 800f94c:	6003      	str	r3, [r0, #0]
 800f94e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f952:	bd38      	pop	{r3, r4, r5, pc}
 800f954:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f956:	b112      	cbz	r2, 800f95e <_raise_r+0x1e>
 800f958:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f95c:	b94b      	cbnz	r3, 800f972 <_raise_r+0x32>
 800f95e:	4620      	mov	r0, r4
 800f960:	f000 f830 	bl	800f9c4 <_getpid_r>
 800f964:	462a      	mov	r2, r5
 800f966:	4601      	mov	r1, r0
 800f968:	4620      	mov	r0, r4
 800f96a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f96e:	f000 b817 	b.w	800f9a0 <_kill_r>
 800f972:	2b01      	cmp	r3, #1
 800f974:	d00a      	beq.n	800f98c <_raise_r+0x4c>
 800f976:	1c59      	adds	r1, r3, #1
 800f978:	d103      	bne.n	800f982 <_raise_r+0x42>
 800f97a:	2316      	movs	r3, #22
 800f97c:	6003      	str	r3, [r0, #0]
 800f97e:	2001      	movs	r0, #1
 800f980:	e7e7      	b.n	800f952 <_raise_r+0x12>
 800f982:	2400      	movs	r4, #0
 800f984:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f988:	4628      	mov	r0, r5
 800f98a:	4798      	blx	r3
 800f98c:	2000      	movs	r0, #0
 800f98e:	e7e0      	b.n	800f952 <_raise_r+0x12>

0800f990 <raise>:
 800f990:	4b02      	ldr	r3, [pc, #8]	; (800f99c <raise+0xc>)
 800f992:	4601      	mov	r1, r0
 800f994:	6818      	ldr	r0, [r3, #0]
 800f996:	f7ff bfd3 	b.w	800f940 <_raise_r>
 800f99a:	bf00      	nop
 800f99c:	10000188 	.word	0x10000188

0800f9a0 <_kill_r>:
 800f9a0:	b538      	push	{r3, r4, r5, lr}
 800f9a2:	4c07      	ldr	r4, [pc, #28]	; (800f9c0 <_kill_r+0x20>)
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	4605      	mov	r5, r0
 800f9a8:	4608      	mov	r0, r1
 800f9aa:	4611      	mov	r1, r2
 800f9ac:	6023      	str	r3, [r4, #0]
 800f9ae:	f7f1 fff9 	bl	80019a4 <_kill>
 800f9b2:	1c43      	adds	r3, r0, #1
 800f9b4:	d102      	bne.n	800f9bc <_kill_r+0x1c>
 800f9b6:	6823      	ldr	r3, [r4, #0]
 800f9b8:	b103      	cbz	r3, 800f9bc <_kill_r+0x1c>
 800f9ba:	602b      	str	r3, [r5, #0]
 800f9bc:	bd38      	pop	{r3, r4, r5, pc}
 800f9be:	bf00      	nop
 800f9c0:	100064e8 	.word	0x100064e8

0800f9c4 <_getpid_r>:
 800f9c4:	f7f1 bfe6 	b.w	8001994 <_getpid>

0800f9c8 <__malloc_lock>:
 800f9c8:	4770      	bx	lr

0800f9ca <__malloc_unlock>:
 800f9ca:	4770      	bx	lr

0800f9cc <_realloc_r>:
 800f9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ce:	4607      	mov	r7, r0
 800f9d0:	4614      	mov	r4, r2
 800f9d2:	460e      	mov	r6, r1
 800f9d4:	b921      	cbnz	r1, 800f9e0 <_realloc_r+0x14>
 800f9d6:	4611      	mov	r1, r2
 800f9d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f9dc:	f7ff bf3e 	b.w	800f85c <_malloc_r>
 800f9e0:	b922      	cbnz	r2, 800f9ec <_realloc_r+0x20>
 800f9e2:	f7ff feed 	bl	800f7c0 <_free_r>
 800f9e6:	4625      	mov	r5, r4
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9ec:	f000 f814 	bl	800fa18 <_malloc_usable_size_r>
 800f9f0:	42a0      	cmp	r0, r4
 800f9f2:	d20f      	bcs.n	800fa14 <_realloc_r+0x48>
 800f9f4:	4621      	mov	r1, r4
 800f9f6:	4638      	mov	r0, r7
 800f9f8:	f7ff ff30 	bl	800f85c <_malloc_r>
 800f9fc:	4605      	mov	r5, r0
 800f9fe:	2800      	cmp	r0, #0
 800fa00:	d0f2      	beq.n	800f9e8 <_realloc_r+0x1c>
 800fa02:	4631      	mov	r1, r6
 800fa04:	4622      	mov	r2, r4
 800fa06:	f7ff fec7 	bl	800f798 <memcpy>
 800fa0a:	4631      	mov	r1, r6
 800fa0c:	4638      	mov	r0, r7
 800fa0e:	f7ff fed7 	bl	800f7c0 <_free_r>
 800fa12:	e7e9      	b.n	800f9e8 <_realloc_r+0x1c>
 800fa14:	4635      	mov	r5, r6
 800fa16:	e7e7      	b.n	800f9e8 <_realloc_r+0x1c>

0800fa18 <_malloc_usable_size_r>:
 800fa18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa1c:	1f18      	subs	r0, r3, #4
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	bfbc      	itt	lt
 800fa22:	580b      	ldrlt	r3, [r1, r0]
 800fa24:	18c0      	addlt	r0, r0, r3
 800fa26:	4770      	bx	lr

0800fa28 <_init>:
 800fa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa2a:	bf00      	nop
 800fa2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa2e:	bc08      	pop	{r3}
 800fa30:	469e      	mov	lr, r3
 800fa32:	4770      	bx	lr

0800fa34 <_fini>:
 800fa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa36:	bf00      	nop
 800fa38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa3a:	bc08      	pop	{r3}
 800fa3c:	469e      	mov	lr, r3
 800fa3e:	4770      	bx	lr
