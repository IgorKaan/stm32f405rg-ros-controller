
stm32f405rg-ros-core-controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f480  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  0800f610  0800f610  0001f610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbe4  0800fbe4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fbe4  0800fbe4  0001fbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fbec  0800fbec  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fbec  0800fbec  0001fbec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fbf4  0800fbf4  0001fbf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800fbf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000062c0  200001f4  0800fdec  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200064b4  0800fdec  000264b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030855  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005de3  00000000  00000000  00050a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f80  00000000  00000000  00056860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d58  00000000  00000000  000587e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002935e  00000000  00000000  0005a538  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b60d  00000000  00000000  00083896  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dcce8  00000000  00000000  0009eea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017bb8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087d8  00000000  00000000  0017bc08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f5f8 	.word	0x0800f5f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800f5f8 	.word	0x0800f5f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000210 	.word	0x20000210
 8000510:	20000264 	.word	0x20000264

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b0aa      	sub	sp, #168	; 0xa8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f004 fab5 	bl	8004a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f8eb 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f9b7 	bl	8000894 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000526:	f000 f951 	bl	80007cc <MX_CAN1_Init>
  MX_I2C1_Init();
 800052a:	f000 f985 	bl	8000838 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ctrl = read_id();
 800052e:	f000 fca9 	bl	8000e84 <read_id>
 8000532:	4603      	mov	r3, r0
 8000534:	461a      	mov	r2, r3
 8000536:	4b5f      	ldr	r3, [pc, #380]	; (80006b4 <main+0x1a0>)
 8000538:	701a      	strb	r2, [r3, #0]
  MPU9250_calibrate();
 800053a:	f000 fcd9 	bl	8000ef0 <MPU9250_calibrate>

  HAL_Delay(2000);
 800053e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000542:	f004 fae3 	bl	8004b0c <HAL_Delay>
  MPU9250_init();
 8000546:	f000 fcb1 	bl	8000eac <MPU9250_init>
  HAL_Delay(500);
 800054a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800054e:	f004 fadd 	bl	8004b0c <HAL_Delay>
  init_ROS();
 8000552:	f003 f841 	bl	80035d8 <init_ROS>
  HAL_Delay(500);
 8000556:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800055a:	f004 fad7 	bl	8004b0c <HAL_Delay>

  left_wheels_Header.DLC = 4;
 800055e:	4b56      	ldr	r3, [pc, #344]	; (80006b8 <main+0x1a4>)
 8000560:	2204      	movs	r2, #4
 8000562:	611a      	str	r2, [r3, #16]
  left_wheels_Header.IDE = CAN_ID_STD;
 8000564:	4b54      	ldr	r3, [pc, #336]	; (80006b8 <main+0x1a4>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  left_wheels_Header.RTR = CAN_RTR_DATA;
 800056a:	4b53      	ldr	r3, [pc, #332]	; (80006b8 <main+0x1a4>)
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]
  left_wheels_Header.StdId = 0xF;
 8000570:	4b51      	ldr	r3, [pc, #324]	; (80006b8 <main+0x1a4>)
 8000572:	220f      	movs	r2, #15
 8000574:	601a      	str	r2, [r3, #0]

  right_wheels_Header.DLC = 4;
 8000576:	4b51      	ldr	r3, [pc, #324]	; (80006bc <main+0x1a8>)
 8000578:	2204      	movs	r2, #4
 800057a:	611a      	str	r2, [r3, #16]
  right_wheels_Header.IDE = CAN_ID_STD;
 800057c:	4b4f      	ldr	r3, [pc, #316]	; (80006bc <main+0x1a8>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  right_wheels_Header.RTR = CAN_RTR_DATA;
 8000582:	4b4e      	ldr	r3, [pc, #312]	; (80006bc <main+0x1a8>)
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  right_wheels_Header.StdId = 0x1F;
 8000588:	4b4c      	ldr	r3, [pc, #304]	; (80006bc <main+0x1a8>)
 800058a:	221f      	movs	r2, #31
 800058c:	601a      	str	r2, [r3, #0]

  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800058e:	4b4c      	ldr	r3, [pc, #304]	; (80006c0 <main+0x1ac>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0;
 8000594:	4b4a      	ldr	r3, [pc, #296]	; (80006c0 <main+0x1ac>)
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 800059a:	4b49      	ldr	r3, [pc, #292]	; (80006c0 <main+0x1ac>)
 800059c:	2200      	movs	r2, #0
 800059e:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 80005a0:	4b47      	ldr	r3, [pc, #284]	; (80006c0 <main+0x1ac>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 80005a6:	4b46      	ldr	r3, [pc, #280]	; (80006c0 <main+0x1ac>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005ac:	4b44      	ldr	r3, [pc, #272]	; (80006c0 <main+0x1ac>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	61da      	str	r2, [r3, #28]
  //sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterActivation = ENABLE;
 80005b2:	4b43      	ldr	r3, [pc, #268]	; (80006c0 <main+0x1ac>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80005b8:	4941      	ldr	r1, [pc, #260]	; (80006c0 <main+0x1ac>)
 80005ba:	4842      	ldr	r0, [pc, #264]	; (80006c4 <main+0x1b0>)
 80005bc:	f004 fbc4 	bl	8004d48 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1);
 80005c0:	4840      	ldr	r0, [pc, #256]	; (80006c4 <main+0x1b0>)
 80005c2:	f004 fca1 	bl	8004f08 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005c6:	2102      	movs	r1, #2
 80005c8:	483e      	ldr	r0, [pc, #248]	; (80006c4 <main+0x1b0>)
 80005ca:	f004 fece 	bl	800536a <HAL_CAN_ActivateNotification>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ce:	4b3e      	ldr	r3, [pc, #248]	; (80006c8 <main+0x1b4>)
 80005d0:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80005d4:	461d      	mov	r5, r3
 80005d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f00c fea7 	bl	800d33c <osThreadCreate>
 80005ee:	4602      	mov	r2, r0
 80005f0:	4b36      	ldr	r3, [pc, #216]	; (80006cc <main+0x1b8>)
 80005f2:	601a      	str	r2, [r3, #0]

  /* definition and creation of task1 */
  osThreadDef(task1, StartTask02, osPriorityNormal, 0, 128);
 80005f4:	4b36      	ldr	r3, [pc, #216]	; (80006d0 <main+0x1bc>)
 80005f6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80005fa:	461d      	mov	r5, r3
 80005fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000600:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000604:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 8000608:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f00c fe94 	bl	800d33c <osThreadCreate>
 8000614:	4602      	mov	r2, r0
 8000616:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <main+0x1c0>)
 8000618:	601a      	str	r2, [r3, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, StartTask03, osPriorityNormal, 0, 128);
 800061a:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <main+0x1c4>)
 800061c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000620:	461d      	mov	r5, r3
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 800062e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f00c fe81 	bl	800d33c <osThreadCreate>
 800063a:	4602      	mov	r2, r0
 800063c:	4b27      	ldr	r3, [pc, #156]	; (80006dc <main+0x1c8>)
 800063e:	601a      	str	r2, [r3, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, StartTask04, osPriorityNormal, 0, 128);
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <main+0x1cc>)
 8000642:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000646:	461d      	mov	r5, r3
 8000648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000650:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3), NULL);
 8000654:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f00c fe6e 	bl	800d33c <osThreadCreate>
 8000660:	4602      	mov	r2, r0
 8000662:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <main+0x1d0>)
 8000664:	601a      	str	r2, [r3, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, StartTask05, osPriorityNormal, 0, 128);
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <main+0x1d4>)
 8000668:	f107 041c 	add.w	r4, r7, #28
 800066c:	461d      	mov	r5, r3
 800066e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000672:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task4Handle = osThreadCreate(osThread(task4), NULL);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f00c fe5b 	bl	800d33c <osThreadCreate>
 8000686:	4602      	mov	r2, r0
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <main+0x1d8>)
 800068a:	601a      	str	r2, [r3, #0]

  /* definition and creation of task5 */
  osThreadDef(task5, StartTask06, osPriorityNormal, 0, 128);
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <main+0x1dc>)
 800068e:	463c      	mov	r4, r7
 8000690:	461d      	mov	r5, r3
 8000692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000696:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800069a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task5Handle = osThreadCreate(osThread(task5), NULL);
 800069e:	463b      	mov	r3, r7
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f00c fe4a 	bl	800d33c <osThreadCreate>
 80006a8:	4602      	mov	r2, r0
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <main+0x1e0>)
 80006ac:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006ae:	f00c fe3e 	bl	800d32e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <main+0x19e>
 80006b4:	2000046c 	.word	0x2000046c
 80006b8:	20004a24 	.word	0x20004a24
 80006bc:	20004ee0 	.word	0x20004ee0
 80006c0:	200049ec 	.word	0x200049ec
 80006c4:	20004f20 	.word	0x20004f20
 80006c8:	0800f61c 	.word	0x0800f61c
 80006cc:	20004a18 	.word	0x20004a18
 80006d0:	0800f640 	.word	0x0800f640
 80006d4:	20004aa4 	.word	0x20004aa4
 80006d8:	0800f664 	.word	0x0800f664
 80006dc:	20004f90 	.word	0x20004f90
 80006e0:	0800f688 	.word	0x0800f688
 80006e4:	20004acc 	.word	0x20004acc
 80006e8:	0800f6ac 	.word	0x0800f6ac
 80006ec:	20004ab4 	.word	0x20004ab4
 80006f0:	0800f6d0 	.word	0x0800f6d0
 80006f4:	20004aac 	.word	0x20004aac

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	2230      	movs	r2, #48	; 0x30
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f00e fe39 	bl	800f37e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <SystemClock_Config+0xcc>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	4a27      	ldr	r2, [pc, #156]	; (80007c4 <SystemClock_Config+0xcc>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	; 0x40
 800072c:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <SystemClock_Config+0xcc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <SystemClock_Config+0xd0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <SystemClock_Config+0xd0>)
 8000742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <SystemClock_Config+0xd0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000754:	2301      	movs	r3, #1
 8000756:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2302      	movs	r3, #2
 8000760:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000768:	2304      	movs	r3, #4
 800076a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800076c:	23a8      	movs	r3, #168	; 0xa8
 800076e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000770:	2302      	movs	r3, #2
 8000772:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000774:	2307      	movs	r3, #7
 8000776:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	4618      	mov	r0, r3
 800077e:	f008 ffcf 	bl	8009720 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000788:	f000 faf0 	bl	8000d6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000790:	2302      	movs	r3, #2
 8000792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000798:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800079c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800079e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2105      	movs	r1, #5
 80007aa:	4618      	mov	r0, r3
 80007ac:	f009 fa28 	bl	8009c00 <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007b6:	f000 fad9 	bl	8000d6c <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3750      	adds	r7, #80	; 0x50
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40007000 	.word	0x40007000

080007cc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_CAN1_Init+0x64>)
 80007d2:	4a18      	ldr	r2, [pc, #96]	; (8000834 <MX_CAN1_Init+0x68>)
 80007d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_CAN1_Init+0x64>)
 80007d8:	2203      	movs	r2, #3
 80007da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_CAN1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_CAN1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_CAN1_Init+0x64>)
 80007ea:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80007ee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_CAN1_Init+0x64>)
 80007f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007f6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <MX_CAN1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_CAN1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_CAN1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_CAN1_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_CAN1_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_CAN1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_CAN1_Init+0x64>)
 800081e:	f004 f997 	bl	8004b50 <HAL_CAN_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000828:	f000 faa0 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20004f20 	.word	0x20004f20
 8000834:	40006400 	.word	0x40006400

08000838 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_I2C1_Init+0x50>)
 800083e:	4a13      	ldr	r2, [pc, #76]	; (800088c <MX_I2C1_Init+0x54>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_I2C1_Init+0x50>)
 8000844:	4a12      	ldr	r2, [pc, #72]	; (8000890 <MX_I2C1_Init+0x58>)
 8000846:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_I2C1_Init+0x50>)
 8000856:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_I2C1_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_I2C1_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_I2C1_Init+0x50>)
 8000876:	f005 fa8f 	bl	8005d98 <HAL_I2C_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000880:	f000 fa74 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20004a48 	.word	0x20004a48
 800088c:	40005400 	.word	0x40005400
 8000890:	00061a80 	.word	0x00061a80

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_GPIO_Init+0x68>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a16      	ldr	r2, [pc, #88]	; (80008fc <MX_GPIO_Init+0x68>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_GPIO_Init+0x68>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_GPIO_Init+0x68>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <MX_GPIO_Init+0x68>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <MX_GPIO_Init+0x68>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_GPIO_Init+0x68>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <MX_GPIO_Init+0x68>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_GPIO_Init+0x68>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

}
 80008ee:	bf00      	nop
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	can_res++;
 8000908:	4b6d      	ldr	r3, [pc, #436]	; (8000ac0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	4a6c      	ldr	r2, [pc, #432]	; (8000ac0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8000910:	6013      	str	r3, [r2, #0]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can_RxHeader, canRXData);
 8000912:	4b6c      	ldr	r3, [pc, #432]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000914:	4a6c      	ldr	r2, [pc, #432]	; (8000ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000916:	2100      	movs	r1, #0
 8000918:	486c      	ldr	r0, [pc, #432]	; (8000acc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 800091a:	f004 fc14 	bl	8005146 <HAL_CAN_GetRxMessage>

	if (can_RxHeader.StdId == 0xA) {
 800091e:	4b6a      	ldr	r3, [pc, #424]	; (8000ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b0a      	cmp	r3, #10
 8000924:	d11c      	bne.n	8000960 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		speedRXDataLeftFrontWheel = canRXData[0];
 8000926:	4b67      	ldr	r3, [pc, #412]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000928:	781a      	ldrb	r2, [r3, #0]
 800092a:	4b69      	ldr	r3, [pc, #420]	; (8000ad0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800092c:	701a      	strb	r2, [r3, #0]
		sideRXDataLeftFrontWheel = canRXData[1];
 800092e:	4b65      	ldr	r3, [pc, #404]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000930:	785a      	ldrb	r2, [r3, #1]
 8000932:	4b68      	ldr	r3, [pc, #416]	; (8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000934:	701a      	strb	r2, [r3, #0]
		speedRXDataLeftBackWheel = canRXData[2];
 8000936:	4b63      	ldr	r3, [pc, #396]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000938:	789a      	ldrb	r2, [r3, #2]
 800093a:	4b67      	ldr	r3, [pc, #412]	; (8000ad8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 800093c:	701a      	strb	r2, [r3, #0]
		sideRXDataLeftBackWheel = canRXData[3];
 800093e:	4b61      	ldr	r3, [pc, #388]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000940:	78da      	ldrb	r2, [r3, #3]
 8000942:	4b66      	ldr	r3, [pc, #408]	; (8000adc <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 8000944:	701a      	strb	r2, [r3, #0]
		current_left_1 = canRXData[4];
 8000946:	4b5f      	ldr	r3, [pc, #380]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000948:	791a      	ldrb	r2, [r3, #4]
 800094a:	4b65      	ldr	r3, [pc, #404]	; (8000ae0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 800094c:	701a      	strb	r2, [r3, #0]
		current_left_2 = canRXData[5];
 800094e:	4b5d      	ldr	r3, [pc, #372]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000950:	795a      	ldrb	r2, [r3, #5]
 8000952:	4b64      	ldr	r3, [pc, #400]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000954:	701a      	strb	r2, [r3, #0]
		temp_left = canRXData[6];
 8000956:	4b5b      	ldr	r3, [pc, #364]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000958:	799a      	ldrb	r2, [r3, #6]
 800095a:	4b63      	ldr	r3, [pc, #396]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	e08f      	b.n	8000a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x1A) {
 8000960:	4b59      	ldr	r3, [pc, #356]	; (8000ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b1a      	cmp	r3, #26
 8000966:	d11c      	bne.n	80009a2 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
		speedRXDataRightFrontWheel = canRXData[0];
 8000968:	4b56      	ldr	r3, [pc, #344]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800096a:	781a      	ldrb	r2, [r3, #0]
 800096c:	4b5f      	ldr	r3, [pc, #380]	; (8000aec <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 800096e:	701a      	strb	r2, [r3, #0]
		sideRXDataRightFrontWheel = canRXData[1];
 8000970:	4b54      	ldr	r3, [pc, #336]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000972:	785a      	ldrb	r2, [r3, #1]
 8000974:	4b5e      	ldr	r3, [pc, #376]	; (8000af0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000976:	701a      	strb	r2, [r3, #0]
		speedRXDataRightBackWheel = canRXData[2];
 8000978:	4b52      	ldr	r3, [pc, #328]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800097a:	789a      	ldrb	r2, [r3, #2]
 800097c:	4b5d      	ldr	r3, [pc, #372]	; (8000af4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 800097e:	701a      	strb	r2, [r3, #0]
		sideRXDataRightBackWheel = canRXData[3];
 8000980:	4b50      	ldr	r3, [pc, #320]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000982:	78da      	ldrb	r2, [r3, #3]
 8000984:	4b5c      	ldr	r3, [pc, #368]	; (8000af8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000986:	701a      	strb	r2, [r3, #0]
		current_right_1 = canRXData[4];
 8000988:	4b4e      	ldr	r3, [pc, #312]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800098a:	791a      	ldrb	r2, [r3, #4]
 800098c:	4b5b      	ldr	r3, [pc, #364]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 800098e:	701a      	strb	r2, [r3, #0]
		current_right_2 = canRXData[5];
 8000990:	4b4c      	ldr	r3, [pc, #304]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000992:	795a      	ldrb	r2, [r3, #5]
 8000994:	4b5a      	ldr	r3, [pc, #360]	; (8000b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000996:	701a      	strb	r2, [r3, #0]
		temp_right = canRXData[6];
 8000998:	4b4a      	ldr	r3, [pc, #296]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800099a:	799a      	ldrb	r2, [r3, #6]
 800099c:	4b59      	ldr	r3, [pc, #356]	; (8000b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 800099e:	701a      	strb	r2, [r3, #0]
 80009a0:	e06e      	b.n	8000a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x1D) {
 80009a2:	4b49      	ldr	r3, [pc, #292]	; (8000ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b1d      	cmp	r3, #29
 80009a8:	d109      	bne.n	80009be <HAL_CAN_RxFifo0MsgPendingCallback+0xbe>
		sensorData1 = canRXData[0];
 80009aa:	4b46      	ldr	r3, [pc, #280]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	4b56      	ldr	r3, [pc, #344]	; (8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 80009b0:	701a      	strb	r2, [r3, #0]
		sensors_data[0]++;
 80009b2:	4b56      	ldr	r3, [pc, #344]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	4a54      	ldr	r2, [pc, #336]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009ba:	6013      	str	r3, [r2, #0]
 80009bc:	e060      	b.n	8000a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x2D) {
 80009be:	4b42      	ldr	r3, [pc, #264]	; (8000ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b2d      	cmp	r3, #45	; 0x2d
 80009c4:	d109      	bne.n	80009da <HAL_CAN_RxFifo0MsgPendingCallback+0xda>
		sensorData2 = canRXData[0];
 80009c6:	4b3f      	ldr	r3, [pc, #252]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 80009c8:	781a      	ldrb	r2, [r3, #0]
 80009ca:	4b51      	ldr	r3, [pc, #324]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80009cc:	701a      	strb	r2, [r3, #0]
		sensors_data[1]++;
 80009ce:	4b4f      	ldr	r3, [pc, #316]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	3301      	adds	r3, #1
 80009d4:	4a4d      	ldr	r2, [pc, #308]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009d6:	6053      	str	r3, [r2, #4]
 80009d8:	e052      	b.n	8000a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x3D) {
 80009da:	4b3b      	ldr	r3, [pc, #236]	; (8000ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b3d      	cmp	r3, #61	; 0x3d
 80009e0:	d109      	bne.n	80009f6 <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
		sensorData3 = canRXData[0];
 80009e2:	4b38      	ldr	r3, [pc, #224]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	4b4b      	ldr	r3, [pc, #300]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80009e8:	701a      	strb	r2, [r3, #0]
		sensors_data[2]++;
 80009ea:	4b48      	ldr	r3, [pc, #288]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	3301      	adds	r3, #1
 80009f0:	4a46      	ldr	r2, [pc, #280]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009f2:	6093      	str	r3, [r2, #8]
 80009f4:	e044      	b.n	8000a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x4D) {
 80009f6:	4b34      	ldr	r3, [pc, #208]	; (8000ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b4d      	cmp	r3, #77	; 0x4d
 80009fc:	d109      	bne.n	8000a12 <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
		sensorData4 = canRXData[0];
 80009fe:	4b31      	ldr	r3, [pc, #196]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	4b45      	ldr	r3, [pc, #276]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8000a04:	701a      	strb	r2, [r3, #0]
		sensors_data[3]++;
 8000a06:	4b41      	ldr	r3, [pc, #260]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	4a3f      	ldr	r2, [pc, #252]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a0e:	60d3      	str	r3, [r2, #12]
 8000a10:	e036      	b.n	8000a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x5D) {
 8000a12:	4b2d      	ldr	r3, [pc, #180]	; (8000ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2b5d      	cmp	r3, #93	; 0x5d
 8000a18:	d109      	bne.n	8000a2e <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
		sensorData5 = canRXData[0];
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a1c:	781a      	ldrb	r2, [r3, #0]
 8000a1e:	4b3f      	ldr	r3, [pc, #252]	; (8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000a20:	701a      	strb	r2, [r3, #0]
		sensors_data[4]++;
 8000a22:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a24:	691b      	ldr	r3, [r3, #16]
 8000a26:	3301      	adds	r3, #1
 8000a28:	4a38      	ldr	r2, [pc, #224]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a2a:	6113      	str	r3, [r2, #16]
 8000a2c:	e028      	b.n	8000a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x6D) {
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b6d      	cmp	r3, #109	; 0x6d
 8000a34:	d109      	bne.n	8000a4a <HAL_CAN_RxFifo0MsgPendingCallback+0x14a>
		sensorData6 = canRXData[0];
 8000a36:	4b23      	ldr	r3, [pc, #140]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	4b39      	ldr	r3, [pc, #228]	; (8000b20 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000a3c:	701a      	strb	r2, [r3, #0]
		sensors_data[5]++;
 8000a3e:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	3301      	adds	r3, #1
 8000a44:	4a31      	ldr	r2, [pc, #196]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a46:	6153      	str	r3, [r2, #20]
 8000a48:	e01a      	b.n	8000a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x7D) {
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b7d      	cmp	r3, #125	; 0x7d
 8000a50:	d109      	bne.n	8000a66 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
		sensorData7 = canRXData[0];
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a54:	781a      	ldrb	r2, [r3, #0]
 8000a56:	4b33      	ldr	r3, [pc, #204]	; (8000b24 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8000a58:	701a      	strb	r2, [r3, #0]
		sensors_data[6]++;
 8000a5a:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	4a2a      	ldr	r2, [pc, #168]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	e00c      	b.n	8000a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x8D) {
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b8d      	cmp	r3, #141	; 0x8d
 8000a6c:	d108      	bne.n	8000a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
		sensorData8 = canRXData[0];
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a70:	781a      	ldrb	r2, [r3, #0]
 8000a72:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8000a74:	701a      	strb	r2, [r3, #0]
		sensors_data[7]++;
 8000a76:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a7e:	61d3      	str	r3, [r2, #28]
	}
	diagnostics_data[0] = current_left_1;
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000a86:	701a      	strb	r2, [r3, #0]
	diagnostics_data[1] = current_left_2;
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000a8e:	705a      	strb	r2, [r3, #1]
	diagnostics_data[2] = current_right_1;
 8000a90:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000a92:	781a      	ldrb	r2, [r3, #0]
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000a96:	709a      	strb	r2, [r3, #2]
	diagnostics_data[3] = current_right_2;
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000a9e:	70da      	strb	r2, [r3, #3]
	diagnostics_data[4] = temp_left;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000aa2:	781a      	ldrb	r2, [r3, #0]
 8000aa4:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000aa6:	711a      	strb	r2, [r3, #4]
	diagnostics_data[5] = temp_right;
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000aaa:	781a      	ldrb	r2, [r3, #0]
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000aae:	715a      	strb	r2, [r3, #5]
	can_RxHeader.StdId = 0x0000;
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000464 	.word	0x20000464
 8000ac4:	20004ed4 	.word	0x20004ed4
 8000ac8:	20004f50 	.word	0x20004f50
 8000acc:	20004f20 	.word	0x20004f20
 8000ad0:	20004ab0 	.word	0x20004ab0
 8000ad4:	20004f14 	.word	0x20004f14
 8000ad8:	20004ab8 	.word	0x20004ab8
 8000adc:	20004ac8 	.word	0x20004ac8
 8000ae0:	2000047f 	.word	0x2000047f
 8000ae4:	20000480 	.word	0x20000480
 8000ae8:	20000482 	.word	0x20000482
 8000aec:	20004f1c 	.word	0x20004f1c
 8000af0:	20004ef8 	.word	0x20004ef8
 8000af4:	20004ad0 	.word	0x20004ad0
 8000af8:	20004a20 	.word	0x20004a20
 8000afc:	2000047d 	.word	0x2000047d
 8000b00:	2000047e 	.word	0x2000047e
 8000b04:	20000481 	.word	0x20000481
 8000b08:	20000475 	.word	0x20000475
 8000b0c:	20004f6c 	.word	0x20004f6c
 8000b10:	20000476 	.word	0x20000476
 8000b14:	20000477 	.word	0x20000477
 8000b18:	20000478 	.word	0x20000478
 8000b1c:	20000479 	.word	0x20000479
 8000b20:	2000047a 	.word	0x2000047a
 8000b24:	2000047b 	.word	0x2000047b
 8000b28:	2000047c 	.word	0x2000047c
 8000b2c:	20000484 	.word	0x20000484

08000b30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000b38:	f00d fe92 	bl	800e860 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	60fb      	str	r3, [r7, #12]
  xLastWakeTime = xTaskGetTickCount();
 8000b40:	f00d f85a 	bl	800dbf8 <xTaskGetTickCount>
 8000b44:	4603      	mov	r3, r0
 8000b46:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
      vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000b48:	f107 0308 	add.w	r3, r7, #8
 8000b4c:	68f9      	ldr	r1, [r7, #12]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f00c fe9c 	bl	800d88c <vTaskDelayUntil>
	  gyro_handler();
 8000b54:	f002 ff0e 	bl	8003974 <gyro_handler>
	  osDelay(1);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f00c fc3b 	bl	800d3d4 <osDelay>
	  accel_handler();
 8000b5e:	f002 ff2f 	bl	80039c0 <accel_handler>
	  osDelay(1);
 8000b62:	2001      	movs	r0, #1
 8000b64:	f00c fc36 	bl	800d3d4 <osDelay>
	  imu_pub_count++;
 8000b68:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <StartDefaultTask+0x44>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	4a01      	ldr	r2, [pc, #4]	; (8000b74 <StartDefaultTask+0x44>)
 8000b70:	6013      	str	r3, [r2, #0]
      vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000b72:	e7e9      	b.n	8000b48 <StartDefaultTask+0x18>
 8000b74:	200004b8 	.word	0x200004b8

08000b78 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 4;
 8000b80:	2304      	movs	r3, #4
 8000b82:	60fb      	str	r3, [r7, #12]
  xLastWakeTime = xTaskGetTickCount();
 8000b84:	f00d f838 	bl	800dbf8 <xTaskGetTickCount>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
      vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	68f9      	ldr	r1, [r7, #12]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f00c fe7a 	bl	800d88c <vTaskDelayUntil>
	  MPU9250_getAllData(allData);
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <StartTask02+0x34>)
 8000b9a:	f000 fbc1 	bl	8001320 <MPU9250_getAllData>
	  imu_get_count++;
 8000b9e:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <StartTask02+0x38>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	4a02      	ldr	r2, [pc, #8]	; (8000bb0 <StartTask02+0x38>)
 8000ba6:	6013      	str	r3, [r2, #0]
      vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000ba8:	e7f0      	b.n	8000b8c <StartTask02+0x14>
 8000baa:	bf00      	nop
 8000bac:	20004f08 	.word	0x20004f08
 8000bb0:	200004bc 	.word	0x200004bc

08000bb4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 10;
 8000bbc:	230a      	movs	r3, #10
 8000bbe:	60fb      	str	r3, [r7, #12]
  xLastWakeTime = xTaskGetTickCount();
 8000bc0:	f00d f81a 	bl	800dbf8 <xTaskGetTickCount>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
      vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	68f9      	ldr	r1, [r7, #12]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f00c fe5c 	bl	800d88c <vTaskDelayUntil>
	  left_wheels_data[0] = sideDataLeftFrontWheel;
 8000bd4:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <StartTask03+0xb8>)
 8000bd6:	f993 3000 	ldrsb.w	r3, [r3]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <StartTask03+0xbc>)
 8000bde:	701a      	strb	r2, [r3, #0]
	  left_wheels_data[1] = speedDataLeftFrontWheel;
 8000be0:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <StartTask03+0xc0>)
 8000be2:	f993 3000 	ldrsb.w	r3, [r3]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <StartTask03+0xbc>)
 8000bea:	705a      	strb	r2, [r3, #1]
	  left_wheels_data[2] = sideDataLeftBackWheel;
 8000bec:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <StartTask03+0xc4>)
 8000bee:	f993 3000 	ldrsb.w	r3, [r3]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <StartTask03+0xbc>)
 8000bf6:	709a      	strb	r2, [r3, #2]
	  left_wheels_data[3] = speedDataLeftBackWheel;
 8000bf8:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <StartTask03+0xc8>)
 8000bfa:	f993 3000 	ldrsb.w	r3, [r3]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <StartTask03+0xbc>)
 8000c02:	70da      	strb	r2, [r3, #3]
	  right_wheels_data[0] = sideDataRightFrontWheel;
 8000c04:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <StartTask03+0xcc>)
 8000c06:	f993 3000 	ldrsb.w	r3, [r3]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <StartTask03+0xd0>)
 8000c0e:	701a      	strb	r2, [r3, #0]
	  right_wheels_data[1] = speedDataRightFrontWheel;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <StartTask03+0xd4>)
 8000c12:	f993 3000 	ldrsb.w	r3, [r3]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <StartTask03+0xd0>)
 8000c1a:	705a      	strb	r2, [r3, #1]
	  right_wheels_data[2] = sideDataRightBackWheel;
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <StartTask03+0xd8>)
 8000c1e:	f993 3000 	ldrsb.w	r3, [r3]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <StartTask03+0xd0>)
 8000c26:	709a      	strb	r2, [r3, #2]
	  right_wheels_data[3] = speedDataRightBackWheel;
 8000c28:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <StartTask03+0xdc>)
 8000c2a:	f993 3000 	ldrsb.w	r3, [r3]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <StartTask03+0xd0>)
 8000c32:	70da      	strb	r2, [r3, #3]
	  if( HAL_CAN_AddTxMessage(&hcan1, &left_wheels_Header, left_wheels_data, &TxMailbox) == HAL_OK) {
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <StartTask03+0xe0>)
 8000c36:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <StartTask03+0xbc>)
 8000c38:	4917      	ldr	r1, [pc, #92]	; (8000c98 <StartTask03+0xe4>)
 8000c3a:	4818      	ldr	r0, [pc, #96]	; (8000c9c <StartTask03+0xe8>)
 8000c3c:	f004 f9a8 	bl	8004f90 <HAL_CAN_AddTxMessage>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d104      	bne.n	8000c50 <StartTask03+0x9c>
		  can2++;
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <StartTask03+0xec>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <StartTask03+0xec>)
 8000c4e:	6013      	str	r3, [r2, #0]
	  }
	  osDelay(1);
 8000c50:	2001      	movs	r0, #1
 8000c52:	f00c fbbf 	bl	800d3d4 <osDelay>
	  HAL_CAN_AddTxMessage(&hcan1, &right_wheels_Header, right_wheels_data, &TxMailbox);
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <StartTask03+0xe0>)
 8000c58:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <StartTask03+0xd0>)
 8000c5a:	4912      	ldr	r1, [pc, #72]	; (8000ca4 <StartTask03+0xf0>)
 8000c5c:	480f      	ldr	r0, [pc, #60]	; (8000c9c <StartTask03+0xe8>)
 8000c5e:	f004 f997 	bl	8004f90 <HAL_CAN_AddTxMessage>
	  osDelay(1);
 8000c62:	2001      	movs	r0, #1
 8000c64:	f00c fbb6 	bl	800d3d4 <osDelay>
      vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000c68:	e7ae      	b.n	8000bc8 <StartTask03+0x14>
 8000c6a:	bf00      	nop
 8000c6c:	20000472 	.word	0x20000472
 8000c70:	2000048c 	.word	0x2000048c
 8000c74:	2000046e 	.word	0x2000046e
 8000c78:	20000474 	.word	0x20000474
 8000c7c:	20000470 	.word	0x20000470
 8000c80:	20000471 	.word	0x20000471
 8000c84:	20000490 	.word	0x20000490
 8000c88:	2000046d 	.word	0x2000046d
 8000c8c:	20000473 	.word	0x20000473
 8000c90:	2000046f 	.word	0x2000046f
 8000c94:	20004efc 	.word	0x20004efc
 8000c98:	20004a24 	.word	0x20004a24
 8000c9c:	20004f20 	.word	0x20004f20
 8000ca0:	20004a9c 	.word	0x20004a9c
 8000ca4:	20004ee0 	.word	0x20004ee0

08000ca8 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 20;
 8000cb0:	2314      	movs	r3, #20
 8000cb2:	60fb      	str	r3, [r7, #12]
  xLastWakeTime = xTaskGetTickCount();
 8000cb4:	f00c ffa0 	bl	800dbf8 <xTaskGetTickCount>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  //diagnostics_data_handler();
      vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	68f9      	ldr	r1, [r7, #12]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f00c fde2 	bl	800d88c <vTaskDelayUntil>
	  sensors1_3_data_handler();
 8000cc8:	f002 fd30 	bl	800372c <sensors1_3_data_handler>
	  osDelay(4);
 8000ccc:	2004      	movs	r0, #4
 8000cce:	f00c fb81 	bl	800d3d4 <osDelay>
	  sensors4_6_data_handler();
 8000cd2:	f002 fd59 	bl	8003788 <sensors4_6_data_handler>
	  osDelay(4);
 8000cd6:	2004      	movs	r0, #4
 8000cd8:	f00c fb7c 	bl	800d3d4 <osDelay>
      vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000cdc:	e7ee      	b.n	8000cbc <StartTask04+0x14>

08000cde <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
	  spinOnce();
 8000ce6:	f002 fe91 	bl	8003a0c <spinOnce>
	  osDelay(10);
 8000cea:	200a      	movs	r0, #10
 8000cec:	f00c fb72 	bl	800d3d4 <osDelay>
	  spinOnce();
 8000cf0:	e7f9      	b.n	8000ce6 <StartTask05+0x8>

08000cf2 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void const * argument)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b084      	sub	sp, #16
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 20;
 8000cfa:	2314      	movs	r3, #20
 8000cfc:	60fb      	str	r3, [r7, #12]
  xLastWakeTime = xTaskGetTickCount();
 8000cfe:	f00c ff7b 	bl	800dbf8 <xTaskGetTickCount>
 8000d02:	4603      	mov	r3, r0
 8000d04:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	68f9      	ldr	r1, [r7, #12]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f00c fdbd 	bl	800d88c <vTaskDelayUntil>
	  rpm_left_front_handler();
 8000d12:	f002 fd99 	bl	8003848 <rpm_left_front_handler>
	  osDelay(1);
 8000d16:	2001      	movs	r0, #1
 8000d18:	f00c fb5c 	bl	800d3d4 <osDelay>
	  rpm_left_back_handler();
 8000d1c:	f002 fdf8 	bl	8003910 <rpm_left_back_handler>
	  osDelay(1);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f00c fb57 	bl	800d3d4 <osDelay>
	  rpm_right_front_handler();
 8000d26:	f002 fd5d 	bl	80037e4 <rpm_right_front_handler>
	  osDelay(1);
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f00c fb52 	bl	800d3d4 <osDelay>
	  rpm_right_back_handler();
 8000d30:	f002 fdbc 	bl	80038ac <rpm_right_back_handler>
	  osDelay(1);
 8000d34:	2001      	movs	r0, #1
 8000d36:	f00c fb4d 	bl	800d3d4 <osDelay>
	  vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000d3a:	e7e4      	b.n	8000d06 <StartTask06+0x14>

08000d3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  ++tick;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d4c:	6013      	str	r3, [r2, #0]
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d101      	bne.n	8000d5c <HAL_TIM_PeriodElapsedCallback+0x20>
    HAL_IncTick();
 8000d58:	f003 feb8 	bl	8004acc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000468 	.word	0x20000468
 8000d68:	40000400 	.word	0x40000400

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <error>:
void delay(uint32_t delayTime){
	uint32_t startTime =  sysTick_Time;
	while ( (sysTick_Time - startTime) < delayTime );
}

void error(void) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d84:	481d      	ldr	r0, [pc, #116]	; (8000dfc <error+0x80>)
 8000d86:	f004 ffeb 	bl	8005d60 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000d8a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d8e:	f003 febd 	bl	8004b0c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000d92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d96:	4819      	ldr	r0, [pc, #100]	; (8000dfc <error+0x80>)
 8000d98:	f004 ffe2 	bl	8005d60 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000d9c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000da0:	f003 feb4 	bl	8004b0c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000da4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da8:	4814      	ldr	r0, [pc, #80]	; (8000dfc <error+0x80>)
 8000daa:	f004 ffd9 	bl	8005d60 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000dae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000db2:	f003 feab 	bl	8004b0c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000db6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dba:	4810      	ldr	r0, [pc, #64]	; (8000dfc <error+0x80>)
 8000dbc:	f004 ffd0 	bl	8005d60 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000dc0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000dc4:	f003 fea2 	bl	8004b0c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000dc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dcc:	480b      	ldr	r0, [pc, #44]	; (8000dfc <error+0x80>)
 8000dce:	f004 ffc7 	bl	8005d60 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000dd2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000dd6:	f003 fe99 	bl	8004b0c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000dda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dde:	4807      	ldr	r0, [pc, #28]	; (8000dfc <error+0x80>)
 8000de0:	f004 ffbe 	bl	8005d60 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000de4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000de8:	f003 fe90 	bl	8004b0c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000dec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <error+0x80>)
 8000df2:	f004 ffb5 	bl	8005d60 <HAL_GPIO_TogglePin>
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40021000 	.word	0x40021000

08000e00 <sensor_io_read>:

uint8_t sensor_io_read(uint16_t DeviceAddr, uint8_t RegisterAddr) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	460a      	mov	r2, r1
 8000e0a:	80fb      	strh	r3, [r7, #6]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	717b      	strb	r3, [r7, #5]
	return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8000e10:	797a      	ldrb	r2, [r7, #5]
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	4611      	mov	r1, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f806 	bl	8000e28 <I2Cx_ReadData>
 8000e1c:	4603      	mov	r3, r0
	return HAL_OK;
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <I2Cx_ReadData>:
uint8_t sensor_io_write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value) {
	I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
	return HAL_OK;
}

uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af04      	add	r7, sp, #16
 8000e2e:	4603      	mov	r3, r0
 8000e30:	460a      	mov	r2, r1
 8000e32:	80fb      	strh	r3, [r7, #6]
 8000e34:	4613      	mov	r3, r2
 8000e36:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	73fb      	strb	r3, [r7, #15]
	value = 0;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <I2Cx_ReadData+0x54>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	b299      	uxth	r1, r3
 8000e48:	797b      	ldrb	r3, [r7, #5]
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e50:	9302      	str	r3, [sp, #8]
 8000e52:	2301      	movs	r3, #1
 8000e54:	9301      	str	r3, [sp, #4]
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <I2Cx_ReadData+0x54>)
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	4808      	ldr	r0, [pc, #32]	; (8000e80 <I2Cx_ReadData+0x58>)
 8000e5e:	f005 f9d1 	bl	8006204 <HAL_I2C_Mem_Read>
 8000e62:	4603      	mov	r3, r0
 8000e64:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <I2Cx_ReadData+0x48>
	{
	    error();
 8000e6c:	f7ff ff86 	bl	8000d7c <error>
	}
	return value;
 8000e70:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <I2Cx_ReadData+0x54>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200004d8 	.word	0x200004d8
 8000e80:	20004a48 	.word	0x20004a48

08000e84 <read_id>:
	if ((read_id()==0xFF)||(read_id()==0x70)||(read_id()==0x48)) {

	}
}

uint8_t read_id(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	ctrl = 0x00;
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <read_id+0x24>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
	ctrl = sensor_io_read(0x68, 0x75);
 8000e8e:	2175      	movs	r1, #117	; 0x75
 8000e90:	2068      	movs	r0, #104	; 0x68
 8000e92:	f7ff ffb5 	bl	8000e00 <sensor_io_read>
 8000e96:	4603      	mov	r3, r0
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <read_id+0x24>)
 8000e9c:	701a      	strb	r2, [r3, #0]
	return ctrl;
 8000e9e:	4b02      	ldr	r3, [pc, #8]	; (8000ea8 <read_id+0x24>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2000046c 	.word	0x2000046c

08000eac <MPU9250_init>:

void MPU9250_init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	//power up gyro
	MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	216b      	movs	r1, #107	; 0x6b
 8000eb4:	2068      	movs	r0, #104	; 0x68
 8000eb6:	f000 fbb3 	bl	8001620 <MPU9250_writeReg>
	//delay(100);
	MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	216b      	movs	r1, #107	; 0x6b
 8000ebe:	2068      	movs	r0, #104	; 0x68
 8000ec0:	f000 fbae 	bl	8001620 <MPU9250_writeReg>

	MPU9250_writeReg(MPU9250_ADDRESS, CONFIG, 0x03);
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	211a      	movs	r1, #26
 8000ec8:	2068      	movs	r0, #104	; 0x68
 8000eca:	f000 fba9 	bl	8001620 <MPU9250_writeReg>

	MPU9250_writeReg(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);
 8000ece:	2204      	movs	r2, #4
 8000ed0:	2119      	movs	r1, #25
 8000ed2:	2068      	movs	r0, #104	; 0x68
 8000ed4:	f000 fba4 	bl	8001620 <MPU9250_writeReg>
	//MPU6050_SMPLRT_DIV
	//gyro config 500

	MPU9250_writeReg(MPU9250_ADDRESS, GYRO_CONFIG, 0x08);
 8000ed8:	2208      	movs	r2, #8
 8000eda:	211b      	movs	r1, #27
 8000edc:	2068      	movs	r0, #104	; 0x68
 8000ede:	f000 fb9f 	bl	8001620 <MPU9250_writeReg>
	//accel config 8g
	MPU9250_writeReg(MPU9250_ADDRESS, ACCEL_CONFIG, 0x10);
 8000ee2:	2210      	movs	r2, #16
 8000ee4:	211c      	movs	r1, #28
 8000ee6:	2068      	movs	r0, #104	; 0x68
 8000ee8:	f000 fb9a 	bl	8001620 <MPU9250_writeReg>

}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <MPU9250_calibrate>:

//void calibrateMPU9250(float * dest1, float * dest2)
void MPU9250_calibrate()
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
    uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
    uint16_t ii, packet_count, fifo_count;
    //int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};

    // reset device
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	216b      	movs	r1, #107	; 0x6b
 8000efa:	2068      	movs	r0, #104	; 0x68
 8000efc:	f000 fb90 	bl	8001620 <MPU9250_writeReg>
    HAL_Delay(100);
 8000f00:	2064      	movs	r0, #100	; 0x64
 8000f02:	f003 fe03 	bl	8004b0c <HAL_Delay>

    // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
    // else use the internal oscillator, bits 2:0 = 001
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8000f06:	2201      	movs	r2, #1
 8000f08:	216b      	movs	r1, #107	; 0x6b
 8000f0a:	2068      	movs	r0, #104	; 0x68
 8000f0c:	f000 fb88 	bl	8001620 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 8000f10:	2200      	movs	r2, #0
 8000f12:	216c      	movs	r1, #108	; 0x6c
 8000f14:	2068      	movs	r0, #104	; 0x68
 8000f16:	f000 fb83 	bl	8001620 <MPU9250_writeReg>
    HAL_Delay(200);
 8000f1a:	20c8      	movs	r0, #200	; 0xc8
 8000f1c:	f003 fdf6 	bl	8004b0c <HAL_Delay>

    // Configure device for bias calculation
    MPU9250_writeReg(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 8000f20:	2200      	movs	r2, #0
 8000f22:	2138      	movs	r1, #56	; 0x38
 8000f24:	2068      	movs	r0, #104	; 0x68
 8000f26:	f000 fb7b 	bl	8001620 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2123      	movs	r1, #35	; 0x23
 8000f2e:	2068      	movs	r0, #104	; 0x68
 8000f30:	f000 fb76 	bl	8001620 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8000f34:	2200      	movs	r2, #0
 8000f36:	216b      	movs	r1, #107	; 0x6b
 8000f38:	2068      	movs	r0, #104	; 0x68
 8000f3a:	f000 fb71 	bl	8001620 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2124      	movs	r1, #36	; 0x24
 8000f42:	2068      	movs	r0, #104	; 0x68
 8000f44:	f000 fb6c 	bl	8001620 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8000f48:	2200      	movs	r2, #0
 8000f4a:	216a      	movs	r1, #106	; 0x6a
 8000f4c:	2068      	movs	r0, #104	; 0x68
 8000f4e:	f000 fb67 	bl	8001620 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8000f52:	220c      	movs	r2, #12
 8000f54:	216a      	movs	r1, #106	; 0x6a
 8000f56:	2068      	movs	r0, #104	; 0x68
 8000f58:	f000 fb62 	bl	8001620 <MPU9250_writeReg>
    HAL_Delay(15);
 8000f5c:	200f      	movs	r0, #15
 8000f5e:	f003 fdd5 	bl	8004b0c <HAL_Delay>

    // Configure MPU6050 gyro and accelerometer for bias calculation
    MPU9250_writeReg(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8000f62:	2201      	movs	r2, #1
 8000f64:	211a      	movs	r1, #26
 8000f66:	2068      	movs	r0, #104	; 0x68
 8000f68:	f000 fb5a 	bl	8001620 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2119      	movs	r1, #25
 8000f70:	2068      	movs	r0, #104	; 0x68
 8000f72:	f000 fb55 	bl	8001620 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8000f76:	2200      	movs	r2, #0
 8000f78:	211b      	movs	r1, #27
 8000f7a:	2068      	movs	r0, #104	; 0x68
 8000f7c:	f000 fb50 	bl	8001620 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8000f80:	2200      	movs	r2, #0
 8000f82:	211c      	movs	r1, #28
 8000f84:	2068      	movs	r0, #104	; 0x68
 8000f86:	f000 fb4b 	bl	8001620 <MPU9250_writeReg>

    //uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
    uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8000f8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f8e:	84bb      	strh	r3, [r7, #36]	; 0x24

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
    MPU9250_writeReg(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 8000f90:	2240      	movs	r2, #64	; 0x40
 8000f92:	216a      	movs	r1, #106	; 0x6a
 8000f94:	2068      	movs	r0, #104	; 0x68
 8000f96:	f000 fb43 	bl	8001620 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8000f9a:	2278      	movs	r2, #120	; 0x78
 8000f9c:	2123      	movs	r1, #35	; 0x23
 8000f9e:	2068      	movs	r0, #104	; 0x68
 8000fa0:	f000 fb3e 	bl	8001620 <MPU9250_writeReg>
    HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8000fa4:	2028      	movs	r0, #40	; 0x28
 8000fa6:	f003 fdb1 	bl	8004b0c <HAL_Delay>

    // At end of sample accumulation, turn off FIFO sensor read
    MPU9250_writeReg(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8000faa:	2200      	movs	r2, #0
 8000fac:	2123      	movs	r1, #35	; 0x23
 8000fae:	2068      	movs	r0, #104	; 0x68
 8000fb0:	f000 fb36 	bl	8001620 <MPU9250_writeReg>
    //readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
    fifo_count = MPU9250_readReg16Bit(MPU9250_ADDRESS, FIFO_COUNTH);
 8000fb4:	2172      	movs	r1, #114	; 0x72
 8000fb6:	2068      	movs	r0, #104	; 0x68
 8000fb8:	f000 fb72 	bl	80016a0 <MPU9250_readReg16Bit>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	847b      	strh	r3, [r7, #34]	; 0x22
    packet_count = fifo_count / 12;// How many sets of full gyro and accelerometer data for averaging
 8000fc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000fc2:	4a58      	ldr	r2, [pc, #352]	; (8001124 <MPU9250_calibrate+0x234>)
 8000fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc8:	08db      	lsrs	r3, r3, #3
 8000fca:	843b      	strh	r3, [r7, #32]

    for (ii = 0; ii < packet_count; ii++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000fd0:	e06f      	b.n	80010b2 <MPU9250_calibrate+0x1c2>
    {
        int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	813b      	strh	r3, [r7, #8]
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	817b      	strh	r3, [r7, #10]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	81bb      	strh	r3, [r7, #12]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	803b      	strh	r3, [r7, #0]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	807b      	strh	r3, [r7, #2]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	80bb      	strh	r3, [r7, #4]
        MPU9250_readMulti(MPU9250_ADDRESS, FIFO_R_W, data, 12); // read data for averaging
 8000fea:	f107 0214 	add.w	r2, r7, #20
 8000fee:	230c      	movs	r3, #12
 8000ff0:	2174      	movs	r1, #116	; 0x74
 8000ff2:	2068      	movs	r0, #104	; 0x68
 8000ff4:	f000 fb74 	bl	80016e0 <MPU9250_readMulti>
        accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8000ff8:	7d3b      	ldrb	r3, [r7, #20]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	7d7b      	ldrb	r3, [r7, #21]
 8001000:	b21b      	sxth	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	b21b      	sxth	r3, r3
 8001006:	813b      	strh	r3, [r7, #8]
        accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8001008:	7dbb      	ldrb	r3, [r7, #22]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	7dfb      	ldrb	r3, [r7, #23]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21b      	sxth	r3, r3
 8001016:	817b      	strh	r3, [r7, #10]
        accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8001018:	7e3b      	ldrb	r3, [r7, #24]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b21a      	sxth	r2, r3
 800101e:	7e7b      	ldrb	r3, [r7, #25]
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b21b      	sxth	r3, r3
 8001026:	81bb      	strh	r3, [r7, #12]
        gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8001028:	7ebb      	ldrb	r3, [r7, #26]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b21a      	sxth	r2, r3
 800102e:	7efb      	ldrb	r3, [r7, #27]
 8001030:	b21b      	sxth	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b21b      	sxth	r3, r3
 8001036:	803b      	strh	r3, [r7, #0]
        gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8001038:	7f3b      	ldrb	r3, [r7, #28]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b21a      	sxth	r2, r3
 800103e:	7f7b      	ldrb	r3, [r7, #29]
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21b      	sxth	r3, r3
 8001046:	807b      	strh	r3, [r7, #2]
        gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001048:	7fbb      	ldrb	r3, [r7, #30]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
 800104e:	7ffb      	ldrb	r3, [r7, #31]
 8001050:	b21b      	sxth	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	b21b      	sxth	r3, r3
 8001056:	80bb      	strh	r3, [r7, #4]

        accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001058:	4b33      	ldr	r3, [pc, #204]	; (8001128 <MPU9250_calibrate+0x238>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001060:	4413      	add	r3, r2
 8001062:	4a31      	ldr	r2, [pc, #196]	; (8001128 <MPU9250_calibrate+0x238>)
 8001064:	6013      	str	r3, [r2, #0]
        accel_bias[1] += (int32_t) accel_temp[1];
 8001066:	4b30      	ldr	r3, [pc, #192]	; (8001128 <MPU9250_calibrate+0x238>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800106e:	4413      	add	r3, r2
 8001070:	4a2d      	ldr	r2, [pc, #180]	; (8001128 <MPU9250_calibrate+0x238>)
 8001072:	6053      	str	r3, [r2, #4]
        accel_bias[2] += (int32_t) accel_temp[2];
 8001074:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <MPU9250_calibrate+0x238>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800107c:	4413      	add	r3, r2
 800107e:	4a2a      	ldr	r2, [pc, #168]	; (8001128 <MPU9250_calibrate+0x238>)
 8001080:	6093      	str	r3, [r2, #8]
        gyro_bias[0]  += (int32_t) gyro_temp[0];
 8001082:	4b2a      	ldr	r3, [pc, #168]	; (800112c <MPU9250_calibrate+0x23c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f9b7 2000 	ldrsh.w	r2, [r7]
 800108a:	4413      	add	r3, r2
 800108c:	4a27      	ldr	r2, [pc, #156]	; (800112c <MPU9250_calibrate+0x23c>)
 800108e:	6013      	str	r3, [r2, #0]
        gyro_bias[1]  += (int32_t) gyro_temp[1];
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <MPU9250_calibrate+0x23c>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001098:	4413      	add	r3, r2
 800109a:	4a24      	ldr	r2, [pc, #144]	; (800112c <MPU9250_calibrate+0x23c>)
 800109c:	6053      	str	r3, [r2, #4]
        gyro_bias[2]  += (int32_t) gyro_temp[2];
 800109e:	4b23      	ldr	r3, [pc, #140]	; (800112c <MPU9250_calibrate+0x23c>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a20      	ldr	r2, [pc, #128]	; (800112c <MPU9250_calibrate+0x23c>)
 80010aa:	6093      	str	r3, [r2, #8]
    for (ii = 0; ii < packet_count; ii++)
 80010ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010ae:	3301      	adds	r3, #1
 80010b0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80010b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010b4:	8c3b      	ldrh	r3, [r7, #32]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d38b      	bcc.n	8000fd2 <MPU9250_calibrate+0xe2>
    }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MPU9250_calibrate+0x238>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	8c3b      	ldrh	r3, [r7, #32]
 80010c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80010c4:	4a18      	ldr	r2, [pc, #96]	; (8001128 <MPU9250_calibrate+0x238>)
 80010c6:	6013      	str	r3, [r2, #0]
    accel_bias[1] /= (int32_t) packet_count;
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MPU9250_calibrate+0x238>)
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	8c3b      	ldrh	r3, [r7, #32]
 80010ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80010d2:	4a15      	ldr	r2, [pc, #84]	; (8001128 <MPU9250_calibrate+0x238>)
 80010d4:	6053      	str	r3, [r2, #4]
    accel_bias[2] /= (int32_t) packet_count;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MPU9250_calibrate+0x238>)
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	8c3b      	ldrh	r3, [r7, #32]
 80010dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80010e0:	4a11      	ldr	r2, [pc, #68]	; (8001128 <MPU9250_calibrate+0x238>)
 80010e2:	6093      	str	r3, [r2, #8]
    gyro_bias[0]  /= (int32_t) packet_count;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <MPU9250_calibrate+0x23c>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	8c3b      	ldrh	r3, [r7, #32]
 80010ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80010ee:	4a0f      	ldr	r2, [pc, #60]	; (800112c <MPU9250_calibrate+0x23c>)
 80010f0:	6013      	str	r3, [r2, #0]
    gyro_bias[1]  /= (int32_t) packet_count;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MPU9250_calibrate+0x23c>)
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	8c3b      	ldrh	r3, [r7, #32]
 80010f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80010fc:	4a0b      	ldr	r2, [pc, #44]	; (800112c <MPU9250_calibrate+0x23c>)
 80010fe:	6053      	str	r3, [r2, #4]
    gyro_bias[2]  /= (int32_t) packet_count;
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <MPU9250_calibrate+0x23c>)
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	8c3b      	ldrh	r3, [r7, #32]
 8001106:	fb92 f3f3 	sdiv	r3, r2, r3
 800110a:	4a08      	ldr	r2, [pc, #32]	; (800112c <MPU9250_calibrate+0x23c>)
 800110c:	6093      	str	r3, [r2, #8]

    if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MPU9250_calibrate+0x238>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	dd0c      	ble.n	8001130 <MPU9250_calibrate+0x240>
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <MPU9250_calibrate+0x238>)
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	4a02      	ldr	r2, [pc, #8]	; (8001128 <MPU9250_calibrate+0x238>)
 8001120:	6093      	str	r3, [r2, #8]
 8001122:	e00b      	b.n	800113c <MPU9250_calibrate+0x24c>
 8001124:	aaaaaaab 	.word	0xaaaaaaab
 8001128:	200004a0 	.word	0x200004a0
 800112c:	20000494 	.word	0x20000494
    else {accel_bias[2] += (int32_t) accelsensitivity;}
 8001130:	4b78      	ldr	r3, [pc, #480]	; (8001314 <MPU9250_calibrate+0x424>)
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001136:	4413      	add	r3, r2
 8001138:	4a76      	ldr	r2, [pc, #472]	; (8001314 <MPU9250_calibrate+0x424>)
 800113a:	6093      	str	r3, [r2, #8]

    // Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
    data[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 800113c:	4b76      	ldr	r3, [pc, #472]	; (8001318 <MPU9250_calibrate+0x428>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	425b      	negs	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	da00      	bge.n	8001148 <MPU9250_calibrate+0x258>
 8001146:	3303      	adds	r3, #3
 8001148:	109b      	asrs	r3, r3, #2
 800114a:	121b      	asrs	r3, r3, #8
 800114c:	b2db      	uxtb	r3, r3
 800114e:	753b      	strb	r3, [r7, #20]
    data[1] = (-gyro_bias[0] / 4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8001150:	4b71      	ldr	r3, [pc, #452]	; (8001318 <MPU9250_calibrate+0x428>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	425b      	negs	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	da00      	bge.n	800115c <MPU9250_calibrate+0x26c>
 800115a:	3303      	adds	r3, #3
 800115c:	109b      	asrs	r3, r3, #2
 800115e:	b2db      	uxtb	r3, r3
 8001160:	757b      	strb	r3, [r7, #21]
    data[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8001162:	4b6d      	ldr	r3, [pc, #436]	; (8001318 <MPU9250_calibrate+0x428>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	425b      	negs	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	da00      	bge.n	800116e <MPU9250_calibrate+0x27e>
 800116c:	3303      	adds	r3, #3
 800116e:	109b      	asrs	r3, r3, #2
 8001170:	121b      	asrs	r3, r3, #8
 8001172:	b2db      	uxtb	r3, r3
 8001174:	75bb      	strb	r3, [r7, #22]
    data[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8001176:	4b68      	ldr	r3, [pc, #416]	; (8001318 <MPU9250_calibrate+0x428>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	425b      	negs	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	da00      	bge.n	8001182 <MPU9250_calibrate+0x292>
 8001180:	3303      	adds	r3, #3
 8001182:	109b      	asrs	r3, r3, #2
 8001184:	b2db      	uxtb	r3, r3
 8001186:	75fb      	strb	r3, [r7, #23]
    data[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8001188:	4b63      	ldr	r3, [pc, #396]	; (8001318 <MPU9250_calibrate+0x428>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	425b      	negs	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	da00      	bge.n	8001194 <MPU9250_calibrate+0x2a4>
 8001192:	3303      	adds	r3, #3
 8001194:	109b      	asrs	r3, r3, #2
 8001196:	121b      	asrs	r3, r3, #8
 8001198:	b2db      	uxtb	r3, r3
 800119a:	763b      	strb	r3, [r7, #24]
    data[5] = (-gyro_bias[2] / 4)       & 0xFF;
 800119c:	4b5e      	ldr	r3, [pc, #376]	; (8001318 <MPU9250_calibrate+0x428>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	425b      	negs	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	da00      	bge.n	80011a8 <MPU9250_calibrate+0x2b8>
 80011a6:	3303      	adds	r3, #3
 80011a8:	109b      	asrs	r3, r3, #2
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	767b      	strb	r3, [r7, #25]

    // Push gyro biases to hardware registers
    MPU9250_writeReg(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 80011ae:	7d3b      	ldrb	r3, [r7, #20]
 80011b0:	461a      	mov	r2, r3
 80011b2:	2113      	movs	r1, #19
 80011b4:	2068      	movs	r0, #104	; 0x68
 80011b6:	f000 fa33 	bl	8001620 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 80011ba:	7d7b      	ldrb	r3, [r7, #21]
 80011bc:	461a      	mov	r2, r3
 80011be:	2114      	movs	r1, #20
 80011c0:	2068      	movs	r0, #104	; 0x68
 80011c2:	f000 fa2d 	bl	8001620 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 80011c6:	7dbb      	ldrb	r3, [r7, #22]
 80011c8:	461a      	mov	r2, r3
 80011ca:	2115      	movs	r1, #21
 80011cc:	2068      	movs	r0, #104	; 0x68
 80011ce:	f000 fa27 	bl	8001620 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 80011d2:	7dfb      	ldrb	r3, [r7, #23]
 80011d4:	461a      	mov	r2, r3
 80011d6:	2116      	movs	r1, #22
 80011d8:	2068      	movs	r0, #104	; 0x68
 80011da:	f000 fa21 	bl	8001620 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 80011de:	7e3b      	ldrb	r3, [r7, #24]
 80011e0:	461a      	mov	r2, r3
 80011e2:	2117      	movs	r1, #23
 80011e4:	2068      	movs	r0, #104	; 0x68
 80011e6:	f000 fa1b 	bl	8001620 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 80011ea:	7e7b      	ldrb	r3, [r7, #25]
 80011ec:	461a      	mov	r2, r3
 80011ee:	2118      	movs	r1, #24
 80011f0:	2068      	movs	r0, #104	; 0x68
 80011f2:	f000 fa15 	bl	8001620 <MPU9250_writeReg>
    // the accelerometer biases calculated above must be divided by 8.


     //int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
     //readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
     data[0] = MPU9250_readReg(MPU9250_ADDRESS, XA_OFFSET_H);
 80011f6:	2177      	movs	r1, #119	; 0x77
 80011f8:	2068      	movs	r0, #104	; 0x68
 80011fa:	f000 fa31 	bl	8001660 <MPU9250_readReg>
 80011fe:	4603      	mov	r3, r0
 8001200:	753b      	strb	r3, [r7, #20]
     data[1] = MPU9250_readReg(MPU9250_ADDRESS, XA_OFFSET_L);
 8001202:	2178      	movs	r1, #120	; 0x78
 8001204:	2068      	movs	r0, #104	; 0x68
 8001206:	f000 fa2b 	bl	8001660 <MPU9250_readReg>
 800120a:	4603      	mov	r3, r0
 800120c:	757b      	strb	r3, [r7, #21]
     data[2] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_H);
 800120e:	217a      	movs	r1, #122	; 0x7a
 8001210:	2068      	movs	r0, #104	; 0x68
 8001212:	f000 fa25 	bl	8001660 <MPU9250_readReg>
 8001216:	4603      	mov	r3, r0
 8001218:	75bb      	strb	r3, [r7, #22]
     data[3] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_L);
 800121a:	217b      	movs	r1, #123	; 0x7b
 800121c:	2068      	movs	r0, #104	; 0x68
 800121e:	f000 fa1f 	bl	8001660 <MPU9250_readReg>
 8001222:	4603      	mov	r3, r0
 8001224:	75fb      	strb	r3, [r7, #23]
     data[4] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_H);
 8001226:	217d      	movs	r1, #125	; 0x7d
 8001228:	2068      	movs	r0, #104	; 0x68
 800122a:	f000 fa19 	bl	8001660 <MPU9250_readReg>
 800122e:	4603      	mov	r3, r0
 8001230:	763b      	strb	r3, [r7, #24]
     data[5] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_L);
 8001232:	217e      	movs	r1, #126	; 0x7e
 8001234:	2068      	movs	r0, #104	; 0x68
 8001236:	f000 fa13 	bl	8001660 <MPU9250_readReg>
 800123a:	4603      	mov	r3, r0
 800123c:	767b      	strb	r3, [r7, #25]
     accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]  );
 800123e:	7d3b      	ldrb	r3, [r7, #20]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	7d7a      	ldrb	r2, [r7, #21]
 8001244:	4313      	orrs	r3, r2
 8001246:	4a35      	ldr	r2, [pc, #212]	; (800131c <MPU9250_calibrate+0x42c>)
 8001248:	6013      	str	r3, [r2, #0]
     accel_bias_reg[1] = (int32_t) (((int16_t)data[2] << 8) | data[3]  );
 800124a:	7dbb      	ldrb	r3, [r7, #22]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	7dfa      	ldrb	r2, [r7, #23]
 8001250:	4313      	orrs	r3, r2
 8001252:	4a32      	ldr	r2, [pc, #200]	; (800131c <MPU9250_calibrate+0x42c>)
 8001254:	6053      	str	r3, [r2, #4]
     accel_bias_reg[2] = (int32_t) (((int16_t)data[4] << 8) | data[5]  );
 8001256:	7e3b      	ldrb	r3, [r7, #24]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	7e7a      	ldrb	r2, [r7, #25]
 800125c:	4313      	orrs	r3, r2
 800125e:	4a2f      	ldr	r2, [pc, #188]	; (800131c <MPU9250_calibrate+0x42c>)
 8001260:	6093      	str	r3, [r2, #8]
//     accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
//     readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
//     accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);

     //uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
     uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8001262:	2300      	movs	r3, #0
 8001264:	743b      	strb	r3, [r7, #16]
 8001266:	2300      	movs	r3, #0
 8001268:	747b      	strb	r3, [r7, #17]
 800126a:	2300      	movs	r3, #0
 800126c:	74bb      	strb	r3, [r7, #18]
    // for(ii = 0; ii < 3; ii++) {
    //     if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
    // }

     // Construct total accelerometer bias, including calculated average accelerometer bias from above
     accel_bias_reg[0] -= (accel_bias[0] / 8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 800126e:	4b2b      	ldr	r3, [pc, #172]	; (800131c <MPU9250_calibrate+0x42c>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b28      	ldr	r3, [pc, #160]	; (8001314 <MPU9250_calibrate+0x424>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	da00      	bge.n	800127c <MPU9250_calibrate+0x38c>
 800127a:	3307      	adds	r3, #7
 800127c:	10db      	asrs	r3, r3, #3
 800127e:	425b      	negs	r3, r3
 8001280:	4413      	add	r3, r2
 8001282:	4a26      	ldr	r2, [pc, #152]	; (800131c <MPU9250_calibrate+0x42c>)
 8001284:	6013      	str	r3, [r2, #0]
     accel_bias_reg[1] -= (accel_bias[1] / 8);
 8001286:	4b25      	ldr	r3, [pc, #148]	; (800131c <MPU9250_calibrate+0x42c>)
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	4b22      	ldr	r3, [pc, #136]	; (8001314 <MPU9250_calibrate+0x424>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	da00      	bge.n	8001294 <MPU9250_calibrate+0x3a4>
 8001292:	3307      	adds	r3, #7
 8001294:	10db      	asrs	r3, r3, #3
 8001296:	425b      	negs	r3, r3
 8001298:	4413      	add	r3, r2
 800129a:	4a20      	ldr	r2, [pc, #128]	; (800131c <MPU9250_calibrate+0x42c>)
 800129c:	6053      	str	r3, [r2, #4]
     accel_bias_reg[2] -= (accel_bias[2] / 8);
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <MPU9250_calibrate+0x42c>)
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <MPU9250_calibrate+0x424>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	da00      	bge.n	80012ac <MPU9250_calibrate+0x3bc>
 80012aa:	3307      	adds	r3, #7
 80012ac:	10db      	asrs	r3, r3, #3
 80012ae:	425b      	negs	r3, r3
 80012b0:	4413      	add	r3, r2
 80012b2:	4a1a      	ldr	r2, [pc, #104]	; (800131c <MPU9250_calibrate+0x42c>)
 80012b4:	6093      	str	r3, [r2, #8]

     data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <MPU9250_calibrate+0x42c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	121b      	asrs	r3, r3, #8
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	753b      	strb	r3, [r7, #20]
     data[1] = (accel_bias_reg[0])      & 0xFF;
 80012c0:	4b16      	ldr	r3, [pc, #88]	; (800131c <MPU9250_calibrate+0x42c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	757b      	strb	r3, [r7, #21]
     data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80012c8:	7d7a      	ldrb	r2, [r7, #21]
 80012ca:	7c3b      	ldrb	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	757b      	strb	r3, [r7, #21]
     data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <MPU9250_calibrate+0x42c>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	121b      	asrs	r3, r3, #8
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	75bb      	strb	r3, [r7, #22]
     data[3] = (accel_bias_reg[1])      & 0xFF;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MPU9250_calibrate+0x42c>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	75fb      	strb	r3, [r7, #23]
     data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80012e4:	7dfa      	ldrb	r2, [r7, #23]
 80012e6:	7c7b      	ldrb	r3, [r7, #17]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	75fb      	strb	r3, [r7, #23]
     data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MPU9250_calibrate+0x42c>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	121b      	asrs	r3, r3, #8
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	763b      	strb	r3, [r7, #24]
     data[5] = (accel_bias_reg[2])      & 0xFF;
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <MPU9250_calibrate+0x42c>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	767b      	strb	r3, [r7, #25]
     data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001300:	7e7a      	ldrb	r2, [r7, #25]
 8001302:	7cbb      	ldrb	r3, [r7, #18]
 8001304:	4313      	orrs	r3, r2
 8001306:	b2db      	uxtb	r3, r3
 8001308:	767b      	strb	r3, [r7, #25]
//     MPU9250_writeReg(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
//     MPU9250_writeReg(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
//     MPU9250_writeReg(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
//     MPU9250_writeReg(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);

}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	; 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200004a0 	.word	0x200004a0
 8001318:	20000494 	.word	0x20000494
 800131c:	200004ac 	.word	0x200004ac

08001320 <MPU9250_getAllData>:

void MPU9250_getAllData(int16_t *Data)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	uint8_t buffer[12];
	buffer[0] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_XOUT_H);
 8001328:	2143      	movs	r1, #67	; 0x43
 800132a:	2068      	movs	r0, #104	; 0x68
 800132c:	f000 f998 	bl	8001660 <MPU9250_readReg>
 8001330:	4603      	mov	r3, r0
 8001332:	733b      	strb	r3, [r7, #12]
	buffer[1] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_XOUT_L);
 8001334:	2144      	movs	r1, #68	; 0x44
 8001336:	2068      	movs	r0, #104	; 0x68
 8001338:	f000 f992 	bl	8001660 <MPU9250_readReg>
 800133c:	4603      	mov	r3, r0
 800133e:	737b      	strb	r3, [r7, #13]
	buffer[2] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_YOUT_H);
 8001340:	2145      	movs	r1, #69	; 0x45
 8001342:	2068      	movs	r0, #104	; 0x68
 8001344:	f000 f98c 	bl	8001660 <MPU9250_readReg>
 8001348:	4603      	mov	r3, r0
 800134a:	73bb      	strb	r3, [r7, #14]
	buffer[3] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_YOUT_L);
 800134c:	2146      	movs	r1, #70	; 0x46
 800134e:	2068      	movs	r0, #104	; 0x68
 8001350:	f000 f986 	bl	8001660 <MPU9250_readReg>
 8001354:	4603      	mov	r3, r0
 8001356:	73fb      	strb	r3, [r7, #15]
	buffer[4] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_ZOUT_H);
 8001358:	2147      	movs	r1, #71	; 0x47
 800135a:	2068      	movs	r0, #104	; 0x68
 800135c:	f000 f980 	bl	8001660 <MPU9250_readReg>
 8001360:	4603      	mov	r3, r0
 8001362:	743b      	strb	r3, [r7, #16]
	buffer[5] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_ZOUT_L);
 8001364:	2148      	movs	r1, #72	; 0x48
 8001366:	2068      	movs	r0, #104	; 0x68
 8001368:	f000 f97a 	bl	8001660 <MPU9250_readReg>
 800136c:	4603      	mov	r3, r0
 800136e:	747b      	strb	r3, [r7, #17]
	buffer[6] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_XOUT_H);
 8001370:	213b      	movs	r1, #59	; 0x3b
 8001372:	2068      	movs	r0, #104	; 0x68
 8001374:	f000 f974 	bl	8001660 <MPU9250_readReg>
 8001378:	4603      	mov	r3, r0
 800137a:	74bb      	strb	r3, [r7, #18]
	buffer[7] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_XOUT_L);
 800137c:	213c      	movs	r1, #60	; 0x3c
 800137e:	2068      	movs	r0, #104	; 0x68
 8001380:	f000 f96e 	bl	8001660 <MPU9250_readReg>
 8001384:	4603      	mov	r3, r0
 8001386:	74fb      	strb	r3, [r7, #19]
	buffer[8] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_YOUT_H);
 8001388:	213d      	movs	r1, #61	; 0x3d
 800138a:	2068      	movs	r0, #104	; 0x68
 800138c:	f000 f968 	bl	8001660 <MPU9250_readReg>
 8001390:	4603      	mov	r3, r0
 8001392:	753b      	strb	r3, [r7, #20]
	buffer[9] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_YOUT_L);
 8001394:	213e      	movs	r1, #62	; 0x3e
 8001396:	2068      	movs	r0, #104	; 0x68
 8001398:	f000 f962 	bl	8001660 <MPU9250_readReg>
 800139c:	4603      	mov	r3, r0
 800139e:	757b      	strb	r3, [r7, #21]
	buffer[10] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_ZOUT_H);
 80013a0:	213f      	movs	r1, #63	; 0x3f
 80013a2:	2068      	movs	r0, #104	; 0x68
 80013a4:	f000 f95c 	bl	8001660 <MPU9250_readReg>
 80013a8:	4603      	mov	r3, r0
 80013aa:	75bb      	strb	r3, [r7, #22]
	buffer[11] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_ZOUT_L);
 80013ac:	2140      	movs	r1, #64	; 0x40
 80013ae:	2068      	movs	r0, #104	; 0x68
 80013b0:	f000 f956 	bl	8001660 <MPU9250_readReg>
 80013b4:	4603      	mov	r3, r0
 80013b6:	75fb      	strb	r3, [r7, #23]
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 80013b8:	7b3b      	ldrb	r3, [r7, #12]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	b21b      	sxth	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	7b7b      	ldrb	r3, [r7, #13]
 80013c2:	4413      	add	r3, r2
 80013c4:	ee07 3a90 	vmov	s15, r3
 80013c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013cc:	eddf 6a53 	vldr	s13, [pc, #332]	; 800151c <MPU9250_getAllData+0x1fc>
 80013d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d4:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001520 <MPU9250_getAllData+0x200>
 80013d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013dc:	eddf 6a51 	vldr	s13, [pc, #324]	; 8001524 <MPU9250_getAllData+0x204>
 80013e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e4:	4b50      	ldr	r3, [pc, #320]	; (8001528 <MPU9250_getAllData+0x208>)
 80013e6:	edc3 7a00 	vstr	s15, [r3]
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 80013ea:	7bbb      	ldrb	r3, [r7, #14]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	4413      	add	r3, r2
 80013f6:	ee07 3a90 	vmov	s15, r3
 80013fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013fe:	eddf 6a47 	vldr	s13, [pc, #284]	; 800151c <MPU9250_getAllData+0x1fc>
 8001402:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001406:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001520 <MPU9250_getAllData+0x200>
 800140a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800140e:	eddf 6a45 	vldr	s13, [pc, #276]	; 8001524 <MPU9250_getAllData+0x204>
 8001412:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001416:	4b45      	ldr	r3, [pc, #276]	; (800152c <MPU9250_getAllData+0x20c>)
 8001418:	edc3 7a00 	vstr	s15, [r3]
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 800141c:	7c3b      	ldrb	r3, [r7, #16]
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	b21b      	sxth	r3, r3
 8001422:	461a      	mov	r2, r3
 8001424:	7c7b      	ldrb	r3, [r7, #17]
 8001426:	4413      	add	r3, r2
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001430:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800151c <MPU9250_getAllData+0x1fc>
 8001434:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001438:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001520 <MPU9250_getAllData+0x200>
 800143c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001440:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001524 <MPU9250_getAllData+0x204>
 8001444:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001448:	4b39      	ldr	r3, [pc, #228]	; (8001530 <MPU9250_getAllData+0x210>)
 800144a:	edc3 7a00 	vstr	s15, [r3]
//	accelX=((((int16_t)((uint16_t)buffer[6] << 8) + buffer[7])))/4096.0f*9.8f;
//	accelY=((((int16_t)((uint16_t)buffer[8] << 8) + buffer[9])))/4096.0f*9.8f;
	accelX=((((int16_t)((uint16_t)buffer[6] << 8) + buffer[7])))/4096.0f*9.8f;
 800144e:	7cbb      	ldrb	r3, [r7, #18]
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	b21b      	sxth	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	7cfb      	ldrb	r3, [r7, #19]
 8001458:	4413      	add	r3, r2
 800145a:	ee07 3a90 	vmov	s15, r3
 800145e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001462:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001534 <MPU9250_getAllData+0x214>
 8001466:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800146a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001538 <MPU9250_getAllData+0x218>
 800146e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001472:	4b32      	ldr	r3, [pc, #200]	; (800153c <MPU9250_getAllData+0x21c>)
 8001474:	edc3 7a00 	vstr	s15, [r3]
	accelY=((((int16_t)((uint16_t)buffer[8] << 8) + buffer[9])))/4096.0f*9.8f;
 8001478:	7d3b      	ldrb	r3, [r7, #20]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	b21b      	sxth	r3, r3
 800147e:	461a      	mov	r2, r3
 8001480:	7d7b      	ldrb	r3, [r7, #21]
 8001482:	4413      	add	r3, r2
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800148c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001534 <MPU9250_getAllData+0x214>
 8001490:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001494:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001538 <MPU9250_getAllData+0x218>
 8001498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149c:	4b28      	ldr	r3, [pc, #160]	; (8001540 <MPU9250_getAllData+0x220>)
 800149e:	edc3 7a00 	vstr	s15, [r3]
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 80014a2:	7dbb      	ldrb	r3, [r7, #22]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	4413      	add	r3, r2
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014b6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001534 <MPU9250_getAllData+0x214>
 80014ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014be:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001538 <MPU9250_getAllData+0x218>
 80014c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014c6:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <MPU9250_getAllData+0x224>)
 80014c8:	edc3 7a00 	vstr	s15, [r3]
	gyroX_filtered = filter(gyroX);
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <MPU9250_getAllData+0x208>)
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	eeb0 0a67 	vmov.f32	s0, s15
 80014d6:	f000 f83d 	bl	8001554 <filter>
 80014da:	eef0 7a40 	vmov.f32	s15, s0
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <MPU9250_getAllData+0x228>)
 80014e0:	edc3 7a00 	vstr	s15, [r3]
	gyroY_filtered = filter(gyroY);
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <MPU9250_getAllData+0x20c>)
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	eeb0 0a67 	vmov.f32	s0, s15
 80014ee:	f000 f831 	bl	8001554 <filter>
 80014f2:	eef0 7a40 	vmov.f32	s15, s0
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <MPU9250_getAllData+0x22c>)
 80014f8:	edc3 7a00 	vstr	s15, [r3]
	gyroZ_filtered = filter(gyroZ);
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MPU9250_getAllData+0x210>)
 80014fe:	edd3 7a00 	vldr	s15, [r3]
 8001502:	eeb0 0a67 	vmov.f32	s0, s15
 8001506:	f000 f825 	bl	8001554 <filter>
 800150a:	eef0 7a40 	vmov.f32	s15, s0
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <MPU9250_getAllData+0x230>)
 8001510:	edc3 7a00 	vstr	s15, [r3]
//	accelX=((((int16_t)((uint16_t)buffer[6] << 8) + buffer[7])));
//	accelY=((((int16_t)((uint16_t)buffer[8] << 8) + buffer[9])));
//	accelZ=((((int16_t)((uint16_t)buffer[10] << 8) + buffer[11])));
	//accelX_offset=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
}
 8001514:	bf00      	nop
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	42830000 	.word	0x42830000
 8001520:	4048f5c3 	.word	0x4048f5c3
 8001524:	43340000 	.word	0x43340000
 8001528:	20004aa0 	.word	0x20004aa0
 800152c:	20004f48 	.word	0x20004f48
 8001530:	20004abc 	.word	0x20004abc
 8001534:	45800000 	.word	0x45800000
 8001538:	411ccccd 	.word	0x411ccccd
 800153c:	20004a1c 	.word	0x20004a1c
 8001540:	20004a14 	.word	0x20004a14
 8001544:	20004f00 	.word	0x20004f00
 8001548:	20004f04 	.word	0x20004f04
 800154c:	20004edc 	.word	0x20004edc
 8001550:	20004f4c 	.word	0x20004f4c

08001554 <filter>:

float filter(float val) { //функция фильтрации
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	ed87 0a01 	vstr	s0, [r7, #4]
	Pc = P + varProcess;
 800155e:	4b28      	ldr	r3, [pc, #160]	; (8001600 <filter+0xac>)
 8001560:	ed93 7a00 	vldr	s14, [r3]
 8001564:	4b27      	ldr	r3, [pc, #156]	; (8001604 <filter+0xb0>)
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <filter+0xb4>)
 8001570:	edc3 7a00 	vstr	s15, [r3]
	G = Pc/(Pc + varVolt);
 8001574:	4b24      	ldr	r3, [pc, #144]	; (8001608 <filter+0xb4>)
 8001576:	edd3 6a00 	vldr	s13, [r3]
 800157a:	4b23      	ldr	r3, [pc, #140]	; (8001608 <filter+0xb4>)
 800157c:	ed93 7a00 	vldr	s14, [r3]
 8001580:	4b22      	ldr	r3, [pc, #136]	; (800160c <filter+0xb8>)
 8001582:	edd3 7a00 	vldr	s15, [r3]
 8001586:	ee37 7a27 	vadd.f32	s14, s14, s15
 800158a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800158e:	4b20      	ldr	r3, [pc, #128]	; (8001610 <filter+0xbc>)
 8001590:	edc3 7a00 	vstr	s15, [r3]
	P = (1-G)*Pc;
 8001594:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <filter+0xbc>)
 8001596:	edd3 7a00 	vldr	s15, [r3]
 800159a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800159e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <filter+0xb4>)
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <filter+0xac>)
 80015ae:	edc3 7a00 	vstr	s15, [r3]
	Xp = Xe;
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <filter+0xc0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a18      	ldr	r2, [pc, #96]	; (8001618 <filter+0xc4>)
 80015b8:	6013      	str	r3, [r2, #0]
	Zp = Xp;
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <filter+0xc4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <filter+0xc8>)
 80015c0:	6013      	str	r3, [r2, #0]
	Xe = G*(val-Zp)+Xp; // "фильтрованное" значение
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <filter+0xc8>)
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80015cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <filter+0xbc>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <filter+0xc4>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <filter+0xc0>)
 80015e6:	edc3 7a00 	vstr	s15, [r3]
return(Xe);
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <filter+0xc0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	ee07 3a90 	vmov	s15, r3
}
 80015f2:	eeb0 0a67 	vmov.f32	s0, s15
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	20000004 	.word	0x20000004
 8001604:	20000000 	.word	0x20000000
 8001608:	200004c4 	.word	0x200004c4
 800160c:	200004c0 	.word	0x200004c0
 8001610:	200004c8 	.word	0x200004c8
 8001614:	200004d4 	.word	0x200004d4
 8001618:	200004cc 	.word	0x200004cc
 800161c:	200004d0 	.word	0x200004d0

08001620 <MPU9250_writeReg>:

void MPU9250_writeReg(uint16_t Addr, uint8_t reg, uint8_t value)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af02      	add	r7, sp, #8
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
 800162a:	460b      	mov	r3, r1
 800162c:	717b      	strb	r3, [r7, #5]
 800162e:	4613      	mov	r3, r2
 8001630:	713b      	strb	r3, [r7, #4]
	uint8_t buf[2];
	buf[0] = reg;
 8001632:	797b      	ldrb	r3, [r7, #5]
 8001634:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 8001636:	793b      	ldrb	r3, [r7, #4]
 8001638:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	b299      	uxth	r1, r3
 8001640:	f107 020c 	add.w	r2, r7, #12
 8001644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2302      	movs	r3, #2
 800164c:	4803      	ldr	r0, [pc, #12]	; (800165c <MPU9250_writeReg+0x3c>)
 800164e:	f004 fcdb 	bl	8006008 <HAL_I2C_Master_Transmit>
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20004a48 	.word	0x20004a48

08001660 <MPU9250_readReg>:
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 5, 1000);
}

// Read an 8-bit register
uint8_t MPU9250_readReg(uint16_t Addr, uint8_t reg)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af04      	add	r7, sp, #16
 8001666:	4603      	mov	r3, r0
 8001668:	460a      	mov	r2, r1
 800166a:	80fb      	strh	r3, [r7, #6]
 800166c:	4613      	mov	r3, r2
 800166e:	717b      	strb	r3, [r7, #5]
  uint8_t value;
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	b299      	uxth	r1, r3
 8001676:	797b      	ldrb	r3, [r7, #5]
 8001678:	b29a      	uxth	r2, r3
 800167a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	2301      	movs	r3, #1
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	f107 030f 	add.w	r3, r7, #15
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	2301      	movs	r3, #1
 800168c:	4803      	ldr	r0, [pc, #12]	; (800169c <MPU9250_readReg+0x3c>)
 800168e:	f004 fdb9 	bl	8006204 <HAL_I2C_Mem_Read>
  return value;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20004a48 	.word	0x20004a48

080016a0 <MPU9250_readReg16Bit>:

// Read a 16-bit register
uint16_t MPU9250_readReg16Bit(uint16_t Addr, uint8_t reg)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	460a      	mov	r2, r1
 80016aa:	80fb      	strh	r3, [r7, #6]
 80016ac:	4613      	mov	r3, r2
 80016ae:	717b      	strb	r3, [r7, #5]
  uint16_t value;
  uint8_t buff[2];
  MPU9250_readMulti(Addr, reg, buff, 2);
 80016b0:	f107 0208 	add.w	r2, r7, #8
 80016b4:	7979      	ldrb	r1, [r7, #5]
 80016b6:	88f8      	ldrh	r0, [r7, #6]
 80016b8:	2302      	movs	r3, #2
 80016ba:	f000 f811 	bl	80016e0 <MPU9250_readMulti>
  uint16_t tmp;
  tmp = buff[0];
 80016be:	7a3b      	ldrb	r3, [r7, #8]
 80016c0:	81fb      	strh	r3, [r7, #14]
  tmp <<= 8;
 80016c2:	89fb      	ldrh	r3, [r7, #14]
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	81fb      	strh	r3, [r7, #14]
  tmp |= buff[1];
 80016c8:	7a7b      	ldrb	r3, [r7, #9]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	89fb      	ldrh	r3, [r7, #14]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	81fb      	strh	r3, [r7, #14]
  value = tmp;
 80016d2:	89fb      	ldrh	r3, [r7, #14]
 80016d4:	81bb      	strh	r3, [r7, #12]
  return value;
 80016d6:	89bb      	ldrh	r3, [r7, #12]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <MPU9250_readMulti>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void MPU9250_readMulti(uint16_t Addr, uint8_t reg, uint8_t * dst, uint8_t count)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af04      	add	r7, sp, #16
 80016e6:	603a      	str	r2, [r7, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]
 80016ee:	460b      	mov	r3, r1
 80016f0:	717b      	strb	r3, [r7, #5]
 80016f2:	4613      	mov	r3, r2
 80016f4:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, dst, count, 1000);
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	b299      	uxth	r1, r3
 80016fc:	797b      	ldrb	r3, [r7, #5]
 80016fe:	b298      	uxth	r0, r3
 8001700:	793b      	ldrb	r3, [r7, #4]
 8001702:	b29b      	uxth	r3, r3
 8001704:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001708:	9202      	str	r2, [sp, #8]
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	2301      	movs	r3, #1
 8001712:	4602      	mov	r2, r0
 8001714:	4803      	ldr	r0, [pc, #12]	; (8001724 <MPU9250_readMulti+0x44>)
 8001716:	f004 fd75 	bl	8006204 <HAL_I2C_Mem_Read>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20004a48 	.word	0x20004a48

08001728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <HAL_MspInit+0x58>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <HAL_MspInit+0x58>)
 8001738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173c:	6453      	str	r3, [r2, #68]	; 0x44
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_MspInit+0x58>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <HAL_MspInit+0x58>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <HAL_MspInit+0x58>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001758:	6413      	str	r3, [r2, #64]	; 0x40
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_MspInit+0x58>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	2005      	movs	r0, #5
 800176c:	f004 f904 	bl	8005978 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001770:	2005      	movs	r0, #5
 8001772:	f004 f91d 	bl	80059b0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800

08001784 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a21      	ldr	r2, [pc, #132]	; (8001828 <HAL_CAN_MspInit+0xa4>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d13c      	bne.n	8001820 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <HAL_CAN_MspInit+0xa8>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a1f      	ldr	r2, [pc, #124]	; (800182c <HAL_CAN_MspInit+0xa8>)
 80017b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b1d      	ldr	r3, [pc, #116]	; (800182c <HAL_CAN_MspInit+0xa8>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_CAN_MspInit+0xa8>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a18      	ldr	r2, [pc, #96]	; (800182c <HAL_CAN_MspInit+0xa8>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <HAL_CAN_MspInit+0xa8>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ec:	2303      	movs	r3, #3
 80017ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80017f0:	2309      	movs	r3, #9
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	480d      	ldr	r0, [pc, #52]	; (8001830 <HAL_CAN_MspInit+0xac>)
 80017fc:	f004 f916 	bl	8005a2c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	2100      	movs	r1, #0
 8001804:	2014      	movs	r0, #20
 8001806:	f004 f8b7 	bl	8005978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800180a:	2014      	movs	r0, #20
 800180c:	f004 f8d0 	bl	80059b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2100      	movs	r1, #0
 8001814:	2015      	movs	r0, #21
 8001816:	f004 f8af 	bl	8005978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800181a:	2015      	movs	r0, #21
 800181c:	f004 f8c8 	bl	80059b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40006400 	.word	0x40006400
 800182c:	40023800 	.word	0x40023800
 8001830:	40020400 	.word	0x40020400

08001834 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <HAL_I2C_MspInit+0x94>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d133      	bne.n	80018be <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <HAL_I2C_MspInit+0x98>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a1b      	ldr	r2, [pc, #108]	; (80018cc <HAL_I2C_MspInit+0x98>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_I2C_MspInit+0x98>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001872:	23c0      	movs	r3, #192	; 0xc0
 8001874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001876:	2312      	movs	r3, #18
 8001878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800187a:	2301      	movs	r3, #1
 800187c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001882:	2304      	movs	r3, #4
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	4810      	ldr	r0, [pc, #64]	; (80018d0 <HAL_I2C_MspInit+0x9c>)
 800188e:	f004 f8cd 	bl	8005a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <HAL_I2C_MspInit+0x98>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a0c      	ldr	r2, [pc, #48]	; (80018cc <HAL_I2C_MspInit+0x98>)
 800189c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_I2C_MspInit+0x98>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2100      	movs	r1, #0
 80018b2:	201f      	movs	r0, #31
 80018b4:	f004 f860 	bl	8005978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018b8:	201f      	movs	r0, #31
 80018ba:	f004 f879 	bl	80059b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018be:	bf00      	nop
 80018c0:	3728      	adds	r7, #40	; 0x28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40005400 	.word	0x40005400
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020400 	.word	0x40020400

080018d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	; 0x30
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	201d      	movs	r0, #29
 80018ea:	f004 f845 	bl	8005978 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018ee:	201d      	movs	r0, #29
 80018f0:	f004 f85e 	bl	80059b0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <HAL_InitTick+0xa4>)
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	4a1e      	ldr	r2, [pc, #120]	; (8001978 <HAL_InitTick+0xa4>)
 80018fe:	f043 0302 	orr.w	r3, r3, #2
 8001902:	6413      	str	r3, [r2, #64]	; 0x40
 8001904:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <HAL_InitTick+0xa4>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001910:	f107 0210 	add.w	r2, r7, #16
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4611      	mov	r1, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f008 fb4e 	bl	8009fbc <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001920:	f008 fb38 	bl	8009f94 <HAL_RCC_GetPCLK1Freq>
 8001924:	4603      	mov	r3, r0
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800192a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192c:	4a13      	ldr	r2, [pc, #76]	; (800197c <HAL_InitTick+0xa8>)
 800192e:	fba2 2303 	umull	r2, r3, r2, r3
 8001932:	0c9b      	lsrs	r3, r3, #18
 8001934:	3b01      	subs	r3, #1
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_InitTick+0xac>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <HAL_InitTick+0xb0>)
 800193c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_InitTick+0xac>)
 8001940:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001944:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001946:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <HAL_InitTick+0xac>)
 8001948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_InitTick+0xac>)
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_InitTick+0xac>)
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001958:	4809      	ldr	r0, [pc, #36]	; (8001980 <HAL_InitTick+0xac>)
 800195a:	f008 fb61 	bl	800a020 <HAL_TIM_Base_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d104      	bne.n	800196e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001964:	4806      	ldr	r0, [pc, #24]	; (8001980 <HAL_InitTick+0xac>)
 8001966:	f008 fb90 	bl	800a08a <HAL_TIM_Base_Start_IT>
 800196a:	4603      	mov	r3, r0
 800196c:	e000      	b.n	8001970 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	3730      	adds	r7, #48	; 0x30
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	431bde83 	.word	0x431bde83
 8001980:	20004f94 	.word	0x20004f94
 8001984:	40000400 	.word	0x40000400

08001988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <HardFault_Handler+0x4>

0800199c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <MemManage_Handler+0x4>

080019a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a6:	e7fe      	b.n	80019a6 <BusFault_Handler+0x4>

080019a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <UsageFault_Handler+0x4>

080019ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <CAN1_RX0_IRQHandler+0x10>)
 80019d2:	f003 fcf0 	bl	80053b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20004f20 	.word	0x20004f20

080019e0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <CAN1_RX1_IRQHandler+0x10>)
 80019e6:	f003 fce6 	bl	80053b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20004f20 	.word	0x20004f20

080019f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <TIM3_IRQHandler+0x10>)
 80019fa:	f008 fb6a 	bl	800a0d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20004f94 	.word	0x20004f94

08001a08 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <I2C1_EV_IRQHandler+0x10>)
 8001a0e:	f004 fe1f 	bl	8006650 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20004a48 	.word	0x20004a48

08001a1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <OTG_FS_IRQHandler+0x10>)
 8001a22:	f006 fe49 	bl	80086b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200060a8 	.word	0x200060a8

08001a30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
	return 1;
 8001a34:	2301      	movs	r3, #1
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <_kill>:

int _kill(int pid, int sig)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a4a:	f00d fc53 	bl	800f2f4 <__errno>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	2316      	movs	r3, #22
 8001a52:	6013      	str	r3, [r2, #0]
	return -1;
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_exit>:

void _exit (int status)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ffe7 	bl	8001a40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a72:	e7fe      	b.n	8001a72 <_exit+0x12>

08001a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a7c:	4a14      	ldr	r2, [pc, #80]	; (8001ad0 <_sbrk+0x5c>)
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <_sbrk+0x60>)
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a88:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d102      	bne.n	8001a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <_sbrk+0x64>)
 8001a92:	4a12      	ldr	r2, [pc, #72]	; (8001adc <_sbrk+0x68>)
 8001a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <_sbrk+0x64>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d207      	bcs.n	8001ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa4:	f00d fc26 	bl	800f2f4 <__errno>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	230c      	movs	r3, #12
 8001aac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ab2:	e009      	b.n	8001ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <_sbrk+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <_sbrk+0x64>)
 8001ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20020000 	.word	0x20020000
 8001ad4:	00000400 	.word	0x00000400
 8001ad8:	200004dc 	.word	0x200004dc
 8001adc:	200064b8 	.word	0x200064b8

08001ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <SystemInit+0x28>)
 8001ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aea:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <SystemInit+0x28>)
 8001aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <SystemInit+0x28>)
 8001af6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001afa:	609a      	str	r2, [r3, #8]
#endif
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b12:	e003      	b.n	8001b1c <LoopCopyDataInit>

08001b14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b1a:	3104      	adds	r1, #4

08001b1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b1c:	480b      	ldr	r0, [pc, #44]	; (8001b4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b24:	d3f6      	bcc.n	8001b14 <CopyDataInit>
  ldr  r2, =_sbss
 8001b26:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b28:	e002      	b.n	8001b30 <LoopFillZerobss>

08001b2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b2c:	f842 3b04 	str.w	r3, [r2], #4

08001b30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b34:	d3f9      	bcc.n	8001b2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b36:	f7ff ffd3 	bl	8001ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b3a:	f00d fbe1 	bl	800f300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3e:	f7fe fce9 	bl	8000514 <main>
  bx  lr    
 8001b42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b48:	0800fbf8 	.word	0x0800fbf8
  ldr  r0, =_sdata
 8001b4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b50:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8001b54:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8001b58:	200064b4 	.word	0x200064b4

08001b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b5c:	e7fe      	b.n	8001b5c <ADC_IRQHandler>
	...

08001b60 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	0a5a      	lsrs	r2, r3, #9
 8001b70:	490f      	ldr	r1, [pc, #60]	; (8001bb0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8001b72:	fba1 1202 	umull	r1, r2, r1, r2
 8001b76:	09d2      	lsrs	r2, r2, #7
 8001b78:	490e      	ldr	r1, [pc, #56]	; (8001bb4 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8001b7a:	fb01 f202 	mul.w	r2, r1, r2
 8001b7e:	1a9b      	subs	r3, r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	0a5b      	lsrs	r3, r3, #9
 8001b88:	4a09      	ldr	r2, [pc, #36]	; (8001bb0 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	09db      	lsrs	r3, r3, #7
 8001b90:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	441a      	add	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	601a      	str	r2, [r3, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	00044b83 	.word	0x00044b83
 8001bb4:	3b9aca00 	.word	0x3b9aca00

08001bb8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	ed87 0a00 	vstr	s0, [r7]
  {
    const int32_t* val = (int32_t*) &f;
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	613b      	str	r3, [r7, #16]
    int32_t exp = ((*val >> 23) & 255);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	15db      	asrs	r3, r3, #23
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	617b      	str	r3, [r7, #20]
    if (exp != 0)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x28>
    {
      exp += 1023 - 127;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8001bde:	617b      	str	r3, [r7, #20]
    }

    int32_t sig = *val;
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60fb      	str	r3, [r7, #12]
    *(outbuffer++) = 0;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	607a      	str	r2, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig << 5) & 0xff;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	0159      	lsls	r1, r3, #5
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	b2ca      	uxtb	r2, r1
 8001c10:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	10d9      	asrs	r1, r3, #3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	b2ca      	uxtb	r2, r1
 8001c1e:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 11) & 0xff;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	12d9      	asrs	r1, r3, #11
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	b2ca      	uxtb	r2, r1
 8001c2c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	b25a      	sxtb	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	14db      	asrs	r3, r3, #19
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	b25b      	sxtb	r3, r3
 8001c40:	4313      	orrs	r3, r2
 8001c42:	b259      	sxtb	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	b2ca      	uxtb	r2, r1
 8001c4c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	111b      	asrs	r3, r3, #4
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	1c59      	adds	r1, r3, #1
 8001c58:	6079      	str	r1, [r7, #4]
 8001c5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8001c62:	edd7 7a00 	vldr	s15, [r7]
 8001c66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6e:	d508      	bpl.n	8001c82 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0xca>
    {
      *(outbuffer - 1) |= 0x80;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	781a      	ldrb	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8001c82:	2308      	movs	r3, #8
  }
 8001c84:	4618      	mov	r0, r3
 8001c86:	371c      	adds	r7, #28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  {
    uint32_t* val = (uint32_t*)f;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
    inbuffer += 3;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3303      	adds	r3, #3
 8001ca2:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	095b      	lsrs	r3, r3, #5
 8001cae:	f003 0207 	and.w	r2, r3, #7
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	00da      	lsls	r2, r3, #3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	02da      	lsls	r2, r3, #11
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	04db      	lsls	r3, r3, #19
 8001ce8:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8001cec:	431a      	orrs	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	601a      	str	r2, [r3, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	091b      	lsrs	r3, r3, #4
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	60bb      	str	r3, [r7, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	f403 62fe 	and.w	r2, r3, #2032	; 0x7f0
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60bb      	str	r3, [r7, #8]
    if (exp != 0)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d008      	beq.n	8001d2a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x9a>
    {
      *val |= ((exp) - 1023 + 127) << 23;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8001d22:	05db      	lsls	r3, r3, #23
 8001d24:	431a      	orrs	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	601a      	str	r2, [r3, #0]
    }

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	061b      	lsls	r3, r3, #24
 8001d34:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	601a      	str	r2, [r3, #0]

    return 8;
 8001d42:	2308      	movs	r3, #8
  }
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <_ZN3ros3MsgC1Ev>:
class Msg
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <_ZN3ros3MsgC1Ev+0x1c>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	0800fbd4 	.word	0x0800fbd4

08001d94 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
      data()
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ffe8 	bl	8001d74 <_ZN3ros3MsgC1Ev>
 8001da4:	4a06      	ldr	r2, [pc, #24]	; (8001dc0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3304      	adds	r3, #4
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff ffce 	bl	8001d50 <_ZN3ros4TimeC1Ev>
    {
    }
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	0800fbbc 	.word	0x0800fbbc

08001dc4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6859      	ldr	r1, [r3, #4]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	b2ca      	uxtb	r2, r1
 8001dde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	0a19      	lsrs	r1, r3, #8
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3301      	adds	r3, #1
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	4413      	add	r3, r2
 8001dee:	b2ca      	uxtb	r2, r1
 8001df0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	0c19      	lsrs	r1, r3, #16
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	b2ca      	uxtb	r2, r1
 8001e02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	0e19      	lsrs	r1, r3, #24
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3303      	adds	r3, #3
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	4413      	add	r3, r2
 8001e12:	b2ca      	uxtb	r2, r1
 8001e14:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6899      	ldr	r1, [r3, #8]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	4413      	add	r3, r2
 8001e26:	b2ca      	uxtb	r2, r1
 8001e28:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	0a19      	lsrs	r1, r3, #8
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	3301      	adds	r3, #1
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	b2ca      	uxtb	r2, r1
 8001e3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	0c19      	lsrs	r1, r3, #16
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3302      	adds	r3, #2
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	4413      	add	r3, r2
 8001e4a:	b2ca      	uxtb	r2, r1
 8001e4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	0e19      	lsrs	r1, r3, #24
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3303      	adds	r3, #3
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	b2ca      	uxtb	r2, r1
 8001e5e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3304      	adds	r3, #4
 8001e64:	60fb      	str	r3, [r7, #12]
      return offset;
 8001e66:	68fb      	ldr	r3, [r7, #12]
    }
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3301      	adds	r3, #1
 8001e98:	6839      	ldr	r1, [r7, #0]
 8001e9a:	440b      	add	r3, r1
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	021b      	lsls	r3, r3, #8
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	3302      	adds	r3, #2
 8001eae:	6839      	ldr	r1, [r7, #0]
 8001eb0:	440b      	add	r3, r1
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	041b      	lsls	r3, r3, #16
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3303      	adds	r3, #3
 8001ec4:	6839      	ldr	r1, [r7, #0]
 8001ec6:	440b      	add	r3, r1
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	061b      	lsls	r3, r3, #24
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	4413      	add	r3, r2
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	3301      	adds	r3, #1
 8001eee:	6839      	ldr	r1, [r7, #0]
 8001ef0:	440b      	add	r3, r1
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	021b      	lsls	r3, r3, #8
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3302      	adds	r3, #2
 8001f04:	6839      	ldr	r1, [r7, #0]
 8001f06:	440b      	add	r3, r1
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	041b      	lsls	r3, r3, #16
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	3303      	adds	r3, #3
 8001f1a:	6839      	ldr	r1, [r7, #0]
 8001f1c:	440b      	add	r3, r1
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	061b      	lsls	r3, r3, #24
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	60fb      	str	r3, [r7, #12]
     return offset;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
    }
 8001f30:	4618      	mov	r0, r3
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	0800f6ec 	.word	0x0800f6ec

08001f58 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	0800f6fc 	.word	0x0800f6fc

08001f74 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fef8 	bl	8001d74 <_ZN3ros3MsgC1Ev>
 8001f84:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	809a      	strh	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001f9a:	60da      	str	r2, [r3, #12]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a06      	ldr	r2, [pc, #24]	; (8001fb8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001fa0:	611a      	str	r2, [r3, #16]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	615a      	str	r2, [r3, #20]
    {
    }
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	0800fba4 	.word	0x0800fba4
 8001fb8:	0800f720 	.word	0x0800f720

08001fbc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	8899      	ldrh	r1, [r3, #4]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	b2ca      	uxtb	r2, r1
 8001fd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	889b      	ldrh	r3, [r3, #4]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	b299      	uxth	r1, r3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	b2ca      	uxtb	r2, r1
 8001fea:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	3302      	adds	r3, #2
 8001ff0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe f8ea 	bl	80001d0 <strlen>
 8001ffc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	4413      	add	r3, r2
 8002004:	69b9      	ldr	r1, [r7, #24]
 8002006:	4618      	mov	r0, r3
 8002008:	f001 fd0a 	bl	8003a20 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	3304      	adds	r3, #4
 8002010:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	18d0      	adds	r0, r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4619      	mov	r1, r3
 8002020:	f00d f9a2 	bl	800f368 <memcpy>
      offset += length_topic_name;
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	4413      	add	r3, r2
 800202a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe f8cd 	bl	80001d0 <strlen>
 8002036:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	4413      	add	r3, r2
 800203e:	6979      	ldr	r1, [r7, #20]
 8002040:	4618      	mov	r0, r3
 8002042:	f001 fced 	bl	8003a20 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3304      	adds	r3, #4
 800204a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	18d0      	adds	r0, r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4619      	mov	r1, r3
 800205a:	f00d f985 	bl	800f368 <memcpy>
      offset += length_message_type;
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	4413      	add	r3, r2
 8002064:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe f8b0 	bl	80001d0 <strlen>
 8002070:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	4413      	add	r3, r2
 8002078:	6939      	ldr	r1, [r7, #16]
 800207a:	4618      	mov	r0, r3
 800207c:	f001 fcd0 	bl	8003a20 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	3304      	adds	r3, #4
 8002084:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	18d0      	adds	r0, r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4619      	mov	r1, r3
 8002094:	f00d f968 	bl	800f368 <memcpy>
      offset += length_md5sum;
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4413      	add	r3, r2
 800209e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80020a6:	68f9      	ldr	r1, [r7, #12]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	4413      	add	r3, r2
 80020ae:	b2ca      	uxtb	r2, r1
 80020b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	0a19      	lsrs	r1, r3, #8
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3301      	adds	r3, #1
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	4413      	add	r3, r2
 80020be:	b2ca      	uxtb	r2, r1
 80020c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	0c19      	lsrs	r1, r3, #16
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3302      	adds	r3, #2
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	4413      	add	r3, r2
 80020ce:	b2ca      	uxtb	r2, r1
 80020d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	0e19      	lsrs	r1, r3, #24
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3303      	adds	r3, #3
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	4413      	add	r3, r2
 80020de:	b2ca      	uxtb	r2, r1
 80020e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3304      	adds	r3, #4
 80020e6:	61fb      	str	r3, [r7, #28]
      return offset;
 80020e8:	69fb      	ldr	r3, [r7, #28]
    }
 80020ea:	4618      	mov	r0, r3
 80020ec:	3720      	adds	r7, #32
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b08a      	sub	sp, #40	; 0x28
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	4413      	add	r3, r2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	b29a      	uxth	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	889b      	ldrh	r3, [r3, #4]
 8002112:	b21a      	sxth	r2, r3
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	3301      	adds	r3, #1
 8002118:	6839      	ldr	r1, [r7, #0]
 800211a:	440b      	add	r3, r1
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	b21b      	sxth	r3, r3
 8002122:	4313      	orrs	r3, r2
 8002124:	b21b      	sxth	r3, r3
 8002126:	b29a      	uxth	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	3302      	adds	r3, #2
 8002130:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	441a      	add	r2, r3
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f001 fc8c 	bl	8003a5c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	3304      	adds	r3, #4
 8002148:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	4413      	add	r3, r2
 8002154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002156:	429a      	cmp	r2, r3
 8002158:	d20c      	bcs.n	8002174 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	441a      	add	r2, r3
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	3b01      	subs	r3, #1
 8002164:	6839      	ldr	r1, [r7, #0]
 8002166:	440b      	add	r3, r1
 8002168:	7812      	ldrb	r2, [r2, #0]
 800216a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	3301      	adds	r3, #1
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
 8002172:	e7ec      	b.n	800214e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	4413      	add	r3, r2
 800217a:	3b01      	subs	r3, #1
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	4413      	add	r3, r2
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	3b01      	subs	r3, #1
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	441a      	add	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	4413      	add	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	441a      	add	r2, r3
 800219e:	f107 0310 	add.w	r3, r7, #16
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f001 fc59 	bl	8003a5c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	3304      	adds	r3, #4
 80021ae:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	623b      	str	r3, [r7, #32]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4413      	add	r3, r2
 80021ba:	6a3a      	ldr	r2, [r7, #32]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d20c      	bcs.n	80021da <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	441a      	add	r2, r3
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	6839      	ldr	r1, [r7, #0]
 80021cc:	440b      	add	r3, r1
 80021ce:	7812      	ldrb	r2, [r2, #0]
 80021d0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	3301      	adds	r3, #1
 80021d6:	623b      	str	r3, [r7, #32]
 80021d8:	e7ec      	b.n	80021b4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4413      	add	r3, r2
 80021e0:	3b01      	subs	r3, #1
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	4413      	add	r3, r2
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	441a      	add	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4413      	add	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	441a      	add	r2, r3
 8002204:	f107 030c 	add.w	r3, r7, #12
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f001 fc26 	bl	8003a5c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	3304      	adds	r3, #4
 8002214:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	61fb      	str	r3, [r7, #28]
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	429a      	cmp	r2, r3
 8002224:	d20c      	bcs.n	8002240 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	441a      	add	r2, r3
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	3b01      	subs	r3, #1
 8002230:	6839      	ldr	r1, [r7, #0]
 8002232:	440b      	add	r3, r1
 8002234:	7812      	ldrb	r2, [r2, #0]
 8002236:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	3301      	adds	r3, #1
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	e7ec      	b.n	800221a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4413      	add	r3, r2
 8002246:	3b01      	subs	r3, #1
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	4413      	add	r3, r2
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	3b01      	subs	r3, #1
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	441a      	add	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4413      	add	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	6839      	ldr	r1, [r7, #0]
 800226e:	440a      	add	r2, r1
 8002270:	7812      	ldrb	r2, [r2, #0]
 8002272:	4313      	orrs	r3, r2
 8002274:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	3301      	adds	r3, #1
 800227c:	6839      	ldr	r1, [r7, #0]
 800227e:	440b      	add	r3, r1
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	021b      	lsls	r3, r3, #8
 8002284:	4313      	orrs	r3, r2
 8002286:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	3302      	adds	r3, #2
 800228e:	6839      	ldr	r1, [r7, #0]
 8002290:	440b      	add	r3, r1
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	041b      	lsls	r3, r3, #16
 8002296:	4313      	orrs	r3, r2
 8002298:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	3303      	adds	r3, #3
 80022a0:	6839      	ldr	r1, [r7, #0]
 80022a2:	440b      	add	r3, r1
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	061b      	lsls	r3, r3, #24
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	3304      	adds	r3, #4
 80022b6:	61bb      	str	r3, [r7, #24]
     return offset;
 80022b8:	69bb      	ldr	r3, [r7, #24]
    }
 80022ba:	4618      	mov	r0, r3
 80022bc:	3728      	adds	r7, #40	; 0x28
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	0800f724 	.word	0x0800f724

080022e0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	0800f740 	.word	0x0800f740

080022fc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fd34 	bl	8001d74 <_ZN3ros3MsgC1Ev>
 800230c:	4a06      	ldr	r2, [pc, #24]	; (8002328 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	711a      	strb	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a04      	ldr	r2, [pc, #16]	; (800232c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800231c:	609a      	str	r2, [r3, #8]
    {
    }
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	0800fb8c 	.word	0x0800fb8c
 800232c:	0800f720 	.word	0x0800f720

08002330 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	4413      	add	r3, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	7912      	ldrb	r2, [r2, #4]
 8002348:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3301      	adds	r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fd ff3b 	bl	80001d0 <strlen>
 800235a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	4413      	add	r3, r2
 8002362:	68b9      	ldr	r1, [r7, #8]
 8002364:	4618      	mov	r0, r3
 8002366:	f001 fb5b 	bl	8003a20 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3304      	adds	r3, #4
 800236e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	18d0      	adds	r0, r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	4619      	mov	r1, r3
 800237e:	f00c fff3 	bl	800f368 <memcpy>
      offset += length_msg;
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4413      	add	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
      return offset;
 800238a:	68fb      	ldr	r3, [r7, #12]
    }
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	4413      	add	r3, r2
 80023a8:	781a      	ldrb	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	3301      	adds	r3, #1
 80023b2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	441a      	add	r2, r3
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f001 fb4b 	bl	8003a5c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	3304      	adds	r3, #4
 80023ca:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4413      	add	r3, r2
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d20c      	bcs.n	80023f6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	441a      	add	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	6839      	ldr	r1, [r7, #0]
 80023e8:	440b      	add	r3, r1
 80023ea:	7812      	ldrb	r2, [r2, #0]
 80023ec:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	3301      	adds	r3, #1
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	e7ec      	b.n	80023d0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4413      	add	r3, r2
 80023fc:	3b01      	subs	r3, #1
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	4413      	add	r3, r2
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	3b01      	subs	r3, #1
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	441a      	add	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4413      	add	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
     return offset;
 800241a:	693b      	ldr	r3, [r7, #16]
    }
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	0800f764 	.word	0x0800f764

08002440 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	0800f778 	.word	0x0800f778

0800245c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fc84 	bl	8001d74 <_ZN3ros3MsgC1Ev>
 800246c:	4a0c      	ldr	r2, [pc, #48]	; (80024a0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	619a      	str	r2, [r3, #24]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	61da      	str	r2, [r3, #28]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	0800fb74 	.word	0x0800fb74

080024a4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	; 0x28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6859      	ldr	r1, [r3, #4]
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	b2ca      	uxtb	r2, r1
 80024be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	0a19      	lsrs	r1, r3, #8
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	3301      	adds	r3, #1
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	b2ca      	uxtb	r2, r1
 80024d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	0c19      	lsrs	r1, r3, #16
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	3302      	adds	r3, #2
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	b2ca      	uxtb	r2, r1
 80024e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	0e19      	lsrs	r1, r3, #24
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	3303      	adds	r3, #3
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	4413      	add	r3, r2
 80024f2:	b2ca      	uxtb	r2, r1
 80024f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	3304      	adds	r3, #4
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80024fc:	2300      	movs	r3, #0
 80024fe:	623b      	str	r3, [r7, #32]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	6a3a      	ldr	r2, [r7, #32]
 8002506:	429a      	cmp	r2, r3
 8002508:	d22b      	bcs.n	8002562 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002518:	6939      	ldr	r1, [r7, #16]
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	4413      	add	r3, r2
 8002520:	b2ca      	uxtb	r2, r1
 8002522:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	0a19      	lsrs	r1, r3, #8
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	3301      	adds	r3, #1
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	4413      	add	r3, r2
 8002530:	b2ca      	uxtb	r2, r1
 8002532:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	0c19      	lsrs	r1, r3, #16
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	3302      	adds	r3, #2
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	4413      	add	r3, r2
 8002540:	b2ca      	uxtb	r2, r1
 8002542:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	0e19      	lsrs	r1, r3, #24
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	3303      	adds	r3, #3
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	4413      	add	r3, r2
 8002550:	b2ca      	uxtb	r2, r1
 8002552:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	3304      	adds	r3, #4
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	3301      	adds	r3, #1
 800255e:	623b      	str	r3, [r7, #32]
 8002560:	e7ce      	b.n	8002500 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6919      	ldr	r1, [r3, #16]
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	4413      	add	r3, r2
 800256c:	b2ca      	uxtb	r2, r1
 800256e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	0a19      	lsrs	r1, r3, #8
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	3301      	adds	r3, #1
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	4413      	add	r3, r2
 800257e:	b2ca      	uxtb	r2, r1
 8002580:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	0c19      	lsrs	r1, r3, #16
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	3302      	adds	r3, #2
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	4413      	add	r3, r2
 8002590:	b2ca      	uxtb	r2, r1
 8002592:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	0e19      	lsrs	r1, r3, #24
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	3303      	adds	r3, #3
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	4413      	add	r3, r2
 80025a2:	b2ca      	uxtb	r2, r1
 80025a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	3304      	adds	r3, #4
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80025ac:	2300      	movs	r3, #0
 80025ae:	61fb      	str	r3, [r7, #28]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	69fa      	ldr	r2, [r7, #28]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d22b      	bcs.n	8002612 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80025c8:	68f9      	ldr	r1, [r7, #12]
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	4413      	add	r3, r2
 80025d0:	b2ca      	uxtb	r2, r1
 80025d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	0a19      	lsrs	r1, r3, #8
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	3301      	adds	r3, #1
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	b2ca      	uxtb	r2, r1
 80025e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	0c19      	lsrs	r1, r3, #16
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	3302      	adds	r3, #2
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	4413      	add	r3, r2
 80025f0:	b2ca      	uxtb	r2, r1
 80025f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	0e19      	lsrs	r1, r3, #24
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	3303      	adds	r3, #3
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	b2ca      	uxtb	r2, r1
 8002602:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	3304      	adds	r3, #4
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3301      	adds	r3, #1
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	e7ce      	b.n	80025b0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69d9      	ldr	r1, [r3, #28]
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	4413      	add	r3, r2
 800261c:	b2ca      	uxtb	r2, r1
 800261e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	0a19      	lsrs	r1, r3, #8
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	3301      	adds	r3, #1
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	4413      	add	r3, r2
 800262e:	b2ca      	uxtb	r2, r1
 8002630:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	0c19      	lsrs	r1, r3, #16
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	3302      	adds	r3, #2
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	4413      	add	r3, r2
 8002640:	b2ca      	uxtb	r2, r1
 8002642:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	0e19      	lsrs	r1, r3, #24
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	3303      	adds	r3, #3
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	4413      	add	r3, r2
 8002652:	b2ca      	uxtb	r2, r1
 8002654:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	3304      	adds	r3, #4
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800265c:	2300      	movs	r3, #0
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	429a      	cmp	r2, r3
 8002668:	d228      	bcs.n	80026bc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd fdaa 	bl	80001d0 <strlen>
 800267c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	4413      	add	r3, r2
 8002684:	6979      	ldr	r1, [r7, #20]
 8002686:	4618      	mov	r0, r3
 8002688:	f001 f9ca 	bl	8003a20 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	3304      	adds	r3, #4
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	18d0      	adds	r0, r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	4619      	mov	r1, r3
 80026a8:	f00c fe5e 	bl	800f368 <memcpy>
      offset += length_stringsi;
 80026ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	4413      	add	r3, r2
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	3301      	adds	r3, #1
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	e7d1      	b.n	8002660 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80026be:	4618      	mov	r0, r3
 80026c0:	3728      	adds	r7, #40	; 0x28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b08e      	sub	sp, #56	; 0x38
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80026d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	4413      	add	r3, r2
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80026de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e0:	3301      	adds	r3, #1
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	4413      	add	r3, r2
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	021b      	lsls	r3, r3, #8
 80026ea:	6a3a      	ldr	r2, [r7, #32]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80026f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f2:	3302      	adds	r3, #2
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	4413      	add	r3, r2
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	041b      	lsls	r3, r3, #16
 80026fc:	6a3a      	ldr	r2, [r7, #32]
 80026fe:	4313      	orrs	r3, r2
 8002700:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002704:	3303      	adds	r3, #3
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	4413      	add	r3, r2
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	061b      	lsls	r3, r3, #24
 800270e:	6a3a      	ldr	r2, [r7, #32]
 8002710:	4313      	orrs	r3, r2
 8002712:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002716:	3304      	adds	r3, #4
 8002718:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	6a3a      	ldr	r2, [r7, #32]
 8002720:	429a      	cmp	r2, r3
 8002722:	d90a      	bls.n	800273a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4619      	mov	r1, r3
 800272e:	4610      	mov	r0, r2
 8002730:	f00c fed6 	bl	800f4e0 <realloc>
 8002734:	4602      	mov	r2, r0
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a3a      	ldr	r2, [r7, #32]
 800273e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002740:	2300      	movs	r3, #0
 8002742:	633b      	str	r3, [r7, #48]	; 0x30
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800274a:	429a      	cmp	r2, r3
 800274c:	d236      	bcs.n	80027bc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002756:	6839      	ldr	r1, [r7, #0]
 8002758:	440a      	add	r2, r1
 800275a:	7812      	ldrb	r2, [r2, #0]
 800275c:	4313      	orrs	r3, r2
 800275e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002764:	3301      	adds	r3, #1
 8002766:	6839      	ldr	r1, [r7, #0]
 8002768:	440b      	add	r3, r1
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002776:	3302      	adds	r3, #2
 8002778:	6839      	ldr	r1, [r7, #0]
 800277a:	440b      	add	r3, r1
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	041b      	lsls	r3, r3, #16
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002788:	3303      	adds	r3, #3
 800278a:	6839      	ldr	r1, [r7, #0]
 800278c:	440b      	add	r3, r1
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	061b      	lsls	r3, r3, #24
 8002792:	4313      	orrs	r3, r2
 8002794:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800279c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279e:	3304      	adds	r3, #4
 80027a0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	3208      	adds	r2, #8
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80027b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b6:	3301      	adds	r3, #1
 80027b8:	633b      	str	r3, [r7, #48]	; 0x30
 80027ba:	e7c3      	b.n	8002744 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80027bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	4413      	add	r3, r2
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80027c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c8:	3301      	adds	r3, #1
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	4413      	add	r3, r2
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80027d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027da:	3302      	adds	r3, #2
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	041b      	lsls	r3, r3, #16
 80027e4:	69fa      	ldr	r2, [r7, #28]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80027ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ec:	3303      	adds	r3, #3
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	4413      	add	r3, r2
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	061b      	lsls	r3, r3, #24
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80027fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fe:	3304      	adds	r3, #4
 8002800:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	429a      	cmp	r2, r3
 800280a:	d90a      	bls.n	8002822 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699a      	ldr	r2, [r3, #24]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4619      	mov	r1, r3
 8002816:	4610      	mov	r0, r2
 8002818:	f00c fe62 	bl	800f4e0 <realloc>
 800281c:	4602      	mov	r2, r0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002828:	2300      	movs	r3, #0
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002832:	429a      	cmp	r2, r3
 8002834:	d236      	bcs.n	80028a4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800283e:	6839      	ldr	r1, [r7, #0]
 8002840:	440a      	add	r2, r1
 8002842:	7812      	ldrb	r2, [r2, #0]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800284c:	3301      	adds	r3, #1
 800284e:	6839      	ldr	r1, [r7, #0]
 8002850:	440b      	add	r3, r1
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285e:	3302      	adds	r3, #2
 8002860:	6839      	ldr	r1, [r7, #0]
 8002862:	440b      	add	r3, r1
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	041b      	lsls	r3, r3, #16
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002870:	3303      	adds	r3, #3
 8002872:	6839      	ldr	r1, [r7, #0]
 8002874:	440b      	add	r3, r1
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	061b      	lsls	r3, r3, #24
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002886:	3304      	adds	r3, #4
 8002888:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699a      	ldr	r2, [r3, #24]
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	3214      	adds	r2, #20
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289e:	3301      	adds	r3, #1
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028a2:	e7c3      	b.n	800282c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80028a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	4413      	add	r3, r2
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80028ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b0:	3301      	adds	r3, #1
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	4413      	add	r3, r2
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80028c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c2:	3302      	adds	r3, #2
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	4413      	add	r3, r2
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	041b      	lsls	r3, r3, #16
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80028d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d4:	3303      	adds	r3, #3
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	4413      	add	r3, r2
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	061b      	lsls	r3, r3, #24
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80028e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e6:	3304      	adds	r3, #4
 80028e8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d90a      	bls.n	800290a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4619      	mov	r1, r3
 80028fe:	4610      	mov	r0, r2
 8002900:	f00c fdee 	bl	800f4e0 <realloc>
 8002904:	4602      	mov	r2, r0
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002910:	2300      	movs	r3, #0
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800291a:	429a      	cmp	r2, r3
 800291c:	d23f      	bcs.n	800299e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800291e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	441a      	add	r2, r3
 8002924:	f107 030c 	add.w	r3, r7, #12
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f001 f896 	bl	8003a5c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002932:	3304      	adds	r3, #4
 8002934:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
 800293a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4413      	add	r3, r2
 8002940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002942:	429a      	cmp	r2, r3
 8002944:	d20c      	bcs.n	8002960 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	441a      	add	r2, r3
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	3b01      	subs	r3, #1
 8002950:	6839      	ldr	r1, [r7, #0]
 8002952:	440b      	add	r3, r1
 8002954:	7812      	ldrb	r2, [r2, #0]
 8002956:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	3301      	adds	r3, #1
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
 800295e:	e7ec      	b.n	800293a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4413      	add	r3, r2
 8002966:	3b01      	subs	r3, #1
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	4413      	add	r3, r2
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002972:	3b01      	subs	r3, #1
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	441a      	add	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800297c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4413      	add	r3, r2
 8002982:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	3220      	adds	r2, #32
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002998:	3301      	adds	r3, #1
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28
 800299c:	e7ba      	b.n	8002914 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800299e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80029a0:	4618      	mov	r0, r3
 80029a2:	3738      	adds	r7, #56	; 0x38
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	0800fa80 	.word	0x0800fa80

080029c4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	0800f79c 	.word	0x0800f79c

080029e0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	611a      	str	r2, [r3, #16]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68d8      	ldr	r0, [r3, #12]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6891      	ldr	r1, [r2, #8]
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	4798      	blx	r3
 8002a2c:	4603      	mov	r3, r0
  };
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
  }
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <_ZN13STM32HardwareC1Ev>:
extern struct ringbuffer rb;

class STM32Hardware
{
public:
	STM32Hardware() {
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
	}
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <_ZN13STM32Hardware4initEv>:

	void init() {
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
	}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <_ZN13STM32Hardware4readEv>:

	// Read a byte of data from ROS connection.
	// If no data , returns -1
	int read()
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
	{
		uint32_t r;
		uint8_t ch = -1;
 8002a80:	23ff      	movs	r3, #255	; 0xff
 8002a82:	72fb      	strb	r3, [r7, #11]

		r = ringbuffer_getchar(&rb, &ch);
 8002a84:	f107 030b 	add.w	r3, r7, #11
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4807      	ldr	r0, [pc, #28]	; (8002aa8 <_ZN13STM32Hardware4readEv+0x30>)
 8002a8c:	f001 ff73 	bl	8004976 <_Z18ringbuffer_getcharP10ringbufferPh>
 8002a90:	60f8      	str	r0, [r7, #12]

		if (1 == r)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <_ZN13STM32Hardware4readEv+0x24>
			return ch;
 8002a98:	7afb      	ldrb	r3, [r7, #11]
 8002a9a:	e001      	b.n	8002aa0 <_ZN13STM32Hardware4readEv+0x28>
		else
			return -1;
 8002a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	200004e0 	.word	0x200004e0

08002aac <_ZN13STM32Hardware5writeEPhi>:


	// Send a byte of data to ROS connection
	void write(uint8_t* data, int length)
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
	{
		CDC_Transmit_FS(data, length);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	4619      	mov	r1, r3
 8002abe:	68b8      	ldr	r0, [r7, #8]
 8002ac0:	f00b ffba 	bl	800ea38 <CDC_Transmit_FS>
	}
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <_ZN13STM32Hardware4timeEv>:

	// Returns milliseconds since start of program
	unsigned long time(void)
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	{
		return HAL_GetTick();
 8002ad4:	f002 f80e 	bl	8004af4 <HAL_GetTick>
 8002ad8:	4603      	mov	r3, r0
	}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <_ZN8std_msgs4Int8C1Ev>:
  {
    public:
      typedef int8_t _data_type;
      _data_type data;

    Int8():
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
      data(0)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff f940 	bl	8001d74 <_ZN3ros3MsgC1Ev>
 8002af4:	4a05      	ldr	r2, [pc, #20]	; (8002b0c <_ZN8std_msgs4Int8C1Ev+0x28>)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	711a      	strb	r2, [r3, #4]
    {
    }
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	0800fb30 	.word	0x0800fb30

08002b10 <_ZNK8std_msgs4Int89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002b24:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	7a3a      	ldrb	r2, [r7, #8]
 8002b2e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	3301      	adds	r3, #1
 8002b34:	60fb      	str	r3, [r7, #12]
      return offset;
 8002b36:	68fb      	ldr	r3, [r7, #12]
    }
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <_ZN8std_msgs4Int811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b56:	7a3a      	ldrb	r2, [r7, #8]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6839      	ldr	r1, [r7, #0]
 8002b5c:	440b      	add	r3, r1
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8002b66:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3301      	adds	r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
     return offset;
 8002b74:	68fb      	ldr	r3, [r7, #12]
    }
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <_ZN8std_msgs4Int87getTypeEv>:

    const char * getType(){ return "std_msgs/Int8"; };
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <_ZN8std_msgs4Int87getTypeEv+0x18>)
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	0800f7c0 	.word	0x0800f7c0

08002ba0 <_ZN8std_msgs4Int86getMD5Ev>:
    const char * getMD5(){ return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <_ZN8std_msgs4Int86getMD5Ev+0x18>)
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	0800f7d0 	.word	0x0800f7d0

08002bbc <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff f8d4 	bl	8001d74 <_ZN3ros3MsgC1Ev>
 8002bcc:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a07      	ldr	r2, [pc, #28]	; (8002bf4 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	60da      	str	r2, [r3, #12]
    {
    }
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	0800fb18 	.word	0x0800fb18
 8002bf4:	0800f720 	.word	0x0800f720

08002bf8 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fae0 	bl	80001d0 <strlen>
 8002c10:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	4413      	add	r3, r2
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 ff00 	bl	8003a20 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	3304      	adds	r3, #4
 8002c24:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	18d0      	adds	r0, r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	4619      	mov	r1, r3
 8002c34:	f00c fb98 	bl	800f368 <memcpy>
      offset += length_label;
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6899      	ldr	r1, [r3, #8]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	4413      	add	r3, r2
 8002c4a:	b2ca      	uxtb	r2, r1
 8002c4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	0a19      	lsrs	r1, r3, #8
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3301      	adds	r3, #1
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	b2ca      	uxtb	r2, r1
 8002c5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	0c19      	lsrs	r1, r3, #16
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3302      	adds	r3, #2
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	b2ca      	uxtb	r2, r1
 8002c70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	0e19      	lsrs	r1, r3, #24
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3303      	adds	r3, #3
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	4413      	add	r3, r2
 8002c80:	b2ca      	uxtb	r2, r1
 8002c82:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	3304      	adds	r3, #4
 8002c88:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68d9      	ldr	r1, [r3, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	4413      	add	r3, r2
 8002c94:	b2ca      	uxtb	r2, r1
 8002c96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	0a19      	lsrs	r1, r3, #8
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	b2ca      	uxtb	r2, r1
 8002ca8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	0c19      	lsrs	r1, r3, #16
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	b2ca      	uxtb	r2, r1
 8002cba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	0e19      	lsrs	r1, r3, #24
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3303      	adds	r3, #3
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	4413      	add	r3, r2
 8002cca:	b2ca      	uxtb	r2, r1
 8002ccc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	60fb      	str	r3, [r7, #12]
      return offset;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
    }
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b086      	sub	sp, #24
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	441a      	add	r2, r3
 8002cf2:	f107 030c 	add.w	r3, r7, #12
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 feaf 	bl	8003a5c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	3304      	adds	r3, #4
 8002d02:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d20c      	bcs.n	8002d2e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	441a      	add	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	6839      	ldr	r1, [r7, #0]
 8002d20:	440b      	add	r3, r1
 8002d22:	7812      	ldrb	r2, [r2, #0]
 8002d24:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	e7ec      	b.n	8002d08 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_label-1]=0;
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	3b01      	subs	r3, #1
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	4413      	add	r3, r2
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	441a      	add	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4413      	add	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4413      	add	r3, r2
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	3301      	adds	r3, #1
 8002d68:	6839      	ldr	r1, [r7, #0]
 8002d6a:	440b      	add	r3, r1
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	021b      	lsls	r3, r3, #8
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	6839      	ldr	r1, [r7, #0]
 8002d80:	440b      	add	r3, r1
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	041b      	lsls	r3, r3, #16
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	3303      	adds	r3, #3
 8002d94:	6839      	ldr	r1, [r7, #0]
 8002d96:	440b      	add	r3, r1
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	061b      	lsls	r3, r3, #24
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	3304      	adds	r3, #4
 8002da6:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	4413      	add	r3, r2
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	6839      	ldr	r1, [r7, #0]
 8002dc0:	440b      	add	r3, r1
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	3302      	adds	r3, #2
 8002dd4:	6839      	ldr	r1, [r7, #0]
 8002dd6:	440b      	add	r3, r1
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	041b      	lsls	r3, r3, #16
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	3303      	adds	r3, #3
 8002dea:	6839      	ldr	r1, [r7, #0]
 8002dec:	440b      	add	r3, r1
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	061b      	lsls	r3, r3, #24
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	613b      	str	r3, [r7, #16]
     return offset;
 8002dfe:	693b      	ldr	r3, [r7, #16]
    }
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	0800f7f4 	.word	0x0800f7f4

08002e24 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	0800f814 	.word	0x0800f814

08002e40 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe ff92 	bl	8001d74 <_ZN3ros3MsgC1Ev>
 8002e50:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3308      	adds	r3, #8
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff feab 	bl	8002bbc <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	619a      	str	r2, [r3, #24]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61da      	str	r2, [r3, #28]
    {
    }
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	0800fb00 	.word	0x0800fb00

08002e80 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6859      	ldr	r1, [r3, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	4413      	add	r3, r2
 8002e98:	b2ca      	uxtb	r2, r1
 8002e9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	0a19      	lsrs	r1, r3, #8
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	b2ca      	uxtb	r2, r1
 8002eac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	0c19      	lsrs	r1, r3, #16
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3302      	adds	r3, #2
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	b2ca      	uxtb	r2, r1
 8002ebe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	0e19      	lsrs	r1, r3, #24
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	3303      	adds	r3, #3
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	4413      	add	r3, r2
 8002ece:	b2ca      	uxtb	r2, r1
 8002ed0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d218      	bcs.n	8002f18 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x98>
      offset += this->dim[i].serialize(outbuffer + offset);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	18d0      	adds	r0, r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	4413      	add	r3, r2
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	6839      	ldr	r1, [r7, #0]
 8002f02:	440a      	add	r2, r1
 8002f04:	4611      	mov	r1, r2
 8002f06:	4798      	blx	r3
 8002f08:	4602      	mov	r2, r0
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	3301      	adds	r3, #1
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	e7e1      	b.n	8002edc <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69d9      	ldr	r1, [r3, #28]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	4413      	add	r3, r2
 8002f22:	b2ca      	uxtb	r2, r1
 8002f24:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	0a19      	lsrs	r1, r3, #8
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	4413      	add	r3, r2
 8002f34:	b2ca      	uxtb	r2, r1
 8002f36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	0c19      	lsrs	r1, r3, #16
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	3302      	adds	r3, #2
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	4413      	add	r3, r2
 8002f46:	b2ca      	uxtb	r2, r1
 8002f48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	0e19      	lsrs	r1, r3, #24
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3303      	adds	r3, #3
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	4413      	add	r3, r2
 8002f58:	b2ca      	uxtb	r2, r1
 8002f5a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	3304      	adds	r3, #4
 8002f60:	60fb      	str	r3, [r7, #12]
      return offset;
 8002f62:	68fb      	ldr	r3, [r7, #12]
    }
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	4413      	add	r3, r2
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	3301      	adds	r3, #1
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	3302      	adds	r3, #2
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	041b      	lsls	r3, r3, #16
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	3303      	adds	r3, #3
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	4413      	add	r3, r2
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	061b      	lsls	r3, r3, #24
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d90a      	bls.n	8002fe0 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	f00c fa83 	bl	800f4e0 <realloc>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d21b      	bcs.n	800302c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xc0>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f103 0008 	add.w	r0, r3, #8
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	4413      	add	r3, r2
 8003000:	4619      	mov	r1, r3
 8003002:	f7ff fe6c 	bl	8002cde <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8003006:	4602      	mov	r2, r0
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	4413      	add	r3, r2
 800300c:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699a      	ldr	r2, [r3, #24]
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	18d0      	adds	r0, r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3308      	adds	r3, #8
 800301c:	2210      	movs	r2, #16
 800301e:	4619      	mov	r1, r3
 8003020:	f00c f9a2 	bl	800f368 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	3301      	adds	r3, #1
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	e7de      	b.n	8002fea <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7e>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	4413      	add	r3, r2
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	3301      	adds	r3, #1
 8003042:	6839      	ldr	r1, [r7, #0]
 8003044:	440b      	add	r3, r1
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	3302      	adds	r3, #2
 8003058:	6839      	ldr	r1, [r7, #0]
 800305a:	440b      	add	r3, r1
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	041b      	lsls	r3, r3, #16
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69da      	ldr	r2, [r3, #28]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	3303      	adds	r3, #3
 800306e:	6839      	ldr	r1, [r7, #0]
 8003070:	440b      	add	r3, r1
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	061b      	lsls	r3, r3, #24
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	3304      	adds	r3, #4
 8003080:	617b      	str	r3, [r7, #20]
     return offset;
 8003082:	697b      	ldr	r3, [r7, #20]
    }
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	4b03      	ldr	r3, [pc, #12]	; (80030a4 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	0800f838 	.word	0x0800f838

080030a8 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	4b03      	ldr	r3, [pc, #12]	; (80030c0 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 80030b2:	4618      	mov	r0, r3
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	0800f854 	.word	0x0800f854

080030c4 <_ZN8std_msgs15UInt8MultiArrayC1Ev>:
      uint32_t data_length;
      typedef uint8_t _data_type;
      _data_type st_data;
      _data_type * data;

    UInt8MultiArray():
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), data(NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe fe50 	bl	8001d74 <_ZN3ros3MsgC1Ev>
 80030d4:	4a09      	ldr	r2, [pc, #36]	; (80030fc <_ZN8std_msgs15UInt8MultiArrayC1Ev+0x38>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3304      	adds	r3, #4
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff feae 	bl	8002e40 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	625a      	str	r2, [r3, #36]	; 0x24
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	0800fae8 	.word	0x0800fae8

08003100 <_ZNK8std_msgs15UInt8MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
      offset += this->layout.serialize(outbuffer + offset);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	1d18      	adds	r0, r3, #4
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	4413      	add	r3, r2
 8003118:	4619      	mov	r1, r3
 800311a:	f7ff feb1 	bl	8002e80 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 800311e:	4602      	mov	r2, r0
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4413      	add	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	4413      	add	r3, r2
 8003130:	b2ca      	uxtb	r2, r1
 8003132:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	0a19      	lsrs	r1, r3, #8
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	3301      	adds	r3, #1
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	4413      	add	r3, r2
 8003142:	b2ca      	uxtb	r2, r1
 8003144:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	0c19      	lsrs	r1, r3, #16
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3302      	adds	r3, #2
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	4413      	add	r3, r2
 8003154:	b2ca      	uxtb	r2, r1
 8003156:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	0e19      	lsrs	r1, r3, #24
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	3303      	adds	r3, #3
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	4413      	add	r3, r2
 8003166:	b2ca      	uxtb	r2, r1
 8003168:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	3304      	adds	r3, #4
 800316e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < data_length; i++){
 8003170:	2300      	movs	r3, #0
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	429a      	cmp	r2, r3
 800317c:	d20f      	bcs.n	800319e <_ZNK8std_msgs15UInt8MultiArray9serializeEPh+0x9e>
      *(outbuffer + offset + 0) = (this->data[i] >> (8 * 0)) & 0xFF;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	441a      	add	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6839      	ldr	r1, [r7, #0]
 800318a:	440b      	add	r3, r1
 800318c:	7812      	ldrb	r2, [r2, #0]
 800318e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3301      	adds	r3, #1
 8003194:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < data_length; i++){
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	3301      	adds	r3, #1
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	e7ea      	b.n	8003174 <_ZNK8std_msgs15UInt8MultiArray9serializeEPh+0x74>
      }
      return offset;
 800319e:	68fb      	ldr	r3, [r7, #12]
    }
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	1d18      	adds	r0, r3, #4
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	4413      	add	r3, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	f7ff fed3 	bl	8002f6c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 80031c6:	4602      	mov	r2, r0
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	4413      	add	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	4413      	add	r3, r2
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	3301      	adds	r3, #1
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	4413      	add	r3, r2
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	021b      	lsls	r3, r3, #8
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	3302      	adds	r3, #2
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	4413      	add	r3, r2
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	041b      	lsls	r3, r3, #16
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	3303      	adds	r3, #3
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	4413      	add	r3, r2
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	061b      	lsls	r3, r3, #24
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	3304      	adds	r3, #4
 8003212:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	429a      	cmp	r2, r3
 800321c:	d908      	bls.n	8003230 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0x88>
        this->data = (uint8_t*)realloc(this->data, data_lengthT * sizeof(uint8_t));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	68f9      	ldr	r1, [r7, #12]
 8003224:	4618      	mov	r0, r3
 8003226:	f00c f95b 	bl	800f4e0 <realloc>
 800322a:	4602      	mov	r2, r0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8003236:	2300      	movs	r3, #0
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	429a      	cmp	r2, r3
 8003242:	d215      	bcs.n	8003270 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0xc8>
      this->st_data =  ((uint8_t) (*(inbuffer + offset)));
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	4413      	add	r3, r2
 800324a:	781a      	ldrb	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	3301      	adds	r3, #1
 8003256:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(uint8_t));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4413      	add	r3, r2
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	3228      	adds	r2, #40	; 0x28
 8003264:	7812      	ldrb	r2, [r2, #0]
 8003266:	701a      	strb	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	3301      	adds	r3, #1
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	e7e4      	b.n	800323a <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0x92>
      }
     return offset;
 8003270:	697b      	ldr	r3, [r7, #20]
    }
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <_ZN8std_msgs15UInt8MultiArray7getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8MultiArray"; };
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	4b03      	ldr	r3, [pc, #12]	; (8003294 <_ZN8std_msgs15UInt8MultiArray7getTypeEv+0x18>)
 8003286:	4618      	mov	r0, r3
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	0800f878 	.word	0x0800f878

08003298 <_ZN8std_msgs15UInt8MultiArray6getMD5Ev>:
    const char * getMD5(){ return "82373f1612381bb6ee473b5cd6f5d89c"; };
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <_ZN8std_msgs15UInt8MultiArray6getMD5Ev+0x18>)
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	0800f894 	.word	0x0800f894

080032b4 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe fd58 	bl	8001d74 <_ZN3ros3MsgC1Ev>
 80032c4:	4a09      	ldr	r2, [pc, #36]	; (80032ec <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	60da      	str	r2, [r3, #12]
    {
    }
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	0800fad0 	.word	0x0800fad0

080032f0 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	441a      	add	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	edd3 7a01 	vldr	s15, [r3, #4]
 800330a:	eeb0 0a67 	vmov.f32	s0, s15
 800330e:	4610      	mov	r0, r2
 8003310:	f7fe fc52 	bl	8001bb8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4413      	add	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	441a      	add	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	edd3 7a02 	vldr	s15, [r3, #8]
 8003328:	eeb0 0a67 	vmov.f32	s0, s15
 800332c:	4610      	mov	r0, r2
 800332e:	f7fe fc43 	bl	8001bb8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003332:	4602      	mov	r2, r0
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4413      	add	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	441a      	add	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	edd3 7a03 	vldr	s15, [r3, #12]
 8003346:	eeb0 0a67 	vmov.f32	s0, s15
 800334a:	4610      	mov	r0, r2
 800334c:	f7fe fc34 	bl	8001bb8 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4413      	add	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
      return offset;
 8003358:	68fb      	ldr	r3, [r7, #12]
    }
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	441a      	add	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3304      	adds	r3, #4
 800337a:	4619      	mov	r1, r3
 800337c:	4610      	mov	r0, r2
 800337e:	f7fe fc87 	bl	8001c90 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003382:	4602      	mov	r2, r0
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	441a      	add	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3308      	adds	r3, #8
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f7fe fc7a 	bl	8001c90 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800339c:	4602      	mov	r2, r0
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4413      	add	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	441a      	add	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	330c      	adds	r3, #12
 80033ae:	4619      	mov	r1, r3
 80033b0:	4610      	mov	r0, r2
 80033b2:	f7fe fc6d 	bl	8001c90 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80033b6:	4602      	mov	r2, r0
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]
     return offset;
 80033be:	68fb      	ldr	r3, [r7, #12]
    }
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	0800f8b8 	.word	0x0800f8b8

080033e4 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	0800f8d0 	.word	0x0800f8d0

08003400 <rpm_rightFront_subCb>:
static nbt_t sensors1_3_data_nbt;
static nbt_t sensors4_6_data_nbt;
static nbt_t sensors7_8_data_nbt;

extern "C" void rpm_rightFront_subCb(const std_msgs::Int8& msg)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800340e:	2b05      	cmp	r3, #5
 8003410:	dd08      	ble.n	8003424 <rpm_rightFront_subCb+0x24>
		speedDataRightFrontWheel = msg.data;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8003418:	4b14      	ldr	r3, [pc, #80]	; (800346c <rpm_rightFront_subCb+0x6c>)
 800341a:	701a      	strb	r2, [r3, #0]
		sideDataRightFrontWheel = 0; //CW
 800341c:	4b14      	ldr	r3, [pc, #80]	; (8003470 <rpm_rightFront_subCb+0x70>)
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
	}
	else if (msg.data == 0) {
		speedDataRightFrontWheel = 0;
		sideDataRightFrontWheel = 2;
	}
}
 8003422:	e01d      	b.n	8003460 <rpm_rightFront_subCb+0x60>
	else if (msg.data <= -6) {
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800342a:	f113 0f05 	cmn.w	r3, #5
 800342e:	da0c      	bge.n	800344a <rpm_rightFront_subCb+0x4a>
		speedDataRightFrontWheel = -(msg.data);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	425b      	negs	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	b25a      	sxtb	r2, r3
 800343e:	4b0b      	ldr	r3, [pc, #44]	; (800346c <rpm_rightFront_subCb+0x6c>)
 8003440:	701a      	strb	r2, [r3, #0]
		sideDataRightFrontWheel = 1; //CCW
 8003442:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <rpm_rightFront_subCb+0x70>)
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
}
 8003448:	e00a      	b.n	8003460 <rpm_rightFront_subCb+0x60>
	else if (msg.data == 0) {
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <rpm_rightFront_subCb+0x60>
		speedDataRightFrontWheel = 0;
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <rpm_rightFront_subCb+0x6c>)
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
		sideDataRightFrontWheel = 2;
 800345a:	4b05      	ldr	r3, [pc, #20]	; (8003470 <rpm_rightFront_subCb+0x70>)
 800345c:	2202      	movs	r2, #2
 800345e:	701a      	strb	r2, [r3, #0]
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	2000046d 	.word	0x2000046d
 8003470:	20000471 	.word	0x20000471

08003474 <rpm_leftFront_subCb>:

extern "C" void rpm_leftFront_subCb(const std_msgs::Int8& msg)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003482:	2b05      	cmp	r3, #5
 8003484:	dd08      	ble.n	8003498 <rpm_leftFront_subCb+0x24>
		speedDataLeftFrontWheel = msg.data;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800348c:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <rpm_leftFront_subCb+0x64>)
 800348e:	701a      	strb	r2, [r3, #0]
		sideDataLeftFrontWheel = 1; //CCW
 8003490:	4b12      	ldr	r3, [pc, #72]	; (80034dc <rpm_leftFront_subCb+0x68>)
 8003492:	2201      	movs	r2, #1
 8003494:	701a      	strb	r2, [r3, #0]
	}
	else {
		speedDataLeftFrontWheel = 0;
		sideDataLeftFrontWheel = 2;
	}
}
 8003496:	e018      	b.n	80034ca <rpm_leftFront_subCb+0x56>
	else if (msg.data <= -6) {
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800349e:	f113 0f05 	cmn.w	r3, #5
 80034a2:	da0c      	bge.n	80034be <rpm_leftFront_subCb+0x4a>
		speedDataLeftFrontWheel = -(msg.data);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	425b      	negs	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	b25a      	sxtb	r2, r3
 80034b2:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <rpm_leftFront_subCb+0x64>)
 80034b4:	701a      	strb	r2, [r3, #0]
		sideDataLeftFrontWheel = 0; //CW
 80034b6:	4b09      	ldr	r3, [pc, #36]	; (80034dc <rpm_leftFront_subCb+0x68>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
}
 80034bc:	e005      	b.n	80034ca <rpm_leftFront_subCb+0x56>
		speedDataLeftFrontWheel = 0;
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <rpm_leftFront_subCb+0x64>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	701a      	strb	r2, [r3, #0]
		sideDataLeftFrontWheel = 2;
 80034c4:	4b05      	ldr	r3, [pc, #20]	; (80034dc <rpm_leftFront_subCb+0x68>)
 80034c6:	2202      	movs	r2, #2
 80034c8:	701a      	strb	r2, [r3, #0]
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	2000046e 	.word	0x2000046e
 80034dc:	20000472 	.word	0x20000472

080034e0 <rpm_rightBack_subCb>:

extern "C" void rpm_rightBack_subCb(const std_msgs::Int8& msg)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80034ee:	2b05      	cmp	r3, #5
 80034f0:	dd08      	ble.n	8003504 <rpm_rightBack_subCb+0x24>
		speedDataRightBackWheel = msg.data;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80034f8:	4b12      	ldr	r3, [pc, #72]	; (8003544 <rpm_rightBack_subCb+0x64>)
 80034fa:	701a      	strb	r2, [r3, #0]
		sideDataRightBackWheel = 0; //CW
 80034fc:	4b12      	ldr	r3, [pc, #72]	; (8003548 <rpm_rightBack_subCb+0x68>)
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]
	}
	else {
		speedDataRightBackWheel = 0;
		sideDataRightBackWheel = 2;
	}
}
 8003502:	e018      	b.n	8003536 <rpm_rightBack_subCb+0x56>
	else if (msg.data <= -6) {
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800350a:	f113 0f05 	cmn.w	r3, #5
 800350e:	da0c      	bge.n	800352a <rpm_rightBack_subCb+0x4a>
		speedDataRightBackWheel = -(msg.data);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	425b      	negs	r3, r3
 800351a:	b2db      	uxtb	r3, r3
 800351c:	b25a      	sxtb	r2, r3
 800351e:	4b09      	ldr	r3, [pc, #36]	; (8003544 <rpm_rightBack_subCb+0x64>)
 8003520:	701a      	strb	r2, [r3, #0]
		sideDataRightBackWheel = 1; //CCW
 8003522:	4b09      	ldr	r3, [pc, #36]	; (8003548 <rpm_rightBack_subCb+0x68>)
 8003524:	2201      	movs	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
}
 8003528:	e005      	b.n	8003536 <rpm_rightBack_subCb+0x56>
		speedDataRightBackWheel = 0;
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <rpm_rightBack_subCb+0x64>)
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
		sideDataRightBackWheel = 2;
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <rpm_rightBack_subCb+0x68>)
 8003532:	2202      	movs	r2, #2
 8003534:	701a      	strb	r2, [r3, #0]
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	2000046f 	.word	0x2000046f
 8003548:	20000473 	.word	0x20000473

0800354c <rpm_leftBack_subCb>:

extern "C" void rpm_leftBack_subCb(const std_msgs::Int8& msg)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800355a:	2b05      	cmp	r3, #5
 800355c:	dd08      	ble.n	8003570 <rpm_leftBack_subCb+0x24>
		speedDataLeftBackWheel = msg.data;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8003564:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <rpm_leftBack_subCb+0x64>)
 8003566:	701a      	strb	r2, [r3, #0]
		sideDataLeftBackWheel = 1; //CCW
 8003568:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <rpm_leftBack_subCb+0x68>)
 800356a:	2201      	movs	r2, #1
 800356c:	701a      	strb	r2, [r3, #0]
	}
	else {
		speedDataLeftBackWheel = 0;
		sideDataLeftBackWheel = 2;
	}
}
 800356e:	e018      	b.n	80035a2 <rpm_leftBack_subCb+0x56>
	else if (msg.data <= -6) {
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003576:	f113 0f05 	cmn.w	r3, #5
 800357a:	da0c      	bge.n	8003596 <rpm_leftBack_subCb+0x4a>
		speedDataLeftBackWheel = -(msg.data);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	425b      	negs	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	b25a      	sxtb	r2, r3
 800358a:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <rpm_leftBack_subCb+0x64>)
 800358c:	701a      	strb	r2, [r3, #0]
		sideDataLeftBackWheel = 0; //CW
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <rpm_leftBack_subCb+0x68>)
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
}
 8003594:	e005      	b.n	80035a2 <rpm_leftBack_subCb+0x56>
		speedDataLeftBackWheel = 0;
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <rpm_leftBack_subCb+0x64>)
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
		sideDataLeftBackWheel = 2;
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <rpm_leftBack_subCb+0x68>)
 800359e:	2202      	movs	r2, #2
 80035a0:	701a      	strb	r2, [r3, #0]
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	20000470 	.word	0x20000470
 80035b4:	20000474 	.word	0x20000474

080035b8 <cdc_receive_put>:

extern "C" void cdc_receive_put(uint8_t value)
	{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	71fb      	strb	r3, [r7, #7]
		ringbuffer_putchar(&rb, value);
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	4619      	mov	r1, r3
 80035c6:	4803      	ldr	r0, [pc, #12]	; (80035d4 <cdc_receive_put+0x1c>)
 80035c8:	f001 f980 	bl	80048cc <_Z18ringbuffer_putcharP10ringbufferh>
	}
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	200004e0 	.word	0x200004e0

080035d8 <init_ROS>:
extern "C" void init_ROS(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
	ringbuffer_init(&rb, RxBuffer, RxBufferSize);
 80035dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035e0:	4936      	ldr	r1, [pc, #216]	; (80036bc <init_ROS+0xe4>)
 80035e2:	4837      	ldr	r0, [pc, #220]	; (80036c0 <init_ROS+0xe8>)
 80035e4:	f001 fa18 	bl	8004a18 <_Z15ringbuffer_initP10ringbufferPhs>
	// Initialize ROS
	nh.initNode();
 80035e8:	4836      	ldr	r0, [pc, #216]	; (80036c4 <init_ROS+0xec>)
 80035ea:	f000 fb1f 	bl	8003c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

	nh.subscribe(rpm_rightFront_sub);
 80035ee:	4936      	ldr	r1, [pc, #216]	; (80036c8 <init_ROS+0xf0>)
 80035f0:	4834      	ldr	r0, [pc, #208]	; (80036c4 <init_ROS+0xec>)
 80035f2:	f000 fb38 	bl	8003c66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.subscribe(rpm_leftFront_sub);
 80035f6:	4935      	ldr	r1, [pc, #212]	; (80036cc <init_ROS+0xf4>)
 80035f8:	4832      	ldr	r0, [pc, #200]	; (80036c4 <init_ROS+0xec>)
 80035fa:	f000 fb34 	bl	8003c66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.subscribe(rpm_rightBack_sub);
 80035fe:	4934      	ldr	r1, [pc, #208]	; (80036d0 <init_ROS+0xf8>)
 8003600:	4830      	ldr	r0, [pc, #192]	; (80036c4 <init_ROS+0xec>)
 8003602:	f000 fb30 	bl	8003c66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.subscribe(rpm_leftBack_sub);
 8003606:	4933      	ldr	r1, [pc, #204]	; (80036d4 <init_ROS+0xfc>)
 8003608:	482e      	ldr	r0, [pc, #184]	; (80036c4 <init_ROS+0xec>)
 800360a:	f000 fb2c 	bl	8003c66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>

	nh.advertise(stm);
 800360e:	4932      	ldr	r1, [pc, #200]	; (80036d8 <init_ROS+0x100>)
 8003610:	482c      	ldr	r0, [pc, #176]	; (80036c4 <init_ROS+0xec>)
 8003612:	f000 fb55 	bl	8003cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(gyro);
 8003616:	4931      	ldr	r1, [pc, #196]	; (80036dc <init_ROS+0x104>)
 8003618:	482a      	ldr	r0, [pc, #168]	; (80036c4 <init_ROS+0xec>)
 800361a:	f000 fb51 	bl	8003cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(accel);
 800361e:	4930      	ldr	r1, [pc, #192]	; (80036e0 <init_ROS+0x108>)
 8003620:	4828      	ldr	r0, [pc, #160]	; (80036c4 <init_ROS+0xec>)
 8003622:	f000 fb4d 	bl	8003cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_left_front);
 8003626:	492f      	ldr	r1, [pc, #188]	; (80036e4 <init_ROS+0x10c>)
 8003628:	4826      	ldr	r0, [pc, #152]	; (80036c4 <init_ROS+0xec>)
 800362a:	f000 fb49 	bl	8003cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_right_front);
 800362e:	492e      	ldr	r1, [pc, #184]	; (80036e8 <init_ROS+0x110>)
 8003630:	4824      	ldr	r0, [pc, #144]	; (80036c4 <init_ROS+0xec>)
 8003632:	f000 fb45 	bl	8003cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_left_back);
 8003636:	492d      	ldr	r1, [pc, #180]	; (80036ec <init_ROS+0x114>)
 8003638:	4822      	ldr	r0, [pc, #136]	; (80036c4 <init_ROS+0xec>)
 800363a:	f000 fb41 	bl	8003cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_right_back);
 800363e:	492c      	ldr	r1, [pc, #176]	; (80036f0 <init_ROS+0x118>)
 8003640:	4820      	ldr	r0, [pc, #128]	; (80036c4 <init_ROS+0xec>)
 8003642:	f000 fb3d 	bl	8003cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	//nh.advertise(diagnostic_data);
	nh.advertise(sensa_data);
 8003646:	492b      	ldr	r1, [pc, #172]	; (80036f4 <init_ROS+0x11c>)
 8003648:	481e      	ldr	r0, [pc, #120]	; (80036c4 <init_ROS+0xec>)
 800364a:	f000 fb39 	bl	8003cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(sensb_data);
 800364e:	492a      	ldr	r1, [pc, #168]	; (80036f8 <init_ROS+0x120>)
 8003650:	481c      	ldr	r0, [pc, #112]	; (80036c4 <init_ROS+0xec>)
 8003652:	f000 fb35 	bl	8003cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(sensc_data);
 8003656:	4929      	ldr	r1, [pc, #164]	; (80036fc <init_ROS+0x124>)
 8003658:	481a      	ldr	r0, [pc, #104]	; (80036c4 <init_ROS+0xec>)
 800365a:	f000 fb31 	bl	8003cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	NBT_init(&rpm_left_front_nbt, 5);
 800365e:	2105      	movs	r1, #5
 8003660:	4827      	ldr	r0, [pc, #156]	; (8003700 <init_ROS+0x128>)
 8003662:	f001 f8b6 	bl	80047d2 <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_right_front_nbt, 5);
 8003666:	2105      	movs	r1, #5
 8003668:	4826      	ldr	r0, [pc, #152]	; (8003704 <init_ROS+0x12c>)
 800366a:	f001 f8b2 	bl	80047d2 <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_left_back_nbt, 5);
 800366e:	2105      	movs	r1, #5
 8003670:	4825      	ldr	r0, [pc, #148]	; (8003708 <init_ROS+0x130>)
 8003672:	f001 f8ae 	bl	80047d2 <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_right_back_nbt, 5);
 8003676:	2105      	movs	r1, #5
 8003678:	4824      	ldr	r0, [pc, #144]	; (800370c <init_ROS+0x134>)
 800367a:	f001 f8aa 	bl	80047d2 <_Z8NBT_initP5nbt_tm>

	NBT_init(&diagnostics_data_nbt, 5);
 800367e:	2105      	movs	r1, #5
 8003680:	4823      	ldr	r0, [pc, #140]	; (8003710 <init_ROS+0x138>)
 8003682:	f001 f8a6 	bl	80047d2 <_Z8NBT_initP5nbt_tm>
	NBT_init(&sensors1_3_data_nbt, 5);
 8003686:	2105      	movs	r1, #5
 8003688:	4822      	ldr	r0, [pc, #136]	; (8003714 <init_ROS+0x13c>)
 800368a:	f001 f8a2 	bl	80047d2 <_Z8NBT_initP5nbt_tm>
	NBT_init(&sensors4_6_data_nbt, 5);
 800368e:	2105      	movs	r1, #5
 8003690:	4821      	ldr	r0, [pc, #132]	; (8003718 <init_ROS+0x140>)
 8003692:	f001 f89e 	bl	80047d2 <_Z8NBT_initP5nbt_tm>
	NBT_init(&sensors7_8_data_nbt, 5);
 8003696:	2105      	movs	r1, #5
 8003698:	4820      	ldr	r0, [pc, #128]	; (800371c <init_ROS+0x144>)
 800369a:	f001 f89a 	bl	80047d2 <_Z8NBT_initP5nbt_tm>

	NBT_init(&gyro_nbt, 1);
 800369e:	2101      	movs	r1, #1
 80036a0:	481f      	ldr	r0, [pc, #124]	; (8003720 <init_ROS+0x148>)
 80036a2:	f001 f896 	bl	80047d2 <_Z8NBT_initP5nbt_tm>
	NBT_init(&accel_nbt, 1);
 80036a6:	2101      	movs	r1, #1
 80036a8:	481e      	ldr	r0, [pc, #120]	; (8003724 <init_ROS+0x14c>)
 80036aa:	f001 f892 	bl	80047d2 <_Z8NBT_initP5nbt_tm>

	NBT_init(&ros_nbt, 1);
 80036ae:	2101      	movs	r1, #1
 80036b0:	481d      	ldr	r0, [pc, #116]	; (8003728 <init_ROS+0x150>)
 80036b2:	f001 f88e 	bl	80047d2 <_Z8NBT_initP5nbt_tm>
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20005aa8 	.word	0x20005aa8
 80036c0:	200004e0 	.word	0x200004e0
 80036c4:	200004ec 	.word	0x200004ec
 80036c8:	20000b78 	.word	0x20000b78
 80036cc:	20000b94 	.word	0x20000b94
 80036d0:	20000bb0 	.word	0x20000bb0
 80036d4:	20000bcc 	.word	0x20000bcc
 80036d8:	20000aec 	.word	0x20000aec
 80036dc:	20000b00 	.word	0x20000b00
 80036e0:	20000b14 	.word	0x20000b14
 80036e4:	20000b3c 	.word	0x20000b3c
 80036e8:	20000b28 	.word	0x20000b28
 80036ec:	20000b64 	.word	0x20000b64
 80036f0:	20000b50 	.word	0x20000b50
 80036f4:	20000bfc 	.word	0x20000bfc
 80036f8:	20000c10 	.word	0x20000c10
 80036fc:	20000c24 	.word	0x20000c24
 8003700:	20000c50 	.word	0x20000c50
 8003704:	20000c48 	.word	0x20000c48
 8003708:	20000c60 	.word	0x20000c60
 800370c:	20000c58 	.word	0x20000c58
 8003710:	20000c70 	.word	0x20000c70
 8003714:	20000c78 	.word	0x20000c78
 8003718:	20000c80 	.word	0x20000c80
 800371c:	20000c88 	.word	0x20000c88
 8003720:	20000c38 	.word	0x20000c38
 8003724:	20000c40 	.word	0x20000c40
 8003728:	20000c68 	.word	0x20000c68

0800372c <sensors1_3_data_handler>:

extern "C" void sensors1_3_data_handler(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
	//if (NBT_handler(&sensors1_3_data_nbt)) {
		sen1_3_msg.x = static_cast<float>(sensorData1);
 8003730:	4b10      	ldr	r3, [pc, #64]	; (8003774 <sensors1_3_data_handler+0x48>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	ee07 3a90 	vmov	s15, r3
 8003738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800373c:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <sensors1_3_data_handler+0x4c>)
 800373e:	edc3 7a01 	vstr	s15, [r3, #4]
		sen1_3_msg.y = static_cast<float>(sensorData2);
 8003742:	4b0e      	ldr	r3, [pc, #56]	; (800377c <sensors1_3_data_handler+0x50>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	ee07 3a90 	vmov	s15, r3
 800374a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374e:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <sensors1_3_data_handler+0x4c>)
 8003750:	edc3 7a02 	vstr	s15, [r3, #8]
		sen1_3_msg.z = static_cast<float>(sensorData3);
 8003754:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <sensors1_3_data_handler+0x54>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	ee07 3a90 	vmov	s15, r3
 800375c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <sensors1_3_data_handler+0x4c>)
 8003762:	edc3 7a03 	vstr	s15, [r3, #12]
    	sensa_data.publish(&sen1_3_msg);
 8003766:	4904      	ldr	r1, [pc, #16]	; (8003778 <sensors1_3_data_handler+0x4c>)
 8003768:	4806      	ldr	r0, [pc, #24]	; (8003784 <sensors1_3_data_handler+0x58>)
 800376a:	f7ff f950 	bl	8002a0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	//}
}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000475 	.word	0x20000475
 8003778:	20000abc 	.word	0x20000abc
 800377c:	20000476 	.word	0x20000476
 8003780:	20000477 	.word	0x20000477
 8003784:	20000bfc 	.word	0x20000bfc

08003788 <sensors4_6_data_handler>:

extern "C" void sensors4_6_data_handler(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
	//if (NBT_handler(&sensors4_6_data_nbt)) {
		sen4_6_msg.x = static_cast<float>(sensorData4);
 800378c:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <sensors4_6_data_handler+0x48>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	ee07 3a90 	vmov	s15, r3
 8003794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003798:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <sensors4_6_data_handler+0x4c>)
 800379a:	edc3 7a01 	vstr	s15, [r3, #4]
		sen4_6_msg.y = static_cast<float>(sensorData5);
 800379e:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <sensors4_6_data_handler+0x50>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <sensors4_6_data_handler+0x4c>)
 80037ac:	edc3 7a02 	vstr	s15, [r3, #8]
		sen4_6_msg.z = static_cast<float>(sensorData6);
 80037b0:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <sensors4_6_data_handler+0x54>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	ee07 3a90 	vmov	s15, r3
 80037b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <sensors4_6_data_handler+0x4c>)
 80037be:	edc3 7a03 	vstr	s15, [r3, #12]
    	sensb_data.publish(&sen4_6_msg);
 80037c2:	4904      	ldr	r1, [pc, #16]	; (80037d4 <sensors4_6_data_handler+0x4c>)
 80037c4:	4806      	ldr	r0, [pc, #24]	; (80037e0 <sensors4_6_data_handler+0x58>)
 80037c6:	f7ff f922 	bl	8002a0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	//}
}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000478 	.word	0x20000478
 80037d4:	20000acc 	.word	0x20000acc
 80037d8:	20000479 	.word	0x20000479
 80037dc:	2000047a 	.word	0x2000047a
 80037e0:	20000c10 	.word	0x20000c10

080037e4 <rpm_right_front_handler>:
    	}
	//}
}

extern "C" void rpm_right_front_handler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
	//if (NBT_handler(&rpm_right_front_nbt))
	//{
		if (sideRXDataRightFrontWheel == 2) {
 80037e8:	4b12      	ldr	r3, [pc, #72]	; (8003834 <rpm_right_front_handler+0x50>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d105      	bne.n	80037fc <rpm_right_front_handler+0x18>
		    uint_msg_right_front.data = speedRXDataRightFrontWheel;
 80037f0:	4b11      	ldr	r3, [pc, #68]	; (8003838 <rpm_right_front_handler+0x54>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	b25a      	sxtb	r2, r3
 80037f6:	4b11      	ldr	r3, [pc, #68]	; (800383c <rpm_right_front_handler+0x58>)
 80037f8:	711a      	strb	r2, [r3, #4]
 80037fa:	e00e      	b.n	800381a <rpm_right_front_handler+0x36>
		}
		else if (sideRXDataRightFrontWheel == 1) {
 80037fc:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <rpm_right_front_handler+0x50>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d107      	bne.n	8003814 <rpm_right_front_handler+0x30>
			uint_msg_right_front.data = -speedRXDataRightFrontWheel;
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <rpm_right_front_handler+0x54>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	425b      	negs	r3, r3
 800380a:	b2db      	uxtb	r3, r3
 800380c:	b25a      	sxtb	r2, r3
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <rpm_right_front_handler+0x58>)
 8003810:	711a      	strb	r2, [r3, #4]
 8003812:	e002      	b.n	800381a <rpm_right_front_handler+0x36>
		}
		else {
			uint_msg_right_front.data = 0;
 8003814:	4b09      	ldr	r3, [pc, #36]	; (800383c <rpm_right_front_handler+0x58>)
 8003816:	2200      	movs	r2, #0
 8003818:	711a      	strb	r2, [r3, #4]
		}
    	if (nh.connected()) {
 800381a:	4809      	ldr	r0, [pc, #36]	; (8003840 <rpm_right_front_handler+0x5c>)
 800381c:	f000 fa7e 	bl	8003d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <rpm_right_front_handler+0x4a>
    		rpm_right_front.publish(&uint_msg_right_front);
 8003826:	4905      	ldr	r1, [pc, #20]	; (800383c <rpm_right_front_handler+0x58>)
 8003828:	4806      	ldr	r0, [pc, #24]	; (8003844 <rpm_right_front_handler+0x60>)
 800382a:	f7ff f8f0 	bl	8002a0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
	//}
}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20004ef8 	.word	0x20004ef8
 8003838:	20004f1c 	.word	0x20004f1c
 800383c:	20000a1c 	.word	0x20000a1c
 8003840:	200004ec 	.word	0x200004ec
 8003844:	20000b28 	.word	0x20000b28

08003848 <rpm_left_front_handler>:

extern "C" void rpm_left_front_handler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
	//if (NBT_handler(&rpm_left_front_nbt))
	//{
		if (sideRXDataLeftFrontWheel == 1) {
 800384c:	4b12      	ldr	r3, [pc, #72]	; (8003898 <rpm_left_front_handler+0x50>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d105      	bne.n	8003860 <rpm_left_front_handler+0x18>
		    uint_msg_left_front.data = speedRXDataLeftFrontWheel;
 8003854:	4b11      	ldr	r3, [pc, #68]	; (800389c <rpm_left_front_handler+0x54>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	b25a      	sxtb	r2, r3
 800385a:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <rpm_left_front_handler+0x58>)
 800385c:	711a      	strb	r2, [r3, #4]
 800385e:	e00e      	b.n	800387e <rpm_left_front_handler+0x36>
		}
		else if (sideRXDataLeftFrontWheel == 2) {
 8003860:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <rpm_left_front_handler+0x50>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b02      	cmp	r3, #2
 8003866:	d107      	bne.n	8003878 <rpm_left_front_handler+0x30>
		  	uint_msg_left_front.data = -speedRXDataLeftFrontWheel;
 8003868:	4b0c      	ldr	r3, [pc, #48]	; (800389c <rpm_left_front_handler+0x54>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	425b      	negs	r3, r3
 800386e:	b2db      	uxtb	r3, r3
 8003870:	b25a      	sxtb	r2, r3
 8003872:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <rpm_left_front_handler+0x58>)
 8003874:	711a      	strb	r2, [r3, #4]
 8003876:	e002      	b.n	800387e <rpm_left_front_handler+0x36>
		}
		else {
		  	uint_msg_left_front.data = 0;
 8003878:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <rpm_left_front_handler+0x58>)
 800387a:	2200      	movs	r2, #0
 800387c:	711a      	strb	r2, [r3, #4]
		}
    	if (nh.connected()) {
 800387e:	4809      	ldr	r0, [pc, #36]	; (80038a4 <rpm_left_front_handler+0x5c>)
 8003880:	f000 fa4c 	bl	8003d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <rpm_left_front_handler+0x4a>
    		rpm_left_front.publish(&uint_msg_left_front);
 800388a:	4905      	ldr	r1, [pc, #20]	; (80038a0 <rpm_left_front_handler+0x58>)
 800388c:	4806      	ldr	r0, [pc, #24]	; (80038a8 <rpm_left_front_handler+0x60>)
 800388e:	f7ff f8be 	bl	8002a0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
	//}
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20004f14 	.word	0x20004f14
 800389c:	20004ab0 	.word	0x20004ab0
 80038a0:	20000a24 	.word	0x20000a24
 80038a4:	200004ec 	.word	0x200004ec
 80038a8:	20000b3c 	.word	0x20000b3c

080038ac <rpm_right_back_handler>:

extern "C" void rpm_right_back_handler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
	//if (NBT_handler(&rpm_right_back_nbt))
	//{
		if (sideRXDataRightBackWheel == 2) {
 80038b0:	4b12      	ldr	r3, [pc, #72]	; (80038fc <rpm_right_back_handler+0x50>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d105      	bne.n	80038c4 <rpm_right_back_handler+0x18>
		    uint_msg_right_back.data = speedRXDataRightBackWheel;
 80038b8:	4b11      	ldr	r3, [pc, #68]	; (8003900 <rpm_right_back_handler+0x54>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	b25a      	sxtb	r2, r3
 80038be:	4b11      	ldr	r3, [pc, #68]	; (8003904 <rpm_right_back_handler+0x58>)
 80038c0:	711a      	strb	r2, [r3, #4]
 80038c2:	e00e      	b.n	80038e2 <rpm_right_back_handler+0x36>
		}
		else if (sideRXDataRightBackWheel == 1) {
 80038c4:	4b0d      	ldr	r3, [pc, #52]	; (80038fc <rpm_right_back_handler+0x50>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d107      	bne.n	80038dc <rpm_right_back_handler+0x30>
			uint_msg_right_back.data = -speedRXDataRightBackWheel;
 80038cc:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <rpm_right_back_handler+0x54>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	425b      	negs	r3, r3
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	b25a      	sxtb	r2, r3
 80038d6:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <rpm_right_back_handler+0x58>)
 80038d8:	711a      	strb	r2, [r3, #4]
 80038da:	e002      	b.n	80038e2 <rpm_right_back_handler+0x36>
		}
		else {
			uint_msg_right_back.data = 0;
 80038dc:	4b09      	ldr	r3, [pc, #36]	; (8003904 <rpm_right_back_handler+0x58>)
 80038de:	2200      	movs	r2, #0
 80038e0:	711a      	strb	r2, [r3, #4]
		}
    	if (nh.connected()) {
 80038e2:	4809      	ldr	r0, [pc, #36]	; (8003908 <rpm_right_back_handler+0x5c>)
 80038e4:	f000 fa1a 	bl	8003d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <rpm_right_back_handler+0x4a>
    		rpm_right_back.publish(&uint_msg_right_back);
 80038ee:	4905      	ldr	r1, [pc, #20]	; (8003904 <rpm_right_back_handler+0x58>)
 80038f0:	4806      	ldr	r0, [pc, #24]	; (800390c <rpm_right_back_handler+0x60>)
 80038f2:	f7ff f88c 	bl	8002a0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
	//}
}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20004a20 	.word	0x20004a20
 8003900:	20004ad0 	.word	0x20004ad0
 8003904:	20000a2c 	.word	0x20000a2c
 8003908:	200004ec 	.word	0x200004ec
 800390c:	20000b50 	.word	0x20000b50

08003910 <rpm_left_back_handler>:

extern "C" void rpm_left_back_handler(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
	//if (NBT_handler(&rpm_left_back_nbt))
	//{
		if (sideRXDataLeftBackWheel == 1) {
 8003914:	4b12      	ldr	r3, [pc, #72]	; (8003960 <rpm_left_back_handler+0x50>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d105      	bne.n	8003928 <rpm_left_back_handler+0x18>
		  	uint_msg_left_back.data = speedRXDataLeftBackWheel;
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <rpm_left_back_handler+0x54>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	b25a      	sxtb	r2, r3
 8003922:	4b11      	ldr	r3, [pc, #68]	; (8003968 <rpm_left_back_handler+0x58>)
 8003924:	711a      	strb	r2, [r3, #4]
 8003926:	e00e      	b.n	8003946 <rpm_left_back_handler+0x36>
		}
		else if (sideRXDataLeftBackWheel == 2) {
 8003928:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <rpm_left_back_handler+0x50>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d107      	bne.n	8003940 <rpm_left_back_handler+0x30>
			uint_msg_left_back.data = -speedRXDataLeftBackWheel;
 8003930:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <rpm_left_back_handler+0x54>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	425b      	negs	r3, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	b25a      	sxtb	r2, r3
 800393a:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <rpm_left_back_handler+0x58>)
 800393c:	711a      	strb	r2, [r3, #4]
 800393e:	e002      	b.n	8003946 <rpm_left_back_handler+0x36>
		}
		else {
			uint_msg_left_back.data = 0;
 8003940:	4b09      	ldr	r3, [pc, #36]	; (8003968 <rpm_left_back_handler+0x58>)
 8003942:	2200      	movs	r2, #0
 8003944:	711a      	strb	r2, [r3, #4]
		}
		if (nh.connected()) {
 8003946:	4809      	ldr	r0, [pc, #36]	; (800396c <rpm_left_back_handler+0x5c>)
 8003948:	f000 f9e8 	bl	8003d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <rpm_left_back_handler+0x4a>
			rpm_left_back.publish(&uint_msg_left_back);
 8003952:	4905      	ldr	r1, [pc, #20]	; (8003968 <rpm_left_back_handler+0x58>)
 8003954:	4806      	ldr	r0, [pc, #24]	; (8003970 <rpm_left_back_handler+0x60>)
 8003956:	f7ff f85a 	bl	8002a0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		}
	//}
}
 800395a:	bf00      	nop
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20004ac8 	.word	0x20004ac8
 8003964:	20004ab8 	.word	0x20004ab8
 8003968:	20000a34 	.word	0x20000a34
 800396c:	200004ec 	.word	0x200004ec
 8003970:	20000b64 	.word	0x20000b64

08003974 <gyro_handler>:

extern "C" void gyro_handler(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
    gyro_msg.x = gyroX;
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <gyro_handler+0x34>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a0b      	ldr	r2, [pc, #44]	; (80039ac <gyro_handler+0x38>)
 800397e:	6053      	str	r3, [r2, #4]
    gyro_msg.y = gyroY;
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <gyro_handler+0x3c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a09      	ldr	r2, [pc, #36]	; (80039ac <gyro_handler+0x38>)
 8003986:	6093      	str	r3, [r2, #8]
    gyro_msg.z = gyroZ;
 8003988:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <gyro_handler+0x40>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a07      	ldr	r2, [pc, #28]	; (80039ac <gyro_handler+0x38>)
 800398e:	60d3      	str	r3, [r2, #12]
    if (nh.connected()) {
 8003990:	4809      	ldr	r0, [pc, #36]	; (80039b8 <gyro_handler+0x44>)
 8003992:	f000 f9c3 	bl	8003d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <gyro_handler+0x30>
    	//if (NBT_handler(&gyro_nbt))
    	{
    		gyro.publish(&gyro_msg);
 800399c:	4903      	ldr	r1, [pc, #12]	; (80039ac <gyro_handler+0x38>)
 800399e:	4807      	ldr	r0, [pc, #28]	; (80039bc <gyro_handler+0x48>)
 80039a0:	f7ff f835 	bl	8002a0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
    }
}
 80039a4:	bf00      	nop
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20004aa0 	.word	0x20004aa0
 80039ac:	20000a9c 	.word	0x20000a9c
 80039b0:	20004f48 	.word	0x20004f48
 80039b4:	20004abc 	.word	0x20004abc
 80039b8:	200004ec 	.word	0x200004ec
 80039bc:	20000b00 	.word	0x20000b00

080039c0 <accel_handler>:

extern "C" void accel_handler(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
    accel_msg.x = accelX;
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <accel_handler+0x34>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a0b      	ldr	r2, [pc, #44]	; (80039f8 <accel_handler+0x38>)
 80039ca:	6053      	str	r3, [r2, #4]
    accel_msg.y = accelY;
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <accel_handler+0x3c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a09      	ldr	r2, [pc, #36]	; (80039f8 <accel_handler+0x38>)
 80039d2:	6093      	str	r3, [r2, #8]
    accel_msg.z = accelZ;
 80039d4:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <accel_handler+0x40>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a07      	ldr	r2, [pc, #28]	; (80039f8 <accel_handler+0x38>)
 80039da:	60d3      	str	r3, [r2, #12]
    if (nh.connected()) {
 80039dc:	4809      	ldr	r0, [pc, #36]	; (8003a04 <accel_handler+0x44>)
 80039de:	f000 f99d 	bl	8003d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <accel_handler+0x30>
    	//if (NBT_handler(&accel_nbt))
    	{
    		accel.publish(&accel_msg);
 80039e8:	4903      	ldr	r1, [pc, #12]	; (80039f8 <accel_handler+0x38>)
 80039ea:	4807      	ldr	r0, [pc, #28]	; (8003a08 <accel_handler+0x48>)
 80039ec:	f7ff f80f 	bl	8002a0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
    }
}
 80039f0:	bf00      	nop
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	20004a1c 	.word	0x20004a1c
 80039f8:	20000aac 	.word	0x20000aac
 80039fc:	20004a14 	.word	0x20004a14
 8003a00:	20004f00 	.word	0x20004f00
 8003a04:	200004ec 	.word	0x200004ec
 8003a08:	20000b14 	.word	0x20000b14

08003a0c <spinOnce>:

extern "C" void spinOnce(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
	//if (NBT_handler(&ros_nbt))	{
		nh.spinOnce();
 8003a10:	4802      	ldr	r0, [pc, #8]	; (8003a1c <spinOnce+0x10>)
 8003a12:	f000 f990 	bl	8003d36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	//}
}
 8003a16:	bf00      	nop
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	200004ec 	.word	0x200004ec

08003a20 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d80d      	bhi.n	8003a50 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	fa22 f103 	lsr.w	r1, r2, r3
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	b2ca      	uxtb	r2, r1
 8003a46:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	e7ee      	b.n	8003a2e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d811      	bhi.n	8003a9a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6839      	ldr	r1, [r7, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	440a      	add	r2, r1
 8003a80:	7812      	ldrb	r2, [r2, #0]
 8003a82:	4611      	mov	r1, r2
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	00d2      	lsls	r2, r2, #3
 8003a88:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3301      	adds	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	e7ea      	b.n	8003a70 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	0800fb60 	.word	0x0800fb60

08003ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff ffe8 	bl	8003aa8 <_ZN3ros15NodeHandleBase_C1Ev>
 8003ad8:	4a39      	ldr	r2, [pc, #228]	; (8003bc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xf8>)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fe ffb3 	bl	8002a4e <_ZN13STM32HardwareC1Ev>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe fcb0 	bl	800245c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2b18      	cmp	r3, #24
 8003b04:	d80a      	bhi.n	8003b1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003b0e:	2100      	movs	r1, #0
 8003b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	3301      	adds	r3, #1
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	e7f1      	b.n	8003b00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	2b18      	cmp	r3, #24
 8003b24:	d80b      	bhi.n	8003b3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	2200      	movs	r2, #0
 8003b34:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	e7f0      	b.n	8003b20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b48:	d209      	bcs.n	8003b5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x96>
      message_in[i] = 0;
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4413      	add	r3, r2
 8003b50:	3318      	adds	r3, #24
 8003b52:	2200      	movs	r2, #0
 8003b54:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	e7f1      	b.n	8003b42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b68:	d20a      	bcs.n	8003b80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xb8>
      message_out[i] = 0;
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	e7f0      	b.n	8003b62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    req_param_resp.floats_length = 0;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    req_param_resp.floats = NULL;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    req_param_resp.ints_length = 0;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514

    spin_timeout_ = 0;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	615a      	str	r2, [r3, #20]
  }
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	0800fabc 	.word	0x0800fabc

08003bc4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	4a04      	ldr	r2, [pc, #16]	; (8003be0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	0800fb48 	.word	0x0800fb48

08003be4 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ffe5 	bl	8003bc4 <_ZN3ros11Subscriber_C1Ev>
 8003bfa:	4a0b      	ldr	r2, [pc, #44]	; (8003c28 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	330c      	adds	r3, #12
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fe ff6d 	bl	8002ae4 <_ZN8std_msgs4Int8C1Ev>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	615a      	str	r2, [r3, #20]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	609a      	str	r2, [r3, #8]
  };
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	0800faa4 	.word	0x0800faa4

08003c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3304      	adds	r3, #4
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe ff13 	bl	8002a64 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003c66:	b480      	push	{r7}
 8003c68:	b085      	sub	sp, #20
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b18      	cmp	r3, #24
 8003c78:	dc1b      	bgt.n	8003cb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10e      	bne.n	8003caa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	605a      	str	r2, [r3, #4]
        return true;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e004      	b.n	8003cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3301      	adds	r3, #1
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	e7e0      	b.n	8003c74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0xe>
      }
    }
    return false;
 8003cb2:	2300      	movs	r3, #0
  }
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b18      	cmp	r3, #24
 8003cd2:	dc1c      	bgt.n	8003d0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4e>
      if (publishers[i] == 0) // empty slot
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d110      	bne.n	8003d06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003cec:	6839      	ldr	r1, [r7, #0]
 8003cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	60da      	str	r2, [r3, #12]
        return true;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e004      	b.n	8003d10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	e7df      	b.n	8003cce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8003d0e:	2300      	movs	r3, #0
  }
 8003d10:	4618      	mov	r0, r3
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
    return configured_;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b084      	sub	sp, #16
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3304      	adds	r3, #4
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe fec2 	bl	8002acc <_ZN13STM32Hardware4timeEv>
 8003d48:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d903      	bls.n	8003d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d903      	bls.n	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d013      	beq.n	8003db2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe fe9c 	bl	8002acc <_ZN13STM32Hardware4timeEv>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad2      	subs	r2, r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	bf8c      	ite	hi
 8003da2:	2301      	movhi	r3, #1
 8003da4:	2300      	movls	r3, #0
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8003dac:	f06f 0301 	mvn.w	r3, #1
 8003db0:	e193      	b.n	80040da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      int data = hardware_.read();
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3304      	adds	r3, #4
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fe fe5e 	bl	8002a78 <_ZN13STM32Hardware4readEv>
 8003dbc:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f2c0 8173 	blt.w	80040ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x376>
      checksum_ += data;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	441a      	add	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003ddc:	2b07      	cmp	r3, #7
 8003dde:	d11d      	bne.n	8003e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003de6:	1c59      	adds	r1, r3, #1
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	b2d1      	uxtb	r1, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	4413      	add	r3, r2
 8003df6:	460a      	mov	r2, r1
 8003df8:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8003e00:	1e5a      	subs	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1b7      	bne.n	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2208      	movs	r2, #8
 8003e16:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003e1a:	e7b2      	b.n	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d128      	bne.n	8003e78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2bff      	cmp	r3, #255	; 0xff
 8003e2a:	d10d      	bne.n	8003e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f103 0214 	add.w	r2, r3, #20
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8003e46:	e79c      	b.n	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fe fe3d 	bl	8002acc <_ZN13STM32Hardware4timeEv>
 8003e52:	4602      	mov	r2, r0
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	bf8c      	ite	hi
 8003e60:	2301      	movhi	r3, #1
 8003e62:	2300      	movls	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d08b      	beq.n	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 8003e72:	f06f 0301 	mvn.w	r3, #1
 8003e76:	e130      	b.n	80040da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d11b      	bne.n	8003eba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2bfe      	cmp	r3, #254	; 0xfe
 8003e86:	d107      	bne.n	8003e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003e96:	e774      	b.n	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003ea6:	f083 0301 	eor.w	r3, r3, #1
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f43f af68 	beq.w	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f915 	bl	80040e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003eb8:	e763      	b.n	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d113      	bne.n	8003eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8003eea:	e74a      	b.n	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d110      	bne.n	8003f18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	441a      	add	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003f16:	e734      	b.n	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d116      	bne.n	8003f50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003f28:	425a      	negs	r2, r3
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	bf58      	it	pl
 8003f30:	4253      	negpl	r3, r2
 8003f32:	2bff      	cmp	r3, #255	; 0xff
 8003f34:	d107      	bne.n	8003f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003f44:	e71d      	b.n	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003f4e:	e718      	b.n	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003f56:	2b05      	cmp	r3, #5
 8003f58:	d10f      	bne.n	8003f7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8003f78:	e703      	b.n	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003f80:	2b06      	cmp	r3, #6
 8003f82:	d117      	bne.n	8003fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	021b      	lsls	r3, r3, #8
 8003f8e:	441a      	add	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2207      	movs	r2, #7
 8003f9a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f47f aeec 	bne.w	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2208      	movs	r2, #8
 8003fae:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003fb2:	e6e6      	b.n	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	f47f aee1 	bne.w	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003fce:	425a      	negs	r2, r3
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	bf58      	it	pl
 8003fd6:	4253      	negpl	r3, r2
 8003fd8:	2bff      	cmp	r3, #255	; 0xff
 8003fda:	f47f aed2 	bne.w	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d110      	bne.n	800400a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f87a 	bl	80040e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f894 	bl	800411c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 8004004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004008:	e067      	b.n	80040da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
          else if (topic_ == TopicInfo::ID_TIME)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004010:	2b0a      	cmp	r3, #10
 8004012:	d106      	bne.n	8004022 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ec>
            syncTime(message_in);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3318      	adds	r3, #24
 8004018:	4619      	mov	r1, r3
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f964 	bl	80042e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004020:	e6af      	b.n	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004028:	2b06      	cmp	r3, #6
 800402a:	d10d      	bne.n	8004048 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
            req_param_resp.deserialize(message_in);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3318      	adds	r3, #24
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f7fe fb44 	bl	80026c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8004046:	e69c      	b.n	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800404e:	2b0b      	cmp	r3, #11
 8004050:	d104      	bne.n	800405c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x326>
            configured_ = false;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 800405a:	e692      	b.n	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004062:	3b64      	subs	r3, #100	; 0x64
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	f43f ae86 	beq.w	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800407c:	3b64      	subs	r3, #100	; 0x64
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	6858      	ldr	r0, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004090:	3b64      	subs	r3, #100	; 0x64
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	3218      	adds	r2, #24
 80040a6:	4611      	mov	r1, r2
 80040a8:	4798      	blx	r3
    while (true)
 80040aa:	e66a      	b.n	8003d82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80040ac:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00f      	beq.n	80040d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d906      	bls.n	80040d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
      requestSyncTime();
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f809 	bl	80040e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 80040d8:	2300      	movs	r3, #0
  }
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b086      	sub	sp, #24
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80040ea:	f107 030c 	add.w	r3, r7, #12
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fd fe50 	bl	8001d94 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f107 020c 	add.w	r2, r7, #12
 80040fe:	210a      	movs	r1, #10
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	4798      	blx	r3
    rt_time = hardware_.time();
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3304      	adds	r3, #4
 8004108:	4618      	mov	r0, r3
 800410a:	f7fe fcdf 	bl	8002acc <_ZN13STM32Hardware4timeEv>
 800410e:	4602      	mov	r2, r0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	609a      	str	r2, [r3, #8]
  }
 8004114:	bf00      	nop
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800411c:	b590      	push	{r4, r7, lr}
 800411e:	b08b      	sub	sp, #44	; 0x2c
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004124:	f107 030c 	add.w	r3, r7, #12
 8004128:	4618      	mov	r0, r3
 800412a:	f7fd ff23 	bl	8001f74 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800412e:	2300      	movs	r3, #0
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	2b18      	cmp	r3, #24
 8004136:	dc5e      	bgt.n	80041f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
    {
      if (publishers[i] != 0) // non-empty slot
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413c:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d052      	beq.n	80041ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd2>
      {
        ti.topic_id = publishers[i]->id_;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414c:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	b29b      	uxth	r3, r3
 8004158:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004176:	6859      	ldr	r1, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417c:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3308      	adds	r3, #8
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4608      	mov	r0, r1
 800418e:	4798      	blx	r3
 8004190:	4603      	mov	r3, r0
 8004192:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004198:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800419c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a0:	6859      	ldr	r1, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a6:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80041aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	330c      	adds	r3, #12
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4608      	mov	r0, r1
 80041b8:	4798      	blx	r3
 80041ba:	4603      	mov	r3, r0
 80041bc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80041be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041c2:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681c      	ldr	r4, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ce:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80041d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fe fc2d 	bl	8002a36 <_ZN3ros9Publisher15getEndpointTypeEv>
 80041dc:	4601      	mov	r1, r0
 80041de:	f107 030c 	add.w	r3, r7, #12
 80041e2:	461a      	mov	r2, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	47a0      	blx	r4
        HAL_Delay(10);
 80041e8:	200a      	movs	r0, #10
 80041ea:	f000 fc8f 	bl	8004b0c <HAL_Delay>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	3301      	adds	r3, #1
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
 80041f4:	e79d      	b.n	8004132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80041f6:	2300      	movs	r3, #0
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	2b18      	cmp	r3, #24
 80041fe:	dc6b      	bgt.n	80042d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1bc>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d05e      	beq.n	80042d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b4>
      {
        ti.topic_id = subscribers[i]->id_;
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	b29b      	uxth	r3, r3
 8004224:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	6859      	ldr	r1, [r3, #4]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3308      	adds	r3, #8
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4608      	mov	r0, r1
 800425c:	4798      	blx	r3
 800425e:	4603      	mov	r3, r0
 8004260:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	6859      	ldr	r1, [r3, #4]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4608      	mov	r0, r1
 8004286:	4798      	blx	r3
 8004288:	4603      	mov	r3, r0
 800428a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800428c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004290:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681c      	ldr	r4, [r3, #0]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	6859      	ldr	r1, [r3, #4]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3304      	adds	r3, #4
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4608      	mov	r0, r1
 80042bc:	4798      	blx	r3
 80042be:	4601      	mov	r1, r0
 80042c0:	f107 030c 	add.w	r3, r7, #12
 80042c4:	461a      	mov	r2, r3
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	47a0      	blx	r4
        HAL_Delay(10);
 80042ca:	200a      	movs	r0, #10
 80042cc:	f000 fc1e 	bl	8004b0c <HAL_Delay>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	3301      	adds	r3, #1
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
 80042d6:	e790      	b.n	80041fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
      }
    }
    configured_ = true;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 80042e0:	bf00      	nop
 80042e2:	372c      	adds	r7, #44	; 0x2c
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd90      	pop	{r4, r7, pc}

080042e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80042f2:	f107 0308 	add.w	r3, r7, #8
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fd fd4c 	bl	8001d94 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3304      	adds	r3, #4
 8004300:	4618      	mov	r0, r3
 8004302:	f7fe fbe3 	bl	8002acc <_ZN13STM32Hardware4timeEv>
 8004306:	4602      	mov	r2, r0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004310:	f107 0308 	add.w	r3, r7, #8
 8004314:	6839      	ldr	r1, [r7, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7fd fdac 	bl	8001e74 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	4914      	ldr	r1, [pc, #80]	; (8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8004322:	fba1 1303 	umull	r1, r3, r1, r3
 8004326:	099b      	lsrs	r3, r3, #6
 8004328:	4413      	add	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800432c:	6939      	ldr	r1, [r7, #16]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4b10      	ldr	r3, [pc, #64]	; (8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8004332:	fba3 0302 	umull	r0, r3, r3, r2
 8004336:	099b      	lsrs	r3, r3, #6
 8004338:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800433c:	fb00 f303 	mul.w	r3, r0, r3
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	4a0d      	ldr	r2, [pc, #52]	; (8004378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004344:	fb02 f303 	mul.w	r3, r2, r3
 8004348:	440b      	add	r3, r1
 800434a:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800434c:	f107 0308 	add.w	r3, r7, #8
 8004350:	3304      	adds	r3, #4
 8004352:	4619      	mov	r1, r3
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f8a3 	bl	80044a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3304      	adds	r3, #4
 800435e:	4618      	mov	r0, r3
 8004360:	f7fe fbb4 	bl	8002acc <_ZN13STM32Hardware4timeEv>
 8004364:	4602      	mov	r2, r0
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 800436c:	bf00      	nop
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	10624dd3 	.word	0x10624dd3
 8004378:	000f4240 	.word	0x000f4240

0800437c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b63      	cmp	r3, #99	; 0x63
 800438c:	dd09      	ble.n	80043a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004394:	f083 0301 	eor.w	r3, r3, #1
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800439e:	2300      	movs	r3, #0
 80043a0:	e077      	b.n	8004492 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	f502 7206 	add.w	r2, r2, #536	; 0x218
 80043ae:	3207      	adds	r2, #7
 80043b0:	4611      	mov	r1, r2
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	4798      	blx	r3
 80043b6:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	22ff      	movs	r2, #255	; 0xff
 80043bc:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	22fe      	movs	r2, #254	; 0xfe
 80043c4:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	121b      	asrs	r3, r3, #8
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 80043ec:	4413      	add	r3, r2
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	b21b      	sxth	r3, r3
 8004408:	121b      	asrs	r3, r3, #8
 800440a:	b2da      	uxtb	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004416:	2305      	movs	r3, #5
 8004418:	61bb      	str	r3, [r7, #24]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	3307      	adds	r3, #7
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	429a      	cmp	r2, r3
 8004422:	da0d      	bge.n	8004440 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	4413      	add	r3, r2
 800442a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	4413      	add	r3, r2
 8004436:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	3301      	adds	r3, #1
 800443c:	61bb      	str	r3, [r7, #24]
 800443e:	e7ec      	b.n	800441a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	3307      	adds	r3, #7
 8004444:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	425a      	negs	r2, r3
 800444a:	b2db      	uxtb	r3, r3
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	bf58      	it	pl
 8004450:	4253      	negpl	r3, r2
 8004452:	b2da      	uxtb	r2, r3
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	1c59      	adds	r1, r3, #1
 8004458:	6179      	str	r1, [r7, #20]
 800445a:	43d2      	mvns	r2, r2
 800445c:	b2d1      	uxtb	r1, r2
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4413      	add	r3, r2
 8004462:	460a      	mov	r2, r1
 8004464:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800446e:	dc0a      	bgt.n	8004486 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	1d18      	adds	r0, r3, #4
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	4619      	mov	r1, r3
 800447e:	f7fe fb15 	bl	8002aac <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	e005      	b.n	8004492 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004486:	4905      	ldr	r1, [pc, #20]	; (800449c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f847 	bl	800451c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800448e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004492:	4618      	mov	r0, r3
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	0800f8f4 	.word	0x0800f8f4

080044a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3304      	adds	r3, #4
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fe fb0c 	bl	8002acc <_ZN13STM32Hardware4timeEv>
 80044b4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	4914      	ldr	r1, [pc, #80]	; (8004510 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 80044be:	fba1 1303 	umull	r1, r3, r1, r3
 80044c2:	099b      	lsrs	r3, r3, #6
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	1e5a      	subs	r2, r3, #1
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	6859      	ldr	r1, [r3, #4]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 80044d4:	fba3 0302 	umull	r0, r3, r3, r2
 80044d8:	099b      	lsrs	r3, r3, #6
 80044da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044de:	fb00 f303 	mul.w	r3, r0, r3
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	4a0b      	ldr	r2, [pc, #44]	; (8004514 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80044e6:	fb02 f303 	mul.w	r3, r2, r3
 80044ea:	1aca      	subs	r2, r1, r3
 80044ec:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80044ee:	4413      	add	r3, r2
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f103 020c 	add.w	r2, r3, #12
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3310      	adds	r3, #16
 80044fe:	4619      	mov	r1, r3
 8004500:	4610      	mov	r0, r2
 8004502:	f7fd fb2d 	bl	8001b60 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004506:	bf00      	nop
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	10624dd3 	.word	0x10624dd3
 8004514:	000f4240 	.word	0x000f4240
 8004518:	3b9aca00 	.word	0x3b9aca00

0800451c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	2103      	movs	r1, #3
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f804 	bl	8004538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004530:	bf00      	nop
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	460b      	mov	r3, r1
 8004542:	607a      	str	r2, [r7, #4]
 8004544:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004546:	f107 0314 	add.w	r3, r7, #20
 800454a:	4618      	mov	r0, r3
 800454c:	f7fd fed6 	bl	80022fc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004550:	7afb      	ldrb	r3, [r7, #11]
 8004552:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f107 0214 	add.w	r2, r7, #20
 8004562:	2107      	movs	r1, #7
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	4798      	blx	r3
  }
 8004568:	bf00      	nop
 800456a:	3720      	adds	r7, #32
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <_Z41__static_initialization_and_destruction_0ii>:
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b01      	cmp	r3, #1
 800457e:	f040 8083 	bne.w	8004688 <_Z41__static_initialization_and_destruction_0ii+0x118>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004588:	4293      	cmp	r3, r2
 800458a:	d17d      	bne.n	8004688 <_Z41__static_initialization_and_destruction_0ii+0x118>
ros::NodeHandle nh;
 800458c:	4840      	ldr	r0, [pc, #256]	; (8004690 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 800458e:	f7ff fa9b 	bl	8003ac8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int8 uint_msg_right_front;
 8004592:	4840      	ldr	r0, [pc, #256]	; (8004694 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8004594:	f7fe faa6 	bl	8002ae4 <_ZN8std_msgs4Int8C1Ev>
std_msgs::Int8 uint_msg_left_front;
 8004598:	483f      	ldr	r0, [pc, #252]	; (8004698 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 800459a:	f7fe faa3 	bl	8002ae4 <_ZN8std_msgs4Int8C1Ev>
std_msgs::Int8 uint_msg_right_back;
 800459e:	483f      	ldr	r0, [pc, #252]	; (800469c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80045a0:	f7fe faa0 	bl	8002ae4 <_ZN8std_msgs4Int8C1Ev>
std_msgs::Int8 uint_msg_left_back;
 80045a4:	483e      	ldr	r0, [pc, #248]	; (80046a0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80045a6:	f7fe fa9d 	bl	8002ae4 <_ZN8std_msgs4Int8C1Ev>
std_msgs::UInt8MultiArray diagnostics_data_array;
 80045aa:	483e      	ldr	r0, [pc, #248]	; (80046a4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80045ac:	f7fe fd8a 	bl	80030c4 <_ZN8std_msgs15UInt8MultiArrayC1Ev>
std_msgs::UInt8MultiArray sensors_data_array;
 80045b0:	483d      	ldr	r0, [pc, #244]	; (80046a8 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80045b2:	f7fe fd87 	bl	80030c4 <_ZN8std_msgs15UInt8MultiArrayC1Ev>
geometry_msgs::Vector3 gyro_msg;
 80045b6:	483d      	ldr	r0, [pc, #244]	; (80046ac <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80045b8:	f7fe fe7c 	bl	80032b4 <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 accel_msg;
 80045bc:	483c      	ldr	r0, [pc, #240]	; (80046b0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80045be:	f7fe fe79 	bl	80032b4 <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 sen1_3_msg;
 80045c2:	483c      	ldr	r0, [pc, #240]	; (80046b4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80045c4:	f7fe fe76 	bl	80032b4 <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 sen4_6_msg;
 80045c8:	483b      	ldr	r0, [pc, #236]	; (80046b8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80045ca:	f7fe fe73 	bl	80032b4 <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 sen7_8_msg;
 80045ce:	483b      	ldr	r0, [pc, #236]	; (80046bc <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80045d0:	f7fe fe70 	bl	80032b4 <_ZN13geometry_msgs7Vector3C1Ev>
ros::Publisher stm("stm", &gyro_msg);
 80045d4:	2300      	movs	r3, #0
 80045d6:	4a35      	ldr	r2, [pc, #212]	; (80046ac <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80045d8:	4939      	ldr	r1, [pc, #228]	; (80046c0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 80045da:	483a      	ldr	r0, [pc, #232]	; (80046c4 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 80045dc:	f7fe fa00 	bl	80029e0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher gyro("gyro", &gyro_msg);
 80045e0:	2300      	movs	r3, #0
 80045e2:	4a32      	ldr	r2, [pc, #200]	; (80046ac <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80045e4:	4938      	ldr	r1, [pc, #224]	; (80046c8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80045e6:	4839      	ldr	r0, [pc, #228]	; (80046cc <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80045e8:	f7fe f9fa 	bl	80029e0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher accel("accel", &accel_msg);
 80045ec:	2300      	movs	r3, #0
 80045ee:	4a30      	ldr	r2, [pc, #192]	; (80046b0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80045f0:	4937      	ldr	r1, [pc, #220]	; (80046d0 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80045f2:	4838      	ldr	r0, [pc, #224]	; (80046d4 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 80045f4:	f7fe f9f4 	bl	80029e0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_right_front("rpm_right_front", &uint_msg_right_front);
 80045f8:	2300      	movs	r3, #0
 80045fa:	4a26      	ldr	r2, [pc, #152]	; (8004694 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80045fc:	4936      	ldr	r1, [pc, #216]	; (80046d8 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80045fe:	4837      	ldr	r0, [pc, #220]	; (80046dc <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004600:	f7fe f9ee 	bl	80029e0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_left_front("rpm_left_front", &uint_msg_left_front);
 8004604:	2300      	movs	r3, #0
 8004606:	4a24      	ldr	r2, [pc, #144]	; (8004698 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8004608:	4935      	ldr	r1, [pc, #212]	; (80046e0 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 800460a:	4836      	ldr	r0, [pc, #216]	; (80046e4 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 800460c:	f7fe f9e8 	bl	80029e0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_right_back("rpm_right_back", &uint_msg_right_back);
 8004610:	2300      	movs	r3, #0
 8004612:	4a22      	ldr	r2, [pc, #136]	; (800469c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8004614:	4934      	ldr	r1, [pc, #208]	; (80046e8 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004616:	4835      	ldr	r0, [pc, #212]	; (80046ec <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004618:	f7fe f9e2 	bl	80029e0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_left_back("rpm_left_back", &uint_msg_left_back);
 800461c:	2300      	movs	r3, #0
 800461e:	4a20      	ldr	r2, [pc, #128]	; (80046a0 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8004620:	4933      	ldr	r1, [pc, #204]	; (80046f0 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004622:	4834      	ldr	r0, [pc, #208]	; (80046f4 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004624:	f7fe f9dc 	bl	80029e0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int8> rpm_rightFront_sub("rpm_rightFront_sub", rpm_rightFront_subCb);
 8004628:	2301      	movs	r3, #1
 800462a:	4a33      	ldr	r2, [pc, #204]	; (80046f8 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 800462c:	4933      	ldr	r1, [pc, #204]	; (80046fc <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 800462e:	4834      	ldr	r0, [pc, #208]	; (8004700 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8004630:	f7ff fad8 	bl	8003be4 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> rpm_leftFront_sub("rpm_leftFront_sub", rpm_leftFront_subCb);
 8004634:	2301      	movs	r3, #1
 8004636:	4a33      	ldr	r2, [pc, #204]	; (8004704 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004638:	4933      	ldr	r1, [pc, #204]	; (8004708 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 800463a:	4834      	ldr	r0, [pc, #208]	; (800470c <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 800463c:	f7ff fad2 	bl	8003be4 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> rpm_rightBack_sub("rpm_rightBack_sub", rpm_rightBack_subCb);
 8004640:	2301      	movs	r3, #1
 8004642:	4a33      	ldr	r2, [pc, #204]	; (8004710 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8004644:	4933      	ldr	r1, [pc, #204]	; (8004714 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8004646:	4834      	ldr	r0, [pc, #208]	; (8004718 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8004648:	f7ff facc 	bl	8003be4 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> rpm_leftBack_sub("rpm_leftBack_sub", rpm_leftBack_subCb);
 800464c:	2301      	movs	r3, #1
 800464e:	4a33      	ldr	r2, [pc, #204]	; (800471c <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8004650:	4933      	ldr	r1, [pc, #204]	; (8004720 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8004652:	4834      	ldr	r0, [pc, #208]	; (8004724 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8004654:	f7ff fac6 	bl	8003be4 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Publisher diagnostic_data("diagnostics_data", &diagnostics_data_array);
 8004658:	2300      	movs	r3, #0
 800465a:	4a12      	ldr	r2, [pc, #72]	; (80046a4 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 800465c:	4932      	ldr	r1, [pc, #200]	; (8004728 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800465e:	4833      	ldr	r0, [pc, #204]	; (800472c <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8004660:	f7fe f9be 	bl	80029e0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher sensa_data("sensors1_3_data", &sen1_3_msg);
 8004664:	2300      	movs	r3, #0
 8004666:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004668:	4931      	ldr	r1, [pc, #196]	; (8004730 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 800466a:	4832      	ldr	r0, [pc, #200]	; (8004734 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 800466c:	f7fe f9b8 	bl	80029e0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher sensb_data("sensors4_6_data", &sen4_6_msg);
 8004670:	2300      	movs	r3, #0
 8004672:	4a11      	ldr	r2, [pc, #68]	; (80046b8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004674:	4930      	ldr	r1, [pc, #192]	; (8004738 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8004676:	4831      	ldr	r0, [pc, #196]	; (800473c <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8004678:	f7fe f9b2 	bl	80029e0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher sensc_data("sensors7_8_data", &sen7_8_msg);
 800467c:	2300      	movs	r3, #0
 800467e:	4a0f      	ldr	r2, [pc, #60]	; (80046bc <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004680:	492f      	ldr	r1, [pc, #188]	; (8004740 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8004682:	4830      	ldr	r0, [pc, #192]	; (8004744 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8004684:	f7fe f9ac 	bl	80029e0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004688:	bf00      	nop
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	200004ec 	.word	0x200004ec
 8004694:	20000a1c 	.word	0x20000a1c
 8004698:	20000a24 	.word	0x20000a24
 800469c:	20000a2c 	.word	0x20000a2c
 80046a0:	20000a34 	.word	0x20000a34
 80046a4:	20000a3c 	.word	0x20000a3c
 80046a8:	20000a6c 	.word	0x20000a6c
 80046ac:	20000a9c 	.word	0x20000a9c
 80046b0:	20000aac 	.word	0x20000aac
 80046b4:	20000abc 	.word	0x20000abc
 80046b8:	20000acc 	.word	0x20000acc
 80046bc:	20000adc 	.word	0x20000adc
 80046c0:	0800f930 	.word	0x0800f930
 80046c4:	20000aec 	.word	0x20000aec
 80046c8:	0800f934 	.word	0x0800f934
 80046cc:	20000b00 	.word	0x20000b00
 80046d0:	0800f93c 	.word	0x0800f93c
 80046d4:	20000b14 	.word	0x20000b14
 80046d8:	0800f944 	.word	0x0800f944
 80046dc:	20000b28 	.word	0x20000b28
 80046e0:	0800f954 	.word	0x0800f954
 80046e4:	20000b3c 	.word	0x20000b3c
 80046e8:	0800f964 	.word	0x0800f964
 80046ec:	20000b50 	.word	0x20000b50
 80046f0:	0800f974 	.word	0x0800f974
 80046f4:	20000b64 	.word	0x20000b64
 80046f8:	08003401 	.word	0x08003401
 80046fc:	0800f984 	.word	0x0800f984
 8004700:	20000b78 	.word	0x20000b78
 8004704:	08003475 	.word	0x08003475
 8004708:	0800f998 	.word	0x0800f998
 800470c:	20000b94 	.word	0x20000b94
 8004710:	080034e1 	.word	0x080034e1
 8004714:	0800f9ac 	.word	0x0800f9ac
 8004718:	20000bb0 	.word	0x20000bb0
 800471c:	0800354d 	.word	0x0800354d
 8004720:	0800f9c0 	.word	0x0800f9c0
 8004724:	20000bcc 	.word	0x20000bcc
 8004728:	0800f9d4 	.word	0x0800f9d4
 800472c:	20000be8 	.word	0x20000be8
 8004730:	0800f9e8 	.word	0x0800f9e8
 8004734:	20000bfc 	.word	0x20000bfc
 8004738:	0800f9f8 	.word	0x0800f9f8
 800473c:	20000c10 	.word	0x20000c10
 8004740:	0800fa08 	.word	0x0800fa08
 8004744:	20000c24 	.word	0x20000c24

08004748 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	330c      	adds	r3, #12
 8004756:	6839      	ldr	r1, [r7, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe f9f3 	bl	8002b44 <_ZN8std_msgs4Int811deserializeEPh>
    this->cb_(msg);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	320c      	adds	r2, #12
 8004766:	4610      	mov	r0, r2
 8004768:	4798      	blx	r3
  }
 800476a:	bf00      	nop
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	699b      	ldr	r3, [r3, #24]
  }
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	330c      	adds	r3, #12
 8004796:	4618      	mov	r0, r3
 8004798:	f7fe f9f4 	bl	8002b84 <_ZN8std_msgs4Int87getTypeEv>
 800479c:	4603      	mov	r3, r0
  }
 800479e:	4618      	mov	r0, r3
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	330c      	adds	r3, #12
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe f9f4 	bl	8002ba0 <_ZN8std_msgs4Int86getMD5Ev>
 80047b8:	4603      	mov	r3, r0
  }
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <_GLOBAL__sub_I_rb>:
 80047c2:	b580      	push	{r7, lr}
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047ca:	2001      	movs	r0, #1
 80047cc:	f7ff fed0 	bl	8004570 <_Z41__static_initialization_and_destruction_0ii>
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <_Z8NBT_initP5nbt_tm>:
#include "stm32f4xx_hal.h"
#include "nbt.h"

//NBT - Non Blocking Timer
void NBT_init(nbt_t * nbt, uint32_t interval)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b082      	sub	sp, #8
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	6039      	str	r1, [r7, #0]
	nbt->timeout = interval;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	601a      	str	r2, [r3, #0]
	nbt->previousMillis = HAL_GetTick();
 80047e2:	f000 f987 	bl	8004af4 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	605a      	str	r2, [r3, #4]
}
 80047ec:	bf00      	nop
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <_Z17ringbuffer_statusP10ringbuffer>:
#include <string.h>

#define ASSERT(EX)                                                         \

__inline enum ringbuffer_state  ringbuffer_status(struct  ringbuffer *rb)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
	if (rb->read_index == rb->write_index) {
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	889b      	ldrh	r3, [r3, #4]
 8004800:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004804:	b29a      	uxth	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	88db      	ldrh	r3, [r3, #6]
 800480a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800480e:	b29b      	uxth	r3, r3
 8004810:	429a      	cmp	r2, r3
 8004812:	d10f      	bne.n	8004834 <_Z17ringbuffer_statusP10ringbuffer+0x40>
		if (rb->read_mirror == rb->write_mirror)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	791b      	ldrb	r3, [r3, #4]
 8004818:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800481c:	b2da      	uxtb	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	799b      	ldrb	r3, [r3, #6]
 8004822:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004826:	b2db      	uxtb	r3, r3
 8004828:	429a      	cmp	r2, r3
 800482a:	d101      	bne.n	8004830 <_Z17ringbuffer_statusP10ringbuffer+0x3c>
			return RT_RINGBUFFER_EMPTY;
 800482c:	2300      	movs	r3, #0
 800482e:	e002      	b.n	8004836 <_Z17ringbuffer_statusP10ringbuffer+0x42>
		else
			return RT_RINGBUFFER_FULL;
 8004830:	2301      	movs	r3, #1
 8004832:	e000      	b.n	8004836 <_Z17ringbuffer_statusP10ringbuffer+0x42>
	}
	return RT_RINGBUFFER_HALFFULL;
 8004834:	2302      	movs	r3, #2
}
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <_Z19ringbuffer_data_lenP10ringbuffer>:

/** return the size of data in rb */
uint16_t  ringbuffer_data_len(struct  ringbuffer *rb)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b082      	sub	sp, #8
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
	switch ( ringbuffer_status(rb)) {
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff ffd2 	bl	80047f4 <_Z17ringbuffer_statusP10ringbuffer>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <_Z19ringbuffer_data_lenP10ringbuffer+0x1a>
 8004856:	2b01      	cmp	r3, #1
 8004858:	d002      	beq.n	8004860 <_Z19ringbuffer_data_lenP10ringbuffer+0x1e>
 800485a:	e006      	b.n	800486a <_Z19ringbuffer_data_lenP10ringbuffer+0x28>
	case RT_RINGBUFFER_EMPTY:
		return 0;
 800485c:	2300      	movs	r3, #0
 800485e:	e031      	b.n	80048c4 <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
	case RT_RINGBUFFER_FULL:
		return rb->buffer_size;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004866:	b29b      	uxth	r3, r3
 8004868:	e02c      	b.n	80048c4 <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
	case RT_RINGBUFFER_HALFFULL:
	default:
		if (rb->write_index > rb->read_index)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	88db      	ldrh	r3, [r3, #6]
 800486e:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004872:	b29a      	uxth	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	889b      	ldrh	r3, [r3, #4]
 8004878:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800487c:	b29b      	uxth	r3, r3
 800487e:	429a      	cmp	r2, r3
 8004880:	d90d      	bls.n	800489e <_Z19ringbuffer_data_lenP10ringbuffer+0x5c>
			return rb->write_index - rb->read_index;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	88db      	ldrh	r3, [r3, #6]
 8004886:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800488a:	b29b      	uxth	r3, r3
 800488c:	461a      	mov	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	889b      	ldrh	r3, [r3, #4]
 8004892:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004896:	b29b      	uxth	r3, r3
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	b29b      	uxth	r3, r3
 800489c:	e012      	b.n	80048c4 <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
		else
			return rb->buffer_size - (rb->read_index - rb->write_index);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	88db      	ldrh	r3, [r3, #6]
 80048aa:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	4619      	mov	r1, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	889b      	ldrh	r3, [r3, #4]
 80048b6:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	1acb      	subs	r3, r1, r3
 80048be:	b29b      	uxth	r3, r3
 80048c0:	4413      	add	r3, r2
 80048c2:	b29b      	uxth	r3, r3
	};
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <_Z18ringbuffer_putcharP10ringbufferh>:

/**
 * put a character into ring buffer
 */
uint32_t  ringbuffer_putchar(struct  ringbuffer *rb, const uint8_t ch)
{
 80048cc:	b590      	push	{r4, r7, lr}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	460b      	mov	r3, r1
 80048d6:	70fb      	strb	r3, [r7, #3]
    ASSERT(rb != NULL);

    /* whether has enough space */
	if (! ringbuffer_empty_space(rb))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80048de:	461c      	mov	r4, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff ffad 	bl	8004842 <_Z19ringbuffer_data_lenP10ringbuffer>
 80048e8:	4603      	mov	r3, r0
 80048ea:	429c      	cmp	r4, r3
 80048ec:	bf0c      	ite	eq
 80048ee:	2301      	moveq	r3, #1
 80048f0:	2300      	movne	r3, #0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <_Z18ringbuffer_putcharP10ringbufferh+0x30>
		return 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	e038      	b.n	800496e <_Z18ringbuffer_putcharP10ringbufferh+0xa2>

	rb->buffer_ptr[rb->write_index] = ch;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	88d2      	ldrh	r2, [r2, #6]
 8004904:	f3c2 024e 	ubfx	r2, r2, #1, #15
 8004908:	b292      	uxth	r2, r2
 800490a:	4413      	add	r3, r2
 800490c:	78fa      	ldrb	r2, [r7, #3]
 800490e:	701a      	strb	r2, [r3, #0]

	/* flip mirror */
	if (rb->write_index == rb->buffer_size - 1) {
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	88db      	ldrh	r3, [r3, #6]
 8004914:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004918:	b29b      	uxth	r3, r3
 800491a:	461a      	mov	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004922:	3b01      	subs	r3, #1
 8004924:	429a      	cmp	r2, r3
 8004926:	d114      	bne.n	8004952 <_Z18ringbuffer_putcharP10ringbufferh+0x86>
		rb->write_mirror = ~rb->write_mirror;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	799b      	ldrb	r3, [r3, #6]
 800492c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004930:	b2db      	uxtb	r3, r3
 8004932:	43db      	mvns	r3, r3
 8004934:	b2db      	uxtb	r3, r3
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	b2d9      	uxtb	r1, r3
 800493e:	7993      	ldrb	r3, [r2, #6]
 8004940:	f361 0300 	bfi	r3, r1, #0, #1
 8004944:	7193      	strb	r3, [r2, #6]
		rb->write_index = 0;
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	88d3      	ldrh	r3, [r2, #6]
 800494a:	f36f 034f 	bfc	r3, #1, #15
 800494e:	80d3      	strh	r3, [r2, #6]
 8004950:	e00c      	b.n	800496c <_Z18ringbuffer_putcharP10ringbufferh+0xa0>
	} else {
		rb->write_index++;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	88da      	ldrh	r2, [r3, #6]
 8004956:	f3c2 024e 	ubfx	r2, r2, #1, #15
 800495a:	b292      	uxth	r2, r2
 800495c:	3201      	adds	r2, #1
 800495e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004962:	b291      	uxth	r1, r2
 8004964:	88da      	ldrh	r2, [r3, #6]
 8004966:	f361 024f 	bfi	r2, r1, #1, #15
 800496a:	80da      	strh	r2, [r3, #6]
	}

	return 1;
 800496c:	2301      	movs	r3, #1
}
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	bd90      	pop	{r4, r7, pc}

08004976 <_Z18ringbuffer_getcharP10ringbufferPh>:

/**
 * get a character from a ringbuffer
 */
uint32_t  ringbuffer_getchar(struct  ringbuffer *rb, uint8_t *ch)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	6039      	str	r1, [r7, #0]
    ASSERT(rb != NULL);

    /* ringbuffer is empty */
    if (! ringbuffer_data_len(rb))
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7ff ff5e 	bl	8004842 <_Z19ringbuffer_data_lenP10ringbuffer>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf0c      	ite	eq
 800498c:	2301      	moveq	r3, #1
 800498e:	2300      	movne	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <_Z18ringbuffer_getcharP10ringbufferPh+0x24>
        return 0;
 8004996:	2300      	movs	r3, #0
 8004998:	e03a      	b.n	8004a10 <_Z18ringbuffer_getcharP10ringbufferPh+0x9a>

    /* put character */
    *ch = rb->buffer_ptr[rb->read_index];
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	8892      	ldrh	r2, [r2, #4]
 80049a2:	f3c2 024e 	ubfx	r2, r2, #1, #15
 80049a6:	b292      	uxth	r2, r2
 80049a8:	4413      	add	r3, r2
 80049aa:	781a      	ldrb	r2, [r3, #0]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	701a      	strb	r2, [r3, #0]

    if (rb->read_index == rb->buffer_size-1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	889b      	ldrh	r3, [r3, #4]
 80049b4:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	461a      	mov	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d114      	bne.n	80049f2 <_Z18ringbuffer_getcharP10ringbufferPh+0x7c>
    {
        rb->read_mirror = ~rb->read_mirror;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	791b      	ldrb	r3, [r3, #4]
 80049cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	b2d9      	uxtb	r1, r3
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	7913      	ldrb	r3, [r2, #4]
 80049e0:	f361 0300 	bfi	r3, r1, #0, #1
 80049e4:	7113      	strb	r3, [r2, #4]
        rb->read_index = 0;
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	8893      	ldrh	r3, [r2, #4]
 80049ea:	f36f 034f 	bfc	r3, #1, #15
 80049ee:	8093      	strh	r3, [r2, #4]
 80049f0:	e00d      	b.n	8004a0e <_Z18ringbuffer_getcharP10ringbufferPh+0x98>
    }
    else
    {
        rb->read_index++;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	889b      	ldrh	r3, [r3, #4]
 80049f6:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3301      	adds	r3, #1
 80049fe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004a02:	b299      	uxth	r1, r3
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	8893      	ldrh	r3, [r2, #4]
 8004a08:	f361 034f 	bfi	r3, r1, #1, #15
 8004a0c:	8093      	strh	r3, [r2, #4]
    }

    return 1;
 8004a0e:	2301      	movs	r3, #1
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <_Z15ringbuffer_initP10ringbufferPhs>:
}

void  ringbuffer_init(struct  ringbuffer *rb,
                        uint8_t           *pool,
                        int16_t            size)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	4613      	mov	r3, r2
 8004a24:	80fb      	strh	r3, [r7, #6]
    ASSERT(rb != NULL);
    ASSERT(size > 0);

    /* initialize read and write index */
    rb->read_mirror = rb->read_index = 0;
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	8893      	ldrh	r3, [r2, #4]
 8004a2a:	f36f 034f 	bfc	r3, #1, #15
 8004a2e:	8093      	strh	r3, [r2, #4]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	889b      	ldrh	r3, [r3, #4]
 8004a34:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	b2d9      	uxtb	r1, r3
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	7913      	ldrb	r3, [r2, #4]
 8004a44:	f361 0300 	bfi	r3, r1, #0, #1
 8004a48:	7113      	strb	r3, [r2, #4]
    rb->write_mirror = rb->write_index = 0;
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	88d3      	ldrh	r3, [r2, #6]
 8004a4e:	f36f 034f 	bfc	r3, #1, #15
 8004a52:	80d3      	strh	r3, [r2, #6]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	88db      	ldrh	r3, [r3, #6]
 8004a58:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	b2d9      	uxtb	r1, r3
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	7993      	ldrb	r3, [r2, #6]
 8004a68:	f361 0300 	bfi	r3, r1, #0, #1
 8004a6c:	7193      	strb	r3, [r2, #6]

    /* set buffer pool and size */
    rb->buffer_ptr = pool;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	601a      	str	r2, [r3, #0]
    rb->buffer_size = size; //ALIGN_DOWN(size, ALIGN_SIZE);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	88fa      	ldrh	r2, [r7, #6]
 8004a78:	811a      	strh	r2, [r3, #8]
}
 8004a7a:	bf00      	nop
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
	...

08004a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a8c:	4b0e      	ldr	r3, [pc, #56]	; (8004ac8 <HAL_Init+0x40>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a0d      	ldr	r2, [pc, #52]	; (8004ac8 <HAL_Init+0x40>)
 8004a92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <HAL_Init+0x40>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a0a      	ldr	r2, [pc, #40]	; (8004ac8 <HAL_Init+0x40>)
 8004a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004aa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004aa4:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <HAL_Init+0x40>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a07      	ldr	r2, [pc, #28]	; (8004ac8 <HAL_Init+0x40>)
 8004aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ab0:	2003      	movs	r0, #3
 8004ab2:	f000 ff56 	bl	8005962 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	f7fc ff0c 	bl	80018d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004abc:	f7fc fe34 	bl	8001728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	40023c00 	.word	0x40023c00

08004acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ad0:	4b06      	ldr	r3, [pc, #24]	; (8004aec <HAL_IncTick+0x20>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_IncTick+0x24>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4413      	add	r3, r2
 8004adc:	4a04      	ldr	r2, [pc, #16]	; (8004af0 <HAL_IncTick+0x24>)
 8004ade:	6013      	str	r3, [r2, #0]
}
 8004ae0:	bf00      	nop
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	20000010 	.word	0x20000010
 8004af0:	20004fd4 	.word	0x20004fd4

08004af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  return uwTick;
 8004af8:	4b03      	ldr	r3, [pc, #12]	; (8004b08 <HAL_GetTick+0x14>)
 8004afa:	681b      	ldr	r3, [r3, #0]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20004fd4 	.word	0x20004fd4

08004b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b14:	f7ff ffee 	bl	8004af4 <HAL_GetTick>
 8004b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b24:	d005      	beq.n	8004b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b26:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <HAL_Delay+0x40>)
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b32:	bf00      	nop
 8004b34:	f7ff ffde 	bl	8004af4 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d8f7      	bhi.n	8004b34 <HAL_Delay+0x28>
  {
  }
}
 8004b44:	bf00      	nop
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	20000010 	.word	0x20000010

08004b50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e0ed      	b.n	8004d3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d102      	bne.n	8004b74 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fc fe08 	bl	8001784 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0202 	bic.w	r2, r2, #2
 8004b82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b84:	f7ff ffb6 	bl	8004af4 <HAL_GetTick>
 8004b88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b8a:	e012      	b.n	8004bb2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b8c:	f7ff ffb2 	bl	8004af4 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b0a      	cmp	r3, #10
 8004b98:	d90b      	bls.n	8004bb2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2205      	movs	r2, #5
 8004baa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e0c5      	b.n	8004d3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e5      	bne.n	8004b8c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bd0:	f7ff ff90 	bl	8004af4 <HAL_GetTick>
 8004bd4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004bd6:	e012      	b.n	8004bfe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004bd8:	f7ff ff8c 	bl	8004af4 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b0a      	cmp	r3, #10
 8004be4:	d90b      	bls.n	8004bfe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2205      	movs	r2, #5
 8004bf6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e09f      	b.n	8004d3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0e5      	beq.n	8004bd8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	7e1b      	ldrb	r3, [r3, #24]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d108      	bne.n	8004c26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	e007      	b.n	8004c36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	7e5b      	ldrb	r3, [r3, #25]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d108      	bne.n	8004c50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	e007      	b.n	8004c60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	7e9b      	ldrb	r3, [r3, #26]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d108      	bne.n	8004c7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0220 	orr.w	r2, r2, #32
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	e007      	b.n	8004c8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0220 	bic.w	r2, r2, #32
 8004c88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	7edb      	ldrb	r3, [r3, #27]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d108      	bne.n	8004ca4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0210 	bic.w	r2, r2, #16
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	e007      	b.n	8004cb4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0210 	orr.w	r2, r2, #16
 8004cb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	7f1b      	ldrb	r3, [r3, #28]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d108      	bne.n	8004cce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0208 	orr.w	r2, r2, #8
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	e007      	b.n	8004cde <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0208 	bic.w	r2, r2, #8
 8004cdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	7f5b      	ldrb	r3, [r3, #29]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d108      	bne.n	8004cf8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0204 	orr.w	r2, r2, #4
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	e007      	b.n	8004d08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0204 	bic.w	r2, r2, #4
 8004d06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	ea42 0103 	orr.w	r1, r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	1e5a      	subs	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d5e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004d60:	7cfb      	ldrb	r3, [r7, #19]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d003      	beq.n	8004d6e <HAL_CAN_ConfigFilter+0x26>
 8004d66:	7cfb      	ldrb	r3, [r7, #19]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	f040 80be 	bne.w	8004eea <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004d6e:	4b65      	ldr	r3, [pc, #404]	; (8004f04 <HAL_CAN_ConfigFilter+0x1bc>)
 8004d70:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d78:	f043 0201 	orr.w	r2, r3, #1
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d88:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f003 031f 	and.w	r3, r3, #31
 8004dae:	2201      	movs	r2, #1
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	43db      	mvns	r3, r3
 8004dc0:	401a      	ands	r2, r3
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d123      	bne.n	8004e18 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	401a      	ands	r2, r3
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004df2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	3248      	adds	r2, #72	; 0x48
 8004df8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e0c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e0e:	6979      	ldr	r1, [r7, #20]
 8004e10:	3348      	adds	r3, #72	; 0x48
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	440b      	add	r3, r1
 8004e16:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d122      	bne.n	8004e66 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e40:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	3248      	adds	r2, #72	; 0x48
 8004e46:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e5a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e5c:	6979      	ldr	r1, [r7, #20]
 8004e5e:	3348      	adds	r3, #72	; 0x48
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	440b      	add	r3, r1
 8004e64:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	43db      	mvns	r3, r3
 8004e78:	401a      	ands	r2, r3
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004e80:	e007      	b.n	8004e92 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d109      	bne.n	8004eae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	43db      	mvns	r3, r3
 8004ea4:	401a      	ands	r2, r3
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004eac:	e007      	b.n	8004ebe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d107      	bne.n	8004ed6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004edc:	f023 0201 	bic.w	r2, r3, #1
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e006      	b.n	8004ef8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
  }
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	371c      	adds	r7, #28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	40006400 	.word	0x40006400

08004f08 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d12e      	bne.n	8004f7a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0201 	bic.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f34:	f7ff fdde 	bl	8004af4 <HAL_GetTick>
 8004f38:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f3a:	e012      	b.n	8004f62 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f3c:	f7ff fdda 	bl	8004af4 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b0a      	cmp	r3, #10
 8004f48:	d90b      	bls.n	8004f62 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2205      	movs	r2, #5
 8004f5a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e012      	b.n	8004f88 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1e5      	bne.n	8004f3c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	e006      	b.n	8004f88 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
  }
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b089      	sub	sp, #36	; 0x24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fa4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004fae:	7ffb      	ldrb	r3, [r7, #31]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d003      	beq.n	8004fbc <HAL_CAN_AddTxMessage+0x2c>
 8004fb4:	7ffb      	ldrb	r3, [r7, #31]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	f040 80b8 	bne.w	800512c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10a      	bne.n	8004fdc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d105      	bne.n	8004fdc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 80a0 	beq.w	800511c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	0e1b      	lsrs	r3, r3, #24
 8004fe0:	f003 0303 	and.w	r3, r3, #3
 8004fe4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d907      	bls.n	8004ffc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e09e      	b.n	800513a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	409a      	lsls	r2, r3
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10d      	bne.n	800502a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005018:	68f9      	ldr	r1, [r7, #12]
 800501a:	6809      	ldr	r1, [r1, #0]
 800501c:	431a      	orrs	r2, r3
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	3318      	adds	r3, #24
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	440b      	add	r3, r1
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	e00f      	b.n	800504a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005034:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800503a:	68f9      	ldr	r1, [r7, #12]
 800503c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800503e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	3318      	adds	r3, #24
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	440b      	add	r3, r1
 8005048:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6819      	ldr	r1, [r3, #0]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	691a      	ldr	r2, [r3, #16]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	3318      	adds	r3, #24
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	440b      	add	r3, r1
 800505a:	3304      	adds	r3, #4
 800505c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	7d1b      	ldrb	r3, [r3, #20]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d111      	bne.n	800508a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	3318      	adds	r3, #24
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	4413      	add	r3, r2
 8005072:	3304      	adds	r3, #4
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	6811      	ldr	r1, [r2, #0]
 800507a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	3318      	adds	r3, #24
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	440b      	add	r3, r1
 8005086:	3304      	adds	r3, #4
 8005088:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	3307      	adds	r3, #7
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	061a      	lsls	r2, r3, #24
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3306      	adds	r3, #6
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	041b      	lsls	r3, r3, #16
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3305      	adds	r3, #5
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	4313      	orrs	r3, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	3204      	adds	r2, #4
 80050aa:	7812      	ldrb	r2, [r2, #0]
 80050ac:	4610      	mov	r0, r2
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	6811      	ldr	r1, [r2, #0]
 80050b2:	ea43 0200 	orr.w	r2, r3, r0
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	440b      	add	r3, r1
 80050bc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80050c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3303      	adds	r3, #3
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	061a      	lsls	r2, r3, #24
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3302      	adds	r3, #2
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	041b      	lsls	r3, r3, #16
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3301      	adds	r3, #1
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	4313      	orrs	r3, r2
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	7812      	ldrb	r2, [r2, #0]
 80050e2:	4610      	mov	r0, r2
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	6811      	ldr	r1, [r2, #0]
 80050e8:	ea43 0200 	orr.w	r2, r3, r0
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	440b      	add	r3, r1
 80050f2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80050f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	3318      	adds	r3, #24
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	4413      	add	r3, r2
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	6811      	ldr	r1, [r2, #0]
 800510a:	f043 0201 	orr.w	r2, r3, #1
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	3318      	adds	r3, #24
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	440b      	add	r3, r1
 8005116:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005118:	2300      	movs	r3, #0
 800511a:	e00e      	b.n	800513a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e006      	b.n	800513a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
  }
}
 800513a:	4618      	mov	r0, r3
 800513c:	3724      	adds	r7, #36	; 0x24
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005146:	b480      	push	{r7}
 8005148:	b087      	sub	sp, #28
 800514a:	af00      	add	r7, sp, #0
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	607a      	str	r2, [r7, #4]
 8005152:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f893 3020 	ldrb.w	r3, [r3, #32]
 800515a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800515c:	7dfb      	ldrb	r3, [r7, #23]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d003      	beq.n	800516a <HAL_CAN_GetRxMessage+0x24>
 8005162:	7dfb      	ldrb	r3, [r7, #23]
 8005164:	2b02      	cmp	r3, #2
 8005166:	f040 80f3 	bne.w	8005350 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10e      	bne.n	800518e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d116      	bne.n	80051ac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e0e7      	b.n	800535e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d107      	bne.n	80051ac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0d8      	b.n	800535e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	331b      	adds	r3, #27
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	4413      	add	r3, r2
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0204 	and.w	r2, r3, #4
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10c      	bne.n	80051e4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	331b      	adds	r3, #27
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	4413      	add	r3, r2
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	0d5b      	lsrs	r3, r3, #21
 80051da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	e00b      	b.n	80051fc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	331b      	adds	r3, #27
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	4413      	add	r3, r2
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	08db      	lsrs	r3, r3, #3
 80051f4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	331b      	adds	r3, #27
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	4413      	add	r3, r2
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0202 	and.w	r2, r3, #2
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	331b      	adds	r3, #27
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	4413      	add	r3, r2
 800521e:	3304      	adds	r3, #4
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 020f 	and.w	r2, r3, #15
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	331b      	adds	r3, #27
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	4413      	add	r3, r2
 8005236:	3304      	adds	r3, #4
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	0a1b      	lsrs	r3, r3, #8
 800523c:	b2da      	uxtb	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	331b      	adds	r3, #27
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	4413      	add	r3, r2
 800524e:	3304      	adds	r3, #4
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	0c1b      	lsrs	r3, r3, #16
 8005254:	b29a      	uxth	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	4413      	add	r3, r2
 8005264:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	b2da      	uxtb	r2, r3
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	4413      	add	r3, r2
 800527a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	0a1a      	lsrs	r2, r3, #8
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	3301      	adds	r3, #1
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	4413      	add	r3, r2
 8005294:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	0c1a      	lsrs	r2, r3, #16
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	3302      	adds	r3, #2
 80052a0:	b2d2      	uxtb	r2, r2
 80052a2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	0e1a      	lsrs	r2, r3, #24
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	3303      	adds	r3, #3
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	3304      	adds	r3, #4
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	4413      	add	r3, r2
 80052e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	0a1a      	lsrs	r2, r3, #8
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	3305      	adds	r3, #5
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	0c1a      	lsrs	r2, r3, #16
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	3306      	adds	r3, #6
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	4413      	add	r3, r2
 8005314:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	0e1a      	lsrs	r2, r3, #24
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	3307      	adds	r3, #7
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d108      	bne.n	800533c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68da      	ldr	r2, [r3, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0220 	orr.w	r2, r2, #32
 8005338:	60da      	str	r2, [r3, #12]
 800533a:	e007      	b.n	800534c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0220 	orr.w	r2, r2, #32
 800534a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800534c:	2300      	movs	r3, #0
 800534e:	e006      	b.n	800535e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
  }
}
 800535e:	4618      	mov	r0, r3
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800536a:	b480      	push	{r7}
 800536c:	b085      	sub	sp, #20
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800537a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800537c:	7bfb      	ldrb	r3, [r7, #15]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d002      	beq.n	8005388 <HAL_CAN_ActivateNotification+0x1e>
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	2b02      	cmp	r3, #2
 8005386:	d109      	bne.n	800539c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6959      	ldr	r1, [r3, #20]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	e006      	b.n	80053aa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
  }
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b08a      	sub	sp, #40	; 0x28
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80053be:	2300      	movs	r3, #0
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d07c      	beq.n	80054f6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d023      	beq.n	800544e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2201      	movs	r2, #1
 800540c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f97d 	bl	8005718 <HAL_CAN_TxMailbox0CompleteCallback>
 800541e:	e016      	b.n	800544e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d004      	beq.n	8005434 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005430:	627b      	str	r3, [r7, #36]	; 0x24
 8005432:	e00c      	b.n	800544e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b00      	cmp	r3, #0
 800543c:	d004      	beq.n	8005448 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
 8005446:	e002      	b.n	800544e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f983 	bl	8005754 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005454:	2b00      	cmp	r3, #0
 8005456:	d024      	beq.n	80054a2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005460:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f95d 	bl	800572c <HAL_CAN_TxMailbox1CompleteCallback>
 8005472:	e016      	b.n	80054a2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800547a:	2b00      	cmp	r3, #0
 800547c:	d004      	beq.n	8005488 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005484:	627b      	str	r3, [r7, #36]	; 0x24
 8005486:	e00c      	b.n	80054a2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548e:	2b00      	cmp	r3, #0
 8005490:	d004      	beq.n	800549c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
 800549a:	e002      	b.n	80054a2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f963 	bl	8005768 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d024      	beq.n	80054f6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80054b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f93d 	bl	8005740 <HAL_CAN_TxMailbox2CompleteCallback>
 80054c6:	e016      	b.n	80054f6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d004      	beq.n	80054dc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
 80054da:	e00c      	b.n	80054f6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d004      	beq.n	80054f0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
 80054ee:	e002      	b.n	80054f6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f943 	bl	800577c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	f003 0308 	and.w	r3, r3, #8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00c      	beq.n	800551a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f003 0310 	and.w	r3, r3, #16
 8005506:	2b00      	cmp	r3, #0
 8005508:	d007      	beq.n	800551a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005510:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2210      	movs	r2, #16
 8005518:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00b      	beq.n	800553c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	2b00      	cmp	r3, #0
 800552c:	d006      	beq.n	800553c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2208      	movs	r2, #8
 8005534:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f92a 	bl	8005790 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d009      	beq.n	800555a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f003 0303 	and.w	r3, r3, #3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7fb f9d3 	bl	8000900 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00c      	beq.n	800557e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f003 0310 	and.w	r3, r3, #16
 800556a:	2b00      	cmp	r3, #0
 800556c:	d007      	beq.n	800557e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005574:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2210      	movs	r2, #16
 800557c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	f003 0320 	and.w	r3, r3, #32
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00b      	beq.n	80055a0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b00      	cmp	r3, #0
 8005590:	d006      	beq.n	80055a0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2208      	movs	r2, #8
 8005598:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f90c 	bl	80057b8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	f003 0310 	and.w	r3, r3, #16
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d009      	beq.n	80055be <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f003 0303 	and.w	r3, r3, #3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f8f3 	bl	80057a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00b      	beq.n	80055e0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	f003 0310 	and.w	r3, r3, #16
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d006      	beq.n	80055e0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2210      	movs	r2, #16
 80055d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f8f6 	bl	80057cc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d006      	beq.n	8005602 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2208      	movs	r2, #8
 80055fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f8ef 	bl	80057e0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d075      	beq.n	80056f8 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	f003 0304 	and.w	r3, r3, #4
 8005612:	2b00      	cmp	r3, #0
 8005614:	d06c      	beq.n	80056f0 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561c:	2b00      	cmp	r3, #0
 800561e:	d008      	beq.n	8005632 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	f043 0301 	orr.w	r3, r3, #1
 8005630:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005638:	2b00      	cmp	r3, #0
 800563a:	d008      	beq.n	800564e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	f043 0302 	orr.w	r3, r3, #2
 800564c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	f043 0304 	orr.w	r3, r3, #4
 8005668:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005670:	2b00      	cmp	r3, #0
 8005672:	d03d      	beq.n	80056f0 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800567a:	2b00      	cmp	r3, #0
 800567c:	d038      	beq.n	80056f0 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005684:	2b30      	cmp	r3, #48	; 0x30
 8005686:	d017      	beq.n	80056b8 <HAL_CAN_IRQHandler+0x302>
 8005688:	2b30      	cmp	r3, #48	; 0x30
 800568a:	d804      	bhi.n	8005696 <HAL_CAN_IRQHandler+0x2e0>
 800568c:	2b10      	cmp	r3, #16
 800568e:	d009      	beq.n	80056a4 <HAL_CAN_IRQHandler+0x2ee>
 8005690:	2b20      	cmp	r3, #32
 8005692:	d00c      	beq.n	80056ae <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005694:	e024      	b.n	80056e0 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8005696:	2b50      	cmp	r3, #80	; 0x50
 8005698:	d018      	beq.n	80056cc <HAL_CAN_IRQHandler+0x316>
 800569a:	2b60      	cmp	r3, #96	; 0x60
 800569c:	d01b      	beq.n	80056d6 <HAL_CAN_IRQHandler+0x320>
 800569e:	2b40      	cmp	r3, #64	; 0x40
 80056a0:	d00f      	beq.n	80056c2 <HAL_CAN_IRQHandler+0x30c>
            break;
 80056a2:	e01d      	b.n	80056e0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	f043 0308 	orr.w	r3, r3, #8
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80056ac:	e018      	b.n	80056e0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	f043 0310 	orr.w	r3, r3, #16
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80056b6:	e013      	b.n	80056e0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	f043 0320 	orr.w	r3, r3, #32
 80056be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80056c0:	e00e      	b.n	80056e0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80056ca:	e009      	b.n	80056e0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80056d4:	e004      	b.n	80056e0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80056de:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80056ee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2204      	movs	r2, #4
 80056f6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d008      	beq.n	8005710 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f872 	bl	80057f4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005710:	bf00      	nop
 8005712:	3728      	adds	r7, #40	; 0x28
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005818:	4b0c      	ldr	r3, [pc, #48]	; (800584c <__NVIC_SetPriorityGrouping+0x44>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005824:	4013      	ands	r3, r2
 8005826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800583a:	4a04      	ldr	r2, [pc, #16]	; (800584c <__NVIC_SetPriorityGrouping+0x44>)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	60d3      	str	r3, [r2, #12]
}
 8005840:	bf00      	nop
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	e000ed00 	.word	0xe000ed00

08005850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005854:	4b04      	ldr	r3, [pc, #16]	; (8005868 <__NVIC_GetPriorityGrouping+0x18>)
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	0a1b      	lsrs	r3, r3, #8
 800585a:	f003 0307 	and.w	r3, r3, #7
}
 800585e:	4618      	mov	r0, r3
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	e000ed00 	.word	0xe000ed00

0800586c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	4603      	mov	r3, r0
 8005874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800587a:	2b00      	cmp	r3, #0
 800587c:	db0b      	blt.n	8005896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	f003 021f 	and.w	r2, r3, #31
 8005884:	4907      	ldr	r1, [pc, #28]	; (80058a4 <__NVIC_EnableIRQ+0x38>)
 8005886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800588a:	095b      	lsrs	r3, r3, #5
 800588c:	2001      	movs	r0, #1
 800588e:	fa00 f202 	lsl.w	r2, r0, r2
 8005892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	e000e100 	.word	0xe000e100

080058a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	6039      	str	r1, [r7, #0]
 80058b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	db0a      	blt.n	80058d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	490c      	ldr	r1, [pc, #48]	; (80058f4 <__NVIC_SetPriority+0x4c>)
 80058c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c6:	0112      	lsls	r2, r2, #4
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	440b      	add	r3, r1
 80058cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058d0:	e00a      	b.n	80058e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	4908      	ldr	r1, [pc, #32]	; (80058f8 <__NVIC_SetPriority+0x50>)
 80058d8:	79fb      	ldrb	r3, [r7, #7]
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	3b04      	subs	r3, #4
 80058e0:	0112      	lsls	r2, r2, #4
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	440b      	add	r3, r1
 80058e6:	761a      	strb	r2, [r3, #24]
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	e000e100 	.word	0xe000e100
 80058f8:	e000ed00 	.word	0xe000ed00

080058fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b089      	sub	sp, #36	; 0x24
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	f1c3 0307 	rsb	r3, r3, #7
 8005916:	2b04      	cmp	r3, #4
 8005918:	bf28      	it	cs
 800591a:	2304      	movcs	r3, #4
 800591c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	3304      	adds	r3, #4
 8005922:	2b06      	cmp	r3, #6
 8005924:	d902      	bls.n	800592c <NVIC_EncodePriority+0x30>
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	3b03      	subs	r3, #3
 800592a:	e000      	b.n	800592e <NVIC_EncodePriority+0x32>
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	43da      	mvns	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	401a      	ands	r2, r3
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005944:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	fa01 f303 	lsl.w	r3, r1, r3
 800594e:	43d9      	mvns	r1, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005954:	4313      	orrs	r3, r2
         );
}
 8005956:	4618      	mov	r0, r3
 8005958:	3724      	adds	r7, #36	; 0x24
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b082      	sub	sp, #8
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7ff ff4c 	bl	8005808 <__NVIC_SetPriorityGrouping>
}
 8005970:	bf00      	nop
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	4603      	mov	r3, r0
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005986:	2300      	movs	r3, #0
 8005988:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800598a:	f7ff ff61 	bl	8005850 <__NVIC_GetPriorityGrouping>
 800598e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	68b9      	ldr	r1, [r7, #8]
 8005994:	6978      	ldr	r0, [r7, #20]
 8005996:	f7ff ffb1 	bl	80058fc <NVIC_EncodePriority>
 800599a:	4602      	mov	r2, r0
 800599c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059a0:	4611      	mov	r1, r2
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff ff80 	bl	80058a8 <__NVIC_SetPriority>
}
 80059a8:	bf00      	nop
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	4603      	mov	r3, r0
 80059b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff ff54 	bl	800586c <__NVIC_EnableIRQ>
}
 80059c4:	bf00      	nop
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d004      	beq.n	80059ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2280      	movs	r2, #128	; 0x80
 80059e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e00c      	b.n	8005a04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2205      	movs	r2, #5
 80059ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0201 	bic.w	r2, r2, #1
 8005a00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a1e:	b2db      	uxtb	r3, r3
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b089      	sub	sp, #36	; 0x24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a42:	2300      	movs	r3, #0
 8005a44:	61fb      	str	r3, [r7, #28]
 8005a46:	e16b      	b.n	8005d20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a48:	2201      	movs	r2, #1
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	4013      	ands	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	f040 815a 	bne.w	8005d1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d00b      	beq.n	8005a86 <HAL_GPIO_Init+0x5a>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d007      	beq.n	8005a86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005a7a:	2b11      	cmp	r3, #17
 8005a7c:	d003      	beq.n	8005a86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2b12      	cmp	r3, #18
 8005a84:	d130      	bne.n	8005ae8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	2203      	movs	r2, #3
 8005a92:	fa02 f303 	lsl.w	r3, r2, r3
 8005a96:	43db      	mvns	r3, r3
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005abc:	2201      	movs	r2, #1
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	091b      	lsrs	r3, r3, #4
 8005ad2:	f003 0201 	and.w	r2, r3, #1
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	2203      	movs	r2, #3
 8005af4:	fa02 f303 	lsl.w	r3, r2, r3
 8005af8:	43db      	mvns	r3, r3
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	4013      	ands	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0c:	69ba      	ldr	r2, [r7, #24]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d003      	beq.n	8005b28 <HAL_GPIO_Init+0xfc>
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b12      	cmp	r3, #18
 8005b26:	d123      	bne.n	8005b70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	08da      	lsrs	r2, r3, #3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3208      	adds	r2, #8
 8005b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	220f      	movs	r2, #15
 8005b40:	fa02 f303 	lsl.w	r3, r2, r3
 8005b44:	43db      	mvns	r3, r3
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	08da      	lsrs	r2, r3, #3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3208      	adds	r2, #8
 8005b6a:	69b9      	ldr	r1, [r7, #24]
 8005b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	005b      	lsls	r3, r3, #1
 8005b7a:	2203      	movs	r2, #3
 8005b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b80:	43db      	mvns	r3, r3
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	4013      	ands	r3, r2
 8005b86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f003 0203 	and.w	r2, r3, #3
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	fa02 f303 	lsl.w	r3, r2, r3
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 80b4 	beq.w	8005d1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	4b5f      	ldr	r3, [pc, #380]	; (8005d34 <HAL_GPIO_Init+0x308>)
 8005bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bba:	4a5e      	ldr	r2, [pc, #376]	; (8005d34 <HAL_GPIO_Init+0x308>)
 8005bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8005bc2:	4b5c      	ldr	r3, [pc, #368]	; (8005d34 <HAL_GPIO_Init+0x308>)
 8005bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bce:	4a5a      	ldr	r2, [pc, #360]	; (8005d38 <HAL_GPIO_Init+0x30c>)
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	089b      	lsrs	r3, r3, #2
 8005bd4:	3302      	adds	r3, #2
 8005bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	220f      	movs	r2, #15
 8005be6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bea:	43db      	mvns	r3, r3
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a51      	ldr	r2, [pc, #324]	; (8005d3c <HAL_GPIO_Init+0x310>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d02b      	beq.n	8005c52 <HAL_GPIO_Init+0x226>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a50      	ldr	r2, [pc, #320]	; (8005d40 <HAL_GPIO_Init+0x314>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d025      	beq.n	8005c4e <HAL_GPIO_Init+0x222>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a4f      	ldr	r2, [pc, #316]	; (8005d44 <HAL_GPIO_Init+0x318>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d01f      	beq.n	8005c4a <HAL_GPIO_Init+0x21e>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a4e      	ldr	r2, [pc, #312]	; (8005d48 <HAL_GPIO_Init+0x31c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d019      	beq.n	8005c46 <HAL_GPIO_Init+0x21a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a4d      	ldr	r2, [pc, #308]	; (8005d4c <HAL_GPIO_Init+0x320>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d013      	beq.n	8005c42 <HAL_GPIO_Init+0x216>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a4c      	ldr	r2, [pc, #304]	; (8005d50 <HAL_GPIO_Init+0x324>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00d      	beq.n	8005c3e <HAL_GPIO_Init+0x212>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a4b      	ldr	r2, [pc, #300]	; (8005d54 <HAL_GPIO_Init+0x328>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d007      	beq.n	8005c3a <HAL_GPIO_Init+0x20e>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a4a      	ldr	r2, [pc, #296]	; (8005d58 <HAL_GPIO_Init+0x32c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d101      	bne.n	8005c36 <HAL_GPIO_Init+0x20a>
 8005c32:	2307      	movs	r3, #7
 8005c34:	e00e      	b.n	8005c54 <HAL_GPIO_Init+0x228>
 8005c36:	2308      	movs	r3, #8
 8005c38:	e00c      	b.n	8005c54 <HAL_GPIO_Init+0x228>
 8005c3a:	2306      	movs	r3, #6
 8005c3c:	e00a      	b.n	8005c54 <HAL_GPIO_Init+0x228>
 8005c3e:	2305      	movs	r3, #5
 8005c40:	e008      	b.n	8005c54 <HAL_GPIO_Init+0x228>
 8005c42:	2304      	movs	r3, #4
 8005c44:	e006      	b.n	8005c54 <HAL_GPIO_Init+0x228>
 8005c46:	2303      	movs	r3, #3
 8005c48:	e004      	b.n	8005c54 <HAL_GPIO_Init+0x228>
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	e002      	b.n	8005c54 <HAL_GPIO_Init+0x228>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e000      	b.n	8005c54 <HAL_GPIO_Init+0x228>
 8005c52:	2300      	movs	r3, #0
 8005c54:	69fa      	ldr	r2, [r7, #28]
 8005c56:	f002 0203 	and.w	r2, r2, #3
 8005c5a:	0092      	lsls	r2, r2, #2
 8005c5c:	4093      	lsls	r3, r2
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c64:	4934      	ldr	r1, [pc, #208]	; (8005d38 <HAL_GPIO_Init+0x30c>)
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	089b      	lsrs	r3, r3, #2
 8005c6a:	3302      	adds	r3, #2
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c72:	4b3a      	ldr	r3, [pc, #232]	; (8005d5c <HAL_GPIO_Init+0x330>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	43db      	mvns	r3, r3
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c96:	4a31      	ldr	r2, [pc, #196]	; (8005d5c <HAL_GPIO_Init+0x330>)
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005c9c:	4b2f      	ldr	r3, [pc, #188]	; (8005d5c <HAL_GPIO_Init+0x330>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	43db      	mvns	r3, r3
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005cc0:	4a26      	ldr	r2, [pc, #152]	; (8005d5c <HAL_GPIO_Init+0x330>)
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cc6:	4b25      	ldr	r3, [pc, #148]	; (8005d5c <HAL_GPIO_Init+0x330>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	43db      	mvns	r3, r3
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cea:	4a1c      	ldr	r2, [pc, #112]	; (8005d5c <HAL_GPIO_Init+0x330>)
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cf0:	4b1a      	ldr	r3, [pc, #104]	; (8005d5c <HAL_GPIO_Init+0x330>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d14:	4a11      	ldr	r2, [pc, #68]	; (8005d5c <HAL_GPIO_Init+0x330>)
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	61fb      	str	r3, [r7, #28]
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	2b0f      	cmp	r3, #15
 8005d24:	f67f ae90 	bls.w	8005a48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d28:	bf00      	nop
 8005d2a:	3724      	adds	r7, #36	; 0x24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	40023800 	.word	0x40023800
 8005d38:	40013800 	.word	0x40013800
 8005d3c:	40020000 	.word	0x40020000
 8005d40:	40020400 	.word	0x40020400
 8005d44:	40020800 	.word	0x40020800
 8005d48:	40020c00 	.word	0x40020c00
 8005d4c:	40021000 	.word	0x40021000
 8005d50:	40021400 	.word	0x40021400
 8005d54:	40021800 	.word	0x40021800
 8005d58:	40021c00 	.word	0x40021c00
 8005d5c:	40013c00 	.word	0x40013c00

08005d60 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	695a      	ldr	r2, [r3, #20]
 8005d70:	887b      	ldrh	r3, [r7, #2]
 8005d72:	401a      	ands	r2, r3
 8005d74:	887b      	ldrh	r3, [r7, #2]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d104      	bne.n	8005d84 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d7a:	887b      	ldrh	r3, [r7, #2]
 8005d7c:	041a      	lsls	r2, r3, #16
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005d82:	e002      	b.n	8005d8a <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005d84:	887a      	ldrh	r2, [r7, #2]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	619a      	str	r2, [r3, #24]
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
	...

08005d98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e11f      	b.n	8005fea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7fb fd38 	bl	8001834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2224      	movs	r2, #36	; 0x24
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0201 	bic.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005dfc:	f004 f8ca 	bl	8009f94 <HAL_RCC_GetPCLK1Freq>
 8005e00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	4a7b      	ldr	r2, [pc, #492]	; (8005ff4 <HAL_I2C_Init+0x25c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d807      	bhi.n	8005e1c <HAL_I2C_Init+0x84>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4a7a      	ldr	r2, [pc, #488]	; (8005ff8 <HAL_I2C_Init+0x260>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	bf94      	ite	ls
 8005e14:	2301      	movls	r3, #1
 8005e16:	2300      	movhi	r3, #0
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	e006      	b.n	8005e2a <HAL_I2C_Init+0x92>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4a77      	ldr	r2, [pc, #476]	; (8005ffc <HAL_I2C_Init+0x264>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	bf94      	ite	ls
 8005e24:	2301      	movls	r3, #1
 8005e26:	2300      	movhi	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e0db      	b.n	8005fea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4a72      	ldr	r2, [pc, #456]	; (8006000 <HAL_I2C_Init+0x268>)
 8005e36:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3a:	0c9b      	lsrs	r3, r3, #18
 8005e3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	4a64      	ldr	r2, [pc, #400]	; (8005ff4 <HAL_I2C_Init+0x25c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d802      	bhi.n	8005e6c <HAL_I2C_Init+0xd4>
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	e009      	b.n	8005e80 <HAL_I2C_Init+0xe8>
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e72:	fb02 f303 	mul.w	r3, r2, r3
 8005e76:	4a63      	ldr	r2, [pc, #396]	; (8006004 <HAL_I2C_Init+0x26c>)
 8005e78:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7c:	099b      	lsrs	r3, r3, #6
 8005e7e:	3301      	adds	r3, #1
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6812      	ldr	r2, [r2, #0]
 8005e84:	430b      	orrs	r3, r1
 8005e86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005e92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	4956      	ldr	r1, [pc, #344]	; (8005ff4 <HAL_I2C_Init+0x25c>)
 8005e9c:	428b      	cmp	r3, r1
 8005e9e:	d80d      	bhi.n	8005ebc <HAL_I2C_Init+0x124>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	1e59      	subs	r1, r3, #1
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8005eae:	3301      	adds	r3, #1
 8005eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	bf38      	it	cc
 8005eb8:	2304      	movcc	r3, #4
 8005eba:	e04f      	b.n	8005f5c <HAL_I2C_Init+0x1c4>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d111      	bne.n	8005ee8 <HAL_I2C_Init+0x150>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	1e58      	subs	r0, r3, #1
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6859      	ldr	r1, [r3, #4]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	440b      	add	r3, r1
 8005ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	bf0c      	ite	eq
 8005ee0:	2301      	moveq	r3, #1
 8005ee2:	2300      	movne	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	e012      	b.n	8005f0e <HAL_I2C_Init+0x176>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	1e58      	subs	r0, r3, #1
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6859      	ldr	r1, [r3, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	0099      	lsls	r1, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005efe:	3301      	adds	r3, #1
 8005f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	bf0c      	ite	eq
 8005f08:	2301      	moveq	r3, #1
 8005f0a:	2300      	movne	r3, #0
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <HAL_I2C_Init+0x17e>
 8005f12:	2301      	movs	r3, #1
 8005f14:	e022      	b.n	8005f5c <HAL_I2C_Init+0x1c4>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10e      	bne.n	8005f3c <HAL_I2C_Init+0x1a4>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	1e58      	subs	r0, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6859      	ldr	r1, [r3, #4]
 8005f26:	460b      	mov	r3, r1
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	440b      	add	r3, r1
 8005f2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f30:	3301      	adds	r3, #1
 8005f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f3a:	e00f      	b.n	8005f5c <HAL_I2C_Init+0x1c4>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	1e58      	subs	r0, r3, #1
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6859      	ldr	r1, [r3, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	440b      	add	r3, r1
 8005f4a:	0099      	lsls	r1, r3, #2
 8005f4c:	440b      	add	r3, r1
 8005f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f52:	3301      	adds	r3, #1
 8005f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	6809      	ldr	r1, [r1, #0]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	69da      	ldr	r2, [r3, #28]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	431a      	orrs	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005f8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6911      	ldr	r1, [r2, #16]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	68d2      	ldr	r2, [r2, #12]
 8005f96:	4311      	orrs	r1, r2
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6812      	ldr	r2, [r2, #0]
 8005f9c:	430b      	orrs	r3, r1
 8005f9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	695a      	ldr	r2, [r3, #20]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0201 	orr.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	000186a0 	.word	0x000186a0
 8005ff8:	001e847f 	.word	0x001e847f
 8005ffc:	003d08ff 	.word	0x003d08ff
 8006000:	431bde83 	.word	0x431bde83
 8006004:	10624dd3 	.word	0x10624dd3

08006008 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af02      	add	r7, sp, #8
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	607a      	str	r2, [r7, #4]
 8006012:	461a      	mov	r2, r3
 8006014:	460b      	mov	r3, r1
 8006016:	817b      	strh	r3, [r7, #10]
 8006018:	4613      	mov	r3, r2
 800601a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800601c:	f7fe fd6a 	bl	8004af4 <HAL_GetTick>
 8006020:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b20      	cmp	r3, #32
 800602c:	f040 80e0 	bne.w	80061f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	2319      	movs	r3, #25
 8006036:	2201      	movs	r2, #1
 8006038:	4970      	ldr	r1, [pc, #448]	; (80061fc <HAL_I2C_Master_Transmit+0x1f4>)
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f001 ffc2 	bl	8007fc4 <I2C_WaitOnFlagUntilTimeout>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006046:	2302      	movs	r3, #2
 8006048:	e0d3      	b.n	80061f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <HAL_I2C_Master_Transmit+0x50>
 8006054:	2302      	movs	r3, #2
 8006056:	e0cc      	b.n	80061f2 <HAL_I2C_Master_Transmit+0x1ea>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b01      	cmp	r3, #1
 800606c:	d007      	beq.n	800607e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f042 0201 	orr.w	r2, r2, #1
 800607c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800608c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2221      	movs	r2, #33	; 0x21
 8006092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2210      	movs	r2, #16
 800609a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	893a      	ldrh	r2, [r7, #8]
 80060ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4a50      	ldr	r2, [pc, #320]	; (8006200 <HAL_I2C_Master_Transmit+0x1f8>)
 80060be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80060c0:	8979      	ldrh	r1, [r7, #10]
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	6a3a      	ldr	r2, [r7, #32]
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f001 fd6a 	bl	8007ba0 <I2C_MasterRequestWrite>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e08d      	b.n	80061f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060d6:	2300      	movs	r3, #0
 80060d8:	613b      	str	r3, [r7, #16]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	613b      	str	r3, [r7, #16]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	613b      	str	r3, [r7, #16]
 80060ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80060ec:	e066      	b.n	80061bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	6a39      	ldr	r1, [r7, #32]
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f002 f83c 	bl	8008170 <I2C_WaitOnTXEFlagUntilTimeout>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00d      	beq.n	800611a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	2b04      	cmp	r3, #4
 8006104:	d107      	bne.n	8006116 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006114:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e06b      	b.n	80061f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	781a      	ldrb	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006134:	b29b      	uxth	r3, r3
 8006136:	3b01      	subs	r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b04      	cmp	r3, #4
 8006156:	d11b      	bne.n	8006190 <HAL_I2C_Master_Transmit+0x188>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800615c:	2b00      	cmp	r3, #0
 800615e:	d017      	beq.n	8006190 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	781a      	ldrb	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617a:	b29b      	uxth	r3, r3
 800617c:	3b01      	subs	r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006188:	3b01      	subs	r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	6a39      	ldr	r1, [r7, #32]
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f002 f82c 	bl	80081f2 <I2C_WaitOnBTFFlagUntilTimeout>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00d      	beq.n	80061bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d107      	bne.n	80061b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e01a      	b.n	80061f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d194      	bne.n	80060ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80061ec:	2300      	movs	r3, #0
 80061ee:	e000      	b.n	80061f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80061f0:	2302      	movs	r3, #2
  }
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	00100002 	.word	0x00100002
 8006200:	ffff0000 	.word	0xffff0000

08006204 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08c      	sub	sp, #48	; 0x30
 8006208:	af02      	add	r7, sp, #8
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	4608      	mov	r0, r1
 800620e:	4611      	mov	r1, r2
 8006210:	461a      	mov	r2, r3
 8006212:	4603      	mov	r3, r0
 8006214:	817b      	strh	r3, [r7, #10]
 8006216:	460b      	mov	r3, r1
 8006218:	813b      	strh	r3, [r7, #8]
 800621a:	4613      	mov	r3, r2
 800621c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800621e:	f7fe fc69 	bl	8004af4 <HAL_GetTick>
 8006222:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b20      	cmp	r3, #32
 800622e:	f040 8208 	bne.w	8006642 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	2319      	movs	r3, #25
 8006238:	2201      	movs	r2, #1
 800623a:	497b      	ldr	r1, [pc, #492]	; (8006428 <HAL_I2C_Mem_Read+0x224>)
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f001 fec1 	bl	8007fc4 <I2C_WaitOnFlagUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006248:	2302      	movs	r3, #2
 800624a:	e1fb      	b.n	8006644 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_I2C_Mem_Read+0x56>
 8006256:	2302      	movs	r3, #2
 8006258:	e1f4      	b.n	8006644 <HAL_I2C_Mem_Read+0x440>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b01      	cmp	r3, #1
 800626e:	d007      	beq.n	8006280 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800628e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2222      	movs	r2, #34	; 0x22
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2240      	movs	r2, #64	; 0x40
 800629c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80062b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4a5b      	ldr	r2, [pc, #364]	; (800642c <HAL_I2C_Mem_Read+0x228>)
 80062c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062c2:	88f8      	ldrh	r0, [r7, #6]
 80062c4:	893a      	ldrh	r2, [r7, #8]
 80062c6:	8979      	ldrh	r1, [r7, #10]
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	9301      	str	r3, [sp, #4]
 80062cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	4603      	mov	r3, r0
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f001 fce6 	bl	8007ca4 <I2C_RequestMemoryRead>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e1b0      	b.n	8006644 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d113      	bne.n	8006312 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ea:	2300      	movs	r3, #0
 80062ec:	623b      	str	r3, [r7, #32]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	623b      	str	r3, [r7, #32]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	623b      	str	r3, [r7, #32]
 80062fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	e184      	b.n	800661c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006316:	2b01      	cmp	r3, #1
 8006318:	d11b      	bne.n	8006352 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006328:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800632a:	2300      	movs	r3, #0
 800632c:	61fb      	str	r3, [r7, #28]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	61fb      	str	r3, [r7, #28]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	61fb      	str	r3, [r7, #28]
 800633e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	e164      	b.n	800661c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006356:	2b02      	cmp	r3, #2
 8006358:	d11b      	bne.n	8006392 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006368:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006378:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800637a:	2300      	movs	r3, #0
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	61bb      	str	r3, [r7, #24]
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	e144      	b.n	800661c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006392:	2300      	movs	r3, #0
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80063a8:	e138      	b.n	800661c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	f200 80f1 	bhi.w	8006596 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d123      	bne.n	8006404 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f001 ff89 	bl	80082d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e139      	b.n	8006644 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691a      	ldr	r2, [r3, #16]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006402:	e10b      	b.n	800661c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006408:	2b02      	cmp	r3, #2
 800640a:	d14e      	bne.n	80064aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006412:	2200      	movs	r2, #0
 8006414:	4906      	ldr	r1, [pc, #24]	; (8006430 <HAL_I2C_Mem_Read+0x22c>)
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f001 fdd4 	bl	8007fc4 <I2C_WaitOnFlagUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d008      	beq.n	8006434 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e10e      	b.n	8006644 <HAL_I2C_Mem_Read+0x440>
 8006426:	bf00      	nop
 8006428:	00100002 	.word	0x00100002
 800642c:	ffff0000 	.word	0xffff0000
 8006430:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006442:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	691a      	ldr	r2, [r3, #16]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	b2d2      	uxtb	r2, r2
 8006450:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	1c5a      	adds	r2, r3, #1
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646c:	b29b      	uxth	r3, r3
 800646e:	3b01      	subs	r3, #1
 8006470:	b29a      	uxth	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	b2d2      	uxtb	r2, r2
 8006482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006492:	3b01      	subs	r3, #1
 8006494:	b29a      	uxth	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800649e:	b29b      	uxth	r3, r3
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064a8:	e0b8      	b.n	800661c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	2200      	movs	r2, #0
 80064b2:	4966      	ldr	r1, [pc, #408]	; (800664c <HAL_I2C_Mem_Read+0x448>)
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f001 fd85 	bl	8007fc4 <I2C_WaitOnFlagUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e0bf      	b.n	8006644 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691a      	ldr	r2, [r3, #16]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650c:	2200      	movs	r2, #0
 800650e:	494f      	ldr	r1, [pc, #316]	; (800664c <HAL_I2C_Mem_Read+0x448>)
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f001 fd57 	bl	8007fc4 <I2C_WaitOnFlagUntilTimeout>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e091      	b.n	8006644 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800652e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691a      	ldr	r2, [r3, #16]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	b2d2      	uxtb	r2, r2
 800653c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	691a      	ldr	r2, [r3, #16]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	b2d2      	uxtb	r2, r2
 800656e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800657e:	3b01      	subs	r3, #1
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800658a:	b29b      	uxth	r3, r3
 800658c:	3b01      	subs	r3, #1
 800658e:	b29a      	uxth	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006594:	e042      	b.n	800661c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006598:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f001 fe9c 	bl	80082d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e04c      	b.n	8006644 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	691a      	ldr	r2, [r3, #16]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	3b01      	subs	r3, #1
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	f003 0304 	and.w	r3, r3, #4
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d118      	bne.n	800661c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	691a      	ldr	r2, [r3, #16]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	b2d2      	uxtb	r2, r2
 80065f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	1c5a      	adds	r2, r3, #1
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006606:	3b01      	subs	r3, #1
 8006608:	b29a      	uxth	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006612:	b29b      	uxth	r3, r3
 8006614:	3b01      	subs	r3, #1
 8006616:	b29a      	uxth	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006620:	2b00      	cmp	r3, #0
 8006622:	f47f aec2 	bne.w	80063aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2220      	movs	r2, #32
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	e000      	b.n	8006644 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006642:	2302      	movs	r3, #2
  }
}
 8006644:	4618      	mov	r0, r3
 8006646:	3728      	adds	r7, #40	; 0x28
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	00010004 	.word	0x00010004

08006650 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b088      	sub	sp, #32
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006668:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006670:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006678:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	2b10      	cmp	r3, #16
 800667e:	d003      	beq.n	8006688 <HAL_I2C_EV_IRQHandler+0x38>
 8006680:	7bfb      	ldrb	r3, [r7, #15]
 8006682:	2b40      	cmp	r3, #64	; 0x40
 8006684:	f040 80bd 	bne.w	8006802 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10d      	bne.n	80066be <HAL_I2C_EV_IRQHandler+0x6e>
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80066a8:	d003      	beq.n	80066b2 <HAL_I2C_EV_IRQHandler+0x62>
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80066b0:	d101      	bne.n	80066b6 <HAL_I2C_EV_IRQHandler+0x66>
 80066b2:	2301      	movs	r3, #1
 80066b4:	e000      	b.n	80066b8 <HAL_I2C_EV_IRQHandler+0x68>
 80066b6:	2300      	movs	r3, #0
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	f000 812e 	beq.w	800691a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00c      	beq.n	80066e2 <HAL_I2C_EV_IRQHandler+0x92>
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	0a5b      	lsrs	r3, r3, #9
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d006      	beq.n	80066e2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f001 fe84 	bl	80083e2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fcbb 	bl	8007056 <I2C_Master_SB>
 80066e0:	e08e      	b.n	8006800 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	08db      	lsrs	r3, r3, #3
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d009      	beq.n	8006702 <HAL_I2C_EV_IRQHandler+0xb2>
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	0a5b      	lsrs	r3, r3, #9
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fd31 	bl	8007162 <I2C_Master_ADD10>
 8006700:	e07e      	b.n	8006800 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	085b      	lsrs	r3, r3, #1
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d009      	beq.n	8006722 <HAL_I2C_EV_IRQHandler+0xd2>
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	0a5b      	lsrs	r3, r3, #9
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fd4b 	bl	80071b6 <I2C_Master_ADDR>
 8006720:	e06e      	b.n	8006800 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	089b      	lsrs	r3, r3, #2
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d037      	beq.n	800679e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800673c:	f000 80ef 	beq.w	800691e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	09db      	lsrs	r3, r3, #7
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00f      	beq.n	800676c <HAL_I2C_EV_IRQHandler+0x11c>
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	0a9b      	lsrs	r3, r3, #10
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b00      	cmp	r3, #0
 8006756:	d009      	beq.n	800676c <HAL_I2C_EV_IRQHandler+0x11c>
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	089b      	lsrs	r3, r3, #2
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b00      	cmp	r3, #0
 8006762:	d103      	bne.n	800676c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f948 	bl	80069fa <I2C_MasterTransmit_TXE>
 800676a:	e049      	b.n	8006800 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	089b      	lsrs	r3, r3, #2
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80d2 	beq.w	800691e <HAL_I2C_EV_IRQHandler+0x2ce>
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	0a5b      	lsrs	r3, r3, #9
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 80cb 	beq.w	800691e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8006788:	7bfb      	ldrb	r3, [r7, #15]
 800678a:	2b10      	cmp	r3, #16
 800678c:	d103      	bne.n	8006796 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f9cf 	bl	8006b32 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006794:	e0c3      	b.n	800691e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fa33 	bl	8006c02 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800679c:	e0bf      	b.n	800691e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ac:	f000 80b7 	beq.w	800691e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	099b      	lsrs	r3, r3, #6
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00f      	beq.n	80067dc <HAL_I2C_EV_IRQHandler+0x18c>
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	0a9b      	lsrs	r3, r3, #10
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d009      	beq.n	80067dc <HAL_I2C_EV_IRQHandler+0x18c>
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	089b      	lsrs	r3, r3, #2
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d103      	bne.n	80067dc <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 faa3 	bl	8006d20 <I2C_MasterReceive_RXNE>
 80067da:	e011      	b.n	8006800 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	089b      	lsrs	r3, r3, #2
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 809a 	beq.w	800691e <HAL_I2C_EV_IRQHandler+0x2ce>
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	0a5b      	lsrs	r3, r3, #9
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 8093 	beq.w	800691e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fb42 	bl	8006e82 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067fe:	e08e      	b.n	800691e <HAL_I2C_EV_IRQHandler+0x2ce>
 8006800:	e08d      	b.n	800691e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	2b00      	cmp	r3, #0
 8006808:	d004      	beq.n	8006814 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	61fb      	str	r3, [r7, #28]
 8006812:	e007      	b.n	8006824 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	085b      	lsrs	r3, r3, #1
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	d012      	beq.n	8006856 <HAL_I2C_EV_IRQHandler+0x206>
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	0a5b      	lsrs	r3, r3, #9
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00c      	beq.n	8006856 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800684c:	69b9      	ldr	r1, [r7, #24]
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 ff00 	bl	8007654 <I2C_Slave_ADDR>
 8006854:	e066      	b.n	8006924 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	091b      	lsrs	r3, r3, #4
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <HAL_I2C_EV_IRQHandler+0x226>
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	0a5b      	lsrs	r3, r3, #9
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 ff34 	bl	80076dc <I2C_Slave_STOPF>
 8006874:	e056      	b.n	8006924 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006876:	7bbb      	ldrb	r3, [r7, #14]
 8006878:	2b21      	cmp	r3, #33	; 0x21
 800687a:	d002      	beq.n	8006882 <HAL_I2C_EV_IRQHandler+0x232>
 800687c:	7bbb      	ldrb	r3, [r7, #14]
 800687e:	2b29      	cmp	r3, #41	; 0x29
 8006880:	d125      	bne.n	80068ce <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	09db      	lsrs	r3, r3, #7
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00f      	beq.n	80068ae <HAL_I2C_EV_IRQHandler+0x25e>
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	0a9b      	lsrs	r3, r3, #10
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	d009      	beq.n	80068ae <HAL_I2C_EV_IRQHandler+0x25e>
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	089b      	lsrs	r3, r3, #2
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d103      	bne.n	80068ae <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fe16 	bl	80074d8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068ac:	e039      	b.n	8006922 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	089b      	lsrs	r3, r3, #2
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d033      	beq.n	8006922 <HAL_I2C_EV_IRQHandler+0x2d2>
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	0a5b      	lsrs	r3, r3, #9
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d02d      	beq.n	8006922 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fe43 	bl	8007552 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068cc:	e029      	b.n	8006922 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	099b      	lsrs	r3, r3, #6
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00f      	beq.n	80068fa <HAL_I2C_EV_IRQHandler+0x2aa>
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	0a9b      	lsrs	r3, r3, #10
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d009      	beq.n	80068fa <HAL_I2C_EV_IRQHandler+0x2aa>
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	089b      	lsrs	r3, r3, #2
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d103      	bne.n	80068fa <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fe4e 	bl	8007594 <I2C_SlaveReceive_RXNE>
 80068f8:	e014      	b.n	8006924 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	089b      	lsrs	r3, r3, #2
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00e      	beq.n	8006924 <HAL_I2C_EV_IRQHandler+0x2d4>
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	0a5b      	lsrs	r3, r3, #9
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d008      	beq.n	8006924 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fe7c 	bl	8007610 <I2C_SlaveReceive_BTF>
 8006918:	e004      	b.n	8006924 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800691a:	bf00      	nop
 800691c:	e002      	b.n	8006924 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800691e:	bf00      	nop
 8006920:	e000      	b.n	8006924 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006922:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006924:	3720      	adds	r7, #32
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800692a:	b480      	push	{r7}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800693e:	b480      	push	{r7}
 8006940:	b083      	sub	sp, #12
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006946:	bf00      	nop
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800695a:	bf00      	nop
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800696e:	bf00      	nop
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	460b      	mov	r3, r1
 8006984:	70fb      	strb	r3, [r7, #3]
 8006986:	4613      	mov	r3, r2
 8006988:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b083      	sub	sp, #12
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80069b2:	bf00      	nop
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80069da:	bf00      	nop
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80069ee:	bf00      	nop
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a08:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a10:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d150      	bne.n	8006ac2 <I2C_MasterTransmit_TXE+0xc8>
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
 8006a22:	2b21      	cmp	r3, #33	; 0x21
 8006a24:	d14d      	bne.n	8006ac2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2b08      	cmp	r3, #8
 8006a2a:	d01d      	beq.n	8006a68 <I2C_MasterTransmit_TXE+0x6e>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	d01a      	beq.n	8006a68 <I2C_MasterTransmit_TXE+0x6e>
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a38:	d016      	beq.n	8006a68 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a48:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2211      	movs	r2, #17
 8006a4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f7ff ff62 	bl	800692a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a66:	e060      	b.n	8006b2a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a76:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a86:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b40      	cmp	r3, #64	; 0x40
 8006aa0:	d107      	bne.n	8006ab2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7ff ff7d 	bl	80069aa <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ab0:	e03b      	b.n	8006b2a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff ff35 	bl	800692a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ac0:	e033      	b.n	8006b2a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	2b21      	cmp	r3, #33	; 0x21
 8006ac6:	d005      	beq.n	8006ad4 <I2C_MasterTransmit_TXE+0xda>
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	2b40      	cmp	r3, #64	; 0x40
 8006acc:	d12d      	bne.n	8006b2a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
 8006ad0:	2b22      	cmp	r3, #34	; 0x22
 8006ad2:	d12a      	bne.n	8006b2a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d108      	bne.n	8006af0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aec:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006aee:	e01c      	b.n	8006b2a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b40      	cmp	r3, #64	; 0x40
 8006afa:	d103      	bne.n	8006b04 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f880 	bl	8006c02 <I2C_MemoryTransmit_TXE_BTF>
}
 8006b02:	e012      	b.n	8006b2a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	781a      	ldrb	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006b28:	e7ff      	b.n	8006b2a <I2C_MasterTransmit_TXE+0x130>
 8006b2a:	bf00      	nop
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b21      	cmp	r3, #33	; 0x21
 8006b4a:	d156      	bne.n	8006bfa <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d012      	beq.n	8006b7c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5a:	781a      	ldrb	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	3b01      	subs	r3, #1
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006b7a:	e03e      	b.n	8006bfa <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2b08      	cmp	r3, #8
 8006b80:	d01d      	beq.n	8006bbe <I2C_MasterTransmit_BTF+0x8c>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2b20      	cmp	r3, #32
 8006b86:	d01a      	beq.n	8006bbe <I2C_MasterTransmit_BTF+0x8c>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b8e:	d016      	beq.n	8006bbe <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b9e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2211      	movs	r2, #17
 8006ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7ff feb7 	bl	800692a <HAL_I2C_MasterTxCpltCallback>
}
 8006bbc:	e01d      	b.n	8006bfa <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bcc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bdc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff fe98 	bl	800692a <HAL_I2C_MasterTxCpltCallback>
}
 8006bfa:	bf00      	nop
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c10:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d11d      	bne.n	8006c56 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d10b      	bne.n	8006c3a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c32:	1c9a      	adds	r2, r3, #2
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006c38:	e06e      	b.n	8006d18 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	121b      	asrs	r3, r3, #8
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006c54:	e060      	b.n	8006d18 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d10b      	bne.n	8006c76 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006c74:	e050      	b.n	8006d18 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d14c      	bne.n	8006d18 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	2b22      	cmp	r3, #34	; 0x22
 8006c82:	d108      	bne.n	8006c96 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c92:	601a      	str	r2, [r3, #0]
}
 8006c94:	e040      	b.n	8006d18 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d015      	beq.n	8006ccc <I2C_MemoryTransmit_TXE_BTF+0xca>
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
 8006ca2:	2b21      	cmp	r3, #33	; 0x21
 8006ca4:	d112      	bne.n	8006ccc <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	781a      	ldrb	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	1c5a      	adds	r2, r3, #1
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006cca:	e025      	b.n	8006d18 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d120      	bne.n	8006d18 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
 8006cd8:	2b21      	cmp	r3, #33	; 0x21
 8006cda:	d11d      	bne.n	8006d18 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cea:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cfa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2220      	movs	r2, #32
 8006d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff fe49 	bl	80069aa <HAL_I2C_MemTxCpltCallback>
}
 8006d18:	bf00      	nop
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b22      	cmp	r3, #34	; 0x22
 8006d32:	f040 80a2 	bne.w	8006e7a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d921      	bls.n	8006d88 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	691a      	ldr	r2, [r3, #16]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	3b01      	subs	r3, #1
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	f040 8082 	bne.w	8006e7a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d84:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8006d86:	e078      	b.n	8006e7a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d074      	beq.n	8006e7a <I2C_MasterReceive_RXNE+0x15a>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d002      	beq.n	8006d9c <I2C_MasterReceive_RXNE+0x7c>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d16e      	bne.n	8006e7a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f001 fa69 	bl	8008274 <I2C_WaitOnSTOPRequestThroughIT>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d142      	bne.n	8006e2e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006db6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006dc6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	691a      	ldr	r2, [r3, #16]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	b2d2      	uxtb	r2, r2
 8006dd4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	1c5a      	adds	r2, r3, #1
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2220      	movs	r2, #32
 8006df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b40      	cmp	r3, #64	; 0x40
 8006e00:	d10a      	bne.n	8006e18 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f7ff fdd4 	bl	80069be <HAL_I2C_MemRxCpltCallback>
}
 8006e16:	e030      	b.n	8006e7a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2212      	movs	r2, #18
 8006e24:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7ff fd89 	bl	800693e <HAL_I2C_MasterRxCpltCallback>
}
 8006e2c:	e025      	b.n	8006e7a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e3c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	691a      	ldr	r2, [r3, #16]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2220      	movs	r2, #32
 8006e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7ff fdac 	bl	80069d2 <HAL_I2C_ErrorCallback>
}
 8006e7a:	bf00      	nop
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d11b      	bne.n	8006ed2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	691a      	ldr	r2, [r3, #16]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	b2d2      	uxtb	r2, r2
 8006eb6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006ed0:	e0bd      	b.n	800704e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d129      	bne.n	8006f30 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eea:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d00a      	beq.n	8006f08 <I2C_MasterReceive_BTF+0x86>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d007      	beq.n	8006f08 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f06:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	691a      	ldr	r2, [r3, #16]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	b2d2      	uxtb	r2, r2
 8006f14:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	1c5a      	adds	r2, r3, #1
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3b01      	subs	r3, #1
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f2e:	e08e      	b.n	800704e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d176      	bne.n	8007028 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d002      	beq.n	8006f46 <I2C_MasterReceive_BTF+0xc4>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b10      	cmp	r3, #16
 8006f44:	d108      	bne.n	8006f58 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	e019      	b.n	8006f8c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	d002      	beq.n	8006f64 <I2C_MasterReceive_BTF+0xe2>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d108      	bne.n	8006f76 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	e00a      	b.n	8006f8c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2b10      	cmp	r3, #16
 8006f7a:	d007      	beq.n	8006f8c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f8a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	691a      	ldr	r2, [r3, #16]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	b2d2      	uxtb	r2, r2
 8006f98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	691a      	ldr	r2, [r3, #16]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	b2d2      	uxtb	r2, r2
 8006fbe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006fe6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2220      	movs	r2, #32
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b40      	cmp	r3, #64	; 0x40
 8006ffa:	d10a      	bne.n	8007012 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7ff fcd7 	bl	80069be <HAL_I2C_MemRxCpltCallback>
}
 8007010:	e01d      	b.n	800704e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2212      	movs	r2, #18
 800701e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7ff fc8c 	bl	800693e <HAL_I2C_MasterRxCpltCallback>
}
 8007026:	e012      	b.n	800704e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	691a      	ldr	r2, [r3, #16]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007044:	b29b      	uxth	r3, r3
 8007046:	3b01      	subs	r3, #1
 8007048:	b29a      	uxth	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800704e:	bf00      	nop
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b40      	cmp	r3, #64	; 0x40
 8007068:	d117      	bne.n	800709a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800706e:	2b00      	cmp	r3, #0
 8007070:	d109      	bne.n	8007086 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007076:	b2db      	uxtb	r3, r3
 8007078:	461a      	mov	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007082:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007084:	e067      	b.n	8007156 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708a:	b2db      	uxtb	r3, r3
 800708c:	f043 0301 	orr.w	r3, r3, #1
 8007090:	b2da      	uxtb	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	611a      	str	r2, [r3, #16]
}
 8007098:	e05d      	b.n	8007156 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070a2:	d133      	bne.n	800710c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b21      	cmp	r3, #33	; 0x21
 80070ae:	d109      	bne.n	80070c4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	461a      	mov	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070c0:	611a      	str	r2, [r3, #16]
 80070c2:	e008      	b.n	80070d6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	f043 0301 	orr.w	r3, r3, #1
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d004      	beq.n	80070e8 <I2C_Master_SB+0x92>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d108      	bne.n	80070fa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d032      	beq.n	8007156 <I2C_Master_SB+0x100>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d02d      	beq.n	8007156 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685a      	ldr	r2, [r3, #4]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007108:	605a      	str	r2, [r3, #4]
}
 800710a:	e024      	b.n	8007156 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10e      	bne.n	8007132 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007118:	b29b      	uxth	r3, r3
 800711a:	11db      	asrs	r3, r3, #7
 800711c:	b2db      	uxtb	r3, r3
 800711e:	f003 0306 	and.w	r3, r3, #6
 8007122:	b2db      	uxtb	r3, r3
 8007124:	f063 030f 	orn	r3, r3, #15
 8007128:	b2da      	uxtb	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	611a      	str	r2, [r3, #16]
}
 8007130:	e011      	b.n	8007156 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007136:	2b01      	cmp	r3, #1
 8007138:	d10d      	bne.n	8007156 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713e:	b29b      	uxth	r3, r3
 8007140:	11db      	asrs	r3, r3, #7
 8007142:	b2db      	uxtb	r3, r3
 8007144:	f003 0306 	and.w	r3, r3, #6
 8007148:	b2db      	uxtb	r3, r3
 800714a:	f063 030e 	orn	r3, r3, #14
 800714e:	b2da      	uxtb	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	611a      	str	r2, [r3, #16]
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716e:	b2da      	uxtb	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717a:	2b00      	cmp	r3, #0
 800717c:	d103      	bne.n	8007186 <I2C_Master_ADD10+0x24>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007182:	2b00      	cmp	r3, #0
 8007184:	d011      	beq.n	80071aa <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800718c:	2b00      	cmp	r3, #0
 800718e:	d104      	bne.n	800719a <I2C_Master_ADD10+0x38>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007196:	2b00      	cmp	r3, #0
 8007198:	d007      	beq.n	80071aa <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071a8:	605a      	str	r2, [r3, #4]
    }
  }
}
 80071aa:	bf00      	nop
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b091      	sub	sp, #68	; 0x44
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071cc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b22      	cmp	r3, #34	; 0x22
 80071de:	f040 8169 	bne.w	80074b4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10f      	bne.n	800720a <I2C_Master_ADDR+0x54>
 80071ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80071ee:	2b40      	cmp	r3, #64	; 0x40
 80071f0:	d10b      	bne.n	800720a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071f2:	2300      	movs	r3, #0
 80071f4:	633b      	str	r3, [r7, #48]	; 0x30
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	633b      	str	r3, [r7, #48]	; 0x30
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	633b      	str	r3, [r7, #48]	; 0x30
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	e160      	b.n	80074cc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800720e:	2b00      	cmp	r3, #0
 8007210:	d11d      	bne.n	800724e <I2C_Master_ADDR+0x98>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800721a:	d118      	bne.n	800724e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800721c:	2300      	movs	r3, #0
 800721e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007230:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007240:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	651a      	str	r2, [r3, #80]	; 0x50
 800724c:	e13e      	b.n	80074cc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007252:	b29b      	uxth	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	d113      	bne.n	8007280 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007258:	2300      	movs	r3, #0
 800725a:	62bb      	str	r3, [r7, #40]	; 0x28
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	62bb      	str	r3, [r7, #40]	; 0x28
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	62bb      	str	r3, [r7, #40]	; 0x28
 800726c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	e115      	b.n	80074ac <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007284:	b29b      	uxth	r3, r3
 8007286:	2b01      	cmp	r3, #1
 8007288:	f040 808a 	bne.w	80073a0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007292:	d137      	bne.n	8007304 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072a2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072b2:	d113      	bne.n	80072dc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072c2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072c4:	2300      	movs	r3, #0
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	627b      	str	r3, [r7, #36]	; 0x24
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	e0e7      	b.n	80074ac <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072dc:	2300      	movs	r3, #0
 80072de:	623b      	str	r3, [r7, #32]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	623b      	str	r3, [r7, #32]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	623b      	str	r3, [r7, #32]
 80072f0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	e0d3      	b.n	80074ac <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007306:	2b08      	cmp	r3, #8
 8007308:	d02e      	beq.n	8007368 <I2C_Master_ADDR+0x1b2>
 800730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730c:	2b20      	cmp	r3, #32
 800730e:	d02b      	beq.n	8007368 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007312:	2b12      	cmp	r3, #18
 8007314:	d102      	bne.n	800731c <I2C_Master_ADDR+0x166>
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	2b01      	cmp	r3, #1
 800731a:	d125      	bne.n	8007368 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800731c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731e:	2b04      	cmp	r3, #4
 8007320:	d00e      	beq.n	8007340 <I2C_Master_ADDR+0x18a>
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	2b02      	cmp	r3, #2
 8007326:	d00b      	beq.n	8007340 <I2C_Master_ADDR+0x18a>
 8007328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732a:	2b10      	cmp	r3, #16
 800732c:	d008      	beq.n	8007340 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	e007      	b.n	8007350 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800734e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007350:	2300      	movs	r3, #0
 8007352:	61fb      	str	r3, [r7, #28]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	61fb      	str	r3, [r7, #28]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	61fb      	str	r3, [r7, #28]
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	e0a1      	b.n	80074ac <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007376:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007378:	2300      	movs	r3, #0
 800737a:	61bb      	str	r3, [r7, #24]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	61bb      	str	r3, [r7, #24]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	61bb      	str	r3, [r7, #24]
 800738c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	e085      	b.n	80074ac <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d14d      	bne.n	8007446 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	2b04      	cmp	r3, #4
 80073ae:	d016      	beq.n	80073de <I2C_Master_ADDR+0x228>
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d013      	beq.n	80073de <I2C_Master_ADDR+0x228>
 80073b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b8:	2b10      	cmp	r3, #16
 80073ba:	d010      	beq.n	80073de <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ca:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	e007      	b.n	80073ee <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073ec:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073fc:	d117      	bne.n	800742e <I2C_Master_ADDR+0x278>
 80073fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007400:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007404:	d00b      	beq.n	800741e <I2C_Master_ADDR+0x268>
 8007406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007408:	2b01      	cmp	r3, #1
 800740a:	d008      	beq.n	800741e <I2C_Master_ADDR+0x268>
 800740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740e:	2b08      	cmp	r3, #8
 8007410:	d005      	beq.n	800741e <I2C_Master_ADDR+0x268>
 8007412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007414:	2b10      	cmp	r3, #16
 8007416:	d002      	beq.n	800741e <I2C_Master_ADDR+0x268>
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	2b20      	cmp	r3, #32
 800741c:	d107      	bne.n	800742e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800742c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800742e:	2300      	movs	r3, #0
 8007430:	617b      	str	r3, [r7, #20]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	617b      	str	r3, [r7, #20]
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	e032      	b.n	80074ac <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007454:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007464:	d117      	bne.n	8007496 <I2C_Master_ADDR+0x2e0>
 8007466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007468:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800746c:	d00b      	beq.n	8007486 <I2C_Master_ADDR+0x2d0>
 800746e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007470:	2b01      	cmp	r3, #1
 8007472:	d008      	beq.n	8007486 <I2C_Master_ADDR+0x2d0>
 8007474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007476:	2b08      	cmp	r3, #8
 8007478:	d005      	beq.n	8007486 <I2C_Master_ADDR+0x2d0>
 800747a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747c:	2b10      	cmp	r3, #16
 800747e:	d002      	beq.n	8007486 <I2C_Master_ADDR+0x2d0>
 8007480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007482:	2b20      	cmp	r3, #32
 8007484:	d107      	bne.n	8007496 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007494:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007496:	2300      	movs	r3, #0
 8007498:	613b      	str	r3, [r7, #16]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	613b      	str	r3, [r7, #16]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	613b      	str	r3, [r7, #16]
 80074aa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80074b2:	e00b      	b.n	80074cc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	60fb      	str	r3, [r7, #12]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	68fb      	ldr	r3, [r7, #12]
}
 80074ca:	e7ff      	b.n	80074cc <I2C_Master_ADDR+0x316>
 80074cc:	bf00      	nop
 80074ce:	3744      	adds	r7, #68	; 0x44
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d02b      	beq.n	800754a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	781a      	ldrb	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800750c:	b29b      	uxth	r3, r3
 800750e:	3b01      	subs	r3, #1
 8007510:	b29a      	uxth	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751a:	b29b      	uxth	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d114      	bne.n	800754a <I2C_SlaveTransmit_TXE+0x72>
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	2b29      	cmp	r3, #41	; 0x29
 8007524:	d111      	bne.n	800754a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007534:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2221      	movs	r2, #33	; 0x21
 800753a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2228      	movs	r2, #40	; 0x28
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7ff fa04 	bl	8006952 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800754a:	bf00      	nop
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755e:	b29b      	uxth	r3, r3
 8007560:	2b00      	cmp	r3, #0
 8007562:	d011      	beq.n	8007588 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007568:	781a      	ldrb	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757e:	b29b      	uxth	r3, r3
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d02c      	beq.n	8007608 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	691a      	ldr	r2, [r3, #16]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	b2d2      	uxtb	r2, r2
 80075ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	3b01      	subs	r3, #1
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d8:	b29b      	uxth	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d114      	bne.n	8007608 <I2C_SlaveReceive_RXNE+0x74>
 80075de:	7bfb      	ldrb	r3, [r7, #15]
 80075e0:	2b2a      	cmp	r3, #42	; 0x2a
 80075e2:	d111      	bne.n	8007608 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075f2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2222      	movs	r2, #34	; 0x22
 80075f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2228      	movs	r2, #40	; 0x28
 80075fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7ff f9af 	bl	8006966 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007608:	bf00      	nop
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761c:	b29b      	uxth	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d012      	beq.n	8007648 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	691a      	ldr	r2, [r3, #16]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	b2d2      	uxtb	r2, r2
 800762e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763e:	b29b      	uxth	r3, r3
 8007640:	3b01      	subs	r3, #1
 8007642:	b29a      	uxth	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007668:	b2db      	uxtb	r3, r3
 800766a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800766e:	2b28      	cmp	r3, #40	; 0x28
 8007670:	d127      	bne.n	80076c2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007680:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	089b      	lsrs	r3, r3, #2
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800768e:	2301      	movs	r3, #1
 8007690:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	09db      	lsrs	r3, r3, #7
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d103      	bne.n	80076a6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	81bb      	strh	r3, [r7, #12]
 80076a4:	e002      	b.n	80076ac <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80076b4:	89ba      	ldrh	r2, [r7, #12]
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7ff f95d 	bl	800697a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80076c0:	e008      	b.n	80076d4 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f06f 0202 	mvn.w	r2, #2
 80076ca:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80076d4:	bf00      	nop
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ea:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685a      	ldr	r2, [r3, #4]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80076fa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80076fc:	2300      	movs	r3, #0
 80076fe:	60bb      	str	r3, [r7, #8]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	60bb      	str	r3, [r7, #8]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f042 0201 	orr.w	r2, r2, #1
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007728:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007738:	d172      	bne.n	8007820 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800773a:	7bfb      	ldrb	r3, [r7, #15]
 800773c:	2b22      	cmp	r3, #34	; 0x22
 800773e:	d002      	beq.n	8007746 <I2C_Slave_STOPF+0x6a>
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	2b2a      	cmp	r3, #42	; 0x2a
 8007744:	d135      	bne.n	80077b2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	b29a      	uxth	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007758:	b29b      	uxth	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d005      	beq.n	800776a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	f043 0204 	orr.w	r2, r3, #4
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007778:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777e:	4618      	mov	r0, r3
 8007780:	f7fe f946 	bl	8005a10 <HAL_DMA_GetState>
 8007784:	4603      	mov	r3, r0
 8007786:	2b01      	cmp	r3, #1
 8007788:	d049      	beq.n	800781e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778e:	4a69      	ldr	r2, [pc, #420]	; (8007934 <I2C_Slave_STOPF+0x258>)
 8007790:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007796:	4618      	mov	r0, r3
 8007798:	f7fe f918 	bl	80059cc <HAL_DMA_Abort_IT>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d03d      	beq.n	800781e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077ac:	4610      	mov	r0, r2
 80077ae:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077b0:	e035      	b.n	800781e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d005      	beq.n	80077d6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ce:	f043 0204 	orr.w	r2, r3, #4
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fe f910 	bl	8005a10 <HAL_DMA_GetState>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d014      	beq.n	8007820 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fa:	4a4e      	ldr	r2, [pc, #312]	; (8007934 <I2C_Slave_STOPF+0x258>)
 80077fc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe f8e2 	bl	80059cc <HAL_DMA_Abort_IT>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d008      	beq.n	8007820 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007818:	4610      	mov	r0, r2
 800781a:	4798      	blx	r3
 800781c:	e000      	b.n	8007820 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800781e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007824:	b29b      	uxth	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d03e      	beq.n	80078a8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	f003 0304 	and.w	r3, r3, #4
 8007834:	2b04      	cmp	r3, #4
 8007836:	d112      	bne.n	800785e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	691a      	ldr	r2, [r3, #16]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007842:	b2d2      	uxtb	r2, r2
 8007844:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007854:	b29b      	uxth	r3, r3
 8007856:	3b01      	subs	r3, #1
 8007858:	b29a      	uxth	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007868:	2b40      	cmp	r3, #64	; 0x40
 800786a:	d112      	bne.n	8007892 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	691a      	ldr	r2, [r3, #16]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007876:	b2d2      	uxtb	r2, r2
 8007878:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787e:	1c5a      	adds	r2, r3, #1
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007888:	b29b      	uxth	r3, r3
 800788a:	3b01      	subs	r3, #1
 800788c:	b29a      	uxth	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007896:	b29b      	uxth	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d005      	beq.n	80078a8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a0:	f043 0204 	orr.w	r2, r3, #4
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d003      	beq.n	80078b8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f843 	bl	800793c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80078b6:	e039      	b.n	800792c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
 80078ba:	2b2a      	cmp	r3, #42	; 0x2a
 80078bc:	d109      	bne.n	80078d2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2228      	movs	r2, #40	; 0x28
 80078c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff f84a 	bl	8006966 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b28      	cmp	r3, #40	; 0x28
 80078dc:	d111      	bne.n	8007902 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a15      	ldr	r2, [pc, #84]	; (8007938 <I2C_Slave_STOPF+0x25c>)
 80078e2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2220      	movs	r2, #32
 80078ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7ff f84b 	bl	8006996 <HAL_I2C_ListenCpltCallback>
}
 8007900:	e014      	b.n	800792c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007906:	2b22      	cmp	r3, #34	; 0x22
 8007908:	d002      	beq.n	8007910 <I2C_Slave_STOPF+0x234>
 800790a:	7bfb      	ldrb	r3, [r7, #15]
 800790c:	2b22      	cmp	r3, #34	; 0x22
 800790e:	d10d      	bne.n	800792c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2220      	movs	r2, #32
 800791a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7ff f81d 	bl	8006966 <HAL_I2C_SlaveRxCpltCallback>
}
 800792c:	bf00      	nop
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	08007e75 	.word	0x08007e75
 8007938:	ffff0000 	.word	0xffff0000

0800793c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800794a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007952:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007954:	7bbb      	ldrb	r3, [r7, #14]
 8007956:	2b10      	cmp	r3, #16
 8007958:	d002      	beq.n	8007960 <I2C_ITError+0x24>
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	2b40      	cmp	r3, #64	; 0x40
 800795e:	d10a      	bne.n	8007976 <I2C_ITError+0x3a>
 8007960:	7bfb      	ldrb	r3, [r7, #15]
 8007962:	2b22      	cmp	r3, #34	; 0x22
 8007964:	d107      	bne.n	8007976 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007974:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800797c:	2b28      	cmp	r3, #40	; 0x28
 800797e:	d107      	bne.n	8007990 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2228      	movs	r2, #40	; 0x28
 800798a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800798e:	e015      	b.n	80079bc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800799a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800799e:	d00a      	beq.n	80079b6 <I2C_ITError+0x7a>
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	2b60      	cmp	r3, #96	; 0x60
 80079a4:	d007      	beq.n	80079b6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ca:	d162      	bne.n	8007a92 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079da:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d020      	beq.n	8007a2c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ee:	4a6a      	ldr	r2, [pc, #424]	; (8007b98 <I2C_ITError+0x25c>)
 80079f0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fd ffe8 	bl	80059cc <HAL_DMA_Abort_IT>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 8089 	beq.w	8007b16 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f022 0201 	bic.w	r2, r2, #1
 8007a12:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a26:	4610      	mov	r0, r2
 8007a28:	4798      	blx	r3
 8007a2a:	e074      	b.n	8007b16 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a30:	4a59      	ldr	r2, [pc, #356]	; (8007b98 <I2C_ITError+0x25c>)
 8007a32:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fd ffc7 	bl	80059cc <HAL_DMA_Abort_IT>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d068      	beq.n	8007b16 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4e:	2b40      	cmp	r3, #64	; 0x40
 8007a50:	d10b      	bne.n	8007a6a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	691a      	ldr	r2, [r3, #16]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	b2d2      	uxtb	r2, r2
 8007a5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	1c5a      	adds	r2, r3, #1
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f022 0201 	bic.w	r2, r2, #1
 8007a78:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	4798      	blx	r3
 8007a90:	e041      	b.n	8007b16 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b60      	cmp	r3, #96	; 0x60
 8007a9c:	d125      	bne.n	8007aea <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab6:	2b40      	cmp	r3, #64	; 0x40
 8007ab8:	d10b      	bne.n	8007ad2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	691a      	ldr	r2, [r3, #16]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	b2d2      	uxtb	r2, r2
 8007ac6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007acc:	1c5a      	adds	r2, r3, #1
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f022 0201 	bic.w	r2, r2, #1
 8007ae0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7fe ff7f 	bl	80069e6 <HAL_I2C_AbortCpltCallback>
 8007ae8:	e015      	b.n	8007b16 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	695b      	ldr	r3, [r3, #20]
 8007af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af4:	2b40      	cmp	r3, #64	; 0x40
 8007af6:	d10b      	bne.n	8007b10 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	691a      	ldr	r2, [r3, #16]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	b2d2      	uxtb	r2, r2
 8007b04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7fe ff5e 	bl	80069d2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10e      	bne.n	8007b44 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d109      	bne.n	8007b44 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d104      	bne.n	8007b44 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d007      	beq.n	8007b54 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685a      	ldr	r2, [r3, #4]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b52:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b5a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	2b04      	cmp	r3, #4
 8007b66:	d113      	bne.n	8007b90 <I2C_ITError+0x254>
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
 8007b6a:	2b28      	cmp	r3, #40	; 0x28
 8007b6c:	d110      	bne.n	8007b90 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a0a      	ldr	r2, [pc, #40]	; (8007b9c <I2C_ITError+0x260>)
 8007b72:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2220      	movs	r2, #32
 8007b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f7fe ff03 	bl	8006996 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007b90:	bf00      	nop
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	08007e75 	.word	0x08007e75
 8007b9c:	ffff0000 	.word	0xffff0000

08007ba0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af02      	add	r7, sp, #8
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	607a      	str	r2, [r7, #4]
 8007baa:	603b      	str	r3, [r7, #0]
 8007bac:	460b      	mov	r3, r1
 8007bae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2b08      	cmp	r3, #8
 8007bba:	d006      	beq.n	8007bca <I2C_MasterRequestWrite+0x2a>
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d003      	beq.n	8007bca <I2C_MasterRequestWrite+0x2a>
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007bc8:	d108      	bne.n	8007bdc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	e00b      	b.n	8007bf4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be0:	2b12      	cmp	r3, #18
 8007be2:	d107      	bne.n	8007bf4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bf2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 f9df 	bl	8007fc4 <I2C_WaitOnFlagUntilTimeout>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00d      	beq.n	8007c28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c1a:	d103      	bne.n	8007c24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e035      	b.n	8007c94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c30:	d108      	bne.n	8007c44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c32:	897b      	ldrh	r3, [r7, #10]
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	461a      	mov	r2, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c40:	611a      	str	r2, [r3, #16]
 8007c42:	e01b      	b.n	8007c7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007c44:	897b      	ldrh	r3, [r7, #10]
 8007c46:	11db      	asrs	r3, r3, #7
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	f003 0306 	and.w	r3, r3, #6
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	f063 030f 	orn	r3, r3, #15
 8007c54:	b2da      	uxtb	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	490e      	ldr	r1, [pc, #56]	; (8007c9c <I2C_MasterRequestWrite+0xfc>)
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f000 fa05 	bl	8008072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e010      	b.n	8007c94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007c72:	897b      	ldrh	r3, [r7, #10]
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	4907      	ldr	r1, [pc, #28]	; (8007ca0 <I2C_MasterRequestWrite+0x100>)
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 f9f5 	bl	8008072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e000      	b.n	8007c94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3718      	adds	r7, #24
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	00010008 	.word	0x00010008
 8007ca0:	00010002 	.word	0x00010002

08007ca4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	4608      	mov	r0, r1
 8007cae:	4611      	mov	r1, r2
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	817b      	strh	r3, [r7, #10]
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	813b      	strh	r3, [r7, #8]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ccc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 f96a 	bl	8007fc4 <I2C_WaitOnFlagUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00d      	beq.n	8007d12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d04:	d103      	bne.n	8007d0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e0aa      	b.n	8007e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d12:	897b      	ldrh	r3, [r7, #10]
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	461a      	mov	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	6a3a      	ldr	r2, [r7, #32]
 8007d26:	4952      	ldr	r1, [pc, #328]	; (8007e70 <I2C_RequestMemoryRead+0x1cc>)
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 f9a2 	bl	8008072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e097      	b.n	8007e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d38:	2300      	movs	r3, #0
 8007d3a:	617b      	str	r3, [r7, #20]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	617b      	str	r3, [r7, #20]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	699b      	ldr	r3, [r3, #24]
 8007d4a:	617b      	str	r3, [r7, #20]
 8007d4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d50:	6a39      	ldr	r1, [r7, #32]
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 fa0c 	bl	8008170 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00d      	beq.n	8007d7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	d107      	bne.n	8007d76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e076      	b.n	8007e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d7a:	88fb      	ldrh	r3, [r7, #6]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d105      	bne.n	8007d8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d80:	893b      	ldrh	r3, [r7, #8]
 8007d82:	b2da      	uxtb	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	611a      	str	r2, [r3, #16]
 8007d8a:	e021      	b.n	8007dd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d8c:	893b      	ldrh	r3, [r7, #8]
 8007d8e:	0a1b      	lsrs	r3, r3, #8
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d9c:	6a39      	ldr	r1, [r7, #32]
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f000 f9e6 	bl	8008170 <I2C_WaitOnTXEFlagUntilTimeout>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00d      	beq.n	8007dc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d107      	bne.n	8007dc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e050      	b.n	8007e68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007dc6:	893b      	ldrh	r3, [r7, #8]
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd2:	6a39      	ldr	r1, [r7, #32]
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f000 f9cb 	bl	8008170 <I2C_WaitOnTXEFlagUntilTimeout>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00d      	beq.n	8007dfc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de4:	2b04      	cmp	r3, #4
 8007de6:	d107      	bne.n	8007df8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007df6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e035      	b.n	8007e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	6a3b      	ldr	r3, [r7, #32]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 f8d3 	bl	8007fc4 <I2C_WaitOnFlagUntilTimeout>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00d      	beq.n	8007e40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e32:	d103      	bne.n	8007e3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e013      	b.n	8007e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e40:	897b      	ldrh	r3, [r7, #10]
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	f043 0301 	orr.w	r3, r3, #1
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e52:	6a3a      	ldr	r2, [r7, #32]
 8007e54:	4906      	ldr	r1, [pc, #24]	; (8007e70 <I2C_RequestMemoryRead+0x1cc>)
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f000 f90b 	bl	8008072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e000      	b.n	8007e68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	00010002 	.word	0x00010002

08007e74 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e84:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e8c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007e8e:	4b4b      	ldr	r3, [pc, #300]	; (8007fbc <I2C_DMAAbort+0x148>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	08db      	lsrs	r3, r3, #3
 8007e94:	4a4a      	ldr	r2, [pc, #296]	; (8007fc0 <I2C_DMAAbort+0x14c>)
 8007e96:	fba2 2303 	umull	r2, r3, r2, r3
 8007e9a:	0a1a      	lsrs	r2, r3, #8
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	00da      	lsls	r2, r3, #3
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d106      	bne.n	8007ebc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	f043 0220 	orr.w	r2, r3, #32
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007eba:	e00a      	b.n	8007ed2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ed0:	d0ea      	beq.n	8007ea8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d003      	beq.n	8007ee2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ede:	2200      	movs	r2, #0
 8007ee0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eee:	2200      	movs	r2, #0
 8007ef0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f00:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2200      	movs	r2, #0
 8007f06:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f14:	2200      	movs	r2, #0
 8007f16:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d003      	beq.n	8007f28 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f24:	2200      	movs	r2, #0
 8007f26:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f022 0201 	bic.w	r2, r2, #1
 8007f36:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b60      	cmp	r3, #96	; 0x60
 8007f42:	d10e      	bne.n	8007f62 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2220      	movs	r2, #32
 8007f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	2200      	movs	r2, #0
 8007f58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007f5a:	6978      	ldr	r0, [r7, #20]
 8007f5c:	f7fe fd43 	bl	80069e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007f60:	e027      	b.n	8007fb2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f62:	7cfb      	ldrb	r3, [r7, #19]
 8007f64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f68:	2b28      	cmp	r3, #40	; 0x28
 8007f6a:	d117      	bne.n	8007f9c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f042 0201 	orr.w	r2, r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f8a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	2228      	movs	r2, #40	; 0x28
 8007f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007f9a:	e007      	b.n	8007fac <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007fac:	6978      	ldr	r0, [r7, #20]
 8007fae:	f7fe fd10 	bl	80069d2 <HAL_I2C_ErrorCallback>
}
 8007fb2:	bf00      	nop
 8007fb4:	3718      	adds	r7, #24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	20000008 	.word	0x20000008
 8007fc0:	14f8b589 	.word	0x14f8b589

08007fc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	603b      	str	r3, [r7, #0]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fd4:	e025      	b.n	8008022 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fdc:	d021      	beq.n	8008022 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fde:	f7fc fd89 	bl	8004af4 <HAL_GetTick>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d302      	bcc.n	8007ff4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d116      	bne.n	8008022 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2220      	movs	r2, #32
 8007ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800e:	f043 0220 	orr.w	r2, r3, #32
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e023      	b.n	800806a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	0c1b      	lsrs	r3, r3, #16
 8008026:	b2db      	uxtb	r3, r3
 8008028:	2b01      	cmp	r3, #1
 800802a:	d10d      	bne.n	8008048 <I2C_WaitOnFlagUntilTimeout+0x84>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	43da      	mvns	r2, r3
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	4013      	ands	r3, r2
 8008038:	b29b      	uxth	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	bf0c      	ite	eq
 800803e:	2301      	moveq	r3, #1
 8008040:	2300      	movne	r3, #0
 8008042:	b2db      	uxtb	r3, r3
 8008044:	461a      	mov	r2, r3
 8008046:	e00c      	b.n	8008062 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	43da      	mvns	r2, r3
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	4013      	ands	r3, r2
 8008054:	b29b      	uxth	r3, r3
 8008056:	2b00      	cmp	r3, #0
 8008058:	bf0c      	ite	eq
 800805a:	2301      	moveq	r3, #1
 800805c:	2300      	movne	r3, #0
 800805e:	b2db      	uxtb	r3, r3
 8008060:	461a      	mov	r2, r3
 8008062:	79fb      	ldrb	r3, [r7, #7]
 8008064:	429a      	cmp	r2, r3
 8008066:	d0b6      	beq.n	8007fd6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	60f8      	str	r0, [r7, #12]
 800807a:	60b9      	str	r1, [r7, #8]
 800807c:	607a      	str	r2, [r7, #4]
 800807e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008080:	e051      	b.n	8008126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800808c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008090:	d123      	bne.n	80080da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80080aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2220      	movs	r2, #32
 80080b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c6:	f043 0204 	orr.w	r2, r3, #4
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e046      	b.n	8008168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080e0:	d021      	beq.n	8008126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080e2:	f7fc fd07 	bl	8004af4 <HAL_GetTick>
 80080e6:	4602      	mov	r2, r0
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d302      	bcc.n	80080f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d116      	bne.n	8008126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2220      	movs	r2, #32
 8008102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	f043 0220 	orr.w	r2, r3, #32
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e020      	b.n	8008168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	0c1b      	lsrs	r3, r3, #16
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b01      	cmp	r3, #1
 800812e:	d10c      	bne.n	800814a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	43da      	mvns	r2, r3
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	4013      	ands	r3, r2
 800813c:	b29b      	uxth	r3, r3
 800813e:	2b00      	cmp	r3, #0
 8008140:	bf14      	ite	ne
 8008142:	2301      	movne	r3, #1
 8008144:	2300      	moveq	r3, #0
 8008146:	b2db      	uxtb	r3, r3
 8008148:	e00b      	b.n	8008162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	43da      	mvns	r2, r3
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	4013      	ands	r3, r2
 8008156:	b29b      	uxth	r3, r3
 8008158:	2b00      	cmp	r3, #0
 800815a:	bf14      	ite	ne
 800815c:	2301      	movne	r3, #1
 800815e:	2300      	moveq	r3, #0
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d18d      	bne.n	8008082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800817c:	e02d      	b.n	80081da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 f900 	bl	8008384 <I2C_IsAcknowledgeFailed>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e02d      	b.n	80081ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008194:	d021      	beq.n	80081da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008196:	f7fc fcad 	bl	8004af4 <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d302      	bcc.n	80081ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d116      	bne.n	80081da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2220      	movs	r2, #32
 80081b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c6:	f043 0220 	orr.w	r2, r3, #32
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e007      	b.n	80081ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e4:	2b80      	cmp	r3, #128	; 0x80
 80081e6:	d1ca      	bne.n	800817e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b084      	sub	sp, #16
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	60f8      	str	r0, [r7, #12]
 80081fa:	60b9      	str	r1, [r7, #8]
 80081fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80081fe:	e02d      	b.n	800825c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008200:	68f8      	ldr	r0, [r7, #12]
 8008202:	f000 f8bf 	bl	8008384 <I2C_IsAcknowledgeFailed>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e02d      	b.n	800826c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008216:	d021      	beq.n	800825c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008218:	f7fc fc6c 	bl	8004af4 <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	429a      	cmp	r2, r3
 8008226:	d302      	bcc.n	800822e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d116      	bne.n	800825c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2220      	movs	r2, #32
 8008238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008248:	f043 0220 	orr.w	r2, r3, #32
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e007      	b.n	800826c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	f003 0304 	and.w	r3, r3, #4
 8008266:	2b04      	cmp	r3, #4
 8008268:	d1ca      	bne.n	8008200 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800827c:	2300      	movs	r3, #0
 800827e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008280:	4b13      	ldr	r3, [pc, #76]	; (80082d0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	08db      	lsrs	r3, r3, #3
 8008286:	4a13      	ldr	r2, [pc, #76]	; (80082d4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008288:	fba2 2303 	umull	r2, r3, r2, r3
 800828c:	0a1a      	lsrs	r2, r3, #8
 800828e:	4613      	mov	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	3b01      	subs	r3, #1
 800829a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d107      	bne.n	80082b2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a6:	f043 0220 	orr.w	r2, r3, #32
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e008      	b.n	80082c4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082c0:	d0e9      	beq.n	8008296 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	20000008 	.word	0x20000008
 80082d4:	14f8b589 	.word	0x14f8b589

080082d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082e4:	e042      	b.n	800836c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	f003 0310 	and.w	r3, r3, #16
 80082f0:	2b10      	cmp	r3, #16
 80082f2:	d119      	bne.n	8008328 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f06f 0210 	mvn.w	r2, #16
 80082fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2220      	movs	r2, #32
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e029      	b.n	800837c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008328:	f7fc fbe4 	bl	8004af4 <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	429a      	cmp	r2, r3
 8008336:	d302      	bcc.n	800833e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d116      	bne.n	800836c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2220      	movs	r2, #32
 8008348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008358:	f043 0220 	orr.w	r2, r3, #32
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	e007      	b.n	800837c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008376:	2b40      	cmp	r3, #64	; 0x40
 8008378:	d1b5      	bne.n	80082e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800839a:	d11b      	bne.n	80083d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80083a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2220      	movs	r2, #32
 80083b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c0:	f043 0204 	orr.w	r2, r3, #4
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e000      	b.n	80083d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ee:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80083f2:	d103      	bne.n	80083fc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80083fa:	e007      	b.n	800840c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008400:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008404:	d102      	bne.n	800840c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2208      	movs	r2, #8
 800840a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800841a:	b08f      	sub	sp, #60	; 0x3c
 800841c:	af0a      	add	r7, sp, #40	; 0x28
 800841e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e10f      	b.n	800864a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b00      	cmp	r3, #0
 800843a:	d106      	bne.n	800844a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f006 fc3d 	bl	800ecc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2203      	movs	r2, #3
 800844e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800845a:	2b00      	cmp	r3, #0
 800845c:	d102      	bne.n	8008464 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4618      	mov	r0, r3
 800846a:	f002 f92c 	bl	800a6c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	603b      	str	r3, [r7, #0]
 8008474:	687e      	ldr	r6, [r7, #4]
 8008476:	466d      	mov	r5, sp
 8008478:	f106 0410 	add.w	r4, r6, #16
 800847c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800847e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008484:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008488:	e885 0003 	stmia.w	r5, {r0, r1}
 800848c:	1d33      	adds	r3, r6, #4
 800848e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008490:	6838      	ldr	r0, [r7, #0]
 8008492:	f002 f803 	bl	800a49c <USB_CoreInit>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d005      	beq.n	80084a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2202      	movs	r2, #2
 80084a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e0d0      	b.n	800864a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2100      	movs	r1, #0
 80084ae:	4618      	mov	r0, r3
 80084b0:	f002 f91a 	bl	800a6e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084b4:	2300      	movs	r3, #0
 80084b6:	73fb      	strb	r3, [r7, #15]
 80084b8:	e04a      	b.n	8008550 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80084ba:	7bfa      	ldrb	r2, [r7, #15]
 80084bc:	6879      	ldr	r1, [r7, #4]
 80084be:	4613      	mov	r3, r2
 80084c0:	00db      	lsls	r3, r3, #3
 80084c2:	1a9b      	subs	r3, r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	440b      	add	r3, r1
 80084c8:	333d      	adds	r3, #61	; 0x3d
 80084ca:	2201      	movs	r2, #1
 80084cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80084ce:	7bfa      	ldrb	r2, [r7, #15]
 80084d0:	6879      	ldr	r1, [r7, #4]
 80084d2:	4613      	mov	r3, r2
 80084d4:	00db      	lsls	r3, r3, #3
 80084d6:	1a9b      	subs	r3, r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	440b      	add	r3, r1
 80084dc:	333c      	adds	r3, #60	; 0x3c
 80084de:	7bfa      	ldrb	r2, [r7, #15]
 80084e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80084e2:	7bfa      	ldrb	r2, [r7, #15]
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	b298      	uxth	r0, r3
 80084e8:	6879      	ldr	r1, [r7, #4]
 80084ea:	4613      	mov	r3, r2
 80084ec:	00db      	lsls	r3, r3, #3
 80084ee:	1a9b      	subs	r3, r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	440b      	add	r3, r1
 80084f4:	3342      	adds	r3, #66	; 0x42
 80084f6:	4602      	mov	r2, r0
 80084f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80084fa:	7bfa      	ldrb	r2, [r7, #15]
 80084fc:	6879      	ldr	r1, [r7, #4]
 80084fe:	4613      	mov	r3, r2
 8008500:	00db      	lsls	r3, r3, #3
 8008502:	1a9b      	subs	r3, r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	440b      	add	r3, r1
 8008508:	333f      	adds	r3, #63	; 0x3f
 800850a:	2200      	movs	r2, #0
 800850c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800850e:	7bfa      	ldrb	r2, [r7, #15]
 8008510:	6879      	ldr	r1, [r7, #4]
 8008512:	4613      	mov	r3, r2
 8008514:	00db      	lsls	r3, r3, #3
 8008516:	1a9b      	subs	r3, r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	440b      	add	r3, r1
 800851c:	3344      	adds	r3, #68	; 0x44
 800851e:	2200      	movs	r2, #0
 8008520:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008522:	7bfa      	ldrb	r2, [r7, #15]
 8008524:	6879      	ldr	r1, [r7, #4]
 8008526:	4613      	mov	r3, r2
 8008528:	00db      	lsls	r3, r3, #3
 800852a:	1a9b      	subs	r3, r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	440b      	add	r3, r1
 8008530:	3348      	adds	r3, #72	; 0x48
 8008532:	2200      	movs	r2, #0
 8008534:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008536:	7bfa      	ldrb	r2, [r7, #15]
 8008538:	6879      	ldr	r1, [r7, #4]
 800853a:	4613      	mov	r3, r2
 800853c:	00db      	lsls	r3, r3, #3
 800853e:	1a9b      	subs	r3, r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	440b      	add	r3, r1
 8008544:	3350      	adds	r3, #80	; 0x50
 8008546:	2200      	movs	r2, #0
 8008548:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800854a:	7bfb      	ldrb	r3, [r7, #15]
 800854c:	3301      	adds	r3, #1
 800854e:	73fb      	strb	r3, [r7, #15]
 8008550:	7bfa      	ldrb	r2, [r7, #15]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	429a      	cmp	r2, r3
 8008558:	d3af      	bcc.n	80084ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800855a:	2300      	movs	r3, #0
 800855c:	73fb      	strb	r3, [r7, #15]
 800855e:	e044      	b.n	80085ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008560:	7bfa      	ldrb	r2, [r7, #15]
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	4613      	mov	r3, r2
 8008566:	00db      	lsls	r3, r3, #3
 8008568:	1a9b      	subs	r3, r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	440b      	add	r3, r1
 800856e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008572:	2200      	movs	r2, #0
 8008574:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008576:	7bfa      	ldrb	r2, [r7, #15]
 8008578:	6879      	ldr	r1, [r7, #4]
 800857a:	4613      	mov	r3, r2
 800857c:	00db      	lsls	r3, r3, #3
 800857e:	1a9b      	subs	r3, r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	440b      	add	r3, r1
 8008584:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008588:	7bfa      	ldrb	r2, [r7, #15]
 800858a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800858c:	7bfa      	ldrb	r2, [r7, #15]
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	4613      	mov	r3, r2
 8008592:	00db      	lsls	r3, r3, #3
 8008594:	1a9b      	subs	r3, r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	440b      	add	r3, r1
 800859a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800859e:	2200      	movs	r2, #0
 80085a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80085a2:	7bfa      	ldrb	r2, [r7, #15]
 80085a4:	6879      	ldr	r1, [r7, #4]
 80085a6:	4613      	mov	r3, r2
 80085a8:	00db      	lsls	r3, r3, #3
 80085aa:	1a9b      	subs	r3, r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	440b      	add	r3, r1
 80085b0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80085b4:	2200      	movs	r2, #0
 80085b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80085b8:	7bfa      	ldrb	r2, [r7, #15]
 80085ba:	6879      	ldr	r1, [r7, #4]
 80085bc:	4613      	mov	r3, r2
 80085be:	00db      	lsls	r3, r3, #3
 80085c0:	1a9b      	subs	r3, r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	440b      	add	r3, r1
 80085c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80085ca:	2200      	movs	r2, #0
 80085cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80085ce:	7bfa      	ldrb	r2, [r7, #15]
 80085d0:	6879      	ldr	r1, [r7, #4]
 80085d2:	4613      	mov	r3, r2
 80085d4:	00db      	lsls	r3, r3, #3
 80085d6:	1a9b      	subs	r3, r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	440b      	add	r3, r1
 80085dc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
 80085e6:	3301      	adds	r3, #1
 80085e8:	73fb      	strb	r3, [r7, #15]
 80085ea:	7bfa      	ldrb	r2, [r7, #15]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d3b5      	bcc.n	8008560 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	603b      	str	r3, [r7, #0]
 80085fa:	687e      	ldr	r6, [r7, #4]
 80085fc:	466d      	mov	r5, sp
 80085fe:	f106 0410 	add.w	r4, r6, #16
 8008602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800860a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800860e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008612:	1d33      	adds	r3, r6, #4
 8008614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008616:	6838      	ldr	r0, [r7, #0]
 8008618:	f002 f890 	bl	800a73c <USB_DevInit>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d005      	beq.n	800862e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2202      	movs	r2, #2
 8008626:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e00d      	b.n	800864a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4618      	mov	r0, r3
 8008644:	f003 f8d8 	bl	800b7f8 <USB_DevDisconnect>

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008652 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008666:	2b01      	cmp	r3, #1
 8008668:	d101      	bne.n	800866e <HAL_PCD_Start+0x1c>
 800866a:	2302      	movs	r3, #2
 800866c:	e020      	b.n	80086b0 <HAL_PCD_Start+0x5e>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867a:	2b01      	cmp	r3, #1
 800867c:	d109      	bne.n	8008692 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008682:	2b01      	cmp	r3, #1
 8008684:	d005      	beq.n	8008692 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800868a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f002 f804 	bl	800a6a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f003 f888 	bl	800b7b6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80086b8:	b590      	push	{r4, r7, lr}
 80086ba:	b08d      	sub	sp, #52	; 0x34
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086c6:	6a3b      	ldr	r3, [r7, #32]
 80086c8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f003 f946 	bl	800b960 <USB_GetMode>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f040 839d 	bne.w	8008e16 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f003 f8aa 	bl	800b83a <USB_ReadInterrupts>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f000 8393 	beq.w	8008e14 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f003 f8a1 	bl	800b83a <USB_ReadInterrupts>
 80086f8:	4603      	mov	r3, r0
 80086fa:	f003 0302 	and.w	r3, r3, #2
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d107      	bne.n	8008712 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	695a      	ldr	r2, [r3, #20]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f002 0202 	and.w	r2, r2, #2
 8008710:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4618      	mov	r0, r3
 8008718:	f003 f88f 	bl	800b83a <USB_ReadInterrupts>
 800871c:	4603      	mov	r3, r0
 800871e:	f003 0310 	and.w	r3, r3, #16
 8008722:	2b10      	cmp	r3, #16
 8008724:	d161      	bne.n	80087ea <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	699a      	ldr	r2, [r3, #24]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f022 0210 	bic.w	r2, r2, #16
 8008734:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800873c:	69bb      	ldr	r3, [r7, #24]
 800873e:	f003 020f 	and.w	r2, r3, #15
 8008742:	4613      	mov	r3, r2
 8008744:	00db      	lsls	r3, r3, #3
 8008746:	1a9b      	subs	r3, r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	4413      	add	r3, r2
 8008752:	3304      	adds	r3, #4
 8008754:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	0c5b      	lsrs	r3, r3, #17
 800875a:	f003 030f 	and.w	r3, r3, #15
 800875e:	2b02      	cmp	r3, #2
 8008760:	d124      	bne.n	80087ac <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008768:	4013      	ands	r3, r2
 800876a:	2b00      	cmp	r3, #0
 800876c:	d035      	beq.n	80087da <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	091b      	lsrs	r3, r3, #4
 8008776:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008778:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800877c:	b29b      	uxth	r3, r3
 800877e:	461a      	mov	r2, r3
 8008780:	6a38      	ldr	r0, [r7, #32]
 8008782:	f002 fef5 	bl	800b570 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	68da      	ldr	r2, [r3, #12]
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	091b      	lsrs	r3, r3, #4
 800878e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008792:	441a      	add	r2, r3
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	699a      	ldr	r2, [r3, #24]
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	091b      	lsrs	r3, r3, #4
 80087a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087a4:	441a      	add	r2, r3
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	619a      	str	r2, [r3, #24]
 80087aa:	e016      	b.n	80087da <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	0c5b      	lsrs	r3, r3, #17
 80087b0:	f003 030f 	and.w	r3, r3, #15
 80087b4:	2b06      	cmp	r3, #6
 80087b6:	d110      	bne.n	80087da <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80087be:	2208      	movs	r2, #8
 80087c0:	4619      	mov	r1, r3
 80087c2:	6a38      	ldr	r0, [r7, #32]
 80087c4:	f002 fed4 	bl	800b570 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	699a      	ldr	r2, [r3, #24]
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	091b      	lsrs	r3, r3, #4
 80087d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087d4:	441a      	add	r2, r3
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	699a      	ldr	r2, [r3, #24]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f042 0210 	orr.w	r2, r2, #16
 80087e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f003 f823 	bl	800b83a <USB_ReadInterrupts>
 80087f4:	4603      	mov	r3, r0
 80087f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80087fe:	d16e      	bne.n	80088de <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4618      	mov	r0, r3
 800880a:	f003 f829 	bl	800b860 <USB_ReadDevAllOutEpInterrupt>
 800880e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008810:	e062      	b.n	80088d8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	2b00      	cmp	r3, #0
 800881a:	d057      	beq.n	80088cc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008822:	b2d2      	uxtb	r2, r2
 8008824:	4611      	mov	r1, r2
 8008826:	4618      	mov	r0, r3
 8008828:	f003 f84e 	bl	800b8c8 <USB_ReadDevOutEPInterrupt>
 800882c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00c      	beq.n	8008852 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883a:	015a      	lsls	r2, r3, #5
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	4413      	add	r3, r2
 8008840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008844:	461a      	mov	r2, r3
 8008846:	2301      	movs	r3, #1
 8008848:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800884a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fdb1 	bl	80093b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	f003 0308 	and.w	r3, r3, #8
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00c      	beq.n	8008876 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	015a      	lsls	r2, r3, #5
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	4413      	add	r3, r2
 8008864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008868:	461a      	mov	r2, r3
 800886a:	2308      	movs	r3, #8
 800886c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800886e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 feab 	bl	80095cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	f003 0310 	and.w	r3, r3, #16
 800887c:	2b00      	cmp	r3, #0
 800887e:	d008      	beq.n	8008892 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888c:	461a      	mov	r2, r3
 800888e:	2310      	movs	r3, #16
 8008890:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	f003 0320 	and.w	r3, r3, #32
 8008898:	2b00      	cmp	r3, #0
 800889a:	d008      	beq.n	80088ae <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a8:	461a      	mov	r2, r3
 80088aa:	2320      	movs	r3, #32
 80088ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d009      	beq.n	80088cc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088c4:	461a      	mov	r2, r3
 80088c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088ca:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	3301      	adds	r3, #1
 80088d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80088d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d4:	085b      	lsrs	r3, r3, #1
 80088d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80088d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d199      	bne.n	8008812 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f002 ffa9 	bl	800b83a <USB_ReadInterrupts>
 80088e8:	4603      	mov	r3, r0
 80088ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088f2:	f040 80c0 	bne.w	8008a76 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f002 ffca 	bl	800b894 <USB_ReadDevAllInEpInterrupt>
 8008900:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008906:	e0b2      	b.n	8008a6e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	2b00      	cmp	r3, #0
 8008910:	f000 80a7 	beq.w	8008a62 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800891a:	b2d2      	uxtb	r2, r2
 800891c:	4611      	mov	r1, r2
 800891e:	4618      	mov	r0, r3
 8008920:	f002 fff0 	bl	800b904 <USB_ReadDevInEPInterrupt>
 8008924:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d057      	beq.n	80089e0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	f003 030f 	and.w	r3, r3, #15
 8008936:	2201      	movs	r2, #1
 8008938:	fa02 f303 	lsl.w	r3, r2, r3
 800893c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	43db      	mvns	r3, r3
 800894a:	69f9      	ldr	r1, [r7, #28]
 800894c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008950:	4013      	ands	r3, r2
 8008952:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	015a      	lsls	r2, r3, #5
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	4413      	add	r3, r2
 800895c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008960:	461a      	mov	r2, r3
 8008962:	2301      	movs	r3, #1
 8008964:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d132      	bne.n	80089d4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800896e:	6879      	ldr	r1, [r7, #4]
 8008970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008972:	4613      	mov	r3, r2
 8008974:	00db      	lsls	r3, r3, #3
 8008976:	1a9b      	subs	r3, r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	440b      	add	r3, r1
 800897c:	3348      	adds	r3, #72	; 0x48
 800897e:	6819      	ldr	r1, [r3, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008984:	4613      	mov	r3, r2
 8008986:	00db      	lsls	r3, r3, #3
 8008988:	1a9b      	subs	r3, r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4403      	add	r3, r0
 800898e:	3344      	adds	r3, #68	; 0x44
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4419      	add	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008998:	4613      	mov	r3, r2
 800899a:	00db      	lsls	r3, r3, #3
 800899c:	1a9b      	subs	r3, r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4403      	add	r3, r0
 80089a2:	3348      	adds	r3, #72	; 0x48
 80089a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80089a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d113      	bne.n	80089d4 <HAL_PCD_IRQHandler+0x31c>
 80089ac:	6879      	ldr	r1, [r7, #4]
 80089ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089b0:	4613      	mov	r3, r2
 80089b2:	00db      	lsls	r3, r3, #3
 80089b4:	1a9b      	subs	r3, r3, r2
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	440b      	add	r3, r1
 80089ba:	3350      	adds	r3, #80	; 0x50
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d108      	bne.n	80089d4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6818      	ldr	r0, [r3, #0]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80089cc:	461a      	mov	r2, r3
 80089ce:	2101      	movs	r1, #1
 80089d0:	f002 fff8 	bl	800b9c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	4619      	mov	r1, r3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f006 f9f3 	bl	800edc6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	f003 0308 	and.w	r3, r3, #8
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d008      	beq.n	80089fc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	015a      	lsls	r2, r3, #5
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	4413      	add	r3, r2
 80089f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f6:	461a      	mov	r2, r3
 80089f8:	2308      	movs	r3, #8
 80089fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	f003 0310 	and.w	r3, r3, #16
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d008      	beq.n	8008a18 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a12:	461a      	mov	r2, r3
 8008a14:	2310      	movs	r3, #16
 8008a16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d008      	beq.n	8008a34 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a24:	015a      	lsls	r2, r3, #5
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	4413      	add	r3, r2
 8008a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a2e:	461a      	mov	r2, r3
 8008a30:	2340      	movs	r3, #64	; 0x40
 8008a32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	f003 0302 	and.w	r3, r3, #2
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d008      	beq.n	8008a50 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a40:	015a      	lsls	r2, r3, #5
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	4413      	add	r3, r2
 8008a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d003      	beq.n	8008a62 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008a5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fc1b 	bl	8009298 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	3301      	adds	r3, #1
 8008a66:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6a:	085b      	lsrs	r3, r3, #1
 8008a6c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f47f af49 	bne.w	8008908 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f002 fedd 	bl	800b83a <USB_ReadInterrupts>
 8008a80:	4603      	mov	r3, r0
 8008a82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a8a:	d122      	bne.n	8008ad2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	69fa      	ldr	r2, [r7, #28]
 8008a96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a9a:	f023 0301 	bic.w	r3, r3, #1
 8008a9e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d108      	bne.n	8008abc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fe27 	bl	8009708 <HAL_PCDEx_LPM_Callback>
 8008aba:	e002      	b.n	8008ac2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f006 f9f9 	bl	800eeb4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	695a      	ldr	r2, [r3, #20]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008ad0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f002 feaf 	bl	800b83a <USB_ReadInterrupts>
 8008adc:	4603      	mov	r3, r0
 8008ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ae6:	d112      	bne.n	8008b0e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	f003 0301 	and.w	r3, r3, #1
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d102      	bne.n	8008afe <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f006 f9b5 	bl	800ee68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	695a      	ldr	r2, [r3, #20]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008b0c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f002 fe91 	bl	800b83a <USB_ReadInterrupts>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b22:	f040 80c7 	bne.w	8008cb4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	69fa      	ldr	r2, [r7, #28]
 8008b30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b34:	f023 0301 	bic.w	r3, r3, #1
 8008b38:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2110      	movs	r1, #16
 8008b40:	4618      	mov	r0, r3
 8008b42:	f001 ff5f 	bl	800aa04 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b46:	2300      	movs	r3, #0
 8008b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b4a:	e056      	b.n	8008bfa <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4e:	015a      	lsls	r2, r3, #5
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	4413      	add	r3, r2
 8008b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b58:	461a      	mov	r2, r3
 8008b5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b5e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b62:	015a      	lsls	r2, r3, #5
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	4413      	add	r3, r2
 8008b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b70:	0151      	lsls	r1, r2, #5
 8008b72:	69fa      	ldr	r2, [r7, #28]
 8008b74:	440a      	add	r2, r1
 8008b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b7e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b82:	015a      	lsls	r2, r3, #5
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b90:	0151      	lsls	r1, r2, #5
 8008b92:	69fa      	ldr	r2, [r7, #28]
 8008b94:	440a      	add	r2, r1
 8008b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bac:	461a      	mov	r2, r3
 8008bae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008bb2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bc4:	0151      	lsls	r1, r2, #5
 8008bc6:	69fa      	ldr	r2, [r7, #28]
 8008bc8:	440a      	add	r2, r1
 8008bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bd2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd6:	015a      	lsls	r2, r3, #5
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	4413      	add	r3, r2
 8008bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008be4:	0151      	lsls	r1, r2, #5
 8008be6:	69fa      	ldr	r2, [r7, #28]
 8008be8:	440a      	add	r2, r1
 8008bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008bf2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d3a3      	bcc.n	8008b4c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c0a:	69db      	ldr	r3, [r3, #28]
 8008c0c:	69fa      	ldr	r2, [r7, #28]
 8008c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c12:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008c16:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d016      	beq.n	8008c4e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c2a:	69fa      	ldr	r2, [r7, #28]
 8008c2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c30:	f043 030b 	orr.w	r3, r3, #11
 8008c34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c40:	69fa      	ldr	r2, [r7, #28]
 8008c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c46:	f043 030b 	orr.w	r3, r3, #11
 8008c4a:	6453      	str	r3, [r2, #68]	; 0x44
 8008c4c:	e015      	b.n	8008c7a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	69fa      	ldr	r2, [r7, #28]
 8008c58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008c60:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008c64:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	69fa      	ldr	r2, [r7, #28]
 8008c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c74:	f043 030b 	orr.w	r3, r3, #11
 8008c78:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	69fa      	ldr	r2, [r7, #28]
 8008c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c88:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c8c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6818      	ldr	r0, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	f002 fe90 	bl	800b9c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	695a      	ldr	r2, [r3, #20]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f002 fdbe 	bl	800b83a <USB_ReadInterrupts>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cc8:	d124      	bne.n	8008d14 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f002 fe54 	bl	800b97c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f001 fef4 	bl	800aac6 <USB_GetDevSpeed>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681c      	ldr	r4, [r3, #0]
 8008cea:	f001 f947 	bl	8009f7c <HAL_RCC_GetHCLKFreq>
 8008cee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f001 fc31 	bl	800a560 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f006 f889 	bl	800ee16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	695a      	ldr	r2, [r3, #20]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008d12:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f002 fd8e 	bl	800b83a <USB_ReadInterrupts>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	f003 0308 	and.w	r3, r3, #8
 8008d24:	2b08      	cmp	r3, #8
 8008d26:	d10a      	bne.n	8008d3e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f006 f866 	bl	800edfa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	695a      	ldr	r2, [r3, #20]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f002 0208 	and.w	r2, r2, #8
 8008d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f002 fd79 	bl	800b83a <USB_ReadInterrupts>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d52:	d10f      	bne.n	8008d74 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008d54:	2300      	movs	r3, #0
 8008d56:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f006 f8c8 	bl	800eef4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	695a      	ldr	r2, [r3, #20]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008d72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f002 fd5e 	bl	800b83a <USB_ReadInterrupts>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d88:	d10f      	bne.n	8008daa <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	4619      	mov	r1, r3
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f006 f89b 	bl	800eed0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	695a      	ldr	r2, [r3, #20]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f002 fd43 	bl	800b83a <USB_ReadInterrupts>
 8008db4:	4603      	mov	r3, r0
 8008db6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dbe:	d10a      	bne.n	8008dd6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f006 f8a9 	bl	800ef18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	695a      	ldr	r2, [r3, #20]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008dd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f002 fd2d 	bl	800b83a <USB_ReadInterrupts>
 8008de0:	4603      	mov	r3, r0
 8008de2:	f003 0304 	and.w	r3, r3, #4
 8008de6:	2b04      	cmp	r3, #4
 8008de8:	d115      	bne.n	8008e16 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	f003 0304 	and.w	r3, r3, #4
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f006 f899 	bl	800ef34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6859      	ldr	r1, [r3, #4]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	69ba      	ldr	r2, [r7, #24]
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	605a      	str	r2, [r3, #4]
 8008e12:	e000      	b.n	8008e16 <HAL_PCD_IRQHandler+0x75e>
      return;
 8008e14:	bf00      	nop
    }
  }
}
 8008e16:	3734      	adds	r7, #52	; 0x34
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd90      	pop	{r4, r7, pc}

08008e1c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	460b      	mov	r3, r1
 8008e26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d101      	bne.n	8008e36 <HAL_PCD_SetAddress+0x1a>
 8008e32:	2302      	movs	r3, #2
 8008e34:	e013      	b.n	8008e5e <HAL_PCD_SetAddress+0x42>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	78fa      	ldrb	r2, [r7, #3]
 8008e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	78fa      	ldrb	r2, [r7, #3]
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f002 fc8b 	bl	800b76a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b084      	sub	sp, #16
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	4608      	mov	r0, r1
 8008e70:	4611      	mov	r1, r2
 8008e72:	461a      	mov	r2, r3
 8008e74:	4603      	mov	r3, r0
 8008e76:	70fb      	strb	r3, [r7, #3]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	803b      	strh	r3, [r7, #0]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008e84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	da0f      	bge.n	8008eac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e8c:	78fb      	ldrb	r3, [r7, #3]
 8008e8e:	f003 020f 	and.w	r2, r3, #15
 8008e92:	4613      	mov	r3, r2
 8008e94:	00db      	lsls	r3, r3, #3
 8008e96:	1a9b      	subs	r3, r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	3338      	adds	r3, #56	; 0x38
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	705a      	strb	r2, [r3, #1]
 8008eaa:	e00f      	b.n	8008ecc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008eac:	78fb      	ldrb	r3, [r7, #3]
 8008eae:	f003 020f 	and.w	r2, r3, #15
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	00db      	lsls	r3, r3, #3
 8008eb6:	1a9b      	subs	r3, r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008ecc:	78fb      	ldrb	r3, [r7, #3]
 8008ece:	f003 030f 	and.w	r3, r3, #15
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008ed8:	883a      	ldrh	r2, [r7, #0]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	78ba      	ldrb	r2, [r7, #2]
 8008ee2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	785b      	ldrb	r3, [r3, #1]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d004      	beq.n	8008ef6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008ef6:	78bb      	ldrb	r3, [r7, #2]
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d102      	bne.n	8008f02 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d101      	bne.n	8008f10 <HAL_PCD_EP_Open+0xaa>
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	e00e      	b.n	8008f2e <HAL_PCD_EP_Open+0xc8>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68f9      	ldr	r1, [r7, #12]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f001 fdf6 	bl	800ab10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008f2c:	7afb      	ldrb	r3, [r7, #11]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b084      	sub	sp, #16
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	460b      	mov	r3, r1
 8008f40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	da0f      	bge.n	8008f6a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f4a:	78fb      	ldrb	r3, [r7, #3]
 8008f4c:	f003 020f 	and.w	r2, r3, #15
 8008f50:	4613      	mov	r3, r2
 8008f52:	00db      	lsls	r3, r3, #3
 8008f54:	1a9b      	subs	r3, r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	3338      	adds	r3, #56	; 0x38
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	3304      	adds	r3, #4
 8008f60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2201      	movs	r2, #1
 8008f66:	705a      	strb	r2, [r3, #1]
 8008f68:	e00f      	b.n	8008f8a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f6a:	78fb      	ldrb	r3, [r7, #3]
 8008f6c:	f003 020f 	and.w	r2, r3, #15
 8008f70:	4613      	mov	r3, r2
 8008f72:	00db      	lsls	r3, r3, #3
 8008f74:	1a9b      	subs	r3, r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	4413      	add	r3, r2
 8008f80:	3304      	adds	r3, #4
 8008f82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008f8a:	78fb      	ldrb	r3, [r7, #3]
 8008f8c:	f003 030f 	and.w	r3, r3, #15
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d101      	bne.n	8008fa4 <HAL_PCD_EP_Close+0x6e>
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	e00e      	b.n	8008fc2 <HAL_PCD_EP_Close+0x8c>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68f9      	ldr	r1, [r7, #12]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f001 fe34 	bl	800ac20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b086      	sub	sp, #24
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	60f8      	str	r0, [r7, #12]
 8008fd2:	607a      	str	r2, [r7, #4]
 8008fd4:	603b      	str	r3, [r7, #0]
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008fda:	7afb      	ldrb	r3, [r7, #11]
 8008fdc:	f003 020f 	and.w	r2, r3, #15
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	00db      	lsls	r3, r3, #3
 8008fe4:	1a9b      	subs	r3, r3, r2
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	4413      	add	r3, r2
 8008ff0:	3304      	adds	r3, #4
 8008ff2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	683a      	ldr	r2, [r7, #0]
 8008ffe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	2200      	movs	r2, #0
 8009004:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	2200      	movs	r2, #0
 800900a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800900c:	7afb      	ldrb	r3, [r7, #11]
 800900e:	f003 030f 	and.w	r3, r3, #15
 8009012:	b2da      	uxtb	r2, r3
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d102      	bne.n	8009026 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009026:	7afb      	ldrb	r3, [r7, #11]
 8009028:	f003 030f 	and.w	r3, r3, #15
 800902c:	2b00      	cmp	r3, #0
 800902e:	d109      	bne.n	8009044 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6818      	ldr	r0, [r3, #0]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	b2db      	uxtb	r3, r3
 800903a:	461a      	mov	r2, r3
 800903c:	6979      	ldr	r1, [r7, #20]
 800903e:	f002 f90f 	bl	800b260 <USB_EP0StartXfer>
 8009042:	e008      	b.n	8009056 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6818      	ldr	r0, [r3, #0]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	b2db      	uxtb	r3, r3
 800904e:	461a      	mov	r2, r3
 8009050:	6979      	ldr	r1, [r7, #20]
 8009052:	f001 fec1 	bl	800add8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3718      	adds	r7, #24
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	460b      	mov	r3, r1
 800906a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800906c:	78fb      	ldrb	r3, [r7, #3]
 800906e:	f003 020f 	and.w	r2, r3, #15
 8009072:	6879      	ldr	r1, [r7, #4]
 8009074:	4613      	mov	r3, r2
 8009076:	00db      	lsls	r3, r3, #3
 8009078:	1a9b      	subs	r3, r3, r2
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	440b      	add	r3, r1
 800907e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009082:	681b      	ldr	r3, [r3, #0]
}
 8009084:	4618      	mov	r0, r3
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	607a      	str	r2, [r7, #4]
 800909a:	603b      	str	r3, [r7, #0]
 800909c:	460b      	mov	r3, r1
 800909e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090a0:	7afb      	ldrb	r3, [r7, #11]
 80090a2:	f003 020f 	and.w	r2, r3, #15
 80090a6:	4613      	mov	r3, r2
 80090a8:	00db      	lsls	r3, r3, #3
 80090aa:	1a9b      	subs	r3, r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	3338      	adds	r3, #56	; 0x38
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	4413      	add	r3, r2
 80090b4:	3304      	adds	r3, #4
 80090b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	683a      	ldr	r2, [r7, #0]
 80090c2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	2200      	movs	r2, #0
 80090c8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2201      	movs	r2, #1
 80090ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090d0:	7afb      	ldrb	r3, [r7, #11]
 80090d2:	f003 030f 	and.w	r3, r3, #15
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d102      	bne.n	80090ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80090ea:	7afb      	ldrb	r3, [r7, #11]
 80090ec:	f003 030f 	and.w	r3, r3, #15
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d109      	bne.n	8009108 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6818      	ldr	r0, [r3, #0]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	461a      	mov	r2, r3
 8009100:	6979      	ldr	r1, [r7, #20]
 8009102:	f002 f8ad 	bl	800b260 <USB_EP0StartXfer>
 8009106:	e008      	b.n	800911a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6818      	ldr	r0, [r3, #0]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	b2db      	uxtb	r3, r3
 8009112:	461a      	mov	r2, r3
 8009114:	6979      	ldr	r1, [r7, #20]
 8009116:	f001 fe5f 	bl	800add8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	460b      	mov	r3, r1
 800912e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009130:	78fb      	ldrb	r3, [r7, #3]
 8009132:	f003 020f 	and.w	r2, r3, #15
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	429a      	cmp	r2, r3
 800913c:	d901      	bls.n	8009142 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e050      	b.n	80091e4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009146:	2b00      	cmp	r3, #0
 8009148:	da0f      	bge.n	800916a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800914a:	78fb      	ldrb	r3, [r7, #3]
 800914c:	f003 020f 	and.w	r2, r3, #15
 8009150:	4613      	mov	r3, r2
 8009152:	00db      	lsls	r3, r3, #3
 8009154:	1a9b      	subs	r3, r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	3338      	adds	r3, #56	; 0x38
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	4413      	add	r3, r2
 800915e:	3304      	adds	r3, #4
 8009160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2201      	movs	r2, #1
 8009166:	705a      	strb	r2, [r3, #1]
 8009168:	e00d      	b.n	8009186 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800916a:	78fa      	ldrb	r2, [r7, #3]
 800916c:	4613      	mov	r3, r2
 800916e:	00db      	lsls	r3, r3, #3
 8009170:	1a9b      	subs	r3, r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	4413      	add	r3, r2
 800917c:	3304      	adds	r3, #4
 800917e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2201      	movs	r2, #1
 800918a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800918c:	78fb      	ldrb	r3, [r7, #3]
 800918e:	f003 030f 	and.w	r3, r3, #15
 8009192:	b2da      	uxtb	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d101      	bne.n	80091a6 <HAL_PCD_EP_SetStall+0x82>
 80091a2:	2302      	movs	r3, #2
 80091a4:	e01e      	b.n	80091e4 <HAL_PCD_EP_SetStall+0xc0>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	68f9      	ldr	r1, [r7, #12]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f002 fa04 	bl	800b5c2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80091ba:	78fb      	ldrb	r3, [r7, #3]
 80091bc:	f003 030f 	and.w	r3, r3, #15
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10a      	bne.n	80091da <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6818      	ldr	r0, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	b2d9      	uxtb	r1, r3
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80091d4:	461a      	mov	r2, r3
 80091d6:	f002 fbf5 	bl	800b9c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80091f8:	78fb      	ldrb	r3, [r7, #3]
 80091fa:	f003 020f 	and.w	r2, r3, #15
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	429a      	cmp	r2, r3
 8009204:	d901      	bls.n	800920a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	e042      	b.n	8009290 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800920a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800920e:	2b00      	cmp	r3, #0
 8009210:	da0f      	bge.n	8009232 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009212:	78fb      	ldrb	r3, [r7, #3]
 8009214:	f003 020f 	and.w	r2, r3, #15
 8009218:	4613      	mov	r3, r2
 800921a:	00db      	lsls	r3, r3, #3
 800921c:	1a9b      	subs	r3, r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	3338      	adds	r3, #56	; 0x38
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	4413      	add	r3, r2
 8009226:	3304      	adds	r3, #4
 8009228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2201      	movs	r2, #1
 800922e:	705a      	strb	r2, [r3, #1]
 8009230:	e00f      	b.n	8009252 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009232:	78fb      	ldrb	r3, [r7, #3]
 8009234:	f003 020f 	and.w	r2, r3, #15
 8009238:	4613      	mov	r3, r2
 800923a:	00db      	lsls	r3, r3, #3
 800923c:	1a9b      	subs	r3, r3, r2
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	4413      	add	r3, r2
 8009248:	3304      	adds	r3, #4
 800924a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2200      	movs	r2, #0
 8009250:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009258:	78fb      	ldrb	r3, [r7, #3]
 800925a:	f003 030f 	and.w	r3, r3, #15
 800925e:	b2da      	uxtb	r2, r3
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800926a:	2b01      	cmp	r3, #1
 800926c:	d101      	bne.n	8009272 <HAL_PCD_EP_ClrStall+0x86>
 800926e:	2302      	movs	r3, #2
 8009270:	e00e      	b.n	8009290 <HAL_PCD_EP_ClrStall+0xa4>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68f9      	ldr	r1, [r7, #12]
 8009280:	4618      	mov	r0, r3
 8009282:	f002 fa0c 	bl	800b69e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b08a      	sub	sp, #40	; 0x28
 800929c:	af02      	add	r7, sp, #8
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	4613      	mov	r3, r2
 80092b0:	00db      	lsls	r3, r3, #3
 80092b2:	1a9b      	subs	r3, r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	3338      	adds	r3, #56	; 0x38
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	4413      	add	r3, r2
 80092bc:	3304      	adds	r3, #4
 80092be:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	699a      	ldr	r2, [r3, #24]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	695b      	ldr	r3, [r3, #20]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d901      	bls.n	80092d0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e06c      	b.n	80093aa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	695a      	ldr	r2, [r3, #20]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	69fa      	ldr	r2, [r7, #28]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d902      	bls.n	80092ec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	3303      	adds	r3, #3
 80092f0:	089b      	lsrs	r3, r3, #2
 80092f2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80092f4:	e02b      	b.n	800934e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	695a      	ldr	r2, [r3, #20]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	69fa      	ldr	r2, [r7, #28]
 8009308:	429a      	cmp	r2, r3
 800930a:	d902      	bls.n	8009312 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	3303      	adds	r3, #3
 8009316:	089b      	lsrs	r3, r3, #2
 8009318:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	68d9      	ldr	r1, [r3, #12]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	b2da      	uxtb	r2, r3
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800932a:	b2db      	uxtb	r3, r3
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	4603      	mov	r3, r0
 8009330:	6978      	ldr	r0, [r7, #20]
 8009332:	f002 f8e8 	bl	800b506 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	68da      	ldr	r2, [r3, #12]
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	441a      	add	r2, r3
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	699a      	ldr	r2, [r3, #24]
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	441a      	add	r2, r3
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	015a      	lsls	r2, r3, #5
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	4413      	add	r3, r2
 8009356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	b29b      	uxth	r3, r3
 800935e:	69ba      	ldr	r2, [r7, #24]
 8009360:	429a      	cmp	r2, r3
 8009362:	d809      	bhi.n	8009378 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	699a      	ldr	r2, [r3, #24]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800936c:	429a      	cmp	r2, r3
 800936e:	d203      	bcs.n	8009378 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	695b      	ldr	r3, [r3, #20]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1be      	bne.n	80092f6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	695a      	ldr	r2, [r3, #20]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	429a      	cmp	r2, r3
 8009382:	d811      	bhi.n	80093a8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	f003 030f 	and.w	r3, r3, #15
 800938a:	2201      	movs	r2, #1
 800938c:	fa02 f303 	lsl.w	r3, r2, r3
 8009390:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	43db      	mvns	r3, r3
 800939e:	6939      	ldr	r1, [r7, #16]
 80093a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093a4:	4013      	ands	r3, r2
 80093a6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3720      	adds	r7, #32
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
	...

080093b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	333c      	adds	r3, #60	; 0x3c
 80093cc:	3304      	adds	r3, #4
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	015a      	lsls	r2, r3, #5
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	4413      	add	r3, r2
 80093da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	f040 80a0 	bne.w	800952c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	f003 0308 	and.w	r3, r3, #8
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d015      	beq.n	8009422 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	4a72      	ldr	r2, [pc, #456]	; (80095c4 <PCD_EP_OutXfrComplete_int+0x210>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	f240 80dd 	bls.w	80095ba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009406:	2b00      	cmp	r3, #0
 8009408:	f000 80d7 	beq.w	80095ba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	015a      	lsls	r2, r3, #5
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	4413      	add	r3, r2
 8009414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009418:	461a      	mov	r2, r3
 800941a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800941e:	6093      	str	r3, [r2, #8]
 8009420:	e0cb      	b.n	80095ba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	f003 0320 	and.w	r3, r3, #32
 8009428:	2b00      	cmp	r3, #0
 800942a:	d009      	beq.n	8009440 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	4413      	add	r3, r2
 8009434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009438:	461a      	mov	r2, r3
 800943a:	2320      	movs	r3, #32
 800943c:	6093      	str	r3, [r2, #8]
 800943e:	e0bc      	b.n	80095ba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009446:	2b00      	cmp	r3, #0
 8009448:	f040 80b7 	bne.w	80095ba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	4a5d      	ldr	r2, [pc, #372]	; (80095c4 <PCD_EP_OutXfrComplete_int+0x210>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d90f      	bls.n	8009474 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00a      	beq.n	8009474 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	015a      	lsls	r2, r3, #5
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	4413      	add	r3, r2
 8009466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800946a:	461a      	mov	r2, r3
 800946c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009470:	6093      	str	r3, [r2, #8]
 8009472:	e0a2      	b.n	80095ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009474:	6879      	ldr	r1, [r7, #4]
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	4613      	mov	r3, r2
 800947a:	00db      	lsls	r3, r3, #3
 800947c:	1a9b      	subs	r3, r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	440b      	add	r3, r1
 8009482:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009486:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	0159      	lsls	r1, r3, #5
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	440b      	add	r3, r1
 8009490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800949a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	4613      	mov	r3, r2
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	1a9b      	subs	r3, r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4403      	add	r3, r0
 80094aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80094ae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80094b0:	6879      	ldr	r1, [r7, #4]
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	4613      	mov	r3, r2
 80094b6:	00db      	lsls	r3, r3, #3
 80094b8:	1a9b      	subs	r3, r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	440b      	add	r3, r1
 80094be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80094c2:	6819      	ldr	r1, [r3, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	4613      	mov	r3, r2
 80094ca:	00db      	lsls	r3, r3, #3
 80094cc:	1a9b      	subs	r3, r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4403      	add	r3, r0
 80094d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4419      	add	r1, r3
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	4613      	mov	r3, r2
 80094e0:	00db      	lsls	r3, r3, #3
 80094e2:	1a9b      	subs	r3, r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4403      	add	r3, r0
 80094e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80094ec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d114      	bne.n	800951e <PCD_EP_OutXfrComplete_int+0x16a>
 80094f4:	6879      	ldr	r1, [r7, #4]
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	4613      	mov	r3, r2
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	1a9b      	subs	r3, r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	440b      	add	r3, r1
 8009502:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d108      	bne.n	800951e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6818      	ldr	r0, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009516:	461a      	mov	r2, r3
 8009518:	2101      	movs	r1, #1
 800951a:	f002 fa53 	bl	800b9c4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	b2db      	uxtb	r3, r3
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f005 fc33 	bl	800ed90 <HAL_PCD_DataOutStageCallback>
 800952a:	e046      	b.n	80095ba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	4a26      	ldr	r2, [pc, #152]	; (80095c8 <PCD_EP_OutXfrComplete_int+0x214>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d124      	bne.n	800957e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00a      	beq.n	8009554 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	015a      	lsls	r2, r3, #5
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	4413      	add	r3, r2
 8009546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800954a:	461a      	mov	r2, r3
 800954c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009550:	6093      	str	r3, [r2, #8]
 8009552:	e032      	b.n	80095ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	f003 0320 	and.w	r3, r3, #32
 800955a:	2b00      	cmp	r3, #0
 800955c:	d008      	beq.n	8009570 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	015a      	lsls	r2, r3, #5
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	4413      	add	r3, r2
 8009566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800956a:	461a      	mov	r2, r3
 800956c:	2320      	movs	r3, #32
 800956e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	b2db      	uxtb	r3, r3
 8009574:	4619      	mov	r1, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f005 fc0a 	bl	800ed90 <HAL_PCD_DataOutStageCallback>
 800957c:	e01d      	b.n	80095ba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d114      	bne.n	80095ae <PCD_EP_OutXfrComplete_int+0x1fa>
 8009584:	6879      	ldr	r1, [r7, #4]
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	4613      	mov	r3, r2
 800958a:	00db      	lsls	r3, r3, #3
 800958c:	1a9b      	subs	r3, r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	440b      	add	r3, r1
 8009592:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d108      	bne.n	80095ae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6818      	ldr	r0, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80095a6:	461a      	mov	r2, r3
 80095a8:	2100      	movs	r1, #0
 80095aa:	f002 fa0b 	bl	800b9c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f005 fbeb 	bl	800ed90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3718      	adds	r7, #24
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	4f54300a 	.word	0x4f54300a
 80095c8:	4f54310a 	.word	0x4f54310a

080095cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b086      	sub	sp, #24
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	333c      	adds	r3, #60	; 0x3c
 80095e4:	3304      	adds	r3, #4
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	015a      	lsls	r2, r3, #5
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	4413      	add	r3, r2
 80095f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	4a15      	ldr	r2, [pc, #84]	; (8009654 <PCD_EP_OutSetupPacket_int+0x88>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d90e      	bls.n	8009620 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009608:	2b00      	cmp	r3, #0
 800960a:	d009      	beq.n	8009620 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	015a      	lsls	r2, r3, #5
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	4413      	add	r3, r2
 8009614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009618:	461a      	mov	r2, r3
 800961a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800961e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f005 fba3 	bl	800ed6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	4a0a      	ldr	r2, [pc, #40]	; (8009654 <PCD_EP_OutSetupPacket_int+0x88>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d90c      	bls.n	8009648 <PCD_EP_OutSetupPacket_int+0x7c>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d108      	bne.n	8009648 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009640:	461a      	mov	r2, r3
 8009642:	2101      	movs	r1, #1
 8009644:	f002 f9be 	bl	800b9c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3718      	adds	r7, #24
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	4f54300a 	.word	0x4f54300a

08009658 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	460b      	mov	r3, r1
 8009662:	70fb      	strb	r3, [r7, #3]
 8009664:	4613      	mov	r3, r2
 8009666:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009670:	78fb      	ldrb	r3, [r7, #3]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d107      	bne.n	8009686 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009676:	883b      	ldrh	r3, [r7, #0]
 8009678:	0419      	lsls	r1, r3, #16
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	430a      	orrs	r2, r1
 8009682:	629a      	str	r2, [r3, #40]	; 0x28
 8009684:	e028      	b.n	80096d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968c:	0c1b      	lsrs	r3, r3, #16
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	4413      	add	r3, r2
 8009692:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009694:	2300      	movs	r3, #0
 8009696:	73fb      	strb	r3, [r7, #15]
 8009698:	e00d      	b.n	80096b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	7bfb      	ldrb	r3, [r7, #15]
 80096a0:	3340      	adds	r3, #64	; 0x40
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	4413      	add	r3, r2
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	0c1b      	lsrs	r3, r3, #16
 80096aa:	68ba      	ldr	r2, [r7, #8]
 80096ac:	4413      	add	r3, r2
 80096ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
 80096b2:	3301      	adds	r3, #1
 80096b4:	73fb      	strb	r3, [r7, #15]
 80096b6:	7bfa      	ldrb	r2, [r7, #15]
 80096b8:	78fb      	ldrb	r3, [r7, #3]
 80096ba:	3b01      	subs	r3, #1
 80096bc:	429a      	cmp	r2, r3
 80096be:	d3ec      	bcc.n	800969a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80096c0:	883b      	ldrh	r3, [r7, #0]
 80096c2:	0418      	lsls	r0, r3, #16
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6819      	ldr	r1, [r3, #0]
 80096c8:	78fb      	ldrb	r3, [r7, #3]
 80096ca:	3b01      	subs	r3, #1
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	4302      	orrs	r2, r0
 80096d0:	3340      	adds	r3, #64	; 0x40
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	440b      	add	r3, r1
 80096d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3714      	adds	r7, #20
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	460b      	mov	r3, r1
 80096f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	887a      	ldrh	r2, [r7, #2]
 80096f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	460b      	mov	r3, r1
 8009712:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b086      	sub	sp, #24
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d101      	bne.n	8009732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e25b      	b.n	8009bea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 0301 	and.w	r3, r3, #1
 800973a:	2b00      	cmp	r3, #0
 800973c:	d075      	beq.n	800982a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800973e:	4ba3      	ldr	r3, [pc, #652]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f003 030c 	and.w	r3, r3, #12
 8009746:	2b04      	cmp	r3, #4
 8009748:	d00c      	beq.n	8009764 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800974a:	4ba0      	ldr	r3, [pc, #640]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009752:	2b08      	cmp	r3, #8
 8009754:	d112      	bne.n	800977c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009756:	4b9d      	ldr	r3, [pc, #628]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800975e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009762:	d10b      	bne.n	800977c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009764:	4b99      	ldr	r3, [pc, #612]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800976c:	2b00      	cmp	r3, #0
 800976e:	d05b      	beq.n	8009828 <HAL_RCC_OscConfig+0x108>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d157      	bne.n	8009828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	e236      	b.n	8009bea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009784:	d106      	bne.n	8009794 <HAL_RCC_OscConfig+0x74>
 8009786:	4b91      	ldr	r3, [pc, #580]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a90      	ldr	r2, [pc, #576]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 800978c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009790:	6013      	str	r3, [r2, #0]
 8009792:	e01d      	b.n	80097d0 <HAL_RCC_OscConfig+0xb0>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800979c:	d10c      	bne.n	80097b8 <HAL_RCC_OscConfig+0x98>
 800979e:	4b8b      	ldr	r3, [pc, #556]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a8a      	ldr	r2, [pc, #552]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 80097a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097a8:	6013      	str	r3, [r2, #0]
 80097aa:	4b88      	ldr	r3, [pc, #544]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a87      	ldr	r2, [pc, #540]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 80097b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097b4:	6013      	str	r3, [r2, #0]
 80097b6:	e00b      	b.n	80097d0 <HAL_RCC_OscConfig+0xb0>
 80097b8:	4b84      	ldr	r3, [pc, #528]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a83      	ldr	r2, [pc, #524]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 80097be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097c2:	6013      	str	r3, [r2, #0]
 80097c4:	4b81      	ldr	r3, [pc, #516]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a80      	ldr	r2, [pc, #512]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 80097ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d013      	beq.n	8009800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097d8:	f7fb f98c 	bl	8004af4 <HAL_GetTick>
 80097dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097de:	e008      	b.n	80097f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80097e0:	f7fb f988 	bl	8004af4 <HAL_GetTick>
 80097e4:	4602      	mov	r2, r0
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	2b64      	cmp	r3, #100	; 0x64
 80097ec:	d901      	bls.n	80097f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80097ee:	2303      	movs	r3, #3
 80097f0:	e1fb      	b.n	8009bea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097f2:	4b76      	ldr	r3, [pc, #472]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d0f0      	beq.n	80097e0 <HAL_RCC_OscConfig+0xc0>
 80097fe:	e014      	b.n	800982a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009800:	f7fb f978 	bl	8004af4 <HAL_GetTick>
 8009804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009806:	e008      	b.n	800981a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009808:	f7fb f974 	bl	8004af4 <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	2b64      	cmp	r3, #100	; 0x64
 8009814:	d901      	bls.n	800981a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009816:	2303      	movs	r3, #3
 8009818:	e1e7      	b.n	8009bea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800981a:	4b6c      	ldr	r3, [pc, #432]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1f0      	bne.n	8009808 <HAL_RCC_OscConfig+0xe8>
 8009826:	e000      	b.n	800982a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f003 0302 	and.w	r3, r3, #2
 8009832:	2b00      	cmp	r3, #0
 8009834:	d063      	beq.n	80098fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009836:	4b65      	ldr	r3, [pc, #404]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	f003 030c 	and.w	r3, r3, #12
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00b      	beq.n	800985a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009842:	4b62      	ldr	r3, [pc, #392]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800984a:	2b08      	cmp	r3, #8
 800984c:	d11c      	bne.n	8009888 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800984e:	4b5f      	ldr	r3, [pc, #380]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d116      	bne.n	8009888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800985a:	4b5c      	ldr	r3, [pc, #368]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 0302 	and.w	r3, r3, #2
 8009862:	2b00      	cmp	r3, #0
 8009864:	d005      	beq.n	8009872 <HAL_RCC_OscConfig+0x152>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	2b01      	cmp	r3, #1
 800986c:	d001      	beq.n	8009872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	e1bb      	b.n	8009bea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009872:	4b56      	ldr	r3, [pc, #344]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	00db      	lsls	r3, r3, #3
 8009880:	4952      	ldr	r1, [pc, #328]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 8009882:	4313      	orrs	r3, r2
 8009884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009886:	e03a      	b.n	80098fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d020      	beq.n	80098d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009890:	4b4f      	ldr	r3, [pc, #316]	; (80099d0 <HAL_RCC_OscConfig+0x2b0>)
 8009892:	2201      	movs	r2, #1
 8009894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009896:	f7fb f92d 	bl	8004af4 <HAL_GetTick>
 800989a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800989c:	e008      	b.n	80098b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800989e:	f7fb f929 	bl	8004af4 <HAL_GetTick>
 80098a2:	4602      	mov	r2, r0
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d901      	bls.n	80098b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80098ac:	2303      	movs	r3, #3
 80098ae:	e19c      	b.n	8009bea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098b0:	4b46      	ldr	r3, [pc, #280]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f003 0302 	and.w	r3, r3, #2
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d0f0      	beq.n	800989e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098bc:	4b43      	ldr	r3, [pc, #268]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	00db      	lsls	r3, r3, #3
 80098ca:	4940      	ldr	r1, [pc, #256]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 80098cc:	4313      	orrs	r3, r2
 80098ce:	600b      	str	r3, [r1, #0]
 80098d0:	e015      	b.n	80098fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80098d2:	4b3f      	ldr	r3, [pc, #252]	; (80099d0 <HAL_RCC_OscConfig+0x2b0>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098d8:	f7fb f90c 	bl	8004af4 <HAL_GetTick>
 80098dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80098de:	e008      	b.n	80098f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098e0:	f7fb f908 	bl	8004af4 <HAL_GetTick>
 80098e4:	4602      	mov	r2, r0
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d901      	bls.n	80098f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80098ee:	2303      	movs	r3, #3
 80098f0:	e17b      	b.n	8009bea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80098f2:	4b36      	ldr	r3, [pc, #216]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 0302 	and.w	r3, r3, #2
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1f0      	bne.n	80098e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 0308 	and.w	r3, r3, #8
 8009906:	2b00      	cmp	r3, #0
 8009908:	d030      	beq.n	800996c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d016      	beq.n	8009940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009912:	4b30      	ldr	r3, [pc, #192]	; (80099d4 <HAL_RCC_OscConfig+0x2b4>)
 8009914:	2201      	movs	r2, #1
 8009916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009918:	f7fb f8ec 	bl	8004af4 <HAL_GetTick>
 800991c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800991e:	e008      	b.n	8009932 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009920:	f7fb f8e8 	bl	8004af4 <HAL_GetTick>
 8009924:	4602      	mov	r2, r0
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	1ad3      	subs	r3, r2, r3
 800992a:	2b02      	cmp	r3, #2
 800992c:	d901      	bls.n	8009932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800992e:	2303      	movs	r3, #3
 8009930:	e15b      	b.n	8009bea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009932:	4b26      	ldr	r3, [pc, #152]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 8009934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b00      	cmp	r3, #0
 800993c:	d0f0      	beq.n	8009920 <HAL_RCC_OscConfig+0x200>
 800993e:	e015      	b.n	800996c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009940:	4b24      	ldr	r3, [pc, #144]	; (80099d4 <HAL_RCC_OscConfig+0x2b4>)
 8009942:	2200      	movs	r2, #0
 8009944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009946:	f7fb f8d5 	bl	8004af4 <HAL_GetTick>
 800994a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800994c:	e008      	b.n	8009960 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800994e:	f7fb f8d1 	bl	8004af4 <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	2b02      	cmp	r3, #2
 800995a:	d901      	bls.n	8009960 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800995c:	2303      	movs	r3, #3
 800995e:	e144      	b.n	8009bea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009960:	4b1a      	ldr	r3, [pc, #104]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 8009962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009964:	f003 0302 	and.w	r3, r3, #2
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1f0      	bne.n	800994e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 0304 	and.w	r3, r3, #4
 8009974:	2b00      	cmp	r3, #0
 8009976:	f000 80a0 	beq.w	8009aba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800997a:	2300      	movs	r3, #0
 800997c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800997e:	4b13      	ldr	r3, [pc, #76]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 8009980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10f      	bne.n	80099aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800998a:	2300      	movs	r3, #0
 800998c:	60bb      	str	r3, [r7, #8]
 800998e:	4b0f      	ldr	r3, [pc, #60]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 8009990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009992:	4a0e      	ldr	r2, [pc, #56]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 8009994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009998:	6413      	str	r3, [r2, #64]	; 0x40
 800999a:	4b0c      	ldr	r3, [pc, #48]	; (80099cc <HAL_RCC_OscConfig+0x2ac>)
 800999c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099a2:	60bb      	str	r3, [r7, #8]
 80099a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099a6:	2301      	movs	r3, #1
 80099a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099aa:	4b0b      	ldr	r3, [pc, #44]	; (80099d8 <HAL_RCC_OscConfig+0x2b8>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d121      	bne.n	80099fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80099b6:	4b08      	ldr	r3, [pc, #32]	; (80099d8 <HAL_RCC_OscConfig+0x2b8>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a07      	ldr	r2, [pc, #28]	; (80099d8 <HAL_RCC_OscConfig+0x2b8>)
 80099bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80099c2:	f7fb f897 	bl	8004af4 <HAL_GetTick>
 80099c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099c8:	e011      	b.n	80099ee <HAL_RCC_OscConfig+0x2ce>
 80099ca:	bf00      	nop
 80099cc:	40023800 	.word	0x40023800
 80099d0:	42470000 	.word	0x42470000
 80099d4:	42470e80 	.word	0x42470e80
 80099d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099dc:	f7fb f88a 	bl	8004af4 <HAL_GetTick>
 80099e0:	4602      	mov	r2, r0
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d901      	bls.n	80099ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e0fd      	b.n	8009bea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099ee:	4b81      	ldr	r3, [pc, #516]	; (8009bf4 <HAL_RCC_OscConfig+0x4d4>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d0f0      	beq.n	80099dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d106      	bne.n	8009a10 <HAL_RCC_OscConfig+0x2f0>
 8009a02:	4b7d      	ldr	r3, [pc, #500]	; (8009bf8 <HAL_RCC_OscConfig+0x4d8>)
 8009a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a06:	4a7c      	ldr	r2, [pc, #496]	; (8009bf8 <HAL_RCC_OscConfig+0x4d8>)
 8009a08:	f043 0301 	orr.w	r3, r3, #1
 8009a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8009a0e:	e01c      	b.n	8009a4a <HAL_RCC_OscConfig+0x32a>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	2b05      	cmp	r3, #5
 8009a16:	d10c      	bne.n	8009a32 <HAL_RCC_OscConfig+0x312>
 8009a18:	4b77      	ldr	r3, [pc, #476]	; (8009bf8 <HAL_RCC_OscConfig+0x4d8>)
 8009a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a1c:	4a76      	ldr	r2, [pc, #472]	; (8009bf8 <HAL_RCC_OscConfig+0x4d8>)
 8009a1e:	f043 0304 	orr.w	r3, r3, #4
 8009a22:	6713      	str	r3, [r2, #112]	; 0x70
 8009a24:	4b74      	ldr	r3, [pc, #464]	; (8009bf8 <HAL_RCC_OscConfig+0x4d8>)
 8009a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a28:	4a73      	ldr	r2, [pc, #460]	; (8009bf8 <HAL_RCC_OscConfig+0x4d8>)
 8009a2a:	f043 0301 	orr.w	r3, r3, #1
 8009a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8009a30:	e00b      	b.n	8009a4a <HAL_RCC_OscConfig+0x32a>
 8009a32:	4b71      	ldr	r3, [pc, #452]	; (8009bf8 <HAL_RCC_OscConfig+0x4d8>)
 8009a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a36:	4a70      	ldr	r2, [pc, #448]	; (8009bf8 <HAL_RCC_OscConfig+0x4d8>)
 8009a38:	f023 0301 	bic.w	r3, r3, #1
 8009a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8009a3e:	4b6e      	ldr	r3, [pc, #440]	; (8009bf8 <HAL_RCC_OscConfig+0x4d8>)
 8009a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a42:	4a6d      	ldr	r2, [pc, #436]	; (8009bf8 <HAL_RCC_OscConfig+0x4d8>)
 8009a44:	f023 0304 	bic.w	r3, r3, #4
 8009a48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d015      	beq.n	8009a7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a52:	f7fb f84f 	bl	8004af4 <HAL_GetTick>
 8009a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a58:	e00a      	b.n	8009a70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a5a:	f7fb f84b 	bl	8004af4 <HAL_GetTick>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d901      	bls.n	8009a70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	e0bc      	b.n	8009bea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a70:	4b61      	ldr	r3, [pc, #388]	; (8009bf8 <HAL_RCC_OscConfig+0x4d8>)
 8009a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a74:	f003 0302 	and.w	r3, r3, #2
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d0ee      	beq.n	8009a5a <HAL_RCC_OscConfig+0x33a>
 8009a7c:	e014      	b.n	8009aa8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a7e:	f7fb f839 	bl	8004af4 <HAL_GetTick>
 8009a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a84:	e00a      	b.n	8009a9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a86:	f7fb f835 	bl	8004af4 <HAL_GetTick>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d901      	bls.n	8009a9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	e0a6      	b.n	8009bea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a9c:	4b56      	ldr	r3, [pc, #344]	; (8009bf8 <HAL_RCC_OscConfig+0x4d8>)
 8009a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aa0:	f003 0302 	and.w	r3, r3, #2
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1ee      	bne.n	8009a86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009aa8:	7dfb      	ldrb	r3, [r7, #23]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d105      	bne.n	8009aba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009aae:	4b52      	ldr	r3, [pc, #328]	; (8009bf8 <HAL_RCC_OscConfig+0x4d8>)
 8009ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab2:	4a51      	ldr	r2, [pc, #324]	; (8009bf8 <HAL_RCC_OscConfig+0x4d8>)
 8009ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ab8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f000 8092 	beq.w	8009be8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009ac4:	4b4c      	ldr	r3, [pc, #304]	; (8009bf8 <HAL_RCC_OscConfig+0x4d8>)
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	f003 030c 	and.w	r3, r3, #12
 8009acc:	2b08      	cmp	r3, #8
 8009ace:	d05c      	beq.n	8009b8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d141      	bne.n	8009b5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ad8:	4b48      	ldr	r3, [pc, #288]	; (8009bfc <HAL_RCC_OscConfig+0x4dc>)
 8009ada:	2200      	movs	r2, #0
 8009adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ade:	f7fb f809 	bl	8004af4 <HAL_GetTick>
 8009ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ae4:	e008      	b.n	8009af8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ae6:	f7fb f805 	bl	8004af4 <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d901      	bls.n	8009af8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e078      	b.n	8009bea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009af8:	4b3f      	ldr	r3, [pc, #252]	; (8009bf8 <HAL_RCC_OscConfig+0x4d8>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1f0      	bne.n	8009ae6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	69da      	ldr	r2, [r3, #28]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a1b      	ldr	r3, [r3, #32]
 8009b0c:	431a      	orrs	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b12:	019b      	lsls	r3, r3, #6
 8009b14:	431a      	orrs	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1a:	085b      	lsrs	r3, r3, #1
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	041b      	lsls	r3, r3, #16
 8009b20:	431a      	orrs	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b26:	061b      	lsls	r3, r3, #24
 8009b28:	4933      	ldr	r1, [pc, #204]	; (8009bf8 <HAL_RCC_OscConfig+0x4d8>)
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b2e:	4b33      	ldr	r3, [pc, #204]	; (8009bfc <HAL_RCC_OscConfig+0x4dc>)
 8009b30:	2201      	movs	r2, #1
 8009b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b34:	f7fa ffde 	bl	8004af4 <HAL_GetTick>
 8009b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b3a:	e008      	b.n	8009b4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b3c:	f7fa ffda 	bl	8004af4 <HAL_GetTick>
 8009b40:	4602      	mov	r2, r0
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	1ad3      	subs	r3, r2, r3
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d901      	bls.n	8009b4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009b4a:	2303      	movs	r3, #3
 8009b4c:	e04d      	b.n	8009bea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b4e:	4b2a      	ldr	r3, [pc, #168]	; (8009bf8 <HAL_RCC_OscConfig+0x4d8>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d0f0      	beq.n	8009b3c <HAL_RCC_OscConfig+0x41c>
 8009b5a:	e045      	b.n	8009be8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b5c:	4b27      	ldr	r3, [pc, #156]	; (8009bfc <HAL_RCC_OscConfig+0x4dc>)
 8009b5e:	2200      	movs	r2, #0
 8009b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b62:	f7fa ffc7 	bl	8004af4 <HAL_GetTick>
 8009b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b68:	e008      	b.n	8009b7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b6a:	f7fa ffc3 	bl	8004af4 <HAL_GetTick>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d901      	bls.n	8009b7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	e036      	b.n	8009bea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b7c:	4b1e      	ldr	r3, [pc, #120]	; (8009bf8 <HAL_RCC_OscConfig+0x4d8>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1f0      	bne.n	8009b6a <HAL_RCC_OscConfig+0x44a>
 8009b88:	e02e      	b.n	8009be8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d101      	bne.n	8009b96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e029      	b.n	8009bea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009b96:	4b18      	ldr	r3, [pc, #96]	; (8009bf8 <HAL_RCC_OscConfig+0x4d8>)
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	69db      	ldr	r3, [r3, #28]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d11c      	bne.n	8009be4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d115      	bne.n	8009be4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d10d      	bne.n	8009be4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d106      	bne.n	8009be4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d001      	beq.n	8009be8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	e000      	b.n	8009bea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3718      	adds	r7, #24
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	40007000 	.word	0x40007000
 8009bf8:	40023800 	.word	0x40023800
 8009bfc:	42470060 	.word	0x42470060

08009c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d101      	bne.n	8009c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	e0cc      	b.n	8009dae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c14:	4b68      	ldr	r3, [pc, #416]	; (8009db8 <HAL_RCC_ClockConfig+0x1b8>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 030f 	and.w	r3, r3, #15
 8009c1c:	683a      	ldr	r2, [r7, #0]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d90c      	bls.n	8009c3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c22:	4b65      	ldr	r3, [pc, #404]	; (8009db8 <HAL_RCC_ClockConfig+0x1b8>)
 8009c24:	683a      	ldr	r2, [r7, #0]
 8009c26:	b2d2      	uxtb	r2, r2
 8009c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c2a:	4b63      	ldr	r3, [pc, #396]	; (8009db8 <HAL_RCC_ClockConfig+0x1b8>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 030f 	and.w	r3, r3, #15
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d001      	beq.n	8009c3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e0b8      	b.n	8009dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 0302 	and.w	r3, r3, #2
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d020      	beq.n	8009c8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 0304 	and.w	r3, r3, #4
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d005      	beq.n	8009c60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009c54:	4b59      	ldr	r3, [pc, #356]	; (8009dbc <HAL_RCC_ClockConfig+0x1bc>)
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	4a58      	ldr	r2, [pc, #352]	; (8009dbc <HAL_RCC_ClockConfig+0x1bc>)
 8009c5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009c5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f003 0308 	and.w	r3, r3, #8
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d005      	beq.n	8009c78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009c6c:	4b53      	ldr	r3, [pc, #332]	; (8009dbc <HAL_RCC_ClockConfig+0x1bc>)
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	4a52      	ldr	r2, [pc, #328]	; (8009dbc <HAL_RCC_ClockConfig+0x1bc>)
 8009c72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009c76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c78:	4b50      	ldr	r3, [pc, #320]	; (8009dbc <HAL_RCC_ClockConfig+0x1bc>)
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	494d      	ldr	r1, [pc, #308]	; (8009dbc <HAL_RCC_ClockConfig+0x1bc>)
 8009c86:	4313      	orrs	r3, r2
 8009c88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 0301 	and.w	r3, r3, #1
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d044      	beq.n	8009d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d107      	bne.n	8009cae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c9e:	4b47      	ldr	r3, [pc, #284]	; (8009dbc <HAL_RCC_ClockConfig+0x1bc>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d119      	bne.n	8009cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e07f      	b.n	8009dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d003      	beq.n	8009cbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009cba:	2b03      	cmp	r3, #3
 8009cbc:	d107      	bne.n	8009cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009cbe:	4b3f      	ldr	r3, [pc, #252]	; (8009dbc <HAL_RCC_ClockConfig+0x1bc>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d109      	bne.n	8009cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e06f      	b.n	8009dae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009cce:	4b3b      	ldr	r3, [pc, #236]	; (8009dbc <HAL_RCC_ClockConfig+0x1bc>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 0302 	and.w	r3, r3, #2
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d101      	bne.n	8009cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e067      	b.n	8009dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009cde:	4b37      	ldr	r3, [pc, #220]	; (8009dbc <HAL_RCC_ClockConfig+0x1bc>)
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	f023 0203 	bic.w	r2, r3, #3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	4934      	ldr	r1, [pc, #208]	; (8009dbc <HAL_RCC_ClockConfig+0x1bc>)
 8009cec:	4313      	orrs	r3, r2
 8009cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009cf0:	f7fa ff00 	bl	8004af4 <HAL_GetTick>
 8009cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cf6:	e00a      	b.n	8009d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009cf8:	f7fa fefc 	bl	8004af4 <HAL_GetTick>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	1ad3      	subs	r3, r2, r3
 8009d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d901      	bls.n	8009d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	e04f      	b.n	8009dae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d0e:	4b2b      	ldr	r3, [pc, #172]	; (8009dbc <HAL_RCC_ClockConfig+0x1bc>)
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	f003 020c 	and.w	r2, r3, #12
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d1eb      	bne.n	8009cf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d20:	4b25      	ldr	r3, [pc, #148]	; (8009db8 <HAL_RCC_ClockConfig+0x1b8>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f003 030f 	and.w	r3, r3, #15
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d20c      	bcs.n	8009d48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d2e:	4b22      	ldr	r3, [pc, #136]	; (8009db8 <HAL_RCC_ClockConfig+0x1b8>)
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	b2d2      	uxtb	r2, r2
 8009d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d36:	4b20      	ldr	r3, [pc, #128]	; (8009db8 <HAL_RCC_ClockConfig+0x1b8>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 030f 	and.w	r3, r3, #15
 8009d3e:	683a      	ldr	r2, [r7, #0]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d001      	beq.n	8009d48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	e032      	b.n	8009dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 0304 	and.w	r3, r3, #4
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d008      	beq.n	8009d66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d54:	4b19      	ldr	r3, [pc, #100]	; (8009dbc <HAL_RCC_ClockConfig+0x1bc>)
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	4916      	ldr	r1, [pc, #88]	; (8009dbc <HAL_RCC_ClockConfig+0x1bc>)
 8009d62:	4313      	orrs	r3, r2
 8009d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f003 0308 	and.w	r3, r3, #8
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d009      	beq.n	8009d86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009d72:	4b12      	ldr	r3, [pc, #72]	; (8009dbc <HAL_RCC_ClockConfig+0x1bc>)
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	00db      	lsls	r3, r3, #3
 8009d80:	490e      	ldr	r1, [pc, #56]	; (8009dbc <HAL_RCC_ClockConfig+0x1bc>)
 8009d82:	4313      	orrs	r3, r2
 8009d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009d86:	f000 f821 	bl	8009dcc <HAL_RCC_GetSysClockFreq>
 8009d8a:	4601      	mov	r1, r0
 8009d8c:	4b0b      	ldr	r3, [pc, #44]	; (8009dbc <HAL_RCC_ClockConfig+0x1bc>)
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	091b      	lsrs	r3, r3, #4
 8009d92:	f003 030f 	and.w	r3, r3, #15
 8009d96:	4a0a      	ldr	r2, [pc, #40]	; (8009dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8009d98:	5cd3      	ldrb	r3, [r2, r3]
 8009d9a:	fa21 f303 	lsr.w	r3, r1, r3
 8009d9e:	4a09      	ldr	r2, [pc, #36]	; (8009dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8009da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009da2:	4b09      	ldr	r3, [pc, #36]	; (8009dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7f7 fd94 	bl	80018d4 <HAL_InitTick>

  return HAL_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	40023c00 	.word	0x40023c00
 8009dbc:	40023800 	.word	0x40023800
 8009dc0:	0800fa68 	.word	0x0800fa68
 8009dc4:	20000008 	.word	0x20000008
 8009dc8:	2000000c 	.word	0x2000000c

08009dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	607b      	str	r3, [r7, #4]
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	60fb      	str	r3, [r7, #12]
 8009dda:	2300      	movs	r3, #0
 8009ddc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009dde:	2300      	movs	r3, #0
 8009de0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009de2:	4b63      	ldr	r3, [pc, #396]	; (8009f70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	f003 030c 	and.w	r3, r3, #12
 8009dea:	2b04      	cmp	r3, #4
 8009dec:	d007      	beq.n	8009dfe <HAL_RCC_GetSysClockFreq+0x32>
 8009dee:	2b08      	cmp	r3, #8
 8009df0:	d008      	beq.n	8009e04 <HAL_RCC_GetSysClockFreq+0x38>
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f040 80b4 	bne.w	8009f60 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009df8:	4b5e      	ldr	r3, [pc, #376]	; (8009f74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009dfa:	60bb      	str	r3, [r7, #8]
       break;
 8009dfc:	e0b3      	b.n	8009f66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009dfe:	4b5e      	ldr	r3, [pc, #376]	; (8009f78 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8009e00:	60bb      	str	r3, [r7, #8]
      break;
 8009e02:	e0b0      	b.n	8009f66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e04:	4b5a      	ldr	r3, [pc, #360]	; (8009f70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009e0e:	4b58      	ldr	r3, [pc, #352]	; (8009f70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d04a      	beq.n	8009eb0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e1a:	4b55      	ldr	r3, [pc, #340]	; (8009f70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	099b      	lsrs	r3, r3, #6
 8009e20:	f04f 0400 	mov.w	r4, #0
 8009e24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009e28:	f04f 0200 	mov.w	r2, #0
 8009e2c:	ea03 0501 	and.w	r5, r3, r1
 8009e30:	ea04 0602 	and.w	r6, r4, r2
 8009e34:	4629      	mov	r1, r5
 8009e36:	4632      	mov	r2, r6
 8009e38:	f04f 0300 	mov.w	r3, #0
 8009e3c:	f04f 0400 	mov.w	r4, #0
 8009e40:	0154      	lsls	r4, r2, #5
 8009e42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009e46:	014b      	lsls	r3, r1, #5
 8009e48:	4619      	mov	r1, r3
 8009e4a:	4622      	mov	r2, r4
 8009e4c:	1b49      	subs	r1, r1, r5
 8009e4e:	eb62 0206 	sbc.w	r2, r2, r6
 8009e52:	f04f 0300 	mov.w	r3, #0
 8009e56:	f04f 0400 	mov.w	r4, #0
 8009e5a:	0194      	lsls	r4, r2, #6
 8009e5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009e60:	018b      	lsls	r3, r1, #6
 8009e62:	1a5b      	subs	r3, r3, r1
 8009e64:	eb64 0402 	sbc.w	r4, r4, r2
 8009e68:	f04f 0100 	mov.w	r1, #0
 8009e6c:	f04f 0200 	mov.w	r2, #0
 8009e70:	00e2      	lsls	r2, r4, #3
 8009e72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009e76:	00d9      	lsls	r1, r3, #3
 8009e78:	460b      	mov	r3, r1
 8009e7a:	4614      	mov	r4, r2
 8009e7c:	195b      	adds	r3, r3, r5
 8009e7e:	eb44 0406 	adc.w	r4, r4, r6
 8009e82:	f04f 0100 	mov.w	r1, #0
 8009e86:	f04f 0200 	mov.w	r2, #0
 8009e8a:	0262      	lsls	r2, r4, #9
 8009e8c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009e90:	0259      	lsls	r1, r3, #9
 8009e92:	460b      	mov	r3, r1
 8009e94:	4614      	mov	r4, r2
 8009e96:	4618      	mov	r0, r3
 8009e98:	4621      	mov	r1, r4
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f04f 0400 	mov.w	r4, #0
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	4623      	mov	r3, r4
 8009ea4:	f7f6 f99c 	bl	80001e0 <__aeabi_uldivmod>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	460c      	mov	r4, r1
 8009eac:	60fb      	str	r3, [r7, #12]
 8009eae:	e049      	b.n	8009f44 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009eb0:	4b2f      	ldr	r3, [pc, #188]	; (8009f70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	099b      	lsrs	r3, r3, #6
 8009eb6:	f04f 0400 	mov.w	r4, #0
 8009eba:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009ebe:	f04f 0200 	mov.w	r2, #0
 8009ec2:	ea03 0501 	and.w	r5, r3, r1
 8009ec6:	ea04 0602 	and.w	r6, r4, r2
 8009eca:	4629      	mov	r1, r5
 8009ecc:	4632      	mov	r2, r6
 8009ece:	f04f 0300 	mov.w	r3, #0
 8009ed2:	f04f 0400 	mov.w	r4, #0
 8009ed6:	0154      	lsls	r4, r2, #5
 8009ed8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009edc:	014b      	lsls	r3, r1, #5
 8009ede:	4619      	mov	r1, r3
 8009ee0:	4622      	mov	r2, r4
 8009ee2:	1b49      	subs	r1, r1, r5
 8009ee4:	eb62 0206 	sbc.w	r2, r2, r6
 8009ee8:	f04f 0300 	mov.w	r3, #0
 8009eec:	f04f 0400 	mov.w	r4, #0
 8009ef0:	0194      	lsls	r4, r2, #6
 8009ef2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009ef6:	018b      	lsls	r3, r1, #6
 8009ef8:	1a5b      	subs	r3, r3, r1
 8009efa:	eb64 0402 	sbc.w	r4, r4, r2
 8009efe:	f04f 0100 	mov.w	r1, #0
 8009f02:	f04f 0200 	mov.w	r2, #0
 8009f06:	00e2      	lsls	r2, r4, #3
 8009f08:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009f0c:	00d9      	lsls	r1, r3, #3
 8009f0e:	460b      	mov	r3, r1
 8009f10:	4614      	mov	r4, r2
 8009f12:	195b      	adds	r3, r3, r5
 8009f14:	eb44 0406 	adc.w	r4, r4, r6
 8009f18:	f04f 0100 	mov.w	r1, #0
 8009f1c:	f04f 0200 	mov.w	r2, #0
 8009f20:	02a2      	lsls	r2, r4, #10
 8009f22:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009f26:	0299      	lsls	r1, r3, #10
 8009f28:	460b      	mov	r3, r1
 8009f2a:	4614      	mov	r4, r2
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	4621      	mov	r1, r4
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f04f 0400 	mov.w	r4, #0
 8009f36:	461a      	mov	r2, r3
 8009f38:	4623      	mov	r3, r4
 8009f3a:	f7f6 f951 	bl	80001e0 <__aeabi_uldivmod>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	460c      	mov	r4, r1
 8009f42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009f44:	4b0a      	ldr	r3, [pc, #40]	; (8009f70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	0c1b      	lsrs	r3, r3, #16
 8009f4a:	f003 0303 	and.w	r3, r3, #3
 8009f4e:	3301      	adds	r3, #1
 8009f50:	005b      	lsls	r3, r3, #1
 8009f52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f5c:	60bb      	str	r3, [r7, #8]
      break;
 8009f5e:	e002      	b.n	8009f66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009f60:	4b04      	ldr	r3, [pc, #16]	; (8009f74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009f62:	60bb      	str	r3, [r7, #8]
      break;
 8009f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009f66:	68bb      	ldr	r3, [r7, #8]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f70:	40023800 	.word	0x40023800
 8009f74:	00f42400 	.word	0x00f42400
 8009f78:	007a1200 	.word	0x007a1200

08009f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f80:	4b03      	ldr	r3, [pc, #12]	; (8009f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8009f82:	681b      	ldr	r3, [r3, #0]
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	20000008 	.word	0x20000008

08009f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009f98:	f7ff fff0 	bl	8009f7c <HAL_RCC_GetHCLKFreq>
 8009f9c:	4601      	mov	r1, r0
 8009f9e:	4b05      	ldr	r3, [pc, #20]	; (8009fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	0a9b      	lsrs	r3, r3, #10
 8009fa4:	f003 0307 	and.w	r3, r3, #7
 8009fa8:	4a03      	ldr	r2, [pc, #12]	; (8009fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009faa:	5cd3      	ldrb	r3, [r2, r3]
 8009fac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	40023800 	.word	0x40023800
 8009fb8:	0800fa78 	.word	0x0800fa78

08009fbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	220f      	movs	r2, #15
 8009fca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009fcc:	4b12      	ldr	r3, [pc, #72]	; (800a018 <HAL_RCC_GetClockConfig+0x5c>)
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	f003 0203 	and.w	r2, r3, #3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009fd8:	4b0f      	ldr	r3, [pc, #60]	; (800a018 <HAL_RCC_GetClockConfig+0x5c>)
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009fe4:	4b0c      	ldr	r3, [pc, #48]	; (800a018 <HAL_RCC_GetClockConfig+0x5c>)
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009ff0:	4b09      	ldr	r3, [pc, #36]	; (800a018 <HAL_RCC_GetClockConfig+0x5c>)
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	08db      	lsrs	r3, r3, #3
 8009ff6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009ffe:	4b07      	ldr	r3, [pc, #28]	; (800a01c <HAL_RCC_GetClockConfig+0x60>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 020f 	and.w	r2, r3, #15
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	601a      	str	r2, [r3, #0]
}
 800a00a:	bf00      	nop
 800a00c:	370c      	adds	r7, #12
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	40023800 	.word	0x40023800
 800a01c:	40023c00 	.word	0x40023c00

0800a020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d101      	bne.n	800a032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e01d      	b.n	800a06e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d106      	bne.n	800a04c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f815 	bl	800a076 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2202      	movs	r2, #2
 800a050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	3304      	adds	r3, #4
 800a05c:	4619      	mov	r1, r3
 800a05e:	4610      	mov	r0, r2
 800a060:	f000 f968 	bl	800a334 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a076:	b480      	push	{r7}
 800a078:	b083      	sub	sp, #12
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a07e:	bf00      	nop
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a08a:	b480      	push	{r7}
 800a08c:	b085      	sub	sp, #20
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68da      	ldr	r2, [r3, #12]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f042 0201 	orr.w	r2, r2, #1
 800a0a0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	f003 0307 	and.w	r3, r3, #7
 800a0ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2b06      	cmp	r3, #6
 800a0b2:	d007      	beq.n	800a0c4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f042 0201 	orr.w	r2, r2, #1
 800a0c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b082      	sub	sp, #8
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	f003 0302 	and.w	r3, r3, #2
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d122      	bne.n	800a12e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	f003 0302 	and.w	r3, r3, #2
 800a0f2:	2b02      	cmp	r3, #2
 800a0f4:	d11b      	bne.n	800a12e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f06f 0202 	mvn.w	r2, #2
 800a0fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	699b      	ldr	r3, [r3, #24]
 800a10c:	f003 0303 	and.w	r3, r3, #3
 800a110:	2b00      	cmp	r3, #0
 800a112:	d003      	beq.n	800a11c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f8ee 	bl	800a2f6 <HAL_TIM_IC_CaptureCallback>
 800a11a:	e005      	b.n	800a128 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 f8e0 	bl	800a2e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f8f1 	bl	800a30a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	f003 0304 	and.w	r3, r3, #4
 800a138:	2b04      	cmp	r3, #4
 800a13a:	d122      	bne.n	800a182 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	f003 0304 	and.w	r3, r3, #4
 800a146:	2b04      	cmp	r3, #4
 800a148:	d11b      	bne.n	800a182 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f06f 0204 	mvn.w	r2, #4
 800a152:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2202      	movs	r2, #2
 800a158:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	699b      	ldr	r3, [r3, #24]
 800a160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a164:	2b00      	cmp	r3, #0
 800a166:	d003      	beq.n	800a170 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 f8c4 	bl	800a2f6 <HAL_TIM_IC_CaptureCallback>
 800a16e:	e005      	b.n	800a17c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f8b6 	bl	800a2e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f8c7 	bl	800a30a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	f003 0308 	and.w	r3, r3, #8
 800a18c:	2b08      	cmp	r3, #8
 800a18e:	d122      	bne.n	800a1d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	f003 0308 	and.w	r3, r3, #8
 800a19a:	2b08      	cmp	r3, #8
 800a19c:	d11b      	bne.n	800a1d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f06f 0208 	mvn.w	r2, #8
 800a1a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2204      	movs	r2, #4
 800a1ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	69db      	ldr	r3, [r3, #28]
 800a1b4:	f003 0303 	and.w	r3, r3, #3
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 f89a 	bl	800a2f6 <HAL_TIM_IC_CaptureCallback>
 800a1c2:	e005      	b.n	800a1d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f88c 	bl	800a2e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 f89d 	bl	800a30a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	f003 0310 	and.w	r3, r3, #16
 800a1e0:	2b10      	cmp	r3, #16
 800a1e2:	d122      	bne.n	800a22a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	f003 0310 	and.w	r3, r3, #16
 800a1ee:	2b10      	cmp	r3, #16
 800a1f0:	d11b      	bne.n	800a22a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f06f 0210 	mvn.w	r2, #16
 800a1fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2208      	movs	r2, #8
 800a200:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	69db      	ldr	r3, [r3, #28]
 800a208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d003      	beq.n	800a218 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 f870 	bl	800a2f6 <HAL_TIM_IC_CaptureCallback>
 800a216:	e005      	b.n	800a224 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 f862 	bl	800a2e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f873 	bl	800a30a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	f003 0301 	and.w	r3, r3, #1
 800a234:	2b01      	cmp	r3, #1
 800a236:	d10e      	bne.n	800a256 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	f003 0301 	and.w	r3, r3, #1
 800a242:	2b01      	cmp	r3, #1
 800a244:	d107      	bne.n	800a256 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f06f 0201 	mvn.w	r2, #1
 800a24e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f7f6 fd73 	bl	8000d3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	691b      	ldr	r3, [r3, #16]
 800a25c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a260:	2b80      	cmp	r3, #128	; 0x80
 800a262:	d10e      	bne.n	800a282 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a26e:	2b80      	cmp	r3, #128	; 0x80
 800a270:	d107      	bne.n	800a282 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a27a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 f903 	bl	800a488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a28c:	2b40      	cmp	r3, #64	; 0x40
 800a28e:	d10e      	bne.n	800a2ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a29a:	2b40      	cmp	r3, #64	; 0x40
 800a29c:	d107      	bne.n	800a2ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a2a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 f838 	bl	800a31e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	f003 0320 	and.w	r3, r3, #32
 800a2b8:	2b20      	cmp	r3, #32
 800a2ba:	d10e      	bne.n	800a2da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	f003 0320 	and.w	r3, r3, #32
 800a2c6:	2b20      	cmp	r3, #32
 800a2c8:	d107      	bne.n	800a2da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f06f 0220 	mvn.w	r2, #32
 800a2d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 f8cd 	bl	800a474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2da:	bf00      	nop
 800a2dc:	3708      	adds	r7, #8
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2e2:	b480      	push	{r7}
 800a2e4:	b083      	sub	sp, #12
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a2ea:	bf00      	nop
 800a2ec:	370c      	adds	r7, #12
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	b083      	sub	sp, #12
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a2fe:	bf00      	nop
 800a300:	370c      	adds	r7, #12
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr

0800a30a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a30a:	b480      	push	{r7}
 800a30c:	b083      	sub	sp, #12
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a312:	bf00      	nop
 800a314:	370c      	adds	r7, #12
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a31e:	b480      	push	{r7}
 800a320:	b083      	sub	sp, #12
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a326:	bf00      	nop
 800a328:	370c      	adds	r7, #12
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
	...

0800a334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a40      	ldr	r2, [pc, #256]	; (800a448 <TIM_Base_SetConfig+0x114>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d013      	beq.n	800a374 <TIM_Base_SetConfig+0x40>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a352:	d00f      	beq.n	800a374 <TIM_Base_SetConfig+0x40>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	4a3d      	ldr	r2, [pc, #244]	; (800a44c <TIM_Base_SetConfig+0x118>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d00b      	beq.n	800a374 <TIM_Base_SetConfig+0x40>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a3c      	ldr	r2, [pc, #240]	; (800a450 <TIM_Base_SetConfig+0x11c>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d007      	beq.n	800a374 <TIM_Base_SetConfig+0x40>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	4a3b      	ldr	r2, [pc, #236]	; (800a454 <TIM_Base_SetConfig+0x120>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d003      	beq.n	800a374 <TIM_Base_SetConfig+0x40>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4a3a      	ldr	r2, [pc, #232]	; (800a458 <TIM_Base_SetConfig+0x124>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d108      	bne.n	800a386 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a37a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	4313      	orrs	r3, r2
 800a384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4a2f      	ldr	r2, [pc, #188]	; (800a448 <TIM_Base_SetConfig+0x114>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d02b      	beq.n	800a3e6 <TIM_Base_SetConfig+0xb2>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a394:	d027      	beq.n	800a3e6 <TIM_Base_SetConfig+0xb2>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a2c      	ldr	r2, [pc, #176]	; (800a44c <TIM_Base_SetConfig+0x118>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d023      	beq.n	800a3e6 <TIM_Base_SetConfig+0xb2>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a2b      	ldr	r2, [pc, #172]	; (800a450 <TIM_Base_SetConfig+0x11c>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d01f      	beq.n	800a3e6 <TIM_Base_SetConfig+0xb2>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4a2a      	ldr	r2, [pc, #168]	; (800a454 <TIM_Base_SetConfig+0x120>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d01b      	beq.n	800a3e6 <TIM_Base_SetConfig+0xb2>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4a29      	ldr	r2, [pc, #164]	; (800a458 <TIM_Base_SetConfig+0x124>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d017      	beq.n	800a3e6 <TIM_Base_SetConfig+0xb2>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a28      	ldr	r2, [pc, #160]	; (800a45c <TIM_Base_SetConfig+0x128>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d013      	beq.n	800a3e6 <TIM_Base_SetConfig+0xb2>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4a27      	ldr	r2, [pc, #156]	; (800a460 <TIM_Base_SetConfig+0x12c>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d00f      	beq.n	800a3e6 <TIM_Base_SetConfig+0xb2>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4a26      	ldr	r2, [pc, #152]	; (800a464 <TIM_Base_SetConfig+0x130>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d00b      	beq.n	800a3e6 <TIM_Base_SetConfig+0xb2>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	4a25      	ldr	r2, [pc, #148]	; (800a468 <TIM_Base_SetConfig+0x134>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d007      	beq.n	800a3e6 <TIM_Base_SetConfig+0xb2>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4a24      	ldr	r2, [pc, #144]	; (800a46c <TIM_Base_SetConfig+0x138>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d003      	beq.n	800a3e6 <TIM_Base_SetConfig+0xb2>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a23      	ldr	r2, [pc, #140]	; (800a470 <TIM_Base_SetConfig+0x13c>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d108      	bne.n	800a3f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	695b      	ldr	r3, [r3, #20]
 800a402:	4313      	orrs	r3, r2
 800a404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	689a      	ldr	r2, [r3, #8]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a0a      	ldr	r2, [pc, #40]	; (800a448 <TIM_Base_SetConfig+0x114>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d003      	beq.n	800a42c <TIM_Base_SetConfig+0xf8>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a0c      	ldr	r2, [pc, #48]	; (800a458 <TIM_Base_SetConfig+0x124>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d103      	bne.n	800a434 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	691a      	ldr	r2, [r3, #16]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	615a      	str	r2, [r3, #20]
}
 800a43a:	bf00      	nop
 800a43c:	3714      	adds	r7, #20
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	40010000 	.word	0x40010000
 800a44c:	40000400 	.word	0x40000400
 800a450:	40000800 	.word	0x40000800
 800a454:	40000c00 	.word	0x40000c00
 800a458:	40010400 	.word	0x40010400
 800a45c:	40014000 	.word	0x40014000
 800a460:	40014400 	.word	0x40014400
 800a464:	40014800 	.word	0x40014800
 800a468:	40001800 	.word	0x40001800
 800a46c:	40001c00 	.word	0x40001c00
 800a470:	40002000 	.word	0x40002000

0800a474 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a490:	bf00      	nop
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a49c:	b084      	sub	sp, #16
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b084      	sub	sp, #16
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	f107 001c 	add.w	r0, r7, #28
 800a4aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d122      	bne.n	800a4fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a4c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a4dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d105      	bne.n	800a4ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	68db      	ldr	r3, [r3, #12]
 800a4e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f001 fac6 	bl	800ba80 <USB_CoreReset>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	73fb      	strb	r3, [r7, #15]
 800a4f8:	e01a      	b.n	800a530 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f001 faba 	bl	800ba80 <USB_CoreReset>
 800a50c:	4603      	mov	r3, r0
 800a50e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a512:	2b00      	cmp	r3, #0
 800a514:	d106      	bne.n	800a524 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	639a      	str	r2, [r3, #56]	; 0x38
 800a522:	e005      	b.n	800a530 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a528:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a532:	2b01      	cmp	r3, #1
 800a534:	d10b      	bne.n	800a54e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	689b      	ldr	r3, [r3, #8]
 800a53a:	f043 0206 	orr.w	r2, r3, #6
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	f043 0220 	orr.w	r2, r3, #32
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a54e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a550:	4618      	mov	r0, r3
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a55a:	b004      	add	sp, #16
 800a55c:	4770      	bx	lr
	...

0800a560 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a560:	b480      	push	{r7}
 800a562:	b087      	sub	sp, #28
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	4613      	mov	r3, r2
 800a56c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a56e:	79fb      	ldrb	r3, [r7, #7]
 800a570:	2b02      	cmp	r3, #2
 800a572:	d165      	bne.n	800a640 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	4a41      	ldr	r2, [pc, #260]	; (800a67c <USB_SetTurnaroundTime+0x11c>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d906      	bls.n	800a58a <USB_SetTurnaroundTime+0x2a>
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	4a40      	ldr	r2, [pc, #256]	; (800a680 <USB_SetTurnaroundTime+0x120>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d802      	bhi.n	800a58a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a584:	230f      	movs	r3, #15
 800a586:	617b      	str	r3, [r7, #20]
 800a588:	e062      	b.n	800a650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	4a3c      	ldr	r2, [pc, #240]	; (800a680 <USB_SetTurnaroundTime+0x120>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d906      	bls.n	800a5a0 <USB_SetTurnaroundTime+0x40>
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	4a3b      	ldr	r2, [pc, #236]	; (800a684 <USB_SetTurnaroundTime+0x124>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d802      	bhi.n	800a5a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a59a:	230e      	movs	r3, #14
 800a59c:	617b      	str	r3, [r7, #20]
 800a59e:	e057      	b.n	800a650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	4a38      	ldr	r2, [pc, #224]	; (800a684 <USB_SetTurnaroundTime+0x124>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d906      	bls.n	800a5b6 <USB_SetTurnaroundTime+0x56>
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	4a37      	ldr	r2, [pc, #220]	; (800a688 <USB_SetTurnaroundTime+0x128>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d802      	bhi.n	800a5b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a5b0:	230d      	movs	r3, #13
 800a5b2:	617b      	str	r3, [r7, #20]
 800a5b4:	e04c      	b.n	800a650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	4a33      	ldr	r2, [pc, #204]	; (800a688 <USB_SetTurnaroundTime+0x128>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d906      	bls.n	800a5cc <USB_SetTurnaroundTime+0x6c>
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	4a32      	ldr	r2, [pc, #200]	; (800a68c <USB_SetTurnaroundTime+0x12c>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d802      	bhi.n	800a5cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a5c6:	230c      	movs	r3, #12
 800a5c8:	617b      	str	r3, [r7, #20]
 800a5ca:	e041      	b.n	800a650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	4a2f      	ldr	r2, [pc, #188]	; (800a68c <USB_SetTurnaroundTime+0x12c>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d906      	bls.n	800a5e2 <USB_SetTurnaroundTime+0x82>
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	4a2e      	ldr	r2, [pc, #184]	; (800a690 <USB_SetTurnaroundTime+0x130>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d802      	bhi.n	800a5e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a5dc:	230b      	movs	r3, #11
 800a5de:	617b      	str	r3, [r7, #20]
 800a5e0:	e036      	b.n	800a650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	4a2a      	ldr	r2, [pc, #168]	; (800a690 <USB_SetTurnaroundTime+0x130>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d906      	bls.n	800a5f8 <USB_SetTurnaroundTime+0x98>
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	4a29      	ldr	r2, [pc, #164]	; (800a694 <USB_SetTurnaroundTime+0x134>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d802      	bhi.n	800a5f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a5f2:	230a      	movs	r3, #10
 800a5f4:	617b      	str	r3, [r7, #20]
 800a5f6:	e02b      	b.n	800a650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	4a26      	ldr	r2, [pc, #152]	; (800a694 <USB_SetTurnaroundTime+0x134>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d906      	bls.n	800a60e <USB_SetTurnaroundTime+0xae>
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	4a25      	ldr	r2, [pc, #148]	; (800a698 <USB_SetTurnaroundTime+0x138>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d802      	bhi.n	800a60e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a608:	2309      	movs	r3, #9
 800a60a:	617b      	str	r3, [r7, #20]
 800a60c:	e020      	b.n	800a650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	4a21      	ldr	r2, [pc, #132]	; (800a698 <USB_SetTurnaroundTime+0x138>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d906      	bls.n	800a624 <USB_SetTurnaroundTime+0xc4>
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	4a20      	ldr	r2, [pc, #128]	; (800a69c <USB_SetTurnaroundTime+0x13c>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d802      	bhi.n	800a624 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a61e:	2308      	movs	r3, #8
 800a620:	617b      	str	r3, [r7, #20]
 800a622:	e015      	b.n	800a650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	4a1d      	ldr	r2, [pc, #116]	; (800a69c <USB_SetTurnaroundTime+0x13c>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d906      	bls.n	800a63a <USB_SetTurnaroundTime+0xda>
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	4a1c      	ldr	r2, [pc, #112]	; (800a6a0 <USB_SetTurnaroundTime+0x140>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d802      	bhi.n	800a63a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a634:	2307      	movs	r3, #7
 800a636:	617b      	str	r3, [r7, #20]
 800a638:	e00a      	b.n	800a650 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a63a:	2306      	movs	r3, #6
 800a63c:	617b      	str	r3, [r7, #20]
 800a63e:	e007      	b.n	800a650 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a640:	79fb      	ldrb	r3, [r7, #7]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d102      	bne.n	800a64c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a646:	2309      	movs	r3, #9
 800a648:	617b      	str	r3, [r7, #20]
 800a64a:	e001      	b.n	800a650 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a64c:	2309      	movs	r3, #9
 800a64e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	68da      	ldr	r2, [r3, #12]
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	029b      	lsls	r3, r3, #10
 800a664:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a668:	431a      	orrs	r2, r3
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	371c      	adds	r7, #28
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr
 800a67c:	00d8acbf 	.word	0x00d8acbf
 800a680:	00e4e1bf 	.word	0x00e4e1bf
 800a684:	00f423ff 	.word	0x00f423ff
 800a688:	0106737f 	.word	0x0106737f
 800a68c:	011a499f 	.word	0x011a499f
 800a690:	01312cff 	.word	0x01312cff
 800a694:	014ca43f 	.word	0x014ca43f
 800a698:	016e35ff 	.word	0x016e35ff
 800a69c:	01a6ab1f 	.word	0x01a6ab1f
 800a6a0:	01e847ff 	.word	0x01e847ff

0800a6a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	689b      	ldr	r3, [r3, #8]
 800a6b0:	f043 0201 	orr.w	r2, r3, #1
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	370c      	adds	r7, #12
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b083      	sub	sp, #12
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	f023 0201 	bic.w	r2, r3, #1
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a700:	78fb      	ldrb	r3, [r7, #3]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d106      	bne.n	800a714 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	60da      	str	r2, [r3, #12]
 800a712:	e00b      	b.n	800a72c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a714:	78fb      	ldrb	r3, [r7, #3]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d106      	bne.n	800a728 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	60da      	str	r2, [r3, #12]
 800a726:	e001      	b.n	800a72c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	e003      	b.n	800a734 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a72c:	2032      	movs	r0, #50	; 0x32
 800a72e:	f7fa f9ed 	bl	8004b0c <HAL_Delay>

  return HAL_OK;
 800a732:	2300      	movs	r3, #0
}
 800a734:	4618      	mov	r0, r3
 800a736:	3708      	adds	r7, #8
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a73c:	b084      	sub	sp, #16
 800a73e:	b580      	push	{r7, lr}
 800a740:	b086      	sub	sp, #24
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a74a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a74e:	2300      	movs	r3, #0
 800a750:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a756:	2300      	movs	r3, #0
 800a758:	613b      	str	r3, [r7, #16]
 800a75a:	e009      	b.n	800a770 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	3340      	adds	r3, #64	; 0x40
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4413      	add	r3, r2
 800a766:	2200      	movs	r2, #0
 800a768:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	3301      	adds	r3, #1
 800a76e:	613b      	str	r3, [r7, #16]
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	2b0e      	cmp	r3, #14
 800a774:	d9f2      	bls.n	800a75c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d11c      	bne.n	800a7b6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a78a:	f043 0302 	orr.w	r3, r3, #2
 800a78e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a794:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	639a      	str	r2, [r3, #56]	; 0x38
 800a7b4:	e00b      	b.n	800a7ce <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	680b      	ldr	r3, [r1, #0]
 800a7ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d10c      	bne.n	800a80e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d104      	bne.n	800a804 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 f949 	bl	800aa94 <USB_SetDevSpeed>
 800a802:	e008      	b.n	800a816 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a804:	2101      	movs	r1, #1
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 f944 	bl	800aa94 <USB_SetDevSpeed>
 800a80c:	e003      	b.n	800a816 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a80e:	2103      	movs	r1, #3
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 f93f 	bl	800aa94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a816:	2110      	movs	r1, #16
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 f8f3 	bl	800aa04 <USB_FlushTxFifo>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d001      	beq.n	800a828 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 f911 	bl	800aa50 <USB_FlushRxFifo>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d001      	beq.n	800a838 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a83e:	461a      	mov	r2, r3
 800a840:	2300      	movs	r3, #0
 800a842:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a84a:	461a      	mov	r2, r3
 800a84c:	2300      	movs	r3, #0
 800a84e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a856:	461a      	mov	r2, r3
 800a858:	2300      	movs	r3, #0
 800a85a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a85c:	2300      	movs	r3, #0
 800a85e:	613b      	str	r3, [r7, #16]
 800a860:	e043      	b.n	800a8ea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	015a      	lsls	r2, r3, #5
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	4413      	add	r3, r2
 800a86a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a874:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a878:	d118      	bne.n	800a8ac <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d10a      	bne.n	800a896 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	015a      	lsls	r2, r3, #5
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	4413      	add	r3, r2
 800a888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a88c:	461a      	mov	r2, r3
 800a88e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a892:	6013      	str	r3, [r2, #0]
 800a894:	e013      	b.n	800a8be <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	015a      	lsls	r2, r3, #5
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	4413      	add	r3, r2
 800a89e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a8a8:	6013      	str	r3, [r2, #0]
 800a8aa:	e008      	b.n	800a8be <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	015a      	lsls	r2, r3, #5
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	015a      	lsls	r2, r3, #5
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	4413      	add	r3, r2
 800a8c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	015a      	lsls	r2, r3, #5
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8dc:	461a      	mov	r2, r3
 800a8de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a8e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	613b      	str	r3, [r7, #16]
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ec:	693a      	ldr	r2, [r7, #16]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d3b7      	bcc.n	800a862 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	613b      	str	r3, [r7, #16]
 800a8f6:	e043      	b.n	800a980 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	015a      	lsls	r2, r3, #5
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	4413      	add	r3, r2
 800a900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a90a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a90e:	d118      	bne.n	800a942 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d10a      	bne.n	800a92c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	015a      	lsls	r2, r3, #5
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	4413      	add	r3, r2
 800a91e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a922:	461a      	mov	r2, r3
 800a924:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a928:	6013      	str	r3, [r2, #0]
 800a92a:	e013      	b.n	800a954 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	015a      	lsls	r2, r3, #5
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	4413      	add	r3, r2
 800a934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a938:	461a      	mov	r2, r3
 800a93a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a93e:	6013      	str	r3, [r2, #0]
 800a940:	e008      	b.n	800a954 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	015a      	lsls	r2, r3, #5
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	4413      	add	r3, r2
 800a94a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a94e:	461a      	mov	r2, r3
 800a950:	2300      	movs	r3, #0
 800a952:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	015a      	lsls	r2, r3, #5
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	4413      	add	r3, r2
 800a95c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a960:	461a      	mov	r2, r3
 800a962:	2300      	movs	r3, #0
 800a964:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	015a      	lsls	r2, r3, #5
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	4413      	add	r3, r2
 800a96e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a972:	461a      	mov	r2, r3
 800a974:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a978:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	3301      	adds	r3, #1
 800a97e:	613b      	str	r3, [r7, #16]
 800a980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a982:	693a      	ldr	r2, [r7, #16]
 800a984:	429a      	cmp	r2, r3
 800a986:	d3b7      	bcc.n	800a8f8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a996:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a99a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a9a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d105      	bne.n	800a9bc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	699b      	ldr	r3, [r3, #24]
 800a9b4:	f043 0210 	orr.w	r2, r3, #16
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	699a      	ldr	r2, [r3, #24]
 800a9c0:	4b0f      	ldr	r3, [pc, #60]	; (800aa00 <USB_DevInit+0x2c4>)
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a9c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d005      	beq.n	800a9da <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	699b      	ldr	r3, [r3, #24]
 800a9d2:	f043 0208 	orr.w	r2, r3, #8
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a9da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d107      	bne.n	800a9f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	699b      	ldr	r3, [r3, #24]
 800a9e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a9e8:	f043 0304 	orr.w	r3, r3, #4
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a9f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3718      	adds	r7, #24
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a9fc:	b004      	add	sp, #16
 800a9fe:	4770      	bx	lr
 800aa00:	803c3800 	.word	0x803c3800

0800aa04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	019b      	lsls	r3, r3, #6
 800aa16:	f043 0220 	orr.w	r2, r3, #32
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	3301      	adds	r3, #1
 800aa22:	60fb      	str	r3, [r7, #12]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	4a09      	ldr	r2, [pc, #36]	; (800aa4c <USB_FlushTxFifo+0x48>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d901      	bls.n	800aa30 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	e006      	b.n	800aa3e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	f003 0320 	and.w	r3, r3, #32
 800aa38:	2b20      	cmp	r3, #32
 800aa3a:	d0f0      	beq.n	800aa1e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3714      	adds	r7, #20
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	00030d40 	.word	0x00030d40

0800aa50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2210      	movs	r2, #16
 800aa60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	3301      	adds	r3, #1
 800aa66:	60fb      	str	r3, [r7, #12]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	4a09      	ldr	r2, [pc, #36]	; (800aa90 <USB_FlushRxFifo+0x40>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d901      	bls.n	800aa74 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800aa70:	2303      	movs	r3, #3
 800aa72:	e006      	b.n	800aa82 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	f003 0310 	and.w	r3, r3, #16
 800aa7c:	2b10      	cmp	r3, #16
 800aa7e:	d0f0      	beq.n	800aa62 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3714      	adds	r7, #20
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	00030d40 	.word	0x00030d40

0800aa94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	78fb      	ldrb	r3, [r7, #3]
 800aaae:	68f9      	ldr	r1, [r7, #12]
 800aab0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aab4:	4313      	orrs	r3, r2
 800aab6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3714      	adds	r7, #20
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr

0800aac6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800aac6:	b480      	push	{r7}
 800aac8:	b087      	sub	sp, #28
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aad8:	689b      	ldr	r3, [r3, #8]
 800aada:	f003 0306 	and.w	r3, r3, #6
 800aade:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d102      	bne.n	800aaec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800aae6:	2300      	movs	r3, #0
 800aae8:	75fb      	strb	r3, [r7, #23]
 800aaea:	e00a      	b.n	800ab02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d002      	beq.n	800aaf8 <USB_GetDevSpeed+0x32>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2b06      	cmp	r3, #6
 800aaf6:	d102      	bne.n	800aafe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800aaf8:	2302      	movs	r3, #2
 800aafa:	75fb      	strb	r3, [r7, #23]
 800aafc:	e001      	b.n	800ab02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800aafe:	230f      	movs	r3, #15
 800ab00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ab02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	371c      	adds	r7, #28
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	785b      	ldrb	r3, [r3, #1]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d13a      	bne.n	800aba2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab32:	69da      	ldr	r2, [r3, #28]
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	f003 030f 	and.w	r3, r3, #15
 800ab3c:	2101      	movs	r1, #1
 800ab3e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	68f9      	ldr	r1, [r7, #12]
 800ab46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	015a      	lsls	r2, r3, #5
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	4413      	add	r3, r2
 800ab56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d155      	bne.n	800ac10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	015a      	lsls	r2, r3, #5
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	78db      	ldrb	r3, [r3, #3]
 800ab7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ab80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	059b      	lsls	r3, r3, #22
 800ab86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	0151      	lsls	r1, r2, #5
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	440a      	add	r2, r1
 800ab92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab9e:	6013      	str	r3, [r2, #0]
 800aba0:	e036      	b.n	800ac10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aba8:	69da      	ldr	r2, [r3, #28]
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	f003 030f 	and.w	r3, r3, #15
 800abb2:	2101      	movs	r1, #1
 800abb4:	fa01 f303 	lsl.w	r3, r1, r3
 800abb8:	041b      	lsls	r3, r3, #16
 800abba:	68f9      	ldr	r1, [r7, #12]
 800abbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abc0:	4313      	orrs	r3, r2
 800abc2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	015a      	lsls	r2, r3, #5
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	4413      	add	r3, r2
 800abcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d11a      	bne.n	800ac10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	015a      	lsls	r2, r3, #5
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	4413      	add	r3, r2
 800abe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	78db      	ldrb	r3, [r3, #3]
 800abf4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800abf6:	430b      	orrs	r3, r1
 800abf8:	4313      	orrs	r3, r2
 800abfa:	68ba      	ldr	r2, [r7, #8]
 800abfc:	0151      	lsls	r1, r2, #5
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	440a      	add	r2, r1
 800ac02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3714      	adds	r7, #20
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
	...

0800ac20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	785b      	ldrb	r3, [r3, #1]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d161      	bne.n	800ad00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	015a      	lsls	r2, r3, #5
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	4413      	add	r3, r2
 800ac44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac52:	d11f      	bne.n	800ac94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	015a      	lsls	r2, r3, #5
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	68ba      	ldr	r2, [r7, #8]
 800ac64:	0151      	lsls	r1, r2, #5
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	440a      	add	r2, r1
 800ac6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ac72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	015a      	lsls	r2, r3, #5
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	68ba      	ldr	r2, [r7, #8]
 800ac84:	0151      	lsls	r1, r2, #5
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	440a      	add	r2, r1
 800ac8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	f003 030f 	and.w	r3, r3, #15
 800aca4:	2101      	movs	r1, #1
 800aca6:	fa01 f303 	lsl.w	r3, r1, r3
 800acaa:	b29b      	uxth	r3, r3
 800acac:	43db      	mvns	r3, r3
 800acae:	68f9      	ldr	r1, [r7, #12]
 800acb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acb4:	4013      	ands	r3, r2
 800acb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acbe:	69da      	ldr	r2, [r3, #28]
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	f003 030f 	and.w	r3, r3, #15
 800acc8:	2101      	movs	r1, #1
 800acca:	fa01 f303 	lsl.w	r3, r1, r3
 800acce:	b29b      	uxth	r3, r3
 800acd0:	43db      	mvns	r3, r3
 800acd2:	68f9      	ldr	r1, [r7, #12]
 800acd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acd8:	4013      	ands	r3, r2
 800acda:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	015a      	lsls	r2, r3, #5
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	4413      	add	r3, r2
 800ace4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	0159      	lsls	r1, r3, #5
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	440b      	add	r3, r1
 800acf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acf6:	4619      	mov	r1, r3
 800acf8:	4b35      	ldr	r3, [pc, #212]	; (800add0 <USB_DeactivateEndpoint+0x1b0>)
 800acfa:	4013      	ands	r3, r2
 800acfc:	600b      	str	r3, [r1, #0]
 800acfe:	e060      	b.n	800adc2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	015a      	lsls	r2, r3, #5
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	4413      	add	r3, r2
 800ad08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad16:	d11f      	bne.n	800ad58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	015a      	lsls	r2, r3, #5
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	4413      	add	r3, r2
 800ad20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	0151      	lsls	r1, r2, #5
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	440a      	add	r2, r1
 800ad2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ad36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	015a      	lsls	r2, r3, #5
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	4413      	add	r3, r2
 800ad40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	0151      	lsls	r1, r2, #5
 800ad4a:	68fa      	ldr	r2, [r7, #12]
 800ad4c:	440a      	add	r2, r1
 800ad4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	f003 030f 	and.w	r3, r3, #15
 800ad68:	2101      	movs	r1, #1
 800ad6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad6e:	041b      	lsls	r3, r3, #16
 800ad70:	43db      	mvns	r3, r3
 800ad72:	68f9      	ldr	r1, [r7, #12]
 800ad74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad78:	4013      	ands	r3, r2
 800ad7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad82:	69da      	ldr	r2, [r3, #28]
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	f003 030f 	and.w	r3, r3, #15
 800ad8c:	2101      	movs	r1, #1
 800ad8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad92:	041b      	lsls	r3, r3, #16
 800ad94:	43db      	mvns	r3, r3
 800ad96:	68f9      	ldr	r1, [r7, #12]
 800ad98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	015a      	lsls	r2, r3, #5
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	4413      	add	r3, r2
 800ada8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	0159      	lsls	r1, r3, #5
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	440b      	add	r3, r1
 800adb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adba:	4619      	mov	r1, r3
 800adbc:	4b05      	ldr	r3, [pc, #20]	; (800add4 <USB_DeactivateEndpoint+0x1b4>)
 800adbe:	4013      	ands	r3, r2
 800adc0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3714      	adds	r7, #20
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr
 800add0:	ec337800 	.word	0xec337800
 800add4:	eff37800 	.word	0xeff37800

0800add8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b08a      	sub	sp, #40	; 0x28
 800addc:	af02      	add	r7, sp, #8
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	4613      	mov	r3, r2
 800ade4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	785b      	ldrb	r3, [r3, #1]
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	f040 815c 	bne.w	800b0b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	695b      	ldr	r3, [r3, #20]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d132      	bne.n	800ae68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	015a      	lsls	r2, r3, #5
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	4413      	add	r3, r2
 800ae0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	69ba      	ldr	r2, [r7, #24]
 800ae12:	0151      	lsls	r1, r2, #5
 800ae14:	69fa      	ldr	r2, [r7, #28]
 800ae16:	440a      	add	r2, r1
 800ae18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	015a      	lsls	r2, r3, #5
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae32:	691b      	ldr	r3, [r3, #16]
 800ae34:	69ba      	ldr	r2, [r7, #24]
 800ae36:	0151      	lsls	r1, r2, #5
 800ae38:	69fa      	ldr	r2, [r7, #28]
 800ae3a:	440a      	add	r2, r1
 800ae3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	015a      	lsls	r2, r3, #5
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae52:	691b      	ldr	r3, [r3, #16]
 800ae54:	69ba      	ldr	r2, [r7, #24]
 800ae56:	0151      	lsls	r1, r2, #5
 800ae58:	69fa      	ldr	r2, [r7, #28]
 800ae5a:	440a      	add	r2, r1
 800ae5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae60:	0cdb      	lsrs	r3, r3, #19
 800ae62:	04db      	lsls	r3, r3, #19
 800ae64:	6113      	str	r3, [r2, #16]
 800ae66:	e074      	b.n	800af52 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	015a      	lsls	r2, r3, #5
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	4413      	add	r3, r2
 800ae70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	69ba      	ldr	r2, [r7, #24]
 800ae78:	0151      	lsls	r1, r2, #5
 800ae7a:	69fa      	ldr	r2, [r7, #28]
 800ae7c:	440a      	add	r2, r1
 800ae7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae82:	0cdb      	lsrs	r3, r3, #19
 800ae84:	04db      	lsls	r3, r3, #19
 800ae86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	015a      	lsls	r2, r3, #5
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	4413      	add	r3, r2
 800ae90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae94:	691b      	ldr	r3, [r3, #16]
 800ae96:	69ba      	ldr	r2, [r7, #24]
 800ae98:	0151      	lsls	r1, r2, #5
 800ae9a:	69fa      	ldr	r2, [r7, #28]
 800ae9c:	440a      	add	r2, r1
 800ae9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aea2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aea6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aeaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	015a      	lsls	r2, r3, #5
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeb8:	691a      	ldr	r2, [r3, #16]
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	6959      	ldr	r1, [r3, #20]
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	440b      	add	r3, r1
 800aec4:	1e59      	subs	r1, r3, #1
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	fbb1 f3f3 	udiv	r3, r1, r3
 800aece:	04d9      	lsls	r1, r3, #19
 800aed0:	4b9d      	ldr	r3, [pc, #628]	; (800b148 <USB_EPStartXfer+0x370>)
 800aed2:	400b      	ands	r3, r1
 800aed4:	69b9      	ldr	r1, [r7, #24]
 800aed6:	0148      	lsls	r0, r1, #5
 800aed8:	69f9      	ldr	r1, [r7, #28]
 800aeda:	4401      	add	r1, r0
 800aedc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aee0:	4313      	orrs	r3, r2
 800aee2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	015a      	lsls	r2, r3, #5
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	4413      	add	r3, r2
 800aeec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aef0:	691a      	ldr	r2, [r3, #16]
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	695b      	ldr	r3, [r3, #20]
 800aef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aefa:	69b9      	ldr	r1, [r7, #24]
 800aefc:	0148      	lsls	r0, r1, #5
 800aefe:	69f9      	ldr	r1, [r7, #28]
 800af00:	4401      	add	r1, r0
 800af02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800af06:	4313      	orrs	r3, r2
 800af08:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	78db      	ldrb	r3, [r3, #3]
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d11f      	bne.n	800af52 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	015a      	lsls	r2, r3, #5
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	4413      	add	r3, r2
 800af1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	69ba      	ldr	r2, [r7, #24]
 800af22:	0151      	lsls	r1, r2, #5
 800af24:	69fa      	ldr	r2, [r7, #28]
 800af26:	440a      	add	r2, r1
 800af28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af2c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800af30:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	015a      	lsls	r2, r3, #5
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	4413      	add	r3, r2
 800af3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	69ba      	ldr	r2, [r7, #24]
 800af42:	0151      	lsls	r1, r2, #5
 800af44:	69fa      	ldr	r2, [r7, #28]
 800af46:	440a      	add	r2, r1
 800af48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af50:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800af52:	79fb      	ldrb	r3, [r7, #7]
 800af54:	2b01      	cmp	r3, #1
 800af56:	d14b      	bne.n	800aff0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d009      	beq.n	800af74 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	015a      	lsls	r2, r3, #5
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	4413      	add	r3, r2
 800af68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af6c:	461a      	mov	r2, r3
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	691b      	ldr	r3, [r3, #16]
 800af72:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	78db      	ldrb	r3, [r3, #3]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d128      	bne.n	800afce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d110      	bne.n	800afae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800af8c:	69bb      	ldr	r3, [r7, #24]
 800af8e:	015a      	lsls	r2, r3, #5
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	4413      	add	r3, r2
 800af94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	69ba      	ldr	r2, [r7, #24]
 800af9c:	0151      	lsls	r1, r2, #5
 800af9e:	69fa      	ldr	r2, [r7, #28]
 800afa0:	440a      	add	r2, r1
 800afa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800afaa:	6013      	str	r3, [r2, #0]
 800afac:	e00f      	b.n	800afce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	015a      	lsls	r2, r3, #5
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	4413      	add	r3, r2
 800afb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	69ba      	ldr	r2, [r7, #24]
 800afbe:	0151      	lsls	r1, r2, #5
 800afc0:	69fa      	ldr	r2, [r7, #28]
 800afc2:	440a      	add	r2, r1
 800afc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afcc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800afce:	69bb      	ldr	r3, [r7, #24]
 800afd0:	015a      	lsls	r2, r3, #5
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	4413      	add	r3, r2
 800afd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	69ba      	ldr	r2, [r7, #24]
 800afde:	0151      	lsls	r1, r2, #5
 800afe0:	69fa      	ldr	r2, [r7, #28]
 800afe2:	440a      	add	r2, r1
 800afe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afe8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800afec:	6013      	str	r3, [r2, #0]
 800afee:	e12f      	b.n	800b250 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	015a      	lsls	r2, r3, #5
 800aff4:	69fb      	ldr	r3, [r7, #28]
 800aff6:	4413      	add	r3, r2
 800aff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	69ba      	ldr	r2, [r7, #24]
 800b000:	0151      	lsls	r1, r2, #5
 800b002:	69fa      	ldr	r2, [r7, #28]
 800b004:	440a      	add	r2, r1
 800b006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b00a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b00e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	78db      	ldrb	r3, [r3, #3]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d015      	beq.n	800b044 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	695b      	ldr	r3, [r3, #20]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f000 8117 	beq.w	800b250 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	f003 030f 	and.w	r3, r3, #15
 800b032:	2101      	movs	r1, #1
 800b034:	fa01 f303 	lsl.w	r3, r1, r3
 800b038:	69f9      	ldr	r1, [r7, #28]
 800b03a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b03e:	4313      	orrs	r3, r2
 800b040:	634b      	str	r3, [r1, #52]	; 0x34
 800b042:	e105      	b.n	800b250 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b050:	2b00      	cmp	r3, #0
 800b052:	d110      	bne.n	800b076 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	015a      	lsls	r2, r3, #5
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	4413      	add	r3, r2
 800b05c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	69ba      	ldr	r2, [r7, #24]
 800b064:	0151      	lsls	r1, r2, #5
 800b066:	69fa      	ldr	r2, [r7, #28]
 800b068:	440a      	add	r2, r1
 800b06a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b06e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b072:	6013      	str	r3, [r2, #0]
 800b074:	e00f      	b.n	800b096 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	015a      	lsls	r2, r3, #5
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	4413      	add	r3, r2
 800b07e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	69ba      	ldr	r2, [r7, #24]
 800b086:	0151      	lsls	r1, r2, #5
 800b088:	69fa      	ldr	r2, [r7, #28]
 800b08a:	440a      	add	r2, r1
 800b08c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b094:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	68d9      	ldr	r1, [r3, #12]
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	781a      	ldrb	r2, [r3, #0]
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	695b      	ldr	r3, [r3, #20]
 800b0a2:	b298      	uxth	r0, r3
 800b0a4:	79fb      	ldrb	r3, [r7, #7]
 800b0a6:	9300      	str	r3, [sp, #0]
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f000 fa2b 	bl	800b506 <USB_WritePacket>
 800b0b0:	e0ce      	b.n	800b250 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	015a      	lsls	r2, r3, #5
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0be:	691b      	ldr	r3, [r3, #16]
 800b0c0:	69ba      	ldr	r2, [r7, #24]
 800b0c2:	0151      	lsls	r1, r2, #5
 800b0c4:	69fa      	ldr	r2, [r7, #28]
 800b0c6:	440a      	add	r2, r1
 800b0c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0cc:	0cdb      	lsrs	r3, r3, #19
 800b0ce:	04db      	lsls	r3, r3, #19
 800b0d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	015a      	lsls	r2, r3, #5
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	4413      	add	r3, r2
 800b0da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	69ba      	ldr	r2, [r7, #24]
 800b0e2:	0151      	lsls	r1, r2, #5
 800b0e4:	69fa      	ldr	r2, [r7, #28]
 800b0e6:	440a      	add	r2, r1
 800b0e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b0f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b0f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	695b      	ldr	r3, [r3, #20]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d126      	bne.n	800b14c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b0fe:	69bb      	ldr	r3, [r7, #24]
 800b100:	015a      	lsls	r2, r3, #5
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	4413      	add	r3, r2
 800b106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b10a:	691a      	ldr	r2, [r3, #16]
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b114:	69b9      	ldr	r1, [r7, #24]
 800b116:	0148      	lsls	r0, r1, #5
 800b118:	69f9      	ldr	r1, [r7, #28]
 800b11a:	4401      	add	r1, r0
 800b11c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b120:	4313      	orrs	r3, r2
 800b122:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	015a      	lsls	r2, r3, #5
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	4413      	add	r3, r2
 800b12c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	69ba      	ldr	r2, [r7, #24]
 800b134:	0151      	lsls	r1, r2, #5
 800b136:	69fa      	ldr	r2, [r7, #28]
 800b138:	440a      	add	r2, r1
 800b13a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b13e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b142:	6113      	str	r3, [r2, #16]
 800b144:	e036      	b.n	800b1b4 <USB_EPStartXfer+0x3dc>
 800b146:	bf00      	nop
 800b148:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	695a      	ldr	r2, [r3, #20]
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	4413      	add	r3, r2
 800b156:	1e5a      	subs	r2, r3, #1
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b160:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	015a      	lsls	r2, r3, #5
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	4413      	add	r3, r2
 800b16a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b16e:	691a      	ldr	r2, [r3, #16]
 800b170:	8afb      	ldrh	r3, [r7, #22]
 800b172:	04d9      	lsls	r1, r3, #19
 800b174:	4b39      	ldr	r3, [pc, #228]	; (800b25c <USB_EPStartXfer+0x484>)
 800b176:	400b      	ands	r3, r1
 800b178:	69b9      	ldr	r1, [r7, #24]
 800b17a:	0148      	lsls	r0, r1, #5
 800b17c:	69f9      	ldr	r1, [r7, #28]
 800b17e:	4401      	add	r1, r0
 800b180:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b184:	4313      	orrs	r3, r2
 800b186:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	015a      	lsls	r2, r3, #5
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	4413      	add	r3, r2
 800b190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b194:	691a      	ldr	r2, [r3, #16]
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	8af9      	ldrh	r1, [r7, #22]
 800b19c:	fb01 f303 	mul.w	r3, r1, r3
 800b1a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1a4:	69b9      	ldr	r1, [r7, #24]
 800b1a6:	0148      	lsls	r0, r1, #5
 800b1a8:	69f9      	ldr	r1, [r7, #28]
 800b1aa:	4401      	add	r1, r0
 800b1ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b1b4:	79fb      	ldrb	r3, [r7, #7]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d10d      	bne.n	800b1d6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d009      	beq.n	800b1d6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	68d9      	ldr	r1, [r3, #12]
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	015a      	lsls	r2, r3, #5
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d2:	460a      	mov	r2, r1
 800b1d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	78db      	ldrb	r3, [r3, #3]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d128      	bne.n	800b230 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b1de:	69fb      	ldr	r3, [r7, #28]
 800b1e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d110      	bne.n	800b210 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b1ee:	69bb      	ldr	r3, [r7, #24]
 800b1f0:	015a      	lsls	r2, r3, #5
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	69ba      	ldr	r2, [r7, #24]
 800b1fe:	0151      	lsls	r1, r2, #5
 800b200:	69fa      	ldr	r2, [r7, #28]
 800b202:	440a      	add	r2, r1
 800b204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b208:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b20c:	6013      	str	r3, [r2, #0]
 800b20e:	e00f      	b.n	800b230 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	015a      	lsls	r2, r3, #5
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	4413      	add	r3, r2
 800b218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	69ba      	ldr	r2, [r7, #24]
 800b220:	0151      	lsls	r1, r2, #5
 800b222:	69fa      	ldr	r2, [r7, #28]
 800b224:	440a      	add	r2, r1
 800b226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b22a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b22e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b230:	69bb      	ldr	r3, [r7, #24]
 800b232:	015a      	lsls	r2, r3, #5
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	4413      	add	r3, r2
 800b238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	69ba      	ldr	r2, [r7, #24]
 800b240:	0151      	lsls	r1, r2, #5
 800b242:	69fa      	ldr	r2, [r7, #28]
 800b244:	440a      	add	r2, r1
 800b246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b24a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b24e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	3720      	adds	r7, #32
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	1ff80000 	.word	0x1ff80000

0800b260 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b260:	b480      	push	{r7}
 800b262:	b087      	sub	sp, #28
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	4613      	mov	r3, r2
 800b26c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	785b      	ldrb	r3, [r3, #1]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	f040 80cd 	bne.w	800b41c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	695b      	ldr	r3, [r3, #20]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d132      	bne.n	800b2f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	015a      	lsls	r2, r3, #5
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	4413      	add	r3, r2
 800b292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b296:	691b      	ldr	r3, [r3, #16]
 800b298:	693a      	ldr	r2, [r7, #16]
 800b29a:	0151      	lsls	r1, r2, #5
 800b29c:	697a      	ldr	r2, [r7, #20]
 800b29e:	440a      	add	r2, r1
 800b2a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b2a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b2ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	015a      	lsls	r2, r3, #5
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2ba:	691b      	ldr	r3, [r3, #16]
 800b2bc:	693a      	ldr	r2, [r7, #16]
 800b2be:	0151      	lsls	r1, r2, #5
 800b2c0:	697a      	ldr	r2, [r7, #20]
 800b2c2:	440a      	add	r2, r1
 800b2c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	015a      	lsls	r2, r3, #5
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	693a      	ldr	r2, [r7, #16]
 800b2de:	0151      	lsls	r1, r2, #5
 800b2e0:	697a      	ldr	r2, [r7, #20]
 800b2e2:	440a      	add	r2, r1
 800b2e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2e8:	0cdb      	lsrs	r3, r3, #19
 800b2ea:	04db      	lsls	r3, r3, #19
 800b2ec:	6113      	str	r3, [r2, #16]
 800b2ee:	e04e      	b.n	800b38e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	015a      	lsls	r2, r3, #5
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	4413      	add	r3, r2
 800b2f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	693a      	ldr	r2, [r7, #16]
 800b300:	0151      	lsls	r1, r2, #5
 800b302:	697a      	ldr	r2, [r7, #20]
 800b304:	440a      	add	r2, r1
 800b306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b30a:	0cdb      	lsrs	r3, r3, #19
 800b30c:	04db      	lsls	r3, r3, #19
 800b30e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	015a      	lsls	r2, r3, #5
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	4413      	add	r3, r2
 800b318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	693a      	ldr	r2, [r7, #16]
 800b320:	0151      	lsls	r1, r2, #5
 800b322:	697a      	ldr	r2, [r7, #20]
 800b324:	440a      	add	r2, r1
 800b326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b32a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b32e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b332:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	695a      	ldr	r2, [r3, #20]
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d903      	bls.n	800b348 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	689a      	ldr	r2, [r3, #8]
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	015a      	lsls	r2, r3, #5
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	4413      	add	r3, r2
 800b350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	693a      	ldr	r2, [r7, #16]
 800b358:	0151      	lsls	r1, r2, #5
 800b35a:	697a      	ldr	r2, [r7, #20]
 800b35c:	440a      	add	r2, r1
 800b35e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b362:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b366:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	015a      	lsls	r2, r3, #5
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	4413      	add	r3, r2
 800b370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b374:	691a      	ldr	r2, [r3, #16]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b37e:	6939      	ldr	r1, [r7, #16]
 800b380:	0148      	lsls	r0, r1, #5
 800b382:	6979      	ldr	r1, [r7, #20]
 800b384:	4401      	add	r1, r0
 800b386:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b38a:	4313      	orrs	r3, r2
 800b38c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b38e:	79fb      	ldrb	r3, [r7, #7]
 800b390:	2b01      	cmp	r3, #1
 800b392:	d11e      	bne.n	800b3d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	691b      	ldr	r3, [r3, #16]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d009      	beq.n	800b3b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	015a      	lsls	r2, r3, #5
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	015a      	lsls	r2, r3, #5
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	693a      	ldr	r2, [r7, #16]
 800b3c0:	0151      	lsls	r1, r2, #5
 800b3c2:	697a      	ldr	r2, [r7, #20]
 800b3c4:	440a      	add	r2, r1
 800b3c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3ce:	6013      	str	r3, [r2, #0]
 800b3d0:	e092      	b.n	800b4f8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	015a      	lsls	r2, r3, #5
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	4413      	add	r3, r2
 800b3da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	693a      	ldr	r2, [r7, #16]
 800b3e2:	0151      	lsls	r1, r2, #5
 800b3e4:	697a      	ldr	r2, [r7, #20]
 800b3e6:	440a      	add	r2, r1
 800b3e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	695b      	ldr	r3, [r3, #20]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d07e      	beq.n	800b4f8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	f003 030f 	and.w	r3, r3, #15
 800b40a:	2101      	movs	r1, #1
 800b40c:	fa01 f303 	lsl.w	r3, r1, r3
 800b410:	6979      	ldr	r1, [r7, #20]
 800b412:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b416:	4313      	orrs	r3, r2
 800b418:	634b      	str	r3, [r1, #52]	; 0x34
 800b41a:	e06d      	b.n	800b4f8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	015a      	lsls	r2, r3, #5
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	4413      	add	r3, r2
 800b424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b428:	691b      	ldr	r3, [r3, #16]
 800b42a:	693a      	ldr	r2, [r7, #16]
 800b42c:	0151      	lsls	r1, r2, #5
 800b42e:	697a      	ldr	r2, [r7, #20]
 800b430:	440a      	add	r2, r1
 800b432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b436:	0cdb      	lsrs	r3, r3, #19
 800b438:	04db      	lsls	r3, r3, #19
 800b43a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	015a      	lsls	r2, r3, #5
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	4413      	add	r3, r2
 800b444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b448:	691b      	ldr	r3, [r3, #16]
 800b44a:	693a      	ldr	r2, [r7, #16]
 800b44c:	0151      	lsls	r1, r2, #5
 800b44e:	697a      	ldr	r2, [r7, #20]
 800b450:	440a      	add	r2, r1
 800b452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b456:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b45a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b45e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	695b      	ldr	r3, [r3, #20]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d003      	beq.n	800b470 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	689a      	ldr	r2, [r3, #8]
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	015a      	lsls	r2, r3, #5
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	4413      	add	r3, r2
 800b478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	693a      	ldr	r2, [r7, #16]
 800b480:	0151      	lsls	r1, r2, #5
 800b482:	697a      	ldr	r2, [r7, #20]
 800b484:	440a      	add	r2, r1
 800b486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b48a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b48e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	015a      	lsls	r2, r3, #5
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	4413      	add	r3, r2
 800b498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b49c:	691a      	ldr	r2, [r3, #16]
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4a6:	6939      	ldr	r1, [r7, #16]
 800b4a8:	0148      	lsls	r0, r1, #5
 800b4aa:	6979      	ldr	r1, [r7, #20]
 800b4ac:	4401      	add	r1, r0
 800b4ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b4b6:	79fb      	ldrb	r3, [r7, #7]
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d10d      	bne.n	800b4d8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d009      	beq.n	800b4d8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	68d9      	ldr	r1, [r3, #12]
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	015a      	lsls	r2, r3, #5
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4d4:	460a      	mov	r2, r1
 800b4d6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	015a      	lsls	r2, r3, #5
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	4413      	add	r3, r2
 800b4e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	693a      	ldr	r2, [r7, #16]
 800b4e8:	0151      	lsls	r1, r2, #5
 800b4ea:	697a      	ldr	r2, [r7, #20]
 800b4ec:	440a      	add	r2, r1
 800b4ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b4f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	371c      	adds	r7, #28
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr

0800b506 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b506:	b480      	push	{r7}
 800b508:	b089      	sub	sp, #36	; 0x24
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	60f8      	str	r0, [r7, #12]
 800b50e:	60b9      	str	r1, [r7, #8]
 800b510:	4611      	mov	r1, r2
 800b512:	461a      	mov	r2, r3
 800b514:	460b      	mov	r3, r1
 800b516:	71fb      	strb	r3, [r7, #7]
 800b518:	4613      	mov	r3, r2
 800b51a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b524:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d11a      	bne.n	800b562 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b52c:	88bb      	ldrh	r3, [r7, #4]
 800b52e:	3303      	adds	r3, #3
 800b530:	089b      	lsrs	r3, r3, #2
 800b532:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b534:	2300      	movs	r3, #0
 800b536:	61bb      	str	r3, [r7, #24]
 800b538:	e00f      	b.n	800b55a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b53a:	79fb      	ldrb	r3, [r7, #7]
 800b53c:	031a      	lsls	r2, r3, #12
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	4413      	add	r3, r2
 800b542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b546:	461a      	mov	r2, r3
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	3304      	adds	r3, #4
 800b552:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	3301      	adds	r3, #1
 800b558:	61bb      	str	r3, [r7, #24]
 800b55a:	69ba      	ldr	r2, [r7, #24]
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d3eb      	bcc.n	800b53a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	3724      	adds	r7, #36	; 0x24
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b570:	b480      	push	{r7}
 800b572:	b089      	sub	sp, #36	; 0x24
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	4613      	mov	r3, r2
 800b57c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b586:	88fb      	ldrh	r3, [r7, #6]
 800b588:	3303      	adds	r3, #3
 800b58a:	089b      	lsrs	r3, r3, #2
 800b58c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b58e:	2300      	movs	r3, #0
 800b590:	61bb      	str	r3, [r7, #24]
 800b592:	e00b      	b.n	800b5ac <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	601a      	str	r2, [r3, #0]
    pDest++;
 800b5a0:	69fb      	ldr	r3, [r7, #28]
 800b5a2:	3304      	adds	r3, #4
 800b5a4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b5a6:	69bb      	ldr	r3, [r7, #24]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	61bb      	str	r3, [r7, #24]
 800b5ac:	69ba      	ldr	r2, [r7, #24]
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d3ef      	bcc.n	800b594 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b5b4:	69fb      	ldr	r3, [r7, #28]
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3724      	adds	r7, #36	; 0x24
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr

0800b5c2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	b085      	sub	sp, #20
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
 800b5ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	785b      	ldrb	r3, [r3, #1]
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d12c      	bne.n	800b638 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	015a      	lsls	r2, r3, #5
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	db12      	blt.n	800b616 <USB_EPSetStall+0x54>
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00f      	beq.n	800b616 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	015a      	lsls	r2, r3, #5
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	68ba      	ldr	r2, [r7, #8]
 800b606:	0151      	lsls	r1, r2, #5
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	440a      	add	r2, r1
 800b60c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b610:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b614:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	015a      	lsls	r2, r3, #5
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	4413      	add	r3, r2
 800b61e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	68ba      	ldr	r2, [r7, #8]
 800b626:	0151      	lsls	r1, r2, #5
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	440a      	add	r2, r1
 800b62c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b630:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b634:	6013      	str	r3, [r2, #0]
 800b636:	e02b      	b.n	800b690 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	015a      	lsls	r2, r3, #5
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	4413      	add	r3, r2
 800b640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	db12      	blt.n	800b670 <USB_EPSetStall+0xae>
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00f      	beq.n	800b670 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	015a      	lsls	r2, r3, #5
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	4413      	add	r3, r2
 800b658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68ba      	ldr	r2, [r7, #8]
 800b660:	0151      	lsls	r1, r2, #5
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	440a      	add	r2, r1
 800b666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b66a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b66e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	015a      	lsls	r2, r3, #5
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	4413      	add	r3, r2
 800b678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	68ba      	ldr	r2, [r7, #8]
 800b680:	0151      	lsls	r1, r2, #5
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	440a      	add	r2, r1
 800b686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b68a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b68e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3714      	adds	r7, #20
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr

0800b69e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b69e:	b480      	push	{r7}
 800b6a0:	b085      	sub	sp, #20
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
 800b6a6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	785b      	ldrb	r3, [r3, #1]
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d128      	bne.n	800b70c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	015a      	lsls	r2, r3, #5
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	68ba      	ldr	r2, [r7, #8]
 800b6ca:	0151      	lsls	r1, r2, #5
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	440a      	add	r2, r1
 800b6d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b6d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	78db      	ldrb	r3, [r3, #3]
 800b6de:	2b03      	cmp	r3, #3
 800b6e0:	d003      	beq.n	800b6ea <USB_EPClearStall+0x4c>
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	78db      	ldrb	r3, [r3, #3]
 800b6e6:	2b02      	cmp	r3, #2
 800b6e8:	d138      	bne.n	800b75c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	015a      	lsls	r2, r3, #5
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	0151      	lsls	r1, r2, #5
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	440a      	add	r2, r1
 800b700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b708:	6013      	str	r3, [r2, #0]
 800b70a:	e027      	b.n	800b75c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	015a      	lsls	r2, r3, #5
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	4413      	add	r3, r2
 800b714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	68ba      	ldr	r2, [r7, #8]
 800b71c:	0151      	lsls	r1, r2, #5
 800b71e:	68fa      	ldr	r2, [r7, #12]
 800b720:	440a      	add	r2, r1
 800b722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b726:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b72a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	78db      	ldrb	r3, [r3, #3]
 800b730:	2b03      	cmp	r3, #3
 800b732:	d003      	beq.n	800b73c <USB_EPClearStall+0x9e>
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	78db      	ldrb	r3, [r3, #3]
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d10f      	bne.n	800b75c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	015a      	lsls	r2, r3, #5
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	4413      	add	r3, r2
 800b744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	68ba      	ldr	r2, [r7, #8]
 800b74c:	0151      	lsls	r1, r2, #5
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	440a      	add	r2, r1
 800b752:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b75a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3714      	adds	r7, #20
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr

0800b76a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b76a:	b480      	push	{r7}
 800b76c:	b085      	sub	sp, #20
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
 800b772:	460b      	mov	r3, r1
 800b774:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b788:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b78c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	78fb      	ldrb	r3, [r7, #3]
 800b798:	011b      	lsls	r3, r3, #4
 800b79a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b79e:	68f9      	ldr	r1, [r7, #12]
 800b7a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3714      	adds	r7, #20
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr

0800b7b6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b7b6:	b480      	push	{r7}
 800b7b8:	b085      	sub	sp, #20
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b7d0:	f023 0303 	bic.w	r3, r3, #3
 800b7d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7e4:	f023 0302 	bic.w	r3, r3, #2
 800b7e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b7ea:	2300      	movs	r3, #0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3714      	adds	r7, #20
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	68fa      	ldr	r2, [r7, #12]
 800b80e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b812:	f023 0303 	bic.w	r3, r3, #3
 800b816:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b826:	f043 0302 	orr.w	r3, r3, #2
 800b82a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3714      	adds	r7, #20
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr

0800b83a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b83a:	b480      	push	{r7}
 800b83c:	b085      	sub	sp, #20
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	695b      	ldr	r3, [r3, #20]
 800b846:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	699b      	ldr	r3, [r3, #24]
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	4013      	ands	r3, r2
 800b850:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b852:	68fb      	ldr	r3, [r7, #12]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3714      	adds	r7, #20
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b860:	b480      	push	{r7}
 800b862:	b085      	sub	sp, #20
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b87c:	69db      	ldr	r3, [r3, #28]
 800b87e:	68ba      	ldr	r2, [r7, #8]
 800b880:	4013      	ands	r3, r2
 800b882:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	0c1b      	lsrs	r3, r3, #16
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3714      	adds	r7, #20
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8a6:	699b      	ldr	r3, [r3, #24]
 800b8a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8b0:	69db      	ldr	r3, [r3, #28]
 800b8b2:	68ba      	ldr	r2, [r7, #8]
 800b8b4:	4013      	ands	r3, r2
 800b8b6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	b29b      	uxth	r3, r3
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3714      	adds	r7, #20
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b8d8:	78fb      	ldrb	r3, [r7, #3]
 800b8da:	015a      	lsls	r2, r3, #5
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	4413      	add	r3, r2
 800b8e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ee:	695b      	ldr	r3, [r3, #20]
 800b8f0:	68ba      	ldr	r2, [r7, #8]
 800b8f2:	4013      	ands	r3, r2
 800b8f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b8f6:	68bb      	ldr	r3, [r7, #8]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3714      	adds	r7, #20
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b904:	b480      	push	{r7}
 800b906:	b087      	sub	sp, #28
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	460b      	mov	r3, r1
 800b90e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b91a:	691b      	ldr	r3, [r3, #16]
 800b91c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b926:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b928:	78fb      	ldrb	r3, [r7, #3]
 800b92a:	f003 030f 	and.w	r3, r3, #15
 800b92e:	68fa      	ldr	r2, [r7, #12]
 800b930:	fa22 f303 	lsr.w	r3, r2, r3
 800b934:	01db      	lsls	r3, r3, #7
 800b936:	b2db      	uxtb	r3, r3
 800b938:	693a      	ldr	r2, [r7, #16]
 800b93a:	4313      	orrs	r3, r2
 800b93c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b93e:	78fb      	ldrb	r3, [r7, #3]
 800b940:	015a      	lsls	r2, r3, #5
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	4413      	add	r3, r2
 800b946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	693a      	ldr	r2, [r7, #16]
 800b94e:	4013      	ands	r3, r2
 800b950:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b952:	68bb      	ldr	r3, [r7, #8]
}
 800b954:	4618      	mov	r0, r3
 800b956:	371c      	adds	r7, #28
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	695b      	ldr	r3, [r3, #20]
 800b96c:	f003 0301 	and.w	r3, r3, #1
}
 800b970:	4618      	mov	r0, r3
 800b972:	370c      	adds	r7, #12
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b996:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b99a:	f023 0307 	bic.w	r3, r3, #7
 800b99e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3714      	adds	r7, #20
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
	...

0800b9c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b087      	sub	sp, #28
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	607a      	str	r2, [r7, #4]
 800b9d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	333c      	adds	r3, #60	; 0x3c
 800b9da:	3304      	adds	r3, #4
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	4a26      	ldr	r2, [pc, #152]	; (800ba7c <USB_EP0_OutStart+0xb8>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d90a      	bls.n	800b9fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9f8:	d101      	bne.n	800b9fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	e037      	b.n	800ba6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba04:	461a      	mov	r2, r3
 800ba06:	2300      	movs	r3, #0
 800ba08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba10:	691b      	ldr	r3, [r3, #16]
 800ba12:	697a      	ldr	r2, [r7, #20]
 800ba14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	697a      	ldr	r2, [r7, #20]
 800ba28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba2c:	f043 0318 	orr.w	r3, r3, #24
 800ba30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba38:	691b      	ldr	r3, [r3, #16]
 800ba3a:	697a      	ldr	r2, [r7, #20]
 800ba3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba40:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ba44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ba46:	7afb      	ldrb	r3, [r7, #11]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d10f      	bne.n	800ba6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba52:	461a      	mov	r2, r3
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	697a      	ldr	r2, [r7, #20]
 800ba62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba66:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ba6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	371c      	adds	r7, #28
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	4f54300a 	.word	0x4f54300a

0800ba80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	60fb      	str	r3, [r7, #12]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	4a13      	ldr	r2, [pc, #76]	; (800bae4 <USB_CoreReset+0x64>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d901      	bls.n	800ba9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ba9a:	2303      	movs	r3, #3
 800ba9c:	e01b      	b.n	800bad6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	691b      	ldr	r3, [r3, #16]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	daf2      	bge.n	800ba8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800baa6:	2300      	movs	r3, #0
 800baa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	691b      	ldr	r3, [r3, #16]
 800baae:	f043 0201 	orr.w	r2, r3, #1
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	3301      	adds	r3, #1
 800baba:	60fb      	str	r3, [r7, #12]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	4a09      	ldr	r2, [pc, #36]	; (800bae4 <USB_CoreReset+0x64>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d901      	bls.n	800bac8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bac4:	2303      	movs	r3, #3
 800bac6:	e006      	b.n	800bad6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	691b      	ldr	r3, [r3, #16]
 800bacc:	f003 0301 	and.w	r3, r3, #1
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d0f0      	beq.n	800bab6 <USB_CoreReset+0x36>

  return HAL_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3714      	adds	r7, #20
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr
 800bae2:	bf00      	nop
 800bae4:	00030d40 	.word	0x00030d40

0800bae8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	460b      	mov	r3, r1
 800baf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800baf4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800baf8:	f003 fc26 	bl	800f348 <malloc>
 800bafc:	4603      	mov	r3, r0
 800bafe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d105      	bne.n	800bb12 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bb0e:	2302      	movs	r3, #2
 800bb10:	e066      	b.n	800bbe0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	7c1b      	ldrb	r3, [r3, #16]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d119      	bne.n	800bb56 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bb22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb26:	2202      	movs	r2, #2
 800bb28:	2181      	movs	r1, #129	; 0x81
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f003 fa77 	bl	800f01e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bb36:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb3a:	2202      	movs	r2, #2
 800bb3c:	2101      	movs	r1, #1
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f003 fa6d 	bl	800f01e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2201      	movs	r2, #1
 800bb48:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2210      	movs	r2, #16
 800bb50:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bb54:	e016      	b.n	800bb84 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bb56:	2340      	movs	r3, #64	; 0x40
 800bb58:	2202      	movs	r2, #2
 800bb5a:	2181      	movs	r1, #129	; 0x81
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f003 fa5e 	bl	800f01e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2201      	movs	r2, #1
 800bb66:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bb68:	2340      	movs	r3, #64	; 0x40
 800bb6a:	2202      	movs	r2, #2
 800bb6c:	2101      	movs	r1, #1
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f003 fa55 	bl	800f01e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2201      	movs	r2, #1
 800bb78:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2210      	movs	r2, #16
 800bb80:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bb84:	2308      	movs	r3, #8
 800bb86:	2203      	movs	r2, #3
 800bb88:	2182      	movs	r1, #130	; 0x82
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f003 fa47 	bl	800f01e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2201      	movs	r2, #1
 800bb94:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2200      	movs	r2, #0
 800bba6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2200      	movs	r2, #0
 800bbae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	7c1b      	ldrb	r3, [r3, #16]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d109      	bne.n	800bbce <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bbc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbc4:	2101      	movs	r1, #1
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f003 fb18 	bl	800f1fc <USBD_LL_PrepareReceive>
 800bbcc:	e007      	b.n	800bbde <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bbd4:	2340      	movs	r3, #64	; 0x40
 800bbd6:	2101      	movs	r1, #1
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f003 fb0f 	bl	800f1fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bbde:	2300      	movs	r3, #0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3710      	adds	r7, #16
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bbf8:	2181      	movs	r1, #129	; 0x81
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f003 fa35 	bl	800f06a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bc06:	2101      	movs	r1, #1
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f003 fa2e 	bl	800f06a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bc16:	2182      	movs	r1, #130	; 0x82
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f003 fa26 	bl	800f06a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00e      	beq.n	800bc56 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f003 fb85 	bl	800f358 <free>
    pdev->pClassData = NULL;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800bc56:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3710      	adds	r7, #16
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc70:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800bc72:	2300      	movs	r3, #0
 800bc74:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800bc76:	2300      	movs	r3, #0
 800bc78:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d03a      	beq.n	800bd00 <USBD_CDC_Setup+0xa0>
 800bc8a:	2b20      	cmp	r3, #32
 800bc8c:	f040 8097 	bne.w	800bdbe <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	88db      	ldrh	r3, [r3, #6]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d029      	beq.n	800bcec <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	b25b      	sxtb	r3, r3
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	da11      	bge.n	800bcc6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	683a      	ldr	r2, [r7, #0]
 800bcac:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800bcae:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bcb0:	683a      	ldr	r2, [r7, #0]
 800bcb2:	88d2      	ldrh	r2, [r2, #6]
 800bcb4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bcb6:	6939      	ldr	r1, [r7, #16]
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	88db      	ldrh	r3, [r3, #6]
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f001 fa9d 	bl	800d1fe <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800bcc4:	e082      	b.n	800bdcc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	785a      	ldrb	r2, [r3, #1]
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	88db      	ldrh	r3, [r3, #6]
 800bcd4:	b2da      	uxtb	r2, r3
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bcdc:	6939      	ldr	r1, [r7, #16]
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	88db      	ldrh	r3, [r3, #6]
 800bce2:	461a      	mov	r2, r3
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f001 fab6 	bl	800d256 <USBD_CtlPrepareRx>
    break;
 800bcea:	e06f      	b.n	800bdcc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	683a      	ldr	r2, [r7, #0]
 800bcf6:	7850      	ldrb	r0, [r2, #1]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	6839      	ldr	r1, [r7, #0]
 800bcfc:	4798      	blx	r3
    break;
 800bcfe:	e065      	b.n	800bdcc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	785b      	ldrb	r3, [r3, #1]
 800bd04:	2b0b      	cmp	r3, #11
 800bd06:	d84f      	bhi.n	800bda8 <USBD_CDC_Setup+0x148>
 800bd08:	a201      	add	r2, pc, #4	; (adr r2, 800bd10 <USBD_CDC_Setup+0xb0>)
 800bd0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd0e:	bf00      	nop
 800bd10:	0800bd41 	.word	0x0800bd41
 800bd14:	0800bdb7 	.word	0x0800bdb7
 800bd18:	0800bda9 	.word	0x0800bda9
 800bd1c:	0800bda9 	.word	0x0800bda9
 800bd20:	0800bda9 	.word	0x0800bda9
 800bd24:	0800bda9 	.word	0x0800bda9
 800bd28:	0800bda9 	.word	0x0800bda9
 800bd2c:	0800bda9 	.word	0x0800bda9
 800bd30:	0800bda9 	.word	0x0800bda9
 800bd34:	0800bda9 	.word	0x0800bda9
 800bd38:	0800bd69 	.word	0x0800bd69
 800bd3c:	0800bd91 	.word	0x0800bd91
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd46:	2b03      	cmp	r3, #3
 800bd48:	d107      	bne.n	800bd5a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bd4a:	f107 030c 	add.w	r3, r7, #12
 800bd4e:	2202      	movs	r2, #2
 800bd50:	4619      	mov	r1, r3
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f001 fa53 	bl	800d1fe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800bd58:	e030      	b.n	800bdbc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800bd5a:	6839      	ldr	r1, [r7, #0]
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f001 f9dd 	bl	800d11c <USBD_CtlError>
        ret = USBD_FAIL;
 800bd62:	2303      	movs	r3, #3
 800bd64:	75fb      	strb	r3, [r7, #23]
      break;
 800bd66:	e029      	b.n	800bdbc <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd6e:	2b03      	cmp	r3, #3
 800bd70:	d107      	bne.n	800bd82 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bd72:	f107 030f 	add.w	r3, r7, #15
 800bd76:	2201      	movs	r2, #1
 800bd78:	4619      	mov	r1, r3
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f001 fa3f 	bl	800d1fe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800bd80:	e01c      	b.n	800bdbc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800bd82:	6839      	ldr	r1, [r7, #0]
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f001 f9c9 	bl	800d11c <USBD_CtlError>
        ret = USBD_FAIL;
 800bd8a:	2303      	movs	r3, #3
 800bd8c:	75fb      	strb	r3, [r7, #23]
      break;
 800bd8e:	e015      	b.n	800bdbc <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd96:	2b03      	cmp	r3, #3
 800bd98:	d00f      	beq.n	800bdba <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800bd9a:	6839      	ldr	r1, [r7, #0]
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f001 f9bd 	bl	800d11c <USBD_CtlError>
        ret = USBD_FAIL;
 800bda2:	2303      	movs	r3, #3
 800bda4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800bda6:	e008      	b.n	800bdba <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800bda8:	6839      	ldr	r1, [r7, #0]
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f001 f9b6 	bl	800d11c <USBD_CtlError>
      ret = USBD_FAIL;
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	75fb      	strb	r3, [r7, #23]
      break;
 800bdb4:	e002      	b.n	800bdbc <USBD_CDC_Setup+0x15c>
      break;
 800bdb6:	bf00      	nop
 800bdb8:	e008      	b.n	800bdcc <USBD_CDC_Setup+0x16c>
      break;
 800bdba:	bf00      	nop
    }
    break;
 800bdbc:	e006      	b.n	800bdcc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800bdbe:	6839      	ldr	r1, [r7, #0]
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f001 f9ab 	bl	800d11c <USBD_CtlError>
    ret = USBD_FAIL;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	75fb      	strb	r3, [r7, #23]
    break;
 800bdca:	bf00      	nop
  }

  return (uint8_t)ret;
 800bdcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3718      	adds	r7, #24
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop

0800bdd8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	460b      	mov	r3, r1
 800bde2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bdea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d101      	bne.n	800bdfa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bdf6:	2303      	movs	r3, #3
 800bdf8:	e049      	b.n	800be8e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800be02:	78fa      	ldrb	r2, [r7, #3]
 800be04:	6879      	ldr	r1, [r7, #4]
 800be06:	4613      	mov	r3, r2
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	4413      	add	r3, r2
 800be0c:	009b      	lsls	r3, r3, #2
 800be0e:	440b      	add	r3, r1
 800be10:	3318      	adds	r3, #24
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d029      	beq.n	800be6c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800be18:	78fa      	ldrb	r2, [r7, #3]
 800be1a:	6879      	ldr	r1, [r7, #4]
 800be1c:	4613      	mov	r3, r2
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	4413      	add	r3, r2
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	440b      	add	r3, r1
 800be26:	3318      	adds	r3, #24
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	78f9      	ldrb	r1, [r7, #3]
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	460b      	mov	r3, r1
 800be30:	00db      	lsls	r3, r3, #3
 800be32:	1a5b      	subs	r3, r3, r1
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	4403      	add	r3, r0
 800be38:	3344      	adds	r3, #68	; 0x44
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	fbb2 f1f3 	udiv	r1, r2, r3
 800be40:	fb03 f301 	mul.w	r3, r3, r1
 800be44:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800be46:	2b00      	cmp	r3, #0
 800be48:	d110      	bne.n	800be6c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800be4a:	78fa      	ldrb	r2, [r7, #3]
 800be4c:	6879      	ldr	r1, [r7, #4]
 800be4e:	4613      	mov	r3, r2
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	4413      	add	r3, r2
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	440b      	add	r3, r1
 800be58:	3318      	adds	r3, #24
 800be5a:	2200      	movs	r2, #0
 800be5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800be5e:	78f9      	ldrb	r1, [r7, #3]
 800be60:	2300      	movs	r3, #0
 800be62:	2200      	movs	r2, #0
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f003 f9a8 	bl	800f1ba <USBD_LL_Transmit>
 800be6a:	e00f      	b.n	800be8c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	2200      	movs	r2, #0
 800be70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be7a:	691b      	ldr	r3, [r3, #16]
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800be82:	68ba      	ldr	r2, [r7, #8]
 800be84:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800be88:	78fa      	ldrb	r2, [r7, #3]
 800be8a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800be8c:	2300      	movs	r3, #0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be96:	b580      	push	{r7, lr}
 800be98:	b084      	sub	sp, #16
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
 800be9e:	460b      	mov	r3, r1
 800bea0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bea8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d101      	bne.n	800beb8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800beb4:	2303      	movs	r3, #3
 800beb6:	e015      	b.n	800bee4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800beb8:	78fb      	ldrb	r3, [r7, #3]
 800beba:	4619      	mov	r1, r3
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f003 f9be 	bl	800f23e <USBD_LL_GetRxDataSize>
 800bec2:	4602      	mov	r2, r0
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bed8:	68fa      	ldr	r2, [r7, #12]
 800beda:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bede:	4611      	mov	r1, r2
 800bee0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800befa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d015      	beq.n	800bf32 <USBD_CDC_EP0_RxReady+0x46>
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bf0c:	2bff      	cmp	r3, #255	; 0xff
 800bf0e:	d010      	beq.n	800bf32 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	68fa      	ldr	r2, [r7, #12]
 800bf1a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bf1e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bf26:	b292      	uxth	r2, r2
 800bf28:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	22ff      	movs	r2, #255	; 0xff
 800bf2e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2243      	movs	r2, #67	; 0x43
 800bf48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bf4a:	4b03      	ldr	r3, [pc, #12]	; (800bf58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	370c      	adds	r7, #12
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr
 800bf58:	2000009c 	.word	0x2000009c

0800bf5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2243      	movs	r2, #67	; 0x43
 800bf68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bf6a:	4b03      	ldr	r3, [pc, #12]	; (800bf78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr
 800bf78:	20000058 	.word	0x20000058

0800bf7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2243      	movs	r2, #67	; 0x43
 800bf88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bf8a:	4b03      	ldr	r3, [pc, #12]	; (800bf98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr
 800bf98:	200000e0 	.word	0x200000e0

0800bf9c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	220a      	movs	r2, #10
 800bfa8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bfaa:	4b03      	ldr	r3, [pc, #12]	; (800bfb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	370c      	adds	r7, #12
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr
 800bfb8:	20000014 	.word	0x20000014

0800bfbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d101      	bne.n	800bfd0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bfcc:	2303      	movs	r3, #3
 800bfce:	e004      	b.n	800bfda <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	683a      	ldr	r2, [r7, #0]
 800bfd4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	370c      	adds	r7, #12
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr

0800bfe6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bfe6:	b480      	push	{r7}
 800bfe8:	b087      	sub	sp, #28
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	60f8      	str	r0, [r7, #12]
 800bfee:	60b9      	str	r1, [r7, #8]
 800bff0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bff8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	68ba      	ldr	r2, [r7, #8]
 800bffe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c00a:	2300      	movs	r3, #0
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	371c      	adds	r7, #28
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c018:	b480      	push	{r7}
 800c01a:	b085      	sub	sp, #20
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c028:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	683a      	ldr	r2, [r7, #0]
 800c02e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c032:	2300      	movs	r3, #0
}
 800c034:	4618      	mov	r0, r3
 800c036:	3714      	adds	r7, #20
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr

0800c040 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c04e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c050:	2301      	movs	r3, #1
 800c052:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d101      	bne.n	800c062 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c05e:	2303      	movs	r3, #3
 800c060:	e01a      	b.n	800c098 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d114      	bne.n	800c096 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	2201      	movs	r2, #1
 800c070:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c08a:	2181      	movs	r1, #129	; 0x81
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f003 f894 	bl	800f1ba <USBD_LL_Transmit>

    ret = USBD_OK;
 800c092:	2300      	movs	r3, #0
 800c094:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c096:	7bfb      	ldrb	r3, [r7, #15]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3710      	adds	r7, #16
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d101      	bne.n	800c0be <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c0ba:	2303      	movs	r3, #3
 800c0bc:	e016      	b.n	800c0ec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	7c1b      	ldrb	r3, [r3, #16]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d109      	bne.n	800c0da <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c0cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0d0:	2101      	movs	r1, #1
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f003 f892 	bl	800f1fc <USBD_LL_PrepareReceive>
 800c0d8:	e007      	b.n	800c0ea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c0e0:	2340      	movs	r3, #64	; 0x40
 800c0e2:	2101      	movs	r1, #1
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f003 f889 	bl	800f1fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3710      	adds	r7, #16
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b086      	sub	sp, #24
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	4613      	mov	r3, r2
 800c100:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d101      	bne.n	800c10c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c108:	2303      	movs	r3, #3
 800c10a:	e025      	b.n	800c158 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c112:	2b00      	cmp	r3, #0
 800c114:	d003      	beq.n	800c11e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2200      	movs	r2, #0
 800c11a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800c124:	2b00      	cmp	r3, #0
 800c126:	d003      	beq.n	800c130 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2200      	movs	r2, #0
 800c12c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	68ba      	ldr	r2, [r7, #8]
 800c13a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2201      	movs	r2, #1
 800c142:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	79fa      	ldrb	r2, [r7, #7]
 800c14a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f002 feff 	bl	800ef50 <USBD_LL_Init>
 800c152:	4603      	mov	r3, r0
 800c154:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c156:	7dfb      	ldrb	r3, [r7, #23]
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3718      	adds	r7, #24
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c16a:	2300      	movs	r3, #0
 800c16c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d101      	bne.n	800c178 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c174:	2303      	movs	r3, #3
 800c176:	e010      	b.n	800c19a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	683a      	ldr	r2, [r7, #0]
 800c17c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c188:	f107 020e 	add.w	r2, r7, #14
 800c18c:	4610      	mov	r0, r2
 800c18e:	4798      	blx	r3
 800c190:	4602      	mov	r2, r0
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800c198:	2300      	movs	r3, #0
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}

0800c1a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c1a2:	b580      	push	{r7, lr}
 800c1a4:	b082      	sub	sp, #8
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f002 ff1c 	bl	800efe8 <USBD_LL_Start>
 800c1b0:	4603      	mov	r3, r0
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3708      	adds	r7, #8
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c1ba:	b480      	push	{r7}
 800c1bc:	b083      	sub	sp, #12
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c1c2:	2300      	movs	r3, #0
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	370c      	adds	r7, #12
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	460b      	mov	r3, r1
 800c1da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c1dc:	2303      	movs	r3, #3
 800c1de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d009      	beq.n	800c1fe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	78fa      	ldrb	r2, [r7, #3]
 800c1f4:	4611      	mov	r1, r2
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	4798      	blx	r3
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c1fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c200:	4618      	mov	r0, r3
 800c202:	3710      	adds	r7, #16
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	460b      	mov	r3, r1
 800c212:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d007      	beq.n	800c22e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	78fa      	ldrb	r2, [r7, #3]
 800c228:	4611      	mov	r1, r2
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	4798      	blx	r3
  }

  return USBD_OK;
 800c22e:	2300      	movs	r3, #0
}
 800c230:	4618      	mov	r0, r3
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c248:	6839      	ldr	r1, [r7, #0]
 800c24a:	4618      	mov	r0, r3
 800c24c:	f000 ff2c 	bl	800d0a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2201      	movs	r2, #1
 800c254:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c25e:	461a      	mov	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c26c:	f003 031f 	and.w	r3, r3, #31
 800c270:	2b01      	cmp	r3, #1
 800c272:	d00e      	beq.n	800c292 <USBD_LL_SetupStage+0x5a>
 800c274:	2b01      	cmp	r3, #1
 800c276:	d302      	bcc.n	800c27e <USBD_LL_SetupStage+0x46>
 800c278:	2b02      	cmp	r3, #2
 800c27a:	d014      	beq.n	800c2a6 <USBD_LL_SetupStage+0x6e>
 800c27c:	e01d      	b.n	800c2ba <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c284:	4619      	mov	r1, r3
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 fa18 	bl	800c6bc <USBD_StdDevReq>
 800c28c:	4603      	mov	r3, r0
 800c28e:	73fb      	strb	r3, [r7, #15]
      break;
 800c290:	e020      	b.n	800c2d4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c298:	4619      	mov	r1, r3
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 fa7c 	bl	800c798 <USBD_StdItfReq>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	73fb      	strb	r3, [r7, #15]
      break;
 800c2a4:	e016      	b.n	800c2d4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 fab8 	bl	800c824 <USBD_StdEPReq>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	73fb      	strb	r3, [r7, #15]
      break;
 800c2b8:	e00c      	b.n	800c2d4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c2c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f002 feed 	bl	800f0a8 <USBD_LL_StallEP>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	73fb      	strb	r3, [r7, #15]
      break;
 800c2d2:	bf00      	nop
  }

  return ret;
 800c2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3710      	adds	r7, #16
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}

0800c2de <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c2de:	b580      	push	{r7, lr}
 800c2e0:	b086      	sub	sp, #24
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	60f8      	str	r0, [r7, #12]
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	607a      	str	r2, [r7, #4]
 800c2ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c2ec:	7afb      	ldrb	r3, [r7, #11]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d137      	bne.n	800c362 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c2f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c300:	2b03      	cmp	r3, #3
 800c302:	d14a      	bne.n	800c39a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	689a      	ldr	r2, [r3, #8]
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d913      	bls.n	800c338 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	689a      	ldr	r2, [r3, #8]
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	68db      	ldr	r3, [r3, #12]
 800c318:	1ad2      	subs	r2, r2, r3
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	68da      	ldr	r2, [r3, #12]
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	689b      	ldr	r3, [r3, #8]
 800c326:	4293      	cmp	r3, r2
 800c328:	bf28      	it	cs
 800c32a:	4613      	movcs	r3, r2
 800c32c:	461a      	mov	r2, r3
 800c32e:	6879      	ldr	r1, [r7, #4]
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f000 ffad 	bl	800d290 <USBD_CtlContinueRx>
 800c336:	e030      	b.n	800c39a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c33e:	691b      	ldr	r3, [r3, #16]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00a      	beq.n	800c35a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c34a:	2b03      	cmp	r3, #3
 800c34c:	d105      	bne.n	800c35a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c354:	691b      	ldr	r3, [r3, #16]
 800c356:	68f8      	ldr	r0, [r7, #12]
 800c358:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f000 ffa9 	bl	800d2b2 <USBD_CtlSendStatus>
 800c360:	e01b      	b.n	800c39a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c368:	699b      	ldr	r3, [r3, #24]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d013      	beq.n	800c396 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c374:	2b03      	cmp	r3, #3
 800c376:	d10e      	bne.n	800c396 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c37e:	699b      	ldr	r3, [r3, #24]
 800c380:	7afa      	ldrb	r2, [r7, #11]
 800c382:	4611      	mov	r1, r2
 800c384:	68f8      	ldr	r0, [r7, #12]
 800c386:	4798      	blx	r3
 800c388:	4603      	mov	r3, r0
 800c38a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c38c:	7dfb      	ldrb	r3, [r7, #23]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d003      	beq.n	800c39a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800c392:	7dfb      	ldrb	r3, [r7, #23]
 800c394:	e002      	b.n	800c39c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c396:	2303      	movs	r3, #3
 800c398:	e000      	b.n	800c39c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800c39a:	2300      	movs	r3, #0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3718      	adds	r7, #24
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b086      	sub	sp, #24
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	607a      	str	r2, [r7, #4]
 800c3b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c3b2:	7afb      	ldrb	r3, [r7, #11]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d16a      	bne.n	800c48e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	3314      	adds	r3, #20
 800c3bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	d155      	bne.n	800c474 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	689a      	ldr	r2, [r3, #8]
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d914      	bls.n	800c3fe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	689a      	ldr	r2, [r3, #8]
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	1ad2      	subs	r2, r2, r3
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	689b      	ldr	r3, [r3, #8]
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	6879      	ldr	r1, [r7, #4]
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	f000 ff22 	bl	800d234 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	2100      	movs	r1, #0
 800c3f6:	68f8      	ldr	r0, [r7, #12]
 800c3f8:	f002 ff00 	bl	800f1fc <USBD_LL_PrepareReceive>
 800c3fc:	e03a      	b.n	800c474 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	68da      	ldr	r2, [r3, #12]
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	429a      	cmp	r2, r3
 800c408:	d11c      	bne.n	800c444 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	685a      	ldr	r2, [r3, #4]
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c412:	429a      	cmp	r2, r3
 800c414:	d316      	bcc.n	800c444 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	685a      	ldr	r2, [r3, #4]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c420:	429a      	cmp	r2, r3
 800c422:	d20f      	bcs.n	800c444 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c424:	2200      	movs	r2, #0
 800c426:	2100      	movs	r1, #0
 800c428:	68f8      	ldr	r0, [r7, #12]
 800c42a:	f000 ff03 	bl	800d234 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2200      	movs	r2, #0
 800c432:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c436:	2300      	movs	r3, #0
 800c438:	2200      	movs	r2, #0
 800c43a:	2100      	movs	r1, #0
 800c43c:	68f8      	ldr	r0, [r7, #12]
 800c43e:	f002 fedd 	bl	800f1fc <USBD_LL_PrepareReceive>
 800c442:	e017      	b.n	800c474 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c44a:	68db      	ldr	r3, [r3, #12]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00a      	beq.n	800c466 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c456:	2b03      	cmp	r3, #3
 800c458:	d105      	bne.n	800c466 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	68f8      	ldr	r0, [r7, #12]
 800c464:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c466:	2180      	movs	r1, #128	; 0x80
 800c468:	68f8      	ldr	r0, [r7, #12]
 800c46a:	f002 fe1d 	bl	800f0a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c46e:	68f8      	ldr	r0, [r7, #12]
 800c470:	f000 ff32 	bl	800d2d8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d123      	bne.n	800c4c6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f7ff fe9b 	bl	800c1ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2200      	movs	r2, #0
 800c488:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c48c:	e01b      	b.n	800c4c6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c494:	695b      	ldr	r3, [r3, #20]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d013      	beq.n	800c4c2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c4a0:	2b03      	cmp	r3, #3
 800c4a2:	d10e      	bne.n	800c4c2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4aa:	695b      	ldr	r3, [r3, #20]
 800c4ac:	7afa      	ldrb	r2, [r7, #11]
 800c4ae:	4611      	mov	r1, r2
 800c4b0:	68f8      	ldr	r0, [r7, #12]
 800c4b2:	4798      	blx	r3
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c4b8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d003      	beq.n	800c4c6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800c4be:	7dfb      	ldrb	r3, [r7, #23]
 800c4c0:	e002      	b.n	800c4c8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c4c2:	2303      	movs	r3, #3
 800c4c4:	e000      	b.n	800c4c8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800c4c6:	2300      	movs	r3, #0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3718      	adds	r7, #24
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b082      	sub	sp, #8
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d009      	beq.n	800c514 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	6852      	ldr	r2, [r2, #4]
 800c50c:	b2d2      	uxtb	r2, r2
 800c50e:	4611      	mov	r1, r2
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c514:	2340      	movs	r3, #64	; 0x40
 800c516:	2200      	movs	r2, #0
 800c518:	2100      	movs	r1, #0
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f002 fd7f 	bl	800f01e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2201      	movs	r2, #1
 800c524:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2240      	movs	r2, #64	; 0x40
 800c52c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c530:	2340      	movs	r3, #64	; 0x40
 800c532:	2200      	movs	r2, #0
 800c534:	2180      	movs	r1, #128	; 0x80
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f002 fd71 	bl	800f01e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2201      	movs	r2, #1
 800c540:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2240      	movs	r2, #64	; 0x40
 800c546:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c548:	2300      	movs	r3, #0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3708      	adds	r7, #8
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c552:	b480      	push	{r7}
 800c554:	b083      	sub	sp, #12
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
 800c55a:	460b      	mov	r3, r1
 800c55c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	78fa      	ldrb	r2, [r7, #3]
 800c562:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c564:	2300      	movs	r3, #0
}
 800c566:	4618      	mov	r0, r3
 800c568:	370c      	adds	r7, #12
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr

0800c572 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c572:	b480      	push	{r7}
 800c574:	b083      	sub	sp, #12
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2204      	movs	r2, #4
 800c58a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c58e:	2300      	movs	r3, #0
}
 800c590:	4618      	mov	r0, r3
 800c592:	370c      	adds	r7, #12
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5aa:	2b04      	cmp	r3, #4
 800c5ac:	d105      	bne.n	800c5ba <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c5ba:	2300      	movs	r3, #0
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	370c      	adds	r7, #12
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr

0800c5c8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5d6:	2b03      	cmp	r3, #3
 800c5d8:	d10b      	bne.n	800c5f2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5e0:	69db      	ldr	r3, [r3, #28]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d005      	beq.n	800c5f2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5ec:	69db      	ldr	r3, [r3, #28]
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c5f2:	2300      	movs	r3, #0
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3708      	adds	r7, #8
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}

0800c5fc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b083      	sub	sp, #12
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	460b      	mov	r3, r1
 800c606:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c608:	2300      	movs	r3, #0
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	370c      	adds	r7, #12
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr

0800c616 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c616:	b480      	push	{r7}
 800c618:	b083      	sub	sp, #12
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	6078      	str	r0, [r7, #4]
 800c61e:	460b      	mov	r3, r1
 800c620:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c622:	2300      	movs	r3, #0
}
 800c624:	4618      	mov	r0, r3
 800c626:	370c      	adds	r7, #12
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c638:	2300      	movs	r3, #0
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	370c      	adds	r7, #12
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr

0800c646 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b082      	sub	sp, #8
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2201      	movs	r2, #1
 800c652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d009      	beq.n	800c674 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	6852      	ldr	r2, [r2, #4]
 800c66c:	b2d2      	uxtb	r2, r2
 800c66e:	4611      	mov	r1, r2
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	4798      	blx	r3
  }

  return USBD_OK;
 800c674:	2300      	movs	r3, #0
}
 800c676:	4618      	mov	r0, r3
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c67e:	b480      	push	{r7}
 800c680:	b087      	sub	sp, #28
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	3301      	adds	r3, #1
 800c694:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c69c:	8a3b      	ldrh	r3, [r7, #16]
 800c69e:	021b      	lsls	r3, r3, #8
 800c6a0:	b21a      	sxth	r2, r3
 800c6a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	b21b      	sxth	r3, r3
 800c6aa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c6ac:	89fb      	ldrh	r3, [r7, #14]
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	371c      	adds	r7, #28
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr
	...

0800c6bc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b084      	sub	sp, #16
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c6d2:	2b20      	cmp	r3, #32
 800c6d4:	d004      	beq.n	800c6e0 <USBD_StdDevReq+0x24>
 800c6d6:	2b40      	cmp	r3, #64	; 0x40
 800c6d8:	d002      	beq.n	800c6e0 <USBD_StdDevReq+0x24>
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00a      	beq.n	800c6f4 <USBD_StdDevReq+0x38>
 800c6de:	e050      	b.n	800c782 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	6839      	ldr	r1, [r7, #0]
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	4798      	blx	r3
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	73fb      	strb	r3, [r7, #15]
    break;
 800c6f2:	e04b      	b.n	800c78c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	785b      	ldrb	r3, [r3, #1]
 800c6f8:	2b09      	cmp	r3, #9
 800c6fa:	d83c      	bhi.n	800c776 <USBD_StdDevReq+0xba>
 800c6fc:	a201      	add	r2, pc, #4	; (adr r2, 800c704 <USBD_StdDevReq+0x48>)
 800c6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c702:	bf00      	nop
 800c704:	0800c759 	.word	0x0800c759
 800c708:	0800c76d 	.word	0x0800c76d
 800c70c:	0800c777 	.word	0x0800c777
 800c710:	0800c763 	.word	0x0800c763
 800c714:	0800c777 	.word	0x0800c777
 800c718:	0800c737 	.word	0x0800c737
 800c71c:	0800c72d 	.word	0x0800c72d
 800c720:	0800c777 	.word	0x0800c777
 800c724:	0800c74f 	.word	0x0800c74f
 800c728:	0800c741 	.word	0x0800c741
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c72c:	6839      	ldr	r1, [r7, #0]
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 f9ce 	bl	800cad0 <USBD_GetDescriptor>
      break;
 800c734:	e024      	b.n	800c780 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c736:	6839      	ldr	r1, [r7, #0]
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 fb33 	bl	800cda4 <USBD_SetAddress>
      break;
 800c73e:	e01f      	b.n	800c780 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c740:	6839      	ldr	r1, [r7, #0]
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 fb70 	bl	800ce28 <USBD_SetConfig>
 800c748:	4603      	mov	r3, r0
 800c74a:	73fb      	strb	r3, [r7, #15]
      break;
 800c74c:	e018      	b.n	800c780 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c74e:	6839      	ldr	r1, [r7, #0]
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f000 fc0d 	bl	800cf70 <USBD_GetConfig>
      break;
 800c756:	e013      	b.n	800c780 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c758:	6839      	ldr	r1, [r7, #0]
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 fc3c 	bl	800cfd8 <USBD_GetStatus>
      break;
 800c760:	e00e      	b.n	800c780 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c762:	6839      	ldr	r1, [r7, #0]
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f000 fc6a 	bl	800d03e <USBD_SetFeature>
      break;
 800c76a:	e009      	b.n	800c780 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c76c:	6839      	ldr	r1, [r7, #0]
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 fc79 	bl	800d066 <USBD_ClrFeature>
      break;
 800c774:	e004      	b.n	800c780 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c776:	6839      	ldr	r1, [r7, #0]
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 fccf 	bl	800d11c <USBD_CtlError>
      break;
 800c77e:	bf00      	nop
    }
    break;
 800c780:	e004      	b.n	800c78c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c782:	6839      	ldr	r1, [r7, #0]
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f000 fcc9 	bl	800d11c <USBD_CtlError>
    break;
 800c78a:	bf00      	nop
  }

  return ret;
 800c78c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop

0800c798 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c7ae:	2b20      	cmp	r3, #32
 800c7b0:	d003      	beq.n	800c7ba <USBD_StdItfReq+0x22>
 800c7b2:	2b40      	cmp	r3, #64	; 0x40
 800c7b4:	d001      	beq.n	800c7ba <USBD_StdItfReq+0x22>
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d12a      	bne.n	800c810 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7c0:	3b01      	subs	r3, #1
 800c7c2:	2b02      	cmp	r3, #2
 800c7c4:	d81d      	bhi.n	800c802 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	889b      	ldrh	r3, [r3, #4]
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d813      	bhi.n	800c7f8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	6839      	ldr	r1, [r7, #0]
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	4798      	blx	r3
 800c7de:	4603      	mov	r3, r0
 800c7e0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	88db      	ldrh	r3, [r3, #6]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d110      	bne.n	800c80c <USBD_StdItfReq+0x74>
 800c7ea:	7bfb      	ldrb	r3, [r7, #15]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d10d      	bne.n	800c80c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 fd5e 	bl	800d2b2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c7f6:	e009      	b.n	800c80c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c7f8:	6839      	ldr	r1, [r7, #0]
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 fc8e 	bl	800d11c <USBD_CtlError>
      break;
 800c800:	e004      	b.n	800c80c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c802:	6839      	ldr	r1, [r7, #0]
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 fc89 	bl	800d11c <USBD_CtlError>
      break;
 800c80a:	e000      	b.n	800c80e <USBD_StdItfReq+0x76>
      break;
 800c80c:	bf00      	nop
    }
    break;
 800c80e:	e004      	b.n	800c81a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c810:	6839      	ldr	r1, [r7, #0]
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 fc82 	bl	800d11c <USBD_CtlError>
    break;
 800c818:	bf00      	nop
  }

  return ret;
 800c81a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c82e:	2300      	movs	r3, #0
 800c830:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	889b      	ldrh	r3, [r3, #4]
 800c836:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c840:	2b20      	cmp	r3, #32
 800c842:	d004      	beq.n	800c84e <USBD_StdEPReq+0x2a>
 800c844:	2b40      	cmp	r3, #64	; 0x40
 800c846:	d002      	beq.n	800c84e <USBD_StdEPReq+0x2a>
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00a      	beq.n	800c862 <USBD_StdEPReq+0x3e>
 800c84c:	e135      	b.n	800caba <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c854:	689b      	ldr	r3, [r3, #8]
 800c856:	6839      	ldr	r1, [r7, #0]
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	4798      	blx	r3
 800c85c:	4603      	mov	r3, r0
 800c85e:	73fb      	strb	r3, [r7, #15]
    break;
 800c860:	e130      	b.n	800cac4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	785b      	ldrb	r3, [r3, #1]
 800c866:	2b01      	cmp	r3, #1
 800c868:	d03e      	beq.n	800c8e8 <USBD_StdEPReq+0xc4>
 800c86a:	2b03      	cmp	r3, #3
 800c86c:	d002      	beq.n	800c874 <USBD_StdEPReq+0x50>
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d077      	beq.n	800c962 <USBD_StdEPReq+0x13e>
 800c872:	e11c      	b.n	800caae <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c87a:	2b02      	cmp	r3, #2
 800c87c:	d002      	beq.n	800c884 <USBD_StdEPReq+0x60>
 800c87e:	2b03      	cmp	r3, #3
 800c880:	d015      	beq.n	800c8ae <USBD_StdEPReq+0x8a>
 800c882:	e02b      	b.n	800c8dc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c884:	7bbb      	ldrb	r3, [r7, #14]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00c      	beq.n	800c8a4 <USBD_StdEPReq+0x80>
 800c88a:	7bbb      	ldrb	r3, [r7, #14]
 800c88c:	2b80      	cmp	r3, #128	; 0x80
 800c88e:	d009      	beq.n	800c8a4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c890:	7bbb      	ldrb	r3, [r7, #14]
 800c892:	4619      	mov	r1, r3
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f002 fc07 	bl	800f0a8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c89a:	2180      	movs	r1, #128	; 0x80
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f002 fc03 	bl	800f0a8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c8a2:	e020      	b.n	800c8e6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c8a4:	6839      	ldr	r1, [r7, #0]
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 fc38 	bl	800d11c <USBD_CtlError>
        break;
 800c8ac:	e01b      	b.n	800c8e6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	885b      	ldrh	r3, [r3, #2]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d10e      	bne.n	800c8d4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c8b6:	7bbb      	ldrb	r3, [r7, #14]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d00b      	beq.n	800c8d4 <USBD_StdEPReq+0xb0>
 800c8bc:	7bbb      	ldrb	r3, [r7, #14]
 800c8be:	2b80      	cmp	r3, #128	; 0x80
 800c8c0:	d008      	beq.n	800c8d4 <USBD_StdEPReq+0xb0>
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	88db      	ldrh	r3, [r3, #6]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d104      	bne.n	800c8d4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c8ca:	7bbb      	ldrb	r3, [r7, #14]
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f002 fbea 	bl	800f0a8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f000 fcec 	bl	800d2b2 <USBD_CtlSendStatus>

        break;
 800c8da:	e004      	b.n	800c8e6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c8dc:	6839      	ldr	r1, [r7, #0]
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 fc1c 	bl	800d11c <USBD_CtlError>
        break;
 800c8e4:	bf00      	nop
      }
      break;
 800c8e6:	e0e7      	b.n	800cab8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8ee:	2b02      	cmp	r3, #2
 800c8f0:	d002      	beq.n	800c8f8 <USBD_StdEPReq+0xd4>
 800c8f2:	2b03      	cmp	r3, #3
 800c8f4:	d015      	beq.n	800c922 <USBD_StdEPReq+0xfe>
 800c8f6:	e02d      	b.n	800c954 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8f8:	7bbb      	ldrb	r3, [r7, #14]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d00c      	beq.n	800c918 <USBD_StdEPReq+0xf4>
 800c8fe:	7bbb      	ldrb	r3, [r7, #14]
 800c900:	2b80      	cmp	r3, #128	; 0x80
 800c902:	d009      	beq.n	800c918 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c904:	7bbb      	ldrb	r3, [r7, #14]
 800c906:	4619      	mov	r1, r3
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f002 fbcd 	bl	800f0a8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c90e:	2180      	movs	r1, #128	; 0x80
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f002 fbc9 	bl	800f0a8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c916:	e023      	b.n	800c960 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c918:	6839      	ldr	r1, [r7, #0]
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fbfe 	bl	800d11c <USBD_CtlError>
        break;
 800c920:	e01e      	b.n	800c960 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	885b      	ldrh	r3, [r3, #2]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d119      	bne.n	800c95e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c92a:	7bbb      	ldrb	r3, [r7, #14]
 800c92c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c930:	2b00      	cmp	r3, #0
 800c932:	d004      	beq.n	800c93e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c934:	7bbb      	ldrb	r3, [r7, #14]
 800c936:	4619      	mov	r1, r3
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f002 fbd4 	bl	800f0e6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 fcb7 	bl	800d2b2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c94a:	689b      	ldr	r3, [r3, #8]
 800c94c:	6839      	ldr	r1, [r7, #0]
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	4798      	blx	r3
        }
        break;
 800c952:	e004      	b.n	800c95e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c954:	6839      	ldr	r1, [r7, #0]
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 fbe0 	bl	800d11c <USBD_CtlError>
        break;
 800c95c:	e000      	b.n	800c960 <USBD_StdEPReq+0x13c>
        break;
 800c95e:	bf00      	nop
      }
      break;
 800c960:	e0aa      	b.n	800cab8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c968:	2b02      	cmp	r3, #2
 800c96a:	d002      	beq.n	800c972 <USBD_StdEPReq+0x14e>
 800c96c:	2b03      	cmp	r3, #3
 800c96e:	d032      	beq.n	800c9d6 <USBD_StdEPReq+0x1b2>
 800c970:	e097      	b.n	800caa2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c972:	7bbb      	ldrb	r3, [r7, #14]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d007      	beq.n	800c988 <USBD_StdEPReq+0x164>
 800c978:	7bbb      	ldrb	r3, [r7, #14]
 800c97a:	2b80      	cmp	r3, #128	; 0x80
 800c97c:	d004      	beq.n	800c988 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c97e:	6839      	ldr	r1, [r7, #0]
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 fbcb 	bl	800d11c <USBD_CtlError>
          break;
 800c986:	e091      	b.n	800caac <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c988:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	da0b      	bge.n	800c9a8 <USBD_StdEPReq+0x184>
 800c990:	7bbb      	ldrb	r3, [r7, #14]
 800c992:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c996:	4613      	mov	r3, r2
 800c998:	009b      	lsls	r3, r3, #2
 800c99a:	4413      	add	r3, r2
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	3310      	adds	r3, #16
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	4413      	add	r3, r2
 800c9a4:	3304      	adds	r3, #4
 800c9a6:	e00b      	b.n	800c9c0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c9a8:	7bbb      	ldrb	r3, [r7, #14]
 800c9aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	4413      	add	r3, r2
 800c9b4:	009b      	lsls	r3, r3, #2
 800c9b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c9ba:	687a      	ldr	r2, [r7, #4]
 800c9bc:	4413      	add	r3, r2
 800c9be:	3304      	adds	r3, #4
 800c9c0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	2202      	movs	r2, #2
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 fc15 	bl	800d1fe <USBD_CtlSendData>
        break;
 800c9d4:	e06a      	b.n	800caac <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c9d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	da11      	bge.n	800ca02 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c9de:	7bbb      	ldrb	r3, [r7, #14]
 800c9e0:	f003 020f 	and.w	r2, r3, #15
 800c9e4:	6879      	ldr	r1, [r7, #4]
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	4413      	add	r3, r2
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	440b      	add	r3, r1
 800c9f0:	3324      	adds	r3, #36	; 0x24
 800c9f2:	881b      	ldrh	r3, [r3, #0]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d117      	bne.n	800ca28 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c9f8:	6839      	ldr	r1, [r7, #0]
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 fb8e 	bl	800d11c <USBD_CtlError>
            break;
 800ca00:	e054      	b.n	800caac <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ca02:	7bbb      	ldrb	r3, [r7, #14]
 800ca04:	f003 020f 	and.w	r2, r3, #15
 800ca08:	6879      	ldr	r1, [r7, #4]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	4413      	add	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	440b      	add	r3, r1
 800ca14:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ca18:	881b      	ldrh	r3, [r3, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d104      	bne.n	800ca28 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ca1e:	6839      	ldr	r1, [r7, #0]
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f000 fb7b 	bl	800d11c <USBD_CtlError>
            break;
 800ca26:	e041      	b.n	800caac <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	da0b      	bge.n	800ca48 <USBD_StdEPReq+0x224>
 800ca30:	7bbb      	ldrb	r3, [r7, #14]
 800ca32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca36:	4613      	mov	r3, r2
 800ca38:	009b      	lsls	r3, r3, #2
 800ca3a:	4413      	add	r3, r2
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	3310      	adds	r3, #16
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	4413      	add	r3, r2
 800ca44:	3304      	adds	r3, #4
 800ca46:	e00b      	b.n	800ca60 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ca48:	7bbb      	ldrb	r3, [r7, #14]
 800ca4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca4e:	4613      	mov	r3, r2
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	4413      	add	r3, r2
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	3304      	adds	r3, #4
 800ca60:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ca62:	7bbb      	ldrb	r3, [r7, #14]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d002      	beq.n	800ca6e <USBD_StdEPReq+0x24a>
 800ca68:	7bbb      	ldrb	r3, [r7, #14]
 800ca6a:	2b80      	cmp	r3, #128	; 0x80
 800ca6c:	d103      	bne.n	800ca76 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	2200      	movs	r2, #0
 800ca72:	601a      	str	r2, [r3, #0]
 800ca74:	e00e      	b.n	800ca94 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ca76:	7bbb      	ldrb	r3, [r7, #14]
 800ca78:	4619      	mov	r1, r3
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f002 fb52 	bl	800f124 <USBD_LL_IsStallEP>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d003      	beq.n	800ca8e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	601a      	str	r2, [r3, #0]
 800ca8c:	e002      	b.n	800ca94 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	2200      	movs	r2, #0
 800ca92:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	2202      	movs	r2, #2
 800ca98:	4619      	mov	r1, r3
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 fbaf 	bl	800d1fe <USBD_CtlSendData>
          break;
 800caa0:	e004      	b.n	800caac <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800caa2:	6839      	ldr	r1, [r7, #0]
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 fb39 	bl	800d11c <USBD_CtlError>
        break;
 800caaa:	bf00      	nop
      }
      break;
 800caac:	e004      	b.n	800cab8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800caae:	6839      	ldr	r1, [r7, #0]
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 fb33 	bl	800d11c <USBD_CtlError>
      break;
 800cab6:	bf00      	nop
    }
    break;
 800cab8:	e004      	b.n	800cac4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800caba:	6839      	ldr	r1, [r7, #0]
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f000 fb2d 	bl	800d11c <USBD_CtlError>
    break;
 800cac2:	bf00      	nop
  }

  return ret;
 800cac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3710      	adds	r7, #16
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
	...

0800cad0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b084      	sub	sp, #16
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cada:	2300      	movs	r3, #0
 800cadc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cade:	2300      	movs	r3, #0
 800cae0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cae2:	2300      	movs	r3, #0
 800cae4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	885b      	ldrh	r3, [r3, #2]
 800caea:	0a1b      	lsrs	r3, r3, #8
 800caec:	b29b      	uxth	r3, r3
 800caee:	3b01      	subs	r3, #1
 800caf0:	2b06      	cmp	r3, #6
 800caf2:	f200 8128 	bhi.w	800cd46 <USBD_GetDescriptor+0x276>
 800caf6:	a201      	add	r2, pc, #4	; (adr r2, 800cafc <USBD_GetDescriptor+0x2c>)
 800caf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cafc:	0800cb19 	.word	0x0800cb19
 800cb00:	0800cb31 	.word	0x0800cb31
 800cb04:	0800cb71 	.word	0x0800cb71
 800cb08:	0800cd47 	.word	0x0800cd47
 800cb0c:	0800cd47 	.word	0x0800cd47
 800cb10:	0800cce7 	.word	0x0800cce7
 800cb14:	0800cd13 	.word	0x0800cd13
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	7c12      	ldrb	r2, [r2, #16]
 800cb24:	f107 0108 	add.w	r1, r7, #8
 800cb28:	4610      	mov	r0, r2
 800cb2a:	4798      	blx	r3
 800cb2c:	60f8      	str	r0, [r7, #12]
    break;
 800cb2e:	e112      	b.n	800cd56 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	7c1b      	ldrb	r3, [r3, #16]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10d      	bne.n	800cb54 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb40:	f107 0208 	add.w	r2, r7, #8
 800cb44:	4610      	mov	r0, r2
 800cb46:	4798      	blx	r3
 800cb48:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	2202      	movs	r2, #2
 800cb50:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800cb52:	e100      	b.n	800cd56 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb5c:	f107 0208 	add.w	r2, r7, #8
 800cb60:	4610      	mov	r0, r2
 800cb62:	4798      	blx	r3
 800cb64:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	3301      	adds	r3, #1
 800cb6a:	2202      	movs	r2, #2
 800cb6c:	701a      	strb	r2, [r3, #0]
    break;
 800cb6e:	e0f2      	b.n	800cd56 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	885b      	ldrh	r3, [r3, #2]
 800cb74:	b2db      	uxtb	r3, r3
 800cb76:	2b05      	cmp	r3, #5
 800cb78:	f200 80ac 	bhi.w	800ccd4 <USBD_GetDescriptor+0x204>
 800cb7c:	a201      	add	r2, pc, #4	; (adr r2, 800cb84 <USBD_GetDescriptor+0xb4>)
 800cb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb82:	bf00      	nop
 800cb84:	0800cb9d 	.word	0x0800cb9d
 800cb88:	0800cbd1 	.word	0x0800cbd1
 800cb8c:	0800cc05 	.word	0x0800cc05
 800cb90:	0800cc39 	.word	0x0800cc39
 800cb94:	0800cc6d 	.word	0x0800cc6d
 800cb98:	0800cca1 	.word	0x0800cca1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d00b      	beq.n	800cbc0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	7c12      	ldrb	r2, [r2, #16]
 800cbb4:	f107 0108 	add.w	r1, r7, #8
 800cbb8:	4610      	mov	r0, r2
 800cbba:	4798      	blx	r3
 800cbbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cbbe:	e091      	b.n	800cce4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cbc0:	6839      	ldr	r1, [r7, #0]
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 faaa 	bl	800d11c <USBD_CtlError>
        err++;
 800cbc8:	7afb      	ldrb	r3, [r7, #11]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	72fb      	strb	r3, [r7, #11]
      break;
 800cbce:	e089      	b.n	800cce4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbd6:	689b      	ldr	r3, [r3, #8]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d00b      	beq.n	800cbf4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	687a      	ldr	r2, [r7, #4]
 800cbe6:	7c12      	ldrb	r2, [r2, #16]
 800cbe8:	f107 0108 	add.w	r1, r7, #8
 800cbec:	4610      	mov	r0, r2
 800cbee:	4798      	blx	r3
 800cbf0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cbf2:	e077      	b.n	800cce4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cbf4:	6839      	ldr	r1, [r7, #0]
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 fa90 	bl	800d11c <USBD_CtlError>
        err++;
 800cbfc:	7afb      	ldrb	r3, [r7, #11]
 800cbfe:	3301      	adds	r3, #1
 800cc00:	72fb      	strb	r3, [r7, #11]
      break;
 800cc02:	e06f      	b.n	800cce4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d00b      	beq.n	800cc28 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	687a      	ldr	r2, [r7, #4]
 800cc1a:	7c12      	ldrb	r2, [r2, #16]
 800cc1c:	f107 0108 	add.w	r1, r7, #8
 800cc20:	4610      	mov	r0, r2
 800cc22:	4798      	blx	r3
 800cc24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc26:	e05d      	b.n	800cce4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cc28:	6839      	ldr	r1, [r7, #0]
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f000 fa76 	bl	800d11c <USBD_CtlError>
        err++;
 800cc30:	7afb      	ldrb	r3, [r7, #11]
 800cc32:	3301      	adds	r3, #1
 800cc34:	72fb      	strb	r3, [r7, #11]
      break;
 800cc36:	e055      	b.n	800cce4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc3e:	691b      	ldr	r3, [r3, #16]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d00b      	beq.n	800cc5c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc4a:	691b      	ldr	r3, [r3, #16]
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	7c12      	ldrb	r2, [r2, #16]
 800cc50:	f107 0108 	add.w	r1, r7, #8
 800cc54:	4610      	mov	r0, r2
 800cc56:	4798      	blx	r3
 800cc58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc5a:	e043      	b.n	800cce4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cc5c:	6839      	ldr	r1, [r7, #0]
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f000 fa5c 	bl	800d11c <USBD_CtlError>
        err++;
 800cc64:	7afb      	ldrb	r3, [r7, #11]
 800cc66:	3301      	adds	r3, #1
 800cc68:	72fb      	strb	r3, [r7, #11]
      break;
 800cc6a:	e03b      	b.n	800cce4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc72:	695b      	ldr	r3, [r3, #20]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00b      	beq.n	800cc90 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc7e:	695b      	ldr	r3, [r3, #20]
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	7c12      	ldrb	r2, [r2, #16]
 800cc84:	f107 0108 	add.w	r1, r7, #8
 800cc88:	4610      	mov	r0, r2
 800cc8a:	4798      	blx	r3
 800cc8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc8e:	e029      	b.n	800cce4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cc90:	6839      	ldr	r1, [r7, #0]
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 fa42 	bl	800d11c <USBD_CtlError>
        err++;
 800cc98:	7afb      	ldrb	r3, [r7, #11]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	72fb      	strb	r3, [r7, #11]
      break;
 800cc9e:	e021      	b.n	800cce4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cca6:	699b      	ldr	r3, [r3, #24]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d00b      	beq.n	800ccc4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccb2:	699b      	ldr	r3, [r3, #24]
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	7c12      	ldrb	r2, [r2, #16]
 800ccb8:	f107 0108 	add.w	r1, r7, #8
 800ccbc:	4610      	mov	r0, r2
 800ccbe:	4798      	blx	r3
 800ccc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ccc2:	e00f      	b.n	800cce4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ccc4:	6839      	ldr	r1, [r7, #0]
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f000 fa28 	bl	800d11c <USBD_CtlError>
        err++;
 800cccc:	7afb      	ldrb	r3, [r7, #11]
 800ccce:	3301      	adds	r3, #1
 800ccd0:	72fb      	strb	r3, [r7, #11]
      break;
 800ccd2:	e007      	b.n	800cce4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800ccd4:	6839      	ldr	r1, [r7, #0]
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 fa20 	bl	800d11c <USBD_CtlError>
      err++;
 800ccdc:	7afb      	ldrb	r3, [r7, #11]
 800ccde:	3301      	adds	r3, #1
 800cce0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800cce2:	bf00      	nop
    }
    break;
 800cce4:	e037      	b.n	800cd56 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	7c1b      	ldrb	r3, [r3, #16]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d109      	bne.n	800cd02 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccf6:	f107 0208 	add.w	r2, r7, #8
 800ccfa:	4610      	mov	r0, r2
 800ccfc:	4798      	blx	r3
 800ccfe:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800cd00:	e029      	b.n	800cd56 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800cd02:	6839      	ldr	r1, [r7, #0]
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 fa09 	bl	800d11c <USBD_CtlError>
      err++;
 800cd0a:	7afb      	ldrb	r3, [r7, #11]
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	72fb      	strb	r3, [r7, #11]
    break;
 800cd10:	e021      	b.n	800cd56 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	7c1b      	ldrb	r3, [r3, #16]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d10d      	bne.n	800cd36 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd22:	f107 0208 	add.w	r2, r7, #8
 800cd26:	4610      	mov	r0, r2
 800cd28:	4798      	blx	r3
 800cd2a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	3301      	adds	r3, #1
 800cd30:	2207      	movs	r2, #7
 800cd32:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800cd34:	e00f      	b.n	800cd56 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800cd36:	6839      	ldr	r1, [r7, #0]
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f000 f9ef 	bl	800d11c <USBD_CtlError>
      err++;
 800cd3e:	7afb      	ldrb	r3, [r7, #11]
 800cd40:	3301      	adds	r3, #1
 800cd42:	72fb      	strb	r3, [r7, #11]
    break;
 800cd44:	e007      	b.n	800cd56 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800cd46:	6839      	ldr	r1, [r7, #0]
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f000 f9e7 	bl	800d11c <USBD_CtlError>
    err++;
 800cd4e:	7afb      	ldrb	r3, [r7, #11]
 800cd50:	3301      	adds	r3, #1
 800cd52:	72fb      	strb	r3, [r7, #11]
    break;
 800cd54:	bf00      	nop
  }

  if (err != 0U)
 800cd56:	7afb      	ldrb	r3, [r7, #11]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d11e      	bne.n	800cd9a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	88db      	ldrh	r3, [r3, #6]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d016      	beq.n	800cd92 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800cd64:	893b      	ldrh	r3, [r7, #8]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d00e      	beq.n	800cd88 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	88da      	ldrh	r2, [r3, #6]
 800cd6e:	893b      	ldrh	r3, [r7, #8]
 800cd70:	4293      	cmp	r3, r2
 800cd72:	bf28      	it	cs
 800cd74:	4613      	movcs	r3, r2
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800cd7a:	893b      	ldrh	r3, [r7, #8]
 800cd7c:	461a      	mov	r2, r3
 800cd7e:	68f9      	ldr	r1, [r7, #12]
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f000 fa3c 	bl	800d1fe <USBD_CtlSendData>
 800cd86:	e009      	b.n	800cd9c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800cd88:	6839      	ldr	r1, [r7, #0]
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 f9c6 	bl	800d11c <USBD_CtlError>
 800cd90:	e004      	b.n	800cd9c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 fa8d 	bl	800d2b2 <USBD_CtlSendStatus>
 800cd98:	e000      	b.n	800cd9c <USBD_GetDescriptor+0x2cc>
    return;
 800cd9a:	bf00      	nop
    }
  }
}
 800cd9c:	3710      	adds	r7, #16
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop

0800cda4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	889b      	ldrh	r3, [r3, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d130      	bne.n	800ce18 <USBD_SetAddress+0x74>
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	88db      	ldrh	r3, [r3, #6]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d12c      	bne.n	800ce18 <USBD_SetAddress+0x74>
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	885b      	ldrh	r3, [r3, #2]
 800cdc2:	2b7f      	cmp	r3, #127	; 0x7f
 800cdc4:	d828      	bhi.n	800ce18 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	885b      	ldrh	r3, [r3, #2]
 800cdca:	b2db      	uxtb	r3, r3
 800cdcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdd8:	2b03      	cmp	r3, #3
 800cdda:	d104      	bne.n	800cde6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800cddc:	6839      	ldr	r1, [r7, #0]
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 f99c 	bl	800d11c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cde4:	e01c      	b.n	800ce20 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	7bfa      	ldrb	r2, [r7, #15]
 800cdea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cdee:	7bfb      	ldrb	r3, [r7, #15]
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f002 f9c2 	bl	800f17c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f000 fa5a 	bl	800d2b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cdfe:	7bfb      	ldrb	r3, [r7, #15]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d004      	beq.n	800ce0e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2202      	movs	r2, #2
 800ce08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce0c:	e008      	b.n	800ce20 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2201      	movs	r2, #1
 800ce12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce16:	e003      	b.n	800ce20 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ce18:	6839      	ldr	r1, [r7, #0]
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 f97e 	bl	800d11c <USBD_CtlError>
  }
}
 800ce20:	bf00      	nop
 800ce22:	3710      	adds	r7, #16
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce32:	2300      	movs	r3, #0
 800ce34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	885b      	ldrh	r3, [r3, #2]
 800ce3a:	b2da      	uxtb	r2, r3
 800ce3c:	4b4b      	ldr	r3, [pc, #300]	; (800cf6c <USBD_SetConfig+0x144>)
 800ce3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ce40:	4b4a      	ldr	r3, [pc, #296]	; (800cf6c <USBD_SetConfig+0x144>)
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d905      	bls.n	800ce54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ce48:	6839      	ldr	r1, [r7, #0]
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 f966 	bl	800d11c <USBD_CtlError>
    return USBD_FAIL;
 800ce50:	2303      	movs	r3, #3
 800ce52:	e087      	b.n	800cf64 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce5a:	2b02      	cmp	r3, #2
 800ce5c:	d002      	beq.n	800ce64 <USBD_SetConfig+0x3c>
 800ce5e:	2b03      	cmp	r3, #3
 800ce60:	d025      	beq.n	800ceae <USBD_SetConfig+0x86>
 800ce62:	e071      	b.n	800cf48 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800ce64:	4b41      	ldr	r3, [pc, #260]	; (800cf6c <USBD_SetConfig+0x144>)
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d01c      	beq.n	800cea6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800ce6c:	4b3f      	ldr	r3, [pc, #252]	; (800cf6c <USBD_SetConfig+0x144>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	461a      	mov	r2, r3
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ce76:	4b3d      	ldr	r3, [pc, #244]	; (800cf6c <USBD_SetConfig+0x144>)
 800ce78:	781b      	ldrb	r3, [r3, #0]
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f7ff f9a7 	bl	800c1d0 <USBD_SetClassConfig>
 800ce82:	4603      	mov	r3, r0
 800ce84:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800ce86:	7bfb      	ldrb	r3, [r7, #15]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d004      	beq.n	800ce96 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800ce8c:	6839      	ldr	r1, [r7, #0]
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f000 f944 	bl	800d11c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ce94:	e065      	b.n	800cf62 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 fa0b 	bl	800d2b2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2203      	movs	r2, #3
 800cea0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800cea4:	e05d      	b.n	800cf62 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 fa03 	bl	800d2b2 <USBD_CtlSendStatus>
    break;
 800ceac:	e059      	b.n	800cf62 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800ceae:	4b2f      	ldr	r3, [pc, #188]	; (800cf6c <USBD_SetConfig+0x144>)
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d112      	bne.n	800cedc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2202      	movs	r2, #2
 800ceba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800cebe:	4b2b      	ldr	r3, [pc, #172]	; (800cf6c <USBD_SetConfig+0x144>)
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	461a      	mov	r2, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cec8:	4b28      	ldr	r3, [pc, #160]	; (800cf6c <USBD_SetConfig+0x144>)
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	4619      	mov	r1, r3
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f7ff f99a 	bl	800c208 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 f9ec 	bl	800d2b2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ceda:	e042      	b.n	800cf62 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800cedc:	4b23      	ldr	r3, [pc, #140]	; (800cf6c <USBD_SetConfig+0x144>)
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	461a      	mov	r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d02a      	beq.n	800cf40 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	4619      	mov	r1, r3
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f7ff f988 	bl	800c208 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800cef8:	4b1c      	ldr	r3, [pc, #112]	; (800cf6c <USBD_SetConfig+0x144>)
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	461a      	mov	r2, r3
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf02:	4b1a      	ldr	r3, [pc, #104]	; (800cf6c <USBD_SetConfig+0x144>)
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	4619      	mov	r1, r3
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f7ff f961 	bl	800c1d0 <USBD_SetClassConfig>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800cf12:	7bfb      	ldrb	r3, [r7, #15]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d00f      	beq.n	800cf38 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800cf18:	6839      	ldr	r1, [r7, #0]
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 f8fe 	bl	800d11c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	4619      	mov	r1, r3
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f7ff f96d 	bl	800c208 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2202      	movs	r2, #2
 800cf32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800cf36:	e014      	b.n	800cf62 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 f9ba 	bl	800d2b2 <USBD_CtlSendStatus>
    break;
 800cf3e:	e010      	b.n	800cf62 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f000 f9b6 	bl	800d2b2 <USBD_CtlSendStatus>
    break;
 800cf46:	e00c      	b.n	800cf62 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800cf48:	6839      	ldr	r1, [r7, #0]
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 f8e6 	bl	800d11c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cf50:	4b06      	ldr	r3, [pc, #24]	; (800cf6c <USBD_SetConfig+0x144>)
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	4619      	mov	r1, r3
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f7ff f956 	bl	800c208 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800cf5c:	2303      	movs	r3, #3
 800cf5e:	73fb      	strb	r3, [r7, #15]
    break;
 800cf60:	bf00      	nop
  }

  return ret;
 800cf62:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3710      	adds	r7, #16
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	20000c90 	.word	0x20000c90

0800cf70 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	88db      	ldrh	r3, [r3, #6]
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d004      	beq.n	800cf8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cf82:	6839      	ldr	r1, [r7, #0]
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 f8c9 	bl	800d11c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800cf8a:	e021      	b.n	800cfd0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf92:	2b01      	cmp	r3, #1
 800cf94:	db17      	blt.n	800cfc6 <USBD_GetConfig+0x56>
 800cf96:	2b02      	cmp	r3, #2
 800cf98:	dd02      	ble.n	800cfa0 <USBD_GetConfig+0x30>
 800cf9a:	2b03      	cmp	r3, #3
 800cf9c:	d00b      	beq.n	800cfb6 <USBD_GetConfig+0x46>
 800cf9e:	e012      	b.n	800cfc6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	3308      	adds	r3, #8
 800cfaa:	2201      	movs	r2, #1
 800cfac:	4619      	mov	r1, r3
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f000 f925 	bl	800d1fe <USBD_CtlSendData>
      break;
 800cfb4:	e00c      	b.n	800cfd0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	3304      	adds	r3, #4
 800cfba:	2201      	movs	r2, #1
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 f91d 	bl	800d1fe <USBD_CtlSendData>
      break;
 800cfc4:	e004      	b.n	800cfd0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800cfc6:	6839      	ldr	r1, [r7, #0]
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 f8a7 	bl	800d11c <USBD_CtlError>
      break;
 800cfce:	bf00      	nop
}
 800cfd0:	bf00      	nop
 800cfd2:	3708      	adds	r7, #8
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfe8:	3b01      	subs	r3, #1
 800cfea:	2b02      	cmp	r3, #2
 800cfec:	d81e      	bhi.n	800d02c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	88db      	ldrh	r3, [r3, #6]
 800cff2:	2b02      	cmp	r3, #2
 800cff4:	d004      	beq.n	800d000 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800cff6:	6839      	ldr	r1, [r7, #0]
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 f88f 	bl	800d11c <USBD_CtlError>
      break;
 800cffe:	e01a      	b.n	800d036 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d005      	beq.n	800d01c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	68db      	ldr	r3, [r3, #12]
 800d014:	f043 0202 	orr.w	r2, r3, #2
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	330c      	adds	r3, #12
 800d020:	2202      	movs	r2, #2
 800d022:	4619      	mov	r1, r3
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f000 f8ea 	bl	800d1fe <USBD_CtlSendData>
    break;
 800d02a:	e004      	b.n	800d036 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800d02c:	6839      	ldr	r1, [r7, #0]
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f000 f874 	bl	800d11c <USBD_CtlError>
    break;
 800d034:	bf00      	nop
  }
}
 800d036:	bf00      	nop
 800d038:	3708      	adds	r7, #8
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b082      	sub	sp, #8
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
 800d046:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	885b      	ldrh	r3, [r3, #2]
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	d106      	bne.n	800d05e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2201      	movs	r2, #1
 800d054:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f000 f92a 	bl	800d2b2 <USBD_CtlSendStatus>
  }
}
 800d05e:	bf00      	nop
 800d060:	3708      	adds	r7, #8
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}

0800d066 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d066:	b580      	push	{r7, lr}
 800d068:	b082      	sub	sp, #8
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
 800d06e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d076:	3b01      	subs	r3, #1
 800d078:	2b02      	cmp	r3, #2
 800d07a:	d80b      	bhi.n	800d094 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	885b      	ldrh	r3, [r3, #2]
 800d080:	2b01      	cmp	r3, #1
 800d082:	d10c      	bne.n	800d09e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 f910 	bl	800d2b2 <USBD_CtlSendStatus>
      }
      break;
 800d092:	e004      	b.n	800d09e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d094:	6839      	ldr	r1, [r7, #0]
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f000 f840 	bl	800d11c <USBD_CtlError>
      break;
 800d09c:	e000      	b.n	800d0a0 <USBD_ClrFeature+0x3a>
      break;
 800d09e:	bf00      	nop
  }
}
 800d0a0:	bf00      	nop
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	781a      	ldrb	r2, [r3, #0]
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	781a      	ldrb	r2, [r3, #0]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d0d2:	68f8      	ldr	r0, [r7, #12]
 800d0d4:	f7ff fad3 	bl	800c67e <SWAPBYTE>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	461a      	mov	r2, r3
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	3301      	adds	r3, #1
 800d0ea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d0ec:	68f8      	ldr	r0, [r7, #12]
 800d0ee:	f7ff fac6 	bl	800c67e <SWAPBYTE>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	3301      	adds	r3, #1
 800d104:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d106:	68f8      	ldr	r0, [r7, #12]
 800d108:	f7ff fab9 	bl	800c67e <SWAPBYTE>
 800d10c:	4603      	mov	r3, r0
 800d10e:	461a      	mov	r2, r3
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	80da      	strh	r2, [r3, #6]
}
 800d114:	bf00      	nop
 800d116:	3710      	adds	r7, #16
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d126:	2180      	movs	r1, #128	; 0x80
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f001 ffbd 	bl	800f0a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d12e:	2100      	movs	r1, #0
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f001 ffb9 	bl	800f0a8 <USBD_LL_StallEP>
}
 800d136:	bf00      	nop
 800d138:	3708      	adds	r7, #8
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}

0800d13e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d13e:	b580      	push	{r7, lr}
 800d140:	b086      	sub	sp, #24
 800d142:	af00      	add	r7, sp, #0
 800d144:	60f8      	str	r0, [r7, #12]
 800d146:	60b9      	str	r1, [r7, #8]
 800d148:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d14a:	2300      	movs	r3, #0
 800d14c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d036      	beq.n	800d1c2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d158:	6938      	ldr	r0, [r7, #16]
 800d15a:	f000 f836 	bl	800d1ca <USBD_GetLen>
 800d15e:	4603      	mov	r3, r0
 800d160:	3301      	adds	r3, #1
 800d162:	b29b      	uxth	r3, r3
 800d164:	005b      	lsls	r3, r3, #1
 800d166:	b29a      	uxth	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d16c:	7dfb      	ldrb	r3, [r7, #23]
 800d16e:	68ba      	ldr	r2, [r7, #8]
 800d170:	4413      	add	r3, r2
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	7812      	ldrb	r2, [r2, #0]
 800d176:	701a      	strb	r2, [r3, #0]
  idx++;
 800d178:	7dfb      	ldrb	r3, [r7, #23]
 800d17a:	3301      	adds	r3, #1
 800d17c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d17e:	7dfb      	ldrb	r3, [r7, #23]
 800d180:	68ba      	ldr	r2, [r7, #8]
 800d182:	4413      	add	r3, r2
 800d184:	2203      	movs	r2, #3
 800d186:	701a      	strb	r2, [r3, #0]
  idx++;
 800d188:	7dfb      	ldrb	r3, [r7, #23]
 800d18a:	3301      	adds	r3, #1
 800d18c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d18e:	e013      	b.n	800d1b8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d190:	7dfb      	ldrb	r3, [r7, #23]
 800d192:	68ba      	ldr	r2, [r7, #8]
 800d194:	4413      	add	r3, r2
 800d196:	693a      	ldr	r2, [r7, #16]
 800d198:	7812      	ldrb	r2, [r2, #0]
 800d19a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	3301      	adds	r3, #1
 800d1a0:	613b      	str	r3, [r7, #16]
    idx++;
 800d1a2:	7dfb      	ldrb	r3, [r7, #23]
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d1a8:	7dfb      	ldrb	r3, [r7, #23]
 800d1aa:	68ba      	ldr	r2, [r7, #8]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	701a      	strb	r2, [r3, #0]
    idx++;
 800d1b2:	7dfb      	ldrb	r3, [r7, #23]
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d1e7      	bne.n	800d190 <USBD_GetString+0x52>
 800d1c0:	e000      	b.n	800d1c4 <USBD_GetString+0x86>
    return;
 800d1c2:	bf00      	nop
  }
}
 800d1c4:	3718      	adds	r7, #24
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}

0800d1ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d1ca:	b480      	push	{r7}
 800d1cc:	b085      	sub	sp, #20
 800d1ce:	af00      	add	r7, sp, #0
 800d1d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d1da:	e005      	b.n	800d1e8 <USBD_GetLen+0x1e>
  {
    len++;
 800d1dc:	7bfb      	ldrb	r3, [r7, #15]
 800d1de:	3301      	adds	r3, #1
 800d1e0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d1f5      	bne.n	800d1dc <USBD_GetLen+0x12>
  }

  return len;
 800d1f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3714      	adds	r7, #20
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b084      	sub	sp, #16
 800d202:	af00      	add	r7, sp, #0
 800d204:	60f8      	str	r0, [r7, #12]
 800d206:	60b9      	str	r1, [r7, #8]
 800d208:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2202      	movs	r2, #2
 800d20e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	687a      	ldr	r2, [r7, #4]
 800d21c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	68ba      	ldr	r2, [r7, #8]
 800d222:	2100      	movs	r1, #0
 800d224:	68f8      	ldr	r0, [r7, #12]
 800d226:	f001 ffc8 	bl	800f1ba <USBD_LL_Transmit>

  return USBD_OK;
 800d22a:	2300      	movs	r3, #0
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3710      	adds	r7, #16
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b084      	sub	sp, #16
 800d238:	af00      	add	r7, sp, #0
 800d23a:	60f8      	str	r0, [r7, #12]
 800d23c:	60b9      	str	r1, [r7, #8]
 800d23e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	68ba      	ldr	r2, [r7, #8]
 800d244:	2100      	movs	r1, #0
 800d246:	68f8      	ldr	r0, [r7, #12]
 800d248:	f001 ffb7 	bl	800f1ba <USBD_LL_Transmit>

  return USBD_OK;
 800d24c:	2300      	movs	r3, #0
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3710      	adds	r7, #16
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d256:	b580      	push	{r7, lr}
 800d258:	b084      	sub	sp, #16
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	60f8      	str	r0, [r7, #12]
 800d25e:	60b9      	str	r1, [r7, #8]
 800d260:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2203      	movs	r2, #3
 800d266:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	68ba      	ldr	r2, [r7, #8]
 800d27e:	2100      	movs	r1, #0
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f001 ffbb 	bl	800f1fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d286:	2300      	movs	r3, #0
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3710      	adds	r7, #16
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	60f8      	str	r0, [r7, #12]
 800d298:	60b9      	str	r1, [r7, #8]
 800d29a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	68ba      	ldr	r2, [r7, #8]
 800d2a0:	2100      	movs	r1, #0
 800d2a2:	68f8      	ldr	r0, [r7, #12]
 800d2a4:	f001 ffaa 	bl	800f1fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d2a8:	2300      	movs	r3, #0
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b082      	sub	sp, #8
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2204      	movs	r2, #4
 800d2be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	2100      	movs	r1, #0
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f001 ff76 	bl	800f1ba <USBD_LL_Transmit>

  return USBD_OK;
 800d2ce:	2300      	movs	r3, #0
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3708      	adds	r7, #8
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2205      	movs	r2, #5
 800d2e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	2100      	movs	r1, #0
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f001 ff84 	bl	800f1fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d2f4:	2300      	movs	r3, #0
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3708      	adds	r7, #8
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}

0800d2fe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d2fe:	b480      	push	{r7}
 800d300:	b085      	sub	sp, #20
 800d302:	af00      	add	r7, sp, #0
 800d304:	4603      	mov	r3, r0
 800d306:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d308:	2300      	movs	r3, #0
 800d30a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d30c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d310:	2b84      	cmp	r3, #132	; 0x84
 800d312:	d005      	beq.n	800d320 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d314:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	4413      	add	r3, r2
 800d31c:	3303      	adds	r3, #3
 800d31e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d320:	68fb      	ldr	r3, [r7, #12]
}
 800d322:	4618      	mov	r0, r3
 800d324:	3714      	adds	r7, #20
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr

0800d32e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d32e:	b580      	push	{r7, lr}
 800d330:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d332:	f000 fb59 	bl	800d9e8 <vTaskStartScheduler>
  
  return osOK;
 800d336:	2300      	movs	r3, #0
}
 800d338:	4618      	mov	r0, r3
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d33e:	b089      	sub	sp, #36	; 0x24
 800d340:	af04      	add	r7, sp, #16
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	695b      	ldr	r3, [r3, #20]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d020      	beq.n	800d390 <osThreadCreate+0x54>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	699b      	ldr	r3, [r3, #24]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d01c      	beq.n	800d390 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	685c      	ldr	r4, [r3, #4]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681d      	ldr	r5, [r3, #0]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	691e      	ldr	r6, [r3, #16]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d368:	4618      	mov	r0, r3
 800d36a:	f7ff ffc8 	bl	800d2fe <makeFreeRtosPriority>
 800d36e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	695b      	ldr	r3, [r3, #20]
 800d374:	687a      	ldr	r2, [r7, #4]
 800d376:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d378:	9202      	str	r2, [sp, #8]
 800d37a:	9301      	str	r3, [sp, #4]
 800d37c:	9100      	str	r1, [sp, #0]
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	4632      	mov	r2, r6
 800d382:	4629      	mov	r1, r5
 800d384:	4620      	mov	r0, r4
 800d386:	f000 f8ed 	bl	800d564 <xTaskCreateStatic>
 800d38a:	4603      	mov	r3, r0
 800d38c:	60fb      	str	r3, [r7, #12]
 800d38e:	e01c      	b.n	800d3ca <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	685c      	ldr	r4, [r3, #4]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d39c:	b29e      	uxth	r6, r3
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7ff ffaa 	bl	800d2fe <makeFreeRtosPriority>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	f107 030c 	add.w	r3, r7, #12
 800d3b0:	9301      	str	r3, [sp, #4]
 800d3b2:	9200      	str	r2, [sp, #0]
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	4632      	mov	r2, r6
 800d3b8:	4629      	mov	r1, r5
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	f000 f92c 	bl	800d618 <xTaskCreate>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d001      	beq.n	800d3ca <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	e000      	b.n	800d3cc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3714      	adds	r7, #20
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d3d4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d001      	beq.n	800d3ea <osDelay+0x16>
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	e000      	b.n	800d3ec <osDelay+0x18>
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f000 fac7 	bl	800d980 <vTaskDelay>
  
  return osOK;
 800d3f2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3710      	adds	r7, #16
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b083      	sub	sp, #12
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f103 0208 	add.w	r2, r3, #8
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d414:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f103 0208 	add.w	r2, r3, #8
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f103 0208 	add.w	r2, r3, #8
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2200      	movs	r2, #0
 800d42e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d430:	bf00      	nop
 800d432:	370c      	adds	r7, #12
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d43c:	b480      	push	{r7}
 800d43e:	b083      	sub	sp, #12
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2200      	movs	r2, #0
 800d448:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d44a:	bf00      	nop
 800d44c:	370c      	adds	r7, #12
 800d44e:	46bd      	mov	sp, r7
 800d450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d454:	4770      	bx	lr

0800d456 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d456:	b480      	push	{r7}
 800d458:	b085      	sub	sp, #20
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	6078      	str	r0, [r7, #4]
 800d45e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	68fa      	ldr	r2, [r7, #12]
 800d46a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	689a      	ldr	r2, [r3, #8]
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	689b      	ldr	r3, [r3, #8]
 800d478:	683a      	ldr	r2, [r7, #0]
 800d47a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	683a      	ldr	r2, [r7, #0]
 800d480:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	1c5a      	adds	r2, r3, #1
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	601a      	str	r2, [r3, #0]
}
 800d492:	bf00      	nop
 800d494:	3714      	adds	r7, #20
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr

0800d49e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d49e:	b480      	push	{r7}
 800d4a0:	b085      	sub	sp, #20
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
 800d4a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4b4:	d103      	bne.n	800d4be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	691b      	ldr	r3, [r3, #16]
 800d4ba:	60fb      	str	r3, [r7, #12]
 800d4bc:	e00c      	b.n	800d4d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	3308      	adds	r3, #8
 800d4c2:	60fb      	str	r3, [r7, #12]
 800d4c4:	e002      	b.n	800d4cc <vListInsert+0x2e>
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	60fb      	str	r3, [r7, #12]
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	68ba      	ldr	r2, [r7, #8]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d2f6      	bcs.n	800d4c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	685a      	ldr	r2, [r3, #4]
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	683a      	ldr	r2, [r7, #0]
 800d4e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	68fa      	ldr	r2, [r7, #12]
 800d4ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	683a      	ldr	r2, [r7, #0]
 800d4f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	1c5a      	adds	r2, r3, #1
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	601a      	str	r2, [r3, #0]
}
 800d504:	bf00      	nop
 800d506:	3714      	adds	r7, #20
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr

0800d510 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d510:	b480      	push	{r7}
 800d512:	b085      	sub	sp, #20
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	691b      	ldr	r3, [r3, #16]
 800d51c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	6892      	ldr	r2, [r2, #8]
 800d526:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	689b      	ldr	r3, [r3, #8]
 800d52c:	687a      	ldr	r2, [r7, #4]
 800d52e:	6852      	ldr	r2, [r2, #4]
 800d530:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	687a      	ldr	r2, [r7, #4]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d103      	bne.n	800d544 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	689a      	ldr	r2, [r3, #8]
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2200      	movs	r2, #0
 800d548:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	1e5a      	subs	r2, r3, #1
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3714      	adds	r7, #20
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr

0800d564 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d564:	b580      	push	{r7, lr}
 800d566:	b08e      	sub	sp, #56	; 0x38
 800d568:	af04      	add	r7, sp, #16
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	607a      	str	r2, [r7, #4]
 800d570:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d574:	2b00      	cmp	r3, #0
 800d576:	d109      	bne.n	800d58c <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57c:	f383 8811 	msr	BASEPRI, r3
 800d580:	f3bf 8f6f 	isb	sy
 800d584:	f3bf 8f4f 	dsb	sy
 800d588:	623b      	str	r3, [r7, #32]
 800d58a:	e7fe      	b.n	800d58a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800d58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d109      	bne.n	800d5a6 <xTaskCreateStatic+0x42>
 800d592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d596:	f383 8811 	msr	BASEPRI, r3
 800d59a:	f3bf 8f6f 	isb	sy
 800d59e:	f3bf 8f4f 	dsb	sy
 800d5a2:	61fb      	str	r3, [r7, #28]
 800d5a4:	e7fe      	b.n	800d5a4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d5a6:	2354      	movs	r3, #84	; 0x54
 800d5a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	2b54      	cmp	r3, #84	; 0x54
 800d5ae:	d009      	beq.n	800d5c4 <xTaskCreateStatic+0x60>
 800d5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b4:	f383 8811 	msr	BASEPRI, r3
 800d5b8:	f3bf 8f6f 	isb	sy
 800d5bc:	f3bf 8f4f 	dsb	sy
 800d5c0:	61bb      	str	r3, [r7, #24]
 800d5c2:	e7fe      	b.n	800d5c2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d5c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d01e      	beq.n	800d60a <xTaskCreateStatic+0xa6>
 800d5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d01b      	beq.n	800d60a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5da:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5de:	2202      	movs	r2, #2
 800d5e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	9303      	str	r3, [sp, #12]
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ea:	9302      	str	r3, [sp, #8]
 800d5ec:	f107 0314 	add.w	r3, r7, #20
 800d5f0:	9301      	str	r3, [sp, #4]
 800d5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f4:	9300      	str	r3, [sp, #0]
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	68b9      	ldr	r1, [r7, #8]
 800d5fc:	68f8      	ldr	r0, [r7, #12]
 800d5fe:	f000 f850 	bl	800d6a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d602:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d604:	f000 f8d8 	bl	800d7b8 <prvAddNewTaskToReadyList>
 800d608:	e001      	b.n	800d60e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800d60a:	2300      	movs	r3, #0
 800d60c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d60e:	697b      	ldr	r3, [r7, #20]
	}
 800d610:	4618      	mov	r0, r3
 800d612:	3728      	adds	r7, #40	; 0x28
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b08c      	sub	sp, #48	; 0x30
 800d61c:	af04      	add	r7, sp, #16
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	603b      	str	r3, [r7, #0]
 800d624:	4613      	mov	r3, r2
 800d626:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d628:	88fb      	ldrh	r3, [r7, #6]
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	4618      	mov	r0, r3
 800d62e:	f000 ff41 	bl	800e4b4 <pvPortMalloc>
 800d632:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d00e      	beq.n	800d658 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d63a:	2054      	movs	r0, #84	; 0x54
 800d63c:	f000 ff3a 	bl	800e4b4 <pvPortMalloc>
 800d640:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d003      	beq.n	800d650 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d648:	69fb      	ldr	r3, [r7, #28]
 800d64a:	697a      	ldr	r2, [r7, #20]
 800d64c:	631a      	str	r2, [r3, #48]	; 0x30
 800d64e:	e005      	b.n	800d65c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d650:	6978      	ldr	r0, [r7, #20]
 800d652:	f000 fff1 	bl	800e638 <vPortFree>
 800d656:	e001      	b.n	800d65c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d658:	2300      	movs	r3, #0
 800d65a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d65c:	69fb      	ldr	r3, [r7, #28]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d017      	beq.n	800d692 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	2200      	movs	r2, #0
 800d666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d66a:	88fa      	ldrh	r2, [r7, #6]
 800d66c:	2300      	movs	r3, #0
 800d66e:	9303      	str	r3, [sp, #12]
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	9302      	str	r3, [sp, #8]
 800d674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d676:	9301      	str	r3, [sp, #4]
 800d678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67a:	9300      	str	r3, [sp, #0]
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	68b9      	ldr	r1, [r7, #8]
 800d680:	68f8      	ldr	r0, [r7, #12]
 800d682:	f000 f80e 	bl	800d6a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d686:	69f8      	ldr	r0, [r7, #28]
 800d688:	f000 f896 	bl	800d7b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d68c:	2301      	movs	r3, #1
 800d68e:	61bb      	str	r3, [r7, #24]
 800d690:	e002      	b.n	800d698 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d696:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d698:	69bb      	ldr	r3, [r7, #24]
	}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3720      	adds	r7, #32
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d6a2:	b580      	push	{r7, lr}
 800d6a4:	b088      	sub	sp, #32
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	60f8      	str	r0, [r7, #12]
 800d6aa:	60b9      	str	r1, [r7, #8]
 800d6ac:	607a      	str	r2, [r7, #4]
 800d6ae:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d6ba:	3b01      	subs	r3, #1
 800d6bc:	009b      	lsls	r3, r3, #2
 800d6be:	4413      	add	r3, r2
 800d6c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d6c2:	69bb      	ldr	r3, [r7, #24]
 800d6c4:	f023 0307 	bic.w	r3, r3, #7
 800d6c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d6ca:	69bb      	ldr	r3, [r7, #24]
 800d6cc:	f003 0307 	and.w	r3, r3, #7
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d009      	beq.n	800d6e8 <prvInitialiseNewTask+0x46>
 800d6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d8:	f383 8811 	msr	BASEPRI, r3
 800d6dc:	f3bf 8f6f 	isb	sy
 800d6e0:	f3bf 8f4f 	dsb	sy
 800d6e4:	617b      	str	r3, [r7, #20]
 800d6e6:	e7fe      	b.n	800d6e6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d01f      	beq.n	800d72e <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	61fb      	str	r3, [r7, #28]
 800d6f2:	e012      	b.n	800d71a <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d6f4:	68ba      	ldr	r2, [r7, #8]
 800d6f6:	69fb      	ldr	r3, [r7, #28]
 800d6f8:	4413      	add	r3, r2
 800d6fa:	7819      	ldrb	r1, [r3, #0]
 800d6fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	4413      	add	r3, r2
 800d702:	3334      	adds	r3, #52	; 0x34
 800d704:	460a      	mov	r2, r1
 800d706:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d708:	68ba      	ldr	r2, [r7, #8]
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	4413      	add	r3, r2
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d006      	beq.n	800d722 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d714:	69fb      	ldr	r3, [r7, #28]
 800d716:	3301      	adds	r3, #1
 800d718:	61fb      	str	r3, [r7, #28]
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	2b0f      	cmp	r3, #15
 800d71e:	d9e9      	bls.n	800d6f4 <prvInitialiseNewTask+0x52>
 800d720:	e000      	b.n	800d724 <prvInitialiseNewTask+0x82>
			{
				break;
 800d722:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d726:	2200      	movs	r2, #0
 800d728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d72c:	e003      	b.n	800d736 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d730:	2200      	movs	r2, #0
 800d732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d738:	2b06      	cmp	r3, #6
 800d73a:	d901      	bls.n	800d740 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d73c:	2306      	movs	r3, #6
 800d73e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d744:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d74a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d74e:	2200      	movs	r2, #0
 800d750:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d754:	3304      	adds	r3, #4
 800d756:	4618      	mov	r0, r3
 800d758:	f7ff fe70 	bl	800d43c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75e:	3318      	adds	r3, #24
 800d760:	4618      	mov	r0, r3
 800d762:	f7ff fe6b 	bl	800d43c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d76a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76e:	f1c3 0207 	rsb	r2, r3, #7
 800d772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d774:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d77a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77e:	2200      	movs	r2, #0
 800d780:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d784:	2200      	movs	r2, #0
 800d786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800d78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78c:	2200      	movs	r2, #0
 800d78e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d792:	683a      	ldr	r2, [r7, #0]
 800d794:	68f9      	ldr	r1, [r7, #12]
 800d796:	69b8      	ldr	r0, [r7, #24]
 800d798:	f000 fc8c 	bl	800e0b4 <pxPortInitialiseStack>
 800d79c:	4602      	mov	r2, r0
 800d79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d002      	beq.n	800d7ae <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7ae:	bf00      	nop
 800d7b0:	3720      	adds	r7, #32
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
	...

0800d7b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d7c0:	f000 fd9c 	bl	800e2fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d7c4:	4b2a      	ldr	r3, [pc, #168]	; (800d870 <prvAddNewTaskToReadyList+0xb8>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	4a29      	ldr	r2, [pc, #164]	; (800d870 <prvAddNewTaskToReadyList+0xb8>)
 800d7cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d7ce:	4b29      	ldr	r3, [pc, #164]	; (800d874 <prvAddNewTaskToReadyList+0xbc>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d109      	bne.n	800d7ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d7d6:	4a27      	ldr	r2, [pc, #156]	; (800d874 <prvAddNewTaskToReadyList+0xbc>)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d7dc:	4b24      	ldr	r3, [pc, #144]	; (800d870 <prvAddNewTaskToReadyList+0xb8>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d110      	bne.n	800d806 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d7e4:	f000 fb42 	bl	800de6c <prvInitialiseTaskLists>
 800d7e8:	e00d      	b.n	800d806 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d7ea:	4b23      	ldr	r3, [pc, #140]	; (800d878 <prvAddNewTaskToReadyList+0xc0>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d109      	bne.n	800d806 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d7f2:	4b20      	ldr	r3, [pc, #128]	; (800d874 <prvAddNewTaskToReadyList+0xbc>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d802      	bhi.n	800d806 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d800:	4a1c      	ldr	r2, [pc, #112]	; (800d874 <prvAddNewTaskToReadyList+0xbc>)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d806:	4b1d      	ldr	r3, [pc, #116]	; (800d87c <prvAddNewTaskToReadyList+0xc4>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	3301      	adds	r3, #1
 800d80c:	4a1b      	ldr	r2, [pc, #108]	; (800d87c <prvAddNewTaskToReadyList+0xc4>)
 800d80e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d814:	2201      	movs	r2, #1
 800d816:	409a      	lsls	r2, r3
 800d818:	4b19      	ldr	r3, [pc, #100]	; (800d880 <prvAddNewTaskToReadyList+0xc8>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	4313      	orrs	r3, r2
 800d81e:	4a18      	ldr	r2, [pc, #96]	; (800d880 <prvAddNewTaskToReadyList+0xc8>)
 800d820:	6013      	str	r3, [r2, #0]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d826:	4613      	mov	r3, r2
 800d828:	009b      	lsls	r3, r3, #2
 800d82a:	4413      	add	r3, r2
 800d82c:	009b      	lsls	r3, r3, #2
 800d82e:	4a15      	ldr	r2, [pc, #84]	; (800d884 <prvAddNewTaskToReadyList+0xcc>)
 800d830:	441a      	add	r2, r3
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	3304      	adds	r3, #4
 800d836:	4619      	mov	r1, r3
 800d838:	4610      	mov	r0, r2
 800d83a:	f7ff fe0c 	bl	800d456 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d83e:	f000 fd8b 	bl	800e358 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d842:	4b0d      	ldr	r3, [pc, #52]	; (800d878 <prvAddNewTaskToReadyList+0xc0>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00e      	beq.n	800d868 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d84a:	4b0a      	ldr	r3, [pc, #40]	; (800d874 <prvAddNewTaskToReadyList+0xbc>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d854:	429a      	cmp	r2, r3
 800d856:	d207      	bcs.n	800d868 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d858:	4b0b      	ldr	r3, [pc, #44]	; (800d888 <prvAddNewTaskToReadyList+0xd0>)
 800d85a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d85e:	601a      	str	r2, [r3, #0]
 800d860:	f3bf 8f4f 	dsb	sy
 800d864:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d868:	bf00      	nop
 800d86a:	3708      	adds	r7, #8
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	20000d94 	.word	0x20000d94
 800d874:	20000c94 	.word	0x20000c94
 800d878:	20000da0 	.word	0x20000da0
 800d87c:	20000db0 	.word	0x20000db0
 800d880:	20000d9c 	.word	0x20000d9c
 800d884:	20000c98 	.word	0x20000c98
 800d888:	e000ed04 	.word	0xe000ed04

0800d88c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b08a      	sub	sp, #40	; 0x28
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d896:	2300      	movs	r3, #0
 800d898:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d109      	bne.n	800d8b4 <vTaskDelayUntil+0x28>
 800d8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a4:	f383 8811 	msr	BASEPRI, r3
 800d8a8:	f3bf 8f6f 	isb	sy
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	617b      	str	r3, [r7, #20]
 800d8b2:	e7fe      	b.n	800d8b2 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d109      	bne.n	800d8ce <vTaskDelayUntil+0x42>
 800d8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8be:	f383 8811 	msr	BASEPRI, r3
 800d8c2:	f3bf 8f6f 	isb	sy
 800d8c6:	f3bf 8f4f 	dsb	sy
 800d8ca:	613b      	str	r3, [r7, #16]
 800d8cc:	e7fe      	b.n	800d8cc <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800d8ce:	4b29      	ldr	r3, [pc, #164]	; (800d974 <vTaskDelayUntil+0xe8>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d009      	beq.n	800d8ea <vTaskDelayUntil+0x5e>
 800d8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8da:	f383 8811 	msr	BASEPRI, r3
 800d8de:	f3bf 8f6f 	isb	sy
 800d8e2:	f3bf 8f4f 	dsb	sy
 800d8e6:	60fb      	str	r3, [r7, #12]
 800d8e8:	e7fe      	b.n	800d8e8 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800d8ea:	f000 f8db 	bl	800daa4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d8ee:	4b22      	ldr	r3, [pc, #136]	; (800d978 <vTaskDelayUntil+0xec>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	683a      	ldr	r2, [r7, #0]
 800d8fa:	4413      	add	r3, r2
 800d8fc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	6a3a      	ldr	r2, [r7, #32]
 800d904:	429a      	cmp	r2, r3
 800d906:	d20b      	bcs.n	800d920 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	69fa      	ldr	r2, [r7, #28]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d211      	bcs.n	800d936 <vTaskDelayUntil+0xaa>
 800d912:	69fa      	ldr	r2, [r7, #28]
 800d914:	6a3b      	ldr	r3, [r7, #32]
 800d916:	429a      	cmp	r2, r3
 800d918:	d90d      	bls.n	800d936 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800d91a:	2301      	movs	r3, #1
 800d91c:	627b      	str	r3, [r7, #36]	; 0x24
 800d91e:	e00a      	b.n	800d936 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	69fa      	ldr	r2, [r7, #28]
 800d926:	429a      	cmp	r2, r3
 800d928:	d303      	bcc.n	800d932 <vTaskDelayUntil+0xa6>
 800d92a:	69fa      	ldr	r2, [r7, #28]
 800d92c:	6a3b      	ldr	r3, [r7, #32]
 800d92e:	429a      	cmp	r2, r3
 800d930:	d901      	bls.n	800d936 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800d932:	2301      	movs	r3, #1
 800d934:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	69fa      	ldr	r2, [r7, #28]
 800d93a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d006      	beq.n	800d950 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d942:	69fa      	ldr	r2, [r7, #28]
 800d944:	6a3b      	ldr	r3, [r7, #32]
 800d946:	1ad3      	subs	r3, r2, r3
 800d948:	2100      	movs	r1, #0
 800d94a:	4618      	mov	r0, r3
 800d94c:	f000 fb48 	bl	800dfe0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d950:	f000 f8b6 	bl	800dac0 <xTaskResumeAll>
 800d954:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d956:	69bb      	ldr	r3, [r7, #24]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d107      	bne.n	800d96c <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800d95c:	4b07      	ldr	r3, [pc, #28]	; (800d97c <vTaskDelayUntil+0xf0>)
 800d95e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d962:	601a      	str	r2, [r3, #0]
 800d964:	f3bf 8f4f 	dsb	sy
 800d968:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d96c:	bf00      	nop
 800d96e:	3728      	adds	r7, #40	; 0x28
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}
 800d974:	20000dbc 	.word	0x20000dbc
 800d978:	20000d98 	.word	0x20000d98
 800d97c:	e000ed04 	.word	0xe000ed04

0800d980 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d988:	2300      	movs	r3, #0
 800d98a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d016      	beq.n	800d9c0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d992:	4b13      	ldr	r3, [pc, #76]	; (800d9e0 <vTaskDelay+0x60>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d009      	beq.n	800d9ae <vTaskDelay+0x2e>
 800d99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d99e:	f383 8811 	msr	BASEPRI, r3
 800d9a2:	f3bf 8f6f 	isb	sy
 800d9a6:	f3bf 8f4f 	dsb	sy
 800d9aa:	60bb      	str	r3, [r7, #8]
 800d9ac:	e7fe      	b.n	800d9ac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800d9ae:	f000 f879 	bl	800daa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f000 fb13 	bl	800dfe0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d9ba:	f000 f881 	bl	800dac0 <xTaskResumeAll>
 800d9be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d107      	bne.n	800d9d6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800d9c6:	4b07      	ldr	r3, [pc, #28]	; (800d9e4 <vTaskDelay+0x64>)
 800d9c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9cc:	601a      	str	r2, [r3, #0]
 800d9ce:	f3bf 8f4f 	dsb	sy
 800d9d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d9d6:	bf00      	nop
 800d9d8:	3710      	adds	r7, #16
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	20000dbc 	.word	0x20000dbc
 800d9e4:	e000ed04 	.word	0xe000ed04

0800d9e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b08a      	sub	sp, #40	; 0x28
 800d9ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d9f6:	463a      	mov	r2, r7
 800d9f8:	1d39      	adds	r1, r7, #4
 800d9fa:	f107 0308 	add.w	r3, r7, #8
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7f2 fd6e 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800da04:	6839      	ldr	r1, [r7, #0]
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	68ba      	ldr	r2, [r7, #8]
 800da0a:	9202      	str	r2, [sp, #8]
 800da0c:	9301      	str	r3, [sp, #4]
 800da0e:	2300      	movs	r3, #0
 800da10:	9300      	str	r3, [sp, #0]
 800da12:	2300      	movs	r3, #0
 800da14:	460a      	mov	r2, r1
 800da16:	491d      	ldr	r1, [pc, #116]	; (800da8c <vTaskStartScheduler+0xa4>)
 800da18:	481d      	ldr	r0, [pc, #116]	; (800da90 <vTaskStartScheduler+0xa8>)
 800da1a:	f7ff fda3 	bl	800d564 <xTaskCreateStatic>
 800da1e:	4602      	mov	r2, r0
 800da20:	4b1c      	ldr	r3, [pc, #112]	; (800da94 <vTaskStartScheduler+0xac>)
 800da22:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800da24:	4b1b      	ldr	r3, [pc, #108]	; (800da94 <vTaskStartScheduler+0xac>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d002      	beq.n	800da32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800da2c:	2301      	movs	r3, #1
 800da2e:	617b      	str	r3, [r7, #20]
 800da30:	e001      	b.n	800da36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800da32:	2300      	movs	r3, #0
 800da34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	2b01      	cmp	r3, #1
 800da3a:	d115      	bne.n	800da68 <vTaskStartScheduler+0x80>
 800da3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da40:	f383 8811 	msr	BASEPRI, r3
 800da44:	f3bf 8f6f 	isb	sy
 800da48:	f3bf 8f4f 	dsb	sy
 800da4c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800da4e:	4b12      	ldr	r3, [pc, #72]	; (800da98 <vTaskStartScheduler+0xb0>)
 800da50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800da56:	4b11      	ldr	r3, [pc, #68]	; (800da9c <vTaskStartScheduler+0xb4>)
 800da58:	2201      	movs	r2, #1
 800da5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800da5c:	4b10      	ldr	r3, [pc, #64]	; (800daa0 <vTaskStartScheduler+0xb8>)
 800da5e:	2200      	movs	r2, #0
 800da60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800da62:	f000 fbad 	bl	800e1c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800da66:	e00d      	b.n	800da84 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da6e:	d109      	bne.n	800da84 <vTaskStartScheduler+0x9c>
 800da70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da74:	f383 8811 	msr	BASEPRI, r3
 800da78:	f3bf 8f6f 	isb	sy
 800da7c:	f3bf 8f4f 	dsb	sy
 800da80:	60fb      	str	r3, [r7, #12]
 800da82:	e7fe      	b.n	800da82 <vTaskStartScheduler+0x9a>
}
 800da84:	bf00      	nop
 800da86:	3718      	adds	r7, #24
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	0800fa18 	.word	0x0800fa18
 800da90:	0800de3d 	.word	0x0800de3d
 800da94:	20000db8 	.word	0x20000db8
 800da98:	20000db4 	.word	0x20000db4
 800da9c:	20000da0 	.word	0x20000da0
 800daa0:	20000d98 	.word	0x20000d98

0800daa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800daa4:	b480      	push	{r7}
 800daa6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800daa8:	4b04      	ldr	r3, [pc, #16]	; (800dabc <vTaskSuspendAll+0x18>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	3301      	adds	r3, #1
 800daae:	4a03      	ldr	r2, [pc, #12]	; (800dabc <vTaskSuspendAll+0x18>)
 800dab0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800dab2:	bf00      	nop
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr
 800dabc:	20000dbc 	.word	0x20000dbc

0800dac0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dac6:	2300      	movs	r3, #0
 800dac8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800daca:	2300      	movs	r3, #0
 800dacc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dace:	4b41      	ldr	r3, [pc, #260]	; (800dbd4 <xTaskResumeAll+0x114>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d109      	bne.n	800daea <xTaskResumeAll+0x2a>
 800dad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dada:	f383 8811 	msr	BASEPRI, r3
 800dade:	f3bf 8f6f 	isb	sy
 800dae2:	f3bf 8f4f 	dsb	sy
 800dae6:	603b      	str	r3, [r7, #0]
 800dae8:	e7fe      	b.n	800dae8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800daea:	f000 fc07 	bl	800e2fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800daee:	4b39      	ldr	r3, [pc, #228]	; (800dbd4 <xTaskResumeAll+0x114>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	3b01      	subs	r3, #1
 800daf4:	4a37      	ldr	r2, [pc, #220]	; (800dbd4 <xTaskResumeAll+0x114>)
 800daf6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800daf8:	4b36      	ldr	r3, [pc, #216]	; (800dbd4 <xTaskResumeAll+0x114>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d161      	bne.n	800dbc4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800db00:	4b35      	ldr	r3, [pc, #212]	; (800dbd8 <xTaskResumeAll+0x118>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d05d      	beq.n	800dbc4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db08:	e02e      	b.n	800db68 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db0a:	4b34      	ldr	r3, [pc, #208]	; (800dbdc <xTaskResumeAll+0x11c>)
 800db0c:	68db      	ldr	r3, [r3, #12]
 800db0e:	68db      	ldr	r3, [r3, #12]
 800db10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	3318      	adds	r3, #24
 800db16:	4618      	mov	r0, r3
 800db18:	f7ff fcfa 	bl	800d510 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	3304      	adds	r3, #4
 800db20:	4618      	mov	r0, r3
 800db22:	f7ff fcf5 	bl	800d510 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db2a:	2201      	movs	r2, #1
 800db2c:	409a      	lsls	r2, r3
 800db2e:	4b2c      	ldr	r3, [pc, #176]	; (800dbe0 <xTaskResumeAll+0x120>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	4313      	orrs	r3, r2
 800db34:	4a2a      	ldr	r2, [pc, #168]	; (800dbe0 <xTaskResumeAll+0x120>)
 800db36:	6013      	str	r3, [r2, #0]
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db3c:	4613      	mov	r3, r2
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	4413      	add	r3, r2
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	4a27      	ldr	r2, [pc, #156]	; (800dbe4 <xTaskResumeAll+0x124>)
 800db46:	441a      	add	r2, r3
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	3304      	adds	r3, #4
 800db4c:	4619      	mov	r1, r3
 800db4e:	4610      	mov	r0, r2
 800db50:	f7ff fc81 	bl	800d456 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db58:	4b23      	ldr	r3, [pc, #140]	; (800dbe8 <xTaskResumeAll+0x128>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db5e:	429a      	cmp	r2, r3
 800db60:	d302      	bcc.n	800db68 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800db62:	4b22      	ldr	r3, [pc, #136]	; (800dbec <xTaskResumeAll+0x12c>)
 800db64:	2201      	movs	r2, #1
 800db66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db68:	4b1c      	ldr	r3, [pc, #112]	; (800dbdc <xTaskResumeAll+0x11c>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d1cc      	bne.n	800db0a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d001      	beq.n	800db7a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800db76:	f000 fa13 	bl	800dfa0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800db7a:	4b1d      	ldr	r3, [pc, #116]	; (800dbf0 <xTaskResumeAll+0x130>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d010      	beq.n	800dba8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800db86:	f000 f847 	bl	800dc18 <xTaskIncrementTick>
 800db8a:	4603      	mov	r3, r0
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d002      	beq.n	800db96 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800db90:	4b16      	ldr	r3, [pc, #88]	; (800dbec <xTaskResumeAll+0x12c>)
 800db92:	2201      	movs	r2, #1
 800db94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	3b01      	subs	r3, #1
 800db9a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d1f1      	bne.n	800db86 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800dba2:	4b13      	ldr	r3, [pc, #76]	; (800dbf0 <xTaskResumeAll+0x130>)
 800dba4:	2200      	movs	r2, #0
 800dba6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dba8:	4b10      	ldr	r3, [pc, #64]	; (800dbec <xTaskResumeAll+0x12c>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d009      	beq.n	800dbc4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dbb4:	4b0f      	ldr	r3, [pc, #60]	; (800dbf4 <xTaskResumeAll+0x134>)
 800dbb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbba:	601a      	str	r2, [r3, #0]
 800dbbc:	f3bf 8f4f 	dsb	sy
 800dbc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dbc4:	f000 fbc8 	bl	800e358 <vPortExitCritical>

	return xAlreadyYielded;
 800dbc8:	68bb      	ldr	r3, [r7, #8]
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3710      	adds	r7, #16
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}
 800dbd2:	bf00      	nop
 800dbd4:	20000dbc 	.word	0x20000dbc
 800dbd8:	20000d94 	.word	0x20000d94
 800dbdc:	20000d54 	.word	0x20000d54
 800dbe0:	20000d9c 	.word	0x20000d9c
 800dbe4:	20000c98 	.word	0x20000c98
 800dbe8:	20000c94 	.word	0x20000c94
 800dbec:	20000da8 	.word	0x20000da8
 800dbf0:	20000da4 	.word	0x20000da4
 800dbf4:	e000ed04 	.word	0xe000ed04

0800dbf8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b083      	sub	sp, #12
 800dbfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dbfe:	4b05      	ldr	r3, [pc, #20]	; (800dc14 <xTaskGetTickCount+0x1c>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dc04:	687b      	ldr	r3, [r7, #4]
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	370c      	adds	r7, #12
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr
 800dc12:	bf00      	nop
 800dc14:	20000d98 	.word	0x20000d98

0800dc18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b086      	sub	sp, #24
 800dc1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc22:	4b4e      	ldr	r3, [pc, #312]	; (800dd5c <xTaskIncrementTick+0x144>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	f040 8087 	bne.w	800dd3a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dc2c:	4b4c      	ldr	r3, [pc, #304]	; (800dd60 <xTaskIncrementTick+0x148>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	3301      	adds	r3, #1
 800dc32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dc34:	4a4a      	ldr	r2, [pc, #296]	; (800dd60 <xTaskIncrementTick+0x148>)
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d11f      	bne.n	800dc80 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800dc40:	4b48      	ldr	r3, [pc, #288]	; (800dd64 <xTaskIncrementTick+0x14c>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d009      	beq.n	800dc5e <xTaskIncrementTick+0x46>
 800dc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc4e:	f383 8811 	msr	BASEPRI, r3
 800dc52:	f3bf 8f6f 	isb	sy
 800dc56:	f3bf 8f4f 	dsb	sy
 800dc5a:	603b      	str	r3, [r7, #0]
 800dc5c:	e7fe      	b.n	800dc5c <xTaskIncrementTick+0x44>
 800dc5e:	4b41      	ldr	r3, [pc, #260]	; (800dd64 <xTaskIncrementTick+0x14c>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	60fb      	str	r3, [r7, #12]
 800dc64:	4b40      	ldr	r3, [pc, #256]	; (800dd68 <xTaskIncrementTick+0x150>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4a3e      	ldr	r2, [pc, #248]	; (800dd64 <xTaskIncrementTick+0x14c>)
 800dc6a:	6013      	str	r3, [r2, #0]
 800dc6c:	4a3e      	ldr	r2, [pc, #248]	; (800dd68 <xTaskIncrementTick+0x150>)
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	6013      	str	r3, [r2, #0]
 800dc72:	4b3e      	ldr	r3, [pc, #248]	; (800dd6c <xTaskIncrementTick+0x154>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	3301      	adds	r3, #1
 800dc78:	4a3c      	ldr	r2, [pc, #240]	; (800dd6c <xTaskIncrementTick+0x154>)
 800dc7a:	6013      	str	r3, [r2, #0]
 800dc7c:	f000 f990 	bl	800dfa0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dc80:	4b3b      	ldr	r3, [pc, #236]	; (800dd70 <xTaskIncrementTick+0x158>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	693a      	ldr	r2, [r7, #16]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d348      	bcc.n	800dd1c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc8a:	4b36      	ldr	r3, [pc, #216]	; (800dd64 <xTaskIncrementTick+0x14c>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d104      	bne.n	800dc9e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc94:	4b36      	ldr	r3, [pc, #216]	; (800dd70 <xTaskIncrementTick+0x158>)
 800dc96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc9a:	601a      	str	r2, [r3, #0]
					break;
 800dc9c:	e03e      	b.n	800dd1c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc9e:	4b31      	ldr	r3, [pc, #196]	; (800dd64 <xTaskIncrementTick+0x14c>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	68db      	ldr	r3, [r3, #12]
 800dca4:	68db      	ldr	r3, [r3, #12]
 800dca6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	685b      	ldr	r3, [r3, #4]
 800dcac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dcae:	693a      	ldr	r2, [r7, #16]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d203      	bcs.n	800dcbe <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dcb6:	4a2e      	ldr	r2, [pc, #184]	; (800dd70 <xTaskIncrementTick+0x158>)
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dcbc:	e02e      	b.n	800dd1c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	3304      	adds	r3, #4
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7ff fc24 	bl	800d510 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d004      	beq.n	800dcda <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	3318      	adds	r3, #24
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7ff fc1b 	bl	800d510 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcde:	2201      	movs	r2, #1
 800dce0:	409a      	lsls	r2, r3
 800dce2:	4b24      	ldr	r3, [pc, #144]	; (800dd74 <xTaskIncrementTick+0x15c>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4313      	orrs	r3, r2
 800dce8:	4a22      	ldr	r2, [pc, #136]	; (800dd74 <xTaskIncrementTick+0x15c>)
 800dcea:	6013      	str	r3, [r2, #0]
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcf0:	4613      	mov	r3, r2
 800dcf2:	009b      	lsls	r3, r3, #2
 800dcf4:	4413      	add	r3, r2
 800dcf6:	009b      	lsls	r3, r3, #2
 800dcf8:	4a1f      	ldr	r2, [pc, #124]	; (800dd78 <xTaskIncrementTick+0x160>)
 800dcfa:	441a      	add	r2, r3
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	3304      	adds	r3, #4
 800dd00:	4619      	mov	r1, r3
 800dd02:	4610      	mov	r0, r2
 800dd04:	f7ff fba7 	bl	800d456 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd0c:	4b1b      	ldr	r3, [pc, #108]	; (800dd7c <xTaskIncrementTick+0x164>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d3b9      	bcc.n	800dc8a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800dd16:	2301      	movs	r3, #1
 800dd18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd1a:	e7b6      	b.n	800dc8a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dd1c:	4b17      	ldr	r3, [pc, #92]	; (800dd7c <xTaskIncrementTick+0x164>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd22:	4915      	ldr	r1, [pc, #84]	; (800dd78 <xTaskIncrementTick+0x160>)
 800dd24:	4613      	mov	r3, r2
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	4413      	add	r3, r2
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	440b      	add	r3, r1
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	2b01      	cmp	r3, #1
 800dd32:	d907      	bls.n	800dd44 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800dd34:	2301      	movs	r3, #1
 800dd36:	617b      	str	r3, [r7, #20]
 800dd38:	e004      	b.n	800dd44 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800dd3a:	4b11      	ldr	r3, [pc, #68]	; (800dd80 <xTaskIncrementTick+0x168>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	3301      	adds	r3, #1
 800dd40:	4a0f      	ldr	r2, [pc, #60]	; (800dd80 <xTaskIncrementTick+0x168>)
 800dd42:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800dd44:	4b0f      	ldr	r3, [pc, #60]	; (800dd84 <xTaskIncrementTick+0x16c>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d001      	beq.n	800dd50 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800dd50:	697b      	ldr	r3, [r7, #20]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3718      	adds	r7, #24
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	20000dbc 	.word	0x20000dbc
 800dd60:	20000d98 	.word	0x20000d98
 800dd64:	20000d4c 	.word	0x20000d4c
 800dd68:	20000d50 	.word	0x20000d50
 800dd6c:	20000dac 	.word	0x20000dac
 800dd70:	20000db4 	.word	0x20000db4
 800dd74:	20000d9c 	.word	0x20000d9c
 800dd78:	20000c98 	.word	0x20000c98
 800dd7c:	20000c94 	.word	0x20000c94
 800dd80:	20000da4 	.word	0x20000da4
 800dd84:	20000da8 	.word	0x20000da8

0800dd88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b087      	sub	sp, #28
 800dd8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dd8e:	4b26      	ldr	r3, [pc, #152]	; (800de28 <vTaskSwitchContext+0xa0>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d003      	beq.n	800dd9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dd96:	4b25      	ldr	r3, [pc, #148]	; (800de2c <vTaskSwitchContext+0xa4>)
 800dd98:	2201      	movs	r2, #1
 800dd9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dd9c:	e03e      	b.n	800de1c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800dd9e:	4b23      	ldr	r3, [pc, #140]	; (800de2c <vTaskSwitchContext+0xa4>)
 800dda0:	2200      	movs	r2, #0
 800dda2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dda4:	4b22      	ldr	r3, [pc, #136]	; (800de30 <vTaskSwitchContext+0xa8>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	fab3 f383 	clz	r3, r3
 800ddb0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ddb2:	7afb      	ldrb	r3, [r7, #11]
 800ddb4:	f1c3 031f 	rsb	r3, r3, #31
 800ddb8:	617b      	str	r3, [r7, #20]
 800ddba:	491e      	ldr	r1, [pc, #120]	; (800de34 <vTaskSwitchContext+0xac>)
 800ddbc:	697a      	ldr	r2, [r7, #20]
 800ddbe:	4613      	mov	r3, r2
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	4413      	add	r3, r2
 800ddc4:	009b      	lsls	r3, r3, #2
 800ddc6:	440b      	add	r3, r1
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d109      	bne.n	800dde2 <vTaskSwitchContext+0x5a>
	__asm volatile
 800ddce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd2:	f383 8811 	msr	BASEPRI, r3
 800ddd6:	f3bf 8f6f 	isb	sy
 800ddda:	f3bf 8f4f 	dsb	sy
 800ddde:	607b      	str	r3, [r7, #4]
 800dde0:	e7fe      	b.n	800dde0 <vTaskSwitchContext+0x58>
 800dde2:	697a      	ldr	r2, [r7, #20]
 800dde4:	4613      	mov	r3, r2
 800dde6:	009b      	lsls	r3, r3, #2
 800dde8:	4413      	add	r3, r2
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	4a11      	ldr	r2, [pc, #68]	; (800de34 <vTaskSwitchContext+0xac>)
 800ddee:	4413      	add	r3, r2
 800ddf0:	613b      	str	r3, [r7, #16]
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	685a      	ldr	r2, [r3, #4]
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	605a      	str	r2, [r3, #4]
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	685a      	ldr	r2, [r3, #4]
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	3308      	adds	r3, #8
 800de04:	429a      	cmp	r2, r3
 800de06:	d104      	bne.n	800de12 <vTaskSwitchContext+0x8a>
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	685a      	ldr	r2, [r3, #4]
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	605a      	str	r2, [r3, #4]
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	4a07      	ldr	r2, [pc, #28]	; (800de38 <vTaskSwitchContext+0xb0>)
 800de1a:	6013      	str	r3, [r2, #0]
}
 800de1c:	bf00      	nop
 800de1e:	371c      	adds	r7, #28
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr
 800de28:	20000dbc 	.word	0x20000dbc
 800de2c:	20000da8 	.word	0x20000da8
 800de30:	20000d9c 	.word	0x20000d9c
 800de34:	20000c98 	.word	0x20000c98
 800de38:	20000c94 	.word	0x20000c94

0800de3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800de44:	f000 f852 	bl	800deec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800de48:	4b06      	ldr	r3, [pc, #24]	; (800de64 <prvIdleTask+0x28>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d9f9      	bls.n	800de44 <prvIdleTask+0x8>
			{
				taskYIELD();
 800de50:	4b05      	ldr	r3, [pc, #20]	; (800de68 <prvIdleTask+0x2c>)
 800de52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de56:	601a      	str	r2, [r3, #0]
 800de58:	f3bf 8f4f 	dsb	sy
 800de5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800de60:	e7f0      	b.n	800de44 <prvIdleTask+0x8>
 800de62:	bf00      	nop
 800de64:	20000c98 	.word	0x20000c98
 800de68:	e000ed04 	.word	0xe000ed04

0800de6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b082      	sub	sp, #8
 800de70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de72:	2300      	movs	r3, #0
 800de74:	607b      	str	r3, [r7, #4]
 800de76:	e00c      	b.n	800de92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	4613      	mov	r3, r2
 800de7c:	009b      	lsls	r3, r3, #2
 800de7e:	4413      	add	r3, r2
 800de80:	009b      	lsls	r3, r3, #2
 800de82:	4a12      	ldr	r2, [pc, #72]	; (800decc <prvInitialiseTaskLists+0x60>)
 800de84:	4413      	add	r3, r2
 800de86:	4618      	mov	r0, r3
 800de88:	f7ff fab8 	bl	800d3fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	3301      	adds	r3, #1
 800de90:	607b      	str	r3, [r7, #4]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2b06      	cmp	r3, #6
 800de96:	d9ef      	bls.n	800de78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800de98:	480d      	ldr	r0, [pc, #52]	; (800ded0 <prvInitialiseTaskLists+0x64>)
 800de9a:	f7ff faaf 	bl	800d3fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800de9e:	480d      	ldr	r0, [pc, #52]	; (800ded4 <prvInitialiseTaskLists+0x68>)
 800dea0:	f7ff faac 	bl	800d3fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dea4:	480c      	ldr	r0, [pc, #48]	; (800ded8 <prvInitialiseTaskLists+0x6c>)
 800dea6:	f7ff faa9 	bl	800d3fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800deaa:	480c      	ldr	r0, [pc, #48]	; (800dedc <prvInitialiseTaskLists+0x70>)
 800deac:	f7ff faa6 	bl	800d3fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800deb0:	480b      	ldr	r0, [pc, #44]	; (800dee0 <prvInitialiseTaskLists+0x74>)
 800deb2:	f7ff faa3 	bl	800d3fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800deb6:	4b0b      	ldr	r3, [pc, #44]	; (800dee4 <prvInitialiseTaskLists+0x78>)
 800deb8:	4a05      	ldr	r2, [pc, #20]	; (800ded0 <prvInitialiseTaskLists+0x64>)
 800deba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800debc:	4b0a      	ldr	r3, [pc, #40]	; (800dee8 <prvInitialiseTaskLists+0x7c>)
 800debe:	4a05      	ldr	r2, [pc, #20]	; (800ded4 <prvInitialiseTaskLists+0x68>)
 800dec0:	601a      	str	r2, [r3, #0]
}
 800dec2:	bf00      	nop
 800dec4:	3708      	adds	r7, #8
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	20000c98 	.word	0x20000c98
 800ded0:	20000d24 	.word	0x20000d24
 800ded4:	20000d38 	.word	0x20000d38
 800ded8:	20000d54 	.word	0x20000d54
 800dedc:	20000d68 	.word	0x20000d68
 800dee0:	20000d80 	.word	0x20000d80
 800dee4:	20000d4c 	.word	0x20000d4c
 800dee8:	20000d50 	.word	0x20000d50

0800deec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800def2:	e019      	b.n	800df28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800def4:	f000 fa02 	bl	800e2fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800def8:	4b0f      	ldr	r3, [pc, #60]	; (800df38 <prvCheckTasksWaitingTermination+0x4c>)
 800defa:	68db      	ldr	r3, [r3, #12]
 800defc:	68db      	ldr	r3, [r3, #12]
 800defe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	3304      	adds	r3, #4
 800df04:	4618      	mov	r0, r3
 800df06:	f7ff fb03 	bl	800d510 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800df0a:	4b0c      	ldr	r3, [pc, #48]	; (800df3c <prvCheckTasksWaitingTermination+0x50>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	3b01      	subs	r3, #1
 800df10:	4a0a      	ldr	r2, [pc, #40]	; (800df3c <prvCheckTasksWaitingTermination+0x50>)
 800df12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800df14:	4b0a      	ldr	r3, [pc, #40]	; (800df40 <prvCheckTasksWaitingTermination+0x54>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	3b01      	subs	r3, #1
 800df1a:	4a09      	ldr	r2, [pc, #36]	; (800df40 <prvCheckTasksWaitingTermination+0x54>)
 800df1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800df1e:	f000 fa1b 	bl	800e358 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f000 f80e 	bl	800df44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df28:	4b05      	ldr	r3, [pc, #20]	; (800df40 <prvCheckTasksWaitingTermination+0x54>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d1e1      	bne.n	800def4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800df30:	bf00      	nop
 800df32:	3708      	adds	r7, #8
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}
 800df38:	20000d68 	.word	0x20000d68
 800df3c:	20000d94 	.word	0x20000d94
 800df40:	20000d7c 	.word	0x20000d7c

0800df44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800df52:	2b00      	cmp	r3, #0
 800df54:	d108      	bne.n	800df68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df5a:	4618      	mov	r0, r3
 800df5c:	f000 fb6c 	bl	800e638 <vPortFree>
				vPortFree( pxTCB );
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f000 fb69 	bl	800e638 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800df66:	e017      	b.n	800df98 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800df6e:	2b01      	cmp	r3, #1
 800df70:	d103      	bne.n	800df7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f000 fb60 	bl	800e638 <vPortFree>
	}
 800df78:	e00e      	b.n	800df98 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800df80:	2b02      	cmp	r3, #2
 800df82:	d009      	beq.n	800df98 <prvDeleteTCB+0x54>
 800df84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df88:	f383 8811 	msr	BASEPRI, r3
 800df8c:	f3bf 8f6f 	isb	sy
 800df90:	f3bf 8f4f 	dsb	sy
 800df94:	60fb      	str	r3, [r7, #12]
 800df96:	e7fe      	b.n	800df96 <prvDeleteTCB+0x52>
	}
 800df98:	bf00      	nop
 800df9a:	3710      	adds	r7, #16
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b083      	sub	sp, #12
 800dfa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfa6:	4b0c      	ldr	r3, [pc, #48]	; (800dfd8 <prvResetNextTaskUnblockTime+0x38>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d104      	bne.n	800dfba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dfb0:	4b0a      	ldr	r3, [pc, #40]	; (800dfdc <prvResetNextTaskUnblockTime+0x3c>)
 800dfb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dfb8:	e008      	b.n	800dfcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfba:	4b07      	ldr	r3, [pc, #28]	; (800dfd8 <prvResetNextTaskUnblockTime+0x38>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	68db      	ldr	r3, [r3, #12]
 800dfc0:	68db      	ldr	r3, [r3, #12]
 800dfc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	685b      	ldr	r3, [r3, #4]
 800dfc8:	4a04      	ldr	r2, [pc, #16]	; (800dfdc <prvResetNextTaskUnblockTime+0x3c>)
 800dfca:	6013      	str	r3, [r2, #0]
}
 800dfcc:	bf00      	nop
 800dfce:	370c      	adds	r7, #12
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd6:	4770      	bx	lr
 800dfd8:	20000d4c 	.word	0x20000d4c
 800dfdc:	20000db4 	.word	0x20000db4

0800dfe0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dfea:	4b2b      	ldr	r3, [pc, #172]	; (800e098 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800dff0:	4b2a      	ldr	r3, [pc, #168]	; (800e09c <prvAddCurrentTaskToDelayedList+0xbc>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2200      	movs	r2, #0
 800dff6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dffa:	4b28      	ldr	r3, [pc, #160]	; (800e09c <prvAddCurrentTaskToDelayedList+0xbc>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	3304      	adds	r3, #4
 800e000:	4618      	mov	r0, r3
 800e002:	f7ff fa85 	bl	800d510 <uxListRemove>
 800e006:	4603      	mov	r3, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d10b      	bne.n	800e024 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e00c:	4b23      	ldr	r3, [pc, #140]	; (800e09c <prvAddCurrentTaskToDelayedList+0xbc>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e012:	2201      	movs	r2, #1
 800e014:	fa02 f303 	lsl.w	r3, r2, r3
 800e018:	43da      	mvns	r2, r3
 800e01a:	4b21      	ldr	r3, [pc, #132]	; (800e0a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	4013      	ands	r3, r2
 800e020:	4a1f      	ldr	r2, [pc, #124]	; (800e0a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e022:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e02a:	d10a      	bne.n	800e042 <prvAddCurrentTaskToDelayedList+0x62>
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d007      	beq.n	800e042 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e032:	4b1a      	ldr	r3, [pc, #104]	; (800e09c <prvAddCurrentTaskToDelayedList+0xbc>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	3304      	adds	r3, #4
 800e038:	4619      	mov	r1, r3
 800e03a:	481a      	ldr	r0, [pc, #104]	; (800e0a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e03c:	f7ff fa0b 	bl	800d456 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e040:	e026      	b.n	800e090 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e042:	68fa      	ldr	r2, [r7, #12]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	4413      	add	r3, r2
 800e048:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e04a:	4b14      	ldr	r3, [pc, #80]	; (800e09c <prvAddCurrentTaskToDelayedList+0xbc>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	68ba      	ldr	r2, [r7, #8]
 800e050:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e052:	68ba      	ldr	r2, [r7, #8]
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	429a      	cmp	r2, r3
 800e058:	d209      	bcs.n	800e06e <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e05a:	4b13      	ldr	r3, [pc, #76]	; (800e0a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e05c:	681a      	ldr	r2, [r3, #0]
 800e05e:	4b0f      	ldr	r3, [pc, #60]	; (800e09c <prvAddCurrentTaskToDelayedList+0xbc>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	3304      	adds	r3, #4
 800e064:	4619      	mov	r1, r3
 800e066:	4610      	mov	r0, r2
 800e068:	f7ff fa19 	bl	800d49e <vListInsert>
}
 800e06c:	e010      	b.n	800e090 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e06e:	4b0f      	ldr	r3, [pc, #60]	; (800e0ac <prvAddCurrentTaskToDelayedList+0xcc>)
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	4b0a      	ldr	r3, [pc, #40]	; (800e09c <prvAddCurrentTaskToDelayedList+0xbc>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	3304      	adds	r3, #4
 800e078:	4619      	mov	r1, r3
 800e07a:	4610      	mov	r0, r2
 800e07c:	f7ff fa0f 	bl	800d49e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e080:	4b0b      	ldr	r3, [pc, #44]	; (800e0b0 <prvAddCurrentTaskToDelayedList+0xd0>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	68ba      	ldr	r2, [r7, #8]
 800e086:	429a      	cmp	r2, r3
 800e088:	d202      	bcs.n	800e090 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 800e08a:	4a09      	ldr	r2, [pc, #36]	; (800e0b0 <prvAddCurrentTaskToDelayedList+0xd0>)
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	6013      	str	r3, [r2, #0]
}
 800e090:	bf00      	nop
 800e092:	3710      	adds	r7, #16
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	20000d98 	.word	0x20000d98
 800e09c:	20000c94 	.word	0x20000c94
 800e0a0:	20000d9c 	.word	0x20000d9c
 800e0a4:	20000d80 	.word	0x20000d80
 800e0a8:	20000d50 	.word	0x20000d50
 800e0ac:	20000d4c 	.word	0x20000d4c
 800e0b0:	20000db4 	.word	0x20000db4

0800e0b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b085      	sub	sp, #20
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	3b04      	subs	r3, #4
 800e0c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e0cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	3b04      	subs	r3, #4
 800e0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	f023 0201 	bic.w	r2, r3, #1
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	3b04      	subs	r3, #4
 800e0e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e0e4:	4a0c      	ldr	r2, [pc, #48]	; (800e118 <pxPortInitialiseStack+0x64>)
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	3b14      	subs	r3, #20
 800e0ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e0f0:	687a      	ldr	r2, [r7, #4]
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	3b04      	subs	r3, #4
 800e0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	f06f 0202 	mvn.w	r2, #2
 800e102:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	3b20      	subs	r3, #32
 800e108:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e10a:	68fb      	ldr	r3, [r7, #12]
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3714      	adds	r7, #20
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr
 800e118:	0800e11d 	.word	0x0800e11d

0800e11c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e11c:	b480      	push	{r7}
 800e11e:	b085      	sub	sp, #20
 800e120:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e122:	2300      	movs	r3, #0
 800e124:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e126:	4b11      	ldr	r3, [pc, #68]	; (800e16c <prvTaskExitError+0x50>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e12e:	d009      	beq.n	800e144 <prvTaskExitError+0x28>
 800e130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e134:	f383 8811 	msr	BASEPRI, r3
 800e138:	f3bf 8f6f 	isb	sy
 800e13c:	f3bf 8f4f 	dsb	sy
 800e140:	60fb      	str	r3, [r7, #12]
 800e142:	e7fe      	b.n	800e142 <prvTaskExitError+0x26>
 800e144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e148:	f383 8811 	msr	BASEPRI, r3
 800e14c:	f3bf 8f6f 	isb	sy
 800e150:	f3bf 8f4f 	dsb	sy
 800e154:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e156:	bf00      	nop
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d0fc      	beq.n	800e158 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e15e:	bf00      	nop
 800e160:	3714      	adds	r7, #20
 800e162:	46bd      	mov	sp, r7
 800e164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e168:	4770      	bx	lr
 800e16a:	bf00      	nop
 800e16c:	20000124 	.word	0x20000124

0800e170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e170:	4b07      	ldr	r3, [pc, #28]	; (800e190 <pxCurrentTCBConst2>)
 800e172:	6819      	ldr	r1, [r3, #0]
 800e174:	6808      	ldr	r0, [r1, #0]
 800e176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e17a:	f380 8809 	msr	PSP, r0
 800e17e:	f3bf 8f6f 	isb	sy
 800e182:	f04f 0000 	mov.w	r0, #0
 800e186:	f380 8811 	msr	BASEPRI, r0
 800e18a:	4770      	bx	lr
 800e18c:	f3af 8000 	nop.w

0800e190 <pxCurrentTCBConst2>:
 800e190:	20000c94 	.word	0x20000c94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e194:	bf00      	nop
 800e196:	bf00      	nop

0800e198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e198:	4808      	ldr	r0, [pc, #32]	; (800e1bc <prvPortStartFirstTask+0x24>)
 800e19a:	6800      	ldr	r0, [r0, #0]
 800e19c:	6800      	ldr	r0, [r0, #0]
 800e19e:	f380 8808 	msr	MSP, r0
 800e1a2:	f04f 0000 	mov.w	r0, #0
 800e1a6:	f380 8814 	msr	CONTROL, r0
 800e1aa:	b662      	cpsie	i
 800e1ac:	b661      	cpsie	f
 800e1ae:	f3bf 8f4f 	dsb	sy
 800e1b2:	f3bf 8f6f 	isb	sy
 800e1b6:	df00      	svc	0
 800e1b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e1ba:	bf00      	nop
 800e1bc:	e000ed08 	.word	0xe000ed08

0800e1c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b086      	sub	sp, #24
 800e1c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e1c6:	4b44      	ldr	r3, [pc, #272]	; (800e2d8 <xPortStartScheduler+0x118>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	4a44      	ldr	r2, [pc, #272]	; (800e2dc <xPortStartScheduler+0x11c>)
 800e1cc:	4293      	cmp	r3, r2
 800e1ce:	d109      	bne.n	800e1e4 <xPortStartScheduler+0x24>
 800e1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d4:	f383 8811 	msr	BASEPRI, r3
 800e1d8:	f3bf 8f6f 	isb	sy
 800e1dc:	f3bf 8f4f 	dsb	sy
 800e1e0:	613b      	str	r3, [r7, #16]
 800e1e2:	e7fe      	b.n	800e1e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e1e4:	4b3c      	ldr	r3, [pc, #240]	; (800e2d8 <xPortStartScheduler+0x118>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	4a3d      	ldr	r2, [pc, #244]	; (800e2e0 <xPortStartScheduler+0x120>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d109      	bne.n	800e202 <xPortStartScheduler+0x42>
 800e1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f2:	f383 8811 	msr	BASEPRI, r3
 800e1f6:	f3bf 8f6f 	isb	sy
 800e1fa:	f3bf 8f4f 	dsb	sy
 800e1fe:	60fb      	str	r3, [r7, #12]
 800e200:	e7fe      	b.n	800e200 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e202:	4b38      	ldr	r3, [pc, #224]	; (800e2e4 <xPortStartScheduler+0x124>)
 800e204:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	22ff      	movs	r2, #255	; 0xff
 800e212:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e21c:	78fb      	ldrb	r3, [r7, #3]
 800e21e:	b2db      	uxtb	r3, r3
 800e220:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e224:	b2da      	uxtb	r2, r3
 800e226:	4b30      	ldr	r3, [pc, #192]	; (800e2e8 <xPortStartScheduler+0x128>)
 800e228:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e22a:	4b30      	ldr	r3, [pc, #192]	; (800e2ec <xPortStartScheduler+0x12c>)
 800e22c:	2207      	movs	r2, #7
 800e22e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e230:	e009      	b.n	800e246 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800e232:	4b2e      	ldr	r3, [pc, #184]	; (800e2ec <xPortStartScheduler+0x12c>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	3b01      	subs	r3, #1
 800e238:	4a2c      	ldr	r2, [pc, #176]	; (800e2ec <xPortStartScheduler+0x12c>)
 800e23a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e23c:	78fb      	ldrb	r3, [r7, #3]
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	005b      	lsls	r3, r3, #1
 800e242:	b2db      	uxtb	r3, r3
 800e244:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e246:	78fb      	ldrb	r3, [r7, #3]
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e24e:	2b80      	cmp	r3, #128	; 0x80
 800e250:	d0ef      	beq.n	800e232 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e252:	4b26      	ldr	r3, [pc, #152]	; (800e2ec <xPortStartScheduler+0x12c>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f1c3 0307 	rsb	r3, r3, #7
 800e25a:	2b04      	cmp	r3, #4
 800e25c:	d009      	beq.n	800e272 <xPortStartScheduler+0xb2>
 800e25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e262:	f383 8811 	msr	BASEPRI, r3
 800e266:	f3bf 8f6f 	isb	sy
 800e26a:	f3bf 8f4f 	dsb	sy
 800e26e:	60bb      	str	r3, [r7, #8]
 800e270:	e7fe      	b.n	800e270 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e272:	4b1e      	ldr	r3, [pc, #120]	; (800e2ec <xPortStartScheduler+0x12c>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	021b      	lsls	r3, r3, #8
 800e278:	4a1c      	ldr	r2, [pc, #112]	; (800e2ec <xPortStartScheduler+0x12c>)
 800e27a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e27c:	4b1b      	ldr	r3, [pc, #108]	; (800e2ec <xPortStartScheduler+0x12c>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e284:	4a19      	ldr	r2, [pc, #100]	; (800e2ec <xPortStartScheduler+0x12c>)
 800e286:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	b2da      	uxtb	r2, r3
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e290:	4b17      	ldr	r3, [pc, #92]	; (800e2f0 <xPortStartScheduler+0x130>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4a16      	ldr	r2, [pc, #88]	; (800e2f0 <xPortStartScheduler+0x130>)
 800e296:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e29a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e29c:	4b14      	ldr	r3, [pc, #80]	; (800e2f0 <xPortStartScheduler+0x130>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4a13      	ldr	r2, [pc, #76]	; (800e2f0 <xPortStartScheduler+0x130>)
 800e2a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e2a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e2a8:	f000 f8d6 	bl	800e458 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e2ac:	4b11      	ldr	r3, [pc, #68]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e2b2:	f000 f8f5 	bl	800e4a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e2b6:	4b10      	ldr	r3, [pc, #64]	; (800e2f8 <xPortStartScheduler+0x138>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4a0f      	ldr	r2, [pc, #60]	; (800e2f8 <xPortStartScheduler+0x138>)
 800e2bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e2c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e2c2:	f7ff ff69 	bl	800e198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e2c6:	f7ff fd5f 	bl	800dd88 <vTaskSwitchContext>
	prvTaskExitError();
 800e2ca:	f7ff ff27 	bl	800e11c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e2ce:	2300      	movs	r3, #0
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3718      	adds	r7, #24
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	e000ed00 	.word	0xe000ed00
 800e2dc:	410fc271 	.word	0x410fc271
 800e2e0:	410fc270 	.word	0x410fc270
 800e2e4:	e000e400 	.word	0xe000e400
 800e2e8:	20000dc0 	.word	0x20000dc0
 800e2ec:	20000dc4 	.word	0x20000dc4
 800e2f0:	e000ed20 	.word	0xe000ed20
 800e2f4:	20000124 	.word	0x20000124
 800e2f8:	e000ef34 	.word	0xe000ef34

0800e2fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b083      	sub	sp, #12
 800e300:	af00      	add	r7, sp, #0
 800e302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e306:	f383 8811 	msr	BASEPRI, r3
 800e30a:	f3bf 8f6f 	isb	sy
 800e30e:	f3bf 8f4f 	dsb	sy
 800e312:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e314:	4b0e      	ldr	r3, [pc, #56]	; (800e350 <vPortEnterCritical+0x54>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	3301      	adds	r3, #1
 800e31a:	4a0d      	ldr	r2, [pc, #52]	; (800e350 <vPortEnterCritical+0x54>)
 800e31c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e31e:	4b0c      	ldr	r3, [pc, #48]	; (800e350 <vPortEnterCritical+0x54>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	2b01      	cmp	r3, #1
 800e324:	d10e      	bne.n	800e344 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e326:	4b0b      	ldr	r3, [pc, #44]	; (800e354 <vPortEnterCritical+0x58>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d009      	beq.n	800e344 <vPortEnterCritical+0x48>
 800e330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e334:	f383 8811 	msr	BASEPRI, r3
 800e338:	f3bf 8f6f 	isb	sy
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	603b      	str	r3, [r7, #0]
 800e342:	e7fe      	b.n	800e342 <vPortEnterCritical+0x46>
	}
}
 800e344:	bf00      	nop
 800e346:	370c      	adds	r7, #12
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr
 800e350:	20000124 	.word	0x20000124
 800e354:	e000ed04 	.word	0xe000ed04

0800e358 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e358:	b480      	push	{r7}
 800e35a:	b083      	sub	sp, #12
 800e35c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e35e:	4b11      	ldr	r3, [pc, #68]	; (800e3a4 <vPortExitCritical+0x4c>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d109      	bne.n	800e37a <vPortExitCritical+0x22>
 800e366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e36a:	f383 8811 	msr	BASEPRI, r3
 800e36e:	f3bf 8f6f 	isb	sy
 800e372:	f3bf 8f4f 	dsb	sy
 800e376:	607b      	str	r3, [r7, #4]
 800e378:	e7fe      	b.n	800e378 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800e37a:	4b0a      	ldr	r3, [pc, #40]	; (800e3a4 <vPortExitCritical+0x4c>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	3b01      	subs	r3, #1
 800e380:	4a08      	ldr	r2, [pc, #32]	; (800e3a4 <vPortExitCritical+0x4c>)
 800e382:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e384:	4b07      	ldr	r3, [pc, #28]	; (800e3a4 <vPortExitCritical+0x4c>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d104      	bne.n	800e396 <vPortExitCritical+0x3e>
 800e38c:	2300      	movs	r3, #0
 800e38e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e396:	bf00      	nop
 800e398:	370c      	adds	r7, #12
 800e39a:	46bd      	mov	sp, r7
 800e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a0:	4770      	bx	lr
 800e3a2:	bf00      	nop
 800e3a4:	20000124 	.word	0x20000124
	...

0800e3b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e3b0:	f3ef 8009 	mrs	r0, PSP
 800e3b4:	f3bf 8f6f 	isb	sy
 800e3b8:	4b15      	ldr	r3, [pc, #84]	; (800e410 <pxCurrentTCBConst>)
 800e3ba:	681a      	ldr	r2, [r3, #0]
 800e3bc:	f01e 0f10 	tst.w	lr, #16
 800e3c0:	bf08      	it	eq
 800e3c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e3c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ca:	6010      	str	r0, [r2, #0]
 800e3cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e3d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e3d4:	f380 8811 	msr	BASEPRI, r0
 800e3d8:	f3bf 8f4f 	dsb	sy
 800e3dc:	f3bf 8f6f 	isb	sy
 800e3e0:	f7ff fcd2 	bl	800dd88 <vTaskSwitchContext>
 800e3e4:	f04f 0000 	mov.w	r0, #0
 800e3e8:	f380 8811 	msr	BASEPRI, r0
 800e3ec:	bc09      	pop	{r0, r3}
 800e3ee:	6819      	ldr	r1, [r3, #0]
 800e3f0:	6808      	ldr	r0, [r1, #0]
 800e3f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f6:	f01e 0f10 	tst.w	lr, #16
 800e3fa:	bf08      	it	eq
 800e3fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e400:	f380 8809 	msr	PSP, r0
 800e404:	f3bf 8f6f 	isb	sy
 800e408:	4770      	bx	lr
 800e40a:	bf00      	nop
 800e40c:	f3af 8000 	nop.w

0800e410 <pxCurrentTCBConst>:
 800e410:	20000c94 	.word	0x20000c94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e414:	bf00      	nop
 800e416:	bf00      	nop

0800e418 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
	__asm volatile
 800e41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e422:	f383 8811 	msr	BASEPRI, r3
 800e426:	f3bf 8f6f 	isb	sy
 800e42a:	f3bf 8f4f 	dsb	sy
 800e42e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e430:	f7ff fbf2 	bl	800dc18 <xTaskIncrementTick>
 800e434:	4603      	mov	r3, r0
 800e436:	2b00      	cmp	r3, #0
 800e438:	d003      	beq.n	800e442 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e43a:	4b06      	ldr	r3, [pc, #24]	; (800e454 <SysTick_Handler+0x3c>)
 800e43c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e440:	601a      	str	r2, [r3, #0]
 800e442:	2300      	movs	r3, #0
 800e444:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e44c:	bf00      	nop
 800e44e:	3708      	adds	r7, #8
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	e000ed04 	.word	0xe000ed04

0800e458 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e458:	b480      	push	{r7}
 800e45a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e45c:	4b0b      	ldr	r3, [pc, #44]	; (800e48c <vPortSetupTimerInterrupt+0x34>)
 800e45e:	2200      	movs	r2, #0
 800e460:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e462:	4b0b      	ldr	r3, [pc, #44]	; (800e490 <vPortSetupTimerInterrupt+0x38>)
 800e464:	2200      	movs	r2, #0
 800e466:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e468:	4b0a      	ldr	r3, [pc, #40]	; (800e494 <vPortSetupTimerInterrupt+0x3c>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	4a0a      	ldr	r2, [pc, #40]	; (800e498 <vPortSetupTimerInterrupt+0x40>)
 800e46e:	fba2 2303 	umull	r2, r3, r2, r3
 800e472:	099b      	lsrs	r3, r3, #6
 800e474:	4a09      	ldr	r2, [pc, #36]	; (800e49c <vPortSetupTimerInterrupt+0x44>)
 800e476:	3b01      	subs	r3, #1
 800e478:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e47a:	4b04      	ldr	r3, [pc, #16]	; (800e48c <vPortSetupTimerInterrupt+0x34>)
 800e47c:	2207      	movs	r2, #7
 800e47e:	601a      	str	r2, [r3, #0]
}
 800e480:	bf00      	nop
 800e482:	46bd      	mov	sp, r7
 800e484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e488:	4770      	bx	lr
 800e48a:	bf00      	nop
 800e48c:	e000e010 	.word	0xe000e010
 800e490:	e000e018 	.word	0xe000e018
 800e494:	20000008 	.word	0x20000008
 800e498:	10624dd3 	.word	0x10624dd3
 800e49c:	e000e014 	.word	0xe000e014

0800e4a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e4a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e4b0 <vPortEnableVFP+0x10>
 800e4a4:	6801      	ldr	r1, [r0, #0]
 800e4a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e4aa:	6001      	str	r1, [r0, #0]
 800e4ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e4ae:	bf00      	nop
 800e4b0:	e000ed88 	.word	0xe000ed88

0800e4b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b08a      	sub	sp, #40	; 0x28
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e4c0:	f7ff faf0 	bl	800daa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e4c4:	4b57      	ldr	r3, [pc, #348]	; (800e624 <pvPortMalloc+0x170>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d101      	bne.n	800e4d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e4cc:	f000 f90c 	bl	800e6e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e4d0:	4b55      	ldr	r3, [pc, #340]	; (800e628 <pvPortMalloc+0x174>)
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	4013      	ands	r3, r2
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	f040 808c 	bne.w	800e5f6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d01c      	beq.n	800e51e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800e4e4:	2208      	movs	r2, #8
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	4413      	add	r3, r2
 800e4ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f003 0307 	and.w	r3, r3, #7
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d013      	beq.n	800e51e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f023 0307 	bic.w	r3, r3, #7
 800e4fc:	3308      	adds	r3, #8
 800e4fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f003 0307 	and.w	r3, r3, #7
 800e506:	2b00      	cmp	r3, #0
 800e508:	d009      	beq.n	800e51e <pvPortMalloc+0x6a>
	__asm volatile
 800e50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e50e:	f383 8811 	msr	BASEPRI, r3
 800e512:	f3bf 8f6f 	isb	sy
 800e516:	f3bf 8f4f 	dsb	sy
 800e51a:	617b      	str	r3, [r7, #20]
 800e51c:	e7fe      	b.n	800e51c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d068      	beq.n	800e5f6 <pvPortMalloc+0x142>
 800e524:	4b41      	ldr	r3, [pc, #260]	; (800e62c <pvPortMalloc+0x178>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d863      	bhi.n	800e5f6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e52e:	4b40      	ldr	r3, [pc, #256]	; (800e630 <pvPortMalloc+0x17c>)
 800e530:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e532:	4b3f      	ldr	r3, [pc, #252]	; (800e630 <pvPortMalloc+0x17c>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e538:	e004      	b.n	800e544 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800e53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	687a      	ldr	r2, [r7, #4]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d903      	bls.n	800e556 <pvPortMalloc+0xa2>
 800e54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d1f1      	bne.n	800e53a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e556:	4b33      	ldr	r3, [pc, #204]	; (800e624 <pvPortMalloc+0x170>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d04a      	beq.n	800e5f6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e560:	6a3b      	ldr	r3, [r7, #32]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	2208      	movs	r2, #8
 800e566:	4413      	add	r3, r2
 800e568:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56c:	681a      	ldr	r2, [r3, #0]
 800e56e:	6a3b      	ldr	r3, [r7, #32]
 800e570:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e574:	685a      	ldr	r2, [r3, #4]
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	1ad2      	subs	r2, r2, r3
 800e57a:	2308      	movs	r3, #8
 800e57c:	005b      	lsls	r3, r3, #1
 800e57e:	429a      	cmp	r2, r3
 800e580:	d91e      	bls.n	800e5c0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	4413      	add	r3, r2
 800e588:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e58a:	69bb      	ldr	r3, [r7, #24]
 800e58c:	f003 0307 	and.w	r3, r3, #7
 800e590:	2b00      	cmp	r3, #0
 800e592:	d009      	beq.n	800e5a8 <pvPortMalloc+0xf4>
 800e594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e598:	f383 8811 	msr	BASEPRI, r3
 800e59c:	f3bf 8f6f 	isb	sy
 800e5a0:	f3bf 8f4f 	dsb	sy
 800e5a4:	613b      	str	r3, [r7, #16]
 800e5a6:	e7fe      	b.n	800e5a6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5aa:	685a      	ldr	r2, [r3, #4]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	1ad2      	subs	r2, r2, r3
 800e5b0:	69bb      	ldr	r3, [r7, #24]
 800e5b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e5ba:	69b8      	ldr	r0, [r7, #24]
 800e5bc:	f000 f8f6 	bl	800e7ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e5c0:	4b1a      	ldr	r3, [pc, #104]	; (800e62c <pvPortMalloc+0x178>)
 800e5c2:	681a      	ldr	r2, [r3, #0]
 800e5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	1ad3      	subs	r3, r2, r3
 800e5ca:	4a18      	ldr	r2, [pc, #96]	; (800e62c <pvPortMalloc+0x178>)
 800e5cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e5ce:	4b17      	ldr	r3, [pc, #92]	; (800e62c <pvPortMalloc+0x178>)
 800e5d0:	681a      	ldr	r2, [r3, #0]
 800e5d2:	4b18      	ldr	r3, [pc, #96]	; (800e634 <pvPortMalloc+0x180>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d203      	bcs.n	800e5e2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e5da:	4b14      	ldr	r3, [pc, #80]	; (800e62c <pvPortMalloc+0x178>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	4a15      	ldr	r2, [pc, #84]	; (800e634 <pvPortMalloc+0x180>)
 800e5e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e4:	685a      	ldr	r2, [r3, #4]
 800e5e6:	4b10      	ldr	r3, [pc, #64]	; (800e628 <pvPortMalloc+0x174>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	431a      	orrs	r2, r3
 800e5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e5f6:	f7ff fa63 	bl	800dac0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5fa:	69fb      	ldr	r3, [r7, #28]
 800e5fc:	f003 0307 	and.w	r3, r3, #7
 800e600:	2b00      	cmp	r3, #0
 800e602:	d009      	beq.n	800e618 <pvPortMalloc+0x164>
 800e604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e608:	f383 8811 	msr	BASEPRI, r3
 800e60c:	f3bf 8f6f 	isb	sy
 800e610:	f3bf 8f4f 	dsb	sy
 800e614:	60fb      	str	r3, [r7, #12]
 800e616:	e7fe      	b.n	800e616 <pvPortMalloc+0x162>
	return pvReturn;
 800e618:	69fb      	ldr	r3, [r7, #28]
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3728      	adds	r7, #40	; 0x28
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
 800e622:	bf00      	nop
 800e624:	200049d0 	.word	0x200049d0
 800e628:	200049dc 	.word	0x200049dc
 800e62c:	200049d4 	.word	0x200049d4
 800e630:	200049c8 	.word	0x200049c8
 800e634:	200049d8 	.word	0x200049d8

0800e638 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b086      	sub	sp, #24
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d046      	beq.n	800e6d8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e64a:	2308      	movs	r3, #8
 800e64c:	425b      	negs	r3, r3
 800e64e:	697a      	ldr	r2, [r7, #20]
 800e650:	4413      	add	r3, r2
 800e652:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	685a      	ldr	r2, [r3, #4]
 800e65c:	4b20      	ldr	r3, [pc, #128]	; (800e6e0 <vPortFree+0xa8>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4013      	ands	r3, r2
 800e662:	2b00      	cmp	r3, #0
 800e664:	d109      	bne.n	800e67a <vPortFree+0x42>
 800e666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e66a:	f383 8811 	msr	BASEPRI, r3
 800e66e:	f3bf 8f6f 	isb	sy
 800e672:	f3bf 8f4f 	dsb	sy
 800e676:	60fb      	str	r3, [r7, #12]
 800e678:	e7fe      	b.n	800e678 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d009      	beq.n	800e696 <vPortFree+0x5e>
 800e682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e686:	f383 8811 	msr	BASEPRI, r3
 800e68a:	f3bf 8f6f 	isb	sy
 800e68e:	f3bf 8f4f 	dsb	sy
 800e692:	60bb      	str	r3, [r7, #8]
 800e694:	e7fe      	b.n	800e694 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	685a      	ldr	r2, [r3, #4]
 800e69a:	4b11      	ldr	r3, [pc, #68]	; (800e6e0 <vPortFree+0xa8>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	4013      	ands	r3, r2
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d019      	beq.n	800e6d8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d115      	bne.n	800e6d8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	685a      	ldr	r2, [r3, #4]
 800e6b0:	4b0b      	ldr	r3, [pc, #44]	; (800e6e0 <vPortFree+0xa8>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	43db      	mvns	r3, r3
 800e6b6:	401a      	ands	r2, r3
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e6bc:	f7ff f9f2 	bl	800daa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	685a      	ldr	r2, [r3, #4]
 800e6c4:	4b07      	ldr	r3, [pc, #28]	; (800e6e4 <vPortFree+0xac>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	4413      	add	r3, r2
 800e6ca:	4a06      	ldr	r2, [pc, #24]	; (800e6e4 <vPortFree+0xac>)
 800e6cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e6ce:	6938      	ldr	r0, [r7, #16]
 800e6d0:	f000 f86c 	bl	800e7ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e6d4:	f7ff f9f4 	bl	800dac0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e6d8:	bf00      	nop
 800e6da:	3718      	adds	r7, #24
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}
 800e6e0:	200049dc 	.word	0x200049dc
 800e6e4:	200049d4 	.word	0x200049d4

0800e6e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	b085      	sub	sp, #20
 800e6ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e6ee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e6f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e6f4:	4b27      	ldr	r3, [pc, #156]	; (800e794 <prvHeapInit+0xac>)
 800e6f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f003 0307 	and.w	r3, r3, #7
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d00c      	beq.n	800e71c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	3307      	adds	r3, #7
 800e706:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	f023 0307 	bic.w	r3, r3, #7
 800e70e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e710:	68ba      	ldr	r2, [r7, #8]
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	1ad3      	subs	r3, r2, r3
 800e716:	4a1f      	ldr	r2, [pc, #124]	; (800e794 <prvHeapInit+0xac>)
 800e718:	4413      	add	r3, r2
 800e71a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e720:	4a1d      	ldr	r2, [pc, #116]	; (800e798 <prvHeapInit+0xb0>)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e726:	4b1c      	ldr	r3, [pc, #112]	; (800e798 <prvHeapInit+0xb0>)
 800e728:	2200      	movs	r2, #0
 800e72a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	68ba      	ldr	r2, [r7, #8]
 800e730:	4413      	add	r3, r2
 800e732:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e734:	2208      	movs	r2, #8
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	1a9b      	subs	r3, r3, r2
 800e73a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f023 0307 	bic.w	r3, r3, #7
 800e742:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	4a15      	ldr	r2, [pc, #84]	; (800e79c <prvHeapInit+0xb4>)
 800e748:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e74a:	4b14      	ldr	r3, [pc, #80]	; (800e79c <prvHeapInit+0xb4>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	2200      	movs	r2, #0
 800e750:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e752:	4b12      	ldr	r3, [pc, #72]	; (800e79c <prvHeapInit+0xb4>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	2200      	movs	r2, #0
 800e758:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	68fa      	ldr	r2, [r7, #12]
 800e762:	1ad2      	subs	r2, r2, r3
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e768:	4b0c      	ldr	r3, [pc, #48]	; (800e79c <prvHeapInit+0xb4>)
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	4a0a      	ldr	r2, [pc, #40]	; (800e7a0 <prvHeapInit+0xb8>)
 800e776:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	4a09      	ldr	r2, [pc, #36]	; (800e7a4 <prvHeapInit+0xbc>)
 800e77e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e780:	4b09      	ldr	r3, [pc, #36]	; (800e7a8 <prvHeapInit+0xc0>)
 800e782:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e786:	601a      	str	r2, [r3, #0]
}
 800e788:	bf00      	nop
 800e78a:	3714      	adds	r7, #20
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr
 800e794:	20000dc8 	.word	0x20000dc8
 800e798:	200049c8 	.word	0x200049c8
 800e79c:	200049d0 	.word	0x200049d0
 800e7a0:	200049d8 	.word	0x200049d8
 800e7a4:	200049d4 	.word	0x200049d4
 800e7a8:	200049dc 	.word	0x200049dc

0800e7ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b085      	sub	sp, #20
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e7b4:	4b28      	ldr	r3, [pc, #160]	; (800e858 <prvInsertBlockIntoFreeList+0xac>)
 800e7b6:	60fb      	str	r3, [r7, #12]
 800e7b8:	e002      	b.n	800e7c0 <prvInsertBlockIntoFreeList+0x14>
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	60fb      	str	r3, [r7, #12]
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	687a      	ldr	r2, [r7, #4]
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	d8f7      	bhi.n	800e7ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	68ba      	ldr	r2, [r7, #8]
 800e7d4:	4413      	add	r3, r2
 800e7d6:	687a      	ldr	r2, [r7, #4]
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d108      	bne.n	800e7ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	685a      	ldr	r2, [r3, #4]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	685b      	ldr	r3, [r3, #4]
 800e7e4:	441a      	add	r2, r3
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	685b      	ldr	r3, [r3, #4]
 800e7f6:	68ba      	ldr	r2, [r7, #8]
 800e7f8:	441a      	add	r2, r3
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d118      	bne.n	800e834 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	4b15      	ldr	r3, [pc, #84]	; (800e85c <prvInsertBlockIntoFreeList+0xb0>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d00d      	beq.n	800e82a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	685a      	ldr	r2, [r3, #4]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	685b      	ldr	r3, [r3, #4]
 800e818:	441a      	add	r2, r3
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	681a      	ldr	r2, [r3, #0]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	601a      	str	r2, [r3, #0]
 800e828:	e008      	b.n	800e83c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e82a:	4b0c      	ldr	r3, [pc, #48]	; (800e85c <prvInsertBlockIntoFreeList+0xb0>)
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	601a      	str	r2, [r3, #0]
 800e832:	e003      	b.n	800e83c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681a      	ldr	r2, [r3, #0]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e83c:	68fa      	ldr	r2, [r7, #12]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	429a      	cmp	r2, r3
 800e842:	d002      	beq.n	800e84a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	687a      	ldr	r2, [r7, #4]
 800e848:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e84a:	bf00      	nop
 800e84c:	3714      	adds	r7, #20
 800e84e:	46bd      	mov	sp, r7
 800e850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e854:	4770      	bx	lr
 800e856:	bf00      	nop
 800e858:	200049c8 	.word	0x200049c8
 800e85c:	200049d0 	.word	0x200049d0

0800e860 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e864:	2200      	movs	r2, #0
 800e866:	4912      	ldr	r1, [pc, #72]	; (800e8b0 <MX_USB_DEVICE_Init+0x50>)
 800e868:	4812      	ldr	r0, [pc, #72]	; (800e8b4 <MX_USB_DEVICE_Init+0x54>)
 800e86a:	f7fd fc43 	bl	800c0f4 <USBD_Init>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	d001      	beq.n	800e878 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e874:	f7f2 fa7a 	bl	8000d6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e878:	490f      	ldr	r1, [pc, #60]	; (800e8b8 <MX_USB_DEVICE_Init+0x58>)
 800e87a:	480e      	ldr	r0, [pc, #56]	; (800e8b4 <MX_USB_DEVICE_Init+0x54>)
 800e87c:	f7fd fc70 	bl	800c160 <USBD_RegisterClass>
 800e880:	4603      	mov	r3, r0
 800e882:	2b00      	cmp	r3, #0
 800e884:	d001      	beq.n	800e88a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e886:	f7f2 fa71 	bl	8000d6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e88a:	490c      	ldr	r1, [pc, #48]	; (800e8bc <MX_USB_DEVICE_Init+0x5c>)
 800e88c:	4809      	ldr	r0, [pc, #36]	; (800e8b4 <MX_USB_DEVICE_Init+0x54>)
 800e88e:	f7fd fb95 	bl	800bfbc <USBD_CDC_RegisterInterface>
 800e892:	4603      	mov	r3, r0
 800e894:	2b00      	cmp	r3, #0
 800e896:	d001      	beq.n	800e89c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e898:	f7f2 fa68 	bl	8000d6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e89c:	4805      	ldr	r0, [pc, #20]	; (800e8b4 <MX_USB_DEVICE_Init+0x54>)
 800e89e:	f7fd fc80 	bl	800c1a2 <USBD_Start>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d001      	beq.n	800e8ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e8a8:	f7f2 fa60 	bl	8000d6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e8ac:	bf00      	nop
 800e8ae:	bd80      	pop	{r7, pc}
 800e8b0:	2000013c 	.word	0x2000013c
 800e8b4:	20004fd8 	.word	0x20004fd8
 800e8b8:	20000020 	.word	0x20000020
 800e8bc:	20000128 	.word	0x20000128

0800e8c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	4907      	ldr	r1, [pc, #28]	; (800e8e4 <CDC_Init_FS+0x24>)
 800e8c8:	4807      	ldr	r0, [pc, #28]	; (800e8e8 <CDC_Init_FS+0x28>)
 800e8ca:	f7fd fb8c 	bl	800bfe6 <USBD_CDC_SetTxBuffer>
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e8ce:	4907      	ldr	r1, [pc, #28]	; (800e8ec <CDC_Init_FS+0x2c>)
 800e8d0:	4805      	ldr	r0, [pc, #20]	; (800e8e8 <CDC_Init_FS+0x28>)
 800e8d2:	f7fd fba1 	bl	800c018 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);                                         //This is new to the function, the rest is standard HAL
 800e8d6:	4804      	ldr	r0, [pc, #16]	; (800e8e8 <CDC_Init_FS+0x28>)
 800e8d8:	f7fd fbe2 	bl	800c0a0 <USBD_CDC_ReceivePacket>
	  return (USBD_OK);
 800e8dc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	200056a8 	.word	0x200056a8
 800e8e8:	20004fd8 	.word	0x20004fd8
 800e8ec:	200052a8 	.word	0x200052a8

0800e8f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e8f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e900:	b480      	push	{r7}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
 800e906:	4603      	mov	r3, r0
 800e908:	6039      	str	r1, [r7, #0]
 800e90a:	71fb      	strb	r3, [r7, #7]
 800e90c:	4613      	mov	r3, r2
 800e90e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e910:	79fb      	ldrb	r3, [r7, #7]
 800e912:	2b23      	cmp	r3, #35	; 0x23
 800e914:	d84a      	bhi.n	800e9ac <CDC_Control_FS+0xac>
 800e916:	a201      	add	r2, pc, #4	; (adr r2, 800e91c <CDC_Control_FS+0x1c>)
 800e918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e91c:	0800e9ad 	.word	0x0800e9ad
 800e920:	0800e9ad 	.word	0x0800e9ad
 800e924:	0800e9ad 	.word	0x0800e9ad
 800e928:	0800e9ad 	.word	0x0800e9ad
 800e92c:	0800e9ad 	.word	0x0800e9ad
 800e930:	0800e9ad 	.word	0x0800e9ad
 800e934:	0800e9ad 	.word	0x0800e9ad
 800e938:	0800e9ad 	.word	0x0800e9ad
 800e93c:	0800e9ad 	.word	0x0800e9ad
 800e940:	0800e9ad 	.word	0x0800e9ad
 800e944:	0800e9ad 	.word	0x0800e9ad
 800e948:	0800e9ad 	.word	0x0800e9ad
 800e94c:	0800e9ad 	.word	0x0800e9ad
 800e950:	0800e9ad 	.word	0x0800e9ad
 800e954:	0800e9ad 	.word	0x0800e9ad
 800e958:	0800e9ad 	.word	0x0800e9ad
 800e95c:	0800e9ad 	.word	0x0800e9ad
 800e960:	0800e9ad 	.word	0x0800e9ad
 800e964:	0800e9ad 	.word	0x0800e9ad
 800e968:	0800e9ad 	.word	0x0800e9ad
 800e96c:	0800e9ad 	.word	0x0800e9ad
 800e970:	0800e9ad 	.word	0x0800e9ad
 800e974:	0800e9ad 	.word	0x0800e9ad
 800e978:	0800e9ad 	.word	0x0800e9ad
 800e97c:	0800e9ad 	.word	0x0800e9ad
 800e980:	0800e9ad 	.word	0x0800e9ad
 800e984:	0800e9ad 	.word	0x0800e9ad
 800e988:	0800e9ad 	.word	0x0800e9ad
 800e98c:	0800e9ad 	.word	0x0800e9ad
 800e990:	0800e9ad 	.word	0x0800e9ad
 800e994:	0800e9ad 	.word	0x0800e9ad
 800e998:	0800e9ad 	.word	0x0800e9ad
 800e99c:	0800e9ad 	.word	0x0800e9ad
 800e9a0:	0800e9ad 	.word	0x0800e9ad
 800e9a4:	0800e9ad 	.word	0x0800e9ad
 800e9a8:	0800e9ad 	.word	0x0800e9ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e9ac:	bf00      	nop
  }

  return (USBD_OK);
 800e9ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	370c      	adds	r7, #12
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr

0800e9bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


  volatile uint32_t counter = 0;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	60fb      	str	r3, [r7, #12]

  while(counter < *Len)
 800e9ca:	e01e      	b.n	800ea0a <CDC_Receive_FS+0x4e>
  {
       RxBuffer[RxFifoIndex ] = Buf[counter];
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	687a      	ldr	r2, [r7, #4]
 800e9d0:	441a      	add	r2, r3
 800e9d2:	4b16      	ldr	r3, [pc, #88]	; (800ea2c <CDC_Receive_FS+0x70>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	7811      	ldrb	r1, [r2, #0]
 800e9d8:	4a15      	ldr	r2, [pc, #84]	; (800ea30 <CDC_Receive_FS+0x74>)
 800e9da:	54d1      	strb	r1, [r2, r3]
       cdc_receive_put(Buf[counter]);
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	687a      	ldr	r2, [r7, #4]
 800e9e0:	4413      	add	r3, r2
 800e9e2:	781b      	ldrb	r3, [r3, #0]
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7f4 fde7 	bl	80035b8 <cdc_receive_put>
       counter++, RxFifoIndex++;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	60fb      	str	r3, [r7, #12]
 800e9f0:	4b0e      	ldr	r3, [pc, #56]	; (800ea2c <CDC_Receive_FS+0x70>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	3301      	adds	r3, #1
 800e9f6:	4a0d      	ldr	r2, [pc, #52]	; (800ea2c <CDC_Receive_FS+0x70>)
 800e9f8:	6013      	str	r3, [r2, #0]
       if(RxFifoIndex  == RxBufferSize)
 800e9fa:	4b0c      	ldr	r3, [pc, #48]	; (800ea2c <CDC_Receive_FS+0x70>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea02:	d102      	bne.n	800ea0a <CDC_Receive_FS+0x4e>
            RxFifoIndex  = 0;
 800ea04:	4b09      	ldr	r3, [pc, #36]	; (800ea2c <CDC_Receive_FS+0x70>)
 800ea06:	2200      	movs	r2, #0
 800ea08:	601a      	str	r2, [r3, #0]
  while(counter < *Len)
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	681a      	ldr	r2, [r3, #0]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d8db      	bhi.n	800e9cc <CDC_Receive_FS+0x10>
   }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ea14:	6879      	ldr	r1, [r7, #4]
 800ea16:	4807      	ldr	r0, [pc, #28]	; (800ea34 <CDC_Receive_FS+0x78>)
 800ea18:	f7fd fafe 	bl	800c018 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ea1c:	4805      	ldr	r0, [pc, #20]	; (800ea34 <CDC_Receive_FS+0x78>)
 800ea1e:	f7fd fb3f 	bl	800c0a0 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800ea22:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3710      	adds	r7, #16
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	200049e0 	.word	0x200049e0
 800ea30:	20005aa8 	.word	0x20005aa8
 800ea34:	20004fd8 	.word	0x20004fd8

0800ea38 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	460b      	mov	r3, r1
 800ea42:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ea44:	2300      	movs	r3, #0
 800ea46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ea48:	4b0d      	ldr	r3, [pc, #52]	; (800ea80 <CDC_Transmit_FS+0x48>)
 800ea4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea4e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d001      	beq.n	800ea5e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	e00b      	b.n	800ea76 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ea5e:	887b      	ldrh	r3, [r7, #2]
 800ea60:	461a      	mov	r2, r3
 800ea62:	6879      	ldr	r1, [r7, #4]
 800ea64:	4806      	ldr	r0, [pc, #24]	; (800ea80 <CDC_Transmit_FS+0x48>)
 800ea66:	f7fd fabe 	bl	800bfe6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ea6a:	4805      	ldr	r0, [pc, #20]	; (800ea80 <CDC_Transmit_FS+0x48>)
 800ea6c:	f7fd fae8 	bl	800c040 <USBD_CDC_TransmitPacket>
 800ea70:	4603      	mov	r3, r0
 800ea72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ea74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3710      	adds	r7, #16
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	20004fd8 	.word	0x20004fd8

0800ea84 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ea84:	b480      	push	{r7}
 800ea86:	b087      	sub	sp, #28
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	60f8      	str	r0, [r7, #12]
 800ea8c:	60b9      	str	r1, [r7, #8]
 800ea8e:	4613      	mov	r3, r2
 800ea90:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ea92:	2300      	movs	r3, #0
 800ea94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ea96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	371c      	adds	r7, #28
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr
	...

0800eaa8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b083      	sub	sp, #12
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	4603      	mov	r3, r0
 800eab0:	6039      	str	r1, [r7, #0]
 800eab2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	2212      	movs	r2, #18
 800eab8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800eaba:	4b03      	ldr	r3, [pc, #12]	; (800eac8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr
 800eac8:	20000158 	.word	0x20000158

0800eacc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eacc:	b480      	push	{r7}
 800eace:	b083      	sub	sp, #12
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	4603      	mov	r3, r0
 800ead4:	6039      	str	r1, [r7, #0]
 800ead6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	2204      	movs	r2, #4
 800eadc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eade:	4b03      	ldr	r3, [pc, #12]	; (800eaec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	370c      	adds	r7, #12
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr
 800eaec:	2000016c 	.word	0x2000016c

0800eaf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	6039      	str	r1, [r7, #0]
 800eafa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eafc:	79fb      	ldrb	r3, [r7, #7]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d105      	bne.n	800eb0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb02:	683a      	ldr	r2, [r7, #0]
 800eb04:	4907      	ldr	r1, [pc, #28]	; (800eb24 <USBD_FS_ProductStrDescriptor+0x34>)
 800eb06:	4808      	ldr	r0, [pc, #32]	; (800eb28 <USBD_FS_ProductStrDescriptor+0x38>)
 800eb08:	f7fe fb19 	bl	800d13e <USBD_GetString>
 800eb0c:	e004      	b.n	800eb18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb0e:	683a      	ldr	r2, [r7, #0]
 800eb10:	4904      	ldr	r1, [pc, #16]	; (800eb24 <USBD_FS_ProductStrDescriptor+0x34>)
 800eb12:	4805      	ldr	r0, [pc, #20]	; (800eb28 <USBD_FS_ProductStrDescriptor+0x38>)
 800eb14:	f7fe fb13 	bl	800d13e <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb18:	4b02      	ldr	r3, [pc, #8]	; (800eb24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3708      	adds	r7, #8
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	20005ea8 	.word	0x20005ea8
 800eb28:	0800fa20 	.word	0x0800fa20

0800eb2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b082      	sub	sp, #8
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	4603      	mov	r3, r0
 800eb34:	6039      	str	r1, [r7, #0]
 800eb36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eb38:	683a      	ldr	r2, [r7, #0]
 800eb3a:	4904      	ldr	r1, [pc, #16]	; (800eb4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eb3c:	4804      	ldr	r0, [pc, #16]	; (800eb50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eb3e:	f7fe fafe 	bl	800d13e <USBD_GetString>
  return USBD_StrDesc;
 800eb42:	4b02      	ldr	r3, [pc, #8]	; (800eb4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	20005ea8 	.word	0x20005ea8
 800eb50:	0800fa38 	.word	0x0800fa38

0800eb54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	6039      	str	r1, [r7, #0]
 800eb5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	221a      	movs	r2, #26
 800eb64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800eb66:	f000 f843 	bl	800ebf0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800eb6a:	4b02      	ldr	r3, [pc, #8]	; (800eb74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3708      	adds	r7, #8
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	20000170 	.word	0x20000170

0800eb78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	4603      	mov	r3, r0
 800eb80:	6039      	str	r1, [r7, #0]
 800eb82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eb84:	79fb      	ldrb	r3, [r7, #7]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d105      	bne.n	800eb96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb8a:	683a      	ldr	r2, [r7, #0]
 800eb8c:	4907      	ldr	r1, [pc, #28]	; (800ebac <USBD_FS_ConfigStrDescriptor+0x34>)
 800eb8e:	4808      	ldr	r0, [pc, #32]	; (800ebb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eb90:	f7fe fad5 	bl	800d13e <USBD_GetString>
 800eb94:	e004      	b.n	800eba0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb96:	683a      	ldr	r2, [r7, #0]
 800eb98:	4904      	ldr	r1, [pc, #16]	; (800ebac <USBD_FS_ConfigStrDescriptor+0x34>)
 800eb9a:	4805      	ldr	r0, [pc, #20]	; (800ebb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eb9c:	f7fe facf 	bl	800d13e <USBD_GetString>
  }
  return USBD_StrDesc;
 800eba0:	4b02      	ldr	r3, [pc, #8]	; (800ebac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3708      	adds	r7, #8
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	bf00      	nop
 800ebac:	20005ea8 	.word	0x20005ea8
 800ebb0:	0800fa4c 	.word	0x0800fa4c

0800ebb4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	4603      	mov	r3, r0
 800ebbc:	6039      	str	r1, [r7, #0]
 800ebbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ebc0:	79fb      	ldrb	r3, [r7, #7]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d105      	bne.n	800ebd2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ebc6:	683a      	ldr	r2, [r7, #0]
 800ebc8:	4907      	ldr	r1, [pc, #28]	; (800ebe8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ebca:	4808      	ldr	r0, [pc, #32]	; (800ebec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ebcc:	f7fe fab7 	bl	800d13e <USBD_GetString>
 800ebd0:	e004      	b.n	800ebdc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ebd2:	683a      	ldr	r2, [r7, #0]
 800ebd4:	4904      	ldr	r1, [pc, #16]	; (800ebe8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ebd6:	4805      	ldr	r0, [pc, #20]	; (800ebec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ebd8:	f7fe fab1 	bl	800d13e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebdc:	4b02      	ldr	r3, [pc, #8]	; (800ebe8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3708      	adds	r7, #8
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
 800ebe6:	bf00      	nop
 800ebe8:	20005ea8 	.word	0x20005ea8
 800ebec:	0800fa58 	.word	0x0800fa58

0800ebf0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ebf6:	4b0f      	ldr	r3, [pc, #60]	; (800ec34 <Get_SerialNum+0x44>)
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ebfc:	4b0e      	ldr	r3, [pc, #56]	; (800ec38 <Get_SerialNum+0x48>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ec02:	4b0e      	ldr	r3, [pc, #56]	; (800ec3c <Get_SerialNum+0x4c>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ec08:	68fa      	ldr	r2, [r7, #12]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	4413      	add	r3, r2
 800ec0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d009      	beq.n	800ec2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ec16:	2208      	movs	r2, #8
 800ec18:	4909      	ldr	r1, [pc, #36]	; (800ec40 <Get_SerialNum+0x50>)
 800ec1a:	68f8      	ldr	r0, [r7, #12]
 800ec1c:	f000 f814 	bl	800ec48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ec20:	2204      	movs	r2, #4
 800ec22:	4908      	ldr	r1, [pc, #32]	; (800ec44 <Get_SerialNum+0x54>)
 800ec24:	68b8      	ldr	r0, [r7, #8]
 800ec26:	f000 f80f 	bl	800ec48 <IntToUnicode>
  }
}
 800ec2a:	bf00      	nop
 800ec2c:	3710      	adds	r7, #16
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}
 800ec32:	bf00      	nop
 800ec34:	1fff7a10 	.word	0x1fff7a10
 800ec38:	1fff7a14 	.word	0x1fff7a14
 800ec3c:	1fff7a18 	.word	0x1fff7a18
 800ec40:	20000172 	.word	0x20000172
 800ec44:	20000182 	.word	0x20000182

0800ec48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b087      	sub	sp, #28
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	60f8      	str	r0, [r7, #12]
 800ec50:	60b9      	str	r1, [r7, #8]
 800ec52:	4613      	mov	r3, r2
 800ec54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ec56:	2300      	movs	r3, #0
 800ec58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	75fb      	strb	r3, [r7, #23]
 800ec5e:	e027      	b.n	800ecb0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	0f1b      	lsrs	r3, r3, #28
 800ec64:	2b09      	cmp	r3, #9
 800ec66:	d80b      	bhi.n	800ec80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	0f1b      	lsrs	r3, r3, #28
 800ec6c:	b2da      	uxtb	r2, r3
 800ec6e:	7dfb      	ldrb	r3, [r7, #23]
 800ec70:	005b      	lsls	r3, r3, #1
 800ec72:	4619      	mov	r1, r3
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	440b      	add	r3, r1
 800ec78:	3230      	adds	r2, #48	; 0x30
 800ec7a:	b2d2      	uxtb	r2, r2
 800ec7c:	701a      	strb	r2, [r3, #0]
 800ec7e:	e00a      	b.n	800ec96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	0f1b      	lsrs	r3, r3, #28
 800ec84:	b2da      	uxtb	r2, r3
 800ec86:	7dfb      	ldrb	r3, [r7, #23]
 800ec88:	005b      	lsls	r3, r3, #1
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	440b      	add	r3, r1
 800ec90:	3237      	adds	r2, #55	; 0x37
 800ec92:	b2d2      	uxtb	r2, r2
 800ec94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	011b      	lsls	r3, r3, #4
 800ec9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ec9c:	7dfb      	ldrb	r3, [r7, #23]
 800ec9e:	005b      	lsls	r3, r3, #1
 800eca0:	3301      	adds	r3, #1
 800eca2:	68ba      	ldr	r2, [r7, #8]
 800eca4:	4413      	add	r3, r2
 800eca6:	2200      	movs	r2, #0
 800eca8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ecaa:	7dfb      	ldrb	r3, [r7, #23]
 800ecac:	3301      	adds	r3, #1
 800ecae:	75fb      	strb	r3, [r7, #23]
 800ecb0:	7dfa      	ldrb	r2, [r7, #23]
 800ecb2:	79fb      	ldrb	r3, [r7, #7]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d3d3      	bcc.n	800ec60 <IntToUnicode+0x18>
  }
}
 800ecb8:	bf00      	nop
 800ecba:	371c      	adds	r7, #28
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b08a      	sub	sp, #40	; 0x28
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eccc:	f107 0314 	add.w	r3, r7, #20
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	601a      	str	r2, [r3, #0]
 800ecd4:	605a      	str	r2, [r3, #4]
 800ecd6:	609a      	str	r2, [r3, #8]
 800ecd8:	60da      	str	r2, [r3, #12]
 800ecda:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ece4:	d13a      	bne.n	800ed5c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ece6:	2300      	movs	r3, #0
 800ece8:	613b      	str	r3, [r7, #16]
 800ecea:	4b1e      	ldr	r3, [pc, #120]	; (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ecec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecee:	4a1d      	ldr	r2, [pc, #116]	; (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ecf0:	f043 0301 	orr.w	r3, r3, #1
 800ecf4:	6313      	str	r3, [r2, #48]	; 0x30
 800ecf6:	4b1b      	ldr	r3, [pc, #108]	; (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ecf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecfa:	f003 0301 	and.w	r3, r3, #1
 800ecfe:	613b      	str	r3, [r7, #16]
 800ed00:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ed02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ed06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed08:	2302      	movs	r3, #2
 800ed0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed10:	2303      	movs	r3, #3
 800ed12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ed14:	230a      	movs	r3, #10
 800ed16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed18:	f107 0314 	add.w	r3, r7, #20
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	4812      	ldr	r0, [pc, #72]	; (800ed68 <HAL_PCD_MspInit+0xa4>)
 800ed20:	f7f6 fe84 	bl	8005a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ed24:	4b0f      	ldr	r3, [pc, #60]	; (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ed26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed28:	4a0e      	ldr	r2, [pc, #56]	; (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ed2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed2e:	6353      	str	r3, [r2, #52]	; 0x34
 800ed30:	2300      	movs	r3, #0
 800ed32:	60fb      	str	r3, [r7, #12]
 800ed34:	4b0b      	ldr	r3, [pc, #44]	; (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ed36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed38:	4a0a      	ldr	r2, [pc, #40]	; (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ed3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ed3e:	6453      	str	r3, [r2, #68]	; 0x44
 800ed40:	4b08      	ldr	r3, [pc, #32]	; (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ed42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed48:	60fb      	str	r3, [r7, #12]
 800ed4a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	2100      	movs	r1, #0
 800ed50:	2043      	movs	r0, #67	; 0x43
 800ed52:	f7f6 fe11 	bl	8005978 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ed56:	2043      	movs	r0, #67	; 0x43
 800ed58:	f7f6 fe2a 	bl	80059b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ed5c:	bf00      	nop
 800ed5e:	3728      	adds	r7, #40	; 0x28
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}
 800ed64:	40023800 	.word	0x40023800
 800ed68:	40020000 	.word	0x40020000

0800ed6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ed80:	4619      	mov	r1, r3
 800ed82:	4610      	mov	r0, r2
 800ed84:	f7fd fa58 	bl	800c238 <USBD_LL_SetupStage>
}
 800ed88:	bf00      	nop
 800ed8a:	3708      	adds	r7, #8
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}

0800ed90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b082      	sub	sp, #8
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	460b      	mov	r3, r1
 800ed9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800eda2:	78fa      	ldrb	r2, [r7, #3]
 800eda4:	6879      	ldr	r1, [r7, #4]
 800eda6:	4613      	mov	r3, r2
 800eda8:	00db      	lsls	r3, r3, #3
 800edaa:	1a9b      	subs	r3, r3, r2
 800edac:	009b      	lsls	r3, r3, #2
 800edae:	440b      	add	r3, r1
 800edb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800edb4:	681a      	ldr	r2, [r3, #0]
 800edb6:	78fb      	ldrb	r3, [r7, #3]
 800edb8:	4619      	mov	r1, r3
 800edba:	f7fd fa90 	bl	800c2de <USBD_LL_DataOutStage>
}
 800edbe:	bf00      	nop
 800edc0:	3708      	adds	r7, #8
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}

0800edc6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edc6:	b580      	push	{r7, lr}
 800edc8:	b082      	sub	sp, #8
 800edca:	af00      	add	r7, sp, #0
 800edcc:	6078      	str	r0, [r7, #4]
 800edce:	460b      	mov	r3, r1
 800edd0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800edd8:	78fa      	ldrb	r2, [r7, #3]
 800edda:	6879      	ldr	r1, [r7, #4]
 800eddc:	4613      	mov	r3, r2
 800edde:	00db      	lsls	r3, r3, #3
 800ede0:	1a9b      	subs	r3, r3, r2
 800ede2:	009b      	lsls	r3, r3, #2
 800ede4:	440b      	add	r3, r1
 800ede6:	3348      	adds	r3, #72	; 0x48
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	78fb      	ldrb	r3, [r7, #3]
 800edec:	4619      	mov	r1, r3
 800edee:	f7fd fad9 	bl	800c3a4 <USBD_LL_DataInStage>
}
 800edf2:	bf00      	nop
 800edf4:	3708      	adds	r7, #8
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}

0800edfa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edfa:	b580      	push	{r7, lr}
 800edfc:	b082      	sub	sp, #8
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7fd fbdd 	bl	800c5c8 <USBD_LL_SOF>
}
 800ee0e:	bf00      	nop
 800ee10:	3708      	adds	r7, #8
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}

0800ee16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee16:	b580      	push	{r7, lr}
 800ee18:	b084      	sub	sp, #16
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ee1e:	2301      	movs	r3, #1
 800ee20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	68db      	ldr	r3, [r3, #12]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d102      	bne.n	800ee30 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	73fb      	strb	r3, [r7, #15]
 800ee2e:	e008      	b.n	800ee42 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	68db      	ldr	r3, [r3, #12]
 800ee34:	2b02      	cmp	r3, #2
 800ee36:	d102      	bne.n	800ee3e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ee38:	2301      	movs	r3, #1
 800ee3a:	73fb      	strb	r3, [r7, #15]
 800ee3c:	e001      	b.n	800ee42 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ee3e:	f7f1 ff95 	bl	8000d6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee48:	7bfa      	ldrb	r2, [r7, #15]
 800ee4a:	4611      	mov	r1, r2
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f7fd fb80 	bl	800c552 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7fd fb39 	bl	800c4d0 <USBD_LL_Reset>
}
 800ee5e:	bf00      	nop
 800ee60:	3710      	adds	r7, #16
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
	...

0800ee68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7fd fb7b 	bl	800c572 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	687a      	ldr	r2, [r7, #4]
 800ee88:	6812      	ldr	r2, [r2, #0]
 800ee8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ee8e:	f043 0301 	orr.w	r3, r3, #1
 800ee92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6a1b      	ldr	r3, [r3, #32]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d005      	beq.n	800eea8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee9c:	4b04      	ldr	r3, [pc, #16]	; (800eeb0 <HAL_PCD_SuspendCallback+0x48>)
 800ee9e:	691b      	ldr	r3, [r3, #16]
 800eea0:	4a03      	ldr	r2, [pc, #12]	; (800eeb0 <HAL_PCD_SuspendCallback+0x48>)
 800eea2:	f043 0306 	orr.w	r3, r3, #6
 800eea6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eea8:	bf00      	nop
 800eeaa:	3708      	adds	r7, #8
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}
 800eeb0:	e000ed00 	.word	0xe000ed00

0800eeb4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b082      	sub	sp, #8
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7fd fb6a 	bl	800c59c <USBD_LL_Resume>
}
 800eec8:	bf00      	nop
 800eeca:	3708      	adds	r7, #8
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b082      	sub	sp, #8
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	460b      	mov	r3, r1
 800eeda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800eee2:	78fa      	ldrb	r2, [r7, #3]
 800eee4:	4611      	mov	r1, r2
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7fd fb95 	bl	800c616 <USBD_LL_IsoOUTIncomplete>
}
 800eeec:	bf00      	nop
 800eeee:	3708      	adds	r7, #8
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	460b      	mov	r3, r1
 800eefe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef06:	78fa      	ldrb	r2, [r7, #3]
 800ef08:	4611      	mov	r1, r2
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7fd fb76 	bl	800c5fc <USBD_LL_IsoINIncomplete>
}
 800ef10:	bf00      	nop
 800ef12:	3708      	adds	r7, #8
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b082      	sub	sp, #8
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7fd fb82 	bl	800c630 <USBD_LL_DevConnected>
}
 800ef2c:	bf00      	nop
 800ef2e:	3708      	adds	r7, #8
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}

0800ef34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b082      	sub	sp, #8
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fd fb7f 	bl	800c646 <USBD_LL_DevDisconnected>
}
 800ef48:	bf00      	nop
 800ef4a:	3708      	adds	r7, #8
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}

0800ef50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d13c      	bne.n	800efda <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ef60:	4a20      	ldr	r2, [pc, #128]	; (800efe4 <USBD_LL_Init+0x94>)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	4a1e      	ldr	r2, [pc, #120]	; (800efe4 <USBD_LL_Init+0x94>)
 800ef6c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ef70:	4b1c      	ldr	r3, [pc, #112]	; (800efe4 <USBD_LL_Init+0x94>)
 800ef72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ef76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ef78:	4b1a      	ldr	r3, [pc, #104]	; (800efe4 <USBD_LL_Init+0x94>)
 800ef7a:	2204      	movs	r2, #4
 800ef7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ef7e:	4b19      	ldr	r3, [pc, #100]	; (800efe4 <USBD_LL_Init+0x94>)
 800ef80:	2202      	movs	r2, #2
 800ef82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ef84:	4b17      	ldr	r3, [pc, #92]	; (800efe4 <USBD_LL_Init+0x94>)
 800ef86:	2200      	movs	r2, #0
 800ef88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ef8a:	4b16      	ldr	r3, [pc, #88]	; (800efe4 <USBD_LL_Init+0x94>)
 800ef8c:	2202      	movs	r2, #2
 800ef8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ef90:	4b14      	ldr	r3, [pc, #80]	; (800efe4 <USBD_LL_Init+0x94>)
 800ef92:	2200      	movs	r2, #0
 800ef94:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ef96:	4b13      	ldr	r3, [pc, #76]	; (800efe4 <USBD_LL_Init+0x94>)
 800ef98:	2200      	movs	r2, #0
 800ef9a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ef9c:	4b11      	ldr	r3, [pc, #68]	; (800efe4 <USBD_LL_Init+0x94>)
 800ef9e:	2200      	movs	r2, #0
 800efa0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800efa2:	4b10      	ldr	r3, [pc, #64]	; (800efe4 <USBD_LL_Init+0x94>)
 800efa4:	2200      	movs	r2, #0
 800efa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800efa8:	4b0e      	ldr	r3, [pc, #56]	; (800efe4 <USBD_LL_Init+0x94>)
 800efaa:	2200      	movs	r2, #0
 800efac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800efae:	480d      	ldr	r0, [pc, #52]	; (800efe4 <USBD_LL_Init+0x94>)
 800efb0:	f7f9 fa32 	bl	8008418 <HAL_PCD_Init>
 800efb4:	4603      	mov	r3, r0
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d001      	beq.n	800efbe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800efba:	f7f1 fed7 	bl	8000d6c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800efbe:	2180      	movs	r1, #128	; 0x80
 800efc0:	4808      	ldr	r0, [pc, #32]	; (800efe4 <USBD_LL_Init+0x94>)
 800efc2:	f7fa fb90 	bl	80096e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800efc6:	2240      	movs	r2, #64	; 0x40
 800efc8:	2100      	movs	r1, #0
 800efca:	4806      	ldr	r0, [pc, #24]	; (800efe4 <USBD_LL_Init+0x94>)
 800efcc:	f7fa fb44 	bl	8009658 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800efd0:	2280      	movs	r2, #128	; 0x80
 800efd2:	2101      	movs	r1, #1
 800efd4:	4803      	ldr	r0, [pc, #12]	; (800efe4 <USBD_LL_Init+0x94>)
 800efd6:	f7fa fb3f 	bl	8009658 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800efda:	2300      	movs	r3, #0
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3708      	adds	r7, #8
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}
 800efe4:	200060a8 	.word	0x200060a8

0800efe8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b084      	sub	sp, #16
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eff0:	2300      	movs	r3, #0
 800eff2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eff4:	2300      	movs	r3, #0
 800eff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800effe:	4618      	mov	r0, r3
 800f000:	f7f9 fb27 	bl	8008652 <HAL_PCD_Start>
 800f004:	4603      	mov	r3, r0
 800f006:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f008:	7bfb      	ldrb	r3, [r7, #15]
 800f00a:	4618      	mov	r0, r3
 800f00c:	f000 f92a 	bl	800f264 <USBD_Get_USB_Status>
 800f010:	4603      	mov	r3, r0
 800f012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f014:	7bbb      	ldrb	r3, [r7, #14]
}
 800f016:	4618      	mov	r0, r3
 800f018:	3710      	adds	r7, #16
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}

0800f01e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f01e:	b580      	push	{r7, lr}
 800f020:	b084      	sub	sp, #16
 800f022:	af00      	add	r7, sp, #0
 800f024:	6078      	str	r0, [r7, #4]
 800f026:	4608      	mov	r0, r1
 800f028:	4611      	mov	r1, r2
 800f02a:	461a      	mov	r2, r3
 800f02c:	4603      	mov	r3, r0
 800f02e:	70fb      	strb	r3, [r7, #3]
 800f030:	460b      	mov	r3, r1
 800f032:	70bb      	strb	r3, [r7, #2]
 800f034:	4613      	mov	r3, r2
 800f036:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f038:	2300      	movs	r3, #0
 800f03a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f03c:	2300      	movs	r3, #0
 800f03e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f046:	78bb      	ldrb	r3, [r7, #2]
 800f048:	883a      	ldrh	r2, [r7, #0]
 800f04a:	78f9      	ldrb	r1, [r7, #3]
 800f04c:	f7f9 ff0b 	bl	8008e66 <HAL_PCD_EP_Open>
 800f050:	4603      	mov	r3, r0
 800f052:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f054:	7bfb      	ldrb	r3, [r7, #15]
 800f056:	4618      	mov	r0, r3
 800f058:	f000 f904 	bl	800f264 <USBD_Get_USB_Status>
 800f05c:	4603      	mov	r3, r0
 800f05e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f060:	7bbb      	ldrb	r3, [r7, #14]
}
 800f062:	4618      	mov	r0, r3
 800f064:	3710      	adds	r7, #16
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}

0800f06a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f06a:	b580      	push	{r7, lr}
 800f06c:	b084      	sub	sp, #16
 800f06e:	af00      	add	r7, sp, #0
 800f070:	6078      	str	r0, [r7, #4]
 800f072:	460b      	mov	r3, r1
 800f074:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f076:	2300      	movs	r3, #0
 800f078:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f07a:	2300      	movs	r3, #0
 800f07c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f084:	78fa      	ldrb	r2, [r7, #3]
 800f086:	4611      	mov	r1, r2
 800f088:	4618      	mov	r0, r3
 800f08a:	f7f9 ff54 	bl	8008f36 <HAL_PCD_EP_Close>
 800f08e:	4603      	mov	r3, r0
 800f090:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f092:	7bfb      	ldrb	r3, [r7, #15]
 800f094:	4618      	mov	r0, r3
 800f096:	f000 f8e5 	bl	800f264 <USBD_Get_USB_Status>
 800f09a:	4603      	mov	r3, r0
 800f09c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f09e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	3710      	adds	r7, #16
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}

0800f0a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b084      	sub	sp, #16
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	460b      	mov	r3, r1
 800f0b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f0c2:	78fa      	ldrb	r2, [r7, #3]
 800f0c4:	4611      	mov	r1, r2
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7fa f82c 	bl	8009124 <HAL_PCD_EP_SetStall>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0d0:	7bfb      	ldrb	r3, [r7, #15]
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f000 f8c6 	bl	800f264 <USBD_Get_USB_Status>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3710      	adds	r7, #16
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}

0800f0e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0e6:	b580      	push	{r7, lr}
 800f0e8:	b084      	sub	sp, #16
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]
 800f0ee:	460b      	mov	r3, r1
 800f0f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f100:	78fa      	ldrb	r2, [r7, #3]
 800f102:	4611      	mov	r1, r2
 800f104:	4618      	mov	r0, r3
 800f106:	f7fa f871 	bl	80091ec <HAL_PCD_EP_ClrStall>
 800f10a:	4603      	mov	r3, r0
 800f10c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f10e:	7bfb      	ldrb	r3, [r7, #15]
 800f110:	4618      	mov	r0, r3
 800f112:	f000 f8a7 	bl	800f264 <USBD_Get_USB_Status>
 800f116:	4603      	mov	r3, r0
 800f118:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f11a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3710      	adds	r7, #16
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}

0800f124 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f124:	b480      	push	{r7}
 800f126:	b085      	sub	sp, #20
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	460b      	mov	r3, r1
 800f12e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f136:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	da0b      	bge.n	800f158 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f140:	78fb      	ldrb	r3, [r7, #3]
 800f142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f146:	68f9      	ldr	r1, [r7, #12]
 800f148:	4613      	mov	r3, r2
 800f14a:	00db      	lsls	r3, r3, #3
 800f14c:	1a9b      	subs	r3, r3, r2
 800f14e:	009b      	lsls	r3, r3, #2
 800f150:	440b      	add	r3, r1
 800f152:	333e      	adds	r3, #62	; 0x3e
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	e00b      	b.n	800f170 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f158:	78fb      	ldrb	r3, [r7, #3]
 800f15a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f15e:	68f9      	ldr	r1, [r7, #12]
 800f160:	4613      	mov	r3, r2
 800f162:	00db      	lsls	r3, r3, #3
 800f164:	1a9b      	subs	r3, r3, r2
 800f166:	009b      	lsls	r3, r3, #2
 800f168:	440b      	add	r3, r1
 800f16a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f16e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f170:	4618      	mov	r0, r3
 800f172:	3714      	adds	r7, #20
 800f174:	46bd      	mov	sp, r7
 800f176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17a:	4770      	bx	lr

0800f17c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b084      	sub	sp, #16
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	460b      	mov	r3, r1
 800f186:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f188:	2300      	movs	r3, #0
 800f18a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f18c:	2300      	movs	r3, #0
 800f18e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f196:	78fa      	ldrb	r2, [r7, #3]
 800f198:	4611      	mov	r1, r2
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7f9 fe3e 	bl	8008e1c <HAL_PCD_SetAddress>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1a4:	7bfb      	ldrb	r3, [r7, #15]
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f000 f85c 	bl	800f264 <USBD_Get_USB_Status>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3710      	adds	r7, #16
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}

0800f1ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f1ba:	b580      	push	{r7, lr}
 800f1bc:	b086      	sub	sp, #24
 800f1be:	af00      	add	r7, sp, #0
 800f1c0:	60f8      	str	r0, [r7, #12]
 800f1c2:	607a      	str	r2, [r7, #4]
 800f1c4:	603b      	str	r3, [r7, #0]
 800f1c6:	460b      	mov	r3, r1
 800f1c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f1d8:	7af9      	ldrb	r1, [r7, #11]
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	687a      	ldr	r2, [r7, #4]
 800f1de:	f7f9 ff57 	bl	8009090 <HAL_PCD_EP_Transmit>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1e6:	7dfb      	ldrb	r3, [r7, #23]
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f000 f83b 	bl	800f264 <USBD_Get_USB_Status>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f1f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3718      	adds	r7, #24
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b086      	sub	sp, #24
 800f200:	af00      	add	r7, sp, #0
 800f202:	60f8      	str	r0, [r7, #12]
 800f204:	607a      	str	r2, [r7, #4]
 800f206:	603b      	str	r3, [r7, #0]
 800f208:	460b      	mov	r3, r1
 800f20a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f20c:	2300      	movs	r3, #0
 800f20e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f210:	2300      	movs	r3, #0
 800f212:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f21a:	7af9      	ldrb	r1, [r7, #11]
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	f7f9 fed3 	bl	8008fca <HAL_PCD_EP_Receive>
 800f224:	4603      	mov	r3, r0
 800f226:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f228:	7dfb      	ldrb	r3, [r7, #23]
 800f22a:	4618      	mov	r0, r3
 800f22c:	f000 f81a 	bl	800f264 <USBD_Get_USB_Status>
 800f230:	4603      	mov	r3, r0
 800f232:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f234:	7dbb      	ldrb	r3, [r7, #22]
}
 800f236:	4618      	mov	r0, r3
 800f238:	3718      	adds	r7, #24
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}

0800f23e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f23e:	b580      	push	{r7, lr}
 800f240:	b082      	sub	sp, #8
 800f242:	af00      	add	r7, sp, #0
 800f244:	6078      	str	r0, [r7, #4]
 800f246:	460b      	mov	r3, r1
 800f248:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f250:	78fa      	ldrb	r2, [r7, #3]
 800f252:	4611      	mov	r1, r2
 800f254:	4618      	mov	r0, r3
 800f256:	f7f9 ff03 	bl	8009060 <HAL_PCD_EP_GetRxCount>
 800f25a:	4603      	mov	r3, r0
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3708      	adds	r7, #8
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f264:	b480      	push	{r7}
 800f266:	b085      	sub	sp, #20
 800f268:	af00      	add	r7, sp, #0
 800f26a:	4603      	mov	r3, r0
 800f26c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f26e:	2300      	movs	r3, #0
 800f270:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f272:	79fb      	ldrb	r3, [r7, #7]
 800f274:	2b03      	cmp	r3, #3
 800f276:	d817      	bhi.n	800f2a8 <USBD_Get_USB_Status+0x44>
 800f278:	a201      	add	r2, pc, #4	; (adr r2, 800f280 <USBD_Get_USB_Status+0x1c>)
 800f27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f27e:	bf00      	nop
 800f280:	0800f291 	.word	0x0800f291
 800f284:	0800f297 	.word	0x0800f297
 800f288:	0800f29d 	.word	0x0800f29d
 800f28c:	0800f2a3 	.word	0x0800f2a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f290:	2300      	movs	r3, #0
 800f292:	73fb      	strb	r3, [r7, #15]
    break;
 800f294:	e00b      	b.n	800f2ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f296:	2303      	movs	r3, #3
 800f298:	73fb      	strb	r3, [r7, #15]
    break;
 800f29a:	e008      	b.n	800f2ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f29c:	2301      	movs	r3, #1
 800f29e:	73fb      	strb	r3, [r7, #15]
    break;
 800f2a0:	e005      	b.n	800f2ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f2a2:	2303      	movs	r3, #3
 800f2a4:	73fb      	strb	r3, [r7, #15]
    break;
 800f2a6:	e002      	b.n	800f2ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f2a8:	2303      	movs	r3, #3
 800f2aa:	73fb      	strb	r3, [r7, #15]
    break;
 800f2ac:	bf00      	nop
  }
  return usb_status;
 800f2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3714      	adds	r7, #20
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ba:	4770      	bx	lr

0800f2bc <__cxa_pure_virtual>:
 800f2bc:	b508      	push	{r3, lr}
 800f2be:	f000 f80d 	bl	800f2dc <_ZSt9terminatev>

0800f2c2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f2c2:	b508      	push	{r3, lr}
 800f2c4:	4780      	blx	r0
 800f2c6:	f000 f80e 	bl	800f2e6 <abort>
	...

0800f2cc <_ZSt13get_terminatev>:
 800f2cc:	4b02      	ldr	r3, [pc, #8]	; (800f2d8 <_ZSt13get_terminatev+0xc>)
 800f2ce:	6818      	ldr	r0, [r3, #0]
 800f2d0:	f3bf 8f5b 	dmb	ish
 800f2d4:	4770      	bx	lr
 800f2d6:	bf00      	nop
 800f2d8:	2000018c 	.word	0x2000018c

0800f2dc <_ZSt9terminatev>:
 800f2dc:	b508      	push	{r3, lr}
 800f2de:	f7ff fff5 	bl	800f2cc <_ZSt13get_terminatev>
 800f2e2:	f7ff ffee 	bl	800f2c2 <_ZN10__cxxabiv111__terminateEPFvvE>

0800f2e6 <abort>:
 800f2e6:	b508      	push	{r3, lr}
 800f2e8:	2006      	movs	r0, #6
 800f2ea:	f000 f939 	bl	800f560 <raise>
 800f2ee:	2001      	movs	r0, #1
 800f2f0:	f7f2 fbb6 	bl	8001a60 <_exit>

0800f2f4 <__errno>:
 800f2f4:	4b01      	ldr	r3, [pc, #4]	; (800f2fc <__errno+0x8>)
 800f2f6:	6818      	ldr	r0, [r3, #0]
 800f2f8:	4770      	bx	lr
 800f2fa:	bf00      	nop
 800f2fc:	20000190 	.word	0x20000190

0800f300 <__libc_init_array>:
 800f300:	b570      	push	{r4, r5, r6, lr}
 800f302:	4e0d      	ldr	r6, [pc, #52]	; (800f338 <__libc_init_array+0x38>)
 800f304:	4c0d      	ldr	r4, [pc, #52]	; (800f33c <__libc_init_array+0x3c>)
 800f306:	1ba4      	subs	r4, r4, r6
 800f308:	10a4      	asrs	r4, r4, #2
 800f30a:	2500      	movs	r5, #0
 800f30c:	42a5      	cmp	r5, r4
 800f30e:	d109      	bne.n	800f324 <__libc_init_array+0x24>
 800f310:	4e0b      	ldr	r6, [pc, #44]	; (800f340 <__libc_init_array+0x40>)
 800f312:	4c0c      	ldr	r4, [pc, #48]	; (800f344 <__libc_init_array+0x44>)
 800f314:	f000 f970 	bl	800f5f8 <_init>
 800f318:	1ba4      	subs	r4, r4, r6
 800f31a:	10a4      	asrs	r4, r4, #2
 800f31c:	2500      	movs	r5, #0
 800f31e:	42a5      	cmp	r5, r4
 800f320:	d105      	bne.n	800f32e <__libc_init_array+0x2e>
 800f322:	bd70      	pop	{r4, r5, r6, pc}
 800f324:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f328:	4798      	blx	r3
 800f32a:	3501      	adds	r5, #1
 800f32c:	e7ee      	b.n	800f30c <__libc_init_array+0xc>
 800f32e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f332:	4798      	blx	r3
 800f334:	3501      	adds	r5, #1
 800f336:	e7f2      	b.n	800f31e <__libc_init_array+0x1e>
 800f338:	0800fbec 	.word	0x0800fbec
 800f33c:	0800fbec 	.word	0x0800fbec
 800f340:	0800fbec 	.word	0x0800fbec
 800f344:	0800fbf4 	.word	0x0800fbf4

0800f348 <malloc>:
 800f348:	4b02      	ldr	r3, [pc, #8]	; (800f354 <malloc+0xc>)
 800f34a:	4601      	mov	r1, r0
 800f34c:	6818      	ldr	r0, [r3, #0]
 800f34e:	f000 b86d 	b.w	800f42c <_malloc_r>
 800f352:	bf00      	nop
 800f354:	20000190 	.word	0x20000190

0800f358 <free>:
 800f358:	4b02      	ldr	r3, [pc, #8]	; (800f364 <free+0xc>)
 800f35a:	4601      	mov	r1, r0
 800f35c:	6818      	ldr	r0, [r3, #0]
 800f35e:	f000 b817 	b.w	800f390 <_free_r>
 800f362:	bf00      	nop
 800f364:	20000190 	.word	0x20000190

0800f368 <memcpy>:
 800f368:	b510      	push	{r4, lr}
 800f36a:	1e43      	subs	r3, r0, #1
 800f36c:	440a      	add	r2, r1
 800f36e:	4291      	cmp	r1, r2
 800f370:	d100      	bne.n	800f374 <memcpy+0xc>
 800f372:	bd10      	pop	{r4, pc}
 800f374:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f378:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f37c:	e7f7      	b.n	800f36e <memcpy+0x6>

0800f37e <memset>:
 800f37e:	4402      	add	r2, r0
 800f380:	4603      	mov	r3, r0
 800f382:	4293      	cmp	r3, r2
 800f384:	d100      	bne.n	800f388 <memset+0xa>
 800f386:	4770      	bx	lr
 800f388:	f803 1b01 	strb.w	r1, [r3], #1
 800f38c:	e7f9      	b.n	800f382 <memset+0x4>
	...

0800f390 <_free_r>:
 800f390:	b538      	push	{r3, r4, r5, lr}
 800f392:	4605      	mov	r5, r0
 800f394:	2900      	cmp	r1, #0
 800f396:	d045      	beq.n	800f424 <_free_r+0x94>
 800f398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f39c:	1f0c      	subs	r4, r1, #4
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	bfb8      	it	lt
 800f3a2:	18e4      	addlt	r4, r4, r3
 800f3a4:	f000 f8f8 	bl	800f598 <__malloc_lock>
 800f3a8:	4a1f      	ldr	r2, [pc, #124]	; (800f428 <_free_r+0x98>)
 800f3aa:	6813      	ldr	r3, [r2, #0]
 800f3ac:	4610      	mov	r0, r2
 800f3ae:	b933      	cbnz	r3, 800f3be <_free_r+0x2e>
 800f3b0:	6063      	str	r3, [r4, #4]
 800f3b2:	6014      	str	r4, [r2, #0]
 800f3b4:	4628      	mov	r0, r5
 800f3b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3ba:	f000 b8ee 	b.w	800f59a <__malloc_unlock>
 800f3be:	42a3      	cmp	r3, r4
 800f3c0:	d90c      	bls.n	800f3dc <_free_r+0x4c>
 800f3c2:	6821      	ldr	r1, [r4, #0]
 800f3c4:	1862      	adds	r2, r4, r1
 800f3c6:	4293      	cmp	r3, r2
 800f3c8:	bf04      	itt	eq
 800f3ca:	681a      	ldreq	r2, [r3, #0]
 800f3cc:	685b      	ldreq	r3, [r3, #4]
 800f3ce:	6063      	str	r3, [r4, #4]
 800f3d0:	bf04      	itt	eq
 800f3d2:	1852      	addeq	r2, r2, r1
 800f3d4:	6022      	streq	r2, [r4, #0]
 800f3d6:	6004      	str	r4, [r0, #0]
 800f3d8:	e7ec      	b.n	800f3b4 <_free_r+0x24>
 800f3da:	4613      	mov	r3, r2
 800f3dc:	685a      	ldr	r2, [r3, #4]
 800f3de:	b10a      	cbz	r2, 800f3e4 <_free_r+0x54>
 800f3e0:	42a2      	cmp	r2, r4
 800f3e2:	d9fa      	bls.n	800f3da <_free_r+0x4a>
 800f3e4:	6819      	ldr	r1, [r3, #0]
 800f3e6:	1858      	adds	r0, r3, r1
 800f3e8:	42a0      	cmp	r0, r4
 800f3ea:	d10b      	bne.n	800f404 <_free_r+0x74>
 800f3ec:	6820      	ldr	r0, [r4, #0]
 800f3ee:	4401      	add	r1, r0
 800f3f0:	1858      	adds	r0, r3, r1
 800f3f2:	4282      	cmp	r2, r0
 800f3f4:	6019      	str	r1, [r3, #0]
 800f3f6:	d1dd      	bne.n	800f3b4 <_free_r+0x24>
 800f3f8:	6810      	ldr	r0, [r2, #0]
 800f3fa:	6852      	ldr	r2, [r2, #4]
 800f3fc:	605a      	str	r2, [r3, #4]
 800f3fe:	4401      	add	r1, r0
 800f400:	6019      	str	r1, [r3, #0]
 800f402:	e7d7      	b.n	800f3b4 <_free_r+0x24>
 800f404:	d902      	bls.n	800f40c <_free_r+0x7c>
 800f406:	230c      	movs	r3, #12
 800f408:	602b      	str	r3, [r5, #0]
 800f40a:	e7d3      	b.n	800f3b4 <_free_r+0x24>
 800f40c:	6820      	ldr	r0, [r4, #0]
 800f40e:	1821      	adds	r1, r4, r0
 800f410:	428a      	cmp	r2, r1
 800f412:	bf04      	itt	eq
 800f414:	6811      	ldreq	r1, [r2, #0]
 800f416:	6852      	ldreq	r2, [r2, #4]
 800f418:	6062      	str	r2, [r4, #4]
 800f41a:	bf04      	itt	eq
 800f41c:	1809      	addeq	r1, r1, r0
 800f41e:	6021      	streq	r1, [r4, #0]
 800f420:	605c      	str	r4, [r3, #4]
 800f422:	e7c7      	b.n	800f3b4 <_free_r+0x24>
 800f424:	bd38      	pop	{r3, r4, r5, pc}
 800f426:	bf00      	nop
 800f428:	200049e4 	.word	0x200049e4

0800f42c <_malloc_r>:
 800f42c:	b570      	push	{r4, r5, r6, lr}
 800f42e:	1ccd      	adds	r5, r1, #3
 800f430:	f025 0503 	bic.w	r5, r5, #3
 800f434:	3508      	adds	r5, #8
 800f436:	2d0c      	cmp	r5, #12
 800f438:	bf38      	it	cc
 800f43a:	250c      	movcc	r5, #12
 800f43c:	2d00      	cmp	r5, #0
 800f43e:	4606      	mov	r6, r0
 800f440:	db01      	blt.n	800f446 <_malloc_r+0x1a>
 800f442:	42a9      	cmp	r1, r5
 800f444:	d903      	bls.n	800f44e <_malloc_r+0x22>
 800f446:	230c      	movs	r3, #12
 800f448:	6033      	str	r3, [r6, #0]
 800f44a:	2000      	movs	r0, #0
 800f44c:	bd70      	pop	{r4, r5, r6, pc}
 800f44e:	f000 f8a3 	bl	800f598 <__malloc_lock>
 800f452:	4a21      	ldr	r2, [pc, #132]	; (800f4d8 <_malloc_r+0xac>)
 800f454:	6814      	ldr	r4, [r2, #0]
 800f456:	4621      	mov	r1, r4
 800f458:	b991      	cbnz	r1, 800f480 <_malloc_r+0x54>
 800f45a:	4c20      	ldr	r4, [pc, #128]	; (800f4dc <_malloc_r+0xb0>)
 800f45c:	6823      	ldr	r3, [r4, #0]
 800f45e:	b91b      	cbnz	r3, 800f468 <_malloc_r+0x3c>
 800f460:	4630      	mov	r0, r6
 800f462:	f000 f845 	bl	800f4f0 <_sbrk_r>
 800f466:	6020      	str	r0, [r4, #0]
 800f468:	4629      	mov	r1, r5
 800f46a:	4630      	mov	r0, r6
 800f46c:	f000 f840 	bl	800f4f0 <_sbrk_r>
 800f470:	1c43      	adds	r3, r0, #1
 800f472:	d124      	bne.n	800f4be <_malloc_r+0x92>
 800f474:	230c      	movs	r3, #12
 800f476:	6033      	str	r3, [r6, #0]
 800f478:	4630      	mov	r0, r6
 800f47a:	f000 f88e 	bl	800f59a <__malloc_unlock>
 800f47e:	e7e4      	b.n	800f44a <_malloc_r+0x1e>
 800f480:	680b      	ldr	r3, [r1, #0]
 800f482:	1b5b      	subs	r3, r3, r5
 800f484:	d418      	bmi.n	800f4b8 <_malloc_r+0x8c>
 800f486:	2b0b      	cmp	r3, #11
 800f488:	d90f      	bls.n	800f4aa <_malloc_r+0x7e>
 800f48a:	600b      	str	r3, [r1, #0]
 800f48c:	50cd      	str	r5, [r1, r3]
 800f48e:	18cc      	adds	r4, r1, r3
 800f490:	4630      	mov	r0, r6
 800f492:	f000 f882 	bl	800f59a <__malloc_unlock>
 800f496:	f104 000b 	add.w	r0, r4, #11
 800f49a:	1d23      	adds	r3, r4, #4
 800f49c:	f020 0007 	bic.w	r0, r0, #7
 800f4a0:	1ac3      	subs	r3, r0, r3
 800f4a2:	d0d3      	beq.n	800f44c <_malloc_r+0x20>
 800f4a4:	425a      	negs	r2, r3
 800f4a6:	50e2      	str	r2, [r4, r3]
 800f4a8:	e7d0      	b.n	800f44c <_malloc_r+0x20>
 800f4aa:	428c      	cmp	r4, r1
 800f4ac:	684b      	ldr	r3, [r1, #4]
 800f4ae:	bf16      	itet	ne
 800f4b0:	6063      	strne	r3, [r4, #4]
 800f4b2:	6013      	streq	r3, [r2, #0]
 800f4b4:	460c      	movne	r4, r1
 800f4b6:	e7eb      	b.n	800f490 <_malloc_r+0x64>
 800f4b8:	460c      	mov	r4, r1
 800f4ba:	6849      	ldr	r1, [r1, #4]
 800f4bc:	e7cc      	b.n	800f458 <_malloc_r+0x2c>
 800f4be:	1cc4      	adds	r4, r0, #3
 800f4c0:	f024 0403 	bic.w	r4, r4, #3
 800f4c4:	42a0      	cmp	r0, r4
 800f4c6:	d005      	beq.n	800f4d4 <_malloc_r+0xa8>
 800f4c8:	1a21      	subs	r1, r4, r0
 800f4ca:	4630      	mov	r0, r6
 800f4cc:	f000 f810 	bl	800f4f0 <_sbrk_r>
 800f4d0:	3001      	adds	r0, #1
 800f4d2:	d0cf      	beq.n	800f474 <_malloc_r+0x48>
 800f4d4:	6025      	str	r5, [r4, #0]
 800f4d6:	e7db      	b.n	800f490 <_malloc_r+0x64>
 800f4d8:	200049e4 	.word	0x200049e4
 800f4dc:	200049e8 	.word	0x200049e8

0800f4e0 <realloc>:
 800f4e0:	4b02      	ldr	r3, [pc, #8]	; (800f4ec <realloc+0xc>)
 800f4e2:	460a      	mov	r2, r1
 800f4e4:	4601      	mov	r1, r0
 800f4e6:	6818      	ldr	r0, [r3, #0]
 800f4e8:	f000 b858 	b.w	800f59c <_realloc_r>
 800f4ec:	20000190 	.word	0x20000190

0800f4f0 <_sbrk_r>:
 800f4f0:	b538      	push	{r3, r4, r5, lr}
 800f4f2:	4c06      	ldr	r4, [pc, #24]	; (800f50c <_sbrk_r+0x1c>)
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	4605      	mov	r5, r0
 800f4f8:	4608      	mov	r0, r1
 800f4fa:	6023      	str	r3, [r4, #0]
 800f4fc:	f7f2 faba 	bl	8001a74 <_sbrk>
 800f500:	1c43      	adds	r3, r0, #1
 800f502:	d102      	bne.n	800f50a <_sbrk_r+0x1a>
 800f504:	6823      	ldr	r3, [r4, #0]
 800f506:	b103      	cbz	r3, 800f50a <_sbrk_r+0x1a>
 800f508:	602b      	str	r3, [r5, #0]
 800f50a:	bd38      	pop	{r3, r4, r5, pc}
 800f50c:	200064b0 	.word	0x200064b0

0800f510 <_raise_r>:
 800f510:	291f      	cmp	r1, #31
 800f512:	b538      	push	{r3, r4, r5, lr}
 800f514:	4604      	mov	r4, r0
 800f516:	460d      	mov	r5, r1
 800f518:	d904      	bls.n	800f524 <_raise_r+0x14>
 800f51a:	2316      	movs	r3, #22
 800f51c:	6003      	str	r3, [r0, #0]
 800f51e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f522:	bd38      	pop	{r3, r4, r5, pc}
 800f524:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f526:	b112      	cbz	r2, 800f52e <_raise_r+0x1e>
 800f528:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f52c:	b94b      	cbnz	r3, 800f542 <_raise_r+0x32>
 800f52e:	4620      	mov	r0, r4
 800f530:	f000 f830 	bl	800f594 <_getpid_r>
 800f534:	462a      	mov	r2, r5
 800f536:	4601      	mov	r1, r0
 800f538:	4620      	mov	r0, r4
 800f53a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f53e:	f000 b817 	b.w	800f570 <_kill_r>
 800f542:	2b01      	cmp	r3, #1
 800f544:	d00a      	beq.n	800f55c <_raise_r+0x4c>
 800f546:	1c59      	adds	r1, r3, #1
 800f548:	d103      	bne.n	800f552 <_raise_r+0x42>
 800f54a:	2316      	movs	r3, #22
 800f54c:	6003      	str	r3, [r0, #0]
 800f54e:	2001      	movs	r0, #1
 800f550:	e7e7      	b.n	800f522 <_raise_r+0x12>
 800f552:	2400      	movs	r4, #0
 800f554:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f558:	4628      	mov	r0, r5
 800f55a:	4798      	blx	r3
 800f55c:	2000      	movs	r0, #0
 800f55e:	e7e0      	b.n	800f522 <_raise_r+0x12>

0800f560 <raise>:
 800f560:	4b02      	ldr	r3, [pc, #8]	; (800f56c <raise+0xc>)
 800f562:	4601      	mov	r1, r0
 800f564:	6818      	ldr	r0, [r3, #0]
 800f566:	f7ff bfd3 	b.w	800f510 <_raise_r>
 800f56a:	bf00      	nop
 800f56c:	20000190 	.word	0x20000190

0800f570 <_kill_r>:
 800f570:	b538      	push	{r3, r4, r5, lr}
 800f572:	4c07      	ldr	r4, [pc, #28]	; (800f590 <_kill_r+0x20>)
 800f574:	2300      	movs	r3, #0
 800f576:	4605      	mov	r5, r0
 800f578:	4608      	mov	r0, r1
 800f57a:	4611      	mov	r1, r2
 800f57c:	6023      	str	r3, [r4, #0]
 800f57e:	f7f2 fa5f 	bl	8001a40 <_kill>
 800f582:	1c43      	adds	r3, r0, #1
 800f584:	d102      	bne.n	800f58c <_kill_r+0x1c>
 800f586:	6823      	ldr	r3, [r4, #0]
 800f588:	b103      	cbz	r3, 800f58c <_kill_r+0x1c>
 800f58a:	602b      	str	r3, [r5, #0]
 800f58c:	bd38      	pop	{r3, r4, r5, pc}
 800f58e:	bf00      	nop
 800f590:	200064b0 	.word	0x200064b0

0800f594 <_getpid_r>:
 800f594:	f7f2 ba4c 	b.w	8001a30 <_getpid>

0800f598 <__malloc_lock>:
 800f598:	4770      	bx	lr

0800f59a <__malloc_unlock>:
 800f59a:	4770      	bx	lr

0800f59c <_realloc_r>:
 800f59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f59e:	4607      	mov	r7, r0
 800f5a0:	4614      	mov	r4, r2
 800f5a2:	460e      	mov	r6, r1
 800f5a4:	b921      	cbnz	r1, 800f5b0 <_realloc_r+0x14>
 800f5a6:	4611      	mov	r1, r2
 800f5a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f5ac:	f7ff bf3e 	b.w	800f42c <_malloc_r>
 800f5b0:	b922      	cbnz	r2, 800f5bc <_realloc_r+0x20>
 800f5b2:	f7ff feed 	bl	800f390 <_free_r>
 800f5b6:	4625      	mov	r5, r4
 800f5b8:	4628      	mov	r0, r5
 800f5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5bc:	f000 f814 	bl	800f5e8 <_malloc_usable_size_r>
 800f5c0:	42a0      	cmp	r0, r4
 800f5c2:	d20f      	bcs.n	800f5e4 <_realloc_r+0x48>
 800f5c4:	4621      	mov	r1, r4
 800f5c6:	4638      	mov	r0, r7
 800f5c8:	f7ff ff30 	bl	800f42c <_malloc_r>
 800f5cc:	4605      	mov	r5, r0
 800f5ce:	2800      	cmp	r0, #0
 800f5d0:	d0f2      	beq.n	800f5b8 <_realloc_r+0x1c>
 800f5d2:	4631      	mov	r1, r6
 800f5d4:	4622      	mov	r2, r4
 800f5d6:	f7ff fec7 	bl	800f368 <memcpy>
 800f5da:	4631      	mov	r1, r6
 800f5dc:	4638      	mov	r0, r7
 800f5de:	f7ff fed7 	bl	800f390 <_free_r>
 800f5e2:	e7e9      	b.n	800f5b8 <_realloc_r+0x1c>
 800f5e4:	4635      	mov	r5, r6
 800f5e6:	e7e7      	b.n	800f5b8 <_realloc_r+0x1c>

0800f5e8 <_malloc_usable_size_r>:
 800f5e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5ec:	1f18      	subs	r0, r3, #4
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	bfbc      	itt	lt
 800f5f2:	580b      	ldrlt	r3, [r1, r0]
 800f5f4:	18c0      	addlt	r0, r0, r3
 800f5f6:	4770      	bx	lr

0800f5f8 <_init>:
 800f5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5fa:	bf00      	nop
 800f5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5fe:	bc08      	pop	{r3}
 800f600:	469e      	mov	lr, r3
 800f602:	4770      	bx	lr

0800f604 <_fini>:
 800f604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f606:	bf00      	nop
 800f608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f60a:	bc08      	pop	{r3}
 800f60c:	469e      	mov	lr, r3
 800f60e:	4770      	bx	lr
