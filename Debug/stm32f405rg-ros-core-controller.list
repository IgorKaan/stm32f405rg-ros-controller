
stm32f405rg-ros-core-controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  0800f530  0800f530  0001f530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb04  0800fb04  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb04  0800fb04  0001fb04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb0c  0800fb0c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fb0c  0800fb0c  0001fb0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb14  0800fb14  0001fb14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800fb18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000062bc  200001f4  0800fd0c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200064b0  0800fd0c  000264b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030308  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005de3  00000000  00000000  0005052c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f48  00000000  00000000  00056310  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d20  00000000  00000000  00058258  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002934d  00000000  00000000  00059f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b404  00000000  00000000  000832c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dcae9  00000000  00000000  0009e6c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017b1b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086e0  00000000  00000000  0017b230  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f518 	.word	0x0800f518

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800f518 	.word	0x0800f518

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000210 	.word	0x20000210
 8000510:	20000264 	.word	0x20000264

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b0aa      	sub	sp, #168	; 0xa8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f004 fad7 	bl	8004acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f8e3 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f9af 	bl	8000884 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000526:	f000 f949 	bl	80007bc <MX_CAN1_Init>
  MX_I2C1_Init();
 800052a:	f000 f97d 	bl	8000828 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ctrl = read_id();
 800052e:	f000 fc65 	bl	8000dfc <read_id>
 8000532:	4603      	mov	r3, r0
 8000534:	461a      	mov	r2, r3
 8000536:	4b5b      	ldr	r3, [pc, #364]	; (80006a4 <main+0x190>)
 8000538:	701a      	strb	r2, [r3, #0]
  MPU9250_calibrate();
 800053a:	f000 fc95 	bl	8000e68 <MPU9250_calibrate>

  HAL_Delay(2000);
 800053e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000542:	f004 fb05 	bl	8004b50 <HAL_Delay>
  MPU9250_init();
 8000546:	f000 fc6d 	bl	8000e24 <MPU9250_init>
  //HAL_Delay(500);
  init_ROS();
 800054a:	f003 f801 	bl	8003550 <init_ROS>
  //HAL_Delay(500);

  left_wheels_Header.DLC = 4;
 800054e:	4b56      	ldr	r3, [pc, #344]	; (80006a8 <main+0x194>)
 8000550:	2204      	movs	r2, #4
 8000552:	611a      	str	r2, [r3, #16]
  left_wheels_Header.IDE = CAN_ID_STD;
 8000554:	4b54      	ldr	r3, [pc, #336]	; (80006a8 <main+0x194>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  left_wheels_Header.RTR = CAN_RTR_DATA;
 800055a:	4b53      	ldr	r3, [pc, #332]	; (80006a8 <main+0x194>)
 800055c:	2200      	movs	r2, #0
 800055e:	60da      	str	r2, [r3, #12]
  left_wheels_Header.StdId = 0xF;
 8000560:	4b51      	ldr	r3, [pc, #324]	; (80006a8 <main+0x194>)
 8000562:	220f      	movs	r2, #15
 8000564:	601a      	str	r2, [r3, #0]

  right_wheels_Header.DLC = 4;
 8000566:	4b51      	ldr	r3, [pc, #324]	; (80006ac <main+0x198>)
 8000568:	2204      	movs	r2, #4
 800056a:	611a      	str	r2, [r3, #16]
  right_wheels_Header.IDE = CAN_ID_STD;
 800056c:	4b4f      	ldr	r3, [pc, #316]	; (80006ac <main+0x198>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  right_wheels_Header.RTR = CAN_RTR_DATA;
 8000572:	4b4e      	ldr	r3, [pc, #312]	; (80006ac <main+0x198>)
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
  right_wheels_Header.StdId = 0x1F;
 8000578:	4b4c      	ldr	r3, [pc, #304]	; (80006ac <main+0x198>)
 800057a:	221f      	movs	r2, #31
 800057c:	601a      	str	r2, [r3, #0]

  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800057e:	4b4c      	ldr	r3, [pc, #304]	; (80006b0 <main+0x19c>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0;
 8000584:	4b4a      	ldr	r3, [pc, #296]	; (80006b0 <main+0x19c>)
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 800058a:	4b49      	ldr	r3, [pc, #292]	; (80006b0 <main+0x19c>)
 800058c:	2200      	movs	r2, #0
 800058e:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 8000590:	4b47      	ldr	r3, [pc, #284]	; (80006b0 <main+0x19c>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8000596:	4b46      	ldr	r3, [pc, #280]	; (80006b0 <main+0x19c>)
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800059c:	4b44      	ldr	r3, [pc, #272]	; (80006b0 <main+0x19c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	61da      	str	r2, [r3, #28]
  //sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterActivation = ENABLE;
 80005a2:	4b43      	ldr	r3, [pc, #268]	; (80006b0 <main+0x19c>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80005a8:	4941      	ldr	r1, [pc, #260]	; (80006b0 <main+0x19c>)
 80005aa:	4842      	ldr	r0, [pc, #264]	; (80006b4 <main+0x1a0>)
 80005ac:	f004 fbee 	bl	8004d8c <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1);
 80005b0:	4840      	ldr	r0, [pc, #256]	; (80006b4 <main+0x1a0>)
 80005b2:	f004 fccb 	bl	8004f4c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005b6:	2102      	movs	r1, #2
 80005b8:	483e      	ldr	r0, [pc, #248]	; (80006b4 <main+0x1a0>)
 80005ba:	f004 fef8 	bl	80053ae <HAL_CAN_ActivateNotification>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005be:	4b3e      	ldr	r3, [pc, #248]	; (80006b8 <main+0x1a4>)
 80005c0:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80005c4:	461d      	mov	r5, r3
 80005c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f00c fed1 	bl	800d380 <osThreadCreate>
 80005de:	4602      	mov	r2, r0
 80005e0:	4b36      	ldr	r3, [pc, #216]	; (80006bc <main+0x1a8>)
 80005e2:	601a      	str	r2, [r3, #0]

  /* definition and creation of task1 */
  osThreadDef(task1, StartTask02, osPriorityNormal, 0, 128);
 80005e4:	4b36      	ldr	r3, [pc, #216]	; (80006c0 <main+0x1ac>)
 80005e6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 80005f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f00c febe 	bl	800d380 <osThreadCreate>
 8000604:	4602      	mov	r2, r0
 8000606:	4b2f      	ldr	r3, [pc, #188]	; (80006c4 <main+0x1b0>)
 8000608:	601a      	str	r2, [r3, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, StartTask03, osPriorityHigh, 0, 128);
 800060a:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <main+0x1b4>)
 800060c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000610:	461d      	mov	r5, r3
 8000612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000616:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 800061e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f00c feab 	bl	800d380 <osThreadCreate>
 800062a:	4602      	mov	r2, r0
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <main+0x1b8>)
 800062e:	601a      	str	r2, [r3, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, StartTask04, osPriorityNormal, 0, 128);
 8000630:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <main+0x1bc>)
 8000632:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000636:	461d      	mov	r5, r3
 8000638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000640:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3), NULL);
 8000644:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f00c fe98 	bl	800d380 <osThreadCreate>
 8000650:	4602      	mov	r2, r0
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <main+0x1c0>)
 8000654:	601a      	str	r2, [r3, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, StartTask05, osPriorityIdle, 0, 128);
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <main+0x1c4>)
 8000658:	f107 041c 	add.w	r4, r7, #28
 800065c:	461d      	mov	r5, r3
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task4Handle = osThreadCreate(osThread(task4), NULL);
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f00c fe85 	bl	800d380 <osThreadCreate>
 8000676:	4602      	mov	r2, r0
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <main+0x1c8>)
 800067a:	601a      	str	r2, [r3, #0]

  /* definition and creation of task5 */
  osThreadDef(task5, StartTask06, osPriorityIdle, 0, 128);
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <main+0x1cc>)
 800067e:	463c      	mov	r4, r7
 8000680:	461d      	mov	r5, r3
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task5Handle = osThreadCreate(osThread(task5), NULL);
 800068e:	463b      	mov	r3, r7
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f00c fe74 	bl	800d380 <osThreadCreate>
 8000698:	4602      	mov	r2, r0
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <main+0x1d0>)
 800069c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800069e:	f00c fe68 	bl	800d372 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <main+0x18e>
 80006a4:	2000046c 	.word	0x2000046c
 80006a8:	20004a20 	.word	0x20004a20
 80006ac:	20004edc 	.word	0x20004edc
 80006b0:	200049e8 	.word	0x200049e8
 80006b4:	20004f1c 	.word	0x20004f1c
 80006b8:	0800f53c 	.word	0x0800f53c
 80006bc:	20004a14 	.word	0x20004a14
 80006c0:	0800f560 	.word	0x0800f560
 80006c4:	20004aa0 	.word	0x20004aa0
 80006c8:	0800f584 	.word	0x0800f584
 80006cc:	20004f8c 	.word	0x20004f8c
 80006d0:	0800f5a8 	.word	0x0800f5a8
 80006d4:	20004ac8 	.word	0x20004ac8
 80006d8:	0800f5cc 	.word	0x0800f5cc
 80006dc:	20004ab0 	.word	0x20004ab0
 80006e0:	0800f5f0 	.word	0x0800f5f0
 80006e4:	20004aa8 	.word	0x20004aa8

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	2230      	movs	r2, #48	; 0x30
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f00e fdd1 	bl	800f29e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <SystemClock_Config+0xcc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a27      	ldr	r2, [pc, #156]	; (80007b4 <SystemClock_Config+0xcc>)
 8000716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <SystemClock_Config+0xcc>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <SystemClock_Config+0xd0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <SystemClock_Config+0xd0>)
 8000732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <SystemClock_Config+0xd0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000744:	2301      	movs	r3, #1
 8000746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000752:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000758:	2304      	movs	r3, #4
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800075c:	23a8      	movs	r3, #168	; 0xa8
 800075e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000760:	2302      	movs	r3, #2
 8000762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000764:	2307      	movs	r3, #7
 8000766:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 0320 	add.w	r3, r7, #32
 800076c:	4618      	mov	r0, r3
 800076e:	f008 fff9 	bl	8009764 <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000778:	f000 fab4 	bl	8000ce4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077c:	230f      	movs	r3, #15
 800077e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000780:	2302      	movs	r3, #2
 8000782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000788:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800078c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000792:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2105      	movs	r1, #5
 800079a:	4618      	mov	r0, r3
 800079c:	f009 fa52 	bl	8009c44 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007a6:	f000 fa9d 	bl	8000ce4 <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3750      	adds	r7, #80	; 0x50
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_CAN1_Init+0x64>)
 80007c2:	4a18      	ldr	r2, [pc, #96]	; (8000824 <MX_CAN1_Init+0x68>)
 80007c4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_CAN1_Init+0x64>)
 80007c8:	2203      	movs	r2, #3
 80007ca:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_CAN1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_CAN1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_CAN1_Init+0x64>)
 80007da:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80007de:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_CAN1_Init+0x64>)
 80007e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007e6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <MX_CAN1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_CAN1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_CAN1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_CAN1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_CAN1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_CAN1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_CAN1_Init+0x64>)
 800080e:	f004 f9c1 	bl	8004b94 <HAL_CAN_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000818:	f000 fa64 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20004f1c 	.word	0x20004f1c
 8000824:	40006400 	.word	0x40006400

08000828 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_I2C1_Init+0x50>)
 800082e:	4a13      	ldr	r2, [pc, #76]	; (800087c <MX_I2C1_Init+0x54>)
 8000830:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_I2C1_Init+0x50>)
 8000834:	4a12      	ldr	r2, [pc, #72]	; (8000880 <MX_I2C1_Init+0x58>)
 8000836:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_I2C1_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_I2C1_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_I2C1_Init+0x50>)
 8000846:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800084a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_I2C1_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_I2C1_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <MX_I2C1_Init+0x50>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_I2C1_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_I2C1_Init+0x50>)
 8000866:	f005 fab9 	bl	8005ddc <HAL_I2C_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000870:	f000 fa38 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20004a44 	.word	0x20004a44
 800087c:	40005400 	.word	0x40005400
 8000880:	00061a80 	.word	0x00061a80

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_GPIO_Init+0x68>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <MX_GPIO_Init+0x68>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_GPIO_Init+0x68>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_GPIO_Init+0x68>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <MX_GPIO_Init+0x68>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <MX_GPIO_Init+0x68>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_GPIO_Init+0x68>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <MX_GPIO_Init+0x68>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_GPIO_Init+0x68>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

}
 80008de:	bf00      	nop
 80008e0:	3714      	adds	r7, #20
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800

080008f0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	can_res++;
 80008f8:	4b6d      	ldr	r3, [pc, #436]	; (8000ab0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	3301      	adds	r3, #1
 80008fe:	4a6c      	ldr	r2, [pc, #432]	; (8000ab0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8000900:	6013      	str	r3, [r2, #0]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can_RxHeader, canRXData);
 8000902:	4b6c      	ldr	r3, [pc, #432]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000904:	4a6c      	ldr	r2, [pc, #432]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000906:	2100      	movs	r1, #0
 8000908:	486c      	ldr	r0, [pc, #432]	; (8000abc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 800090a:	f004 fc3e 	bl	800518a <HAL_CAN_GetRxMessage>

	if (can_RxHeader.StdId == 0xA) {
 800090e:	4b6a      	ldr	r3, [pc, #424]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b0a      	cmp	r3, #10
 8000914:	d11c      	bne.n	8000950 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
		speedRXDataLeftFrontWheel = canRXData[0];
 8000916:	4b67      	ldr	r3, [pc, #412]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000918:	781a      	ldrb	r2, [r3, #0]
 800091a:	4b69      	ldr	r3, [pc, #420]	; (8000ac0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800091c:	701a      	strb	r2, [r3, #0]
		sideRXDataLeftFrontWheel = canRXData[1];
 800091e:	4b65      	ldr	r3, [pc, #404]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000920:	785a      	ldrb	r2, [r3, #1]
 8000922:	4b68      	ldr	r3, [pc, #416]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000924:	701a      	strb	r2, [r3, #0]
		speedRXDataLeftBackWheel = canRXData[2];
 8000926:	4b63      	ldr	r3, [pc, #396]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000928:	789a      	ldrb	r2, [r3, #2]
 800092a:	4b67      	ldr	r3, [pc, #412]	; (8000ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 800092c:	701a      	strb	r2, [r3, #0]
		sideRXDataLeftBackWheel = canRXData[3];
 800092e:	4b61      	ldr	r3, [pc, #388]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000930:	78da      	ldrb	r2, [r3, #3]
 8000932:	4b66      	ldr	r3, [pc, #408]	; (8000acc <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 8000934:	701a      	strb	r2, [r3, #0]
		current_left_1 = canRXData[4];
 8000936:	4b5f      	ldr	r3, [pc, #380]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000938:	791a      	ldrb	r2, [r3, #4]
 800093a:	4b65      	ldr	r3, [pc, #404]	; (8000ad0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 800093c:	701a      	strb	r2, [r3, #0]
		current_left_2 = canRXData[5];
 800093e:	4b5d      	ldr	r3, [pc, #372]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000940:	795a      	ldrb	r2, [r3, #5]
 8000942:	4b64      	ldr	r3, [pc, #400]	; (8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000944:	701a      	strb	r2, [r3, #0]
		temp_left = canRXData[6];
 8000946:	4b5b      	ldr	r3, [pc, #364]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000948:	799a      	ldrb	r2, [r3, #6]
 800094a:	4b63      	ldr	r3, [pc, #396]	; (8000ad8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800094c:	701a      	strb	r2, [r3, #0]
 800094e:	e08f      	b.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x1A) {
 8000950:	4b59      	ldr	r3, [pc, #356]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b1a      	cmp	r3, #26
 8000956:	d11c      	bne.n	8000992 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
		speedRXDataRightFrontWheel = canRXData[0];
 8000958:	4b56      	ldr	r3, [pc, #344]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800095a:	781a      	ldrb	r2, [r3, #0]
 800095c:	4b5f      	ldr	r3, [pc, #380]	; (8000adc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 800095e:	701a      	strb	r2, [r3, #0]
		sideRXDataRightFrontWheel = canRXData[1];
 8000960:	4b54      	ldr	r3, [pc, #336]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000962:	785a      	ldrb	r2, [r3, #1]
 8000964:	4b5e      	ldr	r3, [pc, #376]	; (8000ae0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000966:	701a      	strb	r2, [r3, #0]
		speedRXDataRightBackWheel = canRXData[2];
 8000968:	4b52      	ldr	r3, [pc, #328]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800096a:	789a      	ldrb	r2, [r3, #2]
 800096c:	4b5d      	ldr	r3, [pc, #372]	; (8000ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 800096e:	701a      	strb	r2, [r3, #0]
		sideRXDataRightBackWheel = canRXData[3];
 8000970:	4b50      	ldr	r3, [pc, #320]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000972:	78da      	ldrb	r2, [r3, #3]
 8000974:	4b5c      	ldr	r3, [pc, #368]	; (8000ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000976:	701a      	strb	r2, [r3, #0]
		current_right_1 = canRXData[4];
 8000978:	4b4e      	ldr	r3, [pc, #312]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800097a:	791a      	ldrb	r2, [r3, #4]
 800097c:	4b5b      	ldr	r3, [pc, #364]	; (8000aec <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 800097e:	701a      	strb	r2, [r3, #0]
		current_right_2 = canRXData[5];
 8000980:	4b4c      	ldr	r3, [pc, #304]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000982:	795a      	ldrb	r2, [r3, #5]
 8000984:	4b5a      	ldr	r3, [pc, #360]	; (8000af0 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000986:	701a      	strb	r2, [r3, #0]
		temp_right = canRXData[6];
 8000988:	4b4a      	ldr	r3, [pc, #296]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800098a:	799a      	ldrb	r2, [r3, #6]
 800098c:	4b59      	ldr	r3, [pc, #356]	; (8000af4 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 800098e:	701a      	strb	r2, [r3, #0]
 8000990:	e06e      	b.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x1D) {
 8000992:	4b49      	ldr	r3, [pc, #292]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b1d      	cmp	r3, #29
 8000998:	d109      	bne.n	80009ae <HAL_CAN_RxFifo0MsgPendingCallback+0xbe>
		sensorData1 = canRXData[0];
 800099a:	4b46      	ldr	r3, [pc, #280]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800099c:	781a      	ldrb	r2, [r3, #0]
 800099e:	4b56      	ldr	r3, [pc, #344]	; (8000af8 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 80009a0:	701a      	strb	r2, [r3, #0]
		sensors_data[0]++;
 80009a2:	4b56      	ldr	r3, [pc, #344]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3301      	adds	r3, #1
 80009a8:	4a54      	ldr	r2, [pc, #336]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	e060      	b.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x2D) {
 80009ae:	4b42      	ldr	r3, [pc, #264]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b2d      	cmp	r3, #45	; 0x2d
 80009b4:	d109      	bne.n	80009ca <HAL_CAN_RxFifo0MsgPendingCallback+0xda>
		sensorData2 = canRXData[0];
 80009b6:	4b3f      	ldr	r3, [pc, #252]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 80009b8:	781a      	ldrb	r2, [r3, #0]
 80009ba:	4b51      	ldr	r3, [pc, #324]	; (8000b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80009bc:	701a      	strb	r2, [r3, #0]
		sensors_data[1]++;
 80009be:	4b4f      	ldr	r3, [pc, #316]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	3301      	adds	r3, #1
 80009c4:	4a4d      	ldr	r2, [pc, #308]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009c6:	6053      	str	r3, [r2, #4]
 80009c8:	e052      	b.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x3D) {
 80009ca:	4b3b      	ldr	r3, [pc, #236]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b3d      	cmp	r3, #61	; 0x3d
 80009d0:	d109      	bne.n	80009e6 <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
		sensorData3 = canRXData[0];
 80009d2:	4b38      	ldr	r3, [pc, #224]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	4b4b      	ldr	r3, [pc, #300]	; (8000b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80009d8:	701a      	strb	r2, [r3, #0]
		sensors_data[2]++;
 80009da:	4b48      	ldr	r3, [pc, #288]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	3301      	adds	r3, #1
 80009e0:	4a46      	ldr	r2, [pc, #280]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009e2:	6093      	str	r3, [r2, #8]
 80009e4:	e044      	b.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x4D) {
 80009e6:	4b34      	ldr	r3, [pc, #208]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b4d      	cmp	r3, #77	; 0x4d
 80009ec:	d109      	bne.n	8000a02 <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
		sensorData4 = canRXData[0];
 80009ee:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 80009f0:	781a      	ldrb	r2, [r3, #0]
 80009f2:	4b45      	ldr	r3, [pc, #276]	; (8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 80009f4:	701a      	strb	r2, [r3, #0]
		sensors_data[3]++;
 80009f6:	4b41      	ldr	r3, [pc, #260]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	3301      	adds	r3, #1
 80009fc:	4a3f      	ldr	r2, [pc, #252]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80009fe:	60d3      	str	r3, [r2, #12]
 8000a00:	e036      	b.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x5D) {
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b5d      	cmp	r3, #93	; 0x5d
 8000a08:	d109      	bne.n	8000a1e <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
		sensorData5 = canRXData[0];
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a0c:	781a      	ldrb	r2, [r3, #0]
 8000a0e:	4b3f      	ldr	r3, [pc, #252]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000a10:	701a      	strb	r2, [r3, #0]
		sensors_data[4]++;
 8000a12:	4b3a      	ldr	r3, [pc, #232]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a14:	691b      	ldr	r3, [r3, #16]
 8000a16:	3301      	adds	r3, #1
 8000a18:	4a38      	ldr	r2, [pc, #224]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a1a:	6113      	str	r3, [r2, #16]
 8000a1c:	e028      	b.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x6D) {
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b6d      	cmp	r3, #109	; 0x6d
 8000a24:	d109      	bne.n	8000a3a <HAL_CAN_RxFifo0MsgPendingCallback+0x14a>
		sensorData6 = canRXData[0];
 8000a26:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	4b39      	ldr	r3, [pc, #228]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000a2c:	701a      	strb	r2, [r3, #0]
		sensors_data[5]++;
 8000a2e:	4b33      	ldr	r3, [pc, #204]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	3301      	adds	r3, #1
 8000a34:	4a31      	ldr	r2, [pc, #196]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a36:	6153      	str	r3, [r2, #20]
 8000a38:	e01a      	b.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x7D) {
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b7d      	cmp	r3, #125	; 0x7d
 8000a40:	d109      	bne.n	8000a56 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
		sensorData7 = canRXData[0];
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a44:	781a      	ldrb	r2, [r3, #0]
 8000a46:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8000a48:	701a      	strb	r2, [r3, #0]
		sensors_data[6]++;
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	4a2a      	ldr	r2, [pc, #168]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	e00c      	b.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
	}
	else if (can_RxHeader.StdId == 0x8D) {
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b8d      	cmp	r3, #141	; 0x8d
 8000a5c:	d108      	bne.n	8000a70 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
		sensorData8 = canRXData[0];
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000a60:	781a      	ldrb	r2, [r3, #0]
 8000a62:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8000a64:	701a      	strb	r2, [r3, #0]
		sensors_data[7]++;
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	4a23      	ldr	r2, [pc, #140]	; (8000afc <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000a6e:	61d3      	str	r3, [r2, #28]
	}
	diagnostics_data[0] = current_left_1;
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8000a72:	781a      	ldrb	r2, [r3, #0]
 8000a74:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000a76:	701a      	strb	r2, [r3, #0]
	diagnostics_data[1] = current_left_2;
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000a7a:	781a      	ldrb	r2, [r3, #0]
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000a7e:	705a      	strb	r2, [r3, #1]
	diagnostics_data[2] = current_right_1;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000a82:	781a      	ldrb	r2, [r3, #0]
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000a86:	709a      	strb	r2, [r3, #2]
	diagnostics_data[3] = current_right_2;
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000a8e:	70da      	strb	r2, [r3, #3]
	diagnostics_data[4] = temp_left;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000a92:	781a      	ldrb	r2, [r3, #0]
 8000a94:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000a96:	711a      	strb	r2, [r3, #4]
	diagnostics_data[5] = temp_right;
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8000a9e:	715a      	strb	r2, [r3, #5]
	can_RxHeader.StdId = 0x0000;
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000464 	.word	0x20000464
 8000ab4:	20004ed0 	.word	0x20004ed0
 8000ab8:	20004f4c 	.word	0x20004f4c
 8000abc:	20004f1c 	.word	0x20004f1c
 8000ac0:	20004aac 	.word	0x20004aac
 8000ac4:	20004f10 	.word	0x20004f10
 8000ac8:	20004ab4 	.word	0x20004ab4
 8000acc:	20004ac4 	.word	0x20004ac4
 8000ad0:	2000047f 	.word	0x2000047f
 8000ad4:	20000480 	.word	0x20000480
 8000ad8:	20000482 	.word	0x20000482
 8000adc:	20004f18 	.word	0x20004f18
 8000ae0:	20004ef4 	.word	0x20004ef4
 8000ae4:	20004acc 	.word	0x20004acc
 8000ae8:	20004a1c 	.word	0x20004a1c
 8000aec:	2000047d 	.word	0x2000047d
 8000af0:	2000047e 	.word	0x2000047e
 8000af4:	20000481 	.word	0x20000481
 8000af8:	20000475 	.word	0x20000475
 8000afc:	20004f68 	.word	0x20004f68
 8000b00:	20000476 	.word	0x20000476
 8000b04:	20000477 	.word	0x20000477
 8000b08:	20000478 	.word	0x20000478
 8000b0c:	20000479 	.word	0x20000479
 8000b10:	2000047a 	.word	0x2000047a
 8000b14:	2000047b 	.word	0x2000047b
 8000b18:	2000047c 	.word	0x2000047c
 8000b1c:	20000484 	.word	0x20000484

08000b20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000b28:	f00d fe2a 	bl	800e780 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  gyro_handler();
 8000b2c:	f002 ff0e 	bl	800394c <gyro_handler>
	  osDelay(4);
 8000b30:	2004      	movs	r0, #4
 8000b32:	f00c fc71 	bl	800d418 <osDelay>
	  accel_handler();
 8000b36:	f002 ff37 	bl	80039a8 <accel_handler>
	  osDelay(4);
 8000b3a:	2004      	movs	r0, #4
 8000b3c:	f00c fc6c 	bl	800d418 <osDelay>
	  gyro_handler();
 8000b40:	e7f4      	b.n	8000b2c <StartDefaultTask+0xc>
	...

08000b44 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  MPU9250_getAllData(allData);
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <StartTask02+0x20>)
 8000b4e:	f000 fba3 	bl	8001298 <MPU9250_getAllData>
	  osDelay(10);
 8000b52:	200a      	movs	r0, #10
 8000b54:	f00c fc60 	bl	800d418 <osDelay>
	  count++;
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <StartTask02+0x24>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	4a02      	ldr	r2, [pc, #8]	; (8000b68 <StartTask02+0x24>)
 8000b60:	6013      	str	r3, [r2, #0]
	  MPU9250_getAllData(allData);
 8000b62:	e7f3      	b.n	8000b4c <StartTask02+0x8>
 8000b64:	20004f04 	.word	0x20004f04
 8000b68:	200004b8 	.word	0x200004b8

08000b6c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  left_wheels_data[0] = sideDataLeftFrontWheel;
 8000b74:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <StartTask03+0xc8>)
 8000b76:	f993 3000 	ldrsb.w	r3, [r3]
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <StartTask03+0xcc>)
 8000b7e:	701a      	strb	r2, [r3, #0]
	  left_wheels_data[1] = speedDataLeftFrontWheel;
 8000b80:	4b2e      	ldr	r3, [pc, #184]	; (8000c3c <StartTask03+0xd0>)
 8000b82:	f993 3000 	ldrsb.w	r3, [r3]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <StartTask03+0xcc>)
 8000b8a:	705a      	strb	r2, [r3, #1]
	  left_wheels_data[2] = sideDataLeftBackWheel;
 8000b8c:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <StartTask03+0xd4>)
 8000b8e:	f993 3000 	ldrsb.w	r3, [r3]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <StartTask03+0xcc>)
 8000b96:	709a      	strb	r2, [r3, #2]
	  left_wheels_data[3] = speedDataLeftBackWheel;
 8000b98:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <StartTask03+0xd8>)
 8000b9a:	f993 3000 	ldrsb.w	r3, [r3]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <StartTask03+0xcc>)
 8000ba2:	70da      	strb	r2, [r3, #3]
	  right_wheels_data[0] = sideDataRightFrontWheel;
 8000ba4:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <StartTask03+0xdc>)
 8000ba6:	f993 3000 	ldrsb.w	r3, [r3]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <StartTask03+0xe0>)
 8000bae:	701a      	strb	r2, [r3, #0]
	  right_wheels_data[1] = speedDataRightFrontWheel;
 8000bb0:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <StartTask03+0xe4>)
 8000bb2:	f993 3000 	ldrsb.w	r3, [r3]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <StartTask03+0xe0>)
 8000bba:	705a      	strb	r2, [r3, #1]
	  right_wheels_data[2] = sideDataRightBackWheel;
 8000bbc:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <StartTask03+0xe8>)
 8000bbe:	f993 3000 	ldrsb.w	r3, [r3]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <StartTask03+0xe0>)
 8000bc6:	709a      	strb	r2, [r3, #2]
	  right_wheels_data[3] = speedDataRightBackWheel;
 8000bc8:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <StartTask03+0xec>)
 8000bca:	f993 3000 	ldrsb.w	r3, [r3]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <StartTask03+0xe0>)
 8000bd2:	70da      	strb	r2, [r3, #3]
	  if( HAL_CAN_AddTxMessage(&hcan1, &left_wheels_Header, left_wheels_data, &TxMailbox) == HAL_OK) {
 8000bd4:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <StartTask03+0xf0>)
 8000bd6:	4a18      	ldr	r2, [pc, #96]	; (8000c38 <StartTask03+0xcc>)
 8000bd8:	4921      	ldr	r1, [pc, #132]	; (8000c60 <StartTask03+0xf4>)
 8000bda:	4822      	ldr	r0, [pc, #136]	; (8000c64 <StartTask03+0xf8>)
 8000bdc:	f004 f9fa 	bl	8004fd4 <HAL_CAN_AddTxMessage>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d104      	bne.n	8000bf0 <StartTask03+0x84>
		  can2++;
 8000be6:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <StartTask03+0xfc>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	3301      	adds	r3, #1
 8000bec:	4a1e      	ldr	r2, [pc, #120]	; (8000c68 <StartTask03+0xfc>)
 8000bee:	6013      	str	r3, [r2, #0]
	  }
	  osDelay(3);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f00c fc11 	bl	800d418 <osDelay>
	  HAL_CAN_AddTxMessage(&hcan1, &right_wheels_Header, right_wheels_data, &TxMailbox);
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <StartTask03+0xf0>)
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <StartTask03+0xe0>)
 8000bfa:	491c      	ldr	r1, [pc, #112]	; (8000c6c <StartTask03+0x100>)
 8000bfc:	4819      	ldr	r0, [pc, #100]	; (8000c64 <StartTask03+0xf8>)
 8000bfe:	f004 f9e9 	bl	8004fd4 <HAL_CAN_AddTxMessage>
	  osDelay(3);
 8000c02:	2003      	movs	r0, #3
 8000c04:	f00c fc08 	bl	800d418 <osDelay>
	  rpm_left_front_handler();
 8000c08:	f002 fdf2 	bl	80037f0 <rpm_left_front_handler>
	  osDelay(3);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f00c fc03 	bl	800d418 <osDelay>
	  rpm_left_back_handler();
 8000c12:	f002 fe61 	bl	80038d8 <rpm_left_back_handler>
	  osDelay(3);
 8000c16:	2003      	movs	r0, #3
 8000c18:	f00c fbfe 	bl	800d418 <osDelay>
	  rpm_right_front_handler();
 8000c1c:	f002 fdae 	bl	800377c <rpm_right_front_handler>
	  osDelay(3);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f00c fbf9 	bl	800d418 <osDelay>
	  rpm_right_back_handler();
 8000c26:	f002 fe1d 	bl	8003864 <rpm_right_back_handler>
	  osDelay(3);
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	f00c fbf4 	bl	800d418 <osDelay>
	  left_wheels_data[0] = sideDataLeftFrontWheel;
 8000c30:	e7a0      	b.n	8000b74 <StartTask03+0x8>
 8000c32:	bf00      	nop
 8000c34:	20000472 	.word	0x20000472
 8000c38:	2000048c 	.word	0x2000048c
 8000c3c:	2000046e 	.word	0x2000046e
 8000c40:	20000474 	.word	0x20000474
 8000c44:	20000470 	.word	0x20000470
 8000c48:	20000471 	.word	0x20000471
 8000c4c:	20000490 	.word	0x20000490
 8000c50:	2000046d 	.word	0x2000046d
 8000c54:	20000473 	.word	0x20000473
 8000c58:	2000046f 	.word	0x2000046f
 8000c5c:	20004ef8 	.word	0x20004ef8
 8000c60:	20004a20 	.word	0x20004a20
 8000c64:	20004f1c 	.word	0x20004f1c
 8000c68:	20004a98 	.word	0x20004a98
 8000c6c:	20004edc 	.word	0x20004edc

08000c70 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	  //diagnostics_data_handler();
	  sensors1_3_data_handler();
 8000c78:	f002 fd14 	bl	80036a4 <sensors1_3_data_handler>
	  osDelay(4);
 8000c7c:	2004      	movs	r0, #4
 8000c7e:	f00c fbcb 	bl	800d418 <osDelay>
	  sensors4_6_data_handler();
 8000c82:	f002 fd45 	bl	8003710 <sensors4_6_data_handler>
	  osDelay(4);
 8000c86:	2004      	movs	r0, #4
 8000c88:	f00c fbc6 	bl	800d418 <osDelay>
	  sensors1_3_data_handler();
 8000c8c:	e7f4      	b.n	8000c78 <StartTask04+0x8>

08000c8e <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
	  spinOnce();
 8000c96:	f002 feb5 	bl	8003a04 <spinOnce>
	  osDelay(10);
 8000c9a:	200a      	movs	r0, #10
 8000c9c:	f00c fbbc 	bl	800d418 <osDelay>
	  spinOnce();
 8000ca0:	e7f9      	b.n	8000c96 <StartTask05+0x8>

08000ca2 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void const * argument)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//	  if (count > 1000)
//	  vTaskSuspend(task1Handle);
//	  eTaskState myState;
	  osDelay(2000);
 8000caa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cae:	f00c fbb3 	bl	800d418 <osDelay>
 8000cb2:	e7fa      	b.n	8000caa <StartTask06+0x8>

08000cb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  ++tick;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000cc4:	6013      	str	r3, [r2, #0]
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d101      	bne.n	8000cd4 <HAL_TIM_PeriodElapsedCallback+0x20>
    HAL_IncTick();
 8000cd0:	f003 ff1e 	bl	8004b10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000468 	.word	0x20000468
 8000ce0:	40000400 	.word	0x40000400

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <error>:
void delay(uint32_t delayTime){
	uint32_t startTime =  sysTick_Time;
	while ( (sysTick_Time - startTime) < delayTime );
}

void error(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfc:	481d      	ldr	r0, [pc, #116]	; (8000d74 <error+0x80>)
 8000cfe:	f005 f851 	bl	8005da4 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000d02:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d06:	f003 ff23 	bl	8004b50 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000d0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d0e:	4819      	ldr	r0, [pc, #100]	; (8000d74 <error+0x80>)
 8000d10:	f005 f848 	bl	8005da4 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000d14:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d18:	f003 ff1a 	bl	8004b50 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000d1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d20:	4814      	ldr	r0, [pc, #80]	; (8000d74 <error+0x80>)
 8000d22:	f005 f83f 	bl	8005da4 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000d26:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d2a:	f003 ff11 	bl	8004b50 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000d2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d32:	4810      	ldr	r0, [pc, #64]	; (8000d74 <error+0x80>)
 8000d34:	f005 f836 	bl	8005da4 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000d38:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d3c:	f003 ff08 	bl	8004b50 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000d40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d44:	480b      	ldr	r0, [pc, #44]	; (8000d74 <error+0x80>)
 8000d46:	f005 f82d 	bl	8005da4 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000d4a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d4e:	f003 feff 	bl	8004b50 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000d52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d56:	4807      	ldr	r0, [pc, #28]	; (8000d74 <error+0x80>)
 8000d58:	f005 f824 	bl	8005da4 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000d5c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d60:	f003 fef6 	bl	8004b50 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <error+0x80>)
 8000d6a:	f005 f81b 	bl	8005da4 <HAL_GPIO_TogglePin>
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000

08000d78 <sensor_io_read>:

uint8_t sensor_io_read(uint16_t DeviceAddr, uint8_t RegisterAddr) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	460a      	mov	r2, r1
 8000d82:	80fb      	strh	r3, [r7, #6]
 8000d84:	4613      	mov	r3, r2
 8000d86:	717b      	strb	r3, [r7, #5]
	return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8000d88:	797a      	ldrb	r2, [r7, #5]
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f806 	bl	8000da0 <I2Cx_ReadData>
 8000d94:	4603      	mov	r3, r0
	return HAL_OK;
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <I2Cx_ReadData>:
uint8_t sensor_io_write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value) {
	I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
	return HAL_OK;
}

uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af04      	add	r7, sp, #16
 8000da6:	4603      	mov	r3, r0
 8000da8:	460a      	mov	r2, r1
 8000daa:	80fb      	strh	r3, [r7, #6]
 8000dac:	4613      	mov	r3, r2
 8000dae:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]
	value = 0;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <I2Cx_ReadData+0x54>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	b299      	uxth	r1, r3
 8000dc0:	797b      	ldrb	r3, [r7, #5]
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc8:	9302      	str	r3, [sp, #8]
 8000dca:	2301      	movs	r3, #1
 8000dcc:	9301      	str	r3, [sp, #4]
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <I2Cx_ReadData+0x54>)
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	4808      	ldr	r0, [pc, #32]	; (8000df8 <I2Cx_ReadData+0x58>)
 8000dd6:	f005 fa37 	bl	8006248 <HAL_I2C_Mem_Read>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <I2Cx_ReadData+0x48>
	{
	    error();
 8000de4:	f7ff ff86 	bl	8000cf4 <error>
	}
	return value;
 8000de8:	4b02      	ldr	r3, [pc, #8]	; (8000df4 <I2Cx_ReadData+0x54>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200004d4 	.word	0x200004d4
 8000df8:	20004a44 	.word	0x20004a44

08000dfc <read_id>:
	if ((read_id()==0xFF)||(read_id()==0x70)||(read_id()==0x48)) {

	}
}

uint8_t read_id(void) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	ctrl = 0x00;
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <read_id+0x24>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
	ctrl = sensor_io_read(0x68, 0x75);
 8000e06:	2175      	movs	r1, #117	; 0x75
 8000e08:	2068      	movs	r0, #104	; 0x68
 8000e0a:	f7ff ffb5 	bl	8000d78 <sensor_io_read>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <read_id+0x24>)
 8000e14:	701a      	strb	r2, [r3, #0]
	return ctrl;
 8000e16:	4b02      	ldr	r3, [pc, #8]	; (8000e20 <read_id+0x24>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000046c 	.word	0x2000046c

08000e24 <MPU9250_init>:

void MPU9250_init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	//power up gyro
	MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	216b      	movs	r1, #107	; 0x6b
 8000e2c:	2068      	movs	r0, #104	; 0x68
 8000e2e:	f000 fbb3 	bl	8001598 <MPU9250_writeReg>
	//delay(100);
	MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8000e32:	2201      	movs	r2, #1
 8000e34:	216b      	movs	r1, #107	; 0x6b
 8000e36:	2068      	movs	r0, #104	; 0x68
 8000e38:	f000 fbae 	bl	8001598 <MPU9250_writeReg>

	MPU9250_writeReg(MPU9250_ADDRESS, CONFIG, 0x03);
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	211a      	movs	r1, #26
 8000e40:	2068      	movs	r0, #104	; 0x68
 8000e42:	f000 fba9 	bl	8001598 <MPU9250_writeReg>

	MPU9250_writeReg(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);
 8000e46:	2204      	movs	r2, #4
 8000e48:	2119      	movs	r1, #25
 8000e4a:	2068      	movs	r0, #104	; 0x68
 8000e4c:	f000 fba4 	bl	8001598 <MPU9250_writeReg>
	//MPU6050_SMPLRT_DIV
	//gyro config 500

	MPU9250_writeReg(MPU9250_ADDRESS, GYRO_CONFIG, 0x08);
 8000e50:	2208      	movs	r2, #8
 8000e52:	211b      	movs	r1, #27
 8000e54:	2068      	movs	r0, #104	; 0x68
 8000e56:	f000 fb9f 	bl	8001598 <MPU9250_writeReg>
	//accel config 8g
	MPU9250_writeReg(MPU9250_ADDRESS, ACCEL_CONFIG, 0x10);
 8000e5a:	2210      	movs	r2, #16
 8000e5c:	211c      	movs	r1, #28
 8000e5e:	2068      	movs	r0, #104	; 0x68
 8000e60:	f000 fb9a 	bl	8001598 <MPU9250_writeReg>

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <MPU9250_calibrate>:

//void calibrateMPU9250(float * dest1, float * dest2)
void MPU9250_calibrate()
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
    uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
    uint16_t ii, packet_count, fifo_count;
    //int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};

    // reset device
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8000e6e:	2280      	movs	r2, #128	; 0x80
 8000e70:	216b      	movs	r1, #107	; 0x6b
 8000e72:	2068      	movs	r0, #104	; 0x68
 8000e74:	f000 fb90 	bl	8001598 <MPU9250_writeReg>
    HAL_Delay(100);
 8000e78:	2064      	movs	r0, #100	; 0x64
 8000e7a:	f003 fe69 	bl	8004b50 <HAL_Delay>

    // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
    // else use the internal oscillator, bits 2:0 = 001
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	216b      	movs	r1, #107	; 0x6b
 8000e82:	2068      	movs	r0, #104	; 0x68
 8000e84:	f000 fb88 	bl	8001598 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	216c      	movs	r1, #108	; 0x6c
 8000e8c:	2068      	movs	r0, #104	; 0x68
 8000e8e:	f000 fb83 	bl	8001598 <MPU9250_writeReg>
    HAL_Delay(200);
 8000e92:	20c8      	movs	r0, #200	; 0xc8
 8000e94:	f003 fe5c 	bl	8004b50 <HAL_Delay>

    // Configure device for bias calculation
    MPU9250_writeReg(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2138      	movs	r1, #56	; 0x38
 8000e9c:	2068      	movs	r0, #104	; 0x68
 8000e9e:	f000 fb7b 	bl	8001598 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2123      	movs	r1, #35	; 0x23
 8000ea6:	2068      	movs	r0, #104	; 0x68
 8000ea8:	f000 fb76 	bl	8001598 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8000eac:	2200      	movs	r2, #0
 8000eae:	216b      	movs	r1, #107	; 0x6b
 8000eb0:	2068      	movs	r0, #104	; 0x68
 8000eb2:	f000 fb71 	bl	8001598 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2124      	movs	r1, #36	; 0x24
 8000eba:	2068      	movs	r0, #104	; 0x68
 8000ebc:	f000 fb6c 	bl	8001598 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	216a      	movs	r1, #106	; 0x6a
 8000ec4:	2068      	movs	r0, #104	; 0x68
 8000ec6:	f000 fb67 	bl	8001598 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8000eca:	220c      	movs	r2, #12
 8000ecc:	216a      	movs	r1, #106	; 0x6a
 8000ece:	2068      	movs	r0, #104	; 0x68
 8000ed0:	f000 fb62 	bl	8001598 <MPU9250_writeReg>
    HAL_Delay(15);
 8000ed4:	200f      	movs	r0, #15
 8000ed6:	f003 fe3b 	bl	8004b50 <HAL_Delay>

    // Configure MPU6050 gyro and accelerometer for bias calculation
    MPU9250_writeReg(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8000eda:	2201      	movs	r2, #1
 8000edc:	211a      	movs	r1, #26
 8000ede:	2068      	movs	r0, #104	; 0x68
 8000ee0:	f000 fb5a 	bl	8001598 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2119      	movs	r1, #25
 8000ee8:	2068      	movs	r0, #104	; 0x68
 8000eea:	f000 fb55 	bl	8001598 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8000eee:	2200      	movs	r2, #0
 8000ef0:	211b      	movs	r1, #27
 8000ef2:	2068      	movs	r0, #104	; 0x68
 8000ef4:	f000 fb50 	bl	8001598 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8000ef8:	2200      	movs	r2, #0
 8000efa:	211c      	movs	r1, #28
 8000efc:	2068      	movs	r0, #104	; 0x68
 8000efe:	f000 fb4b 	bl	8001598 <MPU9250_writeReg>

    //uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
    uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8000f02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f06:	84bb      	strh	r3, [r7, #36]	; 0x24

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
    MPU9250_writeReg(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 8000f08:	2240      	movs	r2, #64	; 0x40
 8000f0a:	216a      	movs	r1, #106	; 0x6a
 8000f0c:	2068      	movs	r0, #104	; 0x68
 8000f0e:	f000 fb43 	bl	8001598 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8000f12:	2278      	movs	r2, #120	; 0x78
 8000f14:	2123      	movs	r1, #35	; 0x23
 8000f16:	2068      	movs	r0, #104	; 0x68
 8000f18:	f000 fb3e 	bl	8001598 <MPU9250_writeReg>
    HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8000f1c:	2028      	movs	r0, #40	; 0x28
 8000f1e:	f003 fe17 	bl	8004b50 <HAL_Delay>

    // At end of sample accumulation, turn off FIFO sensor read
    MPU9250_writeReg(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8000f22:	2200      	movs	r2, #0
 8000f24:	2123      	movs	r1, #35	; 0x23
 8000f26:	2068      	movs	r0, #104	; 0x68
 8000f28:	f000 fb36 	bl	8001598 <MPU9250_writeReg>
    //readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
    fifo_count = MPU9250_readReg16Bit(MPU9250_ADDRESS, FIFO_COUNTH);
 8000f2c:	2172      	movs	r1, #114	; 0x72
 8000f2e:	2068      	movs	r0, #104	; 0x68
 8000f30:	f000 fb72 	bl	8001618 <MPU9250_readReg16Bit>
 8000f34:	4603      	mov	r3, r0
 8000f36:	847b      	strh	r3, [r7, #34]	; 0x22
    packet_count = fifo_count / 12;// How many sets of full gyro and accelerometer data for averaging
 8000f38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f3a:	4a58      	ldr	r2, [pc, #352]	; (800109c <MPU9250_calibrate+0x234>)
 8000f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f40:	08db      	lsrs	r3, r3, #3
 8000f42:	843b      	strh	r3, [r7, #32]

    for (ii = 0; ii < packet_count; ii++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f48:	e06f      	b.n	800102a <MPU9250_calibrate+0x1c2>
    {
        int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	813b      	strh	r3, [r7, #8]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	817b      	strh	r3, [r7, #10]
 8000f52:	2300      	movs	r3, #0
 8000f54:	81bb      	strh	r3, [r7, #12]
 8000f56:	2300      	movs	r3, #0
 8000f58:	803b      	strh	r3, [r7, #0]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	807b      	strh	r3, [r7, #2]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	80bb      	strh	r3, [r7, #4]
        MPU9250_readMulti(MPU9250_ADDRESS, FIFO_R_W, data, 12); // read data for averaging
 8000f62:	f107 0214 	add.w	r2, r7, #20
 8000f66:	230c      	movs	r3, #12
 8000f68:	2174      	movs	r1, #116	; 0x74
 8000f6a:	2068      	movs	r0, #104	; 0x68
 8000f6c:	f000 fb74 	bl	8001658 <MPU9250_readMulti>
        accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8000f70:	7d3b      	ldrb	r3, [r7, #20]
 8000f72:	021b      	lsls	r3, r3, #8
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	7d7b      	ldrb	r3, [r7, #21]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	813b      	strh	r3, [r7, #8]
        accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8000f80:	7dbb      	ldrb	r3, [r7, #22]
 8000f82:	021b      	lsls	r3, r3, #8
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	7dfb      	ldrb	r3, [r7, #23]
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	817b      	strh	r3, [r7, #10]
        accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8000f90:	7e3b      	ldrb	r3, [r7, #24]
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	7e7b      	ldrb	r3, [r7, #25]
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	81bb      	strh	r3, [r7, #12]
        gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8000fa0:	7ebb      	ldrb	r3, [r7, #26]
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	7efb      	ldrb	r3, [r7, #27]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	803b      	strh	r3, [r7, #0]
        gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8000fb0:	7f3b      	ldrb	r3, [r7, #28]
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	7f7b      	ldrb	r3, [r7, #29]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	807b      	strh	r3, [r7, #2]
        gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8000fc0:	7fbb      	ldrb	r3, [r7, #30]
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	7ffb      	ldrb	r3, [r7, #31]
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	80bb      	strh	r3, [r7, #4]

        accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8000fd0:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <MPU9250_calibrate+0x238>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a31      	ldr	r2, [pc, #196]	; (80010a0 <MPU9250_calibrate+0x238>)
 8000fdc:	6013      	str	r3, [r2, #0]
        accel_bias[1] += (int32_t) accel_temp[1];
 8000fde:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <MPU9250_calibrate+0x238>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a2d      	ldr	r2, [pc, #180]	; (80010a0 <MPU9250_calibrate+0x238>)
 8000fea:	6053      	str	r3, [r2, #4]
        accel_bias[2] += (int32_t) accel_temp[2];
 8000fec:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <MPU9250_calibrate+0x238>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a2a      	ldr	r2, [pc, #168]	; (80010a0 <MPU9250_calibrate+0x238>)
 8000ff8:	6093      	str	r3, [r2, #8]
        gyro_bias[0]  += (int32_t) gyro_temp[0];
 8000ffa:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <MPU9250_calibrate+0x23c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001002:	4413      	add	r3, r2
 8001004:	4a27      	ldr	r2, [pc, #156]	; (80010a4 <MPU9250_calibrate+0x23c>)
 8001006:	6013      	str	r3, [r2, #0]
        gyro_bias[1]  += (int32_t) gyro_temp[1];
 8001008:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <MPU9250_calibrate+0x23c>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001010:	4413      	add	r3, r2
 8001012:	4a24      	ldr	r2, [pc, #144]	; (80010a4 <MPU9250_calibrate+0x23c>)
 8001014:	6053      	str	r3, [r2, #4]
        gyro_bias[2]  += (int32_t) gyro_temp[2];
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <MPU9250_calibrate+0x23c>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800101e:	4413      	add	r3, r2
 8001020:	4a20      	ldr	r2, [pc, #128]	; (80010a4 <MPU9250_calibrate+0x23c>)
 8001022:	6093      	str	r3, [r2, #8]
    for (ii = 0; ii < packet_count; ii++)
 8001024:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001026:	3301      	adds	r3, #1
 8001028:	84fb      	strh	r3, [r7, #38]	; 0x26
 800102a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800102c:	8c3b      	ldrh	r3, [r7, #32]
 800102e:	429a      	cmp	r2, r3
 8001030:	d38b      	bcc.n	8000f4a <MPU9250_calibrate+0xe2>
    }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8001032:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MPU9250_calibrate+0x238>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	8c3b      	ldrh	r3, [r7, #32]
 8001038:	fb92 f3f3 	sdiv	r3, r2, r3
 800103c:	4a18      	ldr	r2, [pc, #96]	; (80010a0 <MPU9250_calibrate+0x238>)
 800103e:	6013      	str	r3, [r2, #0]
    accel_bias[1] /= (int32_t) packet_count;
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <MPU9250_calibrate+0x238>)
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	8c3b      	ldrh	r3, [r7, #32]
 8001046:	fb92 f3f3 	sdiv	r3, r2, r3
 800104a:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <MPU9250_calibrate+0x238>)
 800104c:	6053      	str	r3, [r2, #4]
    accel_bias[2] /= (int32_t) packet_count;
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MPU9250_calibrate+0x238>)
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	8c3b      	ldrh	r3, [r7, #32]
 8001054:	fb92 f3f3 	sdiv	r3, r2, r3
 8001058:	4a11      	ldr	r2, [pc, #68]	; (80010a0 <MPU9250_calibrate+0x238>)
 800105a:	6093      	str	r3, [r2, #8]
    gyro_bias[0]  /= (int32_t) packet_count;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MPU9250_calibrate+0x23c>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	8c3b      	ldrh	r3, [r7, #32]
 8001062:	fb92 f3f3 	sdiv	r3, r2, r3
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <MPU9250_calibrate+0x23c>)
 8001068:	6013      	str	r3, [r2, #0]
    gyro_bias[1]  /= (int32_t) packet_count;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MPU9250_calibrate+0x23c>)
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	8c3b      	ldrh	r3, [r7, #32]
 8001070:	fb92 f3f3 	sdiv	r3, r2, r3
 8001074:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <MPU9250_calibrate+0x23c>)
 8001076:	6053      	str	r3, [r2, #4]
    gyro_bias[2]  /= (int32_t) packet_count;
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <MPU9250_calibrate+0x23c>)
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	8c3b      	ldrh	r3, [r7, #32]
 800107e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001082:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <MPU9250_calibrate+0x23c>)
 8001084:	6093      	str	r3, [r2, #8]

    if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MPU9250_calibrate+0x238>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	dd0c      	ble.n	80010a8 <MPU9250_calibrate+0x240>
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <MPU9250_calibrate+0x238>)
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	4a02      	ldr	r2, [pc, #8]	; (80010a0 <MPU9250_calibrate+0x238>)
 8001098:	6093      	str	r3, [r2, #8]
 800109a:	e00b      	b.n	80010b4 <MPU9250_calibrate+0x24c>
 800109c:	aaaaaaab 	.word	0xaaaaaaab
 80010a0:	200004a0 	.word	0x200004a0
 80010a4:	20000494 	.word	0x20000494
    else {accel_bias[2] += (int32_t) accelsensitivity;}
 80010a8:	4b78      	ldr	r3, [pc, #480]	; (800128c <MPU9250_calibrate+0x424>)
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010ae:	4413      	add	r3, r2
 80010b0:	4a76      	ldr	r2, [pc, #472]	; (800128c <MPU9250_calibrate+0x424>)
 80010b2:	6093      	str	r3, [r2, #8]

    // Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
    data[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80010b4:	4b76      	ldr	r3, [pc, #472]	; (8001290 <MPU9250_calibrate+0x428>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	425b      	negs	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	da00      	bge.n	80010c0 <MPU9250_calibrate+0x258>
 80010be:	3303      	adds	r3, #3
 80010c0:	109b      	asrs	r3, r3, #2
 80010c2:	121b      	asrs	r3, r3, #8
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	753b      	strb	r3, [r7, #20]
    data[1] = (-gyro_bias[0] / 4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 80010c8:	4b71      	ldr	r3, [pc, #452]	; (8001290 <MPU9250_calibrate+0x428>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	425b      	negs	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	da00      	bge.n	80010d4 <MPU9250_calibrate+0x26c>
 80010d2:	3303      	adds	r3, #3
 80010d4:	109b      	asrs	r3, r3, #2
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	757b      	strb	r3, [r7, #21]
    data[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 80010da:	4b6d      	ldr	r3, [pc, #436]	; (8001290 <MPU9250_calibrate+0x428>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	425b      	negs	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	da00      	bge.n	80010e6 <MPU9250_calibrate+0x27e>
 80010e4:	3303      	adds	r3, #3
 80010e6:	109b      	asrs	r3, r3, #2
 80010e8:	121b      	asrs	r3, r3, #8
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	75bb      	strb	r3, [r7, #22]
    data[3] = (-gyro_bias[1] / 4)       & 0xFF;
 80010ee:	4b68      	ldr	r3, [pc, #416]	; (8001290 <MPU9250_calibrate+0x428>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	425b      	negs	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	da00      	bge.n	80010fa <MPU9250_calibrate+0x292>
 80010f8:	3303      	adds	r3, #3
 80010fa:	109b      	asrs	r3, r3, #2
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	75fb      	strb	r3, [r7, #23]
    data[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8001100:	4b63      	ldr	r3, [pc, #396]	; (8001290 <MPU9250_calibrate+0x428>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	425b      	negs	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	da00      	bge.n	800110c <MPU9250_calibrate+0x2a4>
 800110a:	3303      	adds	r3, #3
 800110c:	109b      	asrs	r3, r3, #2
 800110e:	121b      	asrs	r3, r3, #8
 8001110:	b2db      	uxtb	r3, r3
 8001112:	763b      	strb	r3, [r7, #24]
    data[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8001114:	4b5e      	ldr	r3, [pc, #376]	; (8001290 <MPU9250_calibrate+0x428>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	425b      	negs	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	da00      	bge.n	8001120 <MPU9250_calibrate+0x2b8>
 800111e:	3303      	adds	r3, #3
 8001120:	109b      	asrs	r3, r3, #2
 8001122:	b2db      	uxtb	r3, r3
 8001124:	767b      	strb	r3, [r7, #25]

    // Push gyro biases to hardware registers
    MPU9250_writeReg(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 8001126:	7d3b      	ldrb	r3, [r7, #20]
 8001128:	461a      	mov	r2, r3
 800112a:	2113      	movs	r1, #19
 800112c:	2068      	movs	r0, #104	; 0x68
 800112e:	f000 fa33 	bl	8001598 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 8001132:	7d7b      	ldrb	r3, [r7, #21]
 8001134:	461a      	mov	r2, r3
 8001136:	2114      	movs	r1, #20
 8001138:	2068      	movs	r0, #104	; 0x68
 800113a:	f000 fa2d 	bl	8001598 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 800113e:	7dbb      	ldrb	r3, [r7, #22]
 8001140:	461a      	mov	r2, r3
 8001142:	2115      	movs	r1, #21
 8001144:	2068      	movs	r0, #104	; 0x68
 8001146:	f000 fa27 	bl	8001598 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 800114a:	7dfb      	ldrb	r3, [r7, #23]
 800114c:	461a      	mov	r2, r3
 800114e:	2116      	movs	r1, #22
 8001150:	2068      	movs	r0, #104	; 0x68
 8001152:	f000 fa21 	bl	8001598 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 8001156:	7e3b      	ldrb	r3, [r7, #24]
 8001158:	461a      	mov	r2, r3
 800115a:	2117      	movs	r1, #23
 800115c:	2068      	movs	r0, #104	; 0x68
 800115e:	f000 fa1b 	bl	8001598 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 8001162:	7e7b      	ldrb	r3, [r7, #25]
 8001164:	461a      	mov	r2, r3
 8001166:	2118      	movs	r1, #24
 8001168:	2068      	movs	r0, #104	; 0x68
 800116a:	f000 fa15 	bl	8001598 <MPU9250_writeReg>
    // the accelerometer biases calculated above must be divided by 8.


     //int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
     //readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
     data[0] = MPU9250_readReg(MPU9250_ADDRESS, XA_OFFSET_H);
 800116e:	2177      	movs	r1, #119	; 0x77
 8001170:	2068      	movs	r0, #104	; 0x68
 8001172:	f000 fa31 	bl	80015d8 <MPU9250_readReg>
 8001176:	4603      	mov	r3, r0
 8001178:	753b      	strb	r3, [r7, #20]
     data[1] = MPU9250_readReg(MPU9250_ADDRESS, XA_OFFSET_L);
 800117a:	2178      	movs	r1, #120	; 0x78
 800117c:	2068      	movs	r0, #104	; 0x68
 800117e:	f000 fa2b 	bl	80015d8 <MPU9250_readReg>
 8001182:	4603      	mov	r3, r0
 8001184:	757b      	strb	r3, [r7, #21]
     data[2] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_H);
 8001186:	217a      	movs	r1, #122	; 0x7a
 8001188:	2068      	movs	r0, #104	; 0x68
 800118a:	f000 fa25 	bl	80015d8 <MPU9250_readReg>
 800118e:	4603      	mov	r3, r0
 8001190:	75bb      	strb	r3, [r7, #22]
     data[3] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_L);
 8001192:	217b      	movs	r1, #123	; 0x7b
 8001194:	2068      	movs	r0, #104	; 0x68
 8001196:	f000 fa1f 	bl	80015d8 <MPU9250_readReg>
 800119a:	4603      	mov	r3, r0
 800119c:	75fb      	strb	r3, [r7, #23]
     data[4] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_H);
 800119e:	217d      	movs	r1, #125	; 0x7d
 80011a0:	2068      	movs	r0, #104	; 0x68
 80011a2:	f000 fa19 	bl	80015d8 <MPU9250_readReg>
 80011a6:	4603      	mov	r3, r0
 80011a8:	763b      	strb	r3, [r7, #24]
     data[5] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_L);
 80011aa:	217e      	movs	r1, #126	; 0x7e
 80011ac:	2068      	movs	r0, #104	; 0x68
 80011ae:	f000 fa13 	bl	80015d8 <MPU9250_readReg>
 80011b2:	4603      	mov	r3, r0
 80011b4:	767b      	strb	r3, [r7, #25]
     accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]  );
 80011b6:	7d3b      	ldrb	r3, [r7, #20]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	7d7a      	ldrb	r2, [r7, #21]
 80011bc:	4313      	orrs	r3, r2
 80011be:	4a35      	ldr	r2, [pc, #212]	; (8001294 <MPU9250_calibrate+0x42c>)
 80011c0:	6013      	str	r3, [r2, #0]
     accel_bias_reg[1] = (int32_t) (((int16_t)data[2] << 8) | data[3]  );
 80011c2:	7dbb      	ldrb	r3, [r7, #22]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	7dfa      	ldrb	r2, [r7, #23]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	4a32      	ldr	r2, [pc, #200]	; (8001294 <MPU9250_calibrate+0x42c>)
 80011cc:	6053      	str	r3, [r2, #4]
     accel_bias_reg[2] = (int32_t) (((int16_t)data[4] << 8) | data[5]  );
 80011ce:	7e3b      	ldrb	r3, [r7, #24]
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	7e7a      	ldrb	r2, [r7, #25]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	4a2f      	ldr	r2, [pc, #188]	; (8001294 <MPU9250_calibrate+0x42c>)
 80011d8:	6093      	str	r3, [r2, #8]
//     accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
//     readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
//     accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);

     //uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
     uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 80011da:	2300      	movs	r3, #0
 80011dc:	743b      	strb	r3, [r7, #16]
 80011de:	2300      	movs	r3, #0
 80011e0:	747b      	strb	r3, [r7, #17]
 80011e2:	2300      	movs	r3, #0
 80011e4:	74bb      	strb	r3, [r7, #18]
    // for(ii = 0; ii < 3; ii++) {
    //     if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
    // }

     // Construct total accelerometer bias, including calculated average accelerometer bias from above
     accel_bias_reg[0] -= (accel_bias[0] / 8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80011e6:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <MPU9250_calibrate+0x42c>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4b28      	ldr	r3, [pc, #160]	; (800128c <MPU9250_calibrate+0x424>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	da00      	bge.n	80011f4 <MPU9250_calibrate+0x38c>
 80011f2:	3307      	adds	r3, #7
 80011f4:	10db      	asrs	r3, r3, #3
 80011f6:	425b      	negs	r3, r3
 80011f8:	4413      	add	r3, r2
 80011fa:	4a26      	ldr	r2, [pc, #152]	; (8001294 <MPU9250_calibrate+0x42c>)
 80011fc:	6013      	str	r3, [r2, #0]
     accel_bias_reg[1] -= (accel_bias[1] / 8);
 80011fe:	4b25      	ldr	r3, [pc, #148]	; (8001294 <MPU9250_calibrate+0x42c>)
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	4b22      	ldr	r3, [pc, #136]	; (800128c <MPU9250_calibrate+0x424>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	da00      	bge.n	800120c <MPU9250_calibrate+0x3a4>
 800120a:	3307      	adds	r3, #7
 800120c:	10db      	asrs	r3, r3, #3
 800120e:	425b      	negs	r3, r3
 8001210:	4413      	add	r3, r2
 8001212:	4a20      	ldr	r2, [pc, #128]	; (8001294 <MPU9250_calibrate+0x42c>)
 8001214:	6053      	str	r3, [r2, #4]
     accel_bias_reg[2] -= (accel_bias[2] / 8);
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <MPU9250_calibrate+0x42c>)
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <MPU9250_calibrate+0x424>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	da00      	bge.n	8001224 <MPU9250_calibrate+0x3bc>
 8001222:	3307      	adds	r3, #7
 8001224:	10db      	asrs	r3, r3, #3
 8001226:	425b      	negs	r3, r3
 8001228:	4413      	add	r3, r2
 800122a:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <MPU9250_calibrate+0x42c>)
 800122c:	6093      	str	r3, [r2, #8]

     data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <MPU9250_calibrate+0x42c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	121b      	asrs	r3, r3, #8
 8001234:	b2db      	uxtb	r3, r3
 8001236:	753b      	strb	r3, [r7, #20]
     data[1] = (accel_bias_reg[0])      & 0xFF;
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <MPU9250_calibrate+0x42c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	757b      	strb	r3, [r7, #21]
     data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001240:	7d7a      	ldrb	r2, [r7, #21]
 8001242:	7c3b      	ldrb	r3, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	b2db      	uxtb	r3, r3
 8001248:	757b      	strb	r3, [r7, #21]
     data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MPU9250_calibrate+0x42c>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	121b      	asrs	r3, r3, #8
 8001250:	b2db      	uxtb	r3, r3
 8001252:	75bb      	strb	r3, [r7, #22]
     data[3] = (accel_bias_reg[1])      & 0xFF;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MPU9250_calibrate+0x42c>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	75fb      	strb	r3, [r7, #23]
     data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 800125c:	7dfa      	ldrb	r2, [r7, #23]
 800125e:	7c7b      	ldrb	r3, [r7, #17]
 8001260:	4313      	orrs	r3, r2
 8001262:	b2db      	uxtb	r3, r3
 8001264:	75fb      	strb	r3, [r7, #23]
     data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <MPU9250_calibrate+0x42c>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	121b      	asrs	r3, r3, #8
 800126c:	b2db      	uxtb	r3, r3
 800126e:	763b      	strb	r3, [r7, #24]
     data[5] = (accel_bias_reg[2])      & 0xFF;
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <MPU9250_calibrate+0x42c>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	767b      	strb	r3, [r7, #25]
     data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001278:	7e7a      	ldrb	r2, [r7, #25]
 800127a:	7cbb      	ldrb	r3, [r7, #18]
 800127c:	4313      	orrs	r3, r2
 800127e:	b2db      	uxtb	r3, r3
 8001280:	767b      	strb	r3, [r7, #25]
//     MPU9250_writeReg(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
//     MPU9250_writeReg(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
//     MPU9250_writeReg(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
//     MPU9250_writeReg(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200004a0 	.word	0x200004a0
 8001290:	20000494 	.word	0x20000494
 8001294:	200004ac 	.word	0x200004ac

08001298 <MPU9250_getAllData>:

void MPU9250_getAllData(int16_t *Data)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[12];
	buffer[0] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_XOUT_H);
 80012a0:	2143      	movs	r1, #67	; 0x43
 80012a2:	2068      	movs	r0, #104	; 0x68
 80012a4:	f000 f998 	bl	80015d8 <MPU9250_readReg>
 80012a8:	4603      	mov	r3, r0
 80012aa:	733b      	strb	r3, [r7, #12]
	buffer[1] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_XOUT_L);
 80012ac:	2144      	movs	r1, #68	; 0x44
 80012ae:	2068      	movs	r0, #104	; 0x68
 80012b0:	f000 f992 	bl	80015d8 <MPU9250_readReg>
 80012b4:	4603      	mov	r3, r0
 80012b6:	737b      	strb	r3, [r7, #13]
	buffer[2] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_YOUT_H);
 80012b8:	2145      	movs	r1, #69	; 0x45
 80012ba:	2068      	movs	r0, #104	; 0x68
 80012bc:	f000 f98c 	bl	80015d8 <MPU9250_readReg>
 80012c0:	4603      	mov	r3, r0
 80012c2:	73bb      	strb	r3, [r7, #14]
	buffer[3] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_YOUT_L);
 80012c4:	2146      	movs	r1, #70	; 0x46
 80012c6:	2068      	movs	r0, #104	; 0x68
 80012c8:	f000 f986 	bl	80015d8 <MPU9250_readReg>
 80012cc:	4603      	mov	r3, r0
 80012ce:	73fb      	strb	r3, [r7, #15]
	buffer[4] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_ZOUT_H);
 80012d0:	2147      	movs	r1, #71	; 0x47
 80012d2:	2068      	movs	r0, #104	; 0x68
 80012d4:	f000 f980 	bl	80015d8 <MPU9250_readReg>
 80012d8:	4603      	mov	r3, r0
 80012da:	743b      	strb	r3, [r7, #16]
	buffer[5] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_ZOUT_L);
 80012dc:	2148      	movs	r1, #72	; 0x48
 80012de:	2068      	movs	r0, #104	; 0x68
 80012e0:	f000 f97a 	bl	80015d8 <MPU9250_readReg>
 80012e4:	4603      	mov	r3, r0
 80012e6:	747b      	strb	r3, [r7, #17]
	buffer[6] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_XOUT_H);
 80012e8:	213b      	movs	r1, #59	; 0x3b
 80012ea:	2068      	movs	r0, #104	; 0x68
 80012ec:	f000 f974 	bl	80015d8 <MPU9250_readReg>
 80012f0:	4603      	mov	r3, r0
 80012f2:	74bb      	strb	r3, [r7, #18]
	buffer[7] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_XOUT_L);
 80012f4:	213c      	movs	r1, #60	; 0x3c
 80012f6:	2068      	movs	r0, #104	; 0x68
 80012f8:	f000 f96e 	bl	80015d8 <MPU9250_readReg>
 80012fc:	4603      	mov	r3, r0
 80012fe:	74fb      	strb	r3, [r7, #19]
	buffer[8] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_YOUT_H);
 8001300:	213d      	movs	r1, #61	; 0x3d
 8001302:	2068      	movs	r0, #104	; 0x68
 8001304:	f000 f968 	bl	80015d8 <MPU9250_readReg>
 8001308:	4603      	mov	r3, r0
 800130a:	753b      	strb	r3, [r7, #20]
	buffer[9] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_YOUT_L);
 800130c:	213e      	movs	r1, #62	; 0x3e
 800130e:	2068      	movs	r0, #104	; 0x68
 8001310:	f000 f962 	bl	80015d8 <MPU9250_readReg>
 8001314:	4603      	mov	r3, r0
 8001316:	757b      	strb	r3, [r7, #21]
	buffer[10] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_ZOUT_H);
 8001318:	213f      	movs	r1, #63	; 0x3f
 800131a:	2068      	movs	r0, #104	; 0x68
 800131c:	f000 f95c 	bl	80015d8 <MPU9250_readReg>
 8001320:	4603      	mov	r3, r0
 8001322:	75bb      	strb	r3, [r7, #22]
	buffer[11] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_ZOUT_L);
 8001324:	2140      	movs	r1, #64	; 0x40
 8001326:	2068      	movs	r0, #104	; 0x68
 8001328:	f000 f956 	bl	80015d8 <MPU9250_readReg>
 800132c:	4603      	mov	r3, r0
 800132e:	75fb      	strb	r3, [r7, #23]
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 8001330:	7b3b      	ldrb	r3, [r7, #12]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21b      	sxth	r3, r3
 8001336:	461a      	mov	r2, r3
 8001338:	7b7b      	ldrb	r3, [r7, #13]
 800133a:	4413      	add	r3, r2
 800133c:	ee07 3a90 	vmov	s15, r3
 8001340:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001344:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001494 <MPU9250_getAllData+0x1fc>
 8001348:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800134c:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001498 <MPU9250_getAllData+0x200>
 8001350:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001354:	eddf 6a51 	vldr	s13, [pc, #324]	; 800149c <MPU9250_getAllData+0x204>
 8001358:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800135c:	4b50      	ldr	r3, [pc, #320]	; (80014a0 <MPU9250_getAllData+0x208>)
 800135e:	edc3 7a00 	vstr	s15, [r3]
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 8001362:	7bbb      	ldrb	r3, [r7, #14]
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	b21b      	sxth	r3, r3
 8001368:	461a      	mov	r2, r3
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	4413      	add	r3, r2
 800136e:	ee07 3a90 	vmov	s15, r3
 8001372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001376:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001494 <MPU9250_getAllData+0x1fc>
 800137a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800137e:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001498 <MPU9250_getAllData+0x200>
 8001382:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001386:	eddf 6a45 	vldr	s13, [pc, #276]	; 800149c <MPU9250_getAllData+0x204>
 800138a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800138e:	4b45      	ldr	r3, [pc, #276]	; (80014a4 <MPU9250_getAllData+0x20c>)
 8001390:	edc3 7a00 	vstr	s15, [r3]
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 8001394:	7c3b      	ldrb	r3, [r7, #16]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	b21b      	sxth	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	7c7b      	ldrb	r3, [r7, #17]
 800139e:	4413      	add	r3, r2
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a8:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001494 <MPU9250_getAllData+0x1fc>
 80013ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013b0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001498 <MPU9250_getAllData+0x200>
 80013b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013b8:	eddf 6a38 	vldr	s13, [pc, #224]	; 800149c <MPU9250_getAllData+0x204>
 80013bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c0:	4b39      	ldr	r3, [pc, #228]	; (80014a8 <MPU9250_getAllData+0x210>)
 80013c2:	edc3 7a00 	vstr	s15, [r3]
//	accelX=((((int16_t)((uint16_t)buffer[6] << 8) + buffer[7])))/4096.0f*9.8f;
//	accelY=((((int16_t)((uint16_t)buffer[8] << 8) + buffer[9])))/4096.0f*9.8f;
	accelX=((((int16_t)((uint16_t)buffer[6] << 8) + buffer[7])))/4096.0f*9.8f;
 80013c6:	7cbb      	ldrb	r3, [r7, #18]
 80013c8:	021b      	lsls	r3, r3, #8
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	7cfb      	ldrb	r3, [r7, #19]
 80013d0:	4413      	add	r3, r2
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013da:	eddf 6a34 	vldr	s13, [pc, #208]	; 80014ac <MPU9250_getAllData+0x214>
 80013de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80014b0 <MPU9250_getAllData+0x218>
 80013e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ea:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <MPU9250_getAllData+0x21c>)
 80013ec:	edc3 7a00 	vstr	s15, [r3]
	accelY=((((int16_t)((uint16_t)buffer[8] << 8) + buffer[9])))/4096.0f*9.8f;
 80013f0:	7d3b      	ldrb	r3, [r7, #20]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	7d7b      	ldrb	r3, [r7, #21]
 80013fa:	4413      	add	r3, r2
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001404:	eddf 6a29 	vldr	s13, [pc, #164]	; 80014ac <MPU9250_getAllData+0x214>
 8001408:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800140c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80014b0 <MPU9250_getAllData+0x218>
 8001410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001414:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <MPU9250_getAllData+0x220>)
 8001416:	edc3 7a00 	vstr	s15, [r3]
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 800141a:	7dbb      	ldrb	r3, [r7, #22]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	b21b      	sxth	r3, r3
 8001420:	461a      	mov	r2, r3
 8001422:	7dfb      	ldrb	r3, [r7, #23]
 8001424:	4413      	add	r3, r2
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800142e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80014ac <MPU9250_getAllData+0x214>
 8001432:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001436:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80014b0 <MPU9250_getAllData+0x218>
 800143a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143e:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <MPU9250_getAllData+0x224>)
 8001440:	edc3 7a00 	vstr	s15, [r3]
	gyroX_filtered = filter(gyroX);
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <MPU9250_getAllData+0x208>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	eeb0 0a67 	vmov.f32	s0, s15
 800144e:	f000 f83d 	bl	80014cc <filter>
 8001452:	eef0 7a40 	vmov.f32	s15, s0
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MPU9250_getAllData+0x228>)
 8001458:	edc3 7a00 	vstr	s15, [r3]
	gyroY_filtered = filter(gyroY);
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MPU9250_getAllData+0x20c>)
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	eeb0 0a67 	vmov.f32	s0, s15
 8001466:	f000 f831 	bl	80014cc <filter>
 800146a:	eef0 7a40 	vmov.f32	s15, s0
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <MPU9250_getAllData+0x22c>)
 8001470:	edc3 7a00 	vstr	s15, [r3]
	gyroZ_filtered = filter(gyroZ);
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MPU9250_getAllData+0x210>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	eeb0 0a67 	vmov.f32	s0, s15
 800147e:	f000 f825 	bl	80014cc <filter>
 8001482:	eef0 7a40 	vmov.f32	s15, s0
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MPU9250_getAllData+0x230>)
 8001488:	edc3 7a00 	vstr	s15, [r3]
//	accelX=((((int16_t)((uint16_t)buffer[6] << 8) + buffer[7])));
//	accelY=((((int16_t)((uint16_t)buffer[8] << 8) + buffer[9])));
//	accelZ=((((int16_t)((uint16_t)buffer[10] << 8) + buffer[11])));
	//accelX_offset=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
}
 800148c:	bf00      	nop
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	42830000 	.word	0x42830000
 8001498:	4048f5c3 	.word	0x4048f5c3
 800149c:	43340000 	.word	0x43340000
 80014a0:	20004a9c 	.word	0x20004a9c
 80014a4:	20004f44 	.word	0x20004f44
 80014a8:	20004ab8 	.word	0x20004ab8
 80014ac:	45800000 	.word	0x45800000
 80014b0:	411ccccd 	.word	0x411ccccd
 80014b4:	20004a18 	.word	0x20004a18
 80014b8:	20004a10 	.word	0x20004a10
 80014bc:	20004efc 	.word	0x20004efc
 80014c0:	20004f00 	.word	0x20004f00
 80014c4:	20004ed8 	.word	0x20004ed8
 80014c8:	20004f48 	.word	0x20004f48

080014cc <filter>:

float filter(float val) { //функция фильтрации
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	ed87 0a01 	vstr	s0, [r7, #4]
	Pc = P + varProcess;
 80014d6:	4b28      	ldr	r3, [pc, #160]	; (8001578 <filter+0xac>)
 80014d8:	ed93 7a00 	vldr	s14, [r3]
 80014dc:	4b27      	ldr	r3, [pc, #156]	; (800157c <filter+0xb0>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <filter+0xb4>)
 80014e8:	edc3 7a00 	vstr	s15, [r3]
	G = Pc/(Pc + varVolt);
 80014ec:	4b24      	ldr	r3, [pc, #144]	; (8001580 <filter+0xb4>)
 80014ee:	edd3 6a00 	vldr	s13, [r3]
 80014f2:	4b23      	ldr	r3, [pc, #140]	; (8001580 <filter+0xb4>)
 80014f4:	ed93 7a00 	vldr	s14, [r3]
 80014f8:	4b22      	ldr	r3, [pc, #136]	; (8001584 <filter+0xb8>)
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <filter+0xbc>)
 8001508:	edc3 7a00 	vstr	s15, [r3]
	P = (1-G)*Pc;
 800150c:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <filter+0xbc>)
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001516:	ee37 7a67 	vsub.f32	s14, s14, s15
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <filter+0xb4>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <filter+0xac>)
 8001526:	edc3 7a00 	vstr	s15, [r3]
	Xp = Xe;
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <filter+0xc0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a18      	ldr	r2, [pc, #96]	; (8001590 <filter+0xc4>)
 8001530:	6013      	str	r3, [r2, #0]
	Zp = Xp;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <filter+0xc4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a17      	ldr	r2, [pc, #92]	; (8001594 <filter+0xc8>)
 8001538:	6013      	str	r3, [r2, #0]
	Xe = G*(val-Zp)+Xp; // "фильтрованное" значение
 800153a:	4b16      	ldr	r3, [pc, #88]	; (8001594 <filter+0xc8>)
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	ed97 7a01 	vldr	s14, [r7, #4]
 8001544:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <filter+0xbc>)
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <filter+0xc4>)
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <filter+0xc0>)
 800155e:	edc3 7a00 	vstr	s15, [r3]
return(Xe);
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <filter+0xc0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	ee07 3a90 	vmov	s15, r3
}
 800156a:	eeb0 0a67 	vmov.f32	s0, s15
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	20000004 	.word	0x20000004
 800157c:	20000000 	.word	0x20000000
 8001580:	200004c0 	.word	0x200004c0
 8001584:	200004bc 	.word	0x200004bc
 8001588:	200004c4 	.word	0x200004c4
 800158c:	200004d0 	.word	0x200004d0
 8001590:	200004c8 	.word	0x200004c8
 8001594:	200004cc 	.word	0x200004cc

08001598 <MPU9250_writeReg>:

void MPU9250_writeReg(uint16_t Addr, uint8_t reg, uint8_t value)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af02      	add	r7, sp, #8
 800159e:	4603      	mov	r3, r0
 80015a0:	80fb      	strh	r3, [r7, #6]
 80015a2:	460b      	mov	r3, r1
 80015a4:	717b      	strb	r3, [r7, #5]
 80015a6:	4613      	mov	r3, r2
 80015a8:	713b      	strb	r3, [r7, #4]
	uint8_t buf[2];
	buf[0] = reg;
 80015aa:	797b      	ldrb	r3, [r7, #5]
 80015ac:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 80015ae:	793b      	ldrb	r3, [r7, #4]
 80015b0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	b299      	uxth	r1, r3
 80015b8:	f107 020c 	add.w	r2, r7, #12
 80015bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	2302      	movs	r3, #2
 80015c4:	4803      	ldr	r0, [pc, #12]	; (80015d4 <MPU9250_writeReg+0x3c>)
 80015c6:	f004 fd41 	bl	800604c <HAL_I2C_Master_Transmit>
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20004a44 	.word	0x20004a44

080015d8 <MPU9250_readReg>:
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 5, 1000);
}

// Read an 8-bit register
uint8_t MPU9250_readReg(uint16_t Addr, uint8_t reg)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af04      	add	r7, sp, #16
 80015de:	4603      	mov	r3, r0
 80015e0:	460a      	mov	r2, r1
 80015e2:	80fb      	strh	r3, [r7, #6]
 80015e4:	4613      	mov	r3, r2
 80015e6:	717b      	strb	r3, [r7, #5]
  uint8_t value;
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	b299      	uxth	r1, r3
 80015ee:	797b      	ldrb	r3, [r7, #5]
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	9302      	str	r3, [sp, #8]
 80015f8:	2301      	movs	r3, #1
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	f107 030f 	add.w	r3, r7, #15
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2301      	movs	r3, #1
 8001604:	4803      	ldr	r0, [pc, #12]	; (8001614 <MPU9250_readReg+0x3c>)
 8001606:	f004 fe1f 	bl	8006248 <HAL_I2C_Mem_Read>
  return value;
 800160a:	7bfb      	ldrb	r3, [r7, #15]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20004a44 	.word	0x20004a44

08001618 <MPU9250_readReg16Bit>:

// Read a 16-bit register
uint16_t MPU9250_readReg16Bit(uint16_t Addr, uint8_t reg)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	460a      	mov	r2, r1
 8001622:	80fb      	strh	r3, [r7, #6]
 8001624:	4613      	mov	r3, r2
 8001626:	717b      	strb	r3, [r7, #5]
  uint16_t value;
  uint8_t buff[2];
  MPU9250_readMulti(Addr, reg, buff, 2);
 8001628:	f107 0208 	add.w	r2, r7, #8
 800162c:	7979      	ldrb	r1, [r7, #5]
 800162e:	88f8      	ldrh	r0, [r7, #6]
 8001630:	2302      	movs	r3, #2
 8001632:	f000 f811 	bl	8001658 <MPU9250_readMulti>
  uint16_t tmp;
  tmp = buff[0];
 8001636:	7a3b      	ldrb	r3, [r7, #8]
 8001638:	81fb      	strh	r3, [r7, #14]
  tmp <<= 8;
 800163a:	89fb      	ldrh	r3, [r7, #14]
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	81fb      	strh	r3, [r7, #14]
  tmp |= buff[1];
 8001640:	7a7b      	ldrb	r3, [r7, #9]
 8001642:	b29a      	uxth	r2, r3
 8001644:	89fb      	ldrh	r3, [r7, #14]
 8001646:	4313      	orrs	r3, r2
 8001648:	81fb      	strh	r3, [r7, #14]
  value = tmp;
 800164a:	89fb      	ldrh	r3, [r7, #14]
 800164c:	81bb      	strh	r3, [r7, #12]
  return value;
 800164e:	89bb      	ldrh	r3, [r7, #12]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <MPU9250_readMulti>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void MPU9250_readMulti(uint16_t Addr, uint8_t reg, uint8_t * dst, uint8_t count)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af04      	add	r7, sp, #16
 800165e:	603a      	str	r2, [r7, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4603      	mov	r3, r0
 8001664:	80fb      	strh	r3, [r7, #6]
 8001666:	460b      	mov	r3, r1
 8001668:	717b      	strb	r3, [r7, #5]
 800166a:	4613      	mov	r3, r2
 800166c:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, dst, count, 1000);
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	b299      	uxth	r1, r3
 8001674:	797b      	ldrb	r3, [r7, #5]
 8001676:	b298      	uxth	r0, r3
 8001678:	793b      	ldrb	r3, [r7, #4]
 800167a:	b29b      	uxth	r3, r3
 800167c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001680:	9202      	str	r2, [sp, #8]
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2301      	movs	r3, #1
 800168a:	4602      	mov	r2, r0
 800168c:	4803      	ldr	r0, [pc, #12]	; (800169c <MPU9250_readMulti+0x44>)
 800168e:	f004 fddb 	bl	8006248 <HAL_I2C_Mem_Read>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20004a44 	.word	0x20004a44

080016a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <HAL_MspInit+0x58>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <HAL_MspInit+0x58>)
 80016b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b4:	6453      	str	r3, [r2, #68]	; 0x44
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_MspInit+0x58>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HAL_MspInit+0x58>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <HAL_MspInit+0x58>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_MspInit+0x58>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	2005      	movs	r0, #5
 80016e4:	f004 f96a 	bl	80059bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80016e8:	2005      	movs	r0, #5
 80016ea:	f004 f983 	bl	80059f4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800

080016fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a21      	ldr	r2, [pc, #132]	; (80017a0 <HAL_CAN_MspInit+0xa4>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d13c      	bne.n	8001798 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_CAN_MspInit+0xa8>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a1f      	ldr	r2, [pc, #124]	; (80017a4 <HAL_CAN_MspInit+0xa8>)
 8001728:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <HAL_CAN_MspInit+0xa8>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_CAN_MspInit+0xa8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a18      	ldr	r2, [pc, #96]	; (80017a4 <HAL_CAN_MspInit+0xa8>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <HAL_CAN_MspInit+0xa8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001756:	f44f 7340 	mov.w	r3, #768	; 0x300
 800175a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001768:	2309      	movs	r3, #9
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	480d      	ldr	r0, [pc, #52]	; (80017a8 <HAL_CAN_MspInit+0xac>)
 8001774:	f004 f97c 	bl	8005a70 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001778:	2200      	movs	r2, #0
 800177a:	2100      	movs	r1, #0
 800177c:	2014      	movs	r0, #20
 800177e:	f004 f91d 	bl	80059bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001782:	2014      	movs	r0, #20
 8001784:	f004 f936 	bl	80059f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	2100      	movs	r1, #0
 800178c:	2015      	movs	r0, #21
 800178e:	f004 f915 	bl	80059bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001792:	2015      	movs	r0, #21
 8001794:	f004 f92e 	bl	80059f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001798:	bf00      	nop
 800179a:	3728      	adds	r7, #40	; 0x28
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40006400 	.word	0x40006400
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020400 	.word	0x40020400

080017ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <HAL_I2C_MspInit+0x94>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d133      	bne.n	8001836 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_I2C_MspInit+0x98>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <HAL_I2C_MspInit+0x98>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_I2C_MspInit+0x98>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017ea:	23c0      	movs	r3, #192	; 0xc0
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ee:	2312      	movs	r3, #18
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017fa:	2304      	movs	r3, #4
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	4810      	ldr	r0, [pc, #64]	; (8001848 <HAL_I2C_MspInit+0x9c>)
 8001806:	f004 f933 	bl	8005a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <HAL_I2C_MspInit+0x98>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	4a0c      	ldr	r2, [pc, #48]	; (8001844 <HAL_I2C_MspInit+0x98>)
 8001814:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001818:	6413      	str	r3, [r2, #64]	; 0x40
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_I2C_MspInit+0x98>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	201f      	movs	r0, #31
 800182c:	f004 f8c6 	bl	80059bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001830:	201f      	movs	r0, #31
 8001832:	f004 f8df 	bl	80059f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	; 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40005400 	.word	0x40005400
 8001844:	40023800 	.word	0x40023800
 8001848:	40020400 	.word	0x40020400

0800184c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08c      	sub	sp, #48	; 0x30
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 800185c:	2200      	movs	r2, #0
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	201d      	movs	r0, #29
 8001862:	f004 f8ab 	bl	80059bc <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001866:	201d      	movs	r0, #29
 8001868:	f004 f8c4 	bl	80059f4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <HAL_InitTick+0xa4>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <HAL_InitTick+0xa4>)
 8001876:	f043 0302 	orr.w	r3, r3, #2
 800187a:	6413      	str	r3, [r2, #64]	; 0x40
 800187c:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <HAL_InitTick+0xa4>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001888:	f107 0210 	add.w	r2, r7, #16
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f008 fbb4 	bl	800a000 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001898:	f008 fb9e 	bl	8009fd8 <HAL_RCC_GetPCLK1Freq>
 800189c:	4603      	mov	r3, r0
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80018a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a4:	4a13      	ldr	r2, [pc, #76]	; (80018f4 <HAL_InitTick+0xa8>)
 80018a6:	fba2 2303 	umull	r2, r3, r2, r3
 80018aa:	0c9b      	lsrs	r3, r3, #18
 80018ac:	3b01      	subs	r3, #1
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_InitTick+0xac>)
 80018b2:	4a12      	ldr	r2, [pc, #72]	; (80018fc <HAL_InitTick+0xb0>)
 80018b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_InitTick+0xac>)
 80018b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018bc:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80018be:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <HAL_InitTick+0xac>)
 80018c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c2:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_InitTick+0xac>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_InitTick+0xac>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80018d0:	4809      	ldr	r0, [pc, #36]	; (80018f8 <HAL_InitTick+0xac>)
 80018d2:	f008 fbc7 	bl	800a064 <HAL_TIM_Base_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d104      	bne.n	80018e6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80018dc:	4806      	ldr	r0, [pc, #24]	; (80018f8 <HAL_InitTick+0xac>)
 80018de:	f008 fbf6 	bl	800a0ce <HAL_TIM_Base_Start_IT>
 80018e2:	4603      	mov	r3, r0
 80018e4:	e000      	b.n	80018e8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3730      	adds	r7, #48	; 0x30
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40023800 	.word	0x40023800
 80018f4:	431bde83 	.word	0x431bde83
 80018f8:	20004f90 	.word	0x20004f90
 80018fc:	40000400 	.word	0x40000400

08001900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <HardFault_Handler+0x4>

08001914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <MemManage_Handler+0x4>

0800191a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <BusFault_Handler+0x4>

08001920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <UsageFault_Handler+0x4>

08001926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <CAN1_RX0_IRQHandler+0x10>)
 800194a:	f003 fd56 	bl	80053fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20004f1c 	.word	0x20004f1c

08001958 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <CAN1_RX1_IRQHandler+0x10>)
 800195e:	f003 fd4c 	bl	80053fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20004f1c 	.word	0x20004f1c

0800196c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <TIM3_IRQHandler+0x10>)
 8001972:	f008 fbd0 	bl	800a116 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20004f90 	.word	0x20004f90

08001980 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <I2C1_EV_IRQHandler+0x10>)
 8001986:	f004 fe85 	bl	8006694 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20004a44 	.word	0x20004a44

08001994 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <OTG_FS_IRQHandler+0x10>)
 800199a:	f006 feaf 	bl	80086fc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200060a4 	.word	0x200060a4

080019a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
	return 1;
 80019ac:	2301      	movs	r3, #1
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <_kill>:

int _kill(int pid, int sig)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019c2:	f00d fc27 	bl	800f214 <__errno>
 80019c6:	4602      	mov	r2, r0
 80019c8:	2316      	movs	r3, #22
 80019ca:	6013      	str	r3, [r2, #0]
	return -1;
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <_exit>:

void _exit (int status)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ffe7 	bl	80019b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019ea:	e7fe      	b.n	80019ea <_exit+0x12>

080019ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f4:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <_sbrk+0x5c>)
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <_sbrk+0x60>)
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <_sbrk+0x64>)
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <_sbrk+0x68>)
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d207      	bcs.n	8001a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a1c:	f00d fbfa 	bl	800f214 <__errno>
 8001a20:	4602      	mov	r2, r0
 8001a22:	230c      	movs	r3, #12
 8001a24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a2a:	e009      	b.n	8001a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <_sbrk+0x64>)
 8001a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20020000 	.word	0x20020000
 8001a4c:	00000400 	.word	0x00000400
 8001a50:	200004d8 	.word	0x200004d8
 8001a54:	200064b0 	.word	0x200064b0

08001a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <SystemInit+0x28>)
 8001a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a62:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <SystemInit+0x28>)
 8001a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <SystemInit+0x28>)
 8001a6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a72:	609a      	str	r2, [r3, #8]
#endif
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001abc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a8a:	e003      	b.n	8001a94 <LoopCopyDataInit>

08001a8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a92:	3104      	adds	r1, #4

08001a94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a94:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a9c:	d3f6      	bcc.n	8001a8c <CopyDataInit>
  ldr  r2, =_sbss
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001aa0:	e002      	b.n	8001aa8 <LoopFillZerobss>

08001aa2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001aa2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001aa4:	f842 3b04 	str.w	r3, [r2], #4

08001aa8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001aaa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001aac:	d3f9      	bcc.n	8001aa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aae:	f7ff ffd3 	bl	8001a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f00d fbb5 	bl	800f220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab6:	f7fe fd2d 	bl	8000514 <main>
  bx  lr    
 8001aba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001abc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ac0:	0800fb18 	.word	0x0800fb18
  ldr  r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ac8:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8001acc:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8001ad0:	200064b0 	.word	0x200064b0

08001ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC_IRQHandler>
	...

08001ad8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	0a5a      	lsrs	r2, r3, #9
 8001ae8:	490f      	ldr	r1, [pc, #60]	; (8001b28 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8001aea:	fba1 1202 	umull	r1, r2, r1, r2
 8001aee:	09d2      	lsrs	r2, r2, #7
 8001af0:	490e      	ldr	r1, [pc, #56]	; (8001b2c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8001af2:	fb01 f202 	mul.w	r2, r1, r2
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	0a5b      	lsrs	r3, r3, #9
 8001b00:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8001b02:	fba2 2303 	umull	r2, r3, r2, r3
 8001b06:	09db      	lsrs	r3, r3, #7
 8001b08:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	441a      	add	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	601a      	str	r2, [r3, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	00044b83 	.word	0x00044b83
 8001b2c:	3b9aca00 	.word	0x3b9aca00

08001b30 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 8001b30:	b480      	push	{r7}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	ed87 0a00 	vstr	s0, [r7]
  {
    const int32_t* val = (int32_t*) &f;
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	613b      	str	r3, [r7, #16]
    int32_t exp = ((*val >> 23) & 255);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	15db      	asrs	r3, r3, #23
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	617b      	str	r3, [r7, #20]
    if (exp != 0)
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x28>
    {
      exp += 1023 - 127;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8001b56:	617b      	str	r3, [r7, #20]
    }

    int32_t sig = *val;
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60fb      	str	r3, [r7, #12]
    *(outbuffer++) = 0;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig << 5) & 0xff;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	0159      	lsls	r1, r3, #5
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	b2ca      	uxtb	r2, r1
 8001b88:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	10d9      	asrs	r1, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	b2ca      	uxtb	r2, r1
 8001b96:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 11) & 0xff;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	12d9      	asrs	r1, r3, #11
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	607a      	str	r2, [r7, #4]
 8001ba2:	b2ca      	uxtb	r2, r1
 8001ba4:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	b25a      	sxtb	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	14db      	asrs	r3, r3, #19
 8001bb0:	b25b      	sxtb	r3, r3
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	b25b      	sxtb	r3, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	b259      	sxtb	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	b2ca      	uxtb	r2, r1
 8001bc4:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	111b      	asrs	r3, r3, #4
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	1c59      	adds	r1, r3, #1
 8001bd0:	6079      	str	r1, [r7, #4]
 8001bd2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8001bda:	edd7 7a00 	vldr	s15, [r7]
 8001bde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be6:	d508      	bpl.n	8001bfa <_ZN3ros3Msg19serializeAvrFloat64EPhf+0xca>
    {
      *(outbuffer - 1) |= 0x80;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8001bfa:	2308      	movs	r3, #8
  }
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	371c      	adds	r7, #28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  {
    uint32_t* val = (uint32_t*)f;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	60fb      	str	r3, [r7, #12]
    inbuffer += 3;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3303      	adds	r3, #3
 8001c1a:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	095b      	lsrs	r3, r3, #5
 8001c26:	f003 0207 	and.w	r2, r3, #7
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	00da      	lsls	r2, r3, #3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	02da      	lsls	r2, r3, #11
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	431a      	orrs	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	04db      	lsls	r3, r3, #19
 8001c60:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8001c64:	431a      	orrs	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	601a      	str	r2, [r3, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	60bb      	str	r3, [r7, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	f403 62fe 	and.w	r2, r3, #2032	; 0x7f0
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60bb      	str	r3, [r7, #8]
    if (exp != 0)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x9a>
    {
      *val |= ((exp) - 1023 + 127) << 23;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8001c9a:	05db      	lsls	r3, r3, #23
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	601a      	str	r2, [r3, #0]
    }

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	061b      	lsls	r3, r3, #24
 8001cac:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	601a      	str	r2, [r3, #0]

    return 8;
 8001cba:	2308      	movs	r3, #8
  }
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <_ZN3ros3MsgC1Ev>:
class Msg
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <_ZN3ros3MsgC1Ev+0x1c>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	0800faf4 	.word	0x0800faf4

08001d0c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
      data()
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ffe8 	bl	8001cec <_ZN3ros3MsgC1Ev>
 8001d1c:	4a06      	ldr	r2, [pc, #24]	; (8001d38 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3304      	adds	r3, #4
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ffce 	bl	8001cc8 <_ZN3ros4TimeC1Ev>
    {
    }
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	0800fadc 	.word	0x0800fadc

08001d3c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6859      	ldr	r1, [r3, #4]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	b2ca      	uxtb	r2, r1
 8001d56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	0a19      	lsrs	r1, r3, #8
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	3301      	adds	r3, #1
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	4413      	add	r3, r2
 8001d66:	b2ca      	uxtb	r2, r1
 8001d68:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	0c19      	lsrs	r1, r3, #16
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3302      	adds	r3, #2
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	b2ca      	uxtb	r2, r1
 8001d7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	0e19      	lsrs	r1, r3, #24
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3303      	adds	r3, #3
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	4413      	add	r3, r2
 8001d8a:	b2ca      	uxtb	r2, r1
 8001d8c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3304      	adds	r3, #4
 8001d92:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6899      	ldr	r1, [r3, #8]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	b2ca      	uxtb	r2, r1
 8001da0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	0a19      	lsrs	r1, r3, #8
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3301      	adds	r3, #1
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	b2ca      	uxtb	r2, r1
 8001db2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	b2ca      	uxtb	r2, r1
 8001dc4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	0e19      	lsrs	r1, r3, #24
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3303      	adds	r3, #3
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	b2ca      	uxtb	r2, r1
 8001dd6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3304      	adds	r3, #4
 8001ddc:	60fb      	str	r3, [r7, #12]
      return offset;
 8001dde:	68fb      	ldr	r3, [r7, #12]
    }
 8001de0:	4618      	mov	r0, r3
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	6839      	ldr	r1, [r7, #0]
 8001e12:	440b      	add	r3, r1
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3302      	adds	r3, #2
 8001e26:	6839      	ldr	r1, [r7, #0]
 8001e28:	440b      	add	r3, r1
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	041b      	lsls	r3, r3, #16
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3303      	adds	r3, #3
 8001e3c:	6839      	ldr	r1, [r7, #0]
 8001e3e:	440b      	add	r3, r1
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	061b      	lsls	r3, r3, #24
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	4413      	add	r3, r2
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	3301      	adds	r3, #1
 8001e66:	6839      	ldr	r1, [r7, #0]
 8001e68:	440b      	add	r3, r1
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	6839      	ldr	r1, [r7, #0]
 8001e7e:	440b      	add	r3, r1
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	041b      	lsls	r3, r3, #16
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3303      	adds	r3, #3
 8001e92:	6839      	ldr	r1, [r7, #0]
 8001e94:	440b      	add	r3, r1
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	061b      	lsls	r3, r3, #24
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	60fb      	str	r3, [r7, #12]
     return offset;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
    }
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	0800f60c 	.word	0x0800f60c

08001ed0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	0800f61c 	.word	0x0800f61c

08001eec <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fef8 	bl	8001cec <_ZN3ros3MsgC1Ev>
 8001efc:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	809a      	strh	r2, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a09      	ldr	r2, [pc, #36]	; (8001f30 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001f12:	60da      	str	r2, [r3, #12]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a06      	ldr	r2, [pc, #24]	; (8001f30 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001f18:	611a      	str	r2, [r3, #16]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	615a      	str	r2, [r3, #20]
    {
    }
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	0800fac4 	.word	0x0800fac4
 8001f30:	0800f640 	.word	0x0800f640

08001f34 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	8899      	ldrh	r1, [r3, #4]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b2ca      	uxtb	r2, r1
 8001f4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	889b      	ldrh	r3, [r3, #4]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	b299      	uxth	r1, r3
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	b2ca      	uxtb	r2, r1
 8001f62:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	3302      	adds	r3, #2
 8001f68:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe f92e 	bl	80001d0 <strlen>
 8001f74:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	69b9      	ldr	r1, [r7, #24]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f001 fd52 	bl	8003a28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	3304      	adds	r3, #4
 8001f88:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	18d0      	adds	r0, r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4619      	mov	r1, r3
 8001f98:	f00d f976 	bl	800f288 <memcpy>
      offset += length_topic_name;
 8001f9c:	69fa      	ldr	r2, [r7, #28]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe f911 	bl	80001d0 <strlen>
 8001fae:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	6979      	ldr	r1, [r7, #20]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f001 fd35 	bl	8003a28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	18d0      	adds	r0, r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f00d f959 	bl	800f288 <memcpy>
      offset += length_message_type;
 8001fd6:	69fa      	ldr	r2, [r7, #28]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	4413      	add	r3, r2
 8001fdc:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe f8f4 	bl	80001d0 <strlen>
 8001fe8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	6939      	ldr	r1, [r7, #16]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f001 fd18 	bl	8003a28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	18d0      	adds	r0, r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4619      	mov	r1, r3
 800200c:	f00d f93c 	bl	800f288 <memcpy>
      offset += length_md5sum;
 8002010:	69fa      	ldr	r2, [r7, #28]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4413      	add	r3, r2
 8002016:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800201e:	68f9      	ldr	r1, [r7, #12]
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	4413      	add	r3, r2
 8002026:	b2ca      	uxtb	r2, r1
 8002028:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	0a19      	lsrs	r1, r3, #8
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3301      	adds	r3, #1
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	4413      	add	r3, r2
 8002036:	b2ca      	uxtb	r2, r1
 8002038:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	0c19      	lsrs	r1, r3, #16
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3302      	adds	r3, #2
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	4413      	add	r3, r2
 8002046:	b2ca      	uxtb	r2, r1
 8002048:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	0e19      	lsrs	r1, r3, #24
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3303      	adds	r3, #3
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	4413      	add	r3, r2
 8002056:	b2ca      	uxtb	r2, r1
 8002058:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3304      	adds	r3, #4
 800205e:	61fb      	str	r3, [r7, #28]
      return offset;
 8002060:	69fb      	ldr	r3, [r7, #28]
    }
 8002062:	4618      	mov	r0, r3
 8002064:	3720      	adds	r7, #32
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800206a:	b580      	push	{r7, lr}
 800206c:	b08a      	sub	sp, #40	; 0x28
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	4413      	add	r3, r2
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	b29a      	uxth	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	889b      	ldrh	r3, [r3, #4]
 800208a:	b21a      	sxth	r2, r3
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	3301      	adds	r3, #1
 8002090:	6839      	ldr	r1, [r7, #0]
 8002092:	440b      	add	r3, r1
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	b21b      	sxth	r3, r3
 800209a:	4313      	orrs	r3, r2
 800209c:	b21b      	sxth	r3, r3
 800209e:	b29a      	uxth	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	3302      	adds	r3, #2
 80020a8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	441a      	add	r2, r3
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f001 fcd4 	bl	8003a64 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	3304      	adds	r3, #4
 80020c0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	4413      	add	r3, r2
 80020cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d20c      	bcs.n	80020ec <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	441a      	add	r2, r3
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	3b01      	subs	r3, #1
 80020dc:	6839      	ldr	r1, [r7, #0]
 80020de:	440b      	add	r3, r1
 80020e0:	7812      	ldrb	r2, [r2, #0]
 80020e2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	3301      	adds	r3, #1
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ea:	e7ec      	b.n	80020c6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	4413      	add	r3, r2
 80020f2:	3b01      	subs	r3, #1
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	3b01      	subs	r3, #1
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	441a      	add	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	4413      	add	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	441a      	add	r2, r3
 8002116:	f107 0310 	add.w	r3, r7, #16
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f001 fca1 	bl	8003a64 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	3304      	adds	r3, #4
 8002126:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	623b      	str	r3, [r7, #32]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	6a3a      	ldr	r2, [r7, #32]
 8002134:	429a      	cmp	r2, r3
 8002136:	d20c      	bcs.n	8002152 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	441a      	add	r2, r3
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	3b01      	subs	r3, #1
 8002142:	6839      	ldr	r1, [r7, #0]
 8002144:	440b      	add	r3, r1
 8002146:	7812      	ldrb	r2, [r2, #0]
 8002148:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	3301      	adds	r3, #1
 800214e:	623b      	str	r3, [r7, #32]
 8002150:	e7ec      	b.n	800212c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4413      	add	r3, r2
 8002158:	3b01      	subs	r3, #1
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	4413      	add	r3, r2
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	3b01      	subs	r3, #1
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	441a      	add	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4413      	add	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	441a      	add	r2, r3
 800217c:	f107 030c 	add.w	r3, r7, #12
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f001 fc6e 	bl	8003a64 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	3304      	adds	r3, #4
 800218c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	429a      	cmp	r2, r3
 800219c:	d20c      	bcs.n	80021b8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	441a      	add	r2, r3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	6839      	ldr	r1, [r7, #0]
 80021aa:	440b      	add	r3, r1
 80021ac:	7812      	ldrb	r2, [r2, #0]
 80021ae:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	3301      	adds	r3, #1
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	e7ec      	b.n	8002192 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4413      	add	r3, r2
 80021be:	3b01      	subs	r3, #1
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	441a      	add	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4413      	add	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	6839      	ldr	r1, [r7, #0]
 80021e6:	440a      	add	r2, r1
 80021e8:	7812      	ldrb	r2, [r2, #0]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	3301      	adds	r3, #1
 80021f4:	6839      	ldr	r1, [r7, #0]
 80021f6:	440b      	add	r3, r1
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	3302      	adds	r3, #2
 8002206:	6839      	ldr	r1, [r7, #0]
 8002208:	440b      	add	r3, r1
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	041b      	lsls	r3, r3, #16
 800220e:	4313      	orrs	r3, r2
 8002210:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	3303      	adds	r3, #3
 8002218:	6839      	ldr	r1, [r7, #0]
 800221a:	440b      	add	r3, r1
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	061b      	lsls	r3, r3, #24
 8002220:	4313      	orrs	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	3304      	adds	r3, #4
 800222e:	61bb      	str	r3, [r7, #24]
     return offset;
 8002230:	69bb      	ldr	r3, [r7, #24]
    }
 8002232:	4618      	mov	r0, r3
 8002234:	3728      	adds	r7, #40	; 0x28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	0800f644 	.word	0x0800f644

08002258 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	0800f660 	.word	0x0800f660

08002274 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fd34 	bl	8001cec <_ZN3ros3MsgC1Ev>
 8002284:	4a06      	ldr	r2, [pc, #24]	; (80022a0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	711a      	strb	r2, [r3, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002294:	609a      	str	r2, [r3, #8]
    {
    }
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	0800faac 	.word	0x0800faac
 80022a4:	0800f640 	.word	0x0800f640

080022a8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	7912      	ldrb	r2, [r2, #4]
 80022c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3301      	adds	r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fd ff7f 	bl	80001d0 <strlen>
 80022d2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	4413      	add	r3, r2
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	4618      	mov	r0, r3
 80022de:	f001 fba3 	bl	8003a28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	3304      	adds	r3, #4
 80022e6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	18d0      	adds	r0, r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	4619      	mov	r1, r3
 80022f6:	f00c ffc7 	bl	800f288 <memcpy>
      offset += length_msg;
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4413      	add	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
      return offset;
 8002302:	68fb      	ldr	r3, [r7, #12]
    }
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	4413      	add	r3, r2
 8002320:	781a      	ldrb	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	3301      	adds	r3, #1
 800232a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	441a      	add	r2, r3
 8002332:	f107 030c 	add.w	r3, r7, #12
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f001 fb93 	bl	8003a64 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	3304      	adds	r3, #4
 8002342:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4413      	add	r3, r2
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	429a      	cmp	r2, r3
 8002352:	d20c      	bcs.n	800236e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	441a      	add	r2, r3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	3b01      	subs	r3, #1
 800235e:	6839      	ldr	r1, [r7, #0]
 8002360:	440b      	add	r3, r1
 8002362:	7812      	ldrb	r2, [r2, #0]
 8002364:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	3301      	adds	r3, #1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	e7ec      	b.n	8002348 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4413      	add	r3, r2
 8002374:	3b01      	subs	r3, #1
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	4413      	add	r3, r2
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	3b01      	subs	r3, #1
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	441a      	add	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
     return offset;
 8002392:	693b      	ldr	r3, [r7, #16]
    }
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	0800f684 	.word	0x0800f684

080023b8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	0800f698 	.word	0x0800f698

080023d4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fc84 	bl	8001cec <_ZN3ros3MsgC1Ev>
 80023e4:	4a0c      	ldr	r2, [pc, #48]	; (8002418 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	619a      	str	r2, [r3, #24]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	61da      	str	r2, [r3, #28]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	0800fa94 	.word	0x0800fa94

0800241c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6859      	ldr	r1, [r3, #4]
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	4413      	add	r3, r2
 8002434:	b2ca      	uxtb	r2, r1
 8002436:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	0a19      	lsrs	r1, r3, #8
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	3301      	adds	r3, #1
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	4413      	add	r3, r2
 8002446:	b2ca      	uxtb	r2, r1
 8002448:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	0c19      	lsrs	r1, r3, #16
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	3302      	adds	r3, #2
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	4413      	add	r3, r2
 8002458:	b2ca      	uxtb	r2, r1
 800245a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	0e19      	lsrs	r1, r3, #24
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	3303      	adds	r3, #3
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	4413      	add	r3, r2
 800246a:	b2ca      	uxtb	r2, r1
 800246c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	3304      	adds	r3, #4
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002474:	2300      	movs	r3, #0
 8002476:	623b      	str	r3, [r7, #32]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	6a3a      	ldr	r2, [r7, #32]
 800247e:	429a      	cmp	r2, r3
 8002480:	d22b      	bcs.n	80024da <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002490:	6939      	ldr	r1, [r7, #16]
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	4413      	add	r3, r2
 8002498:	b2ca      	uxtb	r2, r1
 800249a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	0a19      	lsrs	r1, r3, #8
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	3301      	adds	r3, #1
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	4413      	add	r3, r2
 80024a8:	b2ca      	uxtb	r2, r1
 80024aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	0c19      	lsrs	r1, r3, #16
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	3302      	adds	r3, #2
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	b2ca      	uxtb	r2, r1
 80024ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	0e19      	lsrs	r1, r3, #24
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	3303      	adds	r3, #3
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	b2ca      	uxtb	r2, r1
 80024ca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	3304      	adds	r3, #4
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	3301      	adds	r3, #1
 80024d6:	623b      	str	r3, [r7, #32]
 80024d8:	e7ce      	b.n	8002478 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6919      	ldr	r1, [r3, #16]
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	b2ca      	uxtb	r2, r1
 80024e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	0a19      	lsrs	r1, r3, #8
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	3301      	adds	r3, #1
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	4413      	add	r3, r2
 80024f6:	b2ca      	uxtb	r2, r1
 80024f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	0c19      	lsrs	r1, r3, #16
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	3302      	adds	r3, #2
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	4413      	add	r3, r2
 8002508:	b2ca      	uxtb	r2, r1
 800250a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	0e19      	lsrs	r1, r3, #24
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	3303      	adds	r3, #3
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	4413      	add	r3, r2
 800251a:	b2ca      	uxtb	r2, r1
 800251c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	3304      	adds	r3, #4
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002524:	2300      	movs	r3, #0
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	69fa      	ldr	r2, [r7, #28]
 800252e:	429a      	cmp	r2, r3
 8002530:	d22b      	bcs.n	800258a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699a      	ldr	r2, [r3, #24]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002540:	68f9      	ldr	r1, [r7, #12]
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	4413      	add	r3, r2
 8002548:	b2ca      	uxtb	r2, r1
 800254a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	0a19      	lsrs	r1, r3, #8
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	3301      	adds	r3, #1
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	4413      	add	r3, r2
 8002558:	b2ca      	uxtb	r2, r1
 800255a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	0c19      	lsrs	r1, r3, #16
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	3302      	adds	r3, #2
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	4413      	add	r3, r2
 8002568:	b2ca      	uxtb	r2, r1
 800256a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	0e19      	lsrs	r1, r3, #24
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	3303      	adds	r3, #3
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	4413      	add	r3, r2
 8002578:	b2ca      	uxtb	r2, r1
 800257a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	3304      	adds	r3, #4
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3301      	adds	r3, #1
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	e7ce      	b.n	8002528 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69d9      	ldr	r1, [r3, #28]
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	4413      	add	r3, r2
 8002594:	b2ca      	uxtb	r2, r1
 8002596:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	0a19      	lsrs	r1, r3, #8
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	3301      	adds	r3, #1
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	4413      	add	r3, r2
 80025a6:	b2ca      	uxtb	r2, r1
 80025a8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	0c19      	lsrs	r1, r3, #16
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	3302      	adds	r3, #2
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	b2ca      	uxtb	r2, r1
 80025ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	0e19      	lsrs	r1, r3, #24
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	3303      	adds	r3, #3
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	4413      	add	r3, r2
 80025ca:	b2ca      	uxtb	r2, r1
 80025cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	3304      	adds	r3, #4
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80025d4:	2300      	movs	r3, #0
 80025d6:	61bb      	str	r3, [r7, #24]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d228      	bcs.n	8002634 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fd fdee 	bl	80001d0 <strlen>
 80025f4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	4413      	add	r3, r2
 80025fc:	6979      	ldr	r1, [r7, #20]
 80025fe:	4618      	mov	r0, r3
 8002600:	f001 fa12 	bl	8003a28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	3304      	adds	r3, #4
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	18d0      	adds	r0, r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4619      	mov	r1, r3
 8002620:	f00c fe32 	bl	800f288 <memcpy>
      offset += length_stringsi;
 8002624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	4413      	add	r3, r2
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	3301      	adds	r3, #1
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	e7d1      	b.n	80025d8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002636:	4618      	mov	r0, r3
 8002638:	3728      	adds	r7, #40	; 0x28
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800263e:	b580      	push	{r7, lr}
 8002640:	b08e      	sub	sp, #56	; 0x38
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800264c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	4413      	add	r3, r2
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002658:	3301      	adds	r3, #1
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	4413      	add	r3, r2
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	6a3a      	ldr	r2, [r7, #32]
 8002664:	4313      	orrs	r3, r2
 8002666:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266a:	3302      	adds	r3, #2
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	4413      	add	r3, r2
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	041b      	lsls	r3, r3, #16
 8002674:	6a3a      	ldr	r2, [r7, #32]
 8002676:	4313      	orrs	r3, r2
 8002678:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800267a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267c:	3303      	adds	r3, #3
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	4413      	add	r3, r2
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	061b      	lsls	r3, r3, #24
 8002686:	6a3a      	ldr	r2, [r7, #32]
 8002688:	4313      	orrs	r3, r2
 800268a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800268c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268e:	3304      	adds	r3, #4
 8002690:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	6a3a      	ldr	r2, [r7, #32]
 8002698:	429a      	cmp	r2, r3
 800269a:	d90a      	bls.n	80026b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4619      	mov	r1, r3
 80026a6:	4610      	mov	r0, r2
 80026a8:	f00c feaa 	bl	800f400 <realloc>
 80026ac:	4602      	mov	r2, r0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a3a      	ldr	r2, [r7, #32]
 80026b6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80026b8:	2300      	movs	r3, #0
 80026ba:	633b      	str	r3, [r7, #48]	; 0x30
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d236      	bcs.n	8002734 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026ce:	6839      	ldr	r1, [r7, #0]
 80026d0:	440a      	add	r2, r1
 80026d2:	7812      	ldrb	r2, [r2, #0]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026dc:	3301      	adds	r3, #1
 80026de:	6839      	ldr	r1, [r7, #0]
 80026e0:	440b      	add	r3, r1
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	021b      	lsls	r3, r3, #8
 80026e6:	4313      	orrs	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ee:	3302      	adds	r3, #2
 80026f0:	6839      	ldr	r1, [r7, #0]
 80026f2:	440b      	add	r3, r1
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	041b      	lsls	r3, r3, #16
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002700:	3303      	adds	r3, #3
 8002702:	6839      	ldr	r1, [r7, #0]
 8002704:	440b      	add	r3, r1
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	061b      	lsls	r3, r3, #24
 800270a:	4313      	orrs	r3, r2
 800270c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002716:	3304      	adds	r3, #4
 8002718:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	3208      	adds	r2, #8
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272e:	3301      	adds	r3, #1
 8002730:	633b      	str	r3, [r7, #48]	; 0x30
 8002732:	e7c3      	b.n	80026bc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	4413      	add	r3, r2
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800273e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002740:	3301      	adds	r3, #1
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	4413      	add	r3, r2
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	4313      	orrs	r3, r2
 800274e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002752:	3302      	adds	r3, #2
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	4413      	add	r3, r2
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	041b      	lsls	r3, r3, #16
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	4313      	orrs	r3, r2
 8002760:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002764:	3303      	adds	r3, #3
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	4413      	add	r3, r2
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	061b      	lsls	r3, r3, #24
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	4313      	orrs	r3, r2
 8002772:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002776:	3304      	adds	r3, #4
 8002778:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	69fa      	ldr	r2, [r7, #28]
 8002780:	429a      	cmp	r2, r3
 8002782:	d90a      	bls.n	800279a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699a      	ldr	r2, [r3, #24]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	f00c fe36 	bl	800f400 <realloc>
 8002794:	4602      	mov	r2, r0
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80027a0:	2300      	movs	r3, #0
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d236      	bcs.n	800281c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027b6:	6839      	ldr	r1, [r7, #0]
 80027b8:	440a      	add	r2, r1
 80027ba:	7812      	ldrb	r2, [r2, #0]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c4:	3301      	adds	r3, #1
 80027c6:	6839      	ldr	r1, [r7, #0]
 80027c8:	440b      	add	r3, r1
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d6:	3302      	adds	r3, #2
 80027d8:	6839      	ldr	r1, [r7, #0]
 80027da:	440b      	add	r3, r1
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	041b      	lsls	r3, r3, #16
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e8:	3303      	adds	r3, #3
 80027ea:	6839      	ldr	r1, [r7, #0]
 80027ec:	440b      	add	r3, r1
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	061b      	lsls	r3, r3, #24
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80027fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fe:	3304      	adds	r3, #4
 8002800:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699a      	ldr	r2, [r3, #24]
 8002806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	3214      	adds	r2, #20
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002816:	3301      	adds	r3, #1
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800281a:	e7c3      	b.n	80027a4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800281c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	4413      	add	r3, r2
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002828:	3301      	adds	r3, #1
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	4413      	add	r3, r2
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800283a:	3302      	adds	r3, #2
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	4413      	add	r3, r2
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	041b      	lsls	r3, r3, #16
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800284a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800284c:	3303      	adds	r3, #3
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	4413      	add	r3, r2
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	061b      	lsls	r3, r3, #24
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800285c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285e:	3304      	adds	r3, #4
 8002860:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	429a      	cmp	r2, r3
 800286a:	d90a      	bls.n	8002882 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4619      	mov	r1, r3
 8002876:	4610      	mov	r0, r2
 8002878:	f00c fdc2 	bl	800f400 <realloc>
 800287c:	4602      	mov	r2, r0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002888:	2300      	movs	r3, #0
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002892:	429a      	cmp	r2, r3
 8002894:	d23f      	bcs.n	8002916 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	441a      	add	r2, r3
 800289c:	f107 030c 	add.w	r3, r7, #12
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f001 f8de 	bl	8003a64 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80028a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028aa:	3304      	adds	r3, #4
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80028ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
 80028b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4413      	add	r3, r2
 80028b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d20c      	bcs.n	80028d8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	441a      	add	r2, r3
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	3b01      	subs	r3, #1
 80028c8:	6839      	ldr	r1, [r7, #0]
 80028ca:	440b      	add	r3, r1
 80028cc:	7812      	ldrb	r2, [r2, #0]
 80028ce:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	3301      	adds	r3, #1
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
 80028d6:	e7ec      	b.n	80028b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80028d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4413      	add	r3, r2
 80028de:	3b01      	subs	r3, #1
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	4413      	add	r3, r2
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80028e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ea:	3b01      	subs	r3, #1
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	441a      	add	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80028f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4413      	add	r3, r2
 80028fa:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	3220      	adds	r2, #32
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002910:	3301      	adds	r3, #1
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
 8002914:	e7ba      	b.n	800288c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002918:	4618      	mov	r0, r3
 800291a:	3738      	adds	r7, #56	; 0x38
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	0800f9a0 	.word	0x0800f9a0

0800293c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	4b03      	ldr	r3, [pc, #12]	; (8002954 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	0800f6bc 	.word	0x0800f6bc

08002958 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	611a      	str	r2, [r3, #16]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68d8      	ldr	r0, [r3, #12]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6891      	ldr	r1, [r2, #8]
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	4798      	blx	r3
 80029a4:	4603      	mov	r3, r0
  };
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
  }
 80029ba:	4618      	mov	r0, r3
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <_ZN13STM32HardwareC1Ev>:
extern struct ringbuffer rb;

class STM32Hardware
{
public:
	STM32Hardware() {
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
	}
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <_ZN13STM32Hardware4initEv>:

	void init() {
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
	}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <_ZN13STM32Hardware4readEv>:

	// Read a byte of data from ROS connection.
	// If no data , returns -1
	int read()
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
	{
		uint32_t r;
		uint8_t ch = -1;
 80029f8:	23ff      	movs	r3, #255	; 0xff
 80029fa:	72fb      	strb	r3, [r7, #11]

		r = ringbuffer_getchar(&rb, &ch);
 80029fc:	f107 030b 	add.w	r3, r7, #11
 8002a00:	4619      	mov	r1, r3
 8002a02:	4807      	ldr	r0, [pc, #28]	; (8002a20 <_ZN13STM32Hardware4readEv+0x30>)
 8002a04:	f001 ffda 	bl	80049bc <_Z18ringbuffer_getcharP10ringbufferPh>
 8002a08:	60f8      	str	r0, [r7, #12]

		if (1 == r)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <_ZN13STM32Hardware4readEv+0x24>
			return ch;
 8002a10:	7afb      	ldrb	r3, [r7, #11]
 8002a12:	e001      	b.n	8002a18 <_ZN13STM32Hardware4readEv+0x28>
		else
			return -1;
 8002a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	200004dc 	.word	0x200004dc

08002a24 <_ZN13STM32Hardware5writeEPhi>:


	// Send a byte of data to ROS connection
	void write(uint8_t* data, int length)
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
	{
		CDC_Transmit_FS(data, length);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	4619      	mov	r1, r3
 8002a36:	68b8      	ldr	r0, [r7, #8]
 8002a38:	f00b ff8e 	bl	800e958 <CDC_Transmit_FS>
	}
 8002a3c:	bf00      	nop
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <_ZN13STM32Hardware4timeEv>:

	// Returns milliseconds since start of program
	unsigned long time(void)
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	{
		return HAL_GetTick();
 8002a4c:	f002 f874 	bl	8004b38 <HAL_GetTick>
 8002a50:	4603      	mov	r3, r0
	}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <_ZN8std_msgs4Int8C1Ev>:
  {
    public:
      typedef int8_t _data_type;
      _data_type data;

    Int8():
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
      data(0)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff f940 	bl	8001cec <_ZN3ros3MsgC1Ev>
 8002a6c:	4a05      	ldr	r2, [pc, #20]	; (8002a84 <_ZN8std_msgs4Int8C1Ev+0x28>)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	711a      	strb	r2, [r3, #4]
    {
    }
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	0800fa50 	.word	0x0800fa50

08002a88 <_ZNK8std_msgs4Int89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002a9c:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	7a3a      	ldrb	r2, [r7, #8]
 8002aa6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]
      return offset;
 8002aae:	68fb      	ldr	r3, [r7, #12]
    }
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <_ZN8std_msgs4Int811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ace:	7a3a      	ldrb	r2, [r7, #8]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6839      	ldr	r1, [r7, #0]
 8002ad4:	440b      	add	r3, r1
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8002ade:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	60fb      	str	r3, [r7, #12]
     return offset;
 8002aec:	68fb      	ldr	r3, [r7, #12]
    }
 8002aee:	4618      	mov	r0, r3
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <_ZN8std_msgs4Int87getTypeEv>:

    const char * getType(){ return "std_msgs/Int8"; };
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <_ZN8std_msgs4Int87getTypeEv+0x18>)
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	0800f6e0 	.word	0x0800f6e0

08002b18 <_ZN8std_msgs4Int86getMD5Ev>:
    const char * getMD5(){ return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <_ZN8std_msgs4Int86getMD5Ev+0x18>)
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	0800f6f0 	.word	0x0800f6f0

08002b34 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff f8d4 	bl	8001cec <_ZN3ros3MsgC1Ev>
 8002b44:	4a08      	ldr	r2, [pc, #32]	; (8002b68 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a07      	ldr	r2, [pc, #28]	; (8002b6c <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	60da      	str	r2, [r3, #12]
    {
    }
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	0800fa38 	.word	0x0800fa38
 8002b6c:	0800f640 	.word	0x0800f640

08002b70 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fd fb24 	bl	80001d0 <strlen>
 8002b88:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	4413      	add	r3, r2
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 ff48 	bl	8003a28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	18d0      	adds	r0, r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	4619      	mov	r1, r3
 8002bac:	f00c fb6c 	bl	800f288 <memcpy>
      offset += length_label;
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6899      	ldr	r1, [r3, #8]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	b2ca      	uxtb	r2, r1
 8002bc4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	0a19      	lsrs	r1, r3, #8
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	b2ca      	uxtb	r2, r1
 8002bd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	0c19      	lsrs	r1, r3, #16
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3302      	adds	r3, #2
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	4413      	add	r3, r2
 8002be6:	b2ca      	uxtb	r2, r1
 8002be8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	0e19      	lsrs	r1, r3, #24
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	3303      	adds	r3, #3
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	b2ca      	uxtb	r2, r1
 8002bfa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68d9      	ldr	r1, [r3, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	b2ca      	uxtb	r2, r1
 8002c0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	0a19      	lsrs	r1, r3, #8
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	b2ca      	uxtb	r2, r1
 8002c20:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	0c19      	lsrs	r1, r3, #16
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3302      	adds	r3, #2
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	4413      	add	r3, r2
 8002c30:	b2ca      	uxtb	r2, r1
 8002c32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	0e19      	lsrs	r1, r3, #24
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3303      	adds	r3, #3
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	4413      	add	r3, r2
 8002c42:	b2ca      	uxtb	r2, r1
 8002c44:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
    }
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b086      	sub	sp, #24
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	441a      	add	r2, r3
 8002c6a:	f107 030c 	add.w	r3, r7, #12
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fef7 	bl	8003a64 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4413      	add	r3, r2
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d20c      	bcs.n	8002ca6 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	441a      	add	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	6839      	ldr	r1, [r7, #0]
 8002c98:	440b      	add	r3, r1
 8002c9a:	7812      	ldrb	r2, [r2, #0]
 8002c9c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	e7ec      	b.n	8002c80 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_label-1]=0;
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4413      	add	r3, r2
 8002cac:	3b01      	subs	r3, #1
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	441a      	add	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	4413      	add	r3, r2
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	6839      	ldr	r1, [r7, #0]
 8002ce2:	440b      	add	r3, r1
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	6839      	ldr	r1, [r7, #0]
 8002cf8:	440b      	add	r3, r1
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	041b      	lsls	r3, r3, #16
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	3303      	adds	r3, #3
 8002d0c:	6839      	ldr	r1, [r7, #0]
 8002d0e:	440b      	add	r3, r1
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	061b      	lsls	r3, r3, #24
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	4413      	add	r3, r2
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	3301      	adds	r3, #1
 8002d36:	6839      	ldr	r1, [r7, #0]
 8002d38:	440b      	add	r3, r1
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	3302      	adds	r3, #2
 8002d4c:	6839      	ldr	r1, [r7, #0]
 8002d4e:	440b      	add	r3, r1
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	041b      	lsls	r3, r3, #16
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	3303      	adds	r3, #3
 8002d62:	6839      	ldr	r1, [r7, #0]
 8002d64:	440b      	add	r3, r1
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	061b      	lsls	r3, r3, #24
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	3304      	adds	r3, #4
 8002d74:	613b      	str	r3, [r7, #16]
     return offset;
 8002d76:	693b      	ldr	r3, [r7, #16]
    }
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	0800f714 	.word	0x0800f714

08002d9c <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	0800f734 	.word	0x0800f734

08002db8 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe ff92 	bl	8001cec <_ZN3ros3MsgC1Ev>
 8002dc8:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3308      	adds	r3, #8
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff feab 	bl	8002b34 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	619a      	str	r2, [r3, #24]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	61da      	str	r2, [r3, #28]
    {
    }
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4618      	mov	r0, r3
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	0800fa20 	.word	0x0800fa20

08002df8 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6859      	ldr	r1, [r3, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	4413      	add	r3, r2
 8002e10:	b2ca      	uxtb	r2, r1
 8002e12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	0a19      	lsrs	r1, r3, #8
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	4413      	add	r3, r2
 8002e22:	b2ca      	uxtb	r2, r1
 8002e24:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	0c19      	lsrs	r1, r3, #16
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	3302      	adds	r3, #2
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	4413      	add	r3, r2
 8002e34:	b2ca      	uxtb	r2, r1
 8002e36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	0e19      	lsrs	r1, r3, #24
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3303      	adds	r3, #3
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	4413      	add	r3, r2
 8002e46:	b2ca      	uxtb	r2, r1
 8002e48:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002e50:	2300      	movs	r3, #0
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d218      	bcs.n	8002e90 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x98>
      offset += this->dim[i].serialize(outbuffer + offset);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	18d0      	adds	r0, r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699a      	ldr	r2, [r3, #24]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	4413      	add	r3, r2
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	6839      	ldr	r1, [r7, #0]
 8002e7a:	440a      	add	r2, r1
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4798      	blx	r3
 8002e80:	4602      	mov	r2, r0
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4413      	add	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	e7e1      	b.n	8002e54 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69d9      	ldr	r1, [r3, #28]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	4413      	add	r3, r2
 8002e9a:	b2ca      	uxtb	r2, r1
 8002e9c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	0a19      	lsrs	r1, r3, #8
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	4413      	add	r3, r2
 8002eac:	b2ca      	uxtb	r2, r1
 8002eae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	0c19      	lsrs	r1, r3, #16
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	3302      	adds	r3, #2
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	b2ca      	uxtb	r2, r1
 8002ec0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	0e19      	lsrs	r1, r3, #24
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3303      	adds	r3, #3
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	4413      	add	r3, r2
 8002ed0:	b2ca      	uxtb	r2, r1
 8002ed2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	60fb      	str	r3, [r7, #12]
      return offset;
 8002eda:	68fb      	ldr	r3, [r7, #12]
    }
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	3301      	adds	r3, #1
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	3302      	adds	r3, #2
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	4413      	add	r3, r2
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	041b      	lsls	r3, r3, #16
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	3303      	adds	r3, #3
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	4413      	add	r3, r2
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	061b      	lsls	r3, r3, #24
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	3304      	adds	r3, #4
 8002f36:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d90a      	bls.n	8002f58 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699a      	ldr	r2, [r3, #24]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	f00c fa57 	bl	800f400 <realloc>
 8002f52:	4602      	mov	r2, r0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d21b      	bcs.n	8002fa4 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xc0>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f103 0008 	add.w	r0, r3, #8
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	4413      	add	r3, r2
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f7ff fe6c 	bl	8002c56 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	4413      	add	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699a      	ldr	r2, [r3, #24]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	18d0      	adds	r0, r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3308      	adds	r3, #8
 8002f94:	2210      	movs	r2, #16
 8002f96:	4619      	mov	r1, r3
 8002f98:	f00c f976 	bl	800f288 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	e7de      	b.n	8002f62 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7e>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	4413      	add	r3, r2
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69da      	ldr	r2, [r3, #28]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	6839      	ldr	r1, [r7, #0]
 8002fbc:	440b      	add	r3, r1
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	021b      	lsls	r3, r3, #8
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69da      	ldr	r2, [r3, #28]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	3302      	adds	r3, #2
 8002fd0:	6839      	ldr	r1, [r7, #0]
 8002fd2:	440b      	add	r3, r1
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	041b      	lsls	r3, r3, #16
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69da      	ldr	r2, [r3, #28]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	3303      	adds	r3, #3
 8002fe6:	6839      	ldr	r1, [r7, #0]
 8002fe8:	440b      	add	r3, r1
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	061b      	lsls	r3, r3, #24
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	617b      	str	r3, [r7, #20]
     return offset;
 8002ffa:	697b      	ldr	r3, [r7, #20]
    }
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	4b03      	ldr	r3, [pc, #12]	; (800301c <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	0800f758 	.word	0x0800f758

08003020 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	4b03      	ldr	r3, [pc, #12]	; (8003038 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	0800f774 	.word	0x0800f774

0800303c <_ZN8std_msgs15UInt8MultiArrayC1Ev>:
      uint32_t data_length;
      typedef uint8_t _data_type;
      _data_type st_data;
      _data_type * data;

    UInt8MultiArray():
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), data(NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fe50 	bl	8001cec <_ZN3ros3MsgC1Ev>
 800304c:	4a09      	ldr	r2, [pc, #36]	; (8003074 <_ZN8std_msgs15UInt8MultiArrayC1Ev+0x38>)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3304      	adds	r3, #4
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff feae 	bl	8002db8 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	625a      	str	r2, [r3, #36]	; 0x24
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	0800fa08 	.word	0x0800fa08

08003078 <_ZNK8std_msgs15UInt8MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
      offset += this->layout.serialize(outbuffer + offset);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	1d18      	adds	r0, r3, #4
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	4413      	add	r3, r2
 8003090:	4619      	mov	r1, r3
 8003092:	f7ff feb1 	bl	8002df8 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8003096:	4602      	mov	r2, r0
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4413      	add	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	4413      	add	r3, r2
 80030a8:	b2ca      	uxtb	r2, r1
 80030aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	0a19      	lsrs	r1, r3, #8
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	3301      	adds	r3, #1
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	4413      	add	r3, r2
 80030ba:	b2ca      	uxtb	r2, r1
 80030bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	0c19      	lsrs	r1, r3, #16
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3302      	adds	r3, #2
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	b2ca      	uxtb	r2, r1
 80030ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	0e19      	lsrs	r1, r3, #24
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3303      	adds	r3, #3
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	4413      	add	r3, r2
 80030de:	b2ca      	uxtb	r2, r1
 80030e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3304      	adds	r3, #4
 80030e6:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < data_length; i++){
 80030e8:	2300      	movs	r3, #0
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d20f      	bcs.n	8003116 <_ZNK8std_msgs15UInt8MultiArray9serializeEPh+0x9e>
      *(outbuffer + offset + 0) = (this->data[i] >> (8 * 0)) & 0xFF;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	441a      	add	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6839      	ldr	r1, [r7, #0]
 8003102:	440b      	add	r3, r1
 8003104:	7812      	ldrb	r2, [r2, #0]
 8003106:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3301      	adds	r3, #1
 800310c:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < data_length; i++){
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	3301      	adds	r3, #1
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	e7ea      	b.n	80030ec <_ZNK8std_msgs15UInt8MultiArray9serializeEPh+0x74>
      }
      return offset;
 8003116:	68fb      	ldr	r3, [r7, #12]
    }
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	1d18      	adds	r0, r3, #4
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	4413      	add	r3, r2
 8003138:	4619      	mov	r1, r3
 800313a:	f7ff fed3 	bl	8002ee4 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 800313e:	4602      	mov	r2, r0
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	4413      	add	r3, r2
 8003144:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	4413      	add	r3, r2
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	3301      	adds	r3, #1
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	4413      	add	r3, r2
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	021b      	lsls	r3, r3, #8
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	3302      	adds	r3, #2
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	4413      	add	r3, r2
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	041b      	lsls	r3, r3, #16
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	3303      	adds	r3, #3
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	4413      	add	r3, r2
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	061b      	lsls	r3, r3, #24
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	3304      	adds	r3, #4
 800318a:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	429a      	cmp	r2, r3
 8003194:	d908      	bls.n	80031a8 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0x88>
        this->data = (uint8_t*)realloc(this->data, data_lengthT * sizeof(uint8_t));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319a:	68f9      	ldr	r1, [r7, #12]
 800319c:	4618      	mov	r0, r3
 800319e:	f00c f92f 	bl	800f400 <realloc>
 80031a2:	4602      	mov	r2, r0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d215      	bcs.n	80031e8 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0xc8>
      this->st_data =  ((uint8_t) (*(inbuffer + offset)));
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	4413      	add	r3, r2
 80031c2:	781a      	ldrb	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	3301      	adds	r3, #1
 80031ce:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(uint8_t));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4413      	add	r3, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	3228      	adds	r2, #40	; 0x28
 80031dc:	7812      	ldrb	r2, [r2, #0]
 80031de:	701a      	strb	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	3301      	adds	r3, #1
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	e7e4      	b.n	80031b2 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0x92>
      }
     return offset;
 80031e8:	697b      	ldr	r3, [r7, #20]
    }
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <_ZN8std_msgs15UInt8MultiArray7getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8MultiArray"; };
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	4b03      	ldr	r3, [pc, #12]	; (800320c <_ZN8std_msgs15UInt8MultiArray7getTypeEv+0x18>)
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	0800f798 	.word	0x0800f798

08003210 <_ZN8std_msgs15UInt8MultiArray6getMD5Ev>:
    const char * getMD5(){ return "82373f1612381bb6ee473b5cd6f5d89c"; };
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <_ZN8std_msgs15UInt8MultiArray6getMD5Ev+0x18>)
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	0800f7b4 	.word	0x0800f7b4

0800322c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe fd58 	bl	8001cec <_ZN3ros3MsgC1Ev>
 800323c:	4a09      	ldr	r2, [pc, #36]	; (8003264 <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	609a      	str	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	60da      	str	r2, [r3, #12]
    {
    }
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4618      	mov	r0, r3
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	0800f9f0 	.word	0x0800f9f0

08003268 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	441a      	add	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003282:	eeb0 0a67 	vmov.f32	s0, s15
 8003286:	4610      	mov	r0, r2
 8003288:	f7fe fc52 	bl	8001b30 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800328c:	4602      	mov	r2, r0
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4413      	add	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	441a      	add	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	edd3 7a02 	vldr	s15, [r3, #8]
 80032a0:	eeb0 0a67 	vmov.f32	s0, s15
 80032a4:	4610      	mov	r0, r2
 80032a6:	f7fe fc43 	bl	8001b30 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80032aa:	4602      	mov	r2, r0
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	441a      	add	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80032be:	eeb0 0a67 	vmov.f32	s0, s15
 80032c2:	4610      	mov	r0, r2
 80032c4:	f7fe fc34 	bl	8001b30 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4413      	add	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
      return offset;
 80032d0:	68fb      	ldr	r3, [r7, #12]
    }
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	441a      	add	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3304      	adds	r3, #4
 80032f2:	4619      	mov	r1, r3
 80032f4:	4610      	mov	r0, r2
 80032f6:	f7fe fc87 	bl	8001c08 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80032fa:	4602      	mov	r2, r0
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4413      	add	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	441a      	add	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3308      	adds	r3, #8
 800330c:	4619      	mov	r1, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f7fe fc7a 	bl	8001c08 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4413      	add	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	441a      	add	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	330c      	adds	r3, #12
 8003326:	4619      	mov	r1, r3
 8003328:	4610      	mov	r0, r2
 800332a:	f7fe fc6d 	bl	8001c08 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800332e:	4602      	mov	r2, r0
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4413      	add	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]
     return offset;
 8003336:	68fb      	ldr	r3, [r7, #12]
    }
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	4b03      	ldr	r3, [pc, #12]	; (8003358 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	0800f7d8 	.word	0x0800f7d8

0800335c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	4b03      	ldr	r3, [pc, #12]	; (8003374 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	0800f7f0 	.word	0x0800f7f0

08003378 <rpm_rightFront_subCb>:
static nbt_t sensors1_3_data_nbt;
static nbt_t sensors4_6_data_nbt;
static nbt_t sensors7_8_data_nbt;

extern "C" void rpm_rightFront_subCb(const std_msgs::Int8& msg)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003386:	2b05      	cmp	r3, #5
 8003388:	dd08      	ble.n	800339c <rpm_rightFront_subCb+0x24>
		speedDataRightFrontWheel = msg.data;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8003390:	4b14      	ldr	r3, [pc, #80]	; (80033e4 <rpm_rightFront_subCb+0x6c>)
 8003392:	701a      	strb	r2, [r3, #0]
		sideDataRightFrontWheel = 0; //CW
 8003394:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <rpm_rightFront_subCb+0x70>)
 8003396:	2200      	movs	r2, #0
 8003398:	701a      	strb	r2, [r3, #0]
	}
	else if (msg.data == 0) {
		speedDataRightFrontWheel = 0;
		sideDataRightFrontWheel = 2;
	}
}
 800339a:	e01d      	b.n	80033d8 <rpm_rightFront_subCb+0x60>
	else if (msg.data <= -6) {
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80033a2:	f113 0f05 	cmn.w	r3, #5
 80033a6:	da0c      	bge.n	80033c2 <rpm_rightFront_subCb+0x4a>
		speedDataRightFrontWheel = -(msg.data);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	425b      	negs	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	b25a      	sxtb	r2, r3
 80033b6:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <rpm_rightFront_subCb+0x6c>)
 80033b8:	701a      	strb	r2, [r3, #0]
		sideDataRightFrontWheel = 1; //CCW
 80033ba:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <rpm_rightFront_subCb+0x70>)
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
}
 80033c0:	e00a      	b.n	80033d8 <rpm_rightFront_subCb+0x60>
	else if (msg.data == 0) {
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d105      	bne.n	80033d8 <rpm_rightFront_subCb+0x60>
		speedDataRightFrontWheel = 0;
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <rpm_rightFront_subCb+0x6c>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	701a      	strb	r2, [r3, #0]
		sideDataRightFrontWheel = 2;
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <rpm_rightFront_subCb+0x70>)
 80033d4:	2202      	movs	r2, #2
 80033d6:	701a      	strb	r2, [r3, #0]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	2000046d 	.word	0x2000046d
 80033e8:	20000471 	.word	0x20000471

080033ec <rpm_leftFront_subCb>:

extern "C" void rpm_leftFront_subCb(const std_msgs::Int8& msg)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80033fa:	2b05      	cmp	r3, #5
 80033fc:	dd08      	ble.n	8003410 <rpm_leftFront_subCb+0x24>
		speedDataLeftFrontWheel = msg.data;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8003404:	4b12      	ldr	r3, [pc, #72]	; (8003450 <rpm_leftFront_subCb+0x64>)
 8003406:	701a      	strb	r2, [r3, #0]
		sideDataLeftFrontWheel = 1; //CCW
 8003408:	4b12      	ldr	r3, [pc, #72]	; (8003454 <rpm_leftFront_subCb+0x68>)
 800340a:	2201      	movs	r2, #1
 800340c:	701a      	strb	r2, [r3, #0]
	}
	else {
		speedDataLeftFrontWheel = 0;
		sideDataLeftFrontWheel = 2;
	}
}
 800340e:	e018      	b.n	8003442 <rpm_leftFront_subCb+0x56>
	else if (msg.data <= -6) {
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003416:	f113 0f05 	cmn.w	r3, #5
 800341a:	da0c      	bge.n	8003436 <rpm_leftFront_subCb+0x4a>
		speedDataLeftFrontWheel = -(msg.data);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	425b      	negs	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	b25a      	sxtb	r2, r3
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <rpm_leftFront_subCb+0x64>)
 800342c:	701a      	strb	r2, [r3, #0]
		sideDataLeftFrontWheel = 0; //CW
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <rpm_leftFront_subCb+0x68>)
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
}
 8003434:	e005      	b.n	8003442 <rpm_leftFront_subCb+0x56>
		speedDataLeftFrontWheel = 0;
 8003436:	4b06      	ldr	r3, [pc, #24]	; (8003450 <rpm_leftFront_subCb+0x64>)
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
		sideDataLeftFrontWheel = 2;
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <rpm_leftFront_subCb+0x68>)
 800343e:	2202      	movs	r2, #2
 8003440:	701a      	strb	r2, [r3, #0]
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	2000046e 	.word	0x2000046e
 8003454:	20000472 	.word	0x20000472

08003458 <rpm_rightBack_subCb>:

extern "C" void rpm_rightBack_subCb(const std_msgs::Int8& msg)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003466:	2b05      	cmp	r3, #5
 8003468:	dd08      	ble.n	800347c <rpm_rightBack_subCb+0x24>
		speedDataRightBackWheel = msg.data;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8003470:	4b12      	ldr	r3, [pc, #72]	; (80034bc <rpm_rightBack_subCb+0x64>)
 8003472:	701a      	strb	r2, [r3, #0]
		sideDataRightBackWheel = 0; //CW
 8003474:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <rpm_rightBack_subCb+0x68>)
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]
	}
	else {
		speedDataRightBackWheel = 0;
		sideDataRightBackWheel = 2;
	}
}
 800347a:	e018      	b.n	80034ae <rpm_rightBack_subCb+0x56>
	else if (msg.data <= -6) {
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003482:	f113 0f05 	cmn.w	r3, #5
 8003486:	da0c      	bge.n	80034a2 <rpm_rightBack_subCb+0x4a>
		speedDataRightBackWheel = -(msg.data);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	425b      	negs	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	b25a      	sxtb	r2, r3
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <rpm_rightBack_subCb+0x64>)
 8003498:	701a      	strb	r2, [r3, #0]
		sideDataRightBackWheel = 1; //CCW
 800349a:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <rpm_rightBack_subCb+0x68>)
 800349c:	2201      	movs	r2, #1
 800349e:	701a      	strb	r2, [r3, #0]
}
 80034a0:	e005      	b.n	80034ae <rpm_rightBack_subCb+0x56>
		speedDataRightBackWheel = 0;
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <rpm_rightBack_subCb+0x64>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
		sideDataRightBackWheel = 2;
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <rpm_rightBack_subCb+0x68>)
 80034aa:	2202      	movs	r2, #2
 80034ac:	701a      	strb	r2, [r3, #0]
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	2000046f 	.word	0x2000046f
 80034c0:	20000473 	.word	0x20000473

080034c4 <rpm_leftBack_subCb>:

extern "C" void rpm_leftBack_subCb(const std_msgs::Int8& msg)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80034d2:	2b05      	cmp	r3, #5
 80034d4:	dd08      	ble.n	80034e8 <rpm_leftBack_subCb+0x24>
		speedDataLeftBackWheel = msg.data;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80034dc:	4b12      	ldr	r3, [pc, #72]	; (8003528 <rpm_leftBack_subCb+0x64>)
 80034de:	701a      	strb	r2, [r3, #0]
		sideDataLeftBackWheel = 1; //CCW
 80034e0:	4b12      	ldr	r3, [pc, #72]	; (800352c <rpm_leftBack_subCb+0x68>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]
	}
	else {
		speedDataLeftBackWheel = 0;
		sideDataLeftBackWheel = 2;
	}
}
 80034e6:	e018      	b.n	800351a <rpm_leftBack_subCb+0x56>
	else if (msg.data <= -6) {
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80034ee:	f113 0f05 	cmn.w	r3, #5
 80034f2:	da0c      	bge.n	800350e <rpm_leftBack_subCb+0x4a>
		speedDataLeftBackWheel = -(msg.data);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	425b      	negs	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	b25a      	sxtb	r2, r3
 8003502:	4b09      	ldr	r3, [pc, #36]	; (8003528 <rpm_leftBack_subCb+0x64>)
 8003504:	701a      	strb	r2, [r3, #0]
		sideDataLeftBackWheel = 0; //CW
 8003506:	4b09      	ldr	r3, [pc, #36]	; (800352c <rpm_leftBack_subCb+0x68>)
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]
}
 800350c:	e005      	b.n	800351a <rpm_leftBack_subCb+0x56>
		speedDataLeftBackWheel = 0;
 800350e:	4b06      	ldr	r3, [pc, #24]	; (8003528 <rpm_leftBack_subCb+0x64>)
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
		sideDataLeftBackWheel = 2;
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <rpm_leftBack_subCb+0x68>)
 8003516:	2202      	movs	r2, #2
 8003518:	701a      	strb	r2, [r3, #0]
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	20000470 	.word	0x20000470
 800352c:	20000474 	.word	0x20000474

08003530 <cdc_receive_put>:

extern "C" void cdc_receive_put(uint8_t value)
	{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	71fb      	strb	r3, [r7, #7]
		ringbuffer_putchar(&rb, value);
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	4619      	mov	r1, r3
 800353e:	4803      	ldr	r0, [pc, #12]	; (800354c <cdc_receive_put+0x1c>)
 8003540:	f001 f9e7 	bl	8004912 <_Z18ringbuffer_putcharP10ringbufferh>
	}
 8003544:	bf00      	nop
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	200004dc 	.word	0x200004dc

08003550 <init_ROS>:
extern "C" void init_ROS(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
	ringbuffer_init(&rb, RxBuffer, RxBufferSize);
 8003554:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003558:	4936      	ldr	r1, [pc, #216]	; (8003634 <init_ROS+0xe4>)
 800355a:	4837      	ldr	r0, [pc, #220]	; (8003638 <init_ROS+0xe8>)
 800355c:	f001 fa7f 	bl	8004a5e <_Z15ringbuffer_initP10ringbufferPhs>
	// Initialize ROS
	nh.initNode();
 8003560:	4836      	ldr	r0, [pc, #216]	; (800363c <init_ROS+0xec>)
 8003562:	f000 fb67 	bl	8003c34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

	nh.subscribe(rpm_rightFront_sub);
 8003566:	4936      	ldr	r1, [pc, #216]	; (8003640 <init_ROS+0xf0>)
 8003568:	4834      	ldr	r0, [pc, #208]	; (800363c <init_ROS+0xec>)
 800356a:	f000 fb80 	bl	8003c6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.subscribe(rpm_leftFront_sub);
 800356e:	4935      	ldr	r1, [pc, #212]	; (8003644 <init_ROS+0xf4>)
 8003570:	4832      	ldr	r0, [pc, #200]	; (800363c <init_ROS+0xec>)
 8003572:	f000 fb7c 	bl	8003c6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.subscribe(rpm_rightBack_sub);
 8003576:	4934      	ldr	r1, [pc, #208]	; (8003648 <init_ROS+0xf8>)
 8003578:	4830      	ldr	r0, [pc, #192]	; (800363c <init_ROS+0xec>)
 800357a:	f000 fb78 	bl	8003c6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.subscribe(rpm_leftBack_sub);
 800357e:	4933      	ldr	r1, [pc, #204]	; (800364c <init_ROS+0xfc>)
 8003580:	482e      	ldr	r0, [pc, #184]	; (800363c <init_ROS+0xec>)
 8003582:	f000 fb74 	bl	8003c6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>

	nh.advertise(stm);
 8003586:	4932      	ldr	r1, [pc, #200]	; (8003650 <init_ROS+0x100>)
 8003588:	482c      	ldr	r0, [pc, #176]	; (800363c <init_ROS+0xec>)
 800358a:	f000 fb9d 	bl	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(gyro);
 800358e:	4931      	ldr	r1, [pc, #196]	; (8003654 <init_ROS+0x104>)
 8003590:	482a      	ldr	r0, [pc, #168]	; (800363c <init_ROS+0xec>)
 8003592:	f000 fb99 	bl	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(accel);
 8003596:	4930      	ldr	r1, [pc, #192]	; (8003658 <init_ROS+0x108>)
 8003598:	4828      	ldr	r0, [pc, #160]	; (800363c <init_ROS+0xec>)
 800359a:	f000 fb95 	bl	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_left_front);
 800359e:	492f      	ldr	r1, [pc, #188]	; (800365c <init_ROS+0x10c>)
 80035a0:	4826      	ldr	r0, [pc, #152]	; (800363c <init_ROS+0xec>)
 80035a2:	f000 fb91 	bl	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_right_front);
 80035a6:	492e      	ldr	r1, [pc, #184]	; (8003660 <init_ROS+0x110>)
 80035a8:	4824      	ldr	r0, [pc, #144]	; (800363c <init_ROS+0xec>)
 80035aa:	f000 fb8d 	bl	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_left_back);
 80035ae:	492d      	ldr	r1, [pc, #180]	; (8003664 <init_ROS+0x114>)
 80035b0:	4822      	ldr	r0, [pc, #136]	; (800363c <init_ROS+0xec>)
 80035b2:	f000 fb89 	bl	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_right_back);
 80035b6:	492c      	ldr	r1, [pc, #176]	; (8003668 <init_ROS+0x118>)
 80035b8:	4820      	ldr	r0, [pc, #128]	; (800363c <init_ROS+0xec>)
 80035ba:	f000 fb85 	bl	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	//nh.advertise(diagnostic_data);
	nh.advertise(sensa_data);
 80035be:	492b      	ldr	r1, [pc, #172]	; (800366c <init_ROS+0x11c>)
 80035c0:	481e      	ldr	r0, [pc, #120]	; (800363c <init_ROS+0xec>)
 80035c2:	f000 fb81 	bl	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(sensb_data);
 80035c6:	492a      	ldr	r1, [pc, #168]	; (8003670 <init_ROS+0x120>)
 80035c8:	481c      	ldr	r0, [pc, #112]	; (800363c <init_ROS+0xec>)
 80035ca:	f000 fb7d 	bl	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(sensc_data);
 80035ce:	4929      	ldr	r1, [pc, #164]	; (8003674 <init_ROS+0x124>)
 80035d0:	481a      	ldr	r0, [pc, #104]	; (800363c <init_ROS+0xec>)
 80035d2:	f000 fb79 	bl	8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	NBT_init(&rpm_left_front_nbt, 9);
 80035d6:	2109      	movs	r1, #9
 80035d8:	4827      	ldr	r0, [pc, #156]	; (8003678 <init_ROS+0x128>)
 80035da:	f001 f8fe 	bl	80047da <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_right_front_nbt, 9);
 80035de:	2109      	movs	r1, #9
 80035e0:	4826      	ldr	r0, [pc, #152]	; (800367c <init_ROS+0x12c>)
 80035e2:	f001 f8fa 	bl	80047da <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_left_back_nbt, 9);
 80035e6:	2109      	movs	r1, #9
 80035e8:	4825      	ldr	r0, [pc, #148]	; (8003680 <init_ROS+0x130>)
 80035ea:	f001 f8f6 	bl	80047da <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_right_back_nbt, 9);
 80035ee:	2109      	movs	r1, #9
 80035f0:	4824      	ldr	r0, [pc, #144]	; (8003684 <init_ROS+0x134>)
 80035f2:	f001 f8f2 	bl	80047da <_Z8NBT_initP5nbt_tm>

	NBT_init(&diagnostics_data_nbt, 9);
 80035f6:	2109      	movs	r1, #9
 80035f8:	4823      	ldr	r0, [pc, #140]	; (8003688 <init_ROS+0x138>)
 80035fa:	f001 f8ee 	bl	80047da <_Z8NBT_initP5nbt_tm>
	NBT_init(&sensors1_3_data_nbt, 9);
 80035fe:	2109      	movs	r1, #9
 8003600:	4822      	ldr	r0, [pc, #136]	; (800368c <init_ROS+0x13c>)
 8003602:	f001 f8ea 	bl	80047da <_Z8NBT_initP5nbt_tm>
	NBT_init(&sensors4_6_data_nbt, 9);
 8003606:	2109      	movs	r1, #9
 8003608:	4821      	ldr	r0, [pc, #132]	; (8003690 <init_ROS+0x140>)
 800360a:	f001 f8e6 	bl	80047da <_Z8NBT_initP5nbt_tm>
	NBT_init(&sensors7_8_data_nbt, 9);
 800360e:	2109      	movs	r1, #9
 8003610:	4820      	ldr	r0, [pc, #128]	; (8003694 <init_ROS+0x144>)
 8003612:	f001 f8e2 	bl	80047da <_Z8NBT_initP5nbt_tm>

	NBT_init(&gyro_nbt, 5);
 8003616:	2105      	movs	r1, #5
 8003618:	481f      	ldr	r0, [pc, #124]	; (8003698 <init_ROS+0x148>)
 800361a:	f001 f8de 	bl	80047da <_Z8NBT_initP5nbt_tm>
	NBT_init(&accel_nbt, 5);
 800361e:	2105      	movs	r1, #5
 8003620:	481e      	ldr	r0, [pc, #120]	; (800369c <init_ROS+0x14c>)
 8003622:	f001 f8da 	bl	80047da <_Z8NBT_initP5nbt_tm>

	NBT_init(&ros_nbt, 1);
 8003626:	2101      	movs	r1, #1
 8003628:	481d      	ldr	r0, [pc, #116]	; (80036a0 <init_ROS+0x150>)
 800362a:	f001 f8d6 	bl	80047da <_Z8NBT_initP5nbt_tm>
}
 800362e:	bf00      	nop
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20005aa4 	.word	0x20005aa4
 8003638:	200004dc 	.word	0x200004dc
 800363c:	200004e8 	.word	0x200004e8
 8003640:	20000b74 	.word	0x20000b74
 8003644:	20000b90 	.word	0x20000b90
 8003648:	20000bac 	.word	0x20000bac
 800364c:	20000bc8 	.word	0x20000bc8
 8003650:	20000ae8 	.word	0x20000ae8
 8003654:	20000afc 	.word	0x20000afc
 8003658:	20000b10 	.word	0x20000b10
 800365c:	20000b38 	.word	0x20000b38
 8003660:	20000b24 	.word	0x20000b24
 8003664:	20000b60 	.word	0x20000b60
 8003668:	20000b4c 	.word	0x20000b4c
 800366c:	20000bf8 	.word	0x20000bf8
 8003670:	20000c0c 	.word	0x20000c0c
 8003674:	20000c20 	.word	0x20000c20
 8003678:	20000c4c 	.word	0x20000c4c
 800367c:	20000c44 	.word	0x20000c44
 8003680:	20000c5c 	.word	0x20000c5c
 8003684:	20000c54 	.word	0x20000c54
 8003688:	20000c6c 	.word	0x20000c6c
 800368c:	20000c74 	.word	0x20000c74
 8003690:	20000c7c 	.word	0x20000c7c
 8003694:	20000c84 	.word	0x20000c84
 8003698:	20000c34 	.word	0x20000c34
 800369c:	20000c3c 	.word	0x20000c3c
 80036a0:	20000c64 	.word	0x20000c64

080036a4 <sensors1_3_data_handler>:

extern "C" void sensors1_3_data_handler(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
	if (NBT_handler(&sensors1_3_data_nbt)) {
 80036a8:	4813      	ldr	r0, [pc, #76]	; (80036f8 <sensors1_3_data_handler+0x54>)
 80036aa:	f001 f8a7 	bl	80047fc <_Z11NBT_handlerP5nbt_t>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01e      	beq.n	80036f2 <sensors1_3_data_handler+0x4e>
		sen1_3_msg.x = static_cast<float>(sensorData1);
 80036b4:	4b11      	ldr	r3, [pc, #68]	; (80036fc <sensors1_3_data_handler+0x58>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	ee07 3a90 	vmov	s15, r3
 80036bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c0:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <sensors1_3_data_handler+0x5c>)
 80036c2:	edc3 7a01 	vstr	s15, [r3, #4]
		sen1_3_msg.y = static_cast<float>(sensorData2);
 80036c6:	4b0f      	ldr	r3, [pc, #60]	; (8003704 <sensors1_3_data_handler+0x60>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	ee07 3a90 	vmov	s15, r3
 80036ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d2:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <sensors1_3_data_handler+0x5c>)
 80036d4:	edc3 7a02 	vstr	s15, [r3, #8]
		sen1_3_msg.z = static_cast<float>(sensorData3);
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <sensors1_3_data_handler+0x64>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	ee07 3a90 	vmov	s15, r3
 80036e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <sensors1_3_data_handler+0x5c>)
 80036e6:	edc3 7a03 	vstr	s15, [r3, #12]
    	sensa_data.publish(&sen1_3_msg);
 80036ea:	4905      	ldr	r1, [pc, #20]	; (8003700 <sensors1_3_data_handler+0x5c>)
 80036ec:	4807      	ldr	r0, [pc, #28]	; (800370c <sensors1_3_data_handler+0x68>)
 80036ee:	f7ff f94a 	bl	8002986 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	}
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000c74 	.word	0x20000c74
 80036fc:	20000475 	.word	0x20000475
 8003700:	20000ab8 	.word	0x20000ab8
 8003704:	20000476 	.word	0x20000476
 8003708:	20000477 	.word	0x20000477
 800370c:	20000bf8 	.word	0x20000bf8

08003710 <sensors4_6_data_handler>:

extern "C" void sensors4_6_data_handler(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
	if (NBT_handler(&sensors4_6_data_nbt)) {
 8003714:	4813      	ldr	r0, [pc, #76]	; (8003764 <sensors4_6_data_handler+0x54>)
 8003716:	f001 f871 	bl	80047fc <_Z11NBT_handlerP5nbt_t>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01e      	beq.n	800375e <sensors4_6_data_handler+0x4e>
		sen4_6_msg.x = static_cast<float>(sensorData4);
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <sensors4_6_data_handler+0x58>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	ee07 3a90 	vmov	s15, r3
 8003728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800372c:	4b0f      	ldr	r3, [pc, #60]	; (800376c <sensors4_6_data_handler+0x5c>)
 800372e:	edc3 7a01 	vstr	s15, [r3, #4]
		sen4_6_msg.y = static_cast<float>(sensorData5);
 8003732:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <sensors4_6_data_handler+0x60>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <sensors4_6_data_handler+0x5c>)
 8003740:	edc3 7a02 	vstr	s15, [r3, #8]
		sen4_6_msg.z = static_cast<float>(sensorData6);
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <sensors4_6_data_handler+0x64>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	ee07 3a90 	vmov	s15, r3
 800374c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <sensors4_6_data_handler+0x5c>)
 8003752:	edc3 7a03 	vstr	s15, [r3, #12]
    	sensb_data.publish(&sen4_6_msg);
 8003756:	4905      	ldr	r1, [pc, #20]	; (800376c <sensors4_6_data_handler+0x5c>)
 8003758:	4807      	ldr	r0, [pc, #28]	; (8003778 <sensors4_6_data_handler+0x68>)
 800375a:	f7ff f914 	bl	8002986 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	}
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20000c7c 	.word	0x20000c7c
 8003768:	20000478 	.word	0x20000478
 800376c:	20000ac8 	.word	0x20000ac8
 8003770:	20000479 	.word	0x20000479
 8003774:	2000047a 	.word	0x2000047a
 8003778:	20000c0c 	.word	0x20000c0c

0800377c <rpm_right_front_handler>:
    	}
	}
}

extern "C" void rpm_right_front_handler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
	if (NBT_handler(&rpm_right_front_nbt))
 8003780:	4815      	ldr	r0, [pc, #84]	; (80037d8 <rpm_right_front_handler+0x5c>)
 8003782:	f001 f83b 	bl	80047fc <_Z11NBT_handlerP5nbt_t>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d022      	beq.n	80037d2 <rpm_right_front_handler+0x56>
	{
		if (sideRXDataRightFrontWheel == 2) {
 800378c:	4b13      	ldr	r3, [pc, #76]	; (80037dc <rpm_right_front_handler+0x60>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d105      	bne.n	80037a0 <rpm_right_front_handler+0x24>
		    uint_msg_right_front.data = speedRXDataRightFrontWheel;
 8003794:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <rpm_right_front_handler+0x64>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	b25a      	sxtb	r2, r3
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <rpm_right_front_handler+0x68>)
 800379c:	711a      	strb	r2, [r3, #4]
 800379e:	e00e      	b.n	80037be <rpm_right_front_handler+0x42>
		}
		else if (sideRXDataRightFrontWheel == 1) {
 80037a0:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <rpm_right_front_handler+0x60>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d107      	bne.n	80037b8 <rpm_right_front_handler+0x3c>
			uint_msg_right_front.data = -speedRXDataRightFrontWheel;
 80037a8:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <rpm_right_front_handler+0x64>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	425b      	negs	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	b25a      	sxtb	r2, r3
 80037b2:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <rpm_right_front_handler+0x68>)
 80037b4:	711a      	strb	r2, [r3, #4]
 80037b6:	e002      	b.n	80037be <rpm_right_front_handler+0x42>
		}
		else {
			uint_msg_right_front.data = 0;
 80037b8:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <rpm_right_front_handler+0x68>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	711a      	strb	r2, [r3, #4]
		}
    	if (nh.connected()) {
 80037be:	480a      	ldr	r0, [pc, #40]	; (80037e8 <rpm_right_front_handler+0x6c>)
 80037c0:	f000 fab0 	bl	8003d24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <rpm_right_front_handler+0x56>
    		rpm_right_front.publish(&uint_msg_right_front);
 80037ca:	4906      	ldr	r1, [pc, #24]	; (80037e4 <rpm_right_front_handler+0x68>)
 80037cc:	4807      	ldr	r0, [pc, #28]	; (80037ec <rpm_right_front_handler+0x70>)
 80037ce:	f7ff f8da 	bl	8002986 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
	}
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20000c44 	.word	0x20000c44
 80037dc:	20004ef4 	.word	0x20004ef4
 80037e0:	20004f18 	.word	0x20004f18
 80037e4:	20000a18 	.word	0x20000a18
 80037e8:	200004e8 	.word	0x200004e8
 80037ec:	20000b24 	.word	0x20000b24

080037f0 <rpm_left_front_handler>:

extern "C" void rpm_left_front_handler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
	if (NBT_handler(&rpm_left_front_nbt))
 80037f4:	4815      	ldr	r0, [pc, #84]	; (800384c <rpm_left_front_handler+0x5c>)
 80037f6:	f001 f801 	bl	80047fc <_Z11NBT_handlerP5nbt_t>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d022      	beq.n	8003846 <rpm_left_front_handler+0x56>
	{
		if (sideRXDataLeftFrontWheel == 1) {
 8003800:	4b13      	ldr	r3, [pc, #76]	; (8003850 <rpm_left_front_handler+0x60>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d105      	bne.n	8003814 <rpm_left_front_handler+0x24>
		    uint_msg_left_front.data = speedRXDataLeftFrontWheel;
 8003808:	4b12      	ldr	r3, [pc, #72]	; (8003854 <rpm_left_front_handler+0x64>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	b25a      	sxtb	r2, r3
 800380e:	4b12      	ldr	r3, [pc, #72]	; (8003858 <rpm_left_front_handler+0x68>)
 8003810:	711a      	strb	r2, [r3, #4]
 8003812:	e00e      	b.n	8003832 <rpm_left_front_handler+0x42>
		}
		else if (sideRXDataLeftFrontWheel == 2) {
 8003814:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <rpm_left_front_handler+0x60>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b02      	cmp	r3, #2
 800381a:	d107      	bne.n	800382c <rpm_left_front_handler+0x3c>
		  	uint_msg_left_front.data = -speedRXDataLeftFrontWheel;
 800381c:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <rpm_left_front_handler+0x64>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	425b      	negs	r3, r3
 8003822:	b2db      	uxtb	r3, r3
 8003824:	b25a      	sxtb	r2, r3
 8003826:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <rpm_left_front_handler+0x68>)
 8003828:	711a      	strb	r2, [r3, #4]
 800382a:	e002      	b.n	8003832 <rpm_left_front_handler+0x42>
		}
		else {
		  	uint_msg_left_front.data = 0;
 800382c:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <rpm_left_front_handler+0x68>)
 800382e:	2200      	movs	r2, #0
 8003830:	711a      	strb	r2, [r3, #4]
		}
    	if (nh.connected()) {
 8003832:	480a      	ldr	r0, [pc, #40]	; (800385c <rpm_left_front_handler+0x6c>)
 8003834:	f000 fa76 	bl	8003d24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <rpm_left_front_handler+0x56>
    		rpm_left_front.publish(&uint_msg_left_front);
 800383e:	4906      	ldr	r1, [pc, #24]	; (8003858 <rpm_left_front_handler+0x68>)
 8003840:	4807      	ldr	r0, [pc, #28]	; (8003860 <rpm_left_front_handler+0x70>)
 8003842:	f7ff f8a0 	bl	8002986 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
	}
}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000c4c 	.word	0x20000c4c
 8003850:	20004f10 	.word	0x20004f10
 8003854:	20004aac 	.word	0x20004aac
 8003858:	20000a20 	.word	0x20000a20
 800385c:	200004e8 	.word	0x200004e8
 8003860:	20000b38 	.word	0x20000b38

08003864 <rpm_right_back_handler>:

extern "C" void rpm_right_back_handler(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
	if (NBT_handler(&rpm_right_back_nbt))
 8003868:	4815      	ldr	r0, [pc, #84]	; (80038c0 <rpm_right_back_handler+0x5c>)
 800386a:	f000 ffc7 	bl	80047fc <_Z11NBT_handlerP5nbt_t>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d022      	beq.n	80038ba <rpm_right_back_handler+0x56>
	{
		if (sideRXDataRightBackWheel == 2) {
 8003874:	4b13      	ldr	r3, [pc, #76]	; (80038c4 <rpm_right_back_handler+0x60>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d105      	bne.n	8003888 <rpm_right_back_handler+0x24>
		    uint_msg_right_back.data = speedRXDataRightBackWheel;
 800387c:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <rpm_right_back_handler+0x64>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	b25a      	sxtb	r2, r3
 8003882:	4b12      	ldr	r3, [pc, #72]	; (80038cc <rpm_right_back_handler+0x68>)
 8003884:	711a      	strb	r2, [r3, #4]
 8003886:	e00e      	b.n	80038a6 <rpm_right_back_handler+0x42>
		}
		else if (sideRXDataRightBackWheel == 1) {
 8003888:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <rpm_right_back_handler+0x60>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d107      	bne.n	80038a0 <rpm_right_back_handler+0x3c>
			uint_msg_right_back.data = -speedRXDataRightBackWheel;
 8003890:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <rpm_right_back_handler+0x64>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	425b      	negs	r3, r3
 8003896:	b2db      	uxtb	r3, r3
 8003898:	b25a      	sxtb	r2, r3
 800389a:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <rpm_right_back_handler+0x68>)
 800389c:	711a      	strb	r2, [r3, #4]
 800389e:	e002      	b.n	80038a6 <rpm_right_back_handler+0x42>
		}
		else {
			uint_msg_right_back.data = 0;
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <rpm_right_back_handler+0x68>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	711a      	strb	r2, [r3, #4]
		}
    	if (nh.connected()) {
 80038a6:	480a      	ldr	r0, [pc, #40]	; (80038d0 <rpm_right_back_handler+0x6c>)
 80038a8:	f000 fa3c 	bl	8003d24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <rpm_right_back_handler+0x56>
    		rpm_right_back.publish(&uint_msg_right_back);
 80038b2:	4906      	ldr	r1, [pc, #24]	; (80038cc <rpm_right_back_handler+0x68>)
 80038b4:	4807      	ldr	r0, [pc, #28]	; (80038d4 <rpm_right_back_handler+0x70>)
 80038b6:	f7ff f866 	bl	8002986 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
	}
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000c54 	.word	0x20000c54
 80038c4:	20004a1c 	.word	0x20004a1c
 80038c8:	20004acc 	.word	0x20004acc
 80038cc:	20000a28 	.word	0x20000a28
 80038d0:	200004e8 	.word	0x200004e8
 80038d4:	20000b4c 	.word	0x20000b4c

080038d8 <rpm_left_back_handler>:

extern "C" void rpm_left_back_handler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
	if (NBT_handler(&rpm_left_back_nbt))
 80038dc:	4815      	ldr	r0, [pc, #84]	; (8003934 <rpm_left_back_handler+0x5c>)
 80038de:	f000 ff8d 	bl	80047fc <_Z11NBT_handlerP5nbt_t>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d022      	beq.n	800392e <rpm_left_back_handler+0x56>
	{
		if (sideRXDataLeftBackWheel == 1) {
 80038e8:	4b13      	ldr	r3, [pc, #76]	; (8003938 <rpm_left_back_handler+0x60>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d105      	bne.n	80038fc <rpm_left_back_handler+0x24>
		  	uint_msg_left_back.data = speedRXDataLeftBackWheel;
 80038f0:	4b12      	ldr	r3, [pc, #72]	; (800393c <rpm_left_back_handler+0x64>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	b25a      	sxtb	r2, r3
 80038f6:	4b12      	ldr	r3, [pc, #72]	; (8003940 <rpm_left_back_handler+0x68>)
 80038f8:	711a      	strb	r2, [r3, #4]
 80038fa:	e00e      	b.n	800391a <rpm_left_back_handler+0x42>
		}
		else if (sideRXDataLeftBackWheel == 2) {
 80038fc:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <rpm_left_back_handler+0x60>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d107      	bne.n	8003914 <rpm_left_back_handler+0x3c>
			uint_msg_left_back.data = -speedRXDataLeftBackWheel;
 8003904:	4b0d      	ldr	r3, [pc, #52]	; (800393c <rpm_left_back_handler+0x64>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	425b      	negs	r3, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	b25a      	sxtb	r2, r3
 800390e:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <rpm_left_back_handler+0x68>)
 8003910:	711a      	strb	r2, [r3, #4]
 8003912:	e002      	b.n	800391a <rpm_left_back_handler+0x42>
		}
		else {
			uint_msg_left_back.data = 0;
 8003914:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <rpm_left_back_handler+0x68>)
 8003916:	2200      	movs	r2, #0
 8003918:	711a      	strb	r2, [r3, #4]
		}
		if (nh.connected()) {
 800391a:	480a      	ldr	r0, [pc, #40]	; (8003944 <rpm_left_back_handler+0x6c>)
 800391c:	f000 fa02 	bl	8003d24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <rpm_left_back_handler+0x56>
			rpm_left_back.publish(&uint_msg_left_back);
 8003926:	4906      	ldr	r1, [pc, #24]	; (8003940 <rpm_left_back_handler+0x68>)
 8003928:	4807      	ldr	r0, [pc, #28]	; (8003948 <rpm_left_back_handler+0x70>)
 800392a:	f7ff f82c 	bl	8002986 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		}
	}
}
 800392e:	bf00      	nop
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000c5c 	.word	0x20000c5c
 8003938:	20004ac4 	.word	0x20004ac4
 800393c:	20004ab4 	.word	0x20004ab4
 8003940:	20000a30 	.word	0x20000a30
 8003944:	200004e8 	.word	0x200004e8
 8003948:	20000b60 	.word	0x20000b60

0800394c <gyro_handler>:

extern "C" void gyro_handler(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
    gyro_msg.x = gyroX;
 8003950:	4b0e      	ldr	r3, [pc, #56]	; (800398c <gyro_handler+0x40>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a0e      	ldr	r2, [pc, #56]	; (8003990 <gyro_handler+0x44>)
 8003956:	6053      	str	r3, [r2, #4]
    gyro_msg.y = gyroY;
 8003958:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <gyro_handler+0x48>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a0c      	ldr	r2, [pc, #48]	; (8003990 <gyro_handler+0x44>)
 800395e:	6093      	str	r3, [r2, #8]
    gyro_msg.z = gyroZ;
 8003960:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <gyro_handler+0x4c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <gyro_handler+0x44>)
 8003966:	60d3      	str	r3, [r2, #12]
    if (nh.connected()) {
 8003968:	480c      	ldr	r0, [pc, #48]	; (800399c <gyro_handler+0x50>)
 800396a:	f000 f9db 	bl	8003d24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d009      	beq.n	8003988 <gyro_handler+0x3c>
    	if (NBT_handler(&gyro_nbt))
 8003974:	480a      	ldr	r0, [pc, #40]	; (80039a0 <gyro_handler+0x54>)
 8003976:	f000 ff41 	bl	80047fc <_Z11NBT_handlerP5nbt_t>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <gyro_handler+0x3c>
    	{
    		gyro.publish(&gyro_msg);
 8003980:	4903      	ldr	r1, [pc, #12]	; (8003990 <gyro_handler+0x44>)
 8003982:	4808      	ldr	r0, [pc, #32]	; (80039a4 <gyro_handler+0x58>)
 8003984:	f7fe ffff 	bl	8002986 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
    }
}
 8003988:	bf00      	nop
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20004a9c 	.word	0x20004a9c
 8003990:	20000a98 	.word	0x20000a98
 8003994:	20004f44 	.word	0x20004f44
 8003998:	20004ab8 	.word	0x20004ab8
 800399c:	200004e8 	.word	0x200004e8
 80039a0:	20000c34 	.word	0x20000c34
 80039a4:	20000afc 	.word	0x20000afc

080039a8 <accel_handler>:

extern "C" void accel_handler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
    accel_msg.x = accelX;
 80039ac:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <accel_handler+0x40>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a0e      	ldr	r2, [pc, #56]	; (80039ec <accel_handler+0x44>)
 80039b2:	6053      	str	r3, [r2, #4]
    accel_msg.y = accelY;
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <accel_handler+0x48>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a0c      	ldr	r2, [pc, #48]	; (80039ec <accel_handler+0x44>)
 80039ba:	6093      	str	r3, [r2, #8]
    accel_msg.z = accelZ;
 80039bc:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <accel_handler+0x4c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <accel_handler+0x44>)
 80039c2:	60d3      	str	r3, [r2, #12]
    if (nh.connected()) {
 80039c4:	480c      	ldr	r0, [pc, #48]	; (80039f8 <accel_handler+0x50>)
 80039c6:	f000 f9ad 	bl	8003d24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d009      	beq.n	80039e4 <accel_handler+0x3c>
    	if (NBT_handler(&accel_nbt))
 80039d0:	480a      	ldr	r0, [pc, #40]	; (80039fc <accel_handler+0x54>)
 80039d2:	f000 ff13 	bl	80047fc <_Z11NBT_handlerP5nbt_t>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <accel_handler+0x3c>
    	{
    		accel.publish(&accel_msg);
 80039dc:	4903      	ldr	r1, [pc, #12]	; (80039ec <accel_handler+0x44>)
 80039de:	4808      	ldr	r0, [pc, #32]	; (8003a00 <accel_handler+0x58>)
 80039e0:	f7fe ffd1 	bl	8002986 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
    }
}
 80039e4:	bf00      	nop
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20004a18 	.word	0x20004a18
 80039ec:	20000aa8 	.word	0x20000aa8
 80039f0:	20004a10 	.word	0x20004a10
 80039f4:	20004efc 	.word	0x20004efc
 80039f8:	200004e8 	.word	0x200004e8
 80039fc:	20000c3c 	.word	0x20000c3c
 8003a00:	20000b10 	.word	0x20000b10

08003a04 <spinOnce>:

extern "C" void spinOnce(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
	if (NBT_handler(&ros_nbt))	{
 8003a08:	4805      	ldr	r0, [pc, #20]	; (8003a20 <spinOnce+0x1c>)
 8003a0a:	f000 fef7 	bl	80047fc <_Z11NBT_handlerP5nbt_t>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <spinOnce+0x16>
		nh.spinOnce();
 8003a14:	4803      	ldr	r0, [pc, #12]	; (8003a24 <spinOnce+0x20>)
 8003a16:	f000 f992 	bl	8003d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	}
}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000c64 	.word	0x20000c64
 8003a24:	200004e8 	.word	0x200004e8

08003a28 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d80d      	bhi.n	8003a58 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	fa22 f103 	lsr.w	r1, r2, r3
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	b2ca      	uxtb	r2, r1
 8003a4e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	3301      	adds	r3, #1
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	e7ee      	b.n	8003a36 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003a58:	bf00      	nop
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d811      	bhi.n	8003aa2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6839      	ldr	r1, [r7, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	440a      	add	r2, r1
 8003a88:	7812      	ldrb	r2, [r2, #0]
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	00d2      	lsls	r2, r2, #3
 8003a90:	fa01 f202 	lsl.w	r2, r1, r2
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	e7ea      	b.n	8003a78 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003aa2:	bf00      	nop
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	4a04      	ldr	r2, [pc, #16]	; (8003acc <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	0800fa80 	.word	0x0800fa80

08003ad0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff ffe8 	bl	8003ab0 <_ZN3ros15NodeHandleBase_C1Ev>
 8003ae0:	4a39      	ldr	r2, [pc, #228]	; (8003bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xf8>)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe ff6b 	bl	80029c6 <_ZN13STM32HardwareC1Ev>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe fc68 	bl	80023d4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2b18      	cmp	r3, #24
 8003b0c:	d80a      	bhi.n	8003b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003b16:	2100      	movs	r1, #0
 8003b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	e7f1      	b.n	8003b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b24:	2300      	movs	r3, #0
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	2b18      	cmp	r3, #24
 8003b2c:	d80b      	bhi.n	8003b46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	3301      	adds	r3, #1
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	e7f0      	b.n	8003b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b50:	d209      	bcs.n	8003b66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x96>
      message_in[i] = 0;
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4413      	add	r3, r2
 8003b58:	3318      	adds	r3, #24
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3301      	adds	r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	e7f1      	b.n	8003b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003b66:	2300      	movs	r3, #0
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b70:	d20a      	bcs.n	8003b88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xb8>
      message_out[i] = 0;
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	3301      	adds	r3, #1
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	e7f0      	b.n	8003b6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    req_param_resp.floats_length = 0;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    req_param_resp.floats = NULL;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    req_param_resp.ints_length = 0;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514

    spin_timeout_ = 0;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	615a      	str	r2, [r3, #20]
  }
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	0800f9dc 	.word	0x0800f9dc

08003bcc <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	4a04      	ldr	r2, [pc, #16]	; (8003be8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	0800fa68 	.word	0x0800fa68

08003bec <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff ffe5 	bl	8003bcc <_ZN3ros11Subscriber_C1Ev>
 8003c02:	4a0b      	ldr	r2, [pc, #44]	; (8003c30 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	330c      	adds	r3, #12
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fe ff25 	bl	8002a5c <_ZN8std_msgs4Int8C1Ev>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	615a      	str	r2, [r3, #20]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	609a      	str	r2, [r3, #8]
  };
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	0800f9c4 	.word	0x0800f9c4

08003c34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fe fecb 	bl	80029dc <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003c6e:	b480      	push	{r7}
 8003c70:	b085      	sub	sp, #20
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2b18      	cmp	r3, #24
 8003c80:	dc1b      	bgt.n	8003cba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10e      	bne.n	8003cb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	605a      	str	r2, [r3, #4]
        return true;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e004      	b.n	8003cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	e7e0      	b.n	8003c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0xe>
      }
    }
    return false;
 8003cba:	2300      	movs	r3, #0
  }
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b18      	cmp	r3, #24
 8003cda:	dc1c      	bgt.n	8003d16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4e>
      if (publishers[i] == 0) // empty slot
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d110      	bne.n	8003d0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003cf4:	6839      	ldr	r1, [r7, #0]
 8003cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	60da      	str	r2, [r3, #12]
        return true;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e004      	b.n	8003d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3301      	adds	r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	e7df      	b.n	8003cd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8003d16:	2300      	movs	r3, #0
  }
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
    return configured_;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fe fe7a 	bl	8002a44 <_ZN13STM32Hardware4timeEv>
 8003d50:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d903      	bls.n	8003d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d009      	beq.n	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d903      	bls.n	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d013      	beq.n	8003dba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3304      	adds	r3, #4
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe fe54 	bl	8002a44 <_ZN13STM32Hardware4timeEv>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad2      	subs	r2, r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	bf8c      	ite	hi
 8003daa:	2301      	movhi	r3, #1
 8003dac:	2300      	movls	r3, #0
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8003db4:	f06f 0301 	mvn.w	r3, #1
 8003db8:	e193      	b.n	80040e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      int data = hardware_.read();
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fe fe16 	bl	80029f0 <_ZN13STM32Hardware4readEv>
 8003dc4:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f2c0 8173 	blt.w	80040b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x376>
      checksum_ += data;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	441a      	add	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003de4:	2b07      	cmp	r3, #7
 8003de6:	d11d      	bne.n	8003e24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003dee:	1c59      	adds	r1, r3, #1
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	b2d1      	uxtb	r1, r2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	460a      	mov	r2, r1
 8003e00:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8003e08:	1e5a      	subs	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1b7      	bne.n	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2208      	movs	r2, #8
 8003e1e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003e22:	e7b2      	b.n	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d128      	bne.n	8003e80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2bff      	cmp	r3, #255	; 0xff
 8003e32:	d10d      	bne.n	8003e50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f103 0214 	add.w	r2, r3, #20
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8003e4e:	e79c      	b.n	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3304      	adds	r3, #4
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fe fdf5 	bl	8002a44 <_ZN13STM32Hardware4timeEv>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e64:	4293      	cmp	r3, r2
 8003e66:	bf8c      	ite	hi
 8003e68:	2301      	movhi	r3, #1
 8003e6a:	2300      	movls	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d08b      	beq.n	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 8003e7a:	f06f 0301 	mvn.w	r3, #1
 8003e7e:	e130      	b.n	80040e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d11b      	bne.n	8003ec2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2bfe      	cmp	r3, #254	; 0xfe
 8003e8e:	d107      	bne.n	8003ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003e9e:	e774      	b.n	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003eae:	f083 0301 	eor.w	r3, r3, #1
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f43f af68 	beq.w	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f915 	bl	80040ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003ec0:	e763      	b.n	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d113      	bne.n	8003ef4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8003ef2:	e74a      	b.n	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	d110      	bne.n	8003f20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	441a      	add	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003f1e:	e734      	b.n	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d116      	bne.n	8003f58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003f30:	425a      	negs	r2, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	bf58      	it	pl
 8003f38:	4253      	negpl	r3, r2
 8003f3a:	2bff      	cmp	r3, #255	; 0xff
 8003f3c:	d107      	bne.n	8003f4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003f4c:	e71d      	b.n	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003f56:	e718      	b.n	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003f5e:	2b05      	cmp	r3, #5
 8003f60:	d10f      	bne.n	8003f82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8003f80:	e703      	b.n	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003f88:	2b06      	cmp	r3, #6
 8003f8a:	d117      	bne.n	8003fbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	021b      	lsls	r3, r3, #8
 8003f96:	441a      	add	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2207      	movs	r2, #7
 8003fa2:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f47f aeec 	bne.w	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8003fba:	e6e6      	b.n	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	f47f aee1 	bne.w	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003fd6:	425a      	negs	r2, r3
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	bf58      	it	pl
 8003fde:	4253      	negpl	r3, r2
 8003fe0:	2bff      	cmp	r3, #255	; 0xff
 8003fe2:	f47f aed2 	bne.w	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d110      	bne.n	8004012 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f87a 	bl	80040ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f894 	bl	8004124 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 800400c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004010:	e067      	b.n	80040e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
          else if (topic_ == TopicInfo::ID_TIME)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004018:	2b0a      	cmp	r3, #10
 800401a:	d106      	bne.n	800402a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ec>
            syncTime(message_in);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3318      	adds	r3, #24
 8004020:	4619      	mov	r1, r3
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f964 	bl	80042f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004028:	e6af      	b.n	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004030:	2b06      	cmp	r3, #6
 8004032:	d10d      	bne.n	8004050 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
            req_param_resp.deserialize(message_in);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3318      	adds	r3, #24
 800403e:	4619      	mov	r1, r3
 8004040:	4610      	mov	r0, r2
 8004042:	f7fe fafc 	bl	800263e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 800404e:	e69c      	b.n	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004056:	2b0b      	cmp	r3, #11
 8004058:	d104      	bne.n	8004064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x326>
            configured_ = false;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8004062:	e692      	b.n	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800406a:	3b64      	subs	r3, #100	; 0x64
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	f43f ae86 	beq.w	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004084:	3b64      	subs	r3, #100	; 0x64
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	6858      	ldr	r0, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004098:	3b64      	subs	r3, #100	; 0x64
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	3218      	adds	r2, #24
 80040ae:	4611      	mov	r1, r2
 80040b0:	4798      	blx	r3
    while (true)
 80040b2:	e66a      	b.n	8003d8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80040b4:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00f      	beq.n	80040e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d906      	bls.n	80040e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
      requestSyncTime();
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f809 	bl	80040ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 80040e0:	2300      	movs	r3, #0
  }
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b086      	sub	sp, #24
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80040f2:	f107 030c 	add.w	r3, r7, #12
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fd fe08 	bl	8001d0c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f107 020c 	add.w	r2, r7, #12
 8004106:	210a      	movs	r1, #10
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	4798      	blx	r3
    rt_time = hardware_.time();
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3304      	adds	r3, #4
 8004110:	4618      	mov	r0, r3
 8004112:	f7fe fc97 	bl	8002a44 <_ZN13STM32Hardware4timeEv>
 8004116:	4602      	mov	r2, r0
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	609a      	str	r2, [r3, #8]
  }
 800411c:	bf00      	nop
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004124:	b590      	push	{r4, r7, lr}
 8004126:	b08b      	sub	sp, #44	; 0x2c
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800412c:	f107 030c 	add.w	r3, r7, #12
 8004130:	4618      	mov	r0, r3
 8004132:	f7fd fedb 	bl	8001eec <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004136:	2300      	movs	r3, #0
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	2b18      	cmp	r3, #24
 800413e:	dc5e      	bgt.n	80041fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
    {
      if (publishers[i] != 0) // non-empty slot
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004144:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d052      	beq.n	80041f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd2>
      {
        ti.topic_id = publishers[i]->id_;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004154:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	b29b      	uxth	r3, r3
 8004160:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004166:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800416a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004176:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800417a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800417e:	6859      	ldr	r1, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004184:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3308      	adds	r3, #8
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4608      	mov	r0, r1
 8004196:	4798      	blx	r3
 8004198:	4603      	mov	r3, r0
 800419a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a0:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80041a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a8:	6859      	ldr	r1, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ae:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80041b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	330c      	adds	r3, #12
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4608      	mov	r0, r1
 80041c0:	4798      	blx	r3
 80041c2:	4603      	mov	r3, r0
 80041c4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80041c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041ca:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681c      	ldr	r4, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d6:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80041da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fe fbe5 	bl	80029ae <_ZN3ros9Publisher15getEndpointTypeEv>
 80041e4:	4601      	mov	r1, r0
 80041e6:	f107 030c 	add.w	r3, r7, #12
 80041ea:	461a      	mov	r2, r3
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	47a0      	blx	r4
        HAL_Delay(10);
 80041f0:	200a      	movs	r0, #10
 80041f2:	f000 fcad 	bl	8004b50 <HAL_Delay>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	3301      	adds	r3, #1
 80041fa:	627b      	str	r3, [r7, #36]	; 0x24
 80041fc:	e79d      	b.n	800413a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80041fe:	2300      	movs	r3, #0
 8004200:	627b      	str	r3, [r7, #36]	; 0x24
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	2b18      	cmp	r3, #24
 8004206:	dc6b      	bgt.n	80042e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1bc>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d05e      	beq.n	80042d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b4>
      {
        ti.topic_id = subscribers[i]->id_;
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	b29b      	uxth	r3, r3
 800422c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	6859      	ldr	r1, [r3, #4]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3308      	adds	r3, #8
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4608      	mov	r0, r1
 8004264:	4798      	blx	r3
 8004266:	4603      	mov	r3, r0
 8004268:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	6859      	ldr	r1, [r3, #4]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4608      	mov	r0, r1
 800428e:	4798      	blx	r3
 8004290:	4603      	mov	r3, r0
 8004292:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004298:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681c      	ldr	r4, [r3, #0]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	6859      	ldr	r1, [r3, #4]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3304      	adds	r3, #4
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4608      	mov	r0, r1
 80042c4:	4798      	blx	r3
 80042c6:	4601      	mov	r1, r0
 80042c8:	f107 030c 	add.w	r3, r7, #12
 80042cc:	461a      	mov	r2, r3
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	47a0      	blx	r4
        HAL_Delay(10);
 80042d2:	200a      	movs	r0, #10
 80042d4:	f000 fc3c 	bl	8004b50 <HAL_Delay>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	3301      	adds	r3, #1
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
 80042de:	e790      	b.n	8004202 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
      }
    }
    configured_ = true;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 80042e8:	bf00      	nop
 80042ea:	372c      	adds	r7, #44	; 0x2c
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd90      	pop	{r4, r7, pc}

080042f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80042fa:	f107 0308 	add.w	r3, r7, #8
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fd fd04 	bl	8001d0c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3304      	adds	r3, #4
 8004308:	4618      	mov	r0, r3
 800430a:	f7fe fb9b 	bl	8002a44 <_ZN13STM32Hardware4timeEv>
 800430e:	4602      	mov	r2, r0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004318:	f107 0308 	add.w	r3, r7, #8
 800431c:	6839      	ldr	r1, [r7, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7fd fd64 	bl	8001dec <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	4914      	ldr	r1, [pc, #80]	; (800437c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 800432a:	fba1 1303 	umull	r1, r3, r1, r3
 800432e:	099b      	lsrs	r3, r3, #6
 8004330:	4413      	add	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004334:	6939      	ldr	r1, [r7, #16]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	4b10      	ldr	r3, [pc, #64]	; (800437c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 800433a:	fba3 0302 	umull	r0, r3, r3, r2
 800433e:	099b      	lsrs	r3, r3, #6
 8004340:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004344:	fb00 f303 	mul.w	r3, r0, r3
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	4a0d      	ldr	r2, [pc, #52]	; (8004380 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800434c:	fb02 f303 	mul.w	r3, r2, r3
 8004350:	440b      	add	r3, r1
 8004352:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004354:	f107 0308 	add.w	r3, r7, #8
 8004358:	3304      	adds	r3, #4
 800435a:	4619      	mov	r1, r3
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f8a3 	bl	80044a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	3304      	adds	r3, #4
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe fb6c 	bl	8002a44 <_ZN13STM32Hardware4timeEv>
 800436c:	4602      	mov	r2, r0
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 8004374:	bf00      	nop
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	10624dd3 	.word	0x10624dd3
 8004380:	000f4240 	.word	0x000f4240

08004384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b63      	cmp	r3, #99	; 0x63
 8004394:	dd09      	ble.n	80043aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800439c:	f083 0301 	eor.w	r3, r3, #1
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	e077      	b.n	800449a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	f502 7206 	add.w	r2, r2, #536	; 0x218
 80043b6:	3207      	adds	r2, #7
 80043b8:	4611      	mov	r1, r2
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
 80043be:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	22ff      	movs	r2, #255	; 0xff
 80043c4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	22fe      	movs	r2, #254	; 0xfe
 80043cc:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	121b      	asrs	r3, r3, #8
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 80043f4:	4413      	add	r3, r2
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	43db      	mvns	r3, r3
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	b2da      	uxtb	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	b21b      	sxth	r3, r3
 8004410:	121b      	asrs	r3, r3, #8
 8004412:	b2da      	uxtb	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800441e:	2305      	movs	r3, #5
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	3307      	adds	r3, #7
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	429a      	cmp	r2, r3
 800442a:	da0d      	bge.n	8004448 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	4413      	add	r3, r2
 8004432:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	461a      	mov	r2, r3
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	3301      	adds	r3, #1
 8004444:	61bb      	str	r3, [r7, #24]
 8004446:	e7ec      	b.n	8004422 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	3307      	adds	r3, #7
 800444c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	425a      	negs	r2, r3
 8004452:	b2db      	uxtb	r3, r3
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	bf58      	it	pl
 8004458:	4253      	negpl	r3, r2
 800445a:	b2da      	uxtb	r2, r3
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	1c59      	adds	r1, r3, #1
 8004460:	6179      	str	r1, [r7, #20]
 8004462:	43d2      	mvns	r2, r2
 8004464:	b2d1      	uxtb	r1, r2
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4413      	add	r3, r2
 800446a:	460a      	mov	r2, r1
 800446c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004476:	dc0a      	bgt.n	800448e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	1d18      	adds	r0, r3, #4
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4619      	mov	r1, r3
 8004486:	f7fe facd 	bl	8002a24 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	e005      	b.n	800449a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800448e:	4905      	ldr	r1, [pc, #20]	; (80044a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f847 	bl	8004524 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 800449a:	4618      	mov	r0, r3
 800449c:	3720      	adds	r7, #32
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	0800f814 	.word	0x0800f814

080044a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3304      	adds	r3, #4
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe fac4 	bl	8002a44 <_ZN13STM32Hardware4timeEv>
 80044bc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4914      	ldr	r1, [pc, #80]	; (8004518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 80044c6:	fba1 1303 	umull	r1, r3, r1, r3
 80044ca:	099b      	lsrs	r3, r3, #6
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	1e5a      	subs	r2, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	6859      	ldr	r1, [r3, #4]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	4b0f      	ldr	r3, [pc, #60]	; (8004518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 80044dc:	fba3 0302 	umull	r0, r3, r3, r2
 80044e0:	099b      	lsrs	r3, r3, #6
 80044e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044e6:	fb00 f303 	mul.w	r3, r0, r3
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	4a0b      	ldr	r2, [pc, #44]	; (800451c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80044ee:	fb02 f303 	mul.w	r3, r2, r3
 80044f2:	1aca      	subs	r2, r1, r3
 80044f4:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80044f6:	4413      	add	r3, r2
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f103 020c 	add.w	r2, r3, #12
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3310      	adds	r3, #16
 8004506:	4619      	mov	r1, r3
 8004508:	4610      	mov	r0, r2
 800450a:	f7fd fae5 	bl	8001ad8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	10624dd3 	.word	0x10624dd3
 800451c:	000f4240 	.word	0x000f4240
 8004520:	3b9aca00 	.word	0x3b9aca00

08004524 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	2103      	movs	r1, #3
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f804 	bl	8004540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004538:	bf00      	nop
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	460b      	mov	r3, r1
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800454e:	f107 0314 	add.w	r3, r7, #20
 8004552:	4618      	mov	r0, r3
 8004554:	f7fd fe8e 	bl	8002274 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004558:	7afb      	ldrb	r3, [r7, #11]
 800455a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f107 0214 	add.w	r2, r7, #20
 800456a:	2107      	movs	r1, #7
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	4798      	blx	r3
  }
 8004570:	bf00      	nop
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <_Z41__static_initialization_and_destruction_0ii>:
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b01      	cmp	r3, #1
 8004586:	f040 8083 	bne.w	8004690 <_Z41__static_initialization_and_destruction_0ii+0x118>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004590:	4293      	cmp	r3, r2
 8004592:	d17d      	bne.n	8004690 <_Z41__static_initialization_and_destruction_0ii+0x118>
ros::NodeHandle nh;
 8004594:	4840      	ldr	r0, [pc, #256]	; (8004698 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8004596:	f7ff fa9b 	bl	8003ad0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int8 uint_msg_right_front;
 800459a:	4840      	ldr	r0, [pc, #256]	; (800469c <_Z41__static_initialization_and_destruction_0ii+0x124>)
 800459c:	f7fe fa5e 	bl	8002a5c <_ZN8std_msgs4Int8C1Ev>
std_msgs::Int8 uint_msg_left_front;
 80045a0:	483f      	ldr	r0, [pc, #252]	; (80046a0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80045a2:	f7fe fa5b 	bl	8002a5c <_ZN8std_msgs4Int8C1Ev>
std_msgs::Int8 uint_msg_right_back;
 80045a6:	483f      	ldr	r0, [pc, #252]	; (80046a4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80045a8:	f7fe fa58 	bl	8002a5c <_ZN8std_msgs4Int8C1Ev>
std_msgs::Int8 uint_msg_left_back;
 80045ac:	483e      	ldr	r0, [pc, #248]	; (80046a8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80045ae:	f7fe fa55 	bl	8002a5c <_ZN8std_msgs4Int8C1Ev>
std_msgs::UInt8MultiArray diagnostics_data_array;
 80045b2:	483e      	ldr	r0, [pc, #248]	; (80046ac <_Z41__static_initialization_and_destruction_0ii+0x134>)
 80045b4:	f7fe fd42 	bl	800303c <_ZN8std_msgs15UInt8MultiArrayC1Ev>
std_msgs::UInt8MultiArray sensors_data_array;
 80045b8:	483d      	ldr	r0, [pc, #244]	; (80046b0 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80045ba:	f7fe fd3f 	bl	800303c <_ZN8std_msgs15UInt8MultiArrayC1Ev>
geometry_msgs::Vector3 gyro_msg;
 80045be:	483d      	ldr	r0, [pc, #244]	; (80046b4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80045c0:	f7fe fe34 	bl	800322c <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 accel_msg;
 80045c4:	483c      	ldr	r0, [pc, #240]	; (80046b8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80045c6:	f7fe fe31 	bl	800322c <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 sen1_3_msg;
 80045ca:	483c      	ldr	r0, [pc, #240]	; (80046bc <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80045cc:	f7fe fe2e 	bl	800322c <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 sen4_6_msg;
 80045d0:	483b      	ldr	r0, [pc, #236]	; (80046c0 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80045d2:	f7fe fe2b 	bl	800322c <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 sen7_8_msg;
 80045d6:	483b      	ldr	r0, [pc, #236]	; (80046c4 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80045d8:	f7fe fe28 	bl	800322c <_ZN13geometry_msgs7Vector3C1Ev>
ros::Publisher stm("stm", &gyro_msg);
 80045dc:	2300      	movs	r3, #0
 80045de:	4a35      	ldr	r2, [pc, #212]	; (80046b4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80045e0:	4939      	ldr	r1, [pc, #228]	; (80046c8 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 80045e2:	483a      	ldr	r0, [pc, #232]	; (80046cc <_Z41__static_initialization_and_destruction_0ii+0x154>)
 80045e4:	f7fe f9b8 	bl	8002958 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher gyro("gyro", &gyro_msg);
 80045e8:	2300      	movs	r3, #0
 80045ea:	4a32      	ldr	r2, [pc, #200]	; (80046b4 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80045ec:	4938      	ldr	r1, [pc, #224]	; (80046d0 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80045ee:	4839      	ldr	r0, [pc, #228]	; (80046d4 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80045f0:	f7fe f9b2 	bl	8002958 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher accel("accel", &accel_msg);
 80045f4:	2300      	movs	r3, #0
 80045f6:	4a30      	ldr	r2, [pc, #192]	; (80046b8 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80045f8:	4937      	ldr	r1, [pc, #220]	; (80046d8 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80045fa:	4838      	ldr	r0, [pc, #224]	; (80046dc <_Z41__static_initialization_and_destruction_0ii+0x164>)
 80045fc:	f7fe f9ac 	bl	8002958 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_right_front("rpm_right_front", &uint_msg_right_front);
 8004600:	2300      	movs	r3, #0
 8004602:	4a26      	ldr	r2, [pc, #152]	; (800469c <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8004604:	4936      	ldr	r1, [pc, #216]	; (80046e0 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004606:	4837      	ldr	r0, [pc, #220]	; (80046e4 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004608:	f7fe f9a6 	bl	8002958 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_left_front("rpm_left_front", &uint_msg_left_front);
 800460c:	2300      	movs	r3, #0
 800460e:	4a24      	ldr	r2, [pc, #144]	; (80046a0 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8004610:	4935      	ldr	r1, [pc, #212]	; (80046e8 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004612:	4836      	ldr	r0, [pc, #216]	; (80046ec <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004614:	f7fe f9a0 	bl	8002958 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_right_back("rpm_right_back", &uint_msg_right_back);
 8004618:	2300      	movs	r3, #0
 800461a:	4a22      	ldr	r2, [pc, #136]	; (80046a4 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 800461c:	4934      	ldr	r1, [pc, #208]	; (80046f0 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 800461e:	4835      	ldr	r0, [pc, #212]	; (80046f4 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004620:	f7fe f99a 	bl	8002958 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_left_back("rpm_left_back", &uint_msg_left_back);
 8004624:	2300      	movs	r3, #0
 8004626:	4a20      	ldr	r2, [pc, #128]	; (80046a8 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8004628:	4933      	ldr	r1, [pc, #204]	; (80046f8 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 800462a:	4834      	ldr	r0, [pc, #208]	; (80046fc <_Z41__static_initialization_and_destruction_0ii+0x184>)
 800462c:	f7fe f994 	bl	8002958 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int8> rpm_rightFront_sub("rpm_rightFront_sub", rpm_rightFront_subCb);
 8004630:	2301      	movs	r3, #1
 8004632:	4a33      	ldr	r2, [pc, #204]	; (8004700 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004634:	4933      	ldr	r1, [pc, #204]	; (8004704 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004636:	4834      	ldr	r0, [pc, #208]	; (8004708 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8004638:	f7ff fad8 	bl	8003bec <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> rpm_leftFront_sub("rpm_leftFront_sub", rpm_leftFront_subCb);
 800463c:	2301      	movs	r3, #1
 800463e:	4a33      	ldr	r2, [pc, #204]	; (800470c <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004640:	4933      	ldr	r1, [pc, #204]	; (8004710 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8004642:	4834      	ldr	r0, [pc, #208]	; (8004714 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004644:	f7ff fad2 	bl	8003bec <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> rpm_rightBack_sub("rpm_rightBack_sub", rpm_rightBack_subCb);
 8004648:	2301      	movs	r3, #1
 800464a:	4a33      	ldr	r2, [pc, #204]	; (8004718 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 800464c:	4933      	ldr	r1, [pc, #204]	; (800471c <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 800464e:	4834      	ldr	r0, [pc, #208]	; (8004720 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8004650:	f7ff facc 	bl	8003bec <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> rpm_leftBack_sub("rpm_leftBack_sub", rpm_leftBack_subCb);
 8004654:	2301      	movs	r3, #1
 8004656:	4a33      	ldr	r2, [pc, #204]	; (8004724 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8004658:	4933      	ldr	r1, [pc, #204]	; (8004728 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 800465a:	4834      	ldr	r0, [pc, #208]	; (800472c <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 800465c:	f7ff fac6 	bl	8003bec <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Publisher diagnostic_data("diagnostics_data", &diagnostics_data_array);
 8004660:	2300      	movs	r3, #0
 8004662:	4a12      	ldr	r2, [pc, #72]	; (80046ac <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8004664:	4932      	ldr	r1, [pc, #200]	; (8004730 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8004666:	4833      	ldr	r0, [pc, #204]	; (8004734 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8004668:	f7fe f976 	bl	8002958 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher sensa_data("sensors1_3_data", &sen1_3_msg);
 800466c:	2300      	movs	r3, #0
 800466e:	4a13      	ldr	r2, [pc, #76]	; (80046bc <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004670:	4931      	ldr	r1, [pc, #196]	; (8004738 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8004672:	4832      	ldr	r0, [pc, #200]	; (800473c <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8004674:	f7fe f970 	bl	8002958 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher sensb_data("sensors4_6_data", &sen4_6_msg);
 8004678:	2300      	movs	r3, #0
 800467a:	4a11      	ldr	r2, [pc, #68]	; (80046c0 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 800467c:	4930      	ldr	r1, [pc, #192]	; (8004740 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 800467e:	4831      	ldr	r0, [pc, #196]	; (8004744 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8004680:	f7fe f96a 	bl	8002958 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher sensc_data("sensors7_8_data", &sen7_8_msg);
 8004684:	2300      	movs	r3, #0
 8004686:	4a0f      	ldr	r2, [pc, #60]	; (80046c4 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004688:	492f      	ldr	r1, [pc, #188]	; (8004748 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800468a:	4830      	ldr	r0, [pc, #192]	; (800474c <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 800468c:	f7fe f964 	bl	8002958 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004690:	bf00      	nop
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	200004e8 	.word	0x200004e8
 800469c:	20000a18 	.word	0x20000a18
 80046a0:	20000a20 	.word	0x20000a20
 80046a4:	20000a28 	.word	0x20000a28
 80046a8:	20000a30 	.word	0x20000a30
 80046ac:	20000a38 	.word	0x20000a38
 80046b0:	20000a68 	.word	0x20000a68
 80046b4:	20000a98 	.word	0x20000a98
 80046b8:	20000aa8 	.word	0x20000aa8
 80046bc:	20000ab8 	.word	0x20000ab8
 80046c0:	20000ac8 	.word	0x20000ac8
 80046c4:	20000ad8 	.word	0x20000ad8
 80046c8:	0800f850 	.word	0x0800f850
 80046cc:	20000ae8 	.word	0x20000ae8
 80046d0:	0800f854 	.word	0x0800f854
 80046d4:	20000afc 	.word	0x20000afc
 80046d8:	0800f85c 	.word	0x0800f85c
 80046dc:	20000b10 	.word	0x20000b10
 80046e0:	0800f864 	.word	0x0800f864
 80046e4:	20000b24 	.word	0x20000b24
 80046e8:	0800f874 	.word	0x0800f874
 80046ec:	20000b38 	.word	0x20000b38
 80046f0:	0800f884 	.word	0x0800f884
 80046f4:	20000b4c 	.word	0x20000b4c
 80046f8:	0800f894 	.word	0x0800f894
 80046fc:	20000b60 	.word	0x20000b60
 8004700:	08003379 	.word	0x08003379
 8004704:	0800f8a4 	.word	0x0800f8a4
 8004708:	20000b74 	.word	0x20000b74
 800470c:	080033ed 	.word	0x080033ed
 8004710:	0800f8b8 	.word	0x0800f8b8
 8004714:	20000b90 	.word	0x20000b90
 8004718:	08003459 	.word	0x08003459
 800471c:	0800f8cc 	.word	0x0800f8cc
 8004720:	20000bac 	.word	0x20000bac
 8004724:	080034c5 	.word	0x080034c5
 8004728:	0800f8e0 	.word	0x0800f8e0
 800472c:	20000bc8 	.word	0x20000bc8
 8004730:	0800f8f4 	.word	0x0800f8f4
 8004734:	20000be4 	.word	0x20000be4
 8004738:	0800f908 	.word	0x0800f908
 800473c:	20000bf8 	.word	0x20000bf8
 8004740:	0800f918 	.word	0x0800f918
 8004744:	20000c0c 	.word	0x20000c0c
 8004748:	0800f928 	.word	0x0800f928
 800474c:	20000c20 	.word	0x20000c20

08004750 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	330c      	adds	r3, #12
 800475e:	6839      	ldr	r1, [r7, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f7fe f9ab 	bl	8002abc <_ZN8std_msgs4Int811deserializeEPh>
    this->cb_(msg);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	320c      	adds	r2, #12
 800476e:	4610      	mov	r0, r2
 8004770:	4798      	blx	r3
  }
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <_ZN3ros10SubscriberIN8std_msgs4Int8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
  }
 8004786:	4618      	mov	r0, r3
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	330c      	adds	r3, #12
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fe f9ac 	bl	8002afc <_ZN8std_msgs4Int87getTypeEv>
 80047a4:	4603      	mov	r3, r0
  }
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	330c      	adds	r3, #12
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fe f9ac 	bl	8002b18 <_ZN8std_msgs4Int86getMD5Ev>
 80047c0:	4603      	mov	r3, r0
  }
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <_GLOBAL__sub_I_rb>:
 80047ca:	b580      	push	{r7, lr}
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047d2:	2001      	movs	r0, #1
 80047d4:	f7ff fed0 	bl	8004578 <_Z41__static_initialization_and_destruction_0ii>
 80047d8:	bd80      	pop	{r7, pc}

080047da <_Z8NBT_initP5nbt_tm>:
#include "stm32f4xx_hal.h"
#include "nbt.h"

//NBT - Non Blocking Timer
void NBT_init(nbt_t * nbt, uint32_t interval)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b082      	sub	sp, #8
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	6039      	str	r1, [r7, #0]
	nbt->timeout = interval;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	601a      	str	r2, [r3, #0]
	nbt->previousMillis = HAL_GetTick();
 80047ea:	f000 f9a5 	bl	8004b38 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	605a      	str	r2, [r3, #4]
}
 80047f4:	bf00      	nop
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <_Z11NBT_handlerP5nbt_t>:

bool NBT_handler(nbt_t * nbt)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
	if(HAL_GetTick()-nbt->previousMillis>nbt->timeout){
 8004804:	f000 f998 	bl	8004b38 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	1ad2      	subs	r2, r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	bf8c      	ite	hi
 8004818:	2301      	movhi	r3, #1
 800481a:	2300      	movls	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d006      	beq.n	8004830 <_Z11NBT_handlerP5nbt_t+0x34>
		nbt->previousMillis = HAL_GetTick();
 8004822:	f000 f989 	bl	8004b38 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	605a      	str	r2, [r3, #4]
		return true;
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <_Z11NBT_handlerP5nbt_t+0x36>
	}

	return false;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <_Z17ringbuffer_statusP10ringbuffer>:
#include <string.h>

#define ASSERT(EX)                                                         \

__inline enum ringbuffer_state  ringbuffer_status(struct  ringbuffer *rb)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
	if (rb->read_index == rb->write_index) {
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	889b      	ldrh	r3, [r3, #4]
 8004846:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800484a:	b29a      	uxth	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	88db      	ldrh	r3, [r3, #6]
 8004850:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004854:	b29b      	uxth	r3, r3
 8004856:	429a      	cmp	r2, r3
 8004858:	d10f      	bne.n	800487a <_Z17ringbuffer_statusP10ringbuffer+0x40>
		if (rb->read_mirror == rb->write_mirror)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	791b      	ldrb	r3, [r3, #4]
 800485e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004862:	b2da      	uxtb	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	799b      	ldrb	r3, [r3, #6]
 8004868:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800486c:	b2db      	uxtb	r3, r3
 800486e:	429a      	cmp	r2, r3
 8004870:	d101      	bne.n	8004876 <_Z17ringbuffer_statusP10ringbuffer+0x3c>
			return RT_RINGBUFFER_EMPTY;
 8004872:	2300      	movs	r3, #0
 8004874:	e002      	b.n	800487c <_Z17ringbuffer_statusP10ringbuffer+0x42>
		else
			return RT_RINGBUFFER_FULL;
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <_Z17ringbuffer_statusP10ringbuffer+0x42>
	}
	return RT_RINGBUFFER_HALFFULL;
 800487a:	2302      	movs	r3, #2
}
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <_Z19ringbuffer_data_lenP10ringbuffer>:

/** return the size of data in rb */
uint16_t  ringbuffer_data_len(struct  ringbuffer *rb)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
	switch ( ringbuffer_status(rb)) {
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff ffd2 	bl	800483a <_Z17ringbuffer_statusP10ringbuffer>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <_Z19ringbuffer_data_lenP10ringbuffer+0x1a>
 800489c:	2b01      	cmp	r3, #1
 800489e:	d002      	beq.n	80048a6 <_Z19ringbuffer_data_lenP10ringbuffer+0x1e>
 80048a0:	e006      	b.n	80048b0 <_Z19ringbuffer_data_lenP10ringbuffer+0x28>
	case RT_RINGBUFFER_EMPTY:
		return 0;
 80048a2:	2300      	movs	r3, #0
 80048a4:	e031      	b.n	800490a <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
	case RT_RINGBUFFER_FULL:
		return rb->buffer_size;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	e02c      	b.n	800490a <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
	case RT_RINGBUFFER_HALFFULL:
	default:
		if (rb->write_index > rb->read_index)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	88db      	ldrh	r3, [r3, #6]
 80048b4:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	889b      	ldrh	r3, [r3, #4]
 80048be:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d90d      	bls.n	80048e4 <_Z19ringbuffer_data_lenP10ringbuffer+0x5c>
			return rb->write_index - rb->read_index;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	88db      	ldrh	r3, [r3, #6]
 80048cc:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	889b      	ldrh	r3, [r3, #4]
 80048d8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80048dc:	b29b      	uxth	r3, r3
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	e012      	b.n	800490a <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
		else
			return rb->buffer_size - (rb->read_index - rb->write_index);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	88db      	ldrh	r3, [r3, #6]
 80048f0:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	4619      	mov	r1, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	889b      	ldrh	r3, [r3, #4]
 80048fc:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004900:	b29b      	uxth	r3, r3
 8004902:	1acb      	subs	r3, r1, r3
 8004904:	b29b      	uxth	r3, r3
 8004906:	4413      	add	r3, r2
 8004908:	b29b      	uxth	r3, r3
	};
}
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <_Z18ringbuffer_putcharP10ringbufferh>:

/**
 * put a character into ring buffer
 */
uint32_t  ringbuffer_putchar(struct  ringbuffer *rb, const uint8_t ch)
{
 8004912:	b590      	push	{r4, r7, lr}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	70fb      	strb	r3, [r7, #3]
    ASSERT(rb != NULL);

    /* whether has enough space */
	if (! ringbuffer_empty_space(rb))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004924:	461c      	mov	r4, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff ffad 	bl	8004888 <_Z19ringbuffer_data_lenP10ringbuffer>
 800492e:	4603      	mov	r3, r0
 8004930:	429c      	cmp	r4, r3
 8004932:	bf0c      	ite	eq
 8004934:	2301      	moveq	r3, #1
 8004936:	2300      	movne	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <_Z18ringbuffer_putcharP10ringbufferh+0x30>
		return 0;
 800493e:	2300      	movs	r3, #0
 8004940:	e038      	b.n	80049b4 <_Z18ringbuffer_putcharP10ringbufferh+0xa2>

	rb->buffer_ptr[rb->write_index] = ch;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	88d2      	ldrh	r2, [r2, #6]
 800494a:	f3c2 024e 	ubfx	r2, r2, #1, #15
 800494e:	b292      	uxth	r2, r2
 8004950:	4413      	add	r3, r2
 8004952:	78fa      	ldrb	r2, [r7, #3]
 8004954:	701a      	strb	r2, [r3, #0]

	/* flip mirror */
	if (rb->write_index == rb->buffer_size - 1) {
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	88db      	ldrh	r3, [r3, #6]
 800495a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800495e:	b29b      	uxth	r3, r3
 8004960:	461a      	mov	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004968:	3b01      	subs	r3, #1
 800496a:	429a      	cmp	r2, r3
 800496c:	d114      	bne.n	8004998 <_Z18ringbuffer_putcharP10ringbufferh+0x86>
		rb->write_mirror = ~rb->write_mirror;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	799b      	ldrb	r3, [r3, #6]
 8004972:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004976:	b2db      	uxtb	r3, r3
 8004978:	43db      	mvns	r3, r3
 800497a:	b2db      	uxtb	r3, r3
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	b2d9      	uxtb	r1, r3
 8004984:	7993      	ldrb	r3, [r2, #6]
 8004986:	f361 0300 	bfi	r3, r1, #0, #1
 800498a:	7193      	strb	r3, [r2, #6]
		rb->write_index = 0;
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	88d3      	ldrh	r3, [r2, #6]
 8004990:	f36f 034f 	bfc	r3, #1, #15
 8004994:	80d3      	strh	r3, [r2, #6]
 8004996:	e00c      	b.n	80049b2 <_Z18ringbuffer_putcharP10ringbufferh+0xa0>
	} else {
		rb->write_index++;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	88da      	ldrh	r2, [r3, #6]
 800499c:	f3c2 024e 	ubfx	r2, r2, #1, #15
 80049a0:	b292      	uxth	r2, r2
 80049a2:	3201      	adds	r2, #1
 80049a4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80049a8:	b291      	uxth	r1, r2
 80049aa:	88da      	ldrh	r2, [r3, #6]
 80049ac:	f361 024f 	bfi	r2, r1, #1, #15
 80049b0:	80da      	strh	r2, [r3, #6]
	}

	return 1;
 80049b2:	2301      	movs	r3, #1
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd90      	pop	{r4, r7, pc}

080049bc <_Z18ringbuffer_getcharP10ringbufferPh>:

/**
 * get a character from a ringbuffer
 */
uint32_t  ringbuffer_getchar(struct  ringbuffer *rb, uint8_t *ch)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
    ASSERT(rb != NULL);

    /* ringbuffer is empty */
    if (! ringbuffer_data_len(rb))
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff ff5e 	bl	8004888 <_Z19ringbuffer_data_lenP10ringbuffer>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	bf0c      	ite	eq
 80049d2:	2301      	moveq	r3, #1
 80049d4:	2300      	movne	r3, #0
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <_Z18ringbuffer_getcharP10ringbufferPh+0x24>
        return 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	e03a      	b.n	8004a56 <_Z18ringbuffer_getcharP10ringbufferPh+0x9a>

    /* put character */
    *ch = rb->buffer_ptr[rb->read_index];
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	8892      	ldrh	r2, [r2, #4]
 80049e8:	f3c2 024e 	ubfx	r2, r2, #1, #15
 80049ec:	b292      	uxth	r2, r2
 80049ee:	4413      	add	r3, r2
 80049f0:	781a      	ldrb	r2, [r3, #0]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	701a      	strb	r2, [r3, #0]

    if (rb->read_index == rb->buffer_size-1)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	889b      	ldrh	r3, [r3, #4]
 80049fa:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	461a      	mov	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d114      	bne.n	8004a38 <_Z18ringbuffer_getcharP10ringbufferPh+0x7c>
    {
        rb->read_mirror = ~rb->read_mirror;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	791b      	ldrb	r3, [r3, #4]
 8004a12:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	b2d9      	uxtb	r1, r3
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	7913      	ldrb	r3, [r2, #4]
 8004a26:	f361 0300 	bfi	r3, r1, #0, #1
 8004a2a:	7113      	strb	r3, [r2, #4]
        rb->read_index = 0;
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	8893      	ldrh	r3, [r2, #4]
 8004a30:	f36f 034f 	bfc	r3, #1, #15
 8004a34:	8093      	strh	r3, [r2, #4]
 8004a36:	e00d      	b.n	8004a54 <_Z18ringbuffer_getcharP10ringbufferPh+0x98>
    }
    else
    {
        rb->read_index++;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	889b      	ldrh	r3, [r3, #4]
 8004a3c:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3301      	adds	r3, #1
 8004a44:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004a48:	b299      	uxth	r1, r3
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	8893      	ldrh	r3, [r2, #4]
 8004a4e:	f361 034f 	bfi	r3, r1, #1, #15
 8004a52:	8093      	strh	r3, [r2, #4]
    }

    return 1;
 8004a54:	2301      	movs	r3, #1
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <_Z15ringbuffer_initP10ringbufferPhs>:
}

void  ringbuffer_init(struct  ringbuffer *rb,
                        uint8_t           *pool,
                        int16_t            size)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b085      	sub	sp, #20
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	80fb      	strh	r3, [r7, #6]
    ASSERT(rb != NULL);
    ASSERT(size > 0);

    /* initialize read and write index */
    rb->read_mirror = rb->read_index = 0;
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	8893      	ldrh	r3, [r2, #4]
 8004a70:	f36f 034f 	bfc	r3, #1, #15
 8004a74:	8093      	strh	r3, [r2, #4]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	889b      	ldrh	r3, [r3, #4]
 8004a7a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	b2d9      	uxtb	r1, r3
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	7913      	ldrb	r3, [r2, #4]
 8004a8a:	f361 0300 	bfi	r3, r1, #0, #1
 8004a8e:	7113      	strb	r3, [r2, #4]
    rb->write_mirror = rb->write_index = 0;
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	88d3      	ldrh	r3, [r2, #6]
 8004a94:	f36f 034f 	bfc	r3, #1, #15
 8004a98:	80d3      	strh	r3, [r2, #6]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	88db      	ldrh	r3, [r3, #6]
 8004a9e:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	b2d9      	uxtb	r1, r3
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	7993      	ldrb	r3, [r2, #6]
 8004aae:	f361 0300 	bfi	r3, r1, #0, #1
 8004ab2:	7193      	strb	r3, [r2, #6]

    /* set buffer pool and size */
    rb->buffer_ptr = pool;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	601a      	str	r2, [r3, #0]
    rb->buffer_size = size; //ALIGN_DOWN(size, ALIGN_SIZE);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	88fa      	ldrh	r2, [r7, #6]
 8004abe:	811a      	strh	r2, [r3, #8]
}
 8004ac0:	bf00      	nop
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ad0:	4b0e      	ldr	r3, [pc, #56]	; (8004b0c <HAL_Init+0x40>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a0d      	ldr	r2, [pc, #52]	; (8004b0c <HAL_Init+0x40>)
 8004ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ada:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004adc:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <HAL_Init+0x40>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a0a      	ldr	r2, [pc, #40]	; (8004b0c <HAL_Init+0x40>)
 8004ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ae6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ae8:	4b08      	ldr	r3, [pc, #32]	; (8004b0c <HAL_Init+0x40>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a07      	ldr	r2, [pc, #28]	; (8004b0c <HAL_Init+0x40>)
 8004aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004af4:	2003      	movs	r0, #3
 8004af6:	f000 ff56 	bl	80059a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004afa:	2000      	movs	r0, #0
 8004afc:	f7fc fea6 	bl	800184c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b00:	f7fc fdce 	bl	80016a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40023c00 	.word	0x40023c00

08004b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b14:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <HAL_IncTick+0x20>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <HAL_IncTick+0x24>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4413      	add	r3, r2
 8004b20:	4a04      	ldr	r2, [pc, #16]	; (8004b34 <HAL_IncTick+0x24>)
 8004b22:	6013      	str	r3, [r2, #0]
}
 8004b24:	bf00      	nop
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	20000010 	.word	0x20000010
 8004b34:	20004fd0 	.word	0x20004fd0

08004b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b3c:	4b03      	ldr	r3, [pc, #12]	; (8004b4c <HAL_GetTick+0x14>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	20004fd0 	.word	0x20004fd0

08004b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b58:	f7ff ffee 	bl	8004b38 <HAL_GetTick>
 8004b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b68:	d005      	beq.n	8004b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b6a:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <HAL_Delay+0x40>)
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4413      	add	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b76:	bf00      	nop
 8004b78:	f7ff ffde 	bl	8004b38 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d8f7      	bhi.n	8004b78 <HAL_Delay+0x28>
  {
  }
}
 8004b88:	bf00      	nop
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20000010 	.word	0x20000010

08004b94 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e0ed      	b.n	8004d82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d102      	bne.n	8004bb8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fc fda2 	bl	80016fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0202 	bic.w	r2, r2, #2
 8004bc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bc8:	f7ff ffb6 	bl	8004b38 <HAL_GetTick>
 8004bcc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004bce:	e012      	b.n	8004bf6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004bd0:	f7ff ffb2 	bl	8004b38 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b0a      	cmp	r3, #10
 8004bdc:	d90b      	bls.n	8004bf6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2205      	movs	r2, #5
 8004bee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e0c5      	b.n	8004d82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e5      	bne.n	8004bd0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c14:	f7ff ff90 	bl	8004b38 <HAL_GetTick>
 8004c18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c1a:	e012      	b.n	8004c42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c1c:	f7ff ff8c 	bl	8004b38 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b0a      	cmp	r3, #10
 8004c28:	d90b      	bls.n	8004c42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2205      	movs	r2, #5
 8004c3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e09f      	b.n	8004d82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0e5      	beq.n	8004c1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	7e1b      	ldrb	r3, [r3, #24]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d108      	bne.n	8004c6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	e007      	b.n	8004c7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	7e5b      	ldrb	r3, [r3, #25]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d108      	bne.n	8004c94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	e007      	b.n	8004ca4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	7e9b      	ldrb	r3, [r3, #26]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d108      	bne.n	8004cbe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0220 	orr.w	r2, r2, #32
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	e007      	b.n	8004cce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0220 	bic.w	r2, r2, #32
 8004ccc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	7edb      	ldrb	r3, [r3, #27]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d108      	bne.n	8004ce8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 0210 	bic.w	r2, r2, #16
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	e007      	b.n	8004cf8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0210 	orr.w	r2, r2, #16
 8004cf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	7f1b      	ldrb	r3, [r3, #28]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d108      	bne.n	8004d12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0208 	orr.w	r2, r2, #8
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	e007      	b.n	8004d22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0208 	bic.w	r2, r2, #8
 8004d20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	7f5b      	ldrb	r3, [r3, #29]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d108      	bne.n	8004d3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f042 0204 	orr.w	r2, r2, #4
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	e007      	b.n	8004d4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0204 	bic.w	r2, r2, #4
 8004d4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	ea42 0103 	orr.w	r1, r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	1e5a      	subs	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004da2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004da4:	7cfb      	ldrb	r3, [r7, #19]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d003      	beq.n	8004db2 <HAL_CAN_ConfigFilter+0x26>
 8004daa:	7cfb      	ldrb	r3, [r7, #19]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	f040 80be 	bne.w	8004f2e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004db2:	4b65      	ldr	r3, [pc, #404]	; (8004f48 <HAL_CAN_ConfigFilter+0x1bc>)
 8004db4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004dbc:	f043 0201 	orr.w	r2, r3, #1
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004dcc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	021b      	lsls	r3, r3, #8
 8004de2:	431a      	orrs	r2, r3
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	f003 031f 	and.w	r3, r3, #31
 8004df2:	2201      	movs	r2, #1
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	43db      	mvns	r3, r3
 8004e04:	401a      	ands	r2, r3
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d123      	bne.n	8004e5c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	401a      	ands	r2, r3
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004e36:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	3248      	adds	r2, #72	; 0x48
 8004e3c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e50:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e52:	6979      	ldr	r1, [r7, #20]
 8004e54:	3348      	adds	r3, #72	; 0x48
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	440b      	add	r3, r1
 8004e5a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d122      	bne.n	8004eaa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e84:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	3248      	adds	r2, #72	; 0x48
 8004e8a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e9e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ea0:	6979      	ldr	r1, [r7, #20]
 8004ea2:	3348      	adds	r3, #72	; 0x48
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	440b      	add	r3, r1
 8004ea8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d109      	bne.n	8004ec6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	43db      	mvns	r3, r3
 8004ebc:	401a      	ands	r2, r3
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004ec4:	e007      	b.n	8004ed6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d109      	bne.n	8004ef2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	43db      	mvns	r3, r3
 8004ee8:	401a      	ands	r2, r3
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004ef0:	e007      	b.n	8004f02 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	431a      	orrs	r2, r3
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d107      	bne.n	8004f1a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f20:	f023 0201 	bic.w	r2, r3, #1
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	e006      	b.n	8004f3c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
  }
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	371c      	adds	r7, #28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	40006400 	.word	0x40006400

08004f4c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d12e      	bne.n	8004fbe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0201 	bic.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f78:	f7ff fdde 	bl	8004b38 <HAL_GetTick>
 8004f7c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f7e:	e012      	b.n	8004fa6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f80:	f7ff fdda 	bl	8004b38 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b0a      	cmp	r3, #10
 8004f8c:	d90b      	bls.n	8004fa6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2205      	movs	r2, #5
 8004f9e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e012      	b.n	8004fcc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1e5      	bne.n	8004f80 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e006      	b.n	8004fcc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
  }
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b089      	sub	sp, #36	; 0x24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fe8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004ff2:	7ffb      	ldrb	r3, [r7, #31]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d003      	beq.n	8005000 <HAL_CAN_AddTxMessage+0x2c>
 8004ff8:	7ffb      	ldrb	r3, [r7, #31]
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	f040 80b8 	bne.w	8005170 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10a      	bne.n	8005020 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005010:	2b00      	cmp	r3, #0
 8005012:	d105      	bne.n	8005020 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 80a0 	beq.w	8005160 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	0e1b      	lsrs	r3, r3, #24
 8005024:	f003 0303 	and.w	r3, r3, #3
 8005028:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b02      	cmp	r3, #2
 800502e:	d907      	bls.n	8005040 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e09e      	b.n	800517e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005040:	2201      	movs	r2, #1
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	409a      	lsls	r2, r3
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10d      	bne.n	800506e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800505c:	68f9      	ldr	r1, [r7, #12]
 800505e:	6809      	ldr	r1, [r1, #0]
 8005060:	431a      	orrs	r2, r3
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	3318      	adds	r3, #24
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	440b      	add	r3, r1
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	e00f      	b.n	800508e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005078:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800507e:	68f9      	ldr	r1, [r7, #12]
 8005080:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005082:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	3318      	adds	r3, #24
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	440b      	add	r3, r1
 800508c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6819      	ldr	r1, [r3, #0]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	3318      	adds	r3, #24
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	440b      	add	r3, r1
 800509e:	3304      	adds	r3, #4
 80050a0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	7d1b      	ldrb	r3, [r3, #20]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d111      	bne.n	80050ce <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	3318      	adds	r3, #24
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	4413      	add	r3, r2
 80050b6:	3304      	adds	r3, #4
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	6811      	ldr	r1, [r2, #0]
 80050be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	3318      	adds	r3, #24
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	440b      	add	r3, r1
 80050ca:	3304      	adds	r3, #4
 80050cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3307      	adds	r3, #7
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	061a      	lsls	r2, r3, #24
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3306      	adds	r3, #6
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	041b      	lsls	r3, r3, #16
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3305      	adds	r3, #5
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	021b      	lsls	r3, r3, #8
 80050e8:	4313      	orrs	r3, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	3204      	adds	r2, #4
 80050ee:	7812      	ldrb	r2, [r2, #0]
 80050f0:	4610      	mov	r0, r2
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	6811      	ldr	r1, [r2, #0]
 80050f6:	ea43 0200 	orr.w	r2, r3, r0
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	440b      	add	r3, r1
 8005100:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005104:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3303      	adds	r3, #3
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	061a      	lsls	r2, r3, #24
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3302      	adds	r3, #2
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	041b      	lsls	r3, r3, #16
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3301      	adds	r3, #1
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	021b      	lsls	r3, r3, #8
 8005120:	4313      	orrs	r3, r2
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	7812      	ldrb	r2, [r2, #0]
 8005126:	4610      	mov	r0, r2
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	6811      	ldr	r1, [r2, #0]
 800512c:	ea43 0200 	orr.w	r2, r3, r0
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	440b      	add	r3, r1
 8005136:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800513a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	3318      	adds	r3, #24
 8005144:	011b      	lsls	r3, r3, #4
 8005146:	4413      	add	r3, r2
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	6811      	ldr	r1, [r2, #0]
 800514e:	f043 0201 	orr.w	r2, r3, #1
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	3318      	adds	r3, #24
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	440b      	add	r3, r1
 800515a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800515c:	2300      	movs	r3, #0
 800515e:	e00e      	b.n	800517e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e006      	b.n	800517e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
  }
}
 800517e:	4618      	mov	r0, r3
 8005180:	3724      	adds	r7, #36	; 0x24
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800518a:	b480      	push	{r7}
 800518c:	b087      	sub	sp, #28
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	607a      	str	r2, [r7, #4]
 8005196:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800519e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80051a0:	7dfb      	ldrb	r3, [r7, #23]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d003      	beq.n	80051ae <HAL_CAN_GetRxMessage+0x24>
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	f040 80f3 	bne.w	8005394 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10e      	bne.n	80051d2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d116      	bne.n	80051f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e0e7      	b.n	80053a2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d107      	bne.n	80051f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e0d8      	b.n	80053a2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	331b      	adds	r3, #27
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	4413      	add	r3, r2
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0204 	and.w	r2, r3, #4
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10c      	bne.n	8005228 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	331b      	adds	r3, #27
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	4413      	add	r3, r2
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	0d5b      	lsrs	r3, r3, #21
 800521e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	e00b      	b.n	8005240 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	331b      	adds	r3, #27
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	4413      	add	r3, r2
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	08db      	lsrs	r3, r3, #3
 8005238:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	331b      	adds	r3, #27
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	4413      	add	r3, r2
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0202 	and.w	r2, r3, #2
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	331b      	adds	r3, #27
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	4413      	add	r3, r2
 8005262:	3304      	adds	r3, #4
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 020f 	and.w	r2, r3, #15
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	331b      	adds	r3, #27
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	4413      	add	r3, r2
 800527a:	3304      	adds	r3, #4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	0a1b      	lsrs	r3, r3, #8
 8005280:	b2da      	uxtb	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	331b      	adds	r3, #27
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	4413      	add	r3, r2
 8005292:	3304      	adds	r3, #4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	0c1b      	lsrs	r3, r3, #16
 8005298:	b29a      	uxth	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	4413      	add	r3, r2
 80052be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	0a1a      	lsrs	r2, r3, #8
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	3301      	adds	r3, #1
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	0c1a      	lsrs	r2, r3, #16
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	3302      	adds	r3, #2
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	0e1a      	lsrs	r2, r3, #24
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	3303      	adds	r3, #3
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	4413      	add	r3, r2
 800530c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	3304      	adds	r3, #4
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	011b      	lsls	r3, r3, #4
 8005322:	4413      	add	r3, r2
 8005324:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	0a1a      	lsrs	r2, r3, #8
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	3305      	adds	r3, #5
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	4413      	add	r3, r2
 800533e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	0c1a      	lsrs	r2, r3, #16
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	3306      	adds	r3, #6
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	4413      	add	r3, r2
 8005358:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	0e1a      	lsrs	r2, r3, #24
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	3307      	adds	r3, #7
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d108      	bne.n	8005380 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0220 	orr.w	r2, r2, #32
 800537c:	60da      	str	r2, [r3, #12]
 800537e:	e007      	b.n	8005390 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691a      	ldr	r2, [r3, #16]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0220 	orr.w	r2, r2, #32
 800538e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005390:	2300      	movs	r3, #0
 8005392:	e006      	b.n	80053a2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
  }
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053be:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d002      	beq.n	80053cc <HAL_CAN_ActivateNotification+0x1e>
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d109      	bne.n	80053e0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6959      	ldr	r1, [r3, #20]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	e006      	b.n	80053ee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
  }
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b08a      	sub	sp, #40	; 0x28
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005402:	2300      	movs	r3, #0
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d07c      	beq.n	800553a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d023      	beq.n	8005492 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2201      	movs	r2, #1
 8005450:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f97d 	bl	800575c <HAL_CAN_TxMailbox0CompleteCallback>
 8005462:	e016      	b.n	8005492 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d004      	beq.n	8005478 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005474:	627b      	str	r3, [r7, #36]	; 0x24
 8005476:	e00c      	b.n	8005492 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d004      	beq.n	800548c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
 800548a:	e002      	b.n	8005492 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f983 	bl	8005798 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005498:	2b00      	cmp	r3, #0
 800549a:	d024      	beq.n	80054e6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f95d 	bl	8005770 <HAL_CAN_TxMailbox1CompleteCallback>
 80054b6:	e016      	b.n	80054e6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d004      	beq.n	80054cc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ca:	e00c      	b.n	80054e6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d004      	beq.n	80054e0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
 80054de:	e002      	b.n	80054e6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f963 	bl	80057ac <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d024      	beq.n	800553a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80054f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f93d 	bl	8005784 <HAL_CAN_TxMailbox2CompleteCallback>
 800550a:	e016      	b.n	800553a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d004      	beq.n	8005520 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
 800551e:	e00c      	b.n	800553a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
 8005532:	e002      	b.n	800553a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f943 	bl	80057c0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00c      	beq.n	800555e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f003 0310 	and.w	r3, r3, #16
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005554:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2210      	movs	r2, #16
 800555c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00b      	beq.n	8005580 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f003 0308 	and.w	r3, r3, #8
 800556e:	2b00      	cmp	r3, #0
 8005570:	d006      	beq.n	8005580 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2208      	movs	r2, #8
 8005578:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f92a 	bl	80057d4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d009      	beq.n	800559e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0303 	and.w	r3, r3, #3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7fb f9a9 	bl	80008f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00c      	beq.n	80055c2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d007      	beq.n	80055c2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2210      	movs	r2, #16
 80055c0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00b      	beq.n	80055e4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d006      	beq.n	80055e4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2208      	movs	r2, #8
 80055dc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f90c 	bl	80057fc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	f003 0310 	and.w	r3, r3, #16
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d009      	beq.n	8005602 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f8f3 	bl	80057e8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00b      	beq.n	8005624 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	f003 0310 	and.w	r3, r3, #16
 8005612:	2b00      	cmp	r3, #0
 8005614:	d006      	beq.n	8005624 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2210      	movs	r2, #16
 800561c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f8f6 	bl	8005810 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00b      	beq.n	8005646 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d006      	beq.n	8005646 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2208      	movs	r2, #8
 800563e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f8ef 	bl	8005824 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d075      	beq.n	800573c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b00      	cmp	r3, #0
 8005658:	d06c      	beq.n	8005734 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005660:	2b00      	cmp	r3, #0
 8005662:	d008      	beq.n	8005676 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	f043 0301 	orr.w	r3, r3, #1
 8005674:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800567c:	2b00      	cmp	r3, #0
 800567e:	d008      	beq.n	8005692 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	f043 0302 	orr.w	r3, r3, #2
 8005690:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005698:	2b00      	cmp	r3, #0
 800569a:	d008      	beq.n	80056ae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	f043 0304 	orr.w	r3, r3, #4
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d03d      	beq.n	8005734 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d038      	beq.n	8005734 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056c8:	2b30      	cmp	r3, #48	; 0x30
 80056ca:	d017      	beq.n	80056fc <HAL_CAN_IRQHandler+0x302>
 80056cc:	2b30      	cmp	r3, #48	; 0x30
 80056ce:	d804      	bhi.n	80056da <HAL_CAN_IRQHandler+0x2e0>
 80056d0:	2b10      	cmp	r3, #16
 80056d2:	d009      	beq.n	80056e8 <HAL_CAN_IRQHandler+0x2ee>
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	d00c      	beq.n	80056f2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80056d8:	e024      	b.n	8005724 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80056da:	2b50      	cmp	r3, #80	; 0x50
 80056dc:	d018      	beq.n	8005710 <HAL_CAN_IRQHandler+0x316>
 80056de:	2b60      	cmp	r3, #96	; 0x60
 80056e0:	d01b      	beq.n	800571a <HAL_CAN_IRQHandler+0x320>
 80056e2:	2b40      	cmp	r3, #64	; 0x40
 80056e4:	d00f      	beq.n	8005706 <HAL_CAN_IRQHandler+0x30c>
            break;
 80056e6:	e01d      	b.n	8005724 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	f043 0308 	orr.w	r3, r3, #8
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80056f0:	e018      	b.n	8005724 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	f043 0310 	orr.w	r3, r3, #16
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80056fa:	e013      	b.n	8005724 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	f043 0320 	orr.w	r3, r3, #32
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005704:	e00e      	b.n	8005724 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800570e:	e009      	b.n	8005724 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005718:	e004      	b.n	8005724 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005722:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699a      	ldr	r2, [r3, #24]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005732:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2204      	movs	r2, #4
 800573a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	2b00      	cmp	r3, #0
 8005740:	d008      	beq.n	8005754 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	431a      	orrs	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f872 	bl	8005838 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005754:	bf00      	nop
 8005756:	3728      	adds	r7, #40	; 0x28
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800585c:	4b0c      	ldr	r3, [pc, #48]	; (8005890 <__NVIC_SetPriorityGrouping+0x44>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005868:	4013      	ands	r3, r2
 800586a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800587c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800587e:	4a04      	ldr	r2, [pc, #16]	; (8005890 <__NVIC_SetPriorityGrouping+0x44>)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	60d3      	str	r3, [r2, #12]
}
 8005884:	bf00      	nop
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	e000ed00 	.word	0xe000ed00

08005894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005898:	4b04      	ldr	r3, [pc, #16]	; (80058ac <__NVIC_GetPriorityGrouping+0x18>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	0a1b      	lsrs	r3, r3, #8
 800589e:	f003 0307 	and.w	r3, r3, #7
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	e000ed00 	.word	0xe000ed00

080058b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	db0b      	blt.n	80058da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058c2:	79fb      	ldrb	r3, [r7, #7]
 80058c4:	f003 021f 	and.w	r2, r3, #31
 80058c8:	4907      	ldr	r1, [pc, #28]	; (80058e8 <__NVIC_EnableIRQ+0x38>)
 80058ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	2001      	movs	r0, #1
 80058d2:	fa00 f202 	lsl.w	r2, r0, r2
 80058d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80058da:	bf00      	nop
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	e000e100 	.word	0xe000e100

080058ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	6039      	str	r1, [r7, #0]
 80058f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	db0a      	blt.n	8005916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	b2da      	uxtb	r2, r3
 8005904:	490c      	ldr	r1, [pc, #48]	; (8005938 <__NVIC_SetPriority+0x4c>)
 8005906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800590a:	0112      	lsls	r2, r2, #4
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	440b      	add	r3, r1
 8005910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005914:	e00a      	b.n	800592c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	b2da      	uxtb	r2, r3
 800591a:	4908      	ldr	r1, [pc, #32]	; (800593c <__NVIC_SetPriority+0x50>)
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	3b04      	subs	r3, #4
 8005924:	0112      	lsls	r2, r2, #4
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	440b      	add	r3, r1
 800592a:	761a      	strb	r2, [r3, #24]
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	e000e100 	.word	0xe000e100
 800593c:	e000ed00 	.word	0xe000ed00

08005940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005940:	b480      	push	{r7}
 8005942:	b089      	sub	sp, #36	; 0x24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	f1c3 0307 	rsb	r3, r3, #7
 800595a:	2b04      	cmp	r3, #4
 800595c:	bf28      	it	cs
 800595e:	2304      	movcs	r3, #4
 8005960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	3304      	adds	r3, #4
 8005966:	2b06      	cmp	r3, #6
 8005968:	d902      	bls.n	8005970 <NVIC_EncodePriority+0x30>
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	3b03      	subs	r3, #3
 800596e:	e000      	b.n	8005972 <NVIC_EncodePriority+0x32>
 8005970:	2300      	movs	r3, #0
 8005972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	fa02 f303 	lsl.w	r3, r2, r3
 800597e:	43da      	mvns	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	401a      	ands	r2, r3
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005988:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	fa01 f303 	lsl.w	r3, r1, r3
 8005992:	43d9      	mvns	r1, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005998:	4313      	orrs	r3, r2
         );
}
 800599a:	4618      	mov	r0, r3
 800599c:	3724      	adds	r7, #36	; 0x24
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b082      	sub	sp, #8
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff ff4c 	bl	800584c <__NVIC_SetPriorityGrouping>
}
 80059b4:	bf00      	nop
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	4603      	mov	r3, r0
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059ce:	f7ff ff61 	bl	8005894 <__NVIC_GetPriorityGrouping>
 80059d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	68b9      	ldr	r1, [r7, #8]
 80059d8:	6978      	ldr	r0, [r7, #20]
 80059da:	f7ff ffb1 	bl	8005940 <NVIC_EncodePriority>
 80059de:	4602      	mov	r2, r0
 80059e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059e4:	4611      	mov	r1, r2
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7ff ff80 	bl	80058ec <__NVIC_SetPriority>
}
 80059ec:	bf00      	nop
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	4603      	mov	r3, r0
 80059fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff ff54 	bl	80058b0 <__NVIC_EnableIRQ>
}
 8005a08:	bf00      	nop
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d004      	beq.n	8005a2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2280      	movs	r2, #128	; 0x80
 8005a28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e00c      	b.n	8005a48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2205      	movs	r2, #5
 8005a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0201 	bic.w	r2, r2, #1
 8005a44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a62:	b2db      	uxtb	r3, r3
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b089      	sub	sp, #36	; 0x24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
 8005a8a:	e16b      	b.n	8005d64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	f040 815a 	bne.w	8005d5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d00b      	beq.n	8005aca <HAL_GPIO_Init+0x5a>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d007      	beq.n	8005aca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005abe:	2b11      	cmp	r3, #17
 8005ac0:	d003      	beq.n	8005aca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b12      	cmp	r3, #18
 8005ac8:	d130      	bne.n	8005b2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	2203      	movs	r2, #3
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	43db      	mvns	r3, r3
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b00:	2201      	movs	r2, #1
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	fa02 f303 	lsl.w	r3, r2, r3
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	091b      	lsrs	r3, r3, #4
 8005b16:	f003 0201 	and.w	r2, r3, #1
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	005b      	lsls	r3, r3, #1
 8005b36:	2203      	movs	r2, #3
 8005b38:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3c:	43db      	mvns	r3, r3
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	4013      	ands	r3, r2
 8005b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d003      	beq.n	8005b6c <HAL_GPIO_Init+0xfc>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2b12      	cmp	r3, #18
 8005b6a:	d123      	bne.n	8005bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	08da      	lsrs	r2, r3, #3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3208      	adds	r2, #8
 8005b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	220f      	movs	r2, #15
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	691a      	ldr	r2, [r3, #16]
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	08da      	lsrs	r2, r3, #3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3208      	adds	r2, #8
 8005bae:	69b9      	ldr	r1, [r7, #24]
 8005bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	2203      	movs	r2, #3
 8005bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc4:	43db      	mvns	r3, r3
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f003 0203 	and.w	r2, r3, #3
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 80b4 	beq.w	8005d5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	4b5f      	ldr	r3, [pc, #380]	; (8005d78 <HAL_GPIO_Init+0x308>)
 8005bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfe:	4a5e      	ldr	r2, [pc, #376]	; (8005d78 <HAL_GPIO_Init+0x308>)
 8005c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c04:	6453      	str	r3, [r2, #68]	; 0x44
 8005c06:	4b5c      	ldr	r3, [pc, #368]	; (8005d78 <HAL_GPIO_Init+0x308>)
 8005c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c12:	4a5a      	ldr	r2, [pc, #360]	; (8005d7c <HAL_GPIO_Init+0x30c>)
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	089b      	lsrs	r3, r3, #2
 8005c18:	3302      	adds	r3, #2
 8005c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	f003 0303 	and.w	r3, r3, #3
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	220f      	movs	r2, #15
 8005c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2e:	43db      	mvns	r3, r3
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	4013      	ands	r3, r2
 8005c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a51      	ldr	r2, [pc, #324]	; (8005d80 <HAL_GPIO_Init+0x310>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d02b      	beq.n	8005c96 <HAL_GPIO_Init+0x226>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a50      	ldr	r2, [pc, #320]	; (8005d84 <HAL_GPIO_Init+0x314>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d025      	beq.n	8005c92 <HAL_GPIO_Init+0x222>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a4f      	ldr	r2, [pc, #316]	; (8005d88 <HAL_GPIO_Init+0x318>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d01f      	beq.n	8005c8e <HAL_GPIO_Init+0x21e>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a4e      	ldr	r2, [pc, #312]	; (8005d8c <HAL_GPIO_Init+0x31c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d019      	beq.n	8005c8a <HAL_GPIO_Init+0x21a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a4d      	ldr	r2, [pc, #308]	; (8005d90 <HAL_GPIO_Init+0x320>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d013      	beq.n	8005c86 <HAL_GPIO_Init+0x216>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a4c      	ldr	r2, [pc, #304]	; (8005d94 <HAL_GPIO_Init+0x324>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00d      	beq.n	8005c82 <HAL_GPIO_Init+0x212>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a4b      	ldr	r2, [pc, #300]	; (8005d98 <HAL_GPIO_Init+0x328>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d007      	beq.n	8005c7e <HAL_GPIO_Init+0x20e>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a4a      	ldr	r2, [pc, #296]	; (8005d9c <HAL_GPIO_Init+0x32c>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d101      	bne.n	8005c7a <HAL_GPIO_Init+0x20a>
 8005c76:	2307      	movs	r3, #7
 8005c78:	e00e      	b.n	8005c98 <HAL_GPIO_Init+0x228>
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	e00c      	b.n	8005c98 <HAL_GPIO_Init+0x228>
 8005c7e:	2306      	movs	r3, #6
 8005c80:	e00a      	b.n	8005c98 <HAL_GPIO_Init+0x228>
 8005c82:	2305      	movs	r3, #5
 8005c84:	e008      	b.n	8005c98 <HAL_GPIO_Init+0x228>
 8005c86:	2304      	movs	r3, #4
 8005c88:	e006      	b.n	8005c98 <HAL_GPIO_Init+0x228>
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e004      	b.n	8005c98 <HAL_GPIO_Init+0x228>
 8005c8e:	2302      	movs	r3, #2
 8005c90:	e002      	b.n	8005c98 <HAL_GPIO_Init+0x228>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e000      	b.n	8005c98 <HAL_GPIO_Init+0x228>
 8005c96:	2300      	movs	r3, #0
 8005c98:	69fa      	ldr	r2, [r7, #28]
 8005c9a:	f002 0203 	and.w	r2, r2, #3
 8005c9e:	0092      	lsls	r2, r2, #2
 8005ca0:	4093      	lsls	r3, r2
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ca8:	4934      	ldr	r1, [pc, #208]	; (8005d7c <HAL_GPIO_Init+0x30c>)
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	089b      	lsrs	r3, r3, #2
 8005cae:	3302      	adds	r3, #2
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005cb6:	4b3a      	ldr	r3, [pc, #232]	; (8005da0 <HAL_GPIO_Init+0x330>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	43db      	mvns	r3, r3
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005cda:	4a31      	ldr	r2, [pc, #196]	; (8005da0 <HAL_GPIO_Init+0x330>)
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ce0:	4b2f      	ldr	r3, [pc, #188]	; (8005da0 <HAL_GPIO_Init+0x330>)
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	4013      	ands	r3, r2
 8005cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d04:	4a26      	ldr	r2, [pc, #152]	; (8005da0 <HAL_GPIO_Init+0x330>)
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d0a:	4b25      	ldr	r3, [pc, #148]	; (8005da0 <HAL_GPIO_Init+0x330>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	43db      	mvns	r3, r3
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	4013      	ands	r3, r2
 8005d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d2e:	4a1c      	ldr	r2, [pc, #112]	; (8005da0 <HAL_GPIO_Init+0x330>)
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d34:	4b1a      	ldr	r3, [pc, #104]	; (8005da0 <HAL_GPIO_Init+0x330>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	43db      	mvns	r3, r3
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	4013      	ands	r3, r2
 8005d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d58:	4a11      	ldr	r2, [pc, #68]	; (8005da0 <HAL_GPIO_Init+0x330>)
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	3301      	adds	r3, #1
 8005d62:	61fb      	str	r3, [r7, #28]
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	2b0f      	cmp	r3, #15
 8005d68:	f67f ae90 	bls.w	8005a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d6c:	bf00      	nop
 8005d6e:	3724      	adds	r7, #36	; 0x24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	40023800 	.word	0x40023800
 8005d7c:	40013800 	.word	0x40013800
 8005d80:	40020000 	.word	0x40020000
 8005d84:	40020400 	.word	0x40020400
 8005d88:	40020800 	.word	0x40020800
 8005d8c:	40020c00 	.word	0x40020c00
 8005d90:	40021000 	.word	0x40021000
 8005d94:	40021400 	.word	0x40021400
 8005d98:	40021800 	.word	0x40021800
 8005d9c:	40021c00 	.word	0x40021c00
 8005da0:	40013c00 	.word	0x40013c00

08005da4 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	695a      	ldr	r2, [r3, #20]
 8005db4:	887b      	ldrh	r3, [r7, #2]
 8005db6:	401a      	ands	r2, r3
 8005db8:	887b      	ldrh	r3, [r7, #2]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d104      	bne.n	8005dc8 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005dbe:	887b      	ldrh	r3, [r7, #2]
 8005dc0:	041a      	lsls	r2, r3, #16
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005dc6:	e002      	b.n	8005dce <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005dc8:	887a      	ldrh	r2, [r7, #2]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	619a      	str	r2, [r3, #24]
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
	...

08005ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e11f      	b.n	800602e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7fb fcd2 	bl	80017ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2224      	movs	r2, #36	; 0x24
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0201 	bic.w	r2, r2, #1
 8005e1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e40:	f004 f8ca 	bl	8009fd8 <HAL_RCC_GetPCLK1Freq>
 8005e44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	4a7b      	ldr	r2, [pc, #492]	; (8006038 <HAL_I2C_Init+0x25c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d807      	bhi.n	8005e60 <HAL_I2C_Init+0x84>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4a7a      	ldr	r2, [pc, #488]	; (800603c <HAL_I2C_Init+0x260>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	bf94      	ite	ls
 8005e58:	2301      	movls	r3, #1
 8005e5a:	2300      	movhi	r3, #0
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	e006      	b.n	8005e6e <HAL_I2C_Init+0x92>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4a77      	ldr	r2, [pc, #476]	; (8006040 <HAL_I2C_Init+0x264>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	bf94      	ite	ls
 8005e68:	2301      	movls	r3, #1
 8005e6a:	2300      	movhi	r3, #0
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e0db      	b.n	800602e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4a72      	ldr	r2, [pc, #456]	; (8006044 <HAL_I2C_Init+0x268>)
 8005e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7e:	0c9b      	lsrs	r3, r3, #18
 8005e80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	4a64      	ldr	r2, [pc, #400]	; (8006038 <HAL_I2C_Init+0x25c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d802      	bhi.n	8005eb0 <HAL_I2C_Init+0xd4>
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	3301      	adds	r3, #1
 8005eae:	e009      	b.n	8005ec4 <HAL_I2C_Init+0xe8>
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005eb6:	fb02 f303 	mul.w	r3, r2, r3
 8005eba:	4a63      	ldr	r2, [pc, #396]	; (8006048 <HAL_I2C_Init+0x26c>)
 8005ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec0:	099b      	lsrs	r3, r3, #6
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6812      	ldr	r2, [r2, #0]
 8005ec8:	430b      	orrs	r3, r1
 8005eca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ed6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	4956      	ldr	r1, [pc, #344]	; (8006038 <HAL_I2C_Init+0x25c>)
 8005ee0:	428b      	cmp	r3, r1
 8005ee2:	d80d      	bhi.n	8005f00 <HAL_I2C_Init+0x124>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	1e59      	subs	r1, r3, #1
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	bf38      	it	cc
 8005efc:	2304      	movcc	r3, #4
 8005efe:	e04f      	b.n	8005fa0 <HAL_I2C_Init+0x1c4>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d111      	bne.n	8005f2c <HAL_I2C_Init+0x150>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	1e58      	subs	r0, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6859      	ldr	r1, [r3, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	440b      	add	r3, r1
 8005f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bf0c      	ite	eq
 8005f24:	2301      	moveq	r3, #1
 8005f26:	2300      	movne	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	e012      	b.n	8005f52 <HAL_I2C_Init+0x176>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	1e58      	subs	r0, r3, #1
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6859      	ldr	r1, [r3, #4]
 8005f34:	460b      	mov	r3, r1
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	440b      	add	r3, r1
 8005f3a:	0099      	lsls	r1, r3, #2
 8005f3c:	440b      	add	r3, r1
 8005f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f42:	3301      	adds	r3, #1
 8005f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2301      	moveq	r3, #1
 8005f4e:	2300      	movne	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <HAL_I2C_Init+0x17e>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e022      	b.n	8005fa0 <HAL_I2C_Init+0x1c4>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10e      	bne.n	8005f80 <HAL_I2C_Init+0x1a4>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	1e58      	subs	r0, r3, #1
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6859      	ldr	r1, [r3, #4]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	440b      	add	r3, r1
 8005f70:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f74:	3301      	adds	r3, #1
 8005f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f7e:	e00f      	b.n	8005fa0 <HAL_I2C_Init+0x1c4>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	1e58      	subs	r0, r3, #1
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6859      	ldr	r1, [r3, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	0099      	lsls	r1, r3, #2
 8005f90:	440b      	add	r3, r1
 8005f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f96:	3301      	adds	r3, #1
 8005f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	6809      	ldr	r1, [r1, #0]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69da      	ldr	r2, [r3, #28]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005fce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6911      	ldr	r1, [r2, #16]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	68d2      	ldr	r2, [r2, #12]
 8005fda:	4311      	orrs	r1, r2
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6812      	ldr	r2, [r2, #0]
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	695a      	ldr	r2, [r3, #20]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2220      	movs	r2, #32
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	000186a0 	.word	0x000186a0
 800603c:	001e847f 	.word	0x001e847f
 8006040:	003d08ff 	.word	0x003d08ff
 8006044:	431bde83 	.word	0x431bde83
 8006048:	10624dd3 	.word	0x10624dd3

0800604c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af02      	add	r7, sp, #8
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	607a      	str	r2, [r7, #4]
 8006056:	461a      	mov	r2, r3
 8006058:	460b      	mov	r3, r1
 800605a:	817b      	strh	r3, [r7, #10]
 800605c:	4613      	mov	r3, r2
 800605e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006060:	f7fe fd6a 	bl	8004b38 <HAL_GetTick>
 8006064:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b20      	cmp	r3, #32
 8006070:	f040 80e0 	bne.w	8006234 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	2319      	movs	r3, #25
 800607a:	2201      	movs	r2, #1
 800607c:	4970      	ldr	r1, [pc, #448]	; (8006240 <HAL_I2C_Master_Transmit+0x1f4>)
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f001 ffc2 	bl	8008008 <I2C_WaitOnFlagUntilTimeout>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800608a:	2302      	movs	r3, #2
 800608c:	e0d3      	b.n	8006236 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <HAL_I2C_Master_Transmit+0x50>
 8006098:	2302      	movs	r3, #2
 800609a:	e0cc      	b.n	8006236 <HAL_I2C_Master_Transmit+0x1ea>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d007      	beq.n	80060c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f042 0201 	orr.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2221      	movs	r2, #33	; 0x21
 80060d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2210      	movs	r2, #16
 80060de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	893a      	ldrh	r2, [r7, #8]
 80060f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4a50      	ldr	r2, [pc, #320]	; (8006244 <HAL_I2C_Master_Transmit+0x1f8>)
 8006102:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006104:	8979      	ldrh	r1, [r7, #10]
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	6a3a      	ldr	r2, [r7, #32]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f001 fd6a 	bl	8007be4 <I2C_MasterRequestWrite>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e08d      	b.n	8006236 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800611a:	2300      	movs	r3, #0
 800611c:	613b      	str	r3, [r7, #16]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	613b      	str	r3, [r7, #16]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006130:	e066      	b.n	8006200 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	6a39      	ldr	r1, [r7, #32]
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f002 f83c 	bl	80081b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00d      	beq.n	800615e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	2b04      	cmp	r3, #4
 8006148:	d107      	bne.n	800615a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006158:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e06b      	b.n	8006236 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	781a      	ldrb	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006178:	b29b      	uxth	r3, r3
 800617a:	3b01      	subs	r3, #1
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006186:	3b01      	subs	r3, #1
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	2b04      	cmp	r3, #4
 800619a:	d11b      	bne.n	80061d4 <HAL_I2C_Master_Transmit+0x188>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d017      	beq.n	80061d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	781a      	ldrb	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061be:	b29b      	uxth	r3, r3
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	6a39      	ldr	r1, [r7, #32]
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f002 f82c 	bl	8008236 <I2C_WaitOnBTFFlagUntilTimeout>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00d      	beq.n	8006200 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d107      	bne.n	80061fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e01a      	b.n	8006236 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006204:	2b00      	cmp	r3, #0
 8006206:	d194      	bne.n	8006132 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006230:	2300      	movs	r3, #0
 8006232:	e000      	b.n	8006236 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006234:	2302      	movs	r3, #2
  }
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	00100002 	.word	0x00100002
 8006244:	ffff0000 	.word	0xffff0000

08006248 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08c      	sub	sp, #48	; 0x30
 800624c:	af02      	add	r7, sp, #8
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	4608      	mov	r0, r1
 8006252:	4611      	mov	r1, r2
 8006254:	461a      	mov	r2, r3
 8006256:	4603      	mov	r3, r0
 8006258:	817b      	strh	r3, [r7, #10]
 800625a:	460b      	mov	r3, r1
 800625c:	813b      	strh	r3, [r7, #8]
 800625e:	4613      	mov	r3, r2
 8006260:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006262:	f7fe fc69 	bl	8004b38 <HAL_GetTick>
 8006266:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b20      	cmp	r3, #32
 8006272:	f040 8208 	bne.w	8006686 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	2319      	movs	r3, #25
 800627c:	2201      	movs	r2, #1
 800627e:	497b      	ldr	r1, [pc, #492]	; (800646c <HAL_I2C_Mem_Read+0x224>)
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f001 fec1 	bl	8008008 <I2C_WaitOnFlagUntilTimeout>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800628c:	2302      	movs	r3, #2
 800628e:	e1fb      	b.n	8006688 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006296:	2b01      	cmp	r3, #1
 8006298:	d101      	bne.n	800629e <HAL_I2C_Mem_Read+0x56>
 800629a:	2302      	movs	r3, #2
 800629c:	e1f4      	b.n	8006688 <HAL_I2C_Mem_Read+0x440>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d007      	beq.n	80062c4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0201 	orr.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2222      	movs	r2, #34	; 0x22
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2240      	movs	r2, #64	; 0x40
 80062e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80062f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4a5b      	ldr	r2, [pc, #364]	; (8006470 <HAL_I2C_Mem_Read+0x228>)
 8006304:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006306:	88f8      	ldrh	r0, [r7, #6]
 8006308:	893a      	ldrh	r2, [r7, #8]
 800630a:	8979      	ldrh	r1, [r7, #10]
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	9301      	str	r3, [sp, #4]
 8006310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	4603      	mov	r3, r0
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f001 fce6 	bl	8007ce8 <I2C_RequestMemoryRead>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e1b0      	b.n	8006688 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800632a:	2b00      	cmp	r3, #0
 800632c:	d113      	bne.n	8006356 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800632e:	2300      	movs	r3, #0
 8006330:	623b      	str	r3, [r7, #32]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	623b      	str	r3, [r7, #32]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	623b      	str	r3, [r7, #32]
 8006342:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	e184      	b.n	8006660 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800635a:	2b01      	cmp	r3, #1
 800635c:	d11b      	bne.n	8006396 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800636c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800636e:	2300      	movs	r3, #0
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	61fb      	str	r3, [r7, #28]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	61fb      	str	r3, [r7, #28]
 8006382:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	e164      	b.n	8006660 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800639a:	2b02      	cmp	r3, #2
 800639c:	d11b      	bne.n	80063d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063be:	2300      	movs	r3, #0
 80063c0:	61bb      	str	r3, [r7, #24]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	61bb      	str	r3, [r7, #24]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	61bb      	str	r3, [r7, #24]
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	e144      	b.n	8006660 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063d6:	2300      	movs	r3, #0
 80063d8:	617b      	str	r3, [r7, #20]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	617b      	str	r3, [r7, #20]
 80063ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80063ec:	e138      	b.n	8006660 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	f200 80f1 	bhi.w	80065da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d123      	bne.n	8006448 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006402:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f001 ff89 	bl	800831c <I2C_WaitOnRXNEFlagUntilTimeout>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e139      	b.n	8006688 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643c:	b29b      	uxth	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006446:	e10b      	b.n	8006660 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800644c:	2b02      	cmp	r3, #2
 800644e:	d14e      	bne.n	80064ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006456:	2200      	movs	r2, #0
 8006458:	4906      	ldr	r1, [pc, #24]	; (8006474 <HAL_I2C_Mem_Read+0x22c>)
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f001 fdd4 	bl	8008008 <I2C_WaitOnFlagUntilTimeout>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d008      	beq.n	8006478 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e10e      	b.n	8006688 <HAL_I2C_Mem_Read+0x440>
 800646a:	bf00      	nop
 800646c:	00100002 	.word	0x00100002
 8006470:	ffff0000 	.word	0xffff0000
 8006474:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006486:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	691a      	ldr	r2, [r3, #16]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	691a      	ldr	r2, [r3, #16]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d6:	3b01      	subs	r3, #1
 80064d8:	b29a      	uxth	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	3b01      	subs	r3, #1
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064ec:	e0b8      	b.n	8006660 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f4:	2200      	movs	r2, #0
 80064f6:	4966      	ldr	r1, [pc, #408]	; (8006690 <HAL_I2C_Mem_Read+0x448>)
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f001 fd85 	bl	8008008 <I2C_WaitOnFlagUntilTimeout>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e0bf      	b.n	8006688 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006516:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	691a      	ldr	r2, [r3, #16]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006522:	b2d2      	uxtb	r2, r2
 8006524:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652a:	1c5a      	adds	r2, r3, #1
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006534:	3b01      	subs	r3, #1
 8006536:	b29a      	uxth	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006540:	b29b      	uxth	r3, r3
 8006542:	3b01      	subs	r3, #1
 8006544:	b29a      	uxth	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006550:	2200      	movs	r2, #0
 8006552:	494f      	ldr	r1, [pc, #316]	; (8006690 <HAL_I2C_Mem_Read+0x448>)
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f001 fd57 	bl	8008008 <I2C_WaitOnFlagUntilTimeout>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e091      	b.n	8006688 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006572:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691a      	ldr	r2, [r3, #16]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006590:	3b01      	subs	r3, #1
 8006592:	b29a      	uxth	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659c:	b29b      	uxth	r3, r3
 800659e:	3b01      	subs	r3, #1
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	691a      	ldr	r2, [r3, #16]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	b2d2      	uxtb	r2, r2
 80065b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	3b01      	subs	r3, #1
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065d8:	e042      	b.n	8006660 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f001 fe9c 	bl	800831c <I2C_WaitOnRXNEFlagUntilTimeout>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e04c      	b.n	8006688 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	691a      	ldr	r2, [r3, #16]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800660a:	3b01      	subs	r3, #1
 800660c:	b29a      	uxth	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006616:	b29b      	uxth	r3, r3
 8006618:	3b01      	subs	r3, #1
 800661a:	b29a      	uxth	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	f003 0304 	and.w	r3, r3, #4
 800662a:	2b04      	cmp	r3, #4
 800662c:	d118      	bne.n	8006660 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	691a      	ldr	r2, [r3, #16]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664a:	3b01      	subs	r3, #1
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006656:	b29b      	uxth	r3, r3
 8006658:	3b01      	subs	r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006664:	2b00      	cmp	r3, #0
 8006666:	f47f aec2 	bne.w	80063ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2220      	movs	r2, #32
 800666e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	e000      	b.n	8006688 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006686:	2302      	movs	r3, #2
  }
}
 8006688:	4618      	mov	r0, r3
 800668a:	3728      	adds	r7, #40	; 0x28
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	00010004 	.word	0x00010004

08006694 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066bc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80066be:	7bfb      	ldrb	r3, [r7, #15]
 80066c0:	2b10      	cmp	r3, #16
 80066c2:	d003      	beq.n	80066cc <HAL_I2C_EV_IRQHandler+0x38>
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	2b40      	cmp	r3, #64	; 0x40
 80066c8:	f040 80bd 	bne.w	8006846 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10d      	bne.n	8006702 <HAL_I2C_EV_IRQHandler+0x6e>
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80066ec:	d003      	beq.n	80066f6 <HAL_I2C_EV_IRQHandler+0x62>
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80066f4:	d101      	bne.n	80066fa <HAL_I2C_EV_IRQHandler+0x66>
 80066f6:	2301      	movs	r3, #1
 80066f8:	e000      	b.n	80066fc <HAL_I2C_EV_IRQHandler+0x68>
 80066fa:	2300      	movs	r3, #0
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	f000 812e 	beq.w	800695e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00c      	beq.n	8006726 <HAL_I2C_EV_IRQHandler+0x92>
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	0a5b      	lsrs	r3, r3, #9
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	2b00      	cmp	r3, #0
 8006716:	d006      	beq.n	8006726 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f001 fe84 	bl	8008426 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fcbb 	bl	800709a <I2C_Master_SB>
 8006724:	e08e      	b.n	8006844 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	08db      	lsrs	r3, r3, #3
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d009      	beq.n	8006746 <HAL_I2C_EV_IRQHandler+0xb2>
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	0a5b      	lsrs	r3, r3, #9
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fd31 	bl	80071a6 <I2C_Master_ADD10>
 8006744:	e07e      	b.n	8006844 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	085b      	lsrs	r3, r3, #1
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	d009      	beq.n	8006766 <HAL_I2C_EV_IRQHandler+0xd2>
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	0a5b      	lsrs	r3, r3, #9
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fd4b 	bl	80071fa <I2C_Master_ADDR>
 8006764:	e06e      	b.n	8006844 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	089b      	lsrs	r3, r3, #2
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b00      	cmp	r3, #0
 8006770:	d037      	beq.n	80067e2 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800677c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006780:	f000 80ef 	beq.w	8006962 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	09db      	lsrs	r3, r3, #7
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00f      	beq.n	80067b0 <HAL_I2C_EV_IRQHandler+0x11c>
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	0a9b      	lsrs	r3, r3, #10
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	d009      	beq.n	80067b0 <HAL_I2C_EV_IRQHandler+0x11c>
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	089b      	lsrs	r3, r3, #2
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d103      	bne.n	80067b0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f948 	bl	8006a3e <I2C_MasterTransmit_TXE>
 80067ae:	e049      	b.n	8006844 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	089b      	lsrs	r3, r3, #2
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 80d2 	beq.w	8006962 <HAL_I2C_EV_IRQHandler+0x2ce>
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	0a5b      	lsrs	r3, r3, #9
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 80cb 	beq.w	8006962 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
 80067ce:	2b10      	cmp	r3, #16
 80067d0:	d103      	bne.n	80067da <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f9cf 	bl	8006b76 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067d8:	e0c3      	b.n	8006962 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fa33 	bl	8006c46 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067e0:	e0bf      	b.n	8006962 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067f0:	f000 80b7 	beq.w	8006962 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	099b      	lsrs	r3, r3, #6
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00f      	beq.n	8006820 <HAL_I2C_EV_IRQHandler+0x18c>
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	0a9b      	lsrs	r3, r3, #10
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b00      	cmp	r3, #0
 800680a:	d009      	beq.n	8006820 <HAL_I2C_EV_IRQHandler+0x18c>
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	089b      	lsrs	r3, r3, #2
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	d103      	bne.n	8006820 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 faa3 	bl	8006d64 <I2C_MasterReceive_RXNE>
 800681e:	e011      	b.n	8006844 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	089b      	lsrs	r3, r3, #2
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 809a 	beq.w	8006962 <HAL_I2C_EV_IRQHandler+0x2ce>
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	0a5b      	lsrs	r3, r3, #9
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 8093 	beq.w	8006962 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fb42 	bl	8006ec6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006842:	e08e      	b.n	8006962 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006844:	e08d      	b.n	8006962 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	2b00      	cmp	r3, #0
 800684c:	d004      	beq.n	8006858 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	61fb      	str	r3, [r7, #28]
 8006856:	e007      	b.n	8006868 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	085b      	lsrs	r3, r3, #1
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d012      	beq.n	800689a <HAL_I2C_EV_IRQHandler+0x206>
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	0a5b      	lsrs	r3, r3, #9
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00c      	beq.n	800689a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006884:	2b00      	cmp	r3, #0
 8006886:	d003      	beq.n	8006890 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006890:	69b9      	ldr	r1, [r7, #24]
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 ff00 	bl	8007698 <I2C_Slave_ADDR>
 8006898:	e066      	b.n	8006968 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	091b      	lsrs	r3, r3, #4
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d009      	beq.n	80068ba <HAL_I2C_EV_IRQHandler+0x226>
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	0a5b      	lsrs	r3, r3, #9
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 ff34 	bl	8007720 <I2C_Slave_STOPF>
 80068b8:	e056      	b.n	8006968 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80068ba:	7bbb      	ldrb	r3, [r7, #14]
 80068bc:	2b21      	cmp	r3, #33	; 0x21
 80068be:	d002      	beq.n	80068c6 <HAL_I2C_EV_IRQHandler+0x232>
 80068c0:	7bbb      	ldrb	r3, [r7, #14]
 80068c2:	2b29      	cmp	r3, #41	; 0x29
 80068c4:	d125      	bne.n	8006912 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	09db      	lsrs	r3, r3, #7
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00f      	beq.n	80068f2 <HAL_I2C_EV_IRQHandler+0x25e>
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	0a9b      	lsrs	r3, r3, #10
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d009      	beq.n	80068f2 <HAL_I2C_EV_IRQHandler+0x25e>
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	089b      	lsrs	r3, r3, #2
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d103      	bne.n	80068f2 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fe16 	bl	800751c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068f0:	e039      	b.n	8006966 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	089b      	lsrs	r3, r3, #2
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d033      	beq.n	8006966 <HAL_I2C_EV_IRQHandler+0x2d2>
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	0a5b      	lsrs	r3, r3, #9
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d02d      	beq.n	8006966 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fe43 	bl	8007596 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006910:	e029      	b.n	8006966 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	099b      	lsrs	r3, r3, #6
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00f      	beq.n	800693e <HAL_I2C_EV_IRQHandler+0x2aa>
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	0a9b      	lsrs	r3, r3, #10
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d009      	beq.n	800693e <HAL_I2C_EV_IRQHandler+0x2aa>
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	089b      	lsrs	r3, r3, #2
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d103      	bne.n	800693e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fe4e 	bl	80075d8 <I2C_SlaveReceive_RXNE>
 800693c:	e014      	b.n	8006968 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	089b      	lsrs	r3, r3, #2
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00e      	beq.n	8006968 <HAL_I2C_EV_IRQHandler+0x2d4>
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	0a5b      	lsrs	r3, r3, #9
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d008      	beq.n	8006968 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fe7c 	bl	8007654 <I2C_SlaveReceive_BTF>
 800695c:	e004      	b.n	8006968 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800695e:	bf00      	nop
 8006960:	e002      	b.n	8006968 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006962:	bf00      	nop
 8006964:	e000      	b.n	8006968 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006966:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006968:	3720      	adds	r7, #32
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b083      	sub	sp, #12
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80069b2:	bf00      	nop
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	460b      	mov	r3, r1
 80069c8:	70fb      	strb	r3, [r7, #3]
 80069ca:	4613      	mov	r3, r2
 80069cc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80069e2:	bf00      	nop
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006a0a:	bf00      	nop
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b084      	sub	sp, #16
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a4c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a54:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d150      	bne.n	8006b06 <I2C_MasterTransmit_TXE+0xc8>
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	2b21      	cmp	r3, #33	; 0x21
 8006a68:	d14d      	bne.n	8006b06 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	d01d      	beq.n	8006aac <I2C_MasterTransmit_TXE+0x6e>
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2b20      	cmp	r3, #32
 8006a74:	d01a      	beq.n	8006aac <I2C_MasterTransmit_TXE+0x6e>
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a7c:	d016      	beq.n	8006aac <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a8c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2211      	movs	r2, #17
 8006a92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7ff ff62 	bl	800696e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006aaa:	e060      	b.n	8006b6e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006aba:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aca:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b40      	cmp	r3, #64	; 0x40
 8006ae4:	d107      	bne.n	8006af6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7ff ff7d 	bl	80069ee <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006af4:	e03b      	b.n	8006b6e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7ff ff35 	bl	800696e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b04:	e033      	b.n	8006b6e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	2b21      	cmp	r3, #33	; 0x21
 8006b0a:	d005      	beq.n	8006b18 <I2C_MasterTransmit_TXE+0xda>
 8006b0c:	7bbb      	ldrb	r3, [r7, #14]
 8006b0e:	2b40      	cmp	r3, #64	; 0x40
 8006b10:	d12d      	bne.n	8006b6e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
 8006b14:	2b22      	cmp	r3, #34	; 0x22
 8006b16:	d12a      	bne.n	8006b6e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d108      	bne.n	8006b34 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b30:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006b32:	e01c      	b.n	8006b6e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b40      	cmp	r3, #64	; 0x40
 8006b3e:	d103      	bne.n	8006b48 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f880 	bl	8006c46 <I2C_MemoryTransmit_TXE_BTF>
}
 8006b46:	e012      	b.n	8006b6e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	781a      	ldrb	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b58:	1c5a      	adds	r2, r3, #1
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	3b01      	subs	r3, #1
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006b6c:	e7ff      	b.n	8006b6e <I2C_MasterTransmit_TXE+0x130>
 8006b6e:	bf00      	nop
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b82:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b21      	cmp	r3, #33	; 0x21
 8006b8e:	d156      	bne.n	8006c3e <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d012      	beq.n	8006bc0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	781a      	ldrb	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006bbe:	e03e      	b.n	8006c3e <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2b08      	cmp	r3, #8
 8006bc4:	d01d      	beq.n	8006c02 <I2C_MasterTransmit_BTF+0x8c>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2b20      	cmp	r3, #32
 8006bca:	d01a      	beq.n	8006c02 <I2C_MasterTransmit_BTF+0x8c>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006bd2:	d016      	beq.n	8006c02 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006be2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2211      	movs	r2, #17
 8006be8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff feb7 	bl	800696e <HAL_I2C_MasterTxCpltCallback>
}
 8006c00:	e01d      	b.n	8006c3e <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c10:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c20:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7ff fe98 	bl	800696e <HAL_I2C_MasterTxCpltCallback>
}
 8006c3e:	bf00      	nop
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b084      	sub	sp, #16
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c54:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d11d      	bne.n	8006c9a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d10b      	bne.n	8006c7e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c76:	1c9a      	adds	r2, r3, #2
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006c7c:	e06e      	b.n	8006d5c <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	121b      	asrs	r3, r3, #8
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c92:	1c5a      	adds	r2, r3, #1
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006c98:	e060      	b.n	8006d5c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d10b      	bne.n	8006cba <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006cb8:	e050      	b.n	8006d5c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d14c      	bne.n	8006d5c <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
 8006cc4:	2b22      	cmp	r3, #34	; 0x22
 8006cc6:	d108      	bne.n	8006cda <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cd6:	601a      	str	r2, [r3, #0]
}
 8006cd8:	e040      	b.n	8006d5c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d015      	beq.n	8006d10 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
 8006ce6:	2b21      	cmp	r3, #33	; 0x21
 8006ce8:	d112      	bne.n	8006d10 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	781a      	ldrb	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	3b01      	subs	r3, #1
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006d0e:	e025      	b.n	8006d5c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d120      	bne.n	8006d5c <I2C_MemoryTransmit_TXE_BTF+0x116>
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
 8006d1c:	2b21      	cmp	r3, #33	; 0x21
 8006d1e:	d11d      	bne.n	8006d5c <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d2e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d3e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7ff fe49 	bl	80069ee <HAL_I2C_MemTxCpltCallback>
}
 8006d5c:	bf00      	nop
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b22      	cmp	r3, #34	; 0x22
 8006d76:	f040 80a2 	bne.w	8006ebe <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d921      	bls.n	8006dcc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	691a      	ldr	r2, [r3, #16]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	b2d2      	uxtb	r2, r2
 8006d94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	3b01      	subs	r3, #1
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	f040 8082 	bne.w	8006ebe <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dc8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8006dca:	e078      	b.n	8006ebe <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d074      	beq.n	8006ebe <I2C_MasterReceive_RXNE+0x15a>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d002      	beq.n	8006de0 <I2C_MasterReceive_RXNE+0x7c>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d16e      	bne.n	8006ebe <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f001 fa69 	bl	80082b8 <I2C_WaitOnSTOPRequestThroughIT>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d142      	bne.n	8006e72 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dfa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e0a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	691a      	ldr	r2, [r3, #16]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	b2d2      	uxtb	r2, r2
 8006e18:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1e:	1c5a      	adds	r2, r3, #1
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2220      	movs	r2, #32
 8006e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b40      	cmp	r3, #64	; 0x40
 8006e44:	d10a      	bne.n	8006e5c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7ff fdd4 	bl	8006a02 <HAL_I2C_MemRxCpltCallback>
}
 8006e5a:	e030      	b.n	8006ebe <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2212      	movs	r2, #18
 8006e68:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff fd89 	bl	8006982 <HAL_I2C_MasterRxCpltCallback>
}
 8006e70:	e025      	b.n	8006ebe <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e80:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	691a      	ldr	r2, [r3, #16]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	b2d2      	uxtb	r2, r2
 8006e8e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7ff fdac 	bl	8006a16 <HAL_I2C_ErrorCallback>
}
 8006ebe:	bf00      	nop
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	d11b      	bne.n	8006f16 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eec:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	691a      	ldr	r2, [r3, #16]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	b2d2      	uxtb	r2, r2
 8006efa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006f14:	e0bd      	b.n	8007092 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d129      	bne.n	8006f74 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f2e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2b04      	cmp	r3, #4
 8006f34:	d00a      	beq.n	8006f4c <I2C_MasterReceive_BTF+0x86>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d007      	beq.n	8006f4c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f4a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	691a      	ldr	r2, [r3, #16]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	b2d2      	uxtb	r2, r2
 8006f58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	1c5a      	adds	r2, r3, #1
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f72:	e08e      	b.n	8007092 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d176      	bne.n	800706c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d002      	beq.n	8006f8a <I2C_MasterReceive_BTF+0xc4>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2b10      	cmp	r3, #16
 8006f88:	d108      	bne.n	8006f9c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	e019      	b.n	8006fd0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2b04      	cmp	r3, #4
 8006fa0:	d002      	beq.n	8006fa8 <I2C_MasterReceive_BTF+0xe2>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d108      	bne.n	8006fba <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	e00a      	b.n	8006fd0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b10      	cmp	r3, #16
 8006fbe:	d007      	beq.n	8006fd0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	691a      	ldr	r2, [r3, #16]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fda:	b2d2      	uxtb	r2, r2
 8006fdc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe2:	1c5a      	adds	r2, r3, #1
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	691a      	ldr	r2, [r3, #16]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	b2d2      	uxtb	r2, r2
 8007002:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007012:	b29b      	uxth	r3, r3
 8007014:	3b01      	subs	r3, #1
 8007016:	b29a      	uxth	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800702a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2220      	movs	r2, #32
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b40      	cmp	r3, #64	; 0x40
 800703e:	d10a      	bne.n	8007056 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7ff fcd7 	bl	8006a02 <HAL_I2C_MemRxCpltCallback>
}
 8007054:	e01d      	b.n	8007092 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2212      	movs	r2, #18
 8007062:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f7ff fc8c 	bl	8006982 <HAL_I2C_MasterRxCpltCallback>
}
 800706a:	e012      	b.n	8007092 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	691a      	ldr	r2, [r3, #16]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007076:	b2d2      	uxtb	r2, r2
 8007078:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007088:	b29b      	uxth	r3, r3
 800708a:	3b01      	subs	r3, #1
 800708c:	b29a      	uxth	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007092:	bf00      	nop
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b40      	cmp	r3, #64	; 0x40
 80070ac:	d117      	bne.n	80070de <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d109      	bne.n	80070ca <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	461a      	mov	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070c6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80070c8:	e067      	b.n	800719a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	f043 0301 	orr.w	r3, r3, #1
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	611a      	str	r2, [r3, #16]
}
 80070dc:	e05d      	b.n	800719a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070e6:	d133      	bne.n	8007150 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b21      	cmp	r3, #33	; 0x21
 80070f2:	d109      	bne.n	8007108 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	461a      	mov	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007104:	611a      	str	r2, [r3, #16]
 8007106:	e008      	b.n	800711a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710c:	b2db      	uxtb	r3, r3
 800710e:	f043 0301 	orr.w	r3, r3, #1
 8007112:	b2da      	uxtb	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711e:	2b00      	cmp	r3, #0
 8007120:	d004      	beq.n	800712c <I2C_Master_SB+0x92>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007128:	2b00      	cmp	r3, #0
 800712a:	d108      	bne.n	800713e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007130:	2b00      	cmp	r3, #0
 8007132:	d032      	beq.n	800719a <I2C_Master_SB+0x100>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713a:	2b00      	cmp	r3, #0
 800713c:	d02d      	beq.n	800719a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800714c:	605a      	str	r2, [r3, #4]
}
 800714e:	e024      	b.n	800719a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10e      	bne.n	8007176 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715c:	b29b      	uxth	r3, r3
 800715e:	11db      	asrs	r3, r3, #7
 8007160:	b2db      	uxtb	r3, r3
 8007162:	f003 0306 	and.w	r3, r3, #6
 8007166:	b2db      	uxtb	r3, r3
 8007168:	f063 030f 	orn	r3, r3, #15
 800716c:	b2da      	uxtb	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	611a      	str	r2, [r3, #16]
}
 8007174:	e011      	b.n	800719a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800717a:	2b01      	cmp	r3, #1
 800717c:	d10d      	bne.n	800719a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007182:	b29b      	uxth	r3, r3
 8007184:	11db      	asrs	r3, r3, #7
 8007186:	b2db      	uxtb	r3, r3
 8007188:	f003 0306 	and.w	r3, r3, #6
 800718c:	b2db      	uxtb	r3, r3
 800718e:	f063 030e 	orn	r3, r3, #14
 8007192:	b2da      	uxtb	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	611a      	str	r2, [r3, #16]
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b083      	sub	sp, #12
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d103      	bne.n	80071ca <I2C_Master_ADD10+0x24>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d011      	beq.n	80071ee <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d104      	bne.n	80071de <I2C_Master_ADD10+0x38>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d007      	beq.n	80071ee <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071ec:	605a      	str	r2, [r3, #4]
    }
  }
}
 80071ee:	bf00      	nop
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b091      	sub	sp, #68	; 0x44
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007208:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007210:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b22      	cmp	r3, #34	; 0x22
 8007222:	f040 8169 	bne.w	80074f8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10f      	bne.n	800724e <I2C_Master_ADDR+0x54>
 800722e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007232:	2b40      	cmp	r3, #64	; 0x40
 8007234:	d10b      	bne.n	800724e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007236:	2300      	movs	r3, #0
 8007238:	633b      	str	r3, [r7, #48]	; 0x30
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	633b      	str	r3, [r7, #48]	; 0x30
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	633b      	str	r3, [r7, #48]	; 0x30
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	e160      	b.n	8007510 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007252:	2b00      	cmp	r3, #0
 8007254:	d11d      	bne.n	8007292 <I2C_Master_ADDR+0x98>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800725e:	d118      	bne.n	8007292 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007260:	2300      	movs	r3, #0
 8007262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007284:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800728a:	1c5a      	adds	r2, r3, #1
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	651a      	str	r2, [r3, #80]	; 0x50
 8007290:	e13e      	b.n	8007510 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007296:	b29b      	uxth	r3, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d113      	bne.n	80072c4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800729c:	2300      	movs	r3, #0
 800729e:	62bb      	str	r3, [r7, #40]	; 0x28
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80072b0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	e115      	b.n	80074f0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	f040 808a 	bne.w	80073e4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80072d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80072d6:	d137      	bne.n	8007348 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072e6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072f6:	d113      	bne.n	8007320 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007306:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007308:	2300      	movs	r3, #0
 800730a:	627b      	str	r3, [r7, #36]	; 0x24
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	627b      	str	r3, [r7, #36]	; 0x24
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	627b      	str	r3, [r7, #36]	; 0x24
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	e0e7      	b.n	80074f0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007320:	2300      	movs	r3, #0
 8007322:	623b      	str	r3, [r7, #32]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	623b      	str	r3, [r7, #32]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	623b      	str	r3, [r7, #32]
 8007334:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007344:	601a      	str	r2, [r3, #0]
 8007346:	e0d3      	b.n	80074f0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734a:	2b08      	cmp	r3, #8
 800734c:	d02e      	beq.n	80073ac <I2C_Master_ADDR+0x1b2>
 800734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007350:	2b20      	cmp	r3, #32
 8007352:	d02b      	beq.n	80073ac <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007356:	2b12      	cmp	r3, #18
 8007358:	d102      	bne.n	8007360 <I2C_Master_ADDR+0x166>
 800735a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735c:	2b01      	cmp	r3, #1
 800735e:	d125      	bne.n	80073ac <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007362:	2b04      	cmp	r3, #4
 8007364:	d00e      	beq.n	8007384 <I2C_Master_ADDR+0x18a>
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	2b02      	cmp	r3, #2
 800736a:	d00b      	beq.n	8007384 <I2C_Master_ADDR+0x18a>
 800736c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736e:	2b10      	cmp	r3, #16
 8007370:	d008      	beq.n	8007384 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	e007      	b.n	8007394 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007392:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007394:	2300      	movs	r3, #0
 8007396:	61fb      	str	r3, [r7, #28]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	61fb      	str	r3, [r7, #28]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	61fb      	str	r3, [r7, #28]
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	e0a1      	b.n	80074f0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073bc:	2300      	movs	r3, #0
 80073be:	61bb      	str	r3, [r7, #24]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	61bb      	str	r3, [r7, #24]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	61bb      	str	r3, [r7, #24]
 80073d0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073e0:	601a      	str	r2, [r3, #0]
 80073e2:	e085      	b.n	80074f0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d14d      	bne.n	800748a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80073ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f0:	2b04      	cmp	r3, #4
 80073f2:	d016      	beq.n	8007422 <I2C_Master_ADDR+0x228>
 80073f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d013      	beq.n	8007422 <I2C_Master_ADDR+0x228>
 80073fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fc:	2b10      	cmp	r3, #16
 80073fe:	d010      	beq.n	8007422 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800740e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	e007      	b.n	8007432 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007430:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800743c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007440:	d117      	bne.n	8007472 <I2C_Master_ADDR+0x278>
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007448:	d00b      	beq.n	8007462 <I2C_Master_ADDR+0x268>
 800744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744c:	2b01      	cmp	r3, #1
 800744e:	d008      	beq.n	8007462 <I2C_Master_ADDR+0x268>
 8007450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007452:	2b08      	cmp	r3, #8
 8007454:	d005      	beq.n	8007462 <I2C_Master_ADDR+0x268>
 8007456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007458:	2b10      	cmp	r3, #16
 800745a:	d002      	beq.n	8007462 <I2C_Master_ADDR+0x268>
 800745c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745e:	2b20      	cmp	r3, #32
 8007460:	d107      	bne.n	8007472 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007470:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007472:	2300      	movs	r3, #0
 8007474:	617b      	str	r3, [r7, #20]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	617b      	str	r3, [r7, #20]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	617b      	str	r3, [r7, #20]
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	e032      	b.n	80074f0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007498:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074a8:	d117      	bne.n	80074da <I2C_Master_ADDR+0x2e0>
 80074aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074b0:	d00b      	beq.n	80074ca <I2C_Master_ADDR+0x2d0>
 80074b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d008      	beq.n	80074ca <I2C_Master_ADDR+0x2d0>
 80074b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ba:	2b08      	cmp	r3, #8
 80074bc:	d005      	beq.n	80074ca <I2C_Master_ADDR+0x2d0>
 80074be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c0:	2b10      	cmp	r3, #16
 80074c2:	d002      	beq.n	80074ca <I2C_Master_ADDR+0x2d0>
 80074c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c6:	2b20      	cmp	r3, #32
 80074c8:	d107      	bne.n	80074da <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074d8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074da:	2300      	movs	r3, #0
 80074dc:	613b      	str	r3, [r7, #16]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	613b      	str	r3, [r7, #16]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	613b      	str	r3, [r7, #16]
 80074ee:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80074f6:	e00b      	b.n	8007510 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074f8:	2300      	movs	r3, #0
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	68fb      	ldr	r3, [r7, #12]
}
 800750e:	e7ff      	b.n	8007510 <I2C_Master_ADDR+0x316>
 8007510:	bf00      	nop
 8007512:	3744      	adds	r7, #68	; 0x44
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800752a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007530:	b29b      	uxth	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d02b      	beq.n	800758e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	781a      	ldrb	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007550:	b29b      	uxth	r3, r3
 8007552:	3b01      	subs	r3, #1
 8007554:	b29a      	uxth	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755e:	b29b      	uxth	r3, r3
 8007560:	2b00      	cmp	r3, #0
 8007562:	d114      	bne.n	800758e <I2C_SlaveTransmit_TXE+0x72>
 8007564:	7bfb      	ldrb	r3, [r7, #15]
 8007566:	2b29      	cmp	r3, #41	; 0x29
 8007568:	d111      	bne.n	800758e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007578:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2221      	movs	r2, #33	; 0x21
 800757e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2228      	movs	r2, #40	; 0x28
 8007584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7ff fa04 	bl	8006996 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800758e:	bf00      	nop
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007596:	b480      	push	{r7}
 8007598:	b083      	sub	sp, #12
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d011      	beq.n	80075cc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	781a      	ldrb	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	1c5a      	adds	r2, r3, #1
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d02c      	beq.n	800764c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	691a      	ldr	r2, [r3, #16]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	b2d2      	uxtb	r2, r2
 80075fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	1c5a      	adds	r2, r3, #1
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800760e:	b29b      	uxth	r3, r3
 8007610:	3b01      	subs	r3, #1
 8007612:	b29a      	uxth	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761c:	b29b      	uxth	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d114      	bne.n	800764c <I2C_SlaveReceive_RXNE+0x74>
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	2b2a      	cmp	r3, #42	; 0x2a
 8007626:	d111      	bne.n	800764c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007636:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2222      	movs	r2, #34	; 0x22
 800763c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2228      	movs	r2, #40	; 0x28
 8007642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7ff f9af 	bl	80069aa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800764c:	bf00      	nop
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007660:	b29b      	uxth	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d012      	beq.n	800768c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	691a      	ldr	r2, [r3, #16]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	b2d2      	uxtb	r2, r2
 8007672:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	1c5a      	adds	r2, r3, #1
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007682:	b29b      	uxth	r3, r3
 8007684:	3b01      	subs	r3, #1
 8007686:	b29a      	uxth	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80076a2:	2300      	movs	r3, #0
 80076a4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80076b2:	2b28      	cmp	r3, #40	; 0x28
 80076b4:	d127      	bne.n	8007706 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076c4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	089b      	lsrs	r3, r3, #2
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80076d2:	2301      	movs	r3, #1
 80076d4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	09db      	lsrs	r3, r3, #7
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d103      	bne.n	80076ea <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	81bb      	strh	r3, [r7, #12]
 80076e8:	e002      	b.n	80076f0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80076f8:	89ba      	ldrh	r2, [r7, #12]
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	4619      	mov	r1, r3
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7ff f95d 	bl	80069be <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007704:	e008      	b.n	8007718 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f06f 0202 	mvn.w	r2, #2
 800770e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007718:	bf00      	nop
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800772e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685a      	ldr	r2, [r3, #4]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800773e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007740:	2300      	movs	r3, #0
 8007742:	60bb      	str	r3, [r7, #8]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	60bb      	str	r3, [r7, #8]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f042 0201 	orr.w	r2, r2, #1
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800776c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800777c:	d172      	bne.n	8007864 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800777e:	7bfb      	ldrb	r3, [r7, #15]
 8007780:	2b22      	cmp	r3, #34	; 0x22
 8007782:	d002      	beq.n	800778a <I2C_Slave_STOPF+0x6a>
 8007784:	7bfb      	ldrb	r3, [r7, #15]
 8007786:	2b2a      	cmp	r3, #42	; 0x2a
 8007788:	d135      	bne.n	80077f6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	b29a      	uxth	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800779c:	b29b      	uxth	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d005      	beq.n	80077ae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	f043 0204 	orr.w	r2, r3, #4
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fe f946 	bl	8005a54 <HAL_DMA_GetState>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d049      	beq.n	8007862 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d2:	4a69      	ldr	r2, [pc, #420]	; (8007978 <I2C_Slave_STOPF+0x258>)
 80077d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fe f918 	bl	8005a10 <HAL_DMA_Abort_IT>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d03d      	beq.n	8007862 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077f0:	4610      	mov	r0, r2
 80077f2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077f4:	e035      	b.n	8007862 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	b29a      	uxth	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007808:	b29b      	uxth	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d005      	beq.n	800781a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	f043 0204 	orr.w	r2, r3, #4
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685a      	ldr	r2, [r3, #4]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007828:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782e:	4618      	mov	r0, r3
 8007830:	f7fe f910 	bl	8005a54 <HAL_DMA_GetState>
 8007834:	4603      	mov	r3, r0
 8007836:	2b01      	cmp	r3, #1
 8007838:	d014      	beq.n	8007864 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800783e:	4a4e      	ldr	r2, [pc, #312]	; (8007978 <I2C_Slave_STOPF+0x258>)
 8007840:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007846:	4618      	mov	r0, r3
 8007848:	f7fe f8e2 	bl	8005a10 <HAL_DMA_Abort_IT>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d008      	beq.n	8007864 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800785c:	4610      	mov	r0, r2
 800785e:	4798      	blx	r3
 8007860:	e000      	b.n	8007864 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007862:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007868:	b29b      	uxth	r3, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d03e      	beq.n	80078ec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	695b      	ldr	r3, [r3, #20]
 8007874:	f003 0304 	and.w	r3, r3, #4
 8007878:	2b04      	cmp	r3, #4
 800787a:	d112      	bne.n	80078a2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	691a      	ldr	r2, [r3, #16]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	b2d2      	uxtb	r2, r2
 8007888:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	1c5a      	adds	r2, r3, #1
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007898:	b29b      	uxth	r3, r3
 800789a:	3b01      	subs	r3, #1
 800789c:	b29a      	uxth	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ac:	2b40      	cmp	r3, #64	; 0x40
 80078ae:	d112      	bne.n	80078d6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	691a      	ldr	r2, [r3, #16]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	b2d2      	uxtb	r2, r2
 80078bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	3b01      	subs	r3, #1
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078da:	b29b      	uxth	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d005      	beq.n	80078ec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e4:	f043 0204 	orr.w	r2, r3, #4
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d003      	beq.n	80078fc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f843 	bl	8007980 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80078fa:	e039      	b.n	8007970 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	2b2a      	cmp	r3, #42	; 0x2a
 8007900:	d109      	bne.n	8007916 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2228      	movs	r2, #40	; 0x28
 800790c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7ff f84a 	bl	80069aa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b28      	cmp	r3, #40	; 0x28
 8007920:	d111      	bne.n	8007946 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a15      	ldr	r2, [pc, #84]	; (800797c <I2C_Slave_STOPF+0x25c>)
 8007926:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2220      	movs	r2, #32
 8007932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7ff f84b 	bl	80069da <HAL_I2C_ListenCpltCallback>
}
 8007944:	e014      	b.n	8007970 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794a:	2b22      	cmp	r3, #34	; 0x22
 800794c:	d002      	beq.n	8007954 <I2C_Slave_STOPF+0x234>
 800794e:	7bfb      	ldrb	r3, [r7, #15]
 8007950:	2b22      	cmp	r3, #34	; 0x22
 8007952:	d10d      	bne.n	8007970 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2220      	movs	r2, #32
 800795e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7ff f81d 	bl	80069aa <HAL_I2C_SlaveRxCpltCallback>
}
 8007970:	bf00      	nop
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	08007eb9 	.word	0x08007eb9
 800797c:	ffff0000 	.word	0xffff0000

08007980 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800798e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007996:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	2b10      	cmp	r3, #16
 800799c:	d002      	beq.n	80079a4 <I2C_ITError+0x24>
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	2b40      	cmp	r3, #64	; 0x40
 80079a2:	d10a      	bne.n	80079ba <I2C_ITError+0x3a>
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
 80079a6:	2b22      	cmp	r3, #34	; 0x22
 80079a8:	d107      	bne.n	80079ba <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079b8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80079c0:	2b28      	cmp	r3, #40	; 0x28
 80079c2:	d107      	bne.n	80079d4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2228      	movs	r2, #40	; 0x28
 80079ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80079d2:	e015      	b.n	8007a00 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079e2:	d00a      	beq.n	80079fa <I2C_ITError+0x7a>
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
 80079e6:	2b60      	cmp	r3, #96	; 0x60
 80079e8:	d007      	beq.n	80079fa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2220      	movs	r2, #32
 80079ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a0e:	d162      	bne.n	8007ad6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a1e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d020      	beq.n	8007a70 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a32:	4a6a      	ldr	r2, [pc, #424]	; (8007bdc <I2C_ITError+0x25c>)
 8007a34:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fd ffe8 	bl	8005a10 <HAL_DMA_Abort_IT>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 8089 	beq.w	8007b5a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 0201 	bic.w	r2, r2, #1
 8007a56:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	4798      	blx	r3
 8007a6e:	e074      	b.n	8007b5a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a74:	4a59      	ldr	r2, [pc, #356]	; (8007bdc <I2C_ITError+0x25c>)
 8007a76:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fd ffc7 	bl	8005a10 <HAL_DMA_Abort_IT>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d068      	beq.n	8007b5a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a92:	2b40      	cmp	r3, #64	; 0x40
 8007a94:	d10b      	bne.n	8007aae <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	691a      	ldr	r2, [r3, #16]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	b2d2      	uxtb	r2, r2
 8007aa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0201 	bic.w	r2, r2, #1
 8007abc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	4798      	blx	r3
 8007ad4:	e041      	b.n	8007b5a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b60      	cmp	r3, #96	; 0x60
 8007ae0:	d125      	bne.n	8007b2e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007afa:	2b40      	cmp	r3, #64	; 0x40
 8007afc:	d10b      	bne.n	8007b16 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	691a      	ldr	r2, [r3, #16]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b08:	b2d2      	uxtb	r2, r2
 8007b0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b10:	1c5a      	adds	r2, r3, #1
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f022 0201 	bic.w	r2, r2, #1
 8007b24:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7fe ff7f 	bl	8006a2a <HAL_I2C_AbortCpltCallback>
 8007b2c:	e015      	b.n	8007b5a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b38:	2b40      	cmp	r3, #64	; 0x40
 8007b3a:	d10b      	bne.n	8007b54 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	691a      	ldr	r2, [r3, #16]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b46:	b2d2      	uxtb	r2, r2
 8007b48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	1c5a      	adds	r2, r3, #1
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7fe ff5e 	bl	8006a16 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10e      	bne.n	8007b88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d109      	bne.n	8007b88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d104      	bne.n	8007b88 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d007      	beq.n	8007b98 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b96:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b9e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba4:	f003 0304 	and.w	r3, r3, #4
 8007ba8:	2b04      	cmp	r3, #4
 8007baa:	d113      	bne.n	8007bd4 <I2C_ITError+0x254>
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
 8007bae:	2b28      	cmp	r3, #40	; 0x28
 8007bb0:	d110      	bne.n	8007bd4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a0a      	ldr	r2, [pc, #40]	; (8007be0 <I2C_ITError+0x260>)
 8007bb6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2220      	movs	r2, #32
 8007bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7fe ff03 	bl	80069da <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007bd4:	bf00      	nop
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	08007eb9 	.word	0x08007eb9
 8007be0:	ffff0000 	.word	0xffff0000

08007be4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b088      	sub	sp, #32
 8007be8:	af02      	add	r7, sp, #8
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	607a      	str	r2, [r7, #4]
 8007bee:	603b      	str	r3, [r7, #0]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2b08      	cmp	r3, #8
 8007bfe:	d006      	beq.n	8007c0e <I2C_MasterRequestWrite+0x2a>
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d003      	beq.n	8007c0e <I2C_MasterRequestWrite+0x2a>
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c0c:	d108      	bne.n	8007c20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	e00b      	b.n	8007c38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c24:	2b12      	cmp	r3, #18
 8007c26:	d107      	bne.n	8007c38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 f9df 	bl	8008008 <I2C_WaitOnFlagUntilTimeout>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00d      	beq.n	8007c6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c5e:	d103      	bne.n	8007c68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e035      	b.n	8007cd8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c74:	d108      	bne.n	8007c88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c76:	897b      	ldrh	r3, [r7, #10]
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c84:	611a      	str	r2, [r3, #16]
 8007c86:	e01b      	b.n	8007cc0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007c88:	897b      	ldrh	r3, [r7, #10]
 8007c8a:	11db      	asrs	r3, r3, #7
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	f003 0306 	and.w	r3, r3, #6
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	f063 030f 	orn	r3, r3, #15
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	490e      	ldr	r1, [pc, #56]	; (8007ce0 <I2C_MasterRequestWrite+0xfc>)
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 fa05 	bl	80080b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e010      	b.n	8007cd8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007cb6:	897b      	ldrh	r3, [r7, #10]
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	4907      	ldr	r1, [pc, #28]	; (8007ce4 <I2C_MasterRequestWrite+0x100>)
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 f9f5 	bl	80080b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e000      	b.n	8007cd8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3718      	adds	r7, #24
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	00010008 	.word	0x00010008
 8007ce4:	00010002 	.word	0x00010002

08007ce8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b088      	sub	sp, #32
 8007cec:	af02      	add	r7, sp, #8
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	4608      	mov	r0, r1
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	817b      	strh	r3, [r7, #10]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	813b      	strh	r3, [r7, #8]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	6a3b      	ldr	r3, [r7, #32]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 f96a 	bl	8008008 <I2C_WaitOnFlagUntilTimeout>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00d      	beq.n	8007d56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d48:	d103      	bne.n	8007d52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e0aa      	b.n	8007eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d56:	897b      	ldrh	r3, [r7, #10]
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	6a3a      	ldr	r2, [r7, #32]
 8007d6a:	4952      	ldr	r1, [pc, #328]	; (8007eb4 <I2C_RequestMemoryRead+0x1cc>)
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f000 f9a2 	bl	80080b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e097      	b.n	8007eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	617b      	str	r3, [r7, #20]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	617b      	str	r3, [r7, #20]
 8007d90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d94:	6a39      	ldr	r1, [r7, #32]
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f000 fa0c 	bl	80081b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00d      	beq.n	8007dbe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da6:	2b04      	cmp	r3, #4
 8007da8:	d107      	bne.n	8007dba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007db8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e076      	b.n	8007eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007dbe:	88fb      	ldrh	r3, [r7, #6]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d105      	bne.n	8007dd0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007dc4:	893b      	ldrh	r3, [r7, #8]
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	611a      	str	r2, [r3, #16]
 8007dce:	e021      	b.n	8007e14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007dd0:	893b      	ldrh	r3, [r7, #8]
 8007dd2:	0a1b      	lsrs	r3, r3, #8
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007de0:	6a39      	ldr	r1, [r7, #32]
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f000 f9e6 	bl	80081b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00d      	beq.n	8007e0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	d107      	bne.n	8007e06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e050      	b.n	8007eac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e0a:	893b      	ldrh	r3, [r7, #8]
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e16:	6a39      	ldr	r1, [r7, #32]
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 f9cb 	bl	80081b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00d      	beq.n	8007e40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e28:	2b04      	cmp	r3, #4
 8007e2a:	d107      	bne.n	8007e3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e035      	b.n	8007eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 f8d3 	bl	8008008 <I2C_WaitOnFlagUntilTimeout>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00d      	beq.n	8007e84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e76:	d103      	bne.n	8007e80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e013      	b.n	8007eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e84:	897b      	ldrh	r3, [r7, #10]
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	f043 0301 	orr.w	r3, r3, #1
 8007e8c:	b2da      	uxtb	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	6a3a      	ldr	r2, [r7, #32]
 8007e98:	4906      	ldr	r1, [pc, #24]	; (8007eb4 <I2C_RequestMemoryRead+0x1cc>)
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f000 f90b 	bl	80080b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e000      	b.n	8007eac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3718      	adds	r7, #24
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	00010002 	.word	0x00010002

08007eb8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ed2:	4b4b      	ldr	r3, [pc, #300]	; (8008000 <I2C_DMAAbort+0x148>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	08db      	lsrs	r3, r3, #3
 8007ed8:	4a4a      	ldr	r2, [pc, #296]	; (8008004 <I2C_DMAAbort+0x14c>)
 8007eda:	fba2 2303 	umull	r2, r3, r2, r3
 8007ede:	0a1a      	lsrs	r2, r3, #8
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	00da      	lsls	r2, r3, #3
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d106      	bne.n	8007f00 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef6:	f043 0220 	orr.w	r2, r3, #32
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007efe:	e00a      	b.n	8007f16 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	3b01      	subs	r3, #1
 8007f04:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f14:	d0ea      	beq.n	8007eec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f22:	2200      	movs	r2, #0
 8007f24:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f32:	2200      	movs	r2, #0
 8007f34:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f44:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d003      	beq.n	8007f5c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f58:	2200      	movs	r2, #0
 8007f5a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d003      	beq.n	8007f6c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f68:	2200      	movs	r2, #0
 8007f6a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f022 0201 	bic.w	r2, r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b60      	cmp	r3, #96	; 0x60
 8007f86:	d10e      	bne.n	8007fa6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007f9e:	6978      	ldr	r0, [r7, #20]
 8007fa0:	f7fe fd43 	bl	8006a2a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007fa4:	e027      	b.n	8007ff6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fa6:	7cfb      	ldrb	r3, [r7, #19]
 8007fa8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007fac:	2b28      	cmp	r3, #40	; 0x28
 8007fae:	d117      	bne.n	8007fe0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f042 0201 	orr.w	r2, r2, #1
 8007fbe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	2228      	movs	r2, #40	; 0x28
 8007fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007fde:	e007      	b.n	8007ff0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007ff0:	6978      	ldr	r0, [r7, #20]
 8007ff2:	f7fe fd10 	bl	8006a16 <HAL_I2C_ErrorCallback>
}
 8007ff6:	bf00      	nop
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	20000008 	.word	0x20000008
 8008004:	14f8b589 	.word	0x14f8b589

08008008 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	603b      	str	r3, [r7, #0]
 8008014:	4613      	mov	r3, r2
 8008016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008018:	e025      	b.n	8008066 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008020:	d021      	beq.n	8008066 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008022:	f7fc fd89 	bl	8004b38 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	429a      	cmp	r2, r3
 8008030:	d302      	bcc.n	8008038 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d116      	bne.n	8008066 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2220      	movs	r2, #32
 8008042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008052:	f043 0220 	orr.w	r2, r3, #32
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e023      	b.n	80080ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	0c1b      	lsrs	r3, r3, #16
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b01      	cmp	r3, #1
 800806e:	d10d      	bne.n	800808c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	43da      	mvns	r2, r3
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	4013      	ands	r3, r2
 800807c:	b29b      	uxth	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	bf0c      	ite	eq
 8008082:	2301      	moveq	r3, #1
 8008084:	2300      	movne	r3, #0
 8008086:	b2db      	uxtb	r3, r3
 8008088:	461a      	mov	r2, r3
 800808a:	e00c      	b.n	80080a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	43da      	mvns	r2, r3
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	4013      	ands	r3, r2
 8008098:	b29b      	uxth	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	bf0c      	ite	eq
 800809e:	2301      	moveq	r3, #1
 80080a0:	2300      	movne	r3, #0
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	461a      	mov	r2, r3
 80080a6:	79fb      	ldrb	r3, [r7, #7]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d0b6      	beq.n	800801a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	60f8      	str	r0, [r7, #12]
 80080be:	60b9      	str	r1, [r7, #8]
 80080c0:	607a      	str	r2, [r7, #4]
 80080c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80080c4:	e051      	b.n	800816a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080d4:	d123      	bne.n	800811e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80080ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2220      	movs	r2, #32
 80080fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810a:	f043 0204 	orr.w	r2, r3, #4
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e046      	b.n	80081ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008124:	d021      	beq.n	800816a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008126:	f7fc fd07 	bl	8004b38 <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	429a      	cmp	r2, r3
 8008134:	d302      	bcc.n	800813c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d116      	bne.n	800816a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2220      	movs	r2, #32
 8008146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008156:	f043 0220 	orr.w	r2, r3, #32
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e020      	b.n	80081ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	0c1b      	lsrs	r3, r3, #16
 800816e:	b2db      	uxtb	r3, r3
 8008170:	2b01      	cmp	r3, #1
 8008172:	d10c      	bne.n	800818e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	43da      	mvns	r2, r3
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	4013      	ands	r3, r2
 8008180:	b29b      	uxth	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	bf14      	ite	ne
 8008186:	2301      	movne	r3, #1
 8008188:	2300      	moveq	r3, #0
 800818a:	b2db      	uxtb	r3, r3
 800818c:	e00b      	b.n	80081a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	43da      	mvns	r2, r3
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	4013      	ands	r3, r2
 800819a:	b29b      	uxth	r3, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	bf14      	ite	ne
 80081a0:	2301      	movne	r3, #1
 80081a2:	2300      	moveq	r3, #0
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d18d      	bne.n	80080c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081c0:	e02d      	b.n	800821e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 f900 	bl	80083c8 <I2C_IsAcknowledgeFailed>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e02d      	b.n	800822e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081d8:	d021      	beq.n	800821e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081da:	f7fc fcad 	bl	8004b38 <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d302      	bcc.n	80081f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d116      	bne.n	800821e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2220      	movs	r2, #32
 80081fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820a:	f043 0220 	orr.w	r2, r3, #32
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e007      	b.n	800822e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008228:	2b80      	cmp	r3, #128	; 0x80
 800822a:	d1ca      	bne.n	80081c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	60f8      	str	r0, [r7, #12]
 800823e:	60b9      	str	r1, [r7, #8]
 8008240:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008242:	e02d      	b.n	80082a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f000 f8bf 	bl	80083c8 <I2C_IsAcknowledgeFailed>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e02d      	b.n	80082b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800825a:	d021      	beq.n	80082a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800825c:	f7fc fc6c 	bl	8004b38 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	429a      	cmp	r2, r3
 800826a:	d302      	bcc.n	8008272 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d116      	bne.n	80082a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2220      	movs	r2, #32
 800827c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828c:	f043 0220 	orr.w	r2, r3, #32
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	e007      	b.n	80082b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	f003 0304 	and.w	r3, r3, #4
 80082aa:	2b04      	cmp	r3, #4
 80082ac:	d1ca      	bne.n	8008244 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082c0:	2300      	movs	r3, #0
 80082c2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80082c4:	4b13      	ldr	r3, [pc, #76]	; (8008314 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	08db      	lsrs	r3, r3, #3
 80082ca:	4a13      	ldr	r2, [pc, #76]	; (8008318 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80082cc:	fba2 2303 	umull	r2, r3, r2, r3
 80082d0:	0a1a      	lsrs	r2, r3, #8
 80082d2:	4613      	mov	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	4413      	add	r3, r2
 80082d8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	3b01      	subs	r3, #1
 80082de:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d107      	bne.n	80082f6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	f043 0220 	orr.w	r2, r3, #32
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e008      	b.n	8008308 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008304:	d0e9      	beq.n	80082da <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	20000008 	.word	0x20000008
 8008318:	14f8b589 	.word	0x14f8b589

0800831c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008328:	e042      	b.n	80083b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	f003 0310 	and.w	r3, r3, #16
 8008334:	2b10      	cmp	r3, #16
 8008336:	d119      	bne.n	800836c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f06f 0210 	mvn.w	r2, #16
 8008340:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2220      	movs	r2, #32
 800834c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	e029      	b.n	80083c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800836c:	f7fc fbe4 	bl	8004b38 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	429a      	cmp	r2, r3
 800837a:	d302      	bcc.n	8008382 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d116      	bne.n	80083b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2220      	movs	r2, #32
 800838c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839c:	f043 0220 	orr.w	r2, r3, #32
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e007      	b.n	80083c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ba:	2b40      	cmp	r3, #64	; 0x40
 80083bc:	d1b5      	bne.n	800832a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083de:	d11b      	bne.n	8008418 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80083e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2220      	movs	r2, #32
 80083f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008404:	f043 0204 	orr.w	r2, r3, #4
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e000      	b.n	800841a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008426:	b480      	push	{r7}
 8008428:	b083      	sub	sp, #12
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008432:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008436:	d103      	bne.n	8008440 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800843e:	e007      	b.n	8008450 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008444:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008448:	d102      	bne.n	8008450 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2208      	movs	r2, #8
 800844e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800845c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800845e:	b08f      	sub	sp, #60	; 0x3c
 8008460:	af0a      	add	r7, sp, #40	; 0x28
 8008462:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e10f      	b.n	800868e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b00      	cmp	r3, #0
 800847e:	d106      	bne.n	800848e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f006 fbab 	bl	800ebe4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2203      	movs	r2, #3
 8008492:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d102      	bne.n	80084a8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f002 f92c 	bl	800a70a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	603b      	str	r3, [r7, #0]
 80084b8:	687e      	ldr	r6, [r7, #4]
 80084ba:	466d      	mov	r5, sp
 80084bc:	f106 0410 	add.w	r4, r6, #16
 80084c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80084c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80084cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80084d0:	1d33      	adds	r3, r6, #4
 80084d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084d4:	6838      	ldr	r0, [r7, #0]
 80084d6:	f002 f803 	bl	800a4e0 <USB_CoreInit>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d005      	beq.n	80084ec <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2202      	movs	r2, #2
 80084e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e0d0      	b.n	800868e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2100      	movs	r1, #0
 80084f2:	4618      	mov	r0, r3
 80084f4:	f002 f91a 	bl	800a72c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084f8:	2300      	movs	r3, #0
 80084fa:	73fb      	strb	r3, [r7, #15]
 80084fc:	e04a      	b.n	8008594 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80084fe:	7bfa      	ldrb	r2, [r7, #15]
 8008500:	6879      	ldr	r1, [r7, #4]
 8008502:	4613      	mov	r3, r2
 8008504:	00db      	lsls	r3, r3, #3
 8008506:	1a9b      	subs	r3, r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	440b      	add	r3, r1
 800850c:	333d      	adds	r3, #61	; 0x3d
 800850e:	2201      	movs	r2, #1
 8008510:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008512:	7bfa      	ldrb	r2, [r7, #15]
 8008514:	6879      	ldr	r1, [r7, #4]
 8008516:	4613      	mov	r3, r2
 8008518:	00db      	lsls	r3, r3, #3
 800851a:	1a9b      	subs	r3, r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	440b      	add	r3, r1
 8008520:	333c      	adds	r3, #60	; 0x3c
 8008522:	7bfa      	ldrb	r2, [r7, #15]
 8008524:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008526:	7bfa      	ldrb	r2, [r7, #15]
 8008528:	7bfb      	ldrb	r3, [r7, #15]
 800852a:	b298      	uxth	r0, r3
 800852c:	6879      	ldr	r1, [r7, #4]
 800852e:	4613      	mov	r3, r2
 8008530:	00db      	lsls	r3, r3, #3
 8008532:	1a9b      	subs	r3, r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	440b      	add	r3, r1
 8008538:	3342      	adds	r3, #66	; 0x42
 800853a:	4602      	mov	r2, r0
 800853c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800853e:	7bfa      	ldrb	r2, [r7, #15]
 8008540:	6879      	ldr	r1, [r7, #4]
 8008542:	4613      	mov	r3, r2
 8008544:	00db      	lsls	r3, r3, #3
 8008546:	1a9b      	subs	r3, r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	440b      	add	r3, r1
 800854c:	333f      	adds	r3, #63	; 0x3f
 800854e:	2200      	movs	r2, #0
 8008550:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008552:	7bfa      	ldrb	r2, [r7, #15]
 8008554:	6879      	ldr	r1, [r7, #4]
 8008556:	4613      	mov	r3, r2
 8008558:	00db      	lsls	r3, r3, #3
 800855a:	1a9b      	subs	r3, r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	440b      	add	r3, r1
 8008560:	3344      	adds	r3, #68	; 0x44
 8008562:	2200      	movs	r2, #0
 8008564:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008566:	7bfa      	ldrb	r2, [r7, #15]
 8008568:	6879      	ldr	r1, [r7, #4]
 800856a:	4613      	mov	r3, r2
 800856c:	00db      	lsls	r3, r3, #3
 800856e:	1a9b      	subs	r3, r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	440b      	add	r3, r1
 8008574:	3348      	adds	r3, #72	; 0x48
 8008576:	2200      	movs	r2, #0
 8008578:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800857a:	7bfa      	ldrb	r2, [r7, #15]
 800857c:	6879      	ldr	r1, [r7, #4]
 800857e:	4613      	mov	r3, r2
 8008580:	00db      	lsls	r3, r3, #3
 8008582:	1a9b      	subs	r3, r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	440b      	add	r3, r1
 8008588:	3350      	adds	r3, #80	; 0x50
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800858e:	7bfb      	ldrb	r3, [r7, #15]
 8008590:	3301      	adds	r3, #1
 8008592:	73fb      	strb	r3, [r7, #15]
 8008594:	7bfa      	ldrb	r2, [r7, #15]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	429a      	cmp	r2, r3
 800859c:	d3af      	bcc.n	80084fe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800859e:	2300      	movs	r3, #0
 80085a0:	73fb      	strb	r3, [r7, #15]
 80085a2:	e044      	b.n	800862e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80085a4:	7bfa      	ldrb	r2, [r7, #15]
 80085a6:	6879      	ldr	r1, [r7, #4]
 80085a8:	4613      	mov	r3, r2
 80085aa:	00db      	lsls	r3, r3, #3
 80085ac:	1a9b      	subs	r3, r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	440b      	add	r3, r1
 80085b2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80085b6:	2200      	movs	r2, #0
 80085b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80085ba:	7bfa      	ldrb	r2, [r7, #15]
 80085bc:	6879      	ldr	r1, [r7, #4]
 80085be:	4613      	mov	r3, r2
 80085c0:	00db      	lsls	r3, r3, #3
 80085c2:	1a9b      	subs	r3, r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	440b      	add	r3, r1
 80085c8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80085cc:	7bfa      	ldrb	r2, [r7, #15]
 80085ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80085d0:	7bfa      	ldrb	r2, [r7, #15]
 80085d2:	6879      	ldr	r1, [r7, #4]
 80085d4:	4613      	mov	r3, r2
 80085d6:	00db      	lsls	r3, r3, #3
 80085d8:	1a9b      	subs	r3, r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	440b      	add	r3, r1
 80085de:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80085e2:	2200      	movs	r2, #0
 80085e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80085e6:	7bfa      	ldrb	r2, [r7, #15]
 80085e8:	6879      	ldr	r1, [r7, #4]
 80085ea:	4613      	mov	r3, r2
 80085ec:	00db      	lsls	r3, r3, #3
 80085ee:	1a9b      	subs	r3, r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	440b      	add	r3, r1
 80085f4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80085f8:	2200      	movs	r2, #0
 80085fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80085fc:	7bfa      	ldrb	r2, [r7, #15]
 80085fe:	6879      	ldr	r1, [r7, #4]
 8008600:	4613      	mov	r3, r2
 8008602:	00db      	lsls	r3, r3, #3
 8008604:	1a9b      	subs	r3, r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	440b      	add	r3, r1
 800860a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800860e:	2200      	movs	r2, #0
 8008610:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008612:	7bfa      	ldrb	r2, [r7, #15]
 8008614:	6879      	ldr	r1, [r7, #4]
 8008616:	4613      	mov	r3, r2
 8008618:	00db      	lsls	r3, r3, #3
 800861a:	1a9b      	subs	r3, r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	440b      	add	r3, r1
 8008620:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008624:	2200      	movs	r2, #0
 8008626:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008628:	7bfb      	ldrb	r3, [r7, #15]
 800862a:	3301      	adds	r3, #1
 800862c:	73fb      	strb	r3, [r7, #15]
 800862e:	7bfa      	ldrb	r2, [r7, #15]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	429a      	cmp	r2, r3
 8008636:	d3b5      	bcc.n	80085a4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	603b      	str	r3, [r7, #0]
 800863e:	687e      	ldr	r6, [r7, #4]
 8008640:	466d      	mov	r5, sp
 8008642:	f106 0410 	add.w	r4, r6, #16
 8008646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800864a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800864c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800864e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008652:	e885 0003 	stmia.w	r5, {r0, r1}
 8008656:	1d33      	adds	r3, r6, #4
 8008658:	cb0e      	ldmia	r3, {r1, r2, r3}
 800865a:	6838      	ldr	r0, [r7, #0]
 800865c:	f002 f890 	bl	800a780 <USB_DevInit>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d005      	beq.n	8008672 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2202      	movs	r2, #2
 800866a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e00d      	b.n	800868e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4618      	mov	r0, r3
 8008688:	f003 f8d8 	bl	800b83c <USB_DevDisconnect>

  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008696 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d101      	bne.n	80086b2 <HAL_PCD_Start+0x1c>
 80086ae:	2302      	movs	r3, #2
 80086b0:	e020      	b.n	80086f4 <HAL_PCD_Start+0x5e>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d109      	bne.n	80086d6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d005      	beq.n	80086d6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4618      	mov	r0, r3
 80086dc:	f002 f804 	bl	800a6e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f003 f888 	bl	800b7fa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80086fc:	b590      	push	{r4, r7, lr}
 80086fe:	b08d      	sub	sp, #52	; 0x34
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4618      	mov	r0, r3
 8008714:	f003 f946 	bl	800b9a4 <USB_GetMode>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	f040 839d 	bne.w	8008e5a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4618      	mov	r0, r3
 8008726:	f003 f8aa 	bl	800b87e <USB_ReadInterrupts>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 8393 	beq.w	8008e58 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4618      	mov	r0, r3
 8008738:	f003 f8a1 	bl	800b87e <USB_ReadInterrupts>
 800873c:	4603      	mov	r3, r0
 800873e:	f003 0302 	and.w	r3, r3, #2
 8008742:	2b02      	cmp	r3, #2
 8008744:	d107      	bne.n	8008756 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	695a      	ldr	r2, [r3, #20]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f002 0202 	and.w	r2, r2, #2
 8008754:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4618      	mov	r0, r3
 800875c:	f003 f88f 	bl	800b87e <USB_ReadInterrupts>
 8008760:	4603      	mov	r3, r0
 8008762:	f003 0310 	and.w	r3, r3, #16
 8008766:	2b10      	cmp	r3, #16
 8008768:	d161      	bne.n	800882e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	699a      	ldr	r2, [r3, #24]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f022 0210 	bic.w	r2, r2, #16
 8008778:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	f003 020f 	and.w	r2, r3, #15
 8008786:	4613      	mov	r3, r2
 8008788:	00db      	lsls	r3, r3, #3
 800878a:	1a9b      	subs	r3, r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	4413      	add	r3, r2
 8008796:	3304      	adds	r3, #4
 8008798:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	0c5b      	lsrs	r3, r3, #17
 800879e:	f003 030f 	and.w	r3, r3, #15
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d124      	bne.n	80087f0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80087a6:	69ba      	ldr	r2, [r7, #24]
 80087a8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80087ac:	4013      	ands	r3, r2
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d035      	beq.n	800881e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	091b      	lsrs	r3, r3, #4
 80087ba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80087bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	461a      	mov	r2, r3
 80087c4:	6a38      	ldr	r0, [r7, #32]
 80087c6:	f002 fef5 	bl	800b5b4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	68da      	ldr	r2, [r3, #12]
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	091b      	lsrs	r3, r3, #4
 80087d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087d6:	441a      	add	r2, r3
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	699a      	ldr	r2, [r3, #24]
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	091b      	lsrs	r3, r3, #4
 80087e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087e8:	441a      	add	r2, r3
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	619a      	str	r2, [r3, #24]
 80087ee:	e016      	b.n	800881e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	0c5b      	lsrs	r3, r3, #17
 80087f4:	f003 030f 	and.w	r3, r3, #15
 80087f8:	2b06      	cmp	r3, #6
 80087fa:	d110      	bne.n	800881e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008802:	2208      	movs	r2, #8
 8008804:	4619      	mov	r1, r3
 8008806:	6a38      	ldr	r0, [r7, #32]
 8008808:	f002 fed4 	bl	800b5b4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	699a      	ldr	r2, [r3, #24]
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	091b      	lsrs	r3, r3, #4
 8008814:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008818:	441a      	add	r2, r3
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	699a      	ldr	r2, [r3, #24]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f042 0210 	orr.w	r2, r2, #16
 800882c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4618      	mov	r0, r3
 8008834:	f003 f823 	bl	800b87e <USB_ReadInterrupts>
 8008838:	4603      	mov	r3, r0
 800883a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800883e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008842:	d16e      	bne.n	8008922 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008844:	2300      	movs	r3, #0
 8008846:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4618      	mov	r0, r3
 800884e:	f003 f829 	bl	800b8a4 <USB_ReadDevAllOutEpInterrupt>
 8008852:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008854:	e062      	b.n	800891c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008858:	f003 0301 	and.w	r3, r3, #1
 800885c:	2b00      	cmp	r3, #0
 800885e:	d057      	beq.n	8008910 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008866:	b2d2      	uxtb	r2, r2
 8008868:	4611      	mov	r1, r2
 800886a:	4618      	mov	r0, r3
 800886c:	f003 f84e 	bl	800b90c <USB_ReadDevOutEPInterrupt>
 8008870:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00c      	beq.n	8008896 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008888:	461a      	mov	r2, r3
 800888a:	2301      	movs	r3, #1
 800888c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800888e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fdb1 	bl	80093f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	f003 0308 	and.w	r3, r3, #8
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00c      	beq.n	80088ba <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	015a      	lsls	r2, r3, #5
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	4413      	add	r3, r2
 80088a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ac:	461a      	mov	r2, r3
 80088ae:	2308      	movs	r3, #8
 80088b0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80088b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 feab 	bl	8009610 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f003 0310 	and.w	r3, r3, #16
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d008      	beq.n	80088d6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	015a      	lsls	r2, r3, #5
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	4413      	add	r3, r2
 80088cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d0:	461a      	mov	r2, r3
 80088d2:	2310      	movs	r3, #16
 80088d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	f003 0320 	and.w	r3, r3, #32
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d008      	beq.n	80088f2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	015a      	lsls	r2, r3, #5
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	4413      	add	r3, r2
 80088e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ec:	461a      	mov	r2, r3
 80088ee:	2320      	movs	r3, #32
 80088f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d009      	beq.n	8008910 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80088fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fe:	015a      	lsls	r2, r3, #5
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	4413      	add	r3, r2
 8008904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008908:	461a      	mov	r2, r3
 800890a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800890e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	3301      	adds	r3, #1
 8008914:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008918:	085b      	lsrs	r3, r3, #1
 800891a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891e:	2b00      	cmp	r3, #0
 8008920:	d199      	bne.n	8008856 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4618      	mov	r0, r3
 8008928:	f002 ffa9 	bl	800b87e <USB_ReadInterrupts>
 800892c:	4603      	mov	r3, r0
 800892e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008932:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008936:	f040 80c0 	bne.w	8008aba <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4618      	mov	r0, r3
 8008940:	f002 ffca 	bl	800b8d8 <USB_ReadDevAllInEpInterrupt>
 8008944:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800894a:	e0b2      	b.n	8008ab2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800894c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b00      	cmp	r3, #0
 8008954:	f000 80a7 	beq.w	8008aa6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800895e:	b2d2      	uxtb	r2, r2
 8008960:	4611      	mov	r1, r2
 8008962:	4618      	mov	r0, r3
 8008964:	f002 fff0 	bl	800b948 <USB_ReadDevInEPInterrupt>
 8008968:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	f003 0301 	and.w	r3, r3, #1
 8008970:	2b00      	cmp	r3, #0
 8008972:	d057      	beq.n	8008a24 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008976:	f003 030f 	and.w	r3, r3, #15
 800897a:	2201      	movs	r2, #1
 800897c:	fa02 f303 	lsl.w	r3, r2, r3
 8008980:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	43db      	mvns	r3, r3
 800898e:	69f9      	ldr	r1, [r7, #28]
 8008990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008994:	4013      	ands	r3, r2
 8008996:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899a:	015a      	lsls	r2, r3, #5
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	4413      	add	r3, r2
 80089a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a4:	461a      	mov	r2, r3
 80089a6:	2301      	movs	r3, #1
 80089a8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d132      	bne.n	8008a18 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80089b2:	6879      	ldr	r1, [r7, #4]
 80089b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089b6:	4613      	mov	r3, r2
 80089b8:	00db      	lsls	r3, r3, #3
 80089ba:	1a9b      	subs	r3, r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	440b      	add	r3, r1
 80089c0:	3348      	adds	r3, #72	; 0x48
 80089c2:	6819      	ldr	r1, [r3, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c8:	4613      	mov	r3, r2
 80089ca:	00db      	lsls	r3, r3, #3
 80089cc:	1a9b      	subs	r3, r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4403      	add	r3, r0
 80089d2:	3344      	adds	r3, #68	; 0x44
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4419      	add	r1, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089dc:	4613      	mov	r3, r2
 80089de:	00db      	lsls	r3, r3, #3
 80089e0:	1a9b      	subs	r3, r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4403      	add	r3, r0
 80089e6:	3348      	adds	r3, #72	; 0x48
 80089e8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d113      	bne.n	8008a18 <HAL_PCD_IRQHandler+0x31c>
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f4:	4613      	mov	r3, r2
 80089f6:	00db      	lsls	r3, r3, #3
 80089f8:	1a9b      	subs	r3, r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	440b      	add	r3, r1
 80089fe:	3350      	adds	r3, #80	; 0x50
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d108      	bne.n	8008a18 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6818      	ldr	r0, [r3, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008a10:	461a      	mov	r2, r3
 8008a12:	2101      	movs	r1, #1
 8008a14:	f002 fff8 	bl	800ba08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f006 f961 	bl	800ece6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	f003 0308 	and.w	r3, r3, #8
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d008      	beq.n	8008a40 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	2308      	movs	r3, #8
 8008a3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	f003 0310 	and.w	r3, r3, #16
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d008      	beq.n	8008a5c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	015a      	lsls	r2, r3, #5
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	4413      	add	r3, r2
 8008a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a56:	461a      	mov	r2, r3
 8008a58:	2310      	movs	r3, #16
 8008a5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d008      	beq.n	8008a78 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	015a      	lsls	r2, r3, #5
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a72:	461a      	mov	r2, r3
 8008a74:	2340      	movs	r3, #64	; 0x40
 8008a76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	f003 0302 	and.w	r3, r3, #2
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d008      	beq.n	8008a94 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a84:	015a      	lsls	r2, r3, #5
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	4413      	add	r3, r2
 8008a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8e:	461a      	mov	r2, r3
 8008a90:	2302      	movs	r3, #2
 8008a92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d003      	beq.n	8008aa6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008a9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fc1b 	bl	80092dc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aae:	085b      	lsrs	r3, r3, #1
 8008ab0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f47f af49 	bne.w	800894c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f002 fedd 	bl	800b87e <USB_ReadInterrupts>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ace:	d122      	bne.n	8008b16 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	69fa      	ldr	r2, [r7, #28]
 8008ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ade:	f023 0301 	bic.w	r3, r3, #1
 8008ae2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d108      	bne.n	8008b00 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008af6:	2100      	movs	r1, #0
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fe27 	bl	800974c <HAL_PCDEx_LPM_Callback>
 8008afe:	e002      	b.n	8008b06 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f006 f967 	bl	800edd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	695a      	ldr	r2, [r3, #20]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f002 feaf 	bl	800b87e <USB_ReadInterrupts>
 8008b20:	4603      	mov	r3, r0
 8008b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b2a:	d112      	bne.n	8008b52 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f003 0301 	and.w	r3, r3, #1
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d102      	bne.n	8008b42 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f006 f923 	bl	800ed88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	695a      	ldr	r2, [r3, #20]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008b50:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f002 fe91 	bl	800b87e <USB_ReadInterrupts>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b66:	f040 80c7 	bne.w	8008cf8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	69fa      	ldr	r2, [r7, #28]
 8008b74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b78:	f023 0301 	bic.w	r3, r3, #1
 8008b7c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2110      	movs	r1, #16
 8008b84:	4618      	mov	r0, r3
 8008b86:	f001 ff5f 	bl	800aa48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b8e:	e056      	b.n	8008c3e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b92:	015a      	lsls	r2, r3, #5
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	4413      	add	r3, r2
 8008b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ba2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba6:	015a      	lsls	r2, r3, #5
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	4413      	add	r3, r2
 8008bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bb4:	0151      	lsls	r1, r2, #5
 8008bb6:	69fa      	ldr	r2, [r7, #28]
 8008bb8:	440a      	add	r2, r1
 8008bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bc2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc6:	015a      	lsls	r2, r3, #5
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bd4:	0151      	lsls	r1, r2, #5
 8008bd6:	69fa      	ldr	r2, [r7, #28]
 8008bd8:	440a      	add	r2, r1
 8008bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008be2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008bf6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c08:	0151      	lsls	r1, r2, #5
 8008c0a:	69fa      	ldr	r2, [r7, #28]
 8008c0c:	440a      	add	r2, r1
 8008c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c16:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1a:	015a      	lsls	r2, r3, #5
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c28:	0151      	lsls	r1, r2, #5
 8008c2a:	69fa      	ldr	r2, [r7, #28]
 8008c2c:	440a      	add	r2, r1
 8008c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c36:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d3a3      	bcc.n	8008b90 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c4e:	69db      	ldr	r3, [r3, #28]
 8008c50:	69fa      	ldr	r2, [r7, #28]
 8008c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c56:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008c5a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d016      	beq.n	8008c92 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c6e:	69fa      	ldr	r2, [r7, #28]
 8008c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c74:	f043 030b 	orr.w	r3, r3, #11
 8008c78:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c84:	69fa      	ldr	r2, [r7, #28]
 8008c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c8a:	f043 030b 	orr.w	r3, r3, #11
 8008c8e:	6453      	str	r3, [r2, #68]	; 0x44
 8008c90:	e015      	b.n	8008cbe <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	69fa      	ldr	r2, [r7, #28]
 8008c9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ca0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008ca4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008ca8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	69fa      	ldr	r2, [r7, #28]
 8008cb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cb8:	f043 030b 	orr.w	r3, r3, #11
 8008cbc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	69fa      	ldr	r2, [r7, #28]
 8008cc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ccc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008cd0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6818      	ldr	r0, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	f002 fe90 	bl	800ba08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	695a      	ldr	r2, [r3, #20]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008cf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f002 fdbe 	bl	800b87e <USB_ReadInterrupts>
 8008d02:	4603      	mov	r3, r0
 8008d04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d0c:	d124      	bne.n	8008d58 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f002 fe54 	bl	800b9c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f001 fef4 	bl	800ab0a <USB_GetDevSpeed>
 8008d22:	4603      	mov	r3, r0
 8008d24:	461a      	mov	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681c      	ldr	r4, [r3, #0]
 8008d2e:	f001 f947 	bl	8009fc0 <HAL_RCC_GetHCLKFreq>
 8008d32:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f001 fc31 	bl	800a5a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f005 fff7 	bl	800ed36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	695a      	ldr	r2, [r3, #20]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008d56:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f002 fd8e 	bl	800b87e <USB_ReadInterrupts>
 8008d62:	4603      	mov	r3, r0
 8008d64:	f003 0308 	and.w	r3, r3, #8
 8008d68:	2b08      	cmp	r3, #8
 8008d6a:	d10a      	bne.n	8008d82 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f005 ffd4 	bl	800ed1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	695a      	ldr	r2, [r3, #20]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f002 0208 	and.w	r2, r2, #8
 8008d80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f002 fd79 	bl	800b87e <USB_ReadInterrupts>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d96:	d10f      	bne.n	8008db8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	4619      	mov	r1, r3
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f006 f836 	bl	800ee14 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	695a      	ldr	r2, [r3, #20]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f002 fd5e 	bl	800b87e <USB_ReadInterrupts>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dcc:	d10f      	bne.n	8008dee <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f006 f809 	bl	800edf0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	695a      	ldr	r2, [r3, #20]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008dec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f002 fd43 	bl	800b87e <USB_ReadInterrupts>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e02:	d10a      	bne.n	8008e1a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f006 f817 	bl	800ee38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	695a      	ldr	r2, [r3, #20]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008e18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f002 fd2d 	bl	800b87e <USB_ReadInterrupts>
 8008e24:	4603      	mov	r3, r0
 8008e26:	f003 0304 	and.w	r3, r3, #4
 8008e2a:	2b04      	cmp	r3, #4
 8008e2c:	d115      	bne.n	8008e5a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	f003 0304 	and.w	r3, r3, #4
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d002      	beq.n	8008e46 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f006 f807 	bl	800ee54 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	6859      	ldr	r1, [r3, #4]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	69ba      	ldr	r2, [r7, #24]
 8008e52:	430a      	orrs	r2, r1
 8008e54:	605a      	str	r2, [r3, #4]
 8008e56:	e000      	b.n	8008e5a <HAL_PCD_IRQHandler+0x75e>
      return;
 8008e58:	bf00      	nop
    }
  }
}
 8008e5a:	3734      	adds	r7, #52	; 0x34
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd90      	pop	{r4, r7, pc}

08008e60 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d101      	bne.n	8008e7a <HAL_PCD_SetAddress+0x1a>
 8008e76:	2302      	movs	r3, #2
 8008e78:	e013      	b.n	8008ea2 <HAL_PCD_SetAddress+0x42>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	78fa      	ldrb	r2, [r7, #3]
 8008e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	78fa      	ldrb	r2, [r7, #3]
 8008e90:	4611      	mov	r1, r2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f002 fc8b 	bl	800b7ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b084      	sub	sp, #16
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	4608      	mov	r0, r1
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	4603      	mov	r3, r0
 8008eba:	70fb      	strb	r3, [r7, #3]
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	803b      	strh	r3, [r7, #0]
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008ec8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	da0f      	bge.n	8008ef0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	f003 020f 	and.w	r2, r3, #15
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	00db      	lsls	r3, r3, #3
 8008eda:	1a9b      	subs	r3, r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	3338      	adds	r3, #56	; 0x38
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2201      	movs	r2, #1
 8008eec:	705a      	strb	r2, [r3, #1]
 8008eee:	e00f      	b.n	8008f10 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ef0:	78fb      	ldrb	r3, [r7, #3]
 8008ef2:	f003 020f 	and.w	r2, r3, #15
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	00db      	lsls	r3, r3, #3
 8008efa:	1a9b      	subs	r3, r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	4413      	add	r3, r2
 8008f06:	3304      	adds	r3, #4
 8008f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008f10:	78fb      	ldrb	r3, [r7, #3]
 8008f12:	f003 030f 	and.w	r3, r3, #15
 8008f16:	b2da      	uxtb	r2, r3
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008f1c:	883a      	ldrh	r2, [r7, #0]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	78ba      	ldrb	r2, [r7, #2]
 8008f26:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	785b      	ldrb	r3, [r3, #1]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d004      	beq.n	8008f3a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008f3a:	78bb      	ldrb	r3, [r7, #2]
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d102      	bne.n	8008f46 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d101      	bne.n	8008f54 <HAL_PCD_EP_Open+0xaa>
 8008f50:	2302      	movs	r3, #2
 8008f52:	e00e      	b.n	8008f72 <HAL_PCD_EP_Open+0xc8>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68f9      	ldr	r1, [r7, #12]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f001 fdf6 	bl	800ab54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008f70:	7afb      	ldrb	r3, [r7, #11]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	460b      	mov	r3, r1
 8008f84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	da0f      	bge.n	8008fae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f8e:	78fb      	ldrb	r3, [r7, #3]
 8008f90:	f003 020f 	and.w	r2, r3, #15
 8008f94:	4613      	mov	r3, r2
 8008f96:	00db      	lsls	r3, r3, #3
 8008f98:	1a9b      	subs	r3, r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	3338      	adds	r3, #56	; 0x38
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	3304      	adds	r3, #4
 8008fa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	705a      	strb	r2, [r3, #1]
 8008fac:	e00f      	b.n	8008fce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008fae:	78fb      	ldrb	r3, [r7, #3]
 8008fb0:	f003 020f 	and.w	r2, r3, #15
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	00db      	lsls	r3, r3, #3
 8008fb8:	1a9b      	subs	r3, r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008fce:	78fb      	ldrb	r3, [r7, #3]
 8008fd0:	f003 030f 	and.w	r3, r3, #15
 8008fd4:	b2da      	uxtb	r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d101      	bne.n	8008fe8 <HAL_PCD_EP_Close+0x6e>
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	e00e      	b.n	8009006 <HAL_PCD_EP_Close+0x8c>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68f9      	ldr	r1, [r7, #12]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f001 fe34 	bl	800ac64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b086      	sub	sp, #24
 8009012:	af00      	add	r7, sp, #0
 8009014:	60f8      	str	r0, [r7, #12]
 8009016:	607a      	str	r2, [r7, #4]
 8009018:	603b      	str	r3, [r7, #0]
 800901a:	460b      	mov	r3, r1
 800901c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800901e:	7afb      	ldrb	r3, [r7, #11]
 8009020:	f003 020f 	and.w	r2, r3, #15
 8009024:	4613      	mov	r3, r2
 8009026:	00db      	lsls	r3, r3, #3
 8009028:	1a9b      	subs	r3, r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	4413      	add	r3, r2
 8009034:	3304      	adds	r3, #4
 8009036:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	2200      	movs	r2, #0
 8009048:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	2200      	movs	r2, #0
 800904e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009050:	7afb      	ldrb	r3, [r7, #11]
 8009052:	f003 030f 	and.w	r3, r3, #15
 8009056:	b2da      	uxtb	r2, r3
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d102      	bne.n	800906a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800906a:	7afb      	ldrb	r3, [r7, #11]
 800906c:	f003 030f 	and.w	r3, r3, #15
 8009070:	2b00      	cmp	r3, #0
 8009072:	d109      	bne.n	8009088 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6818      	ldr	r0, [r3, #0]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	b2db      	uxtb	r3, r3
 800907e:	461a      	mov	r2, r3
 8009080:	6979      	ldr	r1, [r7, #20]
 8009082:	f002 f90f 	bl	800b2a4 <USB_EP0StartXfer>
 8009086:	e008      	b.n	800909a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6818      	ldr	r0, [r3, #0]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	b2db      	uxtb	r3, r3
 8009092:	461a      	mov	r2, r3
 8009094:	6979      	ldr	r1, [r7, #20]
 8009096:	f001 fec1 	bl	800ae1c <USB_EPStartXfer>
  }

  return HAL_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3718      	adds	r7, #24
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	460b      	mov	r3, r1
 80090ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80090b0:	78fb      	ldrb	r3, [r7, #3]
 80090b2:	f003 020f 	and.w	r2, r3, #15
 80090b6:	6879      	ldr	r1, [r7, #4]
 80090b8:	4613      	mov	r3, r2
 80090ba:	00db      	lsls	r3, r3, #3
 80090bc:	1a9b      	subs	r3, r3, r2
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	440b      	add	r3, r1
 80090c2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80090c6:	681b      	ldr	r3, [r3, #0]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	607a      	str	r2, [r7, #4]
 80090de:	603b      	str	r3, [r7, #0]
 80090e0:	460b      	mov	r3, r1
 80090e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090e4:	7afb      	ldrb	r3, [r7, #11]
 80090e6:	f003 020f 	and.w	r2, r3, #15
 80090ea:	4613      	mov	r3, r2
 80090ec:	00db      	lsls	r3, r3, #3
 80090ee:	1a9b      	subs	r3, r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	3338      	adds	r3, #56	; 0x38
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	4413      	add	r3, r2
 80090f8:	3304      	adds	r3, #4
 80090fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	2200      	movs	r2, #0
 800910c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	2201      	movs	r2, #1
 8009112:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009114:	7afb      	ldrb	r3, [r7, #11]
 8009116:	f003 030f 	and.w	r3, r3, #15
 800911a:	b2da      	uxtb	r2, r3
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d102      	bne.n	800912e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800912e:	7afb      	ldrb	r3, [r7, #11]
 8009130:	f003 030f 	and.w	r3, r3, #15
 8009134:	2b00      	cmp	r3, #0
 8009136:	d109      	bne.n	800914c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6818      	ldr	r0, [r3, #0]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	b2db      	uxtb	r3, r3
 8009142:	461a      	mov	r2, r3
 8009144:	6979      	ldr	r1, [r7, #20]
 8009146:	f002 f8ad 	bl	800b2a4 <USB_EP0StartXfer>
 800914a:	e008      	b.n	800915e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6818      	ldr	r0, [r3, #0]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	b2db      	uxtb	r3, r3
 8009156:	461a      	mov	r2, r3
 8009158:	6979      	ldr	r1, [r7, #20]
 800915a:	f001 fe5f 	bl	800ae1c <USB_EPStartXfer>
  }

  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3718      	adds	r7, #24
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	460b      	mov	r3, r1
 8009172:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009174:	78fb      	ldrb	r3, [r7, #3]
 8009176:	f003 020f 	and.w	r2, r3, #15
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	429a      	cmp	r2, r3
 8009180:	d901      	bls.n	8009186 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e050      	b.n	8009228 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009186:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800918a:	2b00      	cmp	r3, #0
 800918c:	da0f      	bge.n	80091ae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800918e:	78fb      	ldrb	r3, [r7, #3]
 8009190:	f003 020f 	and.w	r2, r3, #15
 8009194:	4613      	mov	r3, r2
 8009196:	00db      	lsls	r3, r3, #3
 8009198:	1a9b      	subs	r3, r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	3338      	adds	r3, #56	; 0x38
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	4413      	add	r3, r2
 80091a2:	3304      	adds	r3, #4
 80091a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2201      	movs	r2, #1
 80091aa:	705a      	strb	r2, [r3, #1]
 80091ac:	e00d      	b.n	80091ca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80091ae:	78fa      	ldrb	r2, [r7, #3]
 80091b0:	4613      	mov	r3, r2
 80091b2:	00db      	lsls	r3, r3, #3
 80091b4:	1a9b      	subs	r3, r3, r2
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	4413      	add	r3, r2
 80091c0:	3304      	adds	r3, #4
 80091c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2200      	movs	r2, #0
 80091c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2201      	movs	r2, #1
 80091ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091d0:	78fb      	ldrb	r3, [r7, #3]
 80091d2:	f003 030f 	and.w	r3, r3, #15
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d101      	bne.n	80091ea <HAL_PCD_EP_SetStall+0x82>
 80091e6:	2302      	movs	r3, #2
 80091e8:	e01e      	b.n	8009228 <HAL_PCD_EP_SetStall+0xc0>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68f9      	ldr	r1, [r7, #12]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f002 fa04 	bl	800b606 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80091fe:	78fb      	ldrb	r3, [r7, #3]
 8009200:	f003 030f 	and.w	r3, r3, #15
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10a      	bne.n	800921e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6818      	ldr	r0, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	b2d9      	uxtb	r1, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009218:	461a      	mov	r2, r3
 800921a:	f002 fbf5 	bl	800ba08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800923c:	78fb      	ldrb	r3, [r7, #3]
 800923e:	f003 020f 	and.w	r2, r3, #15
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	429a      	cmp	r2, r3
 8009248:	d901      	bls.n	800924e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	e042      	b.n	80092d4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800924e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009252:	2b00      	cmp	r3, #0
 8009254:	da0f      	bge.n	8009276 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009256:	78fb      	ldrb	r3, [r7, #3]
 8009258:	f003 020f 	and.w	r2, r3, #15
 800925c:	4613      	mov	r3, r2
 800925e:	00db      	lsls	r3, r3, #3
 8009260:	1a9b      	subs	r3, r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	3338      	adds	r3, #56	; 0x38
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	4413      	add	r3, r2
 800926a:	3304      	adds	r3, #4
 800926c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2201      	movs	r2, #1
 8009272:	705a      	strb	r2, [r3, #1]
 8009274:	e00f      	b.n	8009296 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009276:	78fb      	ldrb	r3, [r7, #3]
 8009278:	f003 020f 	and.w	r2, r3, #15
 800927c:	4613      	mov	r3, r2
 800927e:	00db      	lsls	r3, r3, #3
 8009280:	1a9b      	subs	r3, r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	4413      	add	r3, r2
 800928c:	3304      	adds	r3, #4
 800928e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800929c:	78fb      	ldrb	r3, [r7, #3]
 800929e:	f003 030f 	and.w	r3, r3, #15
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d101      	bne.n	80092b6 <HAL_PCD_EP_ClrStall+0x86>
 80092b2:	2302      	movs	r3, #2
 80092b4:	e00e      	b.n	80092d4 <HAL_PCD_EP_ClrStall+0xa4>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2201      	movs	r2, #1
 80092ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68f9      	ldr	r1, [r7, #12]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f002 fa0c 	bl	800b6e2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b08a      	sub	sp, #40	; 0x28
 80092e0:	af02      	add	r7, sp, #8
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	4613      	mov	r3, r2
 80092f4:	00db      	lsls	r3, r3, #3
 80092f6:	1a9b      	subs	r3, r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	3338      	adds	r3, #56	; 0x38
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	4413      	add	r3, r2
 8009300:	3304      	adds	r3, #4
 8009302:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	699a      	ldr	r2, [r3, #24]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	695b      	ldr	r3, [r3, #20]
 800930c:	429a      	cmp	r2, r3
 800930e:	d901      	bls.n	8009314 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	e06c      	b.n	80093ee <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	695a      	ldr	r2, [r3, #20]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	69fa      	ldr	r2, [r7, #28]
 8009326:	429a      	cmp	r2, r3
 8009328:	d902      	bls.n	8009330 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	3303      	adds	r3, #3
 8009334:	089b      	lsrs	r3, r3, #2
 8009336:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009338:	e02b      	b.n	8009392 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	695a      	ldr	r2, [r3, #20]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	699b      	ldr	r3, [r3, #24]
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	69fa      	ldr	r2, [r7, #28]
 800934c:	429a      	cmp	r2, r3
 800934e:	d902      	bls.n	8009356 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	3303      	adds	r3, #3
 800935a:	089b      	lsrs	r3, r3, #2
 800935c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	68d9      	ldr	r1, [r3, #12]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	b2da      	uxtb	r2, r3
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800936e:	b2db      	uxtb	r3, r3
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	4603      	mov	r3, r0
 8009374:	6978      	ldr	r0, [r7, #20]
 8009376:	f002 f8e8 	bl	800b54a <USB_WritePacket>

    ep->xfer_buff  += len;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	68da      	ldr	r2, [r3, #12]
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	441a      	add	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	699a      	ldr	r2, [r3, #24]
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	441a      	add	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	015a      	lsls	r2, r3, #5
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	4413      	add	r3, r2
 800939a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	69ba      	ldr	r2, [r7, #24]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d809      	bhi.n	80093bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	699a      	ldr	r2, [r3, #24]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d203      	bcs.n	80093bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	695b      	ldr	r3, [r3, #20]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1be      	bne.n	800933a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	695a      	ldr	r2, [r3, #20]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	699b      	ldr	r3, [r3, #24]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d811      	bhi.n	80093ec <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	f003 030f 	and.w	r3, r3, #15
 80093ce:	2201      	movs	r2, #1
 80093d0:	fa02 f303 	lsl.w	r3, r2, r3
 80093d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	43db      	mvns	r3, r3
 80093e2:	6939      	ldr	r1, [r7, #16]
 80093e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093e8:	4013      	ands	r3, r2
 80093ea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3720      	adds	r7, #32
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
	...

080093f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	333c      	adds	r3, #60	; 0x3c
 8009410:	3304      	adds	r3, #4
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	015a      	lsls	r2, r3, #5
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	4413      	add	r3, r2
 800941e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	2b01      	cmp	r3, #1
 800942c:	f040 80a0 	bne.w	8009570 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	f003 0308 	and.w	r3, r3, #8
 8009436:	2b00      	cmp	r3, #0
 8009438:	d015      	beq.n	8009466 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	4a72      	ldr	r2, [pc, #456]	; (8009608 <PCD_EP_OutXfrComplete_int+0x210>)
 800943e:	4293      	cmp	r3, r2
 8009440:	f240 80dd 	bls.w	80095fe <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800944a:	2b00      	cmp	r3, #0
 800944c:	f000 80d7 	beq.w	80095fe <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	4413      	add	r3, r2
 8009458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800945c:	461a      	mov	r2, r3
 800945e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009462:	6093      	str	r3, [r2, #8]
 8009464:	e0cb      	b.n	80095fe <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	f003 0320 	and.w	r3, r3, #32
 800946c:	2b00      	cmp	r3, #0
 800946e:	d009      	beq.n	8009484 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	015a      	lsls	r2, r3, #5
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	4413      	add	r3, r2
 8009478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800947c:	461a      	mov	r2, r3
 800947e:	2320      	movs	r3, #32
 8009480:	6093      	str	r3, [r2, #8]
 8009482:	e0bc      	b.n	80095fe <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800948a:	2b00      	cmp	r3, #0
 800948c:	f040 80b7 	bne.w	80095fe <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	4a5d      	ldr	r2, [pc, #372]	; (8009608 <PCD_EP_OutXfrComplete_int+0x210>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d90f      	bls.n	80094b8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00a      	beq.n	80094b8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	015a      	lsls	r2, r3, #5
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	4413      	add	r3, r2
 80094aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ae:	461a      	mov	r2, r3
 80094b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094b4:	6093      	str	r3, [r2, #8]
 80094b6:	e0a2      	b.n	80095fe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80094b8:	6879      	ldr	r1, [r7, #4]
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	4613      	mov	r3, r2
 80094be:	00db      	lsls	r3, r3, #3
 80094c0:	1a9b      	subs	r3, r3, r2
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	440b      	add	r3, r1
 80094c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80094ca:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	0159      	lsls	r1, r3, #5
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	440b      	add	r3, r1
 80094d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80094de:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	4613      	mov	r3, r2
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	1a9b      	subs	r3, r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4403      	add	r3, r0
 80094ee:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80094f2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80094f4:	6879      	ldr	r1, [r7, #4]
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	4613      	mov	r3, r2
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	1a9b      	subs	r3, r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	440b      	add	r3, r1
 8009502:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009506:	6819      	ldr	r1, [r3, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	4613      	mov	r3, r2
 800950e:	00db      	lsls	r3, r3, #3
 8009510:	1a9b      	subs	r3, r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4403      	add	r3, r0
 8009516:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4419      	add	r1, r3
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	683a      	ldr	r2, [r7, #0]
 8009522:	4613      	mov	r3, r2
 8009524:	00db      	lsls	r3, r3, #3
 8009526:	1a9b      	subs	r3, r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4403      	add	r3, r0
 800952c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009530:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d114      	bne.n	8009562 <PCD_EP_OutXfrComplete_int+0x16a>
 8009538:	6879      	ldr	r1, [r7, #4]
 800953a:	683a      	ldr	r2, [r7, #0]
 800953c:	4613      	mov	r3, r2
 800953e:	00db      	lsls	r3, r3, #3
 8009540:	1a9b      	subs	r3, r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	440b      	add	r3, r1
 8009546:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d108      	bne.n	8009562 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6818      	ldr	r0, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800955a:	461a      	mov	r2, r3
 800955c:	2101      	movs	r1, #1
 800955e:	f002 fa53 	bl	800ba08 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	b2db      	uxtb	r3, r3
 8009566:	4619      	mov	r1, r3
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f005 fba1 	bl	800ecb0 <HAL_PCD_DataOutStageCallback>
 800956e:	e046      	b.n	80095fe <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	4a26      	ldr	r2, [pc, #152]	; (800960c <PCD_EP_OutXfrComplete_int+0x214>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d124      	bne.n	80095c2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00a      	beq.n	8009598 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	015a      	lsls	r2, r3, #5
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	4413      	add	r3, r2
 800958a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800958e:	461a      	mov	r2, r3
 8009590:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009594:	6093      	str	r3, [r2, #8]
 8009596:	e032      	b.n	80095fe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	f003 0320 	and.w	r3, r3, #32
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d008      	beq.n	80095b4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	015a      	lsls	r2, r3, #5
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	4413      	add	r3, r2
 80095aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ae:	461a      	mov	r2, r3
 80095b0:	2320      	movs	r3, #32
 80095b2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	4619      	mov	r1, r3
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f005 fb78 	bl	800ecb0 <HAL_PCD_DataOutStageCallback>
 80095c0:	e01d      	b.n	80095fe <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d114      	bne.n	80095f2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80095c8:	6879      	ldr	r1, [r7, #4]
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	4613      	mov	r3, r2
 80095ce:	00db      	lsls	r3, r3, #3
 80095d0:	1a9b      	subs	r3, r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	440b      	add	r3, r1
 80095d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d108      	bne.n	80095f2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6818      	ldr	r0, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80095ea:	461a      	mov	r2, r3
 80095ec:	2100      	movs	r1, #0
 80095ee:	f002 fa0b 	bl	800ba08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	4619      	mov	r1, r3
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f005 fb59 	bl	800ecb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3718      	adds	r7, #24
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	4f54300a 	.word	0x4f54300a
 800960c:	4f54310a 	.word	0x4f54310a

08009610 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	333c      	adds	r3, #60	; 0x3c
 8009628:	3304      	adds	r3, #4
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	015a      	lsls	r2, r3, #5
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	4413      	add	r3, r2
 8009636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	4a15      	ldr	r2, [pc, #84]	; (8009698 <PCD_EP_OutSetupPacket_int+0x88>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d90e      	bls.n	8009664 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800964c:	2b00      	cmp	r3, #0
 800964e:	d009      	beq.n	8009664 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	015a      	lsls	r2, r3, #5
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	4413      	add	r3, r2
 8009658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800965c:	461a      	mov	r2, r3
 800965e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009662:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f005 fb11 	bl	800ec8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	4a0a      	ldr	r2, [pc, #40]	; (8009698 <PCD_EP_OutSetupPacket_int+0x88>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d90c      	bls.n	800968c <PCD_EP_OutSetupPacket_int+0x7c>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d108      	bne.n	800968c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6818      	ldr	r0, [r3, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009684:	461a      	mov	r2, r3
 8009686:	2101      	movs	r1, #1
 8009688:	f002 f9be 	bl	800ba08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3718      	adds	r7, #24
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	4f54300a 	.word	0x4f54300a

0800969c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	460b      	mov	r3, r1
 80096a6:	70fb      	strb	r3, [r7, #3]
 80096a8:	4613      	mov	r3, r2
 80096aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80096b4:	78fb      	ldrb	r3, [r7, #3]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d107      	bne.n	80096ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80096ba:	883b      	ldrh	r3, [r7, #0]
 80096bc:	0419      	lsls	r1, r3, #16
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	430a      	orrs	r2, r1
 80096c6:	629a      	str	r2, [r3, #40]	; 0x28
 80096c8:	e028      	b.n	800971c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d0:	0c1b      	lsrs	r3, r3, #16
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	4413      	add	r3, r2
 80096d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80096d8:	2300      	movs	r3, #0
 80096da:	73fb      	strb	r3, [r7, #15]
 80096dc:	e00d      	b.n	80096fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
 80096e4:	3340      	adds	r3, #64	; 0x40
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4413      	add	r3, r2
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	0c1b      	lsrs	r3, r3, #16
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	4413      	add	r3, r2
 80096f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
 80096f6:	3301      	adds	r3, #1
 80096f8:	73fb      	strb	r3, [r7, #15]
 80096fa:	7bfa      	ldrb	r2, [r7, #15]
 80096fc:	78fb      	ldrb	r3, [r7, #3]
 80096fe:	3b01      	subs	r3, #1
 8009700:	429a      	cmp	r2, r3
 8009702:	d3ec      	bcc.n	80096de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009704:	883b      	ldrh	r3, [r7, #0]
 8009706:	0418      	lsls	r0, r3, #16
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6819      	ldr	r1, [r3, #0]
 800970c:	78fb      	ldrb	r3, [r7, #3]
 800970e:	3b01      	subs	r3, #1
 8009710:	68ba      	ldr	r2, [r7, #8]
 8009712:	4302      	orrs	r2, r0
 8009714:	3340      	adds	r3, #64	; 0x40
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	440b      	add	r3, r1
 800971a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800972a:	b480      	push	{r7}
 800972c:	b083      	sub	sp, #12
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	460b      	mov	r3, r1
 8009734:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	887a      	ldrh	r2, [r7, #2]
 800973c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009758:	bf00      	nop
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d101      	bne.n	8009776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e25b      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 0301 	and.w	r3, r3, #1
 800977e:	2b00      	cmp	r3, #0
 8009780:	d075      	beq.n	800986e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009782:	4ba3      	ldr	r3, [pc, #652]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	f003 030c 	and.w	r3, r3, #12
 800978a:	2b04      	cmp	r3, #4
 800978c:	d00c      	beq.n	80097a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800978e:	4ba0      	ldr	r3, [pc, #640]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009796:	2b08      	cmp	r3, #8
 8009798:	d112      	bne.n	80097c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800979a:	4b9d      	ldr	r3, [pc, #628]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097a6:	d10b      	bne.n	80097c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097a8:	4b99      	ldr	r3, [pc, #612]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d05b      	beq.n	800986c <HAL_RCC_OscConfig+0x108>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d157      	bne.n	800986c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e236      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097c8:	d106      	bne.n	80097d8 <HAL_RCC_OscConfig+0x74>
 80097ca:	4b91      	ldr	r3, [pc, #580]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a90      	ldr	r2, [pc, #576]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80097d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097d4:	6013      	str	r3, [r2, #0]
 80097d6:	e01d      	b.n	8009814 <HAL_RCC_OscConfig+0xb0>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097e0:	d10c      	bne.n	80097fc <HAL_RCC_OscConfig+0x98>
 80097e2:	4b8b      	ldr	r3, [pc, #556]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a8a      	ldr	r2, [pc, #552]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80097e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	4b88      	ldr	r3, [pc, #544]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a87      	ldr	r2, [pc, #540]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80097f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097f8:	6013      	str	r3, [r2, #0]
 80097fa:	e00b      	b.n	8009814 <HAL_RCC_OscConfig+0xb0>
 80097fc:	4b84      	ldr	r3, [pc, #528]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a83      	ldr	r2, [pc, #524]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009806:	6013      	str	r3, [r2, #0]
 8009808:	4b81      	ldr	r3, [pc, #516]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a80      	ldr	r2, [pc, #512]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 800980e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d013      	beq.n	8009844 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800981c:	f7fb f98c 	bl	8004b38 <HAL_GetTick>
 8009820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009822:	e008      	b.n	8009836 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009824:	f7fb f988 	bl	8004b38 <HAL_GetTick>
 8009828:	4602      	mov	r2, r0
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	2b64      	cmp	r3, #100	; 0x64
 8009830:	d901      	bls.n	8009836 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	e1fb      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009836:	4b76      	ldr	r3, [pc, #472]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800983e:	2b00      	cmp	r3, #0
 8009840:	d0f0      	beq.n	8009824 <HAL_RCC_OscConfig+0xc0>
 8009842:	e014      	b.n	800986e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009844:	f7fb f978 	bl	8004b38 <HAL_GetTick>
 8009848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800984a:	e008      	b.n	800985e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800984c:	f7fb f974 	bl	8004b38 <HAL_GetTick>
 8009850:	4602      	mov	r2, r0
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	2b64      	cmp	r3, #100	; 0x64
 8009858:	d901      	bls.n	800985e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800985a:	2303      	movs	r3, #3
 800985c:	e1e7      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800985e:	4b6c      	ldr	r3, [pc, #432]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1f0      	bne.n	800984c <HAL_RCC_OscConfig+0xe8>
 800986a:	e000      	b.n	800986e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800986c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f003 0302 	and.w	r3, r3, #2
 8009876:	2b00      	cmp	r3, #0
 8009878:	d063      	beq.n	8009942 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800987a:	4b65      	ldr	r3, [pc, #404]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	f003 030c 	and.w	r3, r3, #12
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00b      	beq.n	800989e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009886:	4b62      	ldr	r3, [pc, #392]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800988e:	2b08      	cmp	r3, #8
 8009890:	d11c      	bne.n	80098cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009892:	4b5f      	ldr	r3, [pc, #380]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d116      	bne.n	80098cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800989e:	4b5c      	ldr	r3, [pc, #368]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 0302 	and.w	r3, r3, #2
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d005      	beq.n	80098b6 <HAL_RCC_OscConfig+0x152>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d001      	beq.n	80098b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e1bb      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098b6:	4b56      	ldr	r3, [pc, #344]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	00db      	lsls	r3, r3, #3
 80098c4:	4952      	ldr	r1, [pc, #328]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80098ca:	e03a      	b.n	8009942 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d020      	beq.n	8009916 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80098d4:	4b4f      	ldr	r3, [pc, #316]	; (8009a14 <HAL_RCC_OscConfig+0x2b0>)
 80098d6:	2201      	movs	r2, #1
 80098d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098da:	f7fb f92d 	bl	8004b38 <HAL_GetTick>
 80098de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098e0:	e008      	b.n	80098f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098e2:	f7fb f929 	bl	8004b38 <HAL_GetTick>
 80098e6:	4602      	mov	r2, r0
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	d901      	bls.n	80098f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80098f0:	2303      	movs	r3, #3
 80098f2:	e19c      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098f4:	4b46      	ldr	r3, [pc, #280]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f003 0302 	and.w	r3, r3, #2
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d0f0      	beq.n	80098e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009900:	4b43      	ldr	r3, [pc, #268]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	00db      	lsls	r3, r3, #3
 800990e:	4940      	ldr	r1, [pc, #256]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009910:	4313      	orrs	r3, r2
 8009912:	600b      	str	r3, [r1, #0]
 8009914:	e015      	b.n	8009942 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009916:	4b3f      	ldr	r3, [pc, #252]	; (8009a14 <HAL_RCC_OscConfig+0x2b0>)
 8009918:	2200      	movs	r2, #0
 800991a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800991c:	f7fb f90c 	bl	8004b38 <HAL_GetTick>
 8009920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009922:	e008      	b.n	8009936 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009924:	f7fb f908 	bl	8004b38 <HAL_GetTick>
 8009928:	4602      	mov	r2, r0
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	2b02      	cmp	r3, #2
 8009930:	d901      	bls.n	8009936 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	e17b      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009936:	4b36      	ldr	r3, [pc, #216]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 0302 	and.w	r3, r3, #2
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1f0      	bne.n	8009924 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 0308 	and.w	r3, r3, #8
 800994a:	2b00      	cmp	r3, #0
 800994c:	d030      	beq.n	80099b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d016      	beq.n	8009984 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009956:	4b30      	ldr	r3, [pc, #192]	; (8009a18 <HAL_RCC_OscConfig+0x2b4>)
 8009958:	2201      	movs	r2, #1
 800995a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800995c:	f7fb f8ec 	bl	8004b38 <HAL_GetTick>
 8009960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009962:	e008      	b.n	8009976 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009964:	f7fb f8e8 	bl	8004b38 <HAL_GetTick>
 8009968:	4602      	mov	r2, r0
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	2b02      	cmp	r3, #2
 8009970:	d901      	bls.n	8009976 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	e15b      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009976:	4b26      	ldr	r3, [pc, #152]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 8009978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800997a:	f003 0302 	and.w	r3, r3, #2
 800997e:	2b00      	cmp	r3, #0
 8009980:	d0f0      	beq.n	8009964 <HAL_RCC_OscConfig+0x200>
 8009982:	e015      	b.n	80099b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009984:	4b24      	ldr	r3, [pc, #144]	; (8009a18 <HAL_RCC_OscConfig+0x2b4>)
 8009986:	2200      	movs	r2, #0
 8009988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800998a:	f7fb f8d5 	bl	8004b38 <HAL_GetTick>
 800998e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009990:	e008      	b.n	80099a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009992:	f7fb f8d1 	bl	8004b38 <HAL_GetTick>
 8009996:	4602      	mov	r2, r0
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	2b02      	cmp	r3, #2
 800999e:	d901      	bls.n	80099a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80099a0:	2303      	movs	r3, #3
 80099a2:	e144      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80099a4:	4b1a      	ldr	r3, [pc, #104]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80099a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099a8:	f003 0302 	and.w	r3, r3, #2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1f0      	bne.n	8009992 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 0304 	and.w	r3, r3, #4
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 80a0 	beq.w	8009afe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80099be:	2300      	movs	r3, #0
 80099c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80099c2:	4b13      	ldr	r3, [pc, #76]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80099c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10f      	bne.n	80099ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80099ce:	2300      	movs	r3, #0
 80099d0:	60bb      	str	r3, [r7, #8]
 80099d2:	4b0f      	ldr	r3, [pc, #60]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80099d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d6:	4a0e      	ldr	r2, [pc, #56]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80099d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099dc:	6413      	str	r3, [r2, #64]	; 0x40
 80099de:	4b0c      	ldr	r3, [pc, #48]	; (8009a10 <HAL_RCC_OscConfig+0x2ac>)
 80099e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099e6:	60bb      	str	r3, [r7, #8]
 80099e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099ea:	2301      	movs	r3, #1
 80099ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099ee:	4b0b      	ldr	r3, [pc, #44]	; (8009a1c <HAL_RCC_OscConfig+0x2b8>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d121      	bne.n	8009a3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80099fa:	4b08      	ldr	r3, [pc, #32]	; (8009a1c <HAL_RCC_OscConfig+0x2b8>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a07      	ldr	r2, [pc, #28]	; (8009a1c <HAL_RCC_OscConfig+0x2b8>)
 8009a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009a06:	f7fb f897 	bl	8004b38 <HAL_GetTick>
 8009a0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a0c:	e011      	b.n	8009a32 <HAL_RCC_OscConfig+0x2ce>
 8009a0e:	bf00      	nop
 8009a10:	40023800 	.word	0x40023800
 8009a14:	42470000 	.word	0x42470000
 8009a18:	42470e80 	.word	0x42470e80
 8009a1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a20:	f7fb f88a 	bl	8004b38 <HAL_GetTick>
 8009a24:	4602      	mov	r2, r0
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d901      	bls.n	8009a32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e0fd      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009a32:	4b81      	ldr	r3, [pc, #516]	; (8009c38 <HAL_RCC_OscConfig+0x4d4>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d0f0      	beq.n	8009a20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d106      	bne.n	8009a54 <HAL_RCC_OscConfig+0x2f0>
 8009a46:	4b7d      	ldr	r3, [pc, #500]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a4a:	4a7c      	ldr	r2, [pc, #496]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009a4c:	f043 0301 	orr.w	r3, r3, #1
 8009a50:	6713      	str	r3, [r2, #112]	; 0x70
 8009a52:	e01c      	b.n	8009a8e <HAL_RCC_OscConfig+0x32a>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	2b05      	cmp	r3, #5
 8009a5a:	d10c      	bne.n	8009a76 <HAL_RCC_OscConfig+0x312>
 8009a5c:	4b77      	ldr	r3, [pc, #476]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a60:	4a76      	ldr	r2, [pc, #472]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009a62:	f043 0304 	orr.w	r3, r3, #4
 8009a66:	6713      	str	r3, [r2, #112]	; 0x70
 8009a68:	4b74      	ldr	r3, [pc, #464]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a6c:	4a73      	ldr	r2, [pc, #460]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009a6e:	f043 0301 	orr.w	r3, r3, #1
 8009a72:	6713      	str	r3, [r2, #112]	; 0x70
 8009a74:	e00b      	b.n	8009a8e <HAL_RCC_OscConfig+0x32a>
 8009a76:	4b71      	ldr	r3, [pc, #452]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a7a:	4a70      	ldr	r2, [pc, #448]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009a7c:	f023 0301 	bic.w	r3, r3, #1
 8009a80:	6713      	str	r3, [r2, #112]	; 0x70
 8009a82:	4b6e      	ldr	r3, [pc, #440]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a86:	4a6d      	ldr	r2, [pc, #436]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009a88:	f023 0304 	bic.w	r3, r3, #4
 8009a8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d015      	beq.n	8009ac2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a96:	f7fb f84f 	bl	8004b38 <HAL_GetTick>
 8009a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a9c:	e00a      	b.n	8009ab4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a9e:	f7fb f84b 	bl	8004b38 <HAL_GetTick>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d901      	bls.n	8009ab4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	e0bc      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ab4:	4b61      	ldr	r3, [pc, #388]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ab8:	f003 0302 	and.w	r3, r3, #2
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d0ee      	beq.n	8009a9e <HAL_RCC_OscConfig+0x33a>
 8009ac0:	e014      	b.n	8009aec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ac2:	f7fb f839 	bl	8004b38 <HAL_GetTick>
 8009ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ac8:	e00a      	b.n	8009ae0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009aca:	f7fb f835 	bl	8004b38 <HAL_GetTick>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	1ad3      	subs	r3, r2, r3
 8009ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d901      	bls.n	8009ae0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009adc:	2303      	movs	r3, #3
 8009ade:	e0a6      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ae0:	4b56      	ldr	r3, [pc, #344]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ae4:	f003 0302 	and.w	r3, r3, #2
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1ee      	bne.n	8009aca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009aec:	7dfb      	ldrb	r3, [r7, #23]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d105      	bne.n	8009afe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009af2:	4b52      	ldr	r3, [pc, #328]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af6:	4a51      	ldr	r2, [pc, #324]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009afc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	699b      	ldr	r3, [r3, #24]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f000 8092 	beq.w	8009c2c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009b08:	4b4c      	ldr	r3, [pc, #304]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	f003 030c 	and.w	r3, r3, #12
 8009b10:	2b08      	cmp	r3, #8
 8009b12:	d05c      	beq.n	8009bce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	699b      	ldr	r3, [r3, #24]
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d141      	bne.n	8009ba0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b1c:	4b48      	ldr	r3, [pc, #288]	; (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b22:	f7fb f809 	bl	8004b38 <HAL_GetTick>
 8009b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b28:	e008      	b.n	8009b3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b2a:	f7fb f805 	bl	8004b38 <HAL_GetTick>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d901      	bls.n	8009b3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e078      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b3c:	4b3f      	ldr	r3, [pc, #252]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1f0      	bne.n	8009b2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	69da      	ldr	r2, [r3, #28]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a1b      	ldr	r3, [r3, #32]
 8009b50:	431a      	orrs	r2, r3
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b56:	019b      	lsls	r3, r3, #6
 8009b58:	431a      	orrs	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b5e:	085b      	lsrs	r3, r3, #1
 8009b60:	3b01      	subs	r3, #1
 8009b62:	041b      	lsls	r3, r3, #16
 8009b64:	431a      	orrs	r2, r3
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b6a:	061b      	lsls	r3, r3, #24
 8009b6c:	4933      	ldr	r1, [pc, #204]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b72:	4b33      	ldr	r3, [pc, #204]	; (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009b74:	2201      	movs	r2, #1
 8009b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b78:	f7fa ffde 	bl	8004b38 <HAL_GetTick>
 8009b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b7e:	e008      	b.n	8009b92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b80:	f7fa ffda 	bl	8004b38 <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d901      	bls.n	8009b92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e04d      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b92:	4b2a      	ldr	r3, [pc, #168]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0f0      	beq.n	8009b80 <HAL_RCC_OscConfig+0x41c>
 8009b9e:	e045      	b.n	8009c2c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ba0:	4b27      	ldr	r3, [pc, #156]	; (8009c40 <HAL_RCC_OscConfig+0x4dc>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ba6:	f7fa ffc7 	bl	8004b38 <HAL_GetTick>
 8009baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bac:	e008      	b.n	8009bc0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bae:	f7fa ffc3 	bl	8004b38 <HAL_GetTick>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d901      	bls.n	8009bc0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	e036      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bc0:	4b1e      	ldr	r3, [pc, #120]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1f0      	bne.n	8009bae <HAL_RCC_OscConfig+0x44a>
 8009bcc:	e02e      	b.n	8009c2c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d101      	bne.n	8009bda <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e029      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009bda:	4b18      	ldr	r3, [pc, #96]	; (8009c3c <HAL_RCC_OscConfig+0x4d8>)
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	69db      	ldr	r3, [r3, #28]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d11c      	bne.n	8009c28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d115      	bne.n	8009c28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009c02:	4013      	ands	r3, r2
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d10d      	bne.n	8009c28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d106      	bne.n	8009c28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d001      	beq.n	8009c2c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e000      	b.n	8009c2e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3718      	adds	r7, #24
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	40007000 	.word	0x40007000
 8009c3c:	40023800 	.word	0x40023800
 8009c40:	42470060 	.word	0x42470060

08009c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d101      	bne.n	8009c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	e0cc      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c58:	4b68      	ldr	r3, [pc, #416]	; (8009dfc <HAL_RCC_ClockConfig+0x1b8>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 030f 	and.w	r3, r3, #15
 8009c60:	683a      	ldr	r2, [r7, #0]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d90c      	bls.n	8009c80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c66:	4b65      	ldr	r3, [pc, #404]	; (8009dfc <HAL_RCC_ClockConfig+0x1b8>)
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	b2d2      	uxtb	r2, r2
 8009c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c6e:	4b63      	ldr	r3, [pc, #396]	; (8009dfc <HAL_RCC_ClockConfig+0x1b8>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 030f 	and.w	r3, r3, #15
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d001      	beq.n	8009c80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e0b8      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0302 	and.w	r3, r3, #2
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d020      	beq.n	8009cce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f003 0304 	and.w	r3, r3, #4
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d005      	beq.n	8009ca4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009c98:	4b59      	ldr	r3, [pc, #356]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	4a58      	ldr	r2, [pc, #352]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009c9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009ca2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 0308 	and.w	r3, r3, #8
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d005      	beq.n	8009cbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009cb0:	4b53      	ldr	r3, [pc, #332]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	4a52      	ldr	r2, [pc, #328]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009cb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009cba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009cbc:	4b50      	ldr	r3, [pc, #320]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	494d      	ldr	r1, [pc, #308]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 0301 	and.w	r3, r3, #1
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d044      	beq.n	8009d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d107      	bne.n	8009cf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ce2:	4b47      	ldr	r3, [pc, #284]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d119      	bne.n	8009d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e07f      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d003      	beq.n	8009d02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009cfe:	2b03      	cmp	r3, #3
 8009d00:	d107      	bne.n	8009d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d02:	4b3f      	ldr	r3, [pc, #252]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d109      	bne.n	8009d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e06f      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d12:	4b3b      	ldr	r3, [pc, #236]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 0302 	and.w	r3, r3, #2
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d101      	bne.n	8009d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e067      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009d22:	4b37      	ldr	r3, [pc, #220]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	f023 0203 	bic.w	r2, r3, #3
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	4934      	ldr	r1, [pc, #208]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009d30:	4313      	orrs	r3, r2
 8009d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009d34:	f7fa ff00 	bl	8004b38 <HAL_GetTick>
 8009d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d3a:	e00a      	b.n	8009d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d3c:	f7fa fefc 	bl	8004b38 <HAL_GetTick>
 8009d40:	4602      	mov	r2, r0
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d901      	bls.n	8009d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	e04f      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d52:	4b2b      	ldr	r3, [pc, #172]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	f003 020c 	and.w	r2, r3, #12
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d1eb      	bne.n	8009d3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d64:	4b25      	ldr	r3, [pc, #148]	; (8009dfc <HAL_RCC_ClockConfig+0x1b8>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 030f 	and.w	r3, r3, #15
 8009d6c:	683a      	ldr	r2, [r7, #0]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d20c      	bcs.n	8009d8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d72:	4b22      	ldr	r3, [pc, #136]	; (8009dfc <HAL_RCC_ClockConfig+0x1b8>)
 8009d74:	683a      	ldr	r2, [r7, #0]
 8009d76:	b2d2      	uxtb	r2, r2
 8009d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d7a:	4b20      	ldr	r3, [pc, #128]	; (8009dfc <HAL_RCC_ClockConfig+0x1b8>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 030f 	and.w	r3, r3, #15
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d001      	beq.n	8009d8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e032      	b.n	8009df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 0304 	and.w	r3, r3, #4
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d008      	beq.n	8009daa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d98:	4b19      	ldr	r3, [pc, #100]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	4916      	ldr	r1, [pc, #88]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 0308 	and.w	r3, r3, #8
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d009      	beq.n	8009dca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009db6:	4b12      	ldr	r3, [pc, #72]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	00db      	lsls	r3, r3, #3
 8009dc4:	490e      	ldr	r1, [pc, #56]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009dca:	f000 f821 	bl	8009e10 <HAL_RCC_GetSysClockFreq>
 8009dce:	4601      	mov	r1, r0
 8009dd0:	4b0b      	ldr	r3, [pc, #44]	; (8009e00 <HAL_RCC_ClockConfig+0x1bc>)
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	091b      	lsrs	r3, r3, #4
 8009dd6:	f003 030f 	and.w	r3, r3, #15
 8009dda:	4a0a      	ldr	r2, [pc, #40]	; (8009e04 <HAL_RCC_ClockConfig+0x1c0>)
 8009ddc:	5cd3      	ldrb	r3, [r2, r3]
 8009dde:	fa21 f303 	lsr.w	r3, r1, r3
 8009de2:	4a09      	ldr	r2, [pc, #36]	; (8009e08 <HAL_RCC_ClockConfig+0x1c4>)
 8009de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009de6:	4b09      	ldr	r3, [pc, #36]	; (8009e0c <HAL_RCC_ClockConfig+0x1c8>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7f7 fd2e 	bl	800184c <HAL_InitTick>

  return HAL_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	40023c00 	.word	0x40023c00
 8009e00:	40023800 	.word	0x40023800
 8009e04:	0800f988 	.word	0x0800f988
 8009e08:	20000008 	.word	0x20000008
 8009e0c:	2000000c 	.word	0x2000000c

08009e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009e16:	2300      	movs	r3, #0
 8009e18:	607b      	str	r3, [r7, #4]
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	60fb      	str	r3, [r7, #12]
 8009e1e:	2300      	movs	r3, #0
 8009e20:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009e22:	2300      	movs	r3, #0
 8009e24:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e26:	4b63      	ldr	r3, [pc, #396]	; (8009fb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	f003 030c 	and.w	r3, r3, #12
 8009e2e:	2b04      	cmp	r3, #4
 8009e30:	d007      	beq.n	8009e42 <HAL_RCC_GetSysClockFreq+0x32>
 8009e32:	2b08      	cmp	r3, #8
 8009e34:	d008      	beq.n	8009e48 <HAL_RCC_GetSysClockFreq+0x38>
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f040 80b4 	bne.w	8009fa4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009e3c:	4b5e      	ldr	r3, [pc, #376]	; (8009fb8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009e3e:	60bb      	str	r3, [r7, #8]
       break;
 8009e40:	e0b3      	b.n	8009faa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009e42:	4b5e      	ldr	r3, [pc, #376]	; (8009fbc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8009e44:	60bb      	str	r3, [r7, #8]
      break;
 8009e46:	e0b0      	b.n	8009faa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e48:	4b5a      	ldr	r3, [pc, #360]	; (8009fb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009e52:	4b58      	ldr	r3, [pc, #352]	; (8009fb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d04a      	beq.n	8009ef4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e5e:	4b55      	ldr	r3, [pc, #340]	; (8009fb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	099b      	lsrs	r3, r3, #6
 8009e64:	f04f 0400 	mov.w	r4, #0
 8009e68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009e6c:	f04f 0200 	mov.w	r2, #0
 8009e70:	ea03 0501 	and.w	r5, r3, r1
 8009e74:	ea04 0602 	and.w	r6, r4, r2
 8009e78:	4629      	mov	r1, r5
 8009e7a:	4632      	mov	r2, r6
 8009e7c:	f04f 0300 	mov.w	r3, #0
 8009e80:	f04f 0400 	mov.w	r4, #0
 8009e84:	0154      	lsls	r4, r2, #5
 8009e86:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009e8a:	014b      	lsls	r3, r1, #5
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	4622      	mov	r2, r4
 8009e90:	1b49      	subs	r1, r1, r5
 8009e92:	eb62 0206 	sbc.w	r2, r2, r6
 8009e96:	f04f 0300 	mov.w	r3, #0
 8009e9a:	f04f 0400 	mov.w	r4, #0
 8009e9e:	0194      	lsls	r4, r2, #6
 8009ea0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009ea4:	018b      	lsls	r3, r1, #6
 8009ea6:	1a5b      	subs	r3, r3, r1
 8009ea8:	eb64 0402 	sbc.w	r4, r4, r2
 8009eac:	f04f 0100 	mov.w	r1, #0
 8009eb0:	f04f 0200 	mov.w	r2, #0
 8009eb4:	00e2      	lsls	r2, r4, #3
 8009eb6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009eba:	00d9      	lsls	r1, r3, #3
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4614      	mov	r4, r2
 8009ec0:	195b      	adds	r3, r3, r5
 8009ec2:	eb44 0406 	adc.w	r4, r4, r6
 8009ec6:	f04f 0100 	mov.w	r1, #0
 8009eca:	f04f 0200 	mov.w	r2, #0
 8009ece:	0262      	lsls	r2, r4, #9
 8009ed0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009ed4:	0259      	lsls	r1, r3, #9
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	4614      	mov	r4, r2
 8009eda:	4618      	mov	r0, r3
 8009edc:	4621      	mov	r1, r4
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f04f 0400 	mov.w	r4, #0
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	4623      	mov	r3, r4
 8009ee8:	f7f6 f97a 	bl	80001e0 <__aeabi_uldivmod>
 8009eec:	4603      	mov	r3, r0
 8009eee:	460c      	mov	r4, r1
 8009ef0:	60fb      	str	r3, [r7, #12]
 8009ef2:	e049      	b.n	8009f88 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ef4:	4b2f      	ldr	r3, [pc, #188]	; (8009fb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	099b      	lsrs	r3, r3, #6
 8009efa:	f04f 0400 	mov.w	r4, #0
 8009efe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009f02:	f04f 0200 	mov.w	r2, #0
 8009f06:	ea03 0501 	and.w	r5, r3, r1
 8009f0a:	ea04 0602 	and.w	r6, r4, r2
 8009f0e:	4629      	mov	r1, r5
 8009f10:	4632      	mov	r2, r6
 8009f12:	f04f 0300 	mov.w	r3, #0
 8009f16:	f04f 0400 	mov.w	r4, #0
 8009f1a:	0154      	lsls	r4, r2, #5
 8009f1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009f20:	014b      	lsls	r3, r1, #5
 8009f22:	4619      	mov	r1, r3
 8009f24:	4622      	mov	r2, r4
 8009f26:	1b49      	subs	r1, r1, r5
 8009f28:	eb62 0206 	sbc.w	r2, r2, r6
 8009f2c:	f04f 0300 	mov.w	r3, #0
 8009f30:	f04f 0400 	mov.w	r4, #0
 8009f34:	0194      	lsls	r4, r2, #6
 8009f36:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009f3a:	018b      	lsls	r3, r1, #6
 8009f3c:	1a5b      	subs	r3, r3, r1
 8009f3e:	eb64 0402 	sbc.w	r4, r4, r2
 8009f42:	f04f 0100 	mov.w	r1, #0
 8009f46:	f04f 0200 	mov.w	r2, #0
 8009f4a:	00e2      	lsls	r2, r4, #3
 8009f4c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009f50:	00d9      	lsls	r1, r3, #3
 8009f52:	460b      	mov	r3, r1
 8009f54:	4614      	mov	r4, r2
 8009f56:	195b      	adds	r3, r3, r5
 8009f58:	eb44 0406 	adc.w	r4, r4, r6
 8009f5c:	f04f 0100 	mov.w	r1, #0
 8009f60:	f04f 0200 	mov.w	r2, #0
 8009f64:	02a2      	lsls	r2, r4, #10
 8009f66:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009f6a:	0299      	lsls	r1, r3, #10
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	4614      	mov	r4, r2
 8009f70:	4618      	mov	r0, r3
 8009f72:	4621      	mov	r1, r4
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f04f 0400 	mov.w	r4, #0
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	4623      	mov	r3, r4
 8009f7e:	f7f6 f92f 	bl	80001e0 <__aeabi_uldivmod>
 8009f82:	4603      	mov	r3, r0
 8009f84:	460c      	mov	r4, r1
 8009f86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009f88:	4b0a      	ldr	r3, [pc, #40]	; (8009fb4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	0c1b      	lsrs	r3, r3, #16
 8009f8e:	f003 0303 	and.w	r3, r3, #3
 8009f92:	3301      	adds	r3, #1
 8009f94:	005b      	lsls	r3, r3, #1
 8009f96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fa0:	60bb      	str	r3, [r7, #8]
      break;
 8009fa2:	e002      	b.n	8009faa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009fa4:	4b04      	ldr	r3, [pc, #16]	; (8009fb8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009fa6:	60bb      	str	r3, [r7, #8]
      break;
 8009fa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009faa:	68bb      	ldr	r3, [r7, #8]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3714      	adds	r7, #20
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fb4:	40023800 	.word	0x40023800
 8009fb8:	00f42400 	.word	0x00f42400
 8009fbc:	007a1200 	.word	0x007a1200

08009fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009fc4:	4b03      	ldr	r3, [pc, #12]	; (8009fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	20000008 	.word	0x20000008

08009fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009fdc:	f7ff fff0 	bl	8009fc0 <HAL_RCC_GetHCLKFreq>
 8009fe0:	4601      	mov	r1, r0
 8009fe2:	4b05      	ldr	r3, [pc, #20]	; (8009ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	0a9b      	lsrs	r3, r3, #10
 8009fe8:	f003 0307 	and.w	r3, r3, #7
 8009fec:	4a03      	ldr	r2, [pc, #12]	; (8009ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8009fee:	5cd3      	ldrb	r3, [r2, r3]
 8009ff0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	40023800 	.word	0x40023800
 8009ffc:	0800f998 	.word	0x0800f998

0800a000 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	220f      	movs	r2, #15
 800a00e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a010:	4b12      	ldr	r3, [pc, #72]	; (800a05c <HAL_RCC_GetClockConfig+0x5c>)
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	f003 0203 	and.w	r2, r3, #3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a01c:	4b0f      	ldr	r3, [pc, #60]	; (800a05c <HAL_RCC_GetClockConfig+0x5c>)
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a028:	4b0c      	ldr	r3, [pc, #48]	; (800a05c <HAL_RCC_GetClockConfig+0x5c>)
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a034:	4b09      	ldr	r3, [pc, #36]	; (800a05c <HAL_RCC_GetClockConfig+0x5c>)
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	08db      	lsrs	r3, r3, #3
 800a03a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a042:	4b07      	ldr	r3, [pc, #28]	; (800a060 <HAL_RCC_GetClockConfig+0x60>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 020f 	and.w	r2, r3, #15
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	601a      	str	r2, [r3, #0]
}
 800a04e:	bf00      	nop
 800a050:	370c      	adds	r7, #12
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	40023800 	.word	0x40023800
 800a060:	40023c00 	.word	0x40023c00

0800a064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e01d      	b.n	800a0b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d106      	bne.n	800a090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 f815 	bl	800a0ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2202      	movs	r2, #2
 800a094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	3304      	adds	r3, #4
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	4610      	mov	r0, r2
 800a0a4:	f000 f968 	bl	800a378 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a0ba:	b480      	push	{r7}
 800a0bc:	b083      	sub	sp, #12
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a0c2:	bf00      	nop
 800a0c4:	370c      	adds	r7, #12
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b085      	sub	sp, #20
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	68da      	ldr	r2, [r3, #12]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f042 0201 	orr.w	r2, r2, #1
 800a0e4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	f003 0307 	and.w	r3, r3, #7
 800a0f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2b06      	cmp	r3, #6
 800a0f6:	d007      	beq.n	800a108 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f042 0201 	orr.w	r2, r2, #1
 800a106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b082      	sub	sp, #8
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	f003 0302 	and.w	r3, r3, #2
 800a128:	2b02      	cmp	r3, #2
 800a12a:	d122      	bne.n	800a172 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	f003 0302 	and.w	r3, r3, #2
 800a136:	2b02      	cmp	r3, #2
 800a138:	d11b      	bne.n	800a172 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f06f 0202 	mvn.w	r2, #2
 800a142:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	699b      	ldr	r3, [r3, #24]
 800a150:	f003 0303 	and.w	r3, r3, #3
 800a154:	2b00      	cmp	r3, #0
 800a156:	d003      	beq.n	800a160 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 f8ee 	bl	800a33a <HAL_TIM_IC_CaptureCallback>
 800a15e:	e005      	b.n	800a16c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 f8e0 	bl	800a326 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f8f1 	bl	800a34e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	f003 0304 	and.w	r3, r3, #4
 800a17c:	2b04      	cmp	r3, #4
 800a17e:	d122      	bne.n	800a1c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	f003 0304 	and.w	r3, r3, #4
 800a18a:	2b04      	cmp	r3, #4
 800a18c:	d11b      	bne.n	800a1c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f06f 0204 	mvn.w	r2, #4
 800a196:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2202      	movs	r2, #2
 800a19c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	699b      	ldr	r3, [r3, #24]
 800a1a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d003      	beq.n	800a1b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 f8c4 	bl	800a33a <HAL_TIM_IC_CaptureCallback>
 800a1b2:	e005      	b.n	800a1c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 f8b6 	bl	800a326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f8c7 	bl	800a34e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	f003 0308 	and.w	r3, r3, #8
 800a1d0:	2b08      	cmp	r3, #8
 800a1d2:	d122      	bne.n	800a21a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	f003 0308 	and.w	r3, r3, #8
 800a1de:	2b08      	cmp	r3, #8
 800a1e0:	d11b      	bne.n	800a21a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f06f 0208 	mvn.w	r2, #8
 800a1ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2204      	movs	r2, #4
 800a1f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	69db      	ldr	r3, [r3, #28]
 800a1f8:	f003 0303 	and.w	r3, r3, #3
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d003      	beq.n	800a208 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f89a 	bl	800a33a <HAL_TIM_IC_CaptureCallback>
 800a206:	e005      	b.n	800a214 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 f88c 	bl	800a326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f89d 	bl	800a34e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	f003 0310 	and.w	r3, r3, #16
 800a224:	2b10      	cmp	r3, #16
 800a226:	d122      	bne.n	800a26e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	f003 0310 	and.w	r3, r3, #16
 800a232:	2b10      	cmp	r3, #16
 800a234:	d11b      	bne.n	800a26e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f06f 0210 	mvn.w	r2, #16
 800a23e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2208      	movs	r2, #8
 800a244:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	69db      	ldr	r3, [r3, #28]
 800a24c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a250:	2b00      	cmp	r3, #0
 800a252:	d003      	beq.n	800a25c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 f870 	bl	800a33a <HAL_TIM_IC_CaptureCallback>
 800a25a:	e005      	b.n	800a268 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f862 	bl	800a326 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f873 	bl	800a34e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	f003 0301 	and.w	r3, r3, #1
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d10e      	bne.n	800a29a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	f003 0301 	and.w	r3, r3, #1
 800a286:	2b01      	cmp	r3, #1
 800a288:	d107      	bne.n	800a29a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f06f 0201 	mvn.w	r2, #1
 800a292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7f6 fd0d 	bl	8000cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2a4:	2b80      	cmp	r3, #128	; 0x80
 800a2a6:	d10e      	bne.n	800a2c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2b2:	2b80      	cmp	r3, #128	; 0x80
 800a2b4:	d107      	bne.n	800a2c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a2be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 f903 	bl	800a4cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2d0:	2b40      	cmp	r3, #64	; 0x40
 800a2d2:	d10e      	bne.n	800a2f2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2de:	2b40      	cmp	r3, #64	; 0x40
 800a2e0:	d107      	bne.n	800a2f2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a2ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f838 	bl	800a362 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	f003 0320 	and.w	r3, r3, #32
 800a2fc:	2b20      	cmp	r3, #32
 800a2fe:	d10e      	bne.n	800a31e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	f003 0320 	and.w	r3, r3, #32
 800a30a:	2b20      	cmp	r3, #32
 800a30c:	d107      	bne.n	800a31e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f06f 0220 	mvn.w	r2, #32
 800a316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 f8cd 	bl	800a4b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a31e:	bf00      	nop
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a326:	b480      	push	{r7}
 800a328:	b083      	sub	sp, #12
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a32e:	bf00      	nop
 800a330:	370c      	adds	r7, #12
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a33a:	b480      	push	{r7}
 800a33c:	b083      	sub	sp, #12
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a342:	bf00      	nop
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a34e:	b480      	push	{r7}
 800a350:	b083      	sub	sp, #12
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a356:	bf00      	nop
 800a358:	370c      	adds	r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a362:	b480      	push	{r7}
 800a364:	b083      	sub	sp, #12
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a36a:	bf00      	nop
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
	...

0800a378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a40      	ldr	r2, [pc, #256]	; (800a48c <TIM_Base_SetConfig+0x114>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d013      	beq.n	800a3b8 <TIM_Base_SetConfig+0x40>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a396:	d00f      	beq.n	800a3b8 <TIM_Base_SetConfig+0x40>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a3d      	ldr	r2, [pc, #244]	; (800a490 <TIM_Base_SetConfig+0x118>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d00b      	beq.n	800a3b8 <TIM_Base_SetConfig+0x40>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a3c      	ldr	r2, [pc, #240]	; (800a494 <TIM_Base_SetConfig+0x11c>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d007      	beq.n	800a3b8 <TIM_Base_SetConfig+0x40>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a3b      	ldr	r2, [pc, #236]	; (800a498 <TIM_Base_SetConfig+0x120>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d003      	beq.n	800a3b8 <TIM_Base_SetConfig+0x40>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a3a      	ldr	r2, [pc, #232]	; (800a49c <TIM_Base_SetConfig+0x124>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d108      	bne.n	800a3ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4a2f      	ldr	r2, [pc, #188]	; (800a48c <TIM_Base_SetConfig+0x114>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d02b      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3d8:	d027      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4a2c      	ldr	r2, [pc, #176]	; (800a490 <TIM_Base_SetConfig+0x118>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d023      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4a2b      	ldr	r2, [pc, #172]	; (800a494 <TIM_Base_SetConfig+0x11c>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d01f      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4a2a      	ldr	r2, [pc, #168]	; (800a498 <TIM_Base_SetConfig+0x120>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d01b      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4a29      	ldr	r2, [pc, #164]	; (800a49c <TIM_Base_SetConfig+0x124>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d017      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4a28      	ldr	r2, [pc, #160]	; (800a4a0 <TIM_Base_SetConfig+0x128>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d013      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	4a27      	ldr	r2, [pc, #156]	; (800a4a4 <TIM_Base_SetConfig+0x12c>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d00f      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4a26      	ldr	r2, [pc, #152]	; (800a4a8 <TIM_Base_SetConfig+0x130>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d00b      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	4a25      	ldr	r2, [pc, #148]	; (800a4ac <TIM_Base_SetConfig+0x134>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d007      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a24      	ldr	r2, [pc, #144]	; (800a4b0 <TIM_Base_SetConfig+0x138>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d003      	beq.n	800a42a <TIM_Base_SetConfig+0xb2>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a23      	ldr	r2, [pc, #140]	; (800a4b4 <TIM_Base_SetConfig+0x13c>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d108      	bne.n	800a43c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	4313      	orrs	r3, r2
 800a43a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	695b      	ldr	r3, [r3, #20]
 800a446:	4313      	orrs	r3, r2
 800a448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	68fa      	ldr	r2, [r7, #12]
 800a44e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	689a      	ldr	r2, [r3, #8]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a0a      	ldr	r2, [pc, #40]	; (800a48c <TIM_Base_SetConfig+0x114>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d003      	beq.n	800a470 <TIM_Base_SetConfig+0xf8>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4a0c      	ldr	r2, [pc, #48]	; (800a49c <TIM_Base_SetConfig+0x124>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d103      	bne.n	800a478 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	691a      	ldr	r2, [r3, #16]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2201      	movs	r2, #1
 800a47c:	615a      	str	r2, [r3, #20]
}
 800a47e:	bf00      	nop
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	40010000 	.word	0x40010000
 800a490:	40000400 	.word	0x40000400
 800a494:	40000800 	.word	0x40000800
 800a498:	40000c00 	.word	0x40000c00
 800a49c:	40010400 	.word	0x40010400
 800a4a0:	40014000 	.word	0x40014000
 800a4a4:	40014400 	.word	0x40014400
 800a4a8:	40014800 	.word	0x40014800
 800a4ac:	40001800 	.word	0x40001800
 800a4b0:	40001c00 	.word	0x40001c00
 800a4b4:	40002000 	.word	0x40002000

0800a4b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4e0:	b084      	sub	sp, #16
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b084      	sub	sp, #16
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	f107 001c 	add.w	r0, r7, #28
 800a4ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d122      	bne.n	800a53e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a50c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a522:	2b01      	cmp	r3, #1
 800a524:	d105      	bne.n	800a532 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f001 fac6 	bl	800bac4 <USB_CoreReset>
 800a538:	4603      	mov	r3, r0
 800a53a:	73fb      	strb	r3, [r7, #15]
 800a53c:	e01a      	b.n	800a574 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f001 faba 	bl	800bac4 <USB_CoreReset>
 800a550:	4603      	mov	r3, r0
 800a552:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a556:	2b00      	cmp	r3, #0
 800a558:	d106      	bne.n	800a568 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	639a      	str	r2, [r3, #56]	; 0x38
 800a566:	e005      	b.n	800a574 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a576:	2b01      	cmp	r3, #1
 800a578:	d10b      	bne.n	800a592 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	f043 0206 	orr.w	r2, r3, #6
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	f043 0220 	orr.w	r2, r3, #32
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a592:	7bfb      	ldrb	r3, [r7, #15]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a59e:	b004      	add	sp, #16
 800a5a0:	4770      	bx	lr
	...

0800a5a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b087      	sub	sp, #28
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a5b2:	79fb      	ldrb	r3, [r7, #7]
 800a5b4:	2b02      	cmp	r3, #2
 800a5b6:	d165      	bne.n	800a684 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	4a41      	ldr	r2, [pc, #260]	; (800a6c0 <USB_SetTurnaroundTime+0x11c>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d906      	bls.n	800a5ce <USB_SetTurnaroundTime+0x2a>
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	4a40      	ldr	r2, [pc, #256]	; (800a6c4 <USB_SetTurnaroundTime+0x120>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d802      	bhi.n	800a5ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a5c8:	230f      	movs	r3, #15
 800a5ca:	617b      	str	r3, [r7, #20]
 800a5cc:	e062      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	4a3c      	ldr	r2, [pc, #240]	; (800a6c4 <USB_SetTurnaroundTime+0x120>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d906      	bls.n	800a5e4 <USB_SetTurnaroundTime+0x40>
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	4a3b      	ldr	r2, [pc, #236]	; (800a6c8 <USB_SetTurnaroundTime+0x124>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d802      	bhi.n	800a5e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a5de:	230e      	movs	r3, #14
 800a5e0:	617b      	str	r3, [r7, #20]
 800a5e2:	e057      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	4a38      	ldr	r2, [pc, #224]	; (800a6c8 <USB_SetTurnaroundTime+0x124>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d906      	bls.n	800a5fa <USB_SetTurnaroundTime+0x56>
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	4a37      	ldr	r2, [pc, #220]	; (800a6cc <USB_SetTurnaroundTime+0x128>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d802      	bhi.n	800a5fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a5f4:	230d      	movs	r3, #13
 800a5f6:	617b      	str	r3, [r7, #20]
 800a5f8:	e04c      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	4a33      	ldr	r2, [pc, #204]	; (800a6cc <USB_SetTurnaroundTime+0x128>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d906      	bls.n	800a610 <USB_SetTurnaroundTime+0x6c>
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	4a32      	ldr	r2, [pc, #200]	; (800a6d0 <USB_SetTurnaroundTime+0x12c>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d802      	bhi.n	800a610 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a60a:	230c      	movs	r3, #12
 800a60c:	617b      	str	r3, [r7, #20]
 800a60e:	e041      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	4a2f      	ldr	r2, [pc, #188]	; (800a6d0 <USB_SetTurnaroundTime+0x12c>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d906      	bls.n	800a626 <USB_SetTurnaroundTime+0x82>
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	4a2e      	ldr	r2, [pc, #184]	; (800a6d4 <USB_SetTurnaroundTime+0x130>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d802      	bhi.n	800a626 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a620:	230b      	movs	r3, #11
 800a622:	617b      	str	r3, [r7, #20]
 800a624:	e036      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	4a2a      	ldr	r2, [pc, #168]	; (800a6d4 <USB_SetTurnaroundTime+0x130>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d906      	bls.n	800a63c <USB_SetTurnaroundTime+0x98>
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	4a29      	ldr	r2, [pc, #164]	; (800a6d8 <USB_SetTurnaroundTime+0x134>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d802      	bhi.n	800a63c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a636:	230a      	movs	r3, #10
 800a638:	617b      	str	r3, [r7, #20]
 800a63a:	e02b      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	4a26      	ldr	r2, [pc, #152]	; (800a6d8 <USB_SetTurnaroundTime+0x134>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d906      	bls.n	800a652 <USB_SetTurnaroundTime+0xae>
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	4a25      	ldr	r2, [pc, #148]	; (800a6dc <USB_SetTurnaroundTime+0x138>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d802      	bhi.n	800a652 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a64c:	2309      	movs	r3, #9
 800a64e:	617b      	str	r3, [r7, #20]
 800a650:	e020      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	4a21      	ldr	r2, [pc, #132]	; (800a6dc <USB_SetTurnaroundTime+0x138>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d906      	bls.n	800a668 <USB_SetTurnaroundTime+0xc4>
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	4a20      	ldr	r2, [pc, #128]	; (800a6e0 <USB_SetTurnaroundTime+0x13c>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d802      	bhi.n	800a668 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a662:	2308      	movs	r3, #8
 800a664:	617b      	str	r3, [r7, #20]
 800a666:	e015      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	4a1d      	ldr	r2, [pc, #116]	; (800a6e0 <USB_SetTurnaroundTime+0x13c>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d906      	bls.n	800a67e <USB_SetTurnaroundTime+0xda>
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	4a1c      	ldr	r2, [pc, #112]	; (800a6e4 <USB_SetTurnaroundTime+0x140>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d802      	bhi.n	800a67e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a678:	2307      	movs	r3, #7
 800a67a:	617b      	str	r3, [r7, #20]
 800a67c:	e00a      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a67e:	2306      	movs	r3, #6
 800a680:	617b      	str	r3, [r7, #20]
 800a682:	e007      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a684:	79fb      	ldrb	r3, [r7, #7]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d102      	bne.n	800a690 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a68a:	2309      	movs	r3, #9
 800a68c:	617b      	str	r3, [r7, #20]
 800a68e:	e001      	b.n	800a694 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a690:	2309      	movs	r3, #9
 800a692:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	68da      	ldr	r2, [r3, #12]
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	029b      	lsls	r3, r3, #10
 800a6a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a6ac:	431a      	orrs	r2, r3
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	371c      	adds	r7, #28
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr
 800a6c0:	00d8acbf 	.word	0x00d8acbf
 800a6c4:	00e4e1bf 	.word	0x00e4e1bf
 800a6c8:	00f423ff 	.word	0x00f423ff
 800a6cc:	0106737f 	.word	0x0106737f
 800a6d0:	011a499f 	.word	0x011a499f
 800a6d4:	01312cff 	.word	0x01312cff
 800a6d8:	014ca43f 	.word	0x014ca43f
 800a6dc:	016e35ff 	.word	0x016e35ff
 800a6e0:	01a6ab1f 	.word	0x01a6ab1f
 800a6e4:	01e847ff 	.word	0x01e847ff

0800a6e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	f043 0201 	orr.w	r2, r3, #1
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	370c      	adds	r7, #12
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a70a:	b480      	push	{r7}
 800a70c:	b083      	sub	sp, #12
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	f023 0201 	bic.w	r2, r3, #1
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	460b      	mov	r3, r1
 800a736:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a744:	78fb      	ldrb	r3, [r7, #3]
 800a746:	2b01      	cmp	r3, #1
 800a748:	d106      	bne.n	800a758 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	60da      	str	r2, [r3, #12]
 800a756:	e00b      	b.n	800a770 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a758:	78fb      	ldrb	r3, [r7, #3]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d106      	bne.n	800a76c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	60da      	str	r2, [r3, #12]
 800a76a:	e001      	b.n	800a770 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	e003      	b.n	800a778 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a770:	2032      	movs	r0, #50	; 0x32
 800a772:	f7fa f9ed 	bl	8004b50 <HAL_Delay>

  return HAL_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3708      	adds	r7, #8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a780:	b084      	sub	sp, #16
 800a782:	b580      	push	{r7, lr}
 800a784:	b086      	sub	sp, #24
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
 800a78a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a78e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a792:	2300      	movs	r3, #0
 800a794:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a79a:	2300      	movs	r3, #0
 800a79c:	613b      	str	r3, [r7, #16]
 800a79e:	e009      	b.n	800a7b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	3340      	adds	r3, #64	; 0x40
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	4413      	add	r3, r2
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	613b      	str	r3, [r7, #16]
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	2b0e      	cmp	r3, #14
 800a7b8:	d9f2      	bls.n	800a7a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a7ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d11c      	bne.n	800a7fa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7ce:	f043 0302 	orr.w	r3, r3, #2
 800a7d2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	639a      	str	r2, [r3, #56]	; 0x38
 800a7f8:	e00b      	b.n	800a812 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a80a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a818:	461a      	mov	r2, r3
 800a81a:	2300      	movs	r3, #0
 800a81c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a824:	4619      	mov	r1, r3
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a82c:	461a      	mov	r2, r3
 800a82e:	680b      	ldr	r3, [r1, #0]
 800a830:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a834:	2b01      	cmp	r3, #1
 800a836:	d10c      	bne.n	800a852 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d104      	bne.n	800a848 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a83e:	2100      	movs	r1, #0
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 f949 	bl	800aad8 <USB_SetDevSpeed>
 800a846:	e008      	b.n	800a85a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a848:	2101      	movs	r1, #1
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f944 	bl	800aad8 <USB_SetDevSpeed>
 800a850:	e003      	b.n	800a85a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a852:	2103      	movs	r1, #3
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 f93f 	bl	800aad8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a85a:	2110      	movs	r1, #16
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 f8f3 	bl	800aa48 <USB_FlushTxFifo>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d001      	beq.n	800a86c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 f911 	bl	800aa94 <USB_FlushRxFifo>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d001      	beq.n	800a87c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a882:	461a      	mov	r2, r3
 800a884:	2300      	movs	r3, #0
 800a886:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a88e:	461a      	mov	r2, r3
 800a890:	2300      	movs	r3, #0
 800a892:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a89a:	461a      	mov	r2, r3
 800a89c:	2300      	movs	r3, #0
 800a89e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	613b      	str	r3, [r7, #16]
 800a8a4:	e043      	b.n	800a92e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	015a      	lsls	r2, r3, #5
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8bc:	d118      	bne.n	800a8f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d10a      	bne.n	800a8da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	015a      	lsls	r2, r3, #5
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a8d6:	6013      	str	r3, [r2, #0]
 800a8d8:	e013      	b.n	800a902 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	015a      	lsls	r2, r3, #5
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a8ec:	6013      	str	r3, [r2, #0]
 800a8ee:	e008      	b.n	800a902 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	015a      	lsls	r2, r3, #5
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	4413      	add	r3, r2
 800a8f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	2300      	movs	r3, #0
 800a900:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	015a      	lsls	r2, r3, #5
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	4413      	add	r3, r2
 800a90a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a90e:	461a      	mov	r2, r3
 800a910:	2300      	movs	r3, #0
 800a912:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	015a      	lsls	r2, r3, #5
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	4413      	add	r3, r2
 800a91c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a920:	461a      	mov	r2, r3
 800a922:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a926:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	3301      	adds	r3, #1
 800a92c:	613b      	str	r3, [r7, #16]
 800a92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a930:	693a      	ldr	r2, [r7, #16]
 800a932:	429a      	cmp	r2, r3
 800a934:	d3b7      	bcc.n	800a8a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a936:	2300      	movs	r3, #0
 800a938:	613b      	str	r3, [r7, #16]
 800a93a:	e043      	b.n	800a9c4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	015a      	lsls	r2, r3, #5
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	4413      	add	r3, r2
 800a944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a94e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a952:	d118      	bne.n	800a986 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10a      	bne.n	800a970 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	015a      	lsls	r2, r3, #5
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	4413      	add	r3, r2
 800a962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a966:	461a      	mov	r2, r3
 800a968:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a96c:	6013      	str	r3, [r2, #0]
 800a96e:	e013      	b.n	800a998 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	015a      	lsls	r2, r3, #5
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	4413      	add	r3, r2
 800a978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a97c:	461a      	mov	r2, r3
 800a97e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a982:	6013      	str	r3, [r2, #0]
 800a984:	e008      	b.n	800a998 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	015a      	lsls	r2, r3, #5
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	4413      	add	r3, r2
 800a98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a992:	461a      	mov	r2, r3
 800a994:	2300      	movs	r3, #0
 800a996:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	015a      	lsls	r2, r3, #5
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	4413      	add	r3, r2
 800a9a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	015a      	lsls	r2, r3, #5
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a9bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	613b      	str	r3, [r7, #16]
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	693a      	ldr	r2, [r7, #16]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d3b7      	bcc.n	800a93c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	68fa      	ldr	r2, [r7, #12]
 800a9d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a9ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d105      	bne.n	800aa00 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	699b      	ldr	r3, [r3, #24]
 800a9f8:	f043 0210 	orr.w	r2, r3, #16
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	699a      	ldr	r2, [r3, #24]
 800aa04:	4b0f      	ldr	r3, [pc, #60]	; (800aa44 <USB_DevInit+0x2c4>)
 800aa06:	4313      	orrs	r3, r2
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aa0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d005      	beq.n	800aa1e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	f043 0208 	orr.w	r2, r3, #8
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aa1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d107      	bne.n	800aa34 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa2c:	f043 0304 	orr.w	r3, r3, #4
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aa34:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3718      	adds	r7, #24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa40:	b004      	add	sp, #16
 800aa42:	4770      	bx	lr
 800aa44:	803c3800 	.word	0x803c3800

0800aa48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800aa52:	2300      	movs	r3, #0
 800aa54:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	019b      	lsls	r3, r3, #6
 800aa5a:	f043 0220 	orr.w	r2, r3, #32
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	3301      	adds	r3, #1
 800aa66:	60fb      	str	r3, [r7, #12]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	4a09      	ldr	r2, [pc, #36]	; (800aa90 <USB_FlushTxFifo+0x48>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d901      	bls.n	800aa74 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800aa70:	2303      	movs	r3, #3
 800aa72:	e006      	b.n	800aa82 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	f003 0320 	and.w	r3, r3, #32
 800aa7c:	2b20      	cmp	r3, #32
 800aa7e:	d0f0      	beq.n	800aa62 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3714      	adds	r7, #20
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	00030d40 	.word	0x00030d40

0800aa94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2210      	movs	r2, #16
 800aaa4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	60fb      	str	r3, [r7, #12]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4a09      	ldr	r2, [pc, #36]	; (800aad4 <USB_FlushRxFifo+0x40>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d901      	bls.n	800aab8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800aab4:	2303      	movs	r3, #3
 800aab6:	e006      	b.n	800aac6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	f003 0310 	and.w	r3, r3, #16
 800aac0:	2b10      	cmp	r3, #16
 800aac2:	d0f0      	beq.n	800aaa6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	00030d40 	.word	0x00030d40

0800aad8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800aad8:	b480      	push	{r7}
 800aada:	b085      	sub	sp, #20
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	460b      	mov	r3, r1
 800aae2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	78fb      	ldrb	r3, [r7, #3]
 800aaf2:	68f9      	ldr	r1, [r7, #12]
 800aaf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3714      	adds	r7, #20
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ab0a:	b480      	push	{r7}
 800ab0c:	b087      	sub	sp, #28
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	f003 0306 	and.w	r3, r3, #6
 800ab22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d102      	bne.n	800ab30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	75fb      	strb	r3, [r7, #23]
 800ab2e:	e00a      	b.n	800ab46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d002      	beq.n	800ab3c <USB_GetDevSpeed+0x32>
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2b06      	cmp	r3, #6
 800ab3a:	d102      	bne.n	800ab42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ab3c:	2302      	movs	r3, #2
 800ab3e:	75fb      	strb	r3, [r7, #23]
 800ab40:	e001      	b.n	800ab46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ab42:	230f      	movs	r3, #15
 800ab44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ab46:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	371c      	adds	r7, #28
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b085      	sub	sp, #20
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	785b      	ldrb	r3, [r3, #1]
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d13a      	bne.n	800abe6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab76:	69da      	ldr	r2, [r3, #28]
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	f003 030f 	and.w	r3, r3, #15
 800ab80:	2101      	movs	r1, #1
 800ab82:	fa01 f303 	lsl.w	r3, r1, r3
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	68f9      	ldr	r1, [r7, #12]
 800ab8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	015a      	lsls	r2, r3, #5
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	4413      	add	r3, r2
 800ab9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d155      	bne.n	800ac54 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	015a      	lsls	r2, r3, #5
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	4413      	add	r3, r2
 800abb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	78db      	ldrb	r3, [r3, #3]
 800abc2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800abc4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	059b      	lsls	r3, r3, #22
 800abca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800abcc:	4313      	orrs	r3, r2
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	0151      	lsls	r1, r2, #5
 800abd2:	68fa      	ldr	r2, [r7, #12]
 800abd4:	440a      	add	r2, r1
 800abd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abe2:	6013      	str	r3, [r2, #0]
 800abe4:	e036      	b.n	800ac54 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abec:	69da      	ldr	r2, [r3, #28]
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	f003 030f 	and.w	r3, r3, #15
 800abf6:	2101      	movs	r1, #1
 800abf8:	fa01 f303 	lsl.w	r3, r1, r3
 800abfc:	041b      	lsls	r3, r3, #16
 800abfe:	68f9      	ldr	r1, [r7, #12]
 800ac00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac04:	4313      	orrs	r3, r2
 800ac06:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	015a      	lsls	r2, r3, #5
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	4413      	add	r3, r2
 800ac10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d11a      	bne.n	800ac54 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	015a      	lsls	r2, r3, #5
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	4413      	add	r3, r2
 800ac26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	78db      	ldrb	r3, [r3, #3]
 800ac38:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ac3a:	430b      	orrs	r3, r1
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	0151      	lsls	r1, r2, #5
 800ac42:	68fa      	ldr	r2, [r7, #12]
 800ac44:	440a      	add	r2, r1
 800ac46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac52:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
	...

0800ac64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b085      	sub	sp, #20
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	785b      	ldrb	r3, [r3, #1]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d161      	bne.n	800ad44 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	015a      	lsls	r2, r3, #5
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	4413      	add	r3, r2
 800ac88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac96:	d11f      	bne.n	800acd8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	015a      	lsls	r2, r3, #5
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	4413      	add	r3, r2
 800aca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	0151      	lsls	r1, r2, #5
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	440a      	add	r2, r1
 800acae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800acb6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	015a      	lsls	r2, r3, #5
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	4413      	add	r3, r2
 800acc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68ba      	ldr	r2, [r7, #8]
 800acc8:	0151      	lsls	r1, r2, #5
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	440a      	add	r2, r1
 800acce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800acd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	f003 030f 	and.w	r3, r3, #15
 800ace8:	2101      	movs	r1, #1
 800acea:	fa01 f303 	lsl.w	r3, r1, r3
 800acee:	b29b      	uxth	r3, r3
 800acf0:	43db      	mvns	r3, r3
 800acf2:	68f9      	ldr	r1, [r7, #12]
 800acf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acf8:	4013      	ands	r3, r2
 800acfa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad02:	69da      	ldr	r2, [r3, #28]
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	f003 030f 	and.w	r3, r3, #15
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	43db      	mvns	r3, r3
 800ad16:	68f9      	ldr	r1, [r7, #12]
 800ad18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad1c:	4013      	ands	r3, r2
 800ad1e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	015a      	lsls	r2, r3, #5
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	4413      	add	r3, r2
 800ad28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	0159      	lsls	r1, r3, #5
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	440b      	add	r3, r1
 800ad36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	4b35      	ldr	r3, [pc, #212]	; (800ae14 <USB_DeactivateEndpoint+0x1b0>)
 800ad3e:	4013      	ands	r3, r2
 800ad40:	600b      	str	r3, [r1, #0]
 800ad42:	e060      	b.n	800ae06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	015a      	lsls	r2, r3, #5
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad5a:	d11f      	bne.n	800ad9c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	015a      	lsls	r2, r3, #5
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	4413      	add	r3, r2
 800ad64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	0151      	lsls	r1, r2, #5
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	440a      	add	r2, r1
 800ad72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ad7a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	015a      	lsls	r2, r3, #5
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	4413      	add	r3, r2
 800ad84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	0151      	lsls	r1, r2, #5
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	440a      	add	r2, r1
 800ad92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ada2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	f003 030f 	and.w	r3, r3, #15
 800adac:	2101      	movs	r1, #1
 800adae:	fa01 f303 	lsl.w	r3, r1, r3
 800adb2:	041b      	lsls	r3, r3, #16
 800adb4:	43db      	mvns	r3, r3
 800adb6:	68f9      	ldr	r1, [r7, #12]
 800adb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adbc:	4013      	ands	r3, r2
 800adbe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adc6:	69da      	ldr	r2, [r3, #28]
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	f003 030f 	and.w	r3, r3, #15
 800add0:	2101      	movs	r1, #1
 800add2:	fa01 f303 	lsl.w	r3, r1, r3
 800add6:	041b      	lsls	r3, r3, #16
 800add8:	43db      	mvns	r3, r3
 800adda:	68f9      	ldr	r1, [r7, #12]
 800addc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ade0:	4013      	ands	r3, r2
 800ade2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	015a      	lsls	r2, r3, #5
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	4413      	add	r3, r2
 800adec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	0159      	lsls	r1, r3, #5
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	440b      	add	r3, r1
 800adfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adfe:	4619      	mov	r1, r3
 800ae00:	4b05      	ldr	r3, [pc, #20]	; (800ae18 <USB_DeactivateEndpoint+0x1b4>)
 800ae02:	4013      	ands	r3, r2
 800ae04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3714      	adds	r7, #20
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr
 800ae14:	ec337800 	.word	0xec337800
 800ae18:	eff37800 	.word	0xeff37800

0800ae1c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b08a      	sub	sp, #40	; 0x28
 800ae20:	af02      	add	r7, sp, #8
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	4613      	mov	r3, r2
 800ae28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	785b      	ldrb	r3, [r3, #1]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	f040 815c 	bne.w	800b0f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	695b      	ldr	r3, [r3, #20]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d132      	bne.n	800aeac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	015a      	lsls	r2, r3, #5
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae52:	691b      	ldr	r3, [r3, #16]
 800ae54:	69ba      	ldr	r2, [r7, #24]
 800ae56:	0151      	lsls	r1, r2, #5
 800ae58:	69fa      	ldr	r2, [r7, #28]
 800ae5a:	440a      	add	r2, r1
 800ae5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	015a      	lsls	r2, r3, #5
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	4413      	add	r3, r2
 800ae72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae76:	691b      	ldr	r3, [r3, #16]
 800ae78:	69ba      	ldr	r2, [r7, #24]
 800ae7a:	0151      	lsls	r1, r2, #5
 800ae7c:	69fa      	ldr	r2, [r7, #28]
 800ae7e:	440a      	add	r2, r1
 800ae80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae8a:	69bb      	ldr	r3, [r7, #24]
 800ae8c:	015a      	lsls	r2, r3, #5
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	4413      	add	r3, r2
 800ae92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	69ba      	ldr	r2, [r7, #24]
 800ae9a:	0151      	lsls	r1, r2, #5
 800ae9c:	69fa      	ldr	r2, [r7, #28]
 800ae9e:	440a      	add	r2, r1
 800aea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aea4:	0cdb      	lsrs	r3, r3, #19
 800aea6:	04db      	lsls	r3, r3, #19
 800aea8:	6113      	str	r3, [r2, #16]
 800aeaa:	e074      	b.n	800af96 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	015a      	lsls	r2, r3, #5
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeb8:	691b      	ldr	r3, [r3, #16]
 800aeba:	69ba      	ldr	r2, [r7, #24]
 800aebc:	0151      	lsls	r1, r2, #5
 800aebe:	69fa      	ldr	r2, [r7, #28]
 800aec0:	440a      	add	r2, r1
 800aec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aec6:	0cdb      	lsrs	r3, r3, #19
 800aec8:	04db      	lsls	r3, r3, #19
 800aeca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	015a      	lsls	r2, r3, #5
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	4413      	add	r3, r2
 800aed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aed8:	691b      	ldr	r3, [r3, #16]
 800aeda:	69ba      	ldr	r2, [r7, #24]
 800aedc:	0151      	lsls	r1, r2, #5
 800aede:	69fa      	ldr	r2, [r7, #28]
 800aee0:	440a      	add	r2, r1
 800aee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aee6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aeea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aeee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	015a      	lsls	r2, r3, #5
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	4413      	add	r3, r2
 800aef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aefc:	691a      	ldr	r2, [r3, #16]
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	6959      	ldr	r1, [r3, #20]
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	440b      	add	r3, r1
 800af08:	1e59      	subs	r1, r3, #1
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	fbb1 f3f3 	udiv	r3, r1, r3
 800af12:	04d9      	lsls	r1, r3, #19
 800af14:	4b9d      	ldr	r3, [pc, #628]	; (800b18c <USB_EPStartXfer+0x370>)
 800af16:	400b      	ands	r3, r1
 800af18:	69b9      	ldr	r1, [r7, #24]
 800af1a:	0148      	lsls	r0, r1, #5
 800af1c:	69f9      	ldr	r1, [r7, #28]
 800af1e:	4401      	add	r1, r0
 800af20:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800af24:	4313      	orrs	r3, r2
 800af26:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800af28:	69bb      	ldr	r3, [r7, #24]
 800af2a:	015a      	lsls	r2, r3, #5
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	4413      	add	r3, r2
 800af30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af34:	691a      	ldr	r2, [r3, #16]
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	695b      	ldr	r3, [r3, #20]
 800af3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af3e:	69b9      	ldr	r1, [r7, #24]
 800af40:	0148      	lsls	r0, r1, #5
 800af42:	69f9      	ldr	r1, [r7, #28]
 800af44:	4401      	add	r1, r0
 800af46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800af4a:	4313      	orrs	r3, r2
 800af4c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	78db      	ldrb	r3, [r3, #3]
 800af52:	2b01      	cmp	r3, #1
 800af54:	d11f      	bne.n	800af96 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800af56:	69bb      	ldr	r3, [r7, #24]
 800af58:	015a      	lsls	r2, r3, #5
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	4413      	add	r3, r2
 800af5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	69ba      	ldr	r2, [r7, #24]
 800af66:	0151      	lsls	r1, r2, #5
 800af68:	69fa      	ldr	r2, [r7, #28]
 800af6a:	440a      	add	r2, r1
 800af6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af70:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800af74:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	015a      	lsls	r2, r3, #5
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	4413      	add	r3, r2
 800af7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	69ba      	ldr	r2, [r7, #24]
 800af86:	0151      	lsls	r1, r2, #5
 800af88:	69fa      	ldr	r2, [r7, #28]
 800af8a:	440a      	add	r2, r1
 800af8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af94:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800af96:	79fb      	ldrb	r3, [r7, #7]
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d14b      	bne.n	800b034 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d009      	beq.n	800afb8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	015a      	lsls	r2, r3, #5
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	4413      	add	r3, r2
 800afac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb0:	461a      	mov	r2, r3
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	78db      	ldrb	r3, [r3, #3]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d128      	bne.n	800b012 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d110      	bne.n	800aff2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	015a      	lsls	r2, r3, #5
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	4413      	add	r3, r2
 800afd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	69ba      	ldr	r2, [r7, #24]
 800afe0:	0151      	lsls	r1, r2, #5
 800afe2:	69fa      	ldr	r2, [r7, #28]
 800afe4:	440a      	add	r2, r1
 800afe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800afee:	6013      	str	r3, [r2, #0]
 800aff0:	e00f      	b.n	800b012 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	015a      	lsls	r2, r3, #5
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	4413      	add	r3, r2
 800affa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	69ba      	ldr	r2, [r7, #24]
 800b002:	0151      	lsls	r1, r2, #5
 800b004:	69fa      	ldr	r2, [r7, #28]
 800b006:	440a      	add	r2, r1
 800b008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b00c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b010:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	015a      	lsls	r2, r3, #5
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	4413      	add	r3, r2
 800b01a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	69ba      	ldr	r2, [r7, #24]
 800b022:	0151      	lsls	r1, r2, #5
 800b024:	69fa      	ldr	r2, [r7, #28]
 800b026:	440a      	add	r2, r1
 800b028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b02c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b030:	6013      	str	r3, [r2, #0]
 800b032:	e12f      	b.n	800b294 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	015a      	lsls	r2, r3, #5
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	4413      	add	r3, r2
 800b03c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	69ba      	ldr	r2, [r7, #24]
 800b044:	0151      	lsls	r1, r2, #5
 800b046:	69fa      	ldr	r2, [r7, #28]
 800b048:	440a      	add	r2, r1
 800b04a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b04e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b052:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	78db      	ldrb	r3, [r3, #3]
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d015      	beq.n	800b088 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	695b      	ldr	r3, [r3, #20]
 800b060:	2b00      	cmp	r3, #0
 800b062:	f000 8117 	beq.w	800b294 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b06c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	f003 030f 	and.w	r3, r3, #15
 800b076:	2101      	movs	r1, #1
 800b078:	fa01 f303 	lsl.w	r3, r1, r3
 800b07c:	69f9      	ldr	r1, [r7, #28]
 800b07e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b082:	4313      	orrs	r3, r2
 800b084:	634b      	str	r3, [r1, #52]	; 0x34
 800b086:	e105      	b.n	800b294 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b094:	2b00      	cmp	r3, #0
 800b096:	d110      	bne.n	800b0ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	015a      	lsls	r2, r3, #5
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	4413      	add	r3, r2
 800b0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	69ba      	ldr	r2, [r7, #24]
 800b0a8:	0151      	lsls	r1, r2, #5
 800b0aa:	69fa      	ldr	r2, [r7, #28]
 800b0ac:	440a      	add	r2, r1
 800b0ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0b6:	6013      	str	r3, [r2, #0]
 800b0b8:	e00f      	b.n	800b0da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	015a      	lsls	r2, r3, #5
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	69ba      	ldr	r2, [r7, #24]
 800b0ca:	0151      	lsls	r1, r2, #5
 800b0cc:	69fa      	ldr	r2, [r7, #28]
 800b0ce:	440a      	add	r2, r1
 800b0d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	68d9      	ldr	r1, [r3, #12]
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	781a      	ldrb	r2, [r3, #0]
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	695b      	ldr	r3, [r3, #20]
 800b0e6:	b298      	uxth	r0, r3
 800b0e8:	79fb      	ldrb	r3, [r7, #7]
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f000 fa2b 	bl	800b54a <USB_WritePacket>
 800b0f4:	e0ce      	b.n	800b294 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	015a      	lsls	r2, r3, #5
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	69ba      	ldr	r2, [r7, #24]
 800b106:	0151      	lsls	r1, r2, #5
 800b108:	69fa      	ldr	r2, [r7, #28]
 800b10a:	440a      	add	r2, r1
 800b10c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b110:	0cdb      	lsrs	r3, r3, #19
 800b112:	04db      	lsls	r3, r3, #19
 800b114:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	015a      	lsls	r2, r3, #5
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	4413      	add	r3, r2
 800b11e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	69ba      	ldr	r2, [r7, #24]
 800b126:	0151      	lsls	r1, r2, #5
 800b128:	69fa      	ldr	r2, [r7, #28]
 800b12a:	440a      	add	r2, r1
 800b12c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b130:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b134:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b138:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	695b      	ldr	r3, [r3, #20]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d126      	bne.n	800b190 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	015a      	lsls	r2, r3, #5
 800b146:	69fb      	ldr	r3, [r7, #28]
 800b148:	4413      	add	r3, r2
 800b14a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b14e:	691a      	ldr	r2, [r3, #16]
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b158:	69b9      	ldr	r1, [r7, #24]
 800b15a:	0148      	lsls	r0, r1, #5
 800b15c:	69f9      	ldr	r1, [r7, #28]
 800b15e:	4401      	add	r1, r0
 800b160:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b164:	4313      	orrs	r3, r2
 800b166:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	015a      	lsls	r2, r3, #5
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	4413      	add	r3, r2
 800b170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b174:	691b      	ldr	r3, [r3, #16]
 800b176:	69ba      	ldr	r2, [r7, #24]
 800b178:	0151      	lsls	r1, r2, #5
 800b17a:	69fa      	ldr	r2, [r7, #28]
 800b17c:	440a      	add	r2, r1
 800b17e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b182:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b186:	6113      	str	r3, [r2, #16]
 800b188:	e036      	b.n	800b1f8 <USB_EPStartXfer+0x3dc>
 800b18a:	bf00      	nop
 800b18c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	695a      	ldr	r2, [r3, #20]
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	4413      	add	r3, r2
 800b19a:	1e5a      	subs	r2, r3, #1
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1a4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	015a      	lsls	r2, r3, #5
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1b2:	691a      	ldr	r2, [r3, #16]
 800b1b4:	8afb      	ldrh	r3, [r7, #22]
 800b1b6:	04d9      	lsls	r1, r3, #19
 800b1b8:	4b39      	ldr	r3, [pc, #228]	; (800b2a0 <USB_EPStartXfer+0x484>)
 800b1ba:	400b      	ands	r3, r1
 800b1bc:	69b9      	ldr	r1, [r7, #24]
 800b1be:	0148      	lsls	r0, r1, #5
 800b1c0:	69f9      	ldr	r1, [r7, #28]
 800b1c2:	4401      	add	r1, r0
 800b1c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	015a      	lsls	r2, r3, #5
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d8:	691a      	ldr	r2, [r3, #16]
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	8af9      	ldrh	r1, [r7, #22]
 800b1e0:	fb01 f303 	mul.w	r3, r1, r3
 800b1e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1e8:	69b9      	ldr	r1, [r7, #24]
 800b1ea:	0148      	lsls	r0, r1, #5
 800b1ec:	69f9      	ldr	r1, [r7, #28]
 800b1ee:	4401      	add	r1, r0
 800b1f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b1f8:	79fb      	ldrb	r3, [r7, #7]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d10d      	bne.n	800b21a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d009      	beq.n	800b21a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	68d9      	ldr	r1, [r3, #12]
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	015a      	lsls	r2, r3, #5
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	4413      	add	r3, r2
 800b212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b216:	460a      	mov	r2, r1
 800b218:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	78db      	ldrb	r3, [r3, #3]
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d128      	bne.n	800b274 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d110      	bne.n	800b254 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	015a      	lsls	r2, r3, #5
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	4413      	add	r3, r2
 800b23a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	69ba      	ldr	r2, [r7, #24]
 800b242:	0151      	lsls	r1, r2, #5
 800b244:	69fa      	ldr	r2, [r7, #28]
 800b246:	440a      	add	r2, r1
 800b248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b24c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b250:	6013      	str	r3, [r2, #0]
 800b252:	e00f      	b.n	800b274 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b254:	69bb      	ldr	r3, [r7, #24]
 800b256:	015a      	lsls	r2, r3, #5
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	4413      	add	r3, r2
 800b25c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	69ba      	ldr	r2, [r7, #24]
 800b264:	0151      	lsls	r1, r2, #5
 800b266:	69fa      	ldr	r2, [r7, #28]
 800b268:	440a      	add	r2, r1
 800b26a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b26e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b272:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	015a      	lsls	r2, r3, #5
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	4413      	add	r3, r2
 800b27c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	69ba      	ldr	r2, [r7, #24]
 800b284:	0151      	lsls	r1, r2, #5
 800b286:	69fa      	ldr	r2, [r7, #28]
 800b288:	440a      	add	r2, r1
 800b28a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b28e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b292:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3720      	adds	r7, #32
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	1ff80000 	.word	0x1ff80000

0800b2a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b087      	sub	sp, #28
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	785b      	ldrb	r3, [r3, #1]
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	f040 80cd 	bne.w	800b460 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	695b      	ldr	r3, [r3, #20]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d132      	bne.n	800b334 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	015a      	lsls	r2, r3, #5
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	693a      	ldr	r2, [r7, #16]
 800b2de:	0151      	lsls	r1, r2, #5
 800b2e0:	697a      	ldr	r2, [r7, #20]
 800b2e2:	440a      	add	r2, r1
 800b2e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b2ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b2f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	015a      	lsls	r2, r3, #5
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2fe:	691b      	ldr	r3, [r3, #16]
 800b300:	693a      	ldr	r2, [r7, #16]
 800b302:	0151      	lsls	r1, r2, #5
 800b304:	697a      	ldr	r2, [r7, #20]
 800b306:	440a      	add	r2, r1
 800b308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b30c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b310:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	015a      	lsls	r2, r3, #5
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	4413      	add	r3, r2
 800b31a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b31e:	691b      	ldr	r3, [r3, #16]
 800b320:	693a      	ldr	r2, [r7, #16]
 800b322:	0151      	lsls	r1, r2, #5
 800b324:	697a      	ldr	r2, [r7, #20]
 800b326:	440a      	add	r2, r1
 800b328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b32c:	0cdb      	lsrs	r3, r3, #19
 800b32e:	04db      	lsls	r3, r3, #19
 800b330:	6113      	str	r3, [r2, #16]
 800b332:	e04e      	b.n	800b3d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	015a      	lsls	r2, r3, #5
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	4413      	add	r3, r2
 800b33c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	693a      	ldr	r2, [r7, #16]
 800b344:	0151      	lsls	r1, r2, #5
 800b346:	697a      	ldr	r2, [r7, #20]
 800b348:	440a      	add	r2, r1
 800b34a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b34e:	0cdb      	lsrs	r3, r3, #19
 800b350:	04db      	lsls	r3, r3, #19
 800b352:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	015a      	lsls	r2, r3, #5
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	4413      	add	r3, r2
 800b35c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b360:	691b      	ldr	r3, [r3, #16]
 800b362:	693a      	ldr	r2, [r7, #16]
 800b364:	0151      	lsls	r1, r2, #5
 800b366:	697a      	ldr	r2, [r7, #20]
 800b368:	440a      	add	r2, r1
 800b36a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b36e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b372:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b376:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	695a      	ldr	r2, [r3, #20]
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	429a      	cmp	r2, r3
 800b382:	d903      	bls.n	800b38c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	689a      	ldr	r2, [r3, #8]
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	015a      	lsls	r2, r3, #5
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	4413      	add	r3, r2
 800b394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b398:	691b      	ldr	r3, [r3, #16]
 800b39a:	693a      	ldr	r2, [r7, #16]
 800b39c:	0151      	lsls	r1, r2, #5
 800b39e:	697a      	ldr	r2, [r7, #20]
 800b3a0:	440a      	add	r2, r1
 800b3a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	015a      	lsls	r2, r3, #5
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3b8:	691a      	ldr	r2, [r3, #16]
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	695b      	ldr	r3, [r3, #20]
 800b3be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3c2:	6939      	ldr	r1, [r7, #16]
 800b3c4:	0148      	lsls	r0, r1, #5
 800b3c6:	6979      	ldr	r1, [r7, #20]
 800b3c8:	4401      	add	r1, r0
 800b3ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b3d2:	79fb      	ldrb	r3, [r7, #7]
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d11e      	bne.n	800b416 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	691b      	ldr	r3, [r3, #16]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d009      	beq.n	800b3f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	015a      	lsls	r2, r3, #5
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	691b      	ldr	r3, [r3, #16]
 800b3f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	015a      	lsls	r2, r3, #5
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	693a      	ldr	r2, [r7, #16]
 800b404:	0151      	lsls	r1, r2, #5
 800b406:	697a      	ldr	r2, [r7, #20]
 800b408:	440a      	add	r2, r1
 800b40a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b40e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b412:	6013      	str	r3, [r2, #0]
 800b414:	e092      	b.n	800b53c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	015a      	lsls	r2, r3, #5
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	4413      	add	r3, r2
 800b41e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	693a      	ldr	r2, [r7, #16]
 800b426:	0151      	lsls	r1, r2, #5
 800b428:	697a      	ldr	r2, [r7, #20]
 800b42a:	440a      	add	r2, r1
 800b42c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b430:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b434:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	695b      	ldr	r3, [r3, #20]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d07e      	beq.n	800b53c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	f003 030f 	and.w	r3, r3, #15
 800b44e:	2101      	movs	r1, #1
 800b450:	fa01 f303 	lsl.w	r3, r1, r3
 800b454:	6979      	ldr	r1, [r7, #20]
 800b456:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b45a:	4313      	orrs	r3, r2
 800b45c:	634b      	str	r3, [r1, #52]	; 0x34
 800b45e:	e06d      	b.n	800b53c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	015a      	lsls	r2, r3, #5
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	4413      	add	r3, r2
 800b468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	693a      	ldr	r2, [r7, #16]
 800b470:	0151      	lsls	r1, r2, #5
 800b472:	697a      	ldr	r2, [r7, #20]
 800b474:	440a      	add	r2, r1
 800b476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b47a:	0cdb      	lsrs	r3, r3, #19
 800b47c:	04db      	lsls	r3, r3, #19
 800b47e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	015a      	lsls	r2, r3, #5
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	4413      	add	r3, r2
 800b488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b48c:	691b      	ldr	r3, [r3, #16]
 800b48e:	693a      	ldr	r2, [r7, #16]
 800b490:	0151      	lsls	r1, r2, #5
 800b492:	697a      	ldr	r2, [r7, #20]
 800b494:	440a      	add	r2, r1
 800b496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b49a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b49e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b4a2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	695b      	ldr	r3, [r3, #20]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d003      	beq.n	800b4b4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	689a      	ldr	r2, [r3, #8]
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	015a      	lsls	r2, r3, #5
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	693a      	ldr	r2, [r7, #16]
 800b4c4:	0151      	lsls	r1, r2, #5
 800b4c6:	697a      	ldr	r2, [r7, #20]
 800b4c8:	440a      	add	r2, r1
 800b4ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b4d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	015a      	lsls	r2, r3, #5
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	4413      	add	r3, r2
 800b4dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4e0:	691a      	ldr	r2, [r3, #16]
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4ea:	6939      	ldr	r1, [r7, #16]
 800b4ec:	0148      	lsls	r0, r1, #5
 800b4ee:	6979      	ldr	r1, [r7, #20]
 800b4f0:	4401      	add	r1, r0
 800b4f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b4fa:	79fb      	ldrb	r3, [r7, #7]
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d10d      	bne.n	800b51c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d009      	beq.n	800b51c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	68d9      	ldr	r1, [r3, #12]
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	015a      	lsls	r2, r3, #5
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	4413      	add	r3, r2
 800b514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b518:	460a      	mov	r2, r1
 800b51a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	015a      	lsls	r2, r3, #5
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	4413      	add	r3, r2
 800b524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	693a      	ldr	r2, [r7, #16]
 800b52c:	0151      	lsls	r1, r2, #5
 800b52e:	697a      	ldr	r2, [r7, #20]
 800b530:	440a      	add	r2, r1
 800b532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b536:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b53a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	371c      	adds	r7, #28
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr

0800b54a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b54a:	b480      	push	{r7}
 800b54c:	b089      	sub	sp, #36	; 0x24
 800b54e:	af00      	add	r7, sp, #0
 800b550:	60f8      	str	r0, [r7, #12]
 800b552:	60b9      	str	r1, [r7, #8]
 800b554:	4611      	mov	r1, r2
 800b556:	461a      	mov	r2, r3
 800b558:	460b      	mov	r3, r1
 800b55a:	71fb      	strb	r3, [r7, #7]
 800b55c:	4613      	mov	r3, r2
 800b55e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b568:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d11a      	bne.n	800b5a6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b570:	88bb      	ldrh	r3, [r7, #4]
 800b572:	3303      	adds	r3, #3
 800b574:	089b      	lsrs	r3, r3, #2
 800b576:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b578:	2300      	movs	r3, #0
 800b57a:	61bb      	str	r3, [r7, #24]
 800b57c:	e00f      	b.n	800b59e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b57e:	79fb      	ldrb	r3, [r7, #7]
 800b580:	031a      	lsls	r2, r3, #12
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	4413      	add	r3, r2
 800b586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b58a:	461a      	mov	r2, r3
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b592:	69fb      	ldr	r3, [r7, #28]
 800b594:	3304      	adds	r3, #4
 800b596:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	3301      	adds	r3, #1
 800b59c:	61bb      	str	r3, [r7, #24]
 800b59e:	69ba      	ldr	r2, [r7, #24]
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d3eb      	bcc.n	800b57e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3724      	adds	r7, #36	; 0x24
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b089      	sub	sp, #36	; 0x24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	4613      	mov	r3, r2
 800b5c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b5ca:	88fb      	ldrh	r3, [r7, #6]
 800b5cc:	3303      	adds	r3, #3
 800b5ce:	089b      	lsrs	r3, r3, #2
 800b5d0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	61bb      	str	r3, [r7, #24]
 800b5d6:	e00b      	b.n	800b5f0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	601a      	str	r2, [r3, #0]
    pDest++;
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	3304      	adds	r3, #4
 800b5e8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b5ea:	69bb      	ldr	r3, [r7, #24]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	61bb      	str	r3, [r7, #24]
 800b5f0:	69ba      	ldr	r2, [r7, #24]
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d3ef      	bcc.n	800b5d8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b5f8:	69fb      	ldr	r3, [r7, #28]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3724      	adds	r7, #36	; 0x24
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr

0800b606 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b606:	b480      	push	{r7}
 800b608:	b085      	sub	sp, #20
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
 800b60e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	785b      	ldrb	r3, [r3, #1]
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d12c      	bne.n	800b67c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	015a      	lsls	r2, r3, #5
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	4413      	add	r3, r2
 800b62a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	db12      	blt.n	800b65a <USB_EPSetStall+0x54>
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00f      	beq.n	800b65a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	015a      	lsls	r2, r3, #5
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	4413      	add	r3, r2
 800b642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68ba      	ldr	r2, [r7, #8]
 800b64a:	0151      	lsls	r1, r2, #5
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	440a      	add	r2, r1
 800b650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b654:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b658:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	015a      	lsls	r2, r3, #5
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	4413      	add	r3, r2
 800b662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	68ba      	ldr	r2, [r7, #8]
 800b66a:	0151      	lsls	r1, r2, #5
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	440a      	add	r2, r1
 800b670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b678:	6013      	str	r3, [r2, #0]
 800b67a:	e02b      	b.n	800b6d4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	015a      	lsls	r2, r3, #5
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	4413      	add	r3, r2
 800b684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	db12      	blt.n	800b6b4 <USB_EPSetStall+0xae>
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00f      	beq.n	800b6b4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	015a      	lsls	r2, r3, #5
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	4413      	add	r3, r2
 800b69c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	0151      	lsls	r1, r2, #5
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	440a      	add	r2, r1
 800b6aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b6b2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	015a      	lsls	r2, r3, #5
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	68ba      	ldr	r2, [r7, #8]
 800b6c4:	0151      	lsls	r1, r2, #5
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	440a      	add	r2, r1
 800b6ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b6d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3714      	adds	r7, #20
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr

0800b6e2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	b085      	sub	sp, #20
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	785b      	ldrb	r3, [r3, #1]
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d128      	bne.n	800b750 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	015a      	lsls	r2, r3, #5
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	4413      	add	r3, r2
 800b706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	0151      	lsls	r1, r2, #5
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	440a      	add	r2, r1
 800b714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b718:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b71c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	78db      	ldrb	r3, [r3, #3]
 800b722:	2b03      	cmp	r3, #3
 800b724:	d003      	beq.n	800b72e <USB_EPClearStall+0x4c>
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	78db      	ldrb	r3, [r3, #3]
 800b72a:	2b02      	cmp	r3, #2
 800b72c:	d138      	bne.n	800b7a0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	015a      	lsls	r2, r3, #5
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	4413      	add	r3, r2
 800b736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	68ba      	ldr	r2, [r7, #8]
 800b73e:	0151      	lsls	r1, r2, #5
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	440a      	add	r2, r1
 800b744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b74c:	6013      	str	r3, [r2, #0]
 800b74e:	e027      	b.n	800b7a0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	015a      	lsls	r2, r3, #5
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	4413      	add	r3, r2
 800b758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	0151      	lsls	r1, r2, #5
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	440a      	add	r2, r1
 800b766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b76a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b76e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	78db      	ldrb	r3, [r3, #3]
 800b774:	2b03      	cmp	r3, #3
 800b776:	d003      	beq.n	800b780 <USB_EPClearStall+0x9e>
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	78db      	ldrb	r3, [r3, #3]
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d10f      	bne.n	800b7a0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	015a      	lsls	r2, r3, #5
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	4413      	add	r3, r2
 800b788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	68ba      	ldr	r2, [r7, #8]
 800b790:	0151      	lsls	r1, r2, #5
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	440a      	add	r2, r1
 800b796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b79a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b79e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3714      	adds	r7, #20
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr

0800b7ae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b7ae:	b480      	push	{r7}
 800b7b0:	b085      	sub	sp, #20
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	68fa      	ldr	r2, [r7, #12]
 800b7c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b7d0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	78fb      	ldrb	r3, [r7, #3]
 800b7dc:	011b      	lsls	r3, r3, #4
 800b7de:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b7e2:	68f9      	ldr	r1, [r7, #12]
 800b7e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3714      	adds	r7, #20
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr

0800b7fa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b085      	sub	sp, #20
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b814:	f023 0303 	bic.w	r3, r3, #3
 800b818:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b828:	f023 0302 	bic.w	r3, r3, #2
 800b82c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b82e:	2300      	movs	r3, #0
}
 800b830:	4618      	mov	r0, r3
 800b832:	3714      	adds	r7, #20
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr

0800b83c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	68fa      	ldr	r2, [r7, #12]
 800b852:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b856:	f023 0303 	bic.w	r3, r3, #3
 800b85a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b86a:	f043 0302 	orr.w	r3, r3, #2
 800b86e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b870:	2300      	movs	r3, #0
}
 800b872:	4618      	mov	r0, r3
 800b874:	3714      	adds	r7, #20
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr

0800b87e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b87e:	b480      	push	{r7}
 800b880:	b085      	sub	sp, #20
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	695b      	ldr	r3, [r3, #20]
 800b88a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	699b      	ldr	r3, [r3, #24]
 800b890:	68fa      	ldr	r2, [r7, #12]
 800b892:	4013      	ands	r3, r2
 800b894:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b896:	68fb      	ldr	r3, [r7, #12]
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3714      	adds	r7, #20
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8b6:	699b      	ldr	r3, [r3, #24]
 800b8b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8c0:	69db      	ldr	r3, [r3, #28]
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	0c1b      	lsrs	r3, r3, #16
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3714      	adds	r7, #20
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ea:	699b      	ldr	r3, [r3, #24]
 800b8ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8f4:	69db      	ldr	r3, [r3, #28]
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	4013      	ands	r3, r2
 800b8fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	b29b      	uxth	r3, r3
}
 800b900:	4618      	mov	r0, r3
 800b902:	3714      	adds	r7, #20
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr

0800b90c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	460b      	mov	r3, r1
 800b916:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b91c:	78fb      	ldrb	r3, [r7, #3]
 800b91e:	015a      	lsls	r2, r3, #5
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	4413      	add	r3, r2
 800b924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b932:	695b      	ldr	r3, [r3, #20]
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	4013      	ands	r3, r2
 800b938:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b93a:	68bb      	ldr	r3, [r7, #8]
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3714      	adds	r7, #20
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b948:	b480      	push	{r7}
 800b94a:	b087      	sub	sp, #28
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	460b      	mov	r3, r1
 800b952:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b95e:	691b      	ldr	r3, [r3, #16]
 800b960:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b96a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b96c:	78fb      	ldrb	r3, [r7, #3]
 800b96e:	f003 030f 	and.w	r3, r3, #15
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	fa22 f303 	lsr.w	r3, r2, r3
 800b978:	01db      	lsls	r3, r3, #7
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	693a      	ldr	r2, [r7, #16]
 800b97e:	4313      	orrs	r3, r2
 800b980:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b982:	78fb      	ldrb	r3, [r7, #3]
 800b984:	015a      	lsls	r2, r3, #5
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	4413      	add	r3, r2
 800b98a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	693a      	ldr	r2, [r7, #16]
 800b992:	4013      	ands	r3, r2
 800b994:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b996:	68bb      	ldr	r3, [r7, #8]
}
 800b998:	4618      	mov	r0, r3
 800b99a:	371c      	adds	r7, #28
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr

0800b9a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	695b      	ldr	r3, [r3, #20]
 800b9b0:	f003 0301 	and.w	r3, r3, #1
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b9de:	f023 0307 	bic.w	r3, r3, #7
 800b9e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3714      	adds	r7, #20
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr
	...

0800ba08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b087      	sub	sp, #28
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	460b      	mov	r3, r1
 800ba12:	607a      	str	r2, [r7, #4]
 800ba14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	333c      	adds	r3, #60	; 0x3c
 800ba1e:	3304      	adds	r3, #4
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	4a26      	ldr	r2, [pc, #152]	; (800bac0 <USB_EP0_OutStart+0xb8>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d90a      	bls.n	800ba42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba3c:	d101      	bne.n	800ba42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	e037      	b.n	800bab2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba48:	461a      	mov	r2, r3
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	697a      	ldr	r2, [r7, #20]
 800ba58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba68:	691b      	ldr	r3, [r3, #16]
 800ba6a:	697a      	ldr	r2, [r7, #20]
 800ba6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba70:	f043 0318 	orr.w	r3, r3, #24
 800ba74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba7c:	691b      	ldr	r3, [r3, #16]
 800ba7e:	697a      	ldr	r2, [r7, #20]
 800ba80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ba88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ba8a:	7afb      	ldrb	r3, [r7, #11]
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d10f      	bne.n	800bab0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba96:	461a      	mov	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	697a      	ldr	r2, [r7, #20]
 800baa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baaa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800baae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	371c      	adds	r7, #28
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr
 800babe:	bf00      	nop
 800bac0:	4f54300a 	.word	0x4f54300a

0800bac4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bacc:	2300      	movs	r3, #0
 800bace:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	3301      	adds	r3, #1
 800bad4:	60fb      	str	r3, [r7, #12]
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	4a13      	ldr	r2, [pc, #76]	; (800bb28 <USB_CoreReset+0x64>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d901      	bls.n	800bae2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bade:	2303      	movs	r3, #3
 800bae0:	e01b      	b.n	800bb1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	daf2      	bge.n	800bad0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800baea:	2300      	movs	r3, #0
 800baec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	f043 0201 	orr.w	r2, r3, #1
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	3301      	adds	r3, #1
 800bafe:	60fb      	str	r3, [r7, #12]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	4a09      	ldr	r2, [pc, #36]	; (800bb28 <USB_CoreReset+0x64>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d901      	bls.n	800bb0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bb08:	2303      	movs	r3, #3
 800bb0a:	e006      	b.n	800bb1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	f003 0301 	and.w	r3, r3, #1
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d0f0      	beq.n	800bafa <USB_CoreReset+0x36>

  return HAL_OK;
 800bb18:	2300      	movs	r3, #0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3714      	adds	r7, #20
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop
 800bb28:	00030d40 	.word	0x00030d40

0800bb2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	460b      	mov	r3, r1
 800bb36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bb38:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bb3c:	f003 fb94 	bl	800f268 <malloc>
 800bb40:	4603      	mov	r3, r0
 800bb42:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d105      	bne.n	800bb56 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bb52:	2302      	movs	r3, #2
 800bb54:	e066      	b.n	800bc24 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	7c1b      	ldrb	r3, [r3, #16]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d119      	bne.n	800bb9a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bb66:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb6a:	2202      	movs	r2, #2
 800bb6c:	2181      	movs	r1, #129	; 0x81
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f003 f9e5 	bl	800ef3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2201      	movs	r2, #1
 800bb78:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bb7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb7e:	2202      	movs	r2, #2
 800bb80:	2101      	movs	r1, #1
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f003 f9db 	bl	800ef3e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2210      	movs	r2, #16
 800bb94:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bb98:	e016      	b.n	800bbc8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bb9a:	2340      	movs	r3, #64	; 0x40
 800bb9c:	2202      	movs	r2, #2
 800bb9e:	2181      	movs	r1, #129	; 0x81
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f003 f9cc 	bl	800ef3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bbac:	2340      	movs	r3, #64	; 0x40
 800bbae:	2202      	movs	r2, #2
 800bbb0:	2101      	movs	r1, #1
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f003 f9c3 	bl	800ef3e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2210      	movs	r2, #16
 800bbc4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bbc8:	2308      	movs	r3, #8
 800bbca:	2203      	movs	r2, #3
 800bbcc:	2182      	movs	r1, #130	; 0x82
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f003 f9b5 	bl	800ef3e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	7c1b      	ldrb	r3, [r3, #16]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d109      	bne.n	800bc12 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc08:	2101      	movs	r1, #1
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f003 fa86 	bl	800f11c <USBD_LL_PrepareReceive>
 800bc10:	e007      	b.n	800bc22 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc18:	2340      	movs	r3, #64	; 0x40
 800bc1a:	2101      	movs	r1, #1
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f003 fa7d 	bl	800f11c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bc22:	2300      	movs	r3, #0
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3710      	adds	r7, #16
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	460b      	mov	r3, r1
 800bc36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bc3c:	2181      	movs	r1, #129	; 0x81
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f003 f9a3 	bl	800ef8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bc4a:	2101      	movs	r1, #1
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f003 f99c 	bl	800ef8a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2200      	movs	r2, #0
 800bc56:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bc5a:	2182      	movs	r1, #130	; 0x82
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f003 f994 	bl	800ef8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00e      	beq.n	800bc9a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f003 faf3 	bl	800f278 <free>
    pdev->pClassData = NULL;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800bc9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b086      	sub	sp, #24
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcb4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d03a      	beq.n	800bd44 <USBD_CDC_Setup+0xa0>
 800bcce:	2b20      	cmp	r3, #32
 800bcd0:	f040 8097 	bne.w	800be02 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	88db      	ldrh	r3, [r3, #6]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d029      	beq.n	800bd30 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	b25b      	sxtb	r3, r3
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	da11      	bge.n	800bd0a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	683a      	ldr	r2, [r7, #0]
 800bcf0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800bcf2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bcf4:	683a      	ldr	r2, [r7, #0]
 800bcf6:	88d2      	ldrh	r2, [r2, #6]
 800bcf8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bcfa:	6939      	ldr	r1, [r7, #16]
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	88db      	ldrh	r3, [r3, #6]
 800bd00:	461a      	mov	r2, r3
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f001 fa9d 	bl	800d242 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800bd08:	e082      	b.n	800be10 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	785a      	ldrb	r2, [r3, #1]
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	88db      	ldrh	r3, [r3, #6]
 800bd18:	b2da      	uxtb	r2, r3
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bd20:	6939      	ldr	r1, [r7, #16]
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	88db      	ldrh	r3, [r3, #6]
 800bd26:	461a      	mov	r2, r3
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f001 fab6 	bl	800d29a <USBD_CtlPrepareRx>
    break;
 800bd2e:	e06f      	b.n	800be10 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	683a      	ldr	r2, [r7, #0]
 800bd3a:	7850      	ldrb	r0, [r2, #1]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	6839      	ldr	r1, [r7, #0]
 800bd40:	4798      	blx	r3
    break;
 800bd42:	e065      	b.n	800be10 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	785b      	ldrb	r3, [r3, #1]
 800bd48:	2b0b      	cmp	r3, #11
 800bd4a:	d84f      	bhi.n	800bdec <USBD_CDC_Setup+0x148>
 800bd4c:	a201      	add	r2, pc, #4	; (adr r2, 800bd54 <USBD_CDC_Setup+0xb0>)
 800bd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd52:	bf00      	nop
 800bd54:	0800bd85 	.word	0x0800bd85
 800bd58:	0800bdfb 	.word	0x0800bdfb
 800bd5c:	0800bded 	.word	0x0800bded
 800bd60:	0800bded 	.word	0x0800bded
 800bd64:	0800bded 	.word	0x0800bded
 800bd68:	0800bded 	.word	0x0800bded
 800bd6c:	0800bded 	.word	0x0800bded
 800bd70:	0800bded 	.word	0x0800bded
 800bd74:	0800bded 	.word	0x0800bded
 800bd78:	0800bded 	.word	0x0800bded
 800bd7c:	0800bdad 	.word	0x0800bdad
 800bd80:	0800bdd5 	.word	0x0800bdd5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd8a:	2b03      	cmp	r3, #3
 800bd8c:	d107      	bne.n	800bd9e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bd8e:	f107 030c 	add.w	r3, r7, #12
 800bd92:	2202      	movs	r2, #2
 800bd94:	4619      	mov	r1, r3
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f001 fa53 	bl	800d242 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800bd9c:	e030      	b.n	800be00 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800bd9e:	6839      	ldr	r1, [r7, #0]
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f001 f9dd 	bl	800d160 <USBD_CtlError>
        ret = USBD_FAIL;
 800bda6:	2303      	movs	r3, #3
 800bda8:	75fb      	strb	r3, [r7, #23]
      break;
 800bdaa:	e029      	b.n	800be00 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdb2:	2b03      	cmp	r3, #3
 800bdb4:	d107      	bne.n	800bdc6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bdb6:	f107 030f 	add.w	r3, r7, #15
 800bdba:	2201      	movs	r2, #1
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f001 fa3f 	bl	800d242 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800bdc4:	e01c      	b.n	800be00 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800bdc6:	6839      	ldr	r1, [r7, #0]
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f001 f9c9 	bl	800d160 <USBD_CtlError>
        ret = USBD_FAIL;
 800bdce:	2303      	movs	r3, #3
 800bdd0:	75fb      	strb	r3, [r7, #23]
      break;
 800bdd2:	e015      	b.n	800be00 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdda:	2b03      	cmp	r3, #3
 800bddc:	d00f      	beq.n	800bdfe <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800bdde:	6839      	ldr	r1, [r7, #0]
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f001 f9bd 	bl	800d160 <USBD_CtlError>
        ret = USBD_FAIL;
 800bde6:	2303      	movs	r3, #3
 800bde8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800bdea:	e008      	b.n	800bdfe <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800bdec:	6839      	ldr	r1, [r7, #0]
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f001 f9b6 	bl	800d160 <USBD_CtlError>
      ret = USBD_FAIL;
 800bdf4:	2303      	movs	r3, #3
 800bdf6:	75fb      	strb	r3, [r7, #23]
      break;
 800bdf8:	e002      	b.n	800be00 <USBD_CDC_Setup+0x15c>
      break;
 800bdfa:	bf00      	nop
 800bdfc:	e008      	b.n	800be10 <USBD_CDC_Setup+0x16c>
      break;
 800bdfe:	bf00      	nop
    }
    break;
 800be00:	e006      	b.n	800be10 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800be02:	6839      	ldr	r1, [r7, #0]
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f001 f9ab 	bl	800d160 <USBD_CtlError>
    ret = USBD_FAIL;
 800be0a:	2303      	movs	r3, #3
 800be0c:	75fb      	strb	r3, [r7, #23]
    break;
 800be0e:	bf00      	nop
  }

  return (uint8_t)ret;
 800be10:	7dfb      	ldrb	r3, [r7, #23]
}
 800be12:	4618      	mov	r0, r3
 800be14:	3718      	adds	r7, #24
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop

0800be1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	460b      	mov	r3, r1
 800be26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be36:	2b00      	cmp	r3, #0
 800be38:	d101      	bne.n	800be3e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800be3a:	2303      	movs	r3, #3
 800be3c:	e049      	b.n	800bed2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800be46:	78fa      	ldrb	r2, [r7, #3]
 800be48:	6879      	ldr	r1, [r7, #4]
 800be4a:	4613      	mov	r3, r2
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	4413      	add	r3, r2
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	440b      	add	r3, r1
 800be54:	3318      	adds	r3, #24
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d029      	beq.n	800beb0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800be5c:	78fa      	ldrb	r2, [r7, #3]
 800be5e:	6879      	ldr	r1, [r7, #4]
 800be60:	4613      	mov	r3, r2
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	4413      	add	r3, r2
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	440b      	add	r3, r1
 800be6a:	3318      	adds	r3, #24
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	78f9      	ldrb	r1, [r7, #3]
 800be70:	68f8      	ldr	r0, [r7, #12]
 800be72:	460b      	mov	r3, r1
 800be74:	00db      	lsls	r3, r3, #3
 800be76:	1a5b      	subs	r3, r3, r1
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	4403      	add	r3, r0
 800be7c:	3344      	adds	r3, #68	; 0x44
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	fbb2 f1f3 	udiv	r1, r2, r3
 800be84:	fb03 f301 	mul.w	r3, r3, r1
 800be88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d110      	bne.n	800beb0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800be8e:	78fa      	ldrb	r2, [r7, #3]
 800be90:	6879      	ldr	r1, [r7, #4]
 800be92:	4613      	mov	r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	4413      	add	r3, r2
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	440b      	add	r3, r1
 800be9c:	3318      	adds	r3, #24
 800be9e:	2200      	movs	r2, #0
 800bea0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bea2:	78f9      	ldrb	r1, [r7, #3]
 800bea4:	2300      	movs	r3, #0
 800bea6:	2200      	movs	r2, #0
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f003 f916 	bl	800f0da <USBD_LL_Transmit>
 800beae:	e00f      	b.n	800bed0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	2200      	movs	r2, #0
 800beb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bebe:	691b      	ldr	r3, [r3, #16]
 800bec0:	68ba      	ldr	r2, [r7, #8]
 800bec2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bec6:	68ba      	ldr	r2, [r7, #8]
 800bec8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800becc:	78fa      	ldrb	r2, [r7, #3]
 800bece:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800bed0:	2300      	movs	r3, #0
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3710      	adds	r7, #16
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}

0800beda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800beda:	b580      	push	{r7, lr}
 800bedc:	b084      	sub	sp, #16
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
 800bee2:	460b      	mov	r3, r1
 800bee4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800beec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d101      	bne.n	800befc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bef8:	2303      	movs	r3, #3
 800befa:	e015      	b.n	800bf28 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800befc:	78fb      	ldrb	r3, [r7, #3]
 800befe:	4619      	mov	r1, r3
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f003 f92c 	bl	800f15e <USBD_LL_GetRxDataSize>
 800bf06:	4602      	mov	r2, r0
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	68fa      	ldr	r2, [r7, #12]
 800bf18:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bf22:	4611      	mov	r1, r2
 800bf24:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf3e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d015      	beq.n	800bf76 <USBD_CDC_EP0_RxReady+0x46>
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bf50:	2bff      	cmp	r3, #255	; 0xff
 800bf52:	d010      	beq.n	800bf76 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	68fa      	ldr	r2, [r7, #12]
 800bf5e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bf62:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bf64:	68fa      	ldr	r2, [r7, #12]
 800bf66:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bf6a:	b292      	uxth	r2, r2
 800bf6c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	22ff      	movs	r2, #255	; 0xff
 800bf72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b083      	sub	sp, #12
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2243      	movs	r2, #67	; 0x43
 800bf8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bf8e:	4b03      	ldr	r3, [pc, #12]	; (800bf9c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	370c      	adds	r7, #12
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr
 800bf9c:	2000009c 	.word	0x2000009c

0800bfa0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2243      	movs	r2, #67	; 0x43
 800bfac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bfae:	4b03      	ldr	r3, [pc, #12]	; (800bfbc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	370c      	adds	r7, #12
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr
 800bfbc:	20000058 	.word	0x20000058

0800bfc0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b083      	sub	sp, #12
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2243      	movs	r2, #67	; 0x43
 800bfcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bfce:	4b03      	ldr	r3, [pc, #12]	; (800bfdc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	370c      	adds	r7, #12
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr
 800bfdc:	200000e0 	.word	0x200000e0

0800bfe0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	220a      	movs	r2, #10
 800bfec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bfee:	4b03      	ldr	r3, [pc, #12]	; (800bffc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	370c      	adds	r7, #12
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr
 800bffc:	20000014 	.word	0x20000014

0800c000 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d101      	bne.n	800c014 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c010:	2303      	movs	r3, #3
 800c012:	e004      	b.n	800c01e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	683a      	ldr	r2, [r7, #0]
 800c018:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	370c      	adds	r7, #12
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr

0800c02a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c02a:	b480      	push	{r7}
 800c02c:	b087      	sub	sp, #28
 800c02e:	af00      	add	r7, sp, #0
 800c030:	60f8      	str	r0, [r7, #12]
 800c032:	60b9      	str	r1, [r7, #8]
 800c034:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c03c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	68ba      	ldr	r2, [r7, #8]
 800c042:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c04e:	2300      	movs	r3, #0
}
 800c050:	4618      	mov	r0, r3
 800c052:	371c      	adds	r7, #28
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b085      	sub	sp, #20
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c06c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	683a      	ldr	r2, [r7, #0]
 800c072:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c076:	2300      	movs	r3, #0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3714      	adds	r7, #20
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c092:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c094:	2301      	movs	r3, #1
 800c096:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d101      	bne.n	800c0a6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c0a2:	2303      	movs	r3, #3
 800c0a4:	e01a      	b.n	800c0dc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d114      	bne.n	800c0da <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c0ce:	2181      	movs	r1, #129	; 0x81
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f003 f802 	bl	800f0da <USBD_LL_Transmit>

    ret = USBD_OK;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3710      	adds	r7, #16
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d101      	bne.n	800c102 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c0fe:	2303      	movs	r3, #3
 800c100:	e016      	b.n	800c130 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	7c1b      	ldrb	r3, [r3, #16]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d109      	bne.n	800c11e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c110:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c114:	2101      	movs	r1, #1
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f003 f800 	bl	800f11c <USBD_LL_PrepareReceive>
 800c11c:	e007      	b.n	800c12e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c124:	2340      	movs	r3, #64	; 0x40
 800c126:	2101      	movs	r1, #1
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f002 fff7 	bl	800f11c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c12e:	2300      	movs	r3, #0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3710      	adds	r7, #16
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	4613      	mov	r3, r2
 800c144:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d101      	bne.n	800c150 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c14c:	2303      	movs	r3, #3
 800c14e:	e025      	b.n	800c19c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c156:	2b00      	cmp	r3, #0
 800c158:	d003      	beq.n	800c162 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2200      	movs	r2, #0
 800c15e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d003      	beq.n	800c174 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2200      	movs	r2, #0
 800c170:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d003      	beq.n	800c182 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	68ba      	ldr	r2, [r7, #8]
 800c17e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2201      	movs	r2, #1
 800c186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	79fa      	ldrb	r2, [r7, #7]
 800c18e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c190:	68f8      	ldr	r0, [r7, #12]
 800c192:	f002 fe6d 	bl	800ee70 <USBD_LL_Init>
 800c196:	4603      	mov	r3, r0
 800c198:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c19a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3718      	adds	r7, #24
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d101      	bne.n	800c1bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c1b8:	2303      	movs	r3, #3
 800c1ba:	e010      	b.n	800c1de <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	683a      	ldr	r2, [r7, #0]
 800c1c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1cc:	f107 020e 	add.w	r2, r7, #14
 800c1d0:	4610      	mov	r0, r2
 800c1d2:	4798      	blx	r3
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800c1dc:	2300      	movs	r3, #0
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3710      	adds	r7, #16
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b082      	sub	sp, #8
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f002 fe8a 	bl	800ef08 <USBD_LL_Start>
 800c1f4:	4603      	mov	r3, r0
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3708      	adds	r7, #8
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c1fe:	b480      	push	{r7}
 800c200:	b083      	sub	sp, #12
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c206:	2300      	movs	r3, #0
}
 800c208:	4618      	mov	r0, r3
 800c20a:	370c      	adds	r7, #12
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	460b      	mov	r3, r1
 800c21e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c220:	2303      	movs	r3, #3
 800c222:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d009      	beq.n	800c242 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	78fa      	ldrb	r2, [r7, #3]
 800c238:	4611      	mov	r1, r2
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	4798      	blx	r3
 800c23e:	4603      	mov	r3, r0
 800c240:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c242:	7bfb      	ldrb	r3, [r7, #15]
}
 800c244:	4618      	mov	r0, r3
 800c246:	3710      	adds	r7, #16
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	460b      	mov	r3, r1
 800c256:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d007      	beq.n	800c272 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	78fa      	ldrb	r2, [r7, #3]
 800c26c:	4611      	mov	r1, r2
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	4798      	blx	r3
  }

  return USBD_OK;
 800c272:	2300      	movs	r3, #0
}
 800c274:	4618      	mov	r0, r3
 800c276:	3708      	adds	r7, #8
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}

0800c27c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c28c:	6839      	ldr	r1, [r7, #0]
 800c28e:	4618      	mov	r0, r3
 800c290:	f000 ff2c 	bl	800d0ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2201      	movs	r2, #1
 800c298:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c2b0:	f003 031f 	and.w	r3, r3, #31
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d00e      	beq.n	800c2d6 <USBD_LL_SetupStage+0x5a>
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d302      	bcc.n	800c2c2 <USBD_LL_SetupStage+0x46>
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d014      	beq.n	800c2ea <USBD_LL_SetupStage+0x6e>
 800c2c0:	e01d      	b.n	800c2fe <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 fa18 	bl	800c700 <USBD_StdDevReq>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	73fb      	strb	r3, [r7, #15]
      break;
 800c2d4:	e020      	b.n	800c318 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c2dc:	4619      	mov	r1, r3
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 fa7c 	bl	800c7dc <USBD_StdItfReq>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	73fb      	strb	r3, [r7, #15]
      break;
 800c2e8:	e016      	b.n	800c318 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fab8 	bl	800c868 <USBD_StdEPReq>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c2fc:	e00c      	b.n	800c318 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c304:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	4619      	mov	r1, r3
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f002 fe5b 	bl	800efc8 <USBD_LL_StallEP>
 800c312:	4603      	mov	r3, r0
 800c314:	73fb      	strb	r3, [r7, #15]
      break;
 800c316:	bf00      	nop
  }

  return ret;
 800c318:	7bfb      	ldrb	r3, [r7, #15]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3710      	adds	r7, #16
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c322:	b580      	push	{r7, lr}
 800c324:	b086      	sub	sp, #24
 800c326:	af00      	add	r7, sp, #0
 800c328:	60f8      	str	r0, [r7, #12]
 800c32a:	460b      	mov	r3, r1
 800c32c:	607a      	str	r2, [r7, #4]
 800c32e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c330:	7afb      	ldrb	r3, [r7, #11]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d137      	bne.n	800c3a6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c33c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c344:	2b03      	cmp	r3, #3
 800c346:	d14a      	bne.n	800c3de <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	689a      	ldr	r2, [r3, #8]
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	68db      	ldr	r3, [r3, #12]
 800c350:	429a      	cmp	r2, r3
 800c352:	d913      	bls.n	800c37c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	689a      	ldr	r2, [r3, #8]
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	1ad2      	subs	r2, r2, r3
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	68da      	ldr	r2, [r3, #12]
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	689b      	ldr	r3, [r3, #8]
 800c36a:	4293      	cmp	r3, r2
 800c36c:	bf28      	it	cs
 800c36e:	4613      	movcs	r3, r2
 800c370:	461a      	mov	r2, r3
 800c372:	6879      	ldr	r1, [r7, #4]
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f000 ffad 	bl	800d2d4 <USBD_CtlContinueRx>
 800c37a:	e030      	b.n	800c3de <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c382:	691b      	ldr	r3, [r3, #16]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00a      	beq.n	800c39e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c38e:	2b03      	cmp	r3, #3
 800c390:	d105      	bne.n	800c39e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c398:	691b      	ldr	r3, [r3, #16]
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800c39e:	68f8      	ldr	r0, [r7, #12]
 800c3a0:	f000 ffa9 	bl	800d2f6 <USBD_CtlSendStatus>
 800c3a4:	e01b      	b.n	800c3de <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ac:	699b      	ldr	r3, [r3, #24]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d013      	beq.n	800c3da <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c3b8:	2b03      	cmp	r3, #3
 800c3ba:	d10e      	bne.n	800c3da <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3c2:	699b      	ldr	r3, [r3, #24]
 800c3c4:	7afa      	ldrb	r2, [r7, #11]
 800c3c6:	4611      	mov	r1, r2
 800c3c8:	68f8      	ldr	r0, [r7, #12]
 800c3ca:	4798      	blx	r3
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c3d0:	7dfb      	ldrb	r3, [r7, #23]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d003      	beq.n	800c3de <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800c3d6:	7dfb      	ldrb	r3, [r7, #23]
 800c3d8:	e002      	b.n	800c3e0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c3da:	2303      	movs	r3, #3
 800c3dc:	e000      	b.n	800c3e0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800c3de:	2300      	movs	r3, #0
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3718      	adds	r7, #24
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b086      	sub	sp, #24
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	607a      	str	r2, [r7, #4]
 800c3f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c3f6:	7afb      	ldrb	r3, [r7, #11]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d16a      	bne.n	800c4d2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	3314      	adds	r3, #20
 800c400:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c408:	2b02      	cmp	r3, #2
 800c40a:	d155      	bne.n	800c4b8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	689a      	ldr	r2, [r3, #8]
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	429a      	cmp	r2, r3
 800c416:	d914      	bls.n	800c442 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	689a      	ldr	r2, [r3, #8]
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	1ad2      	subs	r2, r2, r3
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	461a      	mov	r2, r3
 800c42c:	6879      	ldr	r1, [r7, #4]
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f000 ff22 	bl	800d278 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c434:	2300      	movs	r3, #0
 800c436:	2200      	movs	r2, #0
 800c438:	2100      	movs	r1, #0
 800c43a:	68f8      	ldr	r0, [r7, #12]
 800c43c:	f002 fe6e 	bl	800f11c <USBD_LL_PrepareReceive>
 800c440:	e03a      	b.n	800c4b8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	68da      	ldr	r2, [r3, #12]
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d11c      	bne.n	800c488 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	685a      	ldr	r2, [r3, #4]
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c456:	429a      	cmp	r2, r3
 800c458:	d316      	bcc.n	800c488 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	685a      	ldr	r2, [r3, #4]
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c464:	429a      	cmp	r2, r3
 800c466:	d20f      	bcs.n	800c488 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c468:	2200      	movs	r2, #0
 800c46a:	2100      	movs	r1, #0
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	f000 ff03 	bl	800d278 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2200      	movs	r2, #0
 800c476:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c47a:	2300      	movs	r3, #0
 800c47c:	2200      	movs	r2, #0
 800c47e:	2100      	movs	r1, #0
 800c480:	68f8      	ldr	r0, [r7, #12]
 800c482:	f002 fe4b 	bl	800f11c <USBD_LL_PrepareReceive>
 800c486:	e017      	b.n	800c4b8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d00a      	beq.n	800c4aa <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c49a:	2b03      	cmp	r3, #3
 800c49c:	d105      	bne.n	800c4aa <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	68f8      	ldr	r0, [r7, #12]
 800c4a8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4aa:	2180      	movs	r1, #128	; 0x80
 800c4ac:	68f8      	ldr	r0, [r7, #12]
 800c4ae:	f002 fd8b 	bl	800efc8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c4b2:	68f8      	ldr	r0, [r7, #12]
 800c4b4:	f000 ff32 	bl	800d31c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d123      	bne.n	800c50a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c4c2:	68f8      	ldr	r0, [r7, #12]
 800c4c4:	f7ff fe9b 	bl	800c1fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c4d0:	e01b      	b.n	800c50a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4d8:	695b      	ldr	r3, [r3, #20]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d013      	beq.n	800c506 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c4e4:	2b03      	cmp	r3, #3
 800c4e6:	d10e      	bne.n	800c506 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4ee:	695b      	ldr	r3, [r3, #20]
 800c4f0:	7afa      	ldrb	r2, [r7, #11]
 800c4f2:	4611      	mov	r1, r2
 800c4f4:	68f8      	ldr	r0, [r7, #12]
 800c4f6:	4798      	blx	r3
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c4fc:	7dfb      	ldrb	r3, [r7, #23]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d003      	beq.n	800c50a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800c502:	7dfb      	ldrb	r3, [r7, #23]
 800c504:	e002      	b.n	800c50c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c506:	2303      	movs	r3, #3
 800c508:	e000      	b.n	800c50c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800c50a:	2300      	movs	r3, #0
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3718      	adds	r7, #24
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2201      	movs	r2, #1
 800c520:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2200      	movs	r2, #0
 800c528:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2200      	movs	r2, #0
 800c536:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c540:	2b00      	cmp	r3, #0
 800c542:	d009      	beq.n	800c558 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	6852      	ldr	r2, [r2, #4]
 800c550:	b2d2      	uxtb	r2, r2
 800c552:	4611      	mov	r1, r2
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c558:	2340      	movs	r3, #64	; 0x40
 800c55a:	2200      	movs	r2, #0
 800c55c:	2100      	movs	r1, #0
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f002 fced 	bl	800ef3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2201      	movs	r2, #1
 800c568:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2240      	movs	r2, #64	; 0x40
 800c570:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c574:	2340      	movs	r3, #64	; 0x40
 800c576:	2200      	movs	r2, #0
 800c578:	2180      	movs	r1, #128	; 0x80
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f002 fcdf 	bl	800ef3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2201      	movs	r2, #1
 800c584:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2240      	movs	r2, #64	; 0x40
 800c58a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c58c:	2300      	movs	r3, #0
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3708      	adds	r7, #8
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c596:	b480      	push	{r7}
 800c598:	b083      	sub	sp, #12
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
 800c59e:	460b      	mov	r3, r1
 800c5a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	78fa      	ldrb	r2, [r7, #3]
 800c5a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	370c      	adds	r7, #12
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr

0800c5b6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c5b6:	b480      	push	{r7}
 800c5b8:	b083      	sub	sp, #12
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2204      	movs	r2, #4
 800c5ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5ee:	2b04      	cmp	r3, #4
 800c5f0:	d105      	bne.n	800c5fe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c5fe:	2300      	movs	r3, #0
}
 800c600:	4618      	mov	r0, r3
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c61a:	2b03      	cmp	r3, #3
 800c61c:	d10b      	bne.n	800c636 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c624:	69db      	ldr	r3, [r3, #28]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d005      	beq.n	800c636 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c630:	69db      	ldr	r3, [r3, #28]
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c636:	2300      	movs	r3, #0
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	460b      	mov	r3, r1
 800c64a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c64c:	2300      	movs	r3, #0
}
 800c64e:	4618      	mov	r0, r3
 800c650:	370c      	adds	r7, #12
 800c652:	46bd      	mov	sp, r7
 800c654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c658:	4770      	bx	lr

0800c65a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c65a:	b480      	push	{r7}
 800c65c:	b083      	sub	sp, #12
 800c65e:	af00      	add	r7, sp, #0
 800c660:	6078      	str	r0, [r7, #4]
 800c662:	460b      	mov	r3, r1
 800c664:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c666:	2300      	movs	r3, #0
}
 800c668:	4618      	mov	r0, r3
 800c66a:	370c      	adds	r7, #12
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr

0800c674 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c67c:	2300      	movs	r3, #0
}
 800c67e:	4618      	mov	r0, r3
 800c680:	370c      	adds	r7, #12
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr

0800c68a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c68a:	b580      	push	{r7, lr}
 800c68c:	b082      	sub	sp, #8
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2201      	movs	r2, #1
 800c696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d009      	beq.n	800c6b8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	6852      	ldr	r2, [r2, #4]
 800c6b0:	b2d2      	uxtb	r2, r2
 800c6b2:	4611      	mov	r1, r2
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	4798      	blx	r3
  }

  return USBD_OK;
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c6c2:	b480      	push	{r7}
 800c6c4:	b087      	sub	sp, #28
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c6e0:	8a3b      	ldrh	r3, [r7, #16]
 800c6e2:	021b      	lsls	r3, r3, #8
 800c6e4:	b21a      	sxth	r2, r3
 800c6e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	b21b      	sxth	r3, r3
 800c6ee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c6f0:	89fb      	ldrh	r3, [r7, #14]
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	371c      	adds	r7, #28
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
	...

0800c700 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b084      	sub	sp, #16
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c70a:	2300      	movs	r3, #0
 800c70c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c716:	2b20      	cmp	r3, #32
 800c718:	d004      	beq.n	800c724 <USBD_StdDevReq+0x24>
 800c71a:	2b40      	cmp	r3, #64	; 0x40
 800c71c:	d002      	beq.n	800c724 <USBD_StdDevReq+0x24>
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d00a      	beq.n	800c738 <USBD_StdDevReq+0x38>
 800c722:	e050      	b.n	800c7c6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c72a:	689b      	ldr	r3, [r3, #8]
 800c72c:	6839      	ldr	r1, [r7, #0]
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	4798      	blx	r3
 800c732:	4603      	mov	r3, r0
 800c734:	73fb      	strb	r3, [r7, #15]
    break;
 800c736:	e04b      	b.n	800c7d0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	785b      	ldrb	r3, [r3, #1]
 800c73c:	2b09      	cmp	r3, #9
 800c73e:	d83c      	bhi.n	800c7ba <USBD_StdDevReq+0xba>
 800c740:	a201      	add	r2, pc, #4	; (adr r2, 800c748 <USBD_StdDevReq+0x48>)
 800c742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c746:	bf00      	nop
 800c748:	0800c79d 	.word	0x0800c79d
 800c74c:	0800c7b1 	.word	0x0800c7b1
 800c750:	0800c7bb 	.word	0x0800c7bb
 800c754:	0800c7a7 	.word	0x0800c7a7
 800c758:	0800c7bb 	.word	0x0800c7bb
 800c75c:	0800c77b 	.word	0x0800c77b
 800c760:	0800c771 	.word	0x0800c771
 800c764:	0800c7bb 	.word	0x0800c7bb
 800c768:	0800c793 	.word	0x0800c793
 800c76c:	0800c785 	.word	0x0800c785
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c770:	6839      	ldr	r1, [r7, #0]
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 f9ce 	bl	800cb14 <USBD_GetDescriptor>
      break;
 800c778:	e024      	b.n	800c7c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c77a:	6839      	ldr	r1, [r7, #0]
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f000 fb33 	bl	800cde8 <USBD_SetAddress>
      break;
 800c782:	e01f      	b.n	800c7c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c784:	6839      	ldr	r1, [r7, #0]
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 fb70 	bl	800ce6c <USBD_SetConfig>
 800c78c:	4603      	mov	r3, r0
 800c78e:	73fb      	strb	r3, [r7, #15]
      break;
 800c790:	e018      	b.n	800c7c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c792:	6839      	ldr	r1, [r7, #0]
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 fc0d 	bl	800cfb4 <USBD_GetConfig>
      break;
 800c79a:	e013      	b.n	800c7c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c79c:	6839      	ldr	r1, [r7, #0]
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 fc3c 	bl	800d01c <USBD_GetStatus>
      break;
 800c7a4:	e00e      	b.n	800c7c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c7a6:	6839      	ldr	r1, [r7, #0]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 fc6a 	bl	800d082 <USBD_SetFeature>
      break;
 800c7ae:	e009      	b.n	800c7c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c7b0:	6839      	ldr	r1, [r7, #0]
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 fc79 	bl	800d0aa <USBD_ClrFeature>
      break;
 800c7b8:	e004      	b.n	800c7c4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c7ba:	6839      	ldr	r1, [r7, #0]
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 fccf 	bl	800d160 <USBD_CtlError>
      break;
 800c7c2:	bf00      	nop
    }
    break;
 800c7c4:	e004      	b.n	800c7d0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c7c6:	6839      	ldr	r1, [r7, #0]
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 fcc9 	bl	800d160 <USBD_CtlError>
    break;
 800c7ce:	bf00      	nop
  }

  return ret;
 800c7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3710      	adds	r7, #16
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	bf00      	nop

0800c7dc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b084      	sub	sp, #16
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c7f2:	2b20      	cmp	r3, #32
 800c7f4:	d003      	beq.n	800c7fe <USBD_StdItfReq+0x22>
 800c7f6:	2b40      	cmp	r3, #64	; 0x40
 800c7f8:	d001      	beq.n	800c7fe <USBD_StdItfReq+0x22>
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d12a      	bne.n	800c854 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c804:	3b01      	subs	r3, #1
 800c806:	2b02      	cmp	r3, #2
 800c808:	d81d      	bhi.n	800c846 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	889b      	ldrh	r3, [r3, #4]
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	2b01      	cmp	r3, #1
 800c812:	d813      	bhi.n	800c83c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	4798      	blx	r3
 800c822:	4603      	mov	r3, r0
 800c824:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	88db      	ldrh	r3, [r3, #6]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d110      	bne.n	800c850 <USBD_StdItfReq+0x74>
 800c82e:	7bfb      	ldrb	r3, [r7, #15]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d10d      	bne.n	800c850 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 fd5e 	bl	800d2f6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c83a:	e009      	b.n	800c850 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c83c:	6839      	ldr	r1, [r7, #0]
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 fc8e 	bl	800d160 <USBD_CtlError>
      break;
 800c844:	e004      	b.n	800c850 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c846:	6839      	ldr	r1, [r7, #0]
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f000 fc89 	bl	800d160 <USBD_CtlError>
      break;
 800c84e:	e000      	b.n	800c852 <USBD_StdItfReq+0x76>
      break;
 800c850:	bf00      	nop
    }
    break;
 800c852:	e004      	b.n	800c85e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c854:	6839      	ldr	r1, [r7, #0]
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f000 fc82 	bl	800d160 <USBD_CtlError>
    break;
 800c85c:	bf00      	nop
  }

  return ret;
 800c85e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c860:	4618      	mov	r0, r3
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c872:	2300      	movs	r3, #0
 800c874:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	889b      	ldrh	r3, [r3, #4]
 800c87a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c884:	2b20      	cmp	r3, #32
 800c886:	d004      	beq.n	800c892 <USBD_StdEPReq+0x2a>
 800c888:	2b40      	cmp	r3, #64	; 0x40
 800c88a:	d002      	beq.n	800c892 <USBD_StdEPReq+0x2a>
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00a      	beq.n	800c8a6 <USBD_StdEPReq+0x3e>
 800c890:	e135      	b.n	800cafe <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	6839      	ldr	r1, [r7, #0]
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	4798      	blx	r3
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c8a4:	e130      	b.n	800cb08 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	785b      	ldrb	r3, [r3, #1]
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d03e      	beq.n	800c92c <USBD_StdEPReq+0xc4>
 800c8ae:	2b03      	cmp	r3, #3
 800c8b0:	d002      	beq.n	800c8b8 <USBD_StdEPReq+0x50>
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d077      	beq.n	800c9a6 <USBD_StdEPReq+0x13e>
 800c8b6:	e11c      	b.n	800caf2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8be:	2b02      	cmp	r3, #2
 800c8c0:	d002      	beq.n	800c8c8 <USBD_StdEPReq+0x60>
 800c8c2:	2b03      	cmp	r3, #3
 800c8c4:	d015      	beq.n	800c8f2 <USBD_StdEPReq+0x8a>
 800c8c6:	e02b      	b.n	800c920 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8c8:	7bbb      	ldrb	r3, [r7, #14]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00c      	beq.n	800c8e8 <USBD_StdEPReq+0x80>
 800c8ce:	7bbb      	ldrb	r3, [r7, #14]
 800c8d0:	2b80      	cmp	r3, #128	; 0x80
 800c8d2:	d009      	beq.n	800c8e8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c8d4:	7bbb      	ldrb	r3, [r7, #14]
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f002 fb75 	bl	800efc8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8de:	2180      	movs	r1, #128	; 0x80
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f002 fb71 	bl	800efc8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c8e6:	e020      	b.n	800c92a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c8e8:	6839      	ldr	r1, [r7, #0]
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 fc38 	bl	800d160 <USBD_CtlError>
        break;
 800c8f0:	e01b      	b.n	800c92a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	885b      	ldrh	r3, [r3, #2]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d10e      	bne.n	800c918 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c8fa:	7bbb      	ldrb	r3, [r7, #14]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00b      	beq.n	800c918 <USBD_StdEPReq+0xb0>
 800c900:	7bbb      	ldrb	r3, [r7, #14]
 800c902:	2b80      	cmp	r3, #128	; 0x80
 800c904:	d008      	beq.n	800c918 <USBD_StdEPReq+0xb0>
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	88db      	ldrh	r3, [r3, #6]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d104      	bne.n	800c918 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c90e:	7bbb      	ldrb	r3, [r7, #14]
 800c910:	4619      	mov	r1, r3
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f002 fb58 	bl	800efc8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 fcec 	bl	800d2f6 <USBD_CtlSendStatus>

        break;
 800c91e:	e004      	b.n	800c92a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c920:	6839      	ldr	r1, [r7, #0]
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 fc1c 	bl	800d160 <USBD_CtlError>
        break;
 800c928:	bf00      	nop
      }
      break;
 800c92a:	e0e7      	b.n	800cafc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c932:	2b02      	cmp	r3, #2
 800c934:	d002      	beq.n	800c93c <USBD_StdEPReq+0xd4>
 800c936:	2b03      	cmp	r3, #3
 800c938:	d015      	beq.n	800c966 <USBD_StdEPReq+0xfe>
 800c93a:	e02d      	b.n	800c998 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c93c:	7bbb      	ldrb	r3, [r7, #14]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00c      	beq.n	800c95c <USBD_StdEPReq+0xf4>
 800c942:	7bbb      	ldrb	r3, [r7, #14]
 800c944:	2b80      	cmp	r3, #128	; 0x80
 800c946:	d009      	beq.n	800c95c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c948:	7bbb      	ldrb	r3, [r7, #14]
 800c94a:	4619      	mov	r1, r3
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f002 fb3b 	bl	800efc8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c952:	2180      	movs	r1, #128	; 0x80
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f002 fb37 	bl	800efc8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c95a:	e023      	b.n	800c9a4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c95c:	6839      	ldr	r1, [r7, #0]
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 fbfe 	bl	800d160 <USBD_CtlError>
        break;
 800c964:	e01e      	b.n	800c9a4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	885b      	ldrh	r3, [r3, #2]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d119      	bne.n	800c9a2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c96e:	7bbb      	ldrb	r3, [r7, #14]
 800c970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c974:	2b00      	cmp	r3, #0
 800c976:	d004      	beq.n	800c982 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c978:	7bbb      	ldrb	r3, [r7, #14]
 800c97a:	4619      	mov	r1, r3
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f002 fb42 	bl	800f006 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 fcb7 	bl	800d2f6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	6839      	ldr	r1, [r7, #0]
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	4798      	blx	r3
        }
        break;
 800c996:	e004      	b.n	800c9a2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c998:	6839      	ldr	r1, [r7, #0]
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 fbe0 	bl	800d160 <USBD_CtlError>
        break;
 800c9a0:	e000      	b.n	800c9a4 <USBD_StdEPReq+0x13c>
        break;
 800c9a2:	bf00      	nop
      }
      break;
 800c9a4:	e0aa      	b.n	800cafc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9ac:	2b02      	cmp	r3, #2
 800c9ae:	d002      	beq.n	800c9b6 <USBD_StdEPReq+0x14e>
 800c9b0:	2b03      	cmp	r3, #3
 800c9b2:	d032      	beq.n	800ca1a <USBD_StdEPReq+0x1b2>
 800c9b4:	e097      	b.n	800cae6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9b6:	7bbb      	ldrb	r3, [r7, #14]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d007      	beq.n	800c9cc <USBD_StdEPReq+0x164>
 800c9bc:	7bbb      	ldrb	r3, [r7, #14]
 800c9be:	2b80      	cmp	r3, #128	; 0x80
 800c9c0:	d004      	beq.n	800c9cc <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c9c2:	6839      	ldr	r1, [r7, #0]
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 fbcb 	bl	800d160 <USBD_CtlError>
          break;
 800c9ca:	e091      	b.n	800caf0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	da0b      	bge.n	800c9ec <USBD_StdEPReq+0x184>
 800c9d4:	7bbb      	ldrb	r3, [r7, #14]
 800c9d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c9da:	4613      	mov	r3, r2
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	4413      	add	r3, r2
 800c9e0:	009b      	lsls	r3, r3, #2
 800c9e2:	3310      	adds	r3, #16
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	3304      	adds	r3, #4
 800c9ea:	e00b      	b.n	800ca04 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c9ec:	7bbb      	ldrb	r3, [r7, #14]
 800c9ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	4413      	add	r3, r2
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	4413      	add	r3, r2
 800ca02:	3304      	adds	r3, #4
 800ca04:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	2202      	movs	r2, #2
 800ca10:	4619      	mov	r1, r3
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f000 fc15 	bl	800d242 <USBD_CtlSendData>
        break;
 800ca18:	e06a      	b.n	800caf0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800ca1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	da11      	bge.n	800ca46 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ca22:	7bbb      	ldrb	r3, [r7, #14]
 800ca24:	f003 020f 	and.w	r2, r3, #15
 800ca28:	6879      	ldr	r1, [r7, #4]
 800ca2a:	4613      	mov	r3, r2
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	4413      	add	r3, r2
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	440b      	add	r3, r1
 800ca34:	3324      	adds	r3, #36	; 0x24
 800ca36:	881b      	ldrh	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d117      	bne.n	800ca6c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ca3c:	6839      	ldr	r1, [r7, #0]
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 fb8e 	bl	800d160 <USBD_CtlError>
            break;
 800ca44:	e054      	b.n	800caf0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ca46:	7bbb      	ldrb	r3, [r7, #14]
 800ca48:	f003 020f 	and.w	r2, r3, #15
 800ca4c:	6879      	ldr	r1, [r7, #4]
 800ca4e:	4613      	mov	r3, r2
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	4413      	add	r3, r2
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	440b      	add	r3, r1
 800ca58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ca5c:	881b      	ldrh	r3, [r3, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d104      	bne.n	800ca6c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ca62:	6839      	ldr	r1, [r7, #0]
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 fb7b 	bl	800d160 <USBD_CtlError>
            break;
 800ca6a:	e041      	b.n	800caf0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	da0b      	bge.n	800ca8c <USBD_StdEPReq+0x224>
 800ca74:	7bbb      	ldrb	r3, [r7, #14]
 800ca76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca7a:	4613      	mov	r3, r2
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	4413      	add	r3, r2
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	3310      	adds	r3, #16
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	4413      	add	r3, r2
 800ca88:	3304      	adds	r3, #4
 800ca8a:	e00b      	b.n	800caa4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ca8c:	7bbb      	ldrb	r3, [r7, #14]
 800ca8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca92:	4613      	mov	r3, r2
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	4413      	add	r3, r2
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ca9e:	687a      	ldr	r2, [r7, #4]
 800caa0:	4413      	add	r3, r2
 800caa2:	3304      	adds	r3, #4
 800caa4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800caa6:	7bbb      	ldrb	r3, [r7, #14]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d002      	beq.n	800cab2 <USBD_StdEPReq+0x24a>
 800caac:	7bbb      	ldrb	r3, [r7, #14]
 800caae:	2b80      	cmp	r3, #128	; 0x80
 800cab0:	d103      	bne.n	800caba <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	2200      	movs	r2, #0
 800cab6:	601a      	str	r2, [r3, #0]
 800cab8:	e00e      	b.n	800cad8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800caba:	7bbb      	ldrb	r3, [r7, #14]
 800cabc:	4619      	mov	r1, r3
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f002 fac0 	bl	800f044 <USBD_LL_IsStallEP>
 800cac4:	4603      	mov	r3, r0
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d003      	beq.n	800cad2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	2201      	movs	r2, #1
 800cace:	601a      	str	r2, [r3, #0]
 800cad0:	e002      	b.n	800cad8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	2200      	movs	r2, #0
 800cad6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	2202      	movs	r2, #2
 800cadc:	4619      	mov	r1, r3
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f000 fbaf 	bl	800d242 <USBD_CtlSendData>
          break;
 800cae4:	e004      	b.n	800caf0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800cae6:	6839      	ldr	r1, [r7, #0]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 fb39 	bl	800d160 <USBD_CtlError>
        break;
 800caee:	bf00      	nop
      }
      break;
 800caf0:	e004      	b.n	800cafc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800caf2:	6839      	ldr	r1, [r7, #0]
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 fb33 	bl	800d160 <USBD_CtlError>
      break;
 800cafa:	bf00      	nop
    }
    break;
 800cafc:	e004      	b.n	800cb08 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800cafe:	6839      	ldr	r1, [r7, #0]
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f000 fb2d 	bl	800d160 <USBD_CtlError>
    break;
 800cb06:	bf00      	nop
  }

  return ret;
 800cb08:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
	...

0800cb14 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cb22:	2300      	movs	r3, #0
 800cb24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cb26:	2300      	movs	r3, #0
 800cb28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	885b      	ldrh	r3, [r3, #2]
 800cb2e:	0a1b      	lsrs	r3, r3, #8
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	3b01      	subs	r3, #1
 800cb34:	2b06      	cmp	r3, #6
 800cb36:	f200 8128 	bhi.w	800cd8a <USBD_GetDescriptor+0x276>
 800cb3a:	a201      	add	r2, pc, #4	; (adr r2, 800cb40 <USBD_GetDescriptor+0x2c>)
 800cb3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb40:	0800cb5d 	.word	0x0800cb5d
 800cb44:	0800cb75 	.word	0x0800cb75
 800cb48:	0800cbb5 	.word	0x0800cbb5
 800cb4c:	0800cd8b 	.word	0x0800cd8b
 800cb50:	0800cd8b 	.word	0x0800cd8b
 800cb54:	0800cd2b 	.word	0x0800cd2b
 800cb58:	0800cd57 	.word	0x0800cd57
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	7c12      	ldrb	r2, [r2, #16]
 800cb68:	f107 0108 	add.w	r1, r7, #8
 800cb6c:	4610      	mov	r0, r2
 800cb6e:	4798      	blx	r3
 800cb70:	60f8      	str	r0, [r7, #12]
    break;
 800cb72:	e112      	b.n	800cd9a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	7c1b      	ldrb	r3, [r3, #16]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10d      	bne.n	800cb98 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb84:	f107 0208 	add.w	r2, r7, #8
 800cb88:	4610      	mov	r0, r2
 800cb8a:	4798      	blx	r3
 800cb8c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	3301      	adds	r3, #1
 800cb92:	2202      	movs	r2, #2
 800cb94:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800cb96:	e100      	b.n	800cd9a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba0:	f107 0208 	add.w	r2, r7, #8
 800cba4:	4610      	mov	r0, r2
 800cba6:	4798      	blx	r3
 800cba8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	3301      	adds	r3, #1
 800cbae:	2202      	movs	r2, #2
 800cbb0:	701a      	strb	r2, [r3, #0]
    break;
 800cbb2:	e0f2      	b.n	800cd9a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	885b      	ldrh	r3, [r3, #2]
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	2b05      	cmp	r3, #5
 800cbbc:	f200 80ac 	bhi.w	800cd18 <USBD_GetDescriptor+0x204>
 800cbc0:	a201      	add	r2, pc, #4	; (adr r2, 800cbc8 <USBD_GetDescriptor+0xb4>)
 800cbc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc6:	bf00      	nop
 800cbc8:	0800cbe1 	.word	0x0800cbe1
 800cbcc:	0800cc15 	.word	0x0800cc15
 800cbd0:	0800cc49 	.word	0x0800cc49
 800cbd4:	0800cc7d 	.word	0x0800cc7d
 800cbd8:	0800ccb1 	.word	0x0800ccb1
 800cbdc:	0800cce5 	.word	0x0800cce5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d00b      	beq.n	800cc04 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbf2:	685b      	ldr	r3, [r3, #4]
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	7c12      	ldrb	r2, [r2, #16]
 800cbf8:	f107 0108 	add.w	r1, r7, #8
 800cbfc:	4610      	mov	r0, r2
 800cbfe:	4798      	blx	r3
 800cc00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc02:	e091      	b.n	800cd28 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cc04:	6839      	ldr	r1, [r7, #0]
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f000 faaa 	bl	800d160 <USBD_CtlError>
        err++;
 800cc0c:	7afb      	ldrb	r3, [r7, #11]
 800cc0e:	3301      	adds	r3, #1
 800cc10:	72fb      	strb	r3, [r7, #11]
      break;
 800cc12:	e089      	b.n	800cd28 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc1a:	689b      	ldr	r3, [r3, #8]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d00b      	beq.n	800cc38 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc26:	689b      	ldr	r3, [r3, #8]
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	7c12      	ldrb	r2, [r2, #16]
 800cc2c:	f107 0108 	add.w	r1, r7, #8
 800cc30:	4610      	mov	r0, r2
 800cc32:	4798      	blx	r3
 800cc34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc36:	e077      	b.n	800cd28 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cc38:	6839      	ldr	r1, [r7, #0]
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 fa90 	bl	800d160 <USBD_CtlError>
        err++;
 800cc40:	7afb      	ldrb	r3, [r7, #11]
 800cc42:	3301      	adds	r3, #1
 800cc44:	72fb      	strb	r3, [r7, #11]
      break;
 800cc46:	e06f      	b.n	800cd28 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d00b      	beq.n	800cc6c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	7c12      	ldrb	r2, [r2, #16]
 800cc60:	f107 0108 	add.w	r1, r7, #8
 800cc64:	4610      	mov	r0, r2
 800cc66:	4798      	blx	r3
 800cc68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc6a:	e05d      	b.n	800cd28 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cc6c:	6839      	ldr	r1, [r7, #0]
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 fa76 	bl	800d160 <USBD_CtlError>
        err++;
 800cc74:	7afb      	ldrb	r3, [r7, #11]
 800cc76:	3301      	adds	r3, #1
 800cc78:	72fb      	strb	r3, [r7, #11]
      break;
 800cc7a:	e055      	b.n	800cd28 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc82:	691b      	ldr	r3, [r3, #16]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d00b      	beq.n	800cca0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc8e:	691b      	ldr	r3, [r3, #16]
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	7c12      	ldrb	r2, [r2, #16]
 800cc94:	f107 0108 	add.w	r1, r7, #8
 800cc98:	4610      	mov	r0, r2
 800cc9a:	4798      	blx	r3
 800cc9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc9e:	e043      	b.n	800cd28 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cca0:	6839      	ldr	r1, [r7, #0]
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 fa5c 	bl	800d160 <USBD_CtlError>
        err++;
 800cca8:	7afb      	ldrb	r3, [r7, #11]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	72fb      	strb	r3, [r7, #11]
      break;
 800ccae:	e03b      	b.n	800cd28 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccb6:	695b      	ldr	r3, [r3, #20]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d00b      	beq.n	800ccd4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccc2:	695b      	ldr	r3, [r3, #20]
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	7c12      	ldrb	r2, [r2, #16]
 800ccc8:	f107 0108 	add.w	r1, r7, #8
 800cccc:	4610      	mov	r0, r2
 800ccce:	4798      	blx	r3
 800ccd0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ccd2:	e029      	b.n	800cd28 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ccd4:	6839      	ldr	r1, [r7, #0]
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 fa42 	bl	800d160 <USBD_CtlError>
        err++;
 800ccdc:	7afb      	ldrb	r3, [r7, #11]
 800ccde:	3301      	adds	r3, #1
 800cce0:	72fb      	strb	r3, [r7, #11]
      break;
 800cce2:	e021      	b.n	800cd28 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccea:	699b      	ldr	r3, [r3, #24]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d00b      	beq.n	800cd08 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccf6:	699b      	ldr	r3, [r3, #24]
 800ccf8:	687a      	ldr	r2, [r7, #4]
 800ccfa:	7c12      	ldrb	r2, [r2, #16]
 800ccfc:	f107 0108 	add.w	r1, r7, #8
 800cd00:	4610      	mov	r0, r2
 800cd02:	4798      	blx	r3
 800cd04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd06:	e00f      	b.n	800cd28 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800cd08:	6839      	ldr	r1, [r7, #0]
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f000 fa28 	bl	800d160 <USBD_CtlError>
        err++;
 800cd10:	7afb      	ldrb	r3, [r7, #11]
 800cd12:	3301      	adds	r3, #1
 800cd14:	72fb      	strb	r3, [r7, #11]
      break;
 800cd16:	e007      	b.n	800cd28 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800cd18:	6839      	ldr	r1, [r7, #0]
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 fa20 	bl	800d160 <USBD_CtlError>
      err++;
 800cd20:	7afb      	ldrb	r3, [r7, #11]
 800cd22:	3301      	adds	r3, #1
 800cd24:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800cd26:	bf00      	nop
    }
    break;
 800cd28:	e037      	b.n	800cd9a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	7c1b      	ldrb	r3, [r3, #16]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d109      	bne.n	800cd46 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd3a:	f107 0208 	add.w	r2, r7, #8
 800cd3e:	4610      	mov	r0, r2
 800cd40:	4798      	blx	r3
 800cd42:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800cd44:	e029      	b.n	800cd9a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800cd46:	6839      	ldr	r1, [r7, #0]
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f000 fa09 	bl	800d160 <USBD_CtlError>
      err++;
 800cd4e:	7afb      	ldrb	r3, [r7, #11]
 800cd50:	3301      	adds	r3, #1
 800cd52:	72fb      	strb	r3, [r7, #11]
    break;
 800cd54:	e021      	b.n	800cd9a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	7c1b      	ldrb	r3, [r3, #16]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d10d      	bne.n	800cd7a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd66:	f107 0208 	add.w	r2, r7, #8
 800cd6a:	4610      	mov	r0, r2
 800cd6c:	4798      	blx	r3
 800cd6e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	3301      	adds	r3, #1
 800cd74:	2207      	movs	r2, #7
 800cd76:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800cd78:	e00f      	b.n	800cd9a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800cd7a:	6839      	ldr	r1, [r7, #0]
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f000 f9ef 	bl	800d160 <USBD_CtlError>
      err++;
 800cd82:	7afb      	ldrb	r3, [r7, #11]
 800cd84:	3301      	adds	r3, #1
 800cd86:	72fb      	strb	r3, [r7, #11]
    break;
 800cd88:	e007      	b.n	800cd9a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800cd8a:	6839      	ldr	r1, [r7, #0]
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 f9e7 	bl	800d160 <USBD_CtlError>
    err++;
 800cd92:	7afb      	ldrb	r3, [r7, #11]
 800cd94:	3301      	adds	r3, #1
 800cd96:	72fb      	strb	r3, [r7, #11]
    break;
 800cd98:	bf00      	nop
  }

  if (err != 0U)
 800cd9a:	7afb      	ldrb	r3, [r7, #11]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d11e      	bne.n	800cdde <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	88db      	ldrh	r3, [r3, #6]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d016      	beq.n	800cdd6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800cda8:	893b      	ldrh	r3, [r7, #8]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00e      	beq.n	800cdcc <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	88da      	ldrh	r2, [r3, #6]
 800cdb2:	893b      	ldrh	r3, [r7, #8]
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	bf28      	it	cs
 800cdb8:	4613      	movcs	r3, r2
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800cdbe:	893b      	ldrh	r3, [r7, #8]
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	68f9      	ldr	r1, [r7, #12]
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 fa3c 	bl	800d242 <USBD_CtlSendData>
 800cdca:	e009      	b.n	800cde0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800cdcc:	6839      	ldr	r1, [r7, #0]
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 f9c6 	bl	800d160 <USBD_CtlError>
 800cdd4:	e004      	b.n	800cde0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f000 fa8d 	bl	800d2f6 <USBD_CtlSendStatus>
 800cddc:	e000      	b.n	800cde0 <USBD_GetDescriptor+0x2cc>
    return;
 800cdde:	bf00      	nop
    }
  }
}
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop

0800cde8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b084      	sub	sp, #16
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	889b      	ldrh	r3, [r3, #4]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d130      	bne.n	800ce5c <USBD_SetAddress+0x74>
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	88db      	ldrh	r3, [r3, #6]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d12c      	bne.n	800ce5c <USBD_SetAddress+0x74>
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	885b      	ldrh	r3, [r3, #2]
 800ce06:	2b7f      	cmp	r3, #127	; 0x7f
 800ce08:	d828      	bhi.n	800ce5c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	885b      	ldrh	r3, [r3, #2]
 800ce0e:	b2db      	uxtb	r3, r3
 800ce10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce1c:	2b03      	cmp	r3, #3
 800ce1e:	d104      	bne.n	800ce2a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ce20:	6839      	ldr	r1, [r7, #0]
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 f99c 	bl	800d160 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce28:	e01c      	b.n	800ce64 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	7bfa      	ldrb	r2, [r7, #15]
 800ce2e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ce32:	7bfb      	ldrb	r3, [r7, #15]
 800ce34:	4619      	mov	r1, r3
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f002 f930 	bl	800f09c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f000 fa5a 	bl	800d2f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ce42:	7bfb      	ldrb	r3, [r7, #15]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d004      	beq.n	800ce52 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2202      	movs	r2, #2
 800ce4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce50:	e008      	b.n	800ce64 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2201      	movs	r2, #1
 800ce56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce5a:	e003      	b.n	800ce64 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ce5c:	6839      	ldr	r1, [r7, #0]
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 f97e 	bl	800d160 <USBD_CtlError>
  }
}
 800ce64:	bf00      	nop
 800ce66:	3710      	adds	r7, #16
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b084      	sub	sp, #16
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce76:	2300      	movs	r3, #0
 800ce78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	885b      	ldrh	r3, [r3, #2]
 800ce7e:	b2da      	uxtb	r2, r3
 800ce80:	4b4b      	ldr	r3, [pc, #300]	; (800cfb0 <USBD_SetConfig+0x144>)
 800ce82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ce84:	4b4a      	ldr	r3, [pc, #296]	; (800cfb0 <USBD_SetConfig+0x144>)
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d905      	bls.n	800ce98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ce8c:	6839      	ldr	r1, [r7, #0]
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f000 f966 	bl	800d160 <USBD_CtlError>
    return USBD_FAIL;
 800ce94:	2303      	movs	r3, #3
 800ce96:	e087      	b.n	800cfa8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce9e:	2b02      	cmp	r3, #2
 800cea0:	d002      	beq.n	800cea8 <USBD_SetConfig+0x3c>
 800cea2:	2b03      	cmp	r3, #3
 800cea4:	d025      	beq.n	800cef2 <USBD_SetConfig+0x86>
 800cea6:	e071      	b.n	800cf8c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800cea8:	4b41      	ldr	r3, [pc, #260]	; (800cfb0 <USBD_SetConfig+0x144>)
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d01c      	beq.n	800ceea <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800ceb0:	4b3f      	ldr	r3, [pc, #252]	; (800cfb0 <USBD_SetConfig+0x144>)
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ceba:	4b3d      	ldr	r3, [pc, #244]	; (800cfb0 <USBD_SetConfig+0x144>)
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	4619      	mov	r1, r3
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f7ff f9a7 	bl	800c214 <USBD_SetClassConfig>
 800cec6:	4603      	mov	r3, r0
 800cec8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800ceca:	7bfb      	ldrb	r3, [r7, #15]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d004      	beq.n	800ceda <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800ced0:	6839      	ldr	r1, [r7, #0]
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f000 f944 	bl	800d160 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ced8:	e065      	b.n	800cfa6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 fa0b 	bl	800d2f6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2203      	movs	r2, #3
 800cee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800cee8:	e05d      	b.n	800cfa6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f000 fa03 	bl	800d2f6 <USBD_CtlSendStatus>
    break;
 800cef0:	e059      	b.n	800cfa6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800cef2:	4b2f      	ldr	r3, [pc, #188]	; (800cfb0 <USBD_SetConfig+0x144>)
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d112      	bne.n	800cf20 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2202      	movs	r2, #2
 800cefe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800cf02:	4b2b      	ldr	r3, [pc, #172]	; (800cfb0 <USBD_SetConfig+0x144>)
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	461a      	mov	r2, r3
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cf0c:	4b28      	ldr	r3, [pc, #160]	; (800cfb0 <USBD_SetConfig+0x144>)
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	4619      	mov	r1, r3
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f7ff f99a 	bl	800c24c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f000 f9ec 	bl	800d2f6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800cf1e:	e042      	b.n	800cfa6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800cf20:	4b23      	ldr	r3, [pc, #140]	; (800cfb0 <USBD_SetConfig+0x144>)
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	461a      	mov	r2, r3
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d02a      	beq.n	800cf84 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	4619      	mov	r1, r3
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f7ff f988 	bl	800c24c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800cf3c:	4b1c      	ldr	r3, [pc, #112]	; (800cfb0 <USBD_SetConfig+0x144>)
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	461a      	mov	r2, r3
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf46:	4b1a      	ldr	r3, [pc, #104]	; (800cfb0 <USBD_SetConfig+0x144>)
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f7ff f961 	bl	800c214 <USBD_SetClassConfig>
 800cf52:	4603      	mov	r3, r0
 800cf54:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800cf56:	7bfb      	ldrb	r3, [r7, #15]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d00f      	beq.n	800cf7c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800cf5c:	6839      	ldr	r1, [r7, #0]
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 f8fe 	bl	800d160 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	b2db      	uxtb	r3, r3
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f7ff f96d 	bl	800c24c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2202      	movs	r2, #2
 800cf76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800cf7a:	e014      	b.n	800cfa6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 f9ba 	bl	800d2f6 <USBD_CtlSendStatus>
    break;
 800cf82:	e010      	b.n	800cfa6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 f9b6 	bl	800d2f6 <USBD_CtlSendStatus>
    break;
 800cf8a:	e00c      	b.n	800cfa6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800cf8c:	6839      	ldr	r1, [r7, #0]
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f000 f8e6 	bl	800d160 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cf94:	4b06      	ldr	r3, [pc, #24]	; (800cfb0 <USBD_SetConfig+0x144>)
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	4619      	mov	r1, r3
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f7ff f956 	bl	800c24c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800cfa0:	2303      	movs	r3, #3
 800cfa2:	73fb      	strb	r3, [r7, #15]
    break;
 800cfa4:	bf00      	nop
  }

  return ret;
 800cfa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3710      	adds	r7, #16
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	20000c8c 	.word	0x20000c8c

0800cfb4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	88db      	ldrh	r3, [r3, #6]
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d004      	beq.n	800cfd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cfc6:	6839      	ldr	r1, [r7, #0]
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 f8c9 	bl	800d160 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800cfce:	e021      	b.n	800d014 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfd6:	2b01      	cmp	r3, #1
 800cfd8:	db17      	blt.n	800d00a <USBD_GetConfig+0x56>
 800cfda:	2b02      	cmp	r3, #2
 800cfdc:	dd02      	ble.n	800cfe4 <USBD_GetConfig+0x30>
 800cfde:	2b03      	cmp	r3, #3
 800cfe0:	d00b      	beq.n	800cffa <USBD_GetConfig+0x46>
 800cfe2:	e012      	b.n	800d00a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	3308      	adds	r3, #8
 800cfee:	2201      	movs	r2, #1
 800cff0:	4619      	mov	r1, r3
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 f925 	bl	800d242 <USBD_CtlSendData>
      break;
 800cff8:	e00c      	b.n	800d014 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	3304      	adds	r3, #4
 800cffe:	2201      	movs	r2, #1
 800d000:	4619      	mov	r1, r3
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f000 f91d 	bl	800d242 <USBD_CtlSendData>
      break;
 800d008:	e004      	b.n	800d014 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800d00a:	6839      	ldr	r1, [r7, #0]
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 f8a7 	bl	800d160 <USBD_CtlError>
      break;
 800d012:	bf00      	nop
}
 800d014:	bf00      	nop
 800d016:	3708      	adds	r7, #8
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d02c:	3b01      	subs	r3, #1
 800d02e:	2b02      	cmp	r3, #2
 800d030:	d81e      	bhi.n	800d070 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	88db      	ldrh	r3, [r3, #6]
 800d036:	2b02      	cmp	r3, #2
 800d038:	d004      	beq.n	800d044 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800d03a:	6839      	ldr	r1, [r7, #0]
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 f88f 	bl	800d160 <USBD_CtlError>
      break;
 800d042:	e01a      	b.n	800d07a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2201      	movs	r2, #1
 800d048:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d050:	2b00      	cmp	r3, #0
 800d052:	d005      	beq.n	800d060 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	68db      	ldr	r3, [r3, #12]
 800d058:	f043 0202 	orr.w	r2, r3, #2
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	330c      	adds	r3, #12
 800d064:	2202      	movs	r2, #2
 800d066:	4619      	mov	r1, r3
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f000 f8ea 	bl	800d242 <USBD_CtlSendData>
    break;
 800d06e:	e004      	b.n	800d07a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800d070:	6839      	ldr	r1, [r7, #0]
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 f874 	bl	800d160 <USBD_CtlError>
    break;
 800d078:	bf00      	nop
  }
}
 800d07a:	bf00      	nop
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d082:	b580      	push	{r7, lr}
 800d084:	b082      	sub	sp, #8
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
 800d08a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	885b      	ldrh	r3, [r3, #2]
 800d090:	2b01      	cmp	r3, #1
 800d092:	d106      	bne.n	800d0a2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2201      	movs	r2, #1
 800d098:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f000 f92a 	bl	800d2f6 <USBD_CtlSendStatus>
  }
}
 800d0a2:	bf00      	nop
 800d0a4:	3708      	adds	r7, #8
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}

0800d0aa <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0aa:	b580      	push	{r7, lr}
 800d0ac:	b082      	sub	sp, #8
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
 800d0b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0ba:	3b01      	subs	r3, #1
 800d0bc:	2b02      	cmp	r3, #2
 800d0be:	d80b      	bhi.n	800d0d8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	885b      	ldrh	r3, [r3, #2]
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d10c      	bne.n	800d0e2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 f910 	bl	800d2f6 <USBD_CtlSendStatus>
      }
      break;
 800d0d6:	e004      	b.n	800d0e2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d0d8:	6839      	ldr	r1, [r7, #0]
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 f840 	bl	800d160 <USBD_CtlError>
      break;
 800d0e0:	e000      	b.n	800d0e4 <USBD_ClrFeature+0x3a>
      break;
 800d0e2:	bf00      	nop
  }
}
 800d0e4:	bf00      	nop
 800d0e6:	3708      	adds	r7, #8
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	781a      	ldrb	r2, [r3, #0]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	3301      	adds	r3, #1
 800d106:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	781a      	ldrb	r2, [r3, #0]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	3301      	adds	r3, #1
 800d114:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d116:	68f8      	ldr	r0, [r7, #12]
 800d118:	f7ff fad3 	bl	800c6c2 <SWAPBYTE>
 800d11c:	4603      	mov	r3, r0
 800d11e:	461a      	mov	r2, r3
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	3301      	adds	r3, #1
 800d128:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	3301      	adds	r3, #1
 800d12e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d130:	68f8      	ldr	r0, [r7, #12]
 800d132:	f7ff fac6 	bl	800c6c2 <SWAPBYTE>
 800d136:	4603      	mov	r3, r0
 800d138:	461a      	mov	r2, r3
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	3301      	adds	r3, #1
 800d142:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	3301      	adds	r3, #1
 800d148:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d14a:	68f8      	ldr	r0, [r7, #12]
 800d14c:	f7ff fab9 	bl	800c6c2 <SWAPBYTE>
 800d150:	4603      	mov	r3, r0
 800d152:	461a      	mov	r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	80da      	strh	r2, [r3, #6]
}
 800d158:	bf00      	nop
 800d15a:	3710      	adds	r7, #16
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d16a:	2180      	movs	r1, #128	; 0x80
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f001 ff2b 	bl	800efc8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d172:	2100      	movs	r1, #0
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f001 ff27 	bl	800efc8 <USBD_LL_StallEP>
}
 800d17a:	bf00      	nop
 800d17c:	3708      	adds	r7, #8
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}

0800d182 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d182:	b580      	push	{r7, lr}
 800d184:	b086      	sub	sp, #24
 800d186:	af00      	add	r7, sp, #0
 800d188:	60f8      	str	r0, [r7, #12]
 800d18a:	60b9      	str	r1, [r7, #8]
 800d18c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d18e:	2300      	movs	r3, #0
 800d190:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d036      	beq.n	800d206 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d19c:	6938      	ldr	r0, [r7, #16]
 800d19e:	f000 f836 	bl	800d20e <USBD_GetLen>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	005b      	lsls	r3, r3, #1
 800d1aa:	b29a      	uxth	r2, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d1b0:	7dfb      	ldrb	r3, [r7, #23]
 800d1b2:	68ba      	ldr	r2, [r7, #8]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	7812      	ldrb	r2, [r2, #0]
 800d1ba:	701a      	strb	r2, [r3, #0]
  idx++;
 800d1bc:	7dfb      	ldrb	r3, [r7, #23]
 800d1be:	3301      	adds	r3, #1
 800d1c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d1c2:	7dfb      	ldrb	r3, [r7, #23]
 800d1c4:	68ba      	ldr	r2, [r7, #8]
 800d1c6:	4413      	add	r3, r2
 800d1c8:	2203      	movs	r2, #3
 800d1ca:	701a      	strb	r2, [r3, #0]
  idx++;
 800d1cc:	7dfb      	ldrb	r3, [r7, #23]
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d1d2:	e013      	b.n	800d1fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d1d4:	7dfb      	ldrb	r3, [r7, #23]
 800d1d6:	68ba      	ldr	r2, [r7, #8]
 800d1d8:	4413      	add	r3, r2
 800d1da:	693a      	ldr	r2, [r7, #16]
 800d1dc:	7812      	ldrb	r2, [r2, #0]
 800d1de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	613b      	str	r3, [r7, #16]
    idx++;
 800d1e6:	7dfb      	ldrb	r3, [r7, #23]
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d1ec:	7dfb      	ldrb	r3, [r7, #23]
 800d1ee:	68ba      	ldr	r2, [r7, #8]
 800d1f0:	4413      	add	r3, r2
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	701a      	strb	r2, [r3, #0]
    idx++;
 800d1f6:	7dfb      	ldrb	r3, [r7, #23]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d1e7      	bne.n	800d1d4 <USBD_GetString+0x52>
 800d204:	e000      	b.n	800d208 <USBD_GetString+0x86>
    return;
 800d206:	bf00      	nop
  }
}
 800d208:	3718      	adds	r7, #24
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d20e:	b480      	push	{r7}
 800d210:	b085      	sub	sp, #20
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d216:	2300      	movs	r3, #0
 800d218:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d21e:	e005      	b.n	800d22c <USBD_GetLen+0x1e>
  {
    len++;
 800d220:	7bfb      	ldrb	r3, [r7, #15]
 800d222:	3301      	adds	r3, #1
 800d224:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	3301      	adds	r3, #1
 800d22a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d1f5      	bne.n	800d220 <USBD_GetLen+0x12>
  }

  return len;
 800d234:	7bfb      	ldrb	r3, [r7, #15]
}
 800d236:	4618      	mov	r0, r3
 800d238:	3714      	adds	r7, #20
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr

0800d242 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d242:	b580      	push	{r7, lr}
 800d244:	b084      	sub	sp, #16
 800d246:	af00      	add	r7, sp, #0
 800d248:	60f8      	str	r0, [r7, #12]
 800d24a:	60b9      	str	r1, [r7, #8]
 800d24c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2202      	movs	r2, #2
 800d252:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	687a      	ldr	r2, [r7, #4]
 800d260:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	68ba      	ldr	r2, [r7, #8]
 800d266:	2100      	movs	r1, #0
 800d268:	68f8      	ldr	r0, [r7, #12]
 800d26a:	f001 ff36 	bl	800f0da <USBD_LL_Transmit>

  return USBD_OK;
 800d26e:	2300      	movs	r3, #0
}
 800d270:	4618      	mov	r0, r3
 800d272:	3710      	adds	r7, #16
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	68ba      	ldr	r2, [r7, #8]
 800d288:	2100      	movs	r1, #0
 800d28a:	68f8      	ldr	r0, [r7, #12]
 800d28c:	f001 ff25 	bl	800f0da <USBD_LL_Transmit>

  return USBD_OK;
 800d290:	2300      	movs	r3, #0
}
 800d292:	4618      	mov	r0, r3
 800d294:	3710      	adds	r7, #16
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}

0800d29a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d29a:	b580      	push	{r7, lr}
 800d29c:	b084      	sub	sp, #16
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	60f8      	str	r0, [r7, #12]
 800d2a2:	60b9      	str	r1, [r7, #8]
 800d2a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2203      	movs	r2, #3
 800d2aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	687a      	ldr	r2, [r7, #4]
 800d2b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	68ba      	ldr	r2, [r7, #8]
 800d2c2:	2100      	movs	r1, #0
 800d2c4:	68f8      	ldr	r0, [r7, #12]
 800d2c6:	f001 ff29 	bl	800f11c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d2ca:	2300      	movs	r3, #0
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3710      	adds	r7, #16
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	60f8      	str	r0, [r7, #12]
 800d2dc:	60b9      	str	r1, [r7, #8]
 800d2de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	68ba      	ldr	r2, [r7, #8]
 800d2e4:	2100      	movs	r1, #0
 800d2e6:	68f8      	ldr	r0, [r7, #12]
 800d2e8:	f001 ff18 	bl	800f11c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d2ec:	2300      	movs	r3, #0
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3710      	adds	r7, #16
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}

0800d2f6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d2f6:	b580      	push	{r7, lr}
 800d2f8:	b082      	sub	sp, #8
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2204      	movs	r2, #4
 800d302:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d306:	2300      	movs	r3, #0
 800d308:	2200      	movs	r2, #0
 800d30a:	2100      	movs	r1, #0
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f001 fee4 	bl	800f0da <USBD_LL_Transmit>

  return USBD_OK;
 800d312:	2300      	movs	r3, #0
}
 800d314:	4618      	mov	r0, r3
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2205      	movs	r2, #5
 800d328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d32c:	2300      	movs	r3, #0
 800d32e:	2200      	movs	r2, #0
 800d330:	2100      	movs	r1, #0
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f001 fef2 	bl	800f11c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d338:	2300      	movs	r3, #0
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3708      	adds	r7, #8
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}

0800d342 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d342:	b480      	push	{r7}
 800d344:	b085      	sub	sp, #20
 800d346:	af00      	add	r7, sp, #0
 800d348:	4603      	mov	r3, r0
 800d34a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d34c:	2300      	movs	r3, #0
 800d34e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d350:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d354:	2b84      	cmp	r3, #132	; 0x84
 800d356:	d005      	beq.n	800d364 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d358:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	4413      	add	r3, r2
 800d360:	3303      	adds	r3, #3
 800d362:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d364:	68fb      	ldr	r3, [r7, #12]
}
 800d366:	4618      	mov	r0, r3
 800d368:	3714      	adds	r7, #20
 800d36a:	46bd      	mov	sp, r7
 800d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d370:	4770      	bx	lr

0800d372 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d372:	b580      	push	{r7, lr}
 800d374:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d376:	f000 fadb 	bl	800d930 <vTaskStartScheduler>
  
  return osOK;
 800d37a:	2300      	movs	r3, #0
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d380:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d382:	b089      	sub	sp, #36	; 0x24
 800d384:	af04      	add	r7, sp, #16
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	695b      	ldr	r3, [r3, #20]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d020      	beq.n	800d3d4 <osThreadCreate+0x54>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	699b      	ldr	r3, [r3, #24]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d01c      	beq.n	800d3d4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	685c      	ldr	r4, [r3, #4]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681d      	ldr	r5, [r3, #0]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	691e      	ldr	r6, [r3, #16]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7ff ffc8 	bl	800d342 <makeFreeRtosPriority>
 800d3b2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	695b      	ldr	r3, [r3, #20]
 800d3b8:	687a      	ldr	r2, [r7, #4]
 800d3ba:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d3bc:	9202      	str	r2, [sp, #8]
 800d3be:	9301      	str	r3, [sp, #4]
 800d3c0:	9100      	str	r1, [sp, #0]
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	4632      	mov	r2, r6
 800d3c6:	4629      	mov	r1, r5
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	f000 f8ed 	bl	800d5a8 <xTaskCreateStatic>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	60fb      	str	r3, [r7, #12]
 800d3d2:	e01c      	b.n	800d40e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	685c      	ldr	r4, [r3, #4]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d3e0:	b29e      	uxth	r6, r3
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7ff ffaa 	bl	800d342 <makeFreeRtosPriority>
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	f107 030c 	add.w	r3, r7, #12
 800d3f4:	9301      	str	r3, [sp, #4]
 800d3f6:	9200      	str	r2, [sp, #0]
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	4632      	mov	r2, r6
 800d3fc:	4629      	mov	r1, r5
 800d3fe:	4620      	mov	r0, r4
 800d400:	f000 f92c 	bl	800d65c <xTaskCreate>
 800d404:	4603      	mov	r3, r0
 800d406:	2b01      	cmp	r3, #1
 800d408:	d001      	beq.n	800d40e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d40a:	2300      	movs	r3, #0
 800d40c:	e000      	b.n	800d410 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d40e:	68fb      	ldr	r3, [r7, #12]
}
 800d410:	4618      	mov	r0, r3
 800d412:	3714      	adds	r7, #20
 800d414:	46bd      	mov	sp, r7
 800d416:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d418 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d001      	beq.n	800d42e <osDelay+0x16>
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	e000      	b.n	800d430 <osDelay+0x18>
 800d42e:	2301      	movs	r3, #1
 800d430:	4618      	mov	r0, r3
 800d432:	f000 fa49 	bl	800d8c8 <vTaskDelay>
  
  return osOK;
 800d436:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3710      	adds	r7, #16
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f103 0208 	add.w	r2, r3, #8
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d458:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f103 0208 	add.w	r2, r3, #8
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f103 0208 	add.w	r2, r3, #8
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2200      	movs	r2, #0
 800d472:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d474:	bf00      	nop
 800d476:	370c      	adds	r7, #12
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d48e:	bf00      	nop
 800d490:	370c      	adds	r7, #12
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr

0800d49a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d49a:	b480      	push	{r7}
 800d49c:	b085      	sub	sp, #20
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
 800d4a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	689a      	ldr	r2, [r3, #8]
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	689b      	ldr	r3, [r3, #8]
 800d4bc:	683a      	ldr	r2, [r7, #0]
 800d4be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	683a      	ldr	r2, [r7, #0]
 800d4c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	1c5a      	adds	r2, r3, #1
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	601a      	str	r2, [r3, #0]
}
 800d4d6:	bf00      	nop
 800d4d8:	3714      	adds	r7, #20
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr

0800d4e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d4e2:	b480      	push	{r7}
 800d4e4:	b085      	sub	sp, #20
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
 800d4ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4f8:	d103      	bne.n	800d502 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	691b      	ldr	r3, [r3, #16]
 800d4fe:	60fb      	str	r3, [r7, #12]
 800d500:	e00c      	b.n	800d51c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	3308      	adds	r3, #8
 800d506:	60fb      	str	r3, [r7, #12]
 800d508:	e002      	b.n	800d510 <vListInsert+0x2e>
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	60fb      	str	r3, [r7, #12]
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	685b      	ldr	r3, [r3, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	68ba      	ldr	r2, [r7, #8]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d2f6      	bcs.n	800d50a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	685a      	ldr	r2, [r3, #4]
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	683a      	ldr	r2, [r7, #0]
 800d52a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	68fa      	ldr	r2, [r7, #12]
 800d530:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	683a      	ldr	r2, [r7, #0]
 800d536:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	1c5a      	adds	r2, r3, #1
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	601a      	str	r2, [r3, #0]
}
 800d548:	bf00      	nop
 800d54a:	3714      	adds	r7, #20
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr

0800d554 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d554:	b480      	push	{r7}
 800d556:	b085      	sub	sp, #20
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	691b      	ldr	r3, [r3, #16]
 800d560:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	6892      	ldr	r2, [r2, #8]
 800d56a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	689b      	ldr	r3, [r3, #8]
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	6852      	ldr	r2, [r2, #4]
 800d574:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	687a      	ldr	r2, [r7, #4]
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d103      	bne.n	800d588 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	689a      	ldr	r2, [r3, #8]
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2200      	movs	r2, #0
 800d58c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	1e5a      	subs	r2, r3, #1
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3714      	adds	r7, #20
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b08e      	sub	sp, #56	; 0x38
 800d5ac:	af04      	add	r7, sp, #16
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	60b9      	str	r1, [r7, #8]
 800d5b2:	607a      	str	r2, [r7, #4]
 800d5b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d5b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d109      	bne.n	800d5d0 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c0:	f383 8811 	msr	BASEPRI, r3
 800d5c4:	f3bf 8f6f 	isb	sy
 800d5c8:	f3bf 8f4f 	dsb	sy
 800d5cc:	623b      	str	r3, [r7, #32]
 800d5ce:	e7fe      	b.n	800d5ce <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800d5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d109      	bne.n	800d5ea <xTaskCreateStatic+0x42>
 800d5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5da:	f383 8811 	msr	BASEPRI, r3
 800d5de:	f3bf 8f6f 	isb	sy
 800d5e2:	f3bf 8f4f 	dsb	sy
 800d5e6:	61fb      	str	r3, [r7, #28]
 800d5e8:	e7fe      	b.n	800d5e8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d5ea:	2354      	movs	r3, #84	; 0x54
 800d5ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	2b54      	cmp	r3, #84	; 0x54
 800d5f2:	d009      	beq.n	800d608 <xTaskCreateStatic+0x60>
 800d5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f8:	f383 8811 	msr	BASEPRI, r3
 800d5fc:	f3bf 8f6f 	isb	sy
 800d600:	f3bf 8f4f 	dsb	sy
 800d604:	61bb      	str	r3, [r7, #24]
 800d606:	e7fe      	b.n	800d606 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d608:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d01e      	beq.n	800d64e <xTaskCreateStatic+0xa6>
 800d610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d612:	2b00      	cmp	r3, #0
 800d614:	d01b      	beq.n	800d64e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d618:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d61e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d622:	2202      	movs	r2, #2
 800d624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d628:	2300      	movs	r3, #0
 800d62a:	9303      	str	r3, [sp, #12]
 800d62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62e:	9302      	str	r3, [sp, #8]
 800d630:	f107 0314 	add.w	r3, r7, #20
 800d634:	9301      	str	r3, [sp, #4]
 800d636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d638:	9300      	str	r3, [sp, #0]
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	68b9      	ldr	r1, [r7, #8]
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f000 f850 	bl	800d6e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d646:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d648:	f000 f8d4 	bl	800d7f4 <prvAddNewTaskToReadyList>
 800d64c:	e001      	b.n	800d652 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800d64e:	2300      	movs	r3, #0
 800d650:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d652:	697b      	ldr	r3, [r7, #20]
	}
 800d654:	4618      	mov	r0, r3
 800d656:	3728      	adds	r7, #40	; 0x28
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b08c      	sub	sp, #48	; 0x30
 800d660:	af04      	add	r7, sp, #16
 800d662:	60f8      	str	r0, [r7, #12]
 800d664:	60b9      	str	r1, [r7, #8]
 800d666:	603b      	str	r3, [r7, #0]
 800d668:	4613      	mov	r3, r2
 800d66a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d66c:	88fb      	ldrh	r3, [r7, #6]
 800d66e:	009b      	lsls	r3, r3, #2
 800d670:	4618      	mov	r0, r3
 800d672:	f000 feaf 	bl	800e3d4 <pvPortMalloc>
 800d676:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d00e      	beq.n	800d69c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d67e:	2054      	movs	r0, #84	; 0x54
 800d680:	f000 fea8 	bl	800e3d4 <pvPortMalloc>
 800d684:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d686:	69fb      	ldr	r3, [r7, #28]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d003      	beq.n	800d694 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d68c:	69fb      	ldr	r3, [r7, #28]
 800d68e:	697a      	ldr	r2, [r7, #20]
 800d690:	631a      	str	r2, [r3, #48]	; 0x30
 800d692:	e005      	b.n	800d6a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d694:	6978      	ldr	r0, [r7, #20]
 800d696:	f000 ff5f 	bl	800e558 <vPortFree>
 800d69a:	e001      	b.n	800d6a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d69c:	2300      	movs	r3, #0
 800d69e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d6a0:	69fb      	ldr	r3, [r7, #28]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d017      	beq.n	800d6d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d6a6:	69fb      	ldr	r3, [r7, #28]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d6ae:	88fa      	ldrh	r2, [r7, #6]
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	9303      	str	r3, [sp, #12]
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	9302      	str	r3, [sp, #8]
 800d6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ba:	9301      	str	r3, [sp, #4]
 800d6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6be:	9300      	str	r3, [sp, #0]
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	68b9      	ldr	r1, [r7, #8]
 800d6c4:	68f8      	ldr	r0, [r7, #12]
 800d6c6:	f000 f80e 	bl	800d6e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d6ca:	69f8      	ldr	r0, [r7, #28]
 800d6cc:	f000 f892 	bl	800d7f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	61bb      	str	r3, [r7, #24]
 800d6d4:	e002      	b.n	800d6dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d6d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d6da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d6dc:	69bb      	ldr	r3, [r7, #24]
	}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3720      	adds	r7, #32
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}

0800d6e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d6e6:	b580      	push	{r7, lr}
 800d6e8:	b088      	sub	sp, #32
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	60f8      	str	r0, [r7, #12]
 800d6ee:	60b9      	str	r1, [r7, #8]
 800d6f0:	607a      	str	r2, [r7, #4]
 800d6f2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d6fe:	3b01      	subs	r3, #1
 800d700:	009b      	lsls	r3, r3, #2
 800d702:	4413      	add	r3, r2
 800d704:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d706:	69bb      	ldr	r3, [r7, #24]
 800d708:	f023 0307 	bic.w	r3, r3, #7
 800d70c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d70e:	69bb      	ldr	r3, [r7, #24]
 800d710:	f003 0307 	and.w	r3, r3, #7
 800d714:	2b00      	cmp	r3, #0
 800d716:	d009      	beq.n	800d72c <prvInitialiseNewTask+0x46>
 800d718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71c:	f383 8811 	msr	BASEPRI, r3
 800d720:	f3bf 8f6f 	isb	sy
 800d724:	f3bf 8f4f 	dsb	sy
 800d728:	617b      	str	r3, [r7, #20]
 800d72a:	e7fe      	b.n	800d72a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d01f      	beq.n	800d772 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d732:	2300      	movs	r3, #0
 800d734:	61fb      	str	r3, [r7, #28]
 800d736:	e012      	b.n	800d75e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d738:	68ba      	ldr	r2, [r7, #8]
 800d73a:	69fb      	ldr	r3, [r7, #28]
 800d73c:	4413      	add	r3, r2
 800d73e:	7819      	ldrb	r1, [r3, #0]
 800d740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	4413      	add	r3, r2
 800d746:	3334      	adds	r3, #52	; 0x34
 800d748:	460a      	mov	r2, r1
 800d74a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d74c:	68ba      	ldr	r2, [r7, #8]
 800d74e:	69fb      	ldr	r3, [r7, #28]
 800d750:	4413      	add	r3, r2
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d006      	beq.n	800d766 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	3301      	adds	r3, #1
 800d75c:	61fb      	str	r3, [r7, #28]
 800d75e:	69fb      	ldr	r3, [r7, #28]
 800d760:	2b0f      	cmp	r3, #15
 800d762:	d9e9      	bls.n	800d738 <prvInitialiseNewTask+0x52>
 800d764:	e000      	b.n	800d768 <prvInitialiseNewTask+0x82>
			{
				break;
 800d766:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76a:	2200      	movs	r2, #0
 800d76c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d770:	e003      	b.n	800d77a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d774:	2200      	movs	r2, #0
 800d776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77c:	2b06      	cmp	r3, #6
 800d77e:	d901      	bls.n	800d784 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d780:	2306      	movs	r3, #6
 800d782:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d788:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d78e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d792:	2200      	movs	r2, #0
 800d794:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d798:	3304      	adds	r3, #4
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7ff fe70 	bl	800d480 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a2:	3318      	adds	r3, #24
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7ff fe6b 	bl	800d480 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b2:	f1c3 0207 	rsb	r2, r3, #7
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d7ce:	683a      	ldr	r2, [r7, #0]
 800d7d0:	68f9      	ldr	r1, [r7, #12]
 800d7d2:	69b8      	ldr	r0, [r7, #24]
 800d7d4:	f000 fbfe 	bl	800dfd4 <pxPortInitialiseStack>
 800d7d8:	4602      	mov	r2, r0
 800d7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d002      	beq.n	800d7ea <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7ea:	bf00      	nop
 800d7ec:	3720      	adds	r7, #32
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
	...

0800d7f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b082      	sub	sp, #8
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d7fc:	f000 fd0e 	bl	800e21c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d800:	4b2a      	ldr	r3, [pc, #168]	; (800d8ac <prvAddNewTaskToReadyList+0xb8>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	3301      	adds	r3, #1
 800d806:	4a29      	ldr	r2, [pc, #164]	; (800d8ac <prvAddNewTaskToReadyList+0xb8>)
 800d808:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d80a:	4b29      	ldr	r3, [pc, #164]	; (800d8b0 <prvAddNewTaskToReadyList+0xbc>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d109      	bne.n	800d826 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d812:	4a27      	ldr	r2, [pc, #156]	; (800d8b0 <prvAddNewTaskToReadyList+0xbc>)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d818:	4b24      	ldr	r3, [pc, #144]	; (800d8ac <prvAddNewTaskToReadyList+0xb8>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	d110      	bne.n	800d842 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d820:	f000 fab8 	bl	800dd94 <prvInitialiseTaskLists>
 800d824:	e00d      	b.n	800d842 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d826:	4b23      	ldr	r3, [pc, #140]	; (800d8b4 <prvAddNewTaskToReadyList+0xc0>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d109      	bne.n	800d842 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d82e:	4b20      	ldr	r3, [pc, #128]	; (800d8b0 <prvAddNewTaskToReadyList+0xbc>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d838:	429a      	cmp	r2, r3
 800d83a:	d802      	bhi.n	800d842 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d83c:	4a1c      	ldr	r2, [pc, #112]	; (800d8b0 <prvAddNewTaskToReadyList+0xbc>)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d842:	4b1d      	ldr	r3, [pc, #116]	; (800d8b8 <prvAddNewTaskToReadyList+0xc4>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	3301      	adds	r3, #1
 800d848:	4a1b      	ldr	r2, [pc, #108]	; (800d8b8 <prvAddNewTaskToReadyList+0xc4>)
 800d84a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d850:	2201      	movs	r2, #1
 800d852:	409a      	lsls	r2, r3
 800d854:	4b19      	ldr	r3, [pc, #100]	; (800d8bc <prvAddNewTaskToReadyList+0xc8>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	4313      	orrs	r3, r2
 800d85a:	4a18      	ldr	r2, [pc, #96]	; (800d8bc <prvAddNewTaskToReadyList+0xc8>)
 800d85c:	6013      	str	r3, [r2, #0]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d862:	4613      	mov	r3, r2
 800d864:	009b      	lsls	r3, r3, #2
 800d866:	4413      	add	r3, r2
 800d868:	009b      	lsls	r3, r3, #2
 800d86a:	4a15      	ldr	r2, [pc, #84]	; (800d8c0 <prvAddNewTaskToReadyList+0xcc>)
 800d86c:	441a      	add	r2, r3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	3304      	adds	r3, #4
 800d872:	4619      	mov	r1, r3
 800d874:	4610      	mov	r0, r2
 800d876:	f7ff fe10 	bl	800d49a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d87a:	f000 fcfd 	bl	800e278 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d87e:	4b0d      	ldr	r3, [pc, #52]	; (800d8b4 <prvAddNewTaskToReadyList+0xc0>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d00e      	beq.n	800d8a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d886:	4b0a      	ldr	r3, [pc, #40]	; (800d8b0 <prvAddNewTaskToReadyList+0xbc>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d890:	429a      	cmp	r2, r3
 800d892:	d207      	bcs.n	800d8a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d894:	4b0b      	ldr	r3, [pc, #44]	; (800d8c4 <prvAddNewTaskToReadyList+0xd0>)
 800d896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d89a:	601a      	str	r2, [r3, #0]
 800d89c:	f3bf 8f4f 	dsb	sy
 800d8a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8a4:	bf00      	nop
 800d8a6:	3708      	adds	r7, #8
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}
 800d8ac:	20000d90 	.word	0x20000d90
 800d8b0:	20000c90 	.word	0x20000c90
 800d8b4:	20000d9c 	.word	0x20000d9c
 800d8b8:	20000dac 	.word	0x20000dac
 800d8bc:	20000d98 	.word	0x20000d98
 800d8c0:	20000c94 	.word	0x20000c94
 800d8c4:	e000ed04 	.word	0xe000ed04

0800d8c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d016      	beq.n	800d908 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d8da:	4b13      	ldr	r3, [pc, #76]	; (800d928 <vTaskDelay+0x60>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d009      	beq.n	800d8f6 <vTaskDelay+0x2e>
 800d8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e6:	f383 8811 	msr	BASEPRI, r3
 800d8ea:	f3bf 8f6f 	isb	sy
 800d8ee:	f3bf 8f4f 	dsb	sy
 800d8f2:	60bb      	str	r3, [r7, #8]
 800d8f4:	e7fe      	b.n	800d8f4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800d8f6:	f000 f879 	bl	800d9ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d8fa:	2100      	movs	r1, #0
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f000 fb03 	bl	800df08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d902:	f000 f881 	bl	800da08 <xTaskResumeAll>
 800d906:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d107      	bne.n	800d91e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800d90e:	4b07      	ldr	r3, [pc, #28]	; (800d92c <vTaskDelay+0x64>)
 800d910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d914:	601a      	str	r2, [r3, #0]
 800d916:	f3bf 8f4f 	dsb	sy
 800d91a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d91e:	bf00      	nop
 800d920:	3710      	adds	r7, #16
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	20000db8 	.word	0x20000db8
 800d92c:	e000ed04 	.word	0xe000ed04

0800d930 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b08a      	sub	sp, #40	; 0x28
 800d934:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d936:	2300      	movs	r3, #0
 800d938:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d93a:	2300      	movs	r3, #0
 800d93c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d93e:	463a      	mov	r2, r7
 800d940:	1d39      	adds	r1, r7, #4
 800d942:	f107 0308 	add.w	r3, r7, #8
 800d946:	4618      	mov	r0, r3
 800d948:	f7f2 fdca 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d94c:	6839      	ldr	r1, [r7, #0]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	68ba      	ldr	r2, [r7, #8]
 800d952:	9202      	str	r2, [sp, #8]
 800d954:	9301      	str	r3, [sp, #4]
 800d956:	2300      	movs	r3, #0
 800d958:	9300      	str	r3, [sp, #0]
 800d95a:	2300      	movs	r3, #0
 800d95c:	460a      	mov	r2, r1
 800d95e:	491d      	ldr	r1, [pc, #116]	; (800d9d4 <vTaskStartScheduler+0xa4>)
 800d960:	481d      	ldr	r0, [pc, #116]	; (800d9d8 <vTaskStartScheduler+0xa8>)
 800d962:	f7ff fe21 	bl	800d5a8 <xTaskCreateStatic>
 800d966:	4602      	mov	r2, r0
 800d968:	4b1c      	ldr	r3, [pc, #112]	; (800d9dc <vTaskStartScheduler+0xac>)
 800d96a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d96c:	4b1b      	ldr	r3, [pc, #108]	; (800d9dc <vTaskStartScheduler+0xac>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d002      	beq.n	800d97a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d974:	2301      	movs	r3, #1
 800d976:	617b      	str	r3, [r7, #20]
 800d978:	e001      	b.n	800d97e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d97a:	2300      	movs	r3, #0
 800d97c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	2b01      	cmp	r3, #1
 800d982:	d115      	bne.n	800d9b0 <vTaskStartScheduler+0x80>
 800d984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d988:	f383 8811 	msr	BASEPRI, r3
 800d98c:	f3bf 8f6f 	isb	sy
 800d990:	f3bf 8f4f 	dsb	sy
 800d994:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d996:	4b12      	ldr	r3, [pc, #72]	; (800d9e0 <vTaskStartScheduler+0xb0>)
 800d998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d99c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d99e:	4b11      	ldr	r3, [pc, #68]	; (800d9e4 <vTaskStartScheduler+0xb4>)
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d9a4:	4b10      	ldr	r3, [pc, #64]	; (800d9e8 <vTaskStartScheduler+0xb8>)
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d9aa:	f000 fb99 	bl	800e0e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d9ae:	e00d      	b.n	800d9cc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9b6:	d109      	bne.n	800d9cc <vTaskStartScheduler+0x9c>
 800d9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9bc:	f383 8811 	msr	BASEPRI, r3
 800d9c0:	f3bf 8f6f 	isb	sy
 800d9c4:	f3bf 8f4f 	dsb	sy
 800d9c8:	60fb      	str	r3, [r7, #12]
 800d9ca:	e7fe      	b.n	800d9ca <vTaskStartScheduler+0x9a>
}
 800d9cc:	bf00      	nop
 800d9ce:	3718      	adds	r7, #24
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	0800f938 	.word	0x0800f938
 800d9d8:	0800dd65 	.word	0x0800dd65
 800d9dc:	20000db4 	.word	0x20000db4
 800d9e0:	20000db0 	.word	0x20000db0
 800d9e4:	20000d9c 	.word	0x20000d9c
 800d9e8:	20000d94 	.word	0x20000d94

0800d9ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d9f0:	4b04      	ldr	r3, [pc, #16]	; (800da04 <vTaskSuspendAll+0x18>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	4a03      	ldr	r2, [pc, #12]	; (800da04 <vTaskSuspendAll+0x18>)
 800d9f8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d9fa:	bf00      	nop
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr
 800da04:	20000db8 	.word	0x20000db8

0800da08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800da0e:	2300      	movs	r3, #0
 800da10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800da12:	2300      	movs	r3, #0
 800da14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800da16:	4b41      	ldr	r3, [pc, #260]	; (800db1c <xTaskResumeAll+0x114>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d109      	bne.n	800da32 <xTaskResumeAll+0x2a>
 800da1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da22:	f383 8811 	msr	BASEPRI, r3
 800da26:	f3bf 8f6f 	isb	sy
 800da2a:	f3bf 8f4f 	dsb	sy
 800da2e:	603b      	str	r3, [r7, #0]
 800da30:	e7fe      	b.n	800da30 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800da32:	f000 fbf3 	bl	800e21c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800da36:	4b39      	ldr	r3, [pc, #228]	; (800db1c <xTaskResumeAll+0x114>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	3b01      	subs	r3, #1
 800da3c:	4a37      	ldr	r2, [pc, #220]	; (800db1c <xTaskResumeAll+0x114>)
 800da3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da40:	4b36      	ldr	r3, [pc, #216]	; (800db1c <xTaskResumeAll+0x114>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d161      	bne.n	800db0c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800da48:	4b35      	ldr	r3, [pc, #212]	; (800db20 <xTaskResumeAll+0x118>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d05d      	beq.n	800db0c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da50:	e02e      	b.n	800dab0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da52:	4b34      	ldr	r3, [pc, #208]	; (800db24 <xTaskResumeAll+0x11c>)
 800da54:	68db      	ldr	r3, [r3, #12]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	3318      	adds	r3, #24
 800da5e:	4618      	mov	r0, r3
 800da60:	f7ff fd78 	bl	800d554 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	3304      	adds	r3, #4
 800da68:	4618      	mov	r0, r3
 800da6a:	f7ff fd73 	bl	800d554 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da72:	2201      	movs	r2, #1
 800da74:	409a      	lsls	r2, r3
 800da76:	4b2c      	ldr	r3, [pc, #176]	; (800db28 <xTaskResumeAll+0x120>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4313      	orrs	r3, r2
 800da7c:	4a2a      	ldr	r2, [pc, #168]	; (800db28 <xTaskResumeAll+0x120>)
 800da7e:	6013      	str	r3, [r2, #0]
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da84:	4613      	mov	r3, r2
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	4413      	add	r3, r2
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	4a27      	ldr	r2, [pc, #156]	; (800db2c <xTaskResumeAll+0x124>)
 800da8e:	441a      	add	r2, r3
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	3304      	adds	r3, #4
 800da94:	4619      	mov	r1, r3
 800da96:	4610      	mov	r0, r2
 800da98:	f7ff fcff 	bl	800d49a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daa0:	4b23      	ldr	r3, [pc, #140]	; (800db30 <xTaskResumeAll+0x128>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d302      	bcc.n	800dab0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800daaa:	4b22      	ldr	r3, [pc, #136]	; (800db34 <xTaskResumeAll+0x12c>)
 800daac:	2201      	movs	r2, #1
 800daae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dab0:	4b1c      	ldr	r3, [pc, #112]	; (800db24 <xTaskResumeAll+0x11c>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d1cc      	bne.n	800da52 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d001      	beq.n	800dac2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dabe:	f000 fa03 	bl	800dec8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800dac2:	4b1d      	ldr	r3, [pc, #116]	; (800db38 <xTaskResumeAll+0x130>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d010      	beq.n	800daf0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dace:	f000 f837 	bl	800db40 <xTaskIncrementTick>
 800dad2:	4603      	mov	r3, r0
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d002      	beq.n	800dade <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800dad8:	4b16      	ldr	r3, [pc, #88]	; (800db34 <xTaskResumeAll+0x12c>)
 800dada:	2201      	movs	r2, #1
 800dadc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	3b01      	subs	r3, #1
 800dae2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d1f1      	bne.n	800dace <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800daea:	4b13      	ldr	r3, [pc, #76]	; (800db38 <xTaskResumeAll+0x130>)
 800daec:	2200      	movs	r2, #0
 800daee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800daf0:	4b10      	ldr	r3, [pc, #64]	; (800db34 <xTaskResumeAll+0x12c>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d009      	beq.n	800db0c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800daf8:	2301      	movs	r3, #1
 800dafa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dafc:	4b0f      	ldr	r3, [pc, #60]	; (800db3c <xTaskResumeAll+0x134>)
 800dafe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db02:	601a      	str	r2, [r3, #0]
 800db04:	f3bf 8f4f 	dsb	sy
 800db08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db0c:	f000 fbb4 	bl	800e278 <vPortExitCritical>

	return xAlreadyYielded;
 800db10:	68bb      	ldr	r3, [r7, #8]
}
 800db12:	4618      	mov	r0, r3
 800db14:	3710      	adds	r7, #16
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	bf00      	nop
 800db1c:	20000db8 	.word	0x20000db8
 800db20:	20000d90 	.word	0x20000d90
 800db24:	20000d50 	.word	0x20000d50
 800db28:	20000d98 	.word	0x20000d98
 800db2c:	20000c94 	.word	0x20000c94
 800db30:	20000c90 	.word	0x20000c90
 800db34:	20000da4 	.word	0x20000da4
 800db38:	20000da0 	.word	0x20000da0
 800db3c:	e000ed04 	.word	0xe000ed04

0800db40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b086      	sub	sp, #24
 800db44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800db46:	2300      	movs	r3, #0
 800db48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db4a:	4b4e      	ldr	r3, [pc, #312]	; (800dc84 <xTaskIncrementTick+0x144>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	f040 8087 	bne.w	800dc62 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800db54:	4b4c      	ldr	r3, [pc, #304]	; (800dc88 <xTaskIncrementTick+0x148>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	3301      	adds	r3, #1
 800db5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800db5c:	4a4a      	ldr	r2, [pc, #296]	; (800dc88 <xTaskIncrementTick+0x148>)
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d11f      	bne.n	800dba8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800db68:	4b48      	ldr	r3, [pc, #288]	; (800dc8c <xTaskIncrementTick+0x14c>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d009      	beq.n	800db86 <xTaskIncrementTick+0x46>
 800db72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db76:	f383 8811 	msr	BASEPRI, r3
 800db7a:	f3bf 8f6f 	isb	sy
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	603b      	str	r3, [r7, #0]
 800db84:	e7fe      	b.n	800db84 <xTaskIncrementTick+0x44>
 800db86:	4b41      	ldr	r3, [pc, #260]	; (800dc8c <xTaskIncrementTick+0x14c>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	60fb      	str	r3, [r7, #12]
 800db8c:	4b40      	ldr	r3, [pc, #256]	; (800dc90 <xTaskIncrementTick+0x150>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	4a3e      	ldr	r2, [pc, #248]	; (800dc8c <xTaskIncrementTick+0x14c>)
 800db92:	6013      	str	r3, [r2, #0]
 800db94:	4a3e      	ldr	r2, [pc, #248]	; (800dc90 <xTaskIncrementTick+0x150>)
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	6013      	str	r3, [r2, #0]
 800db9a:	4b3e      	ldr	r3, [pc, #248]	; (800dc94 <xTaskIncrementTick+0x154>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	3301      	adds	r3, #1
 800dba0:	4a3c      	ldr	r2, [pc, #240]	; (800dc94 <xTaskIncrementTick+0x154>)
 800dba2:	6013      	str	r3, [r2, #0]
 800dba4:	f000 f990 	bl	800dec8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dba8:	4b3b      	ldr	r3, [pc, #236]	; (800dc98 <xTaskIncrementTick+0x158>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	693a      	ldr	r2, [r7, #16]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d348      	bcc.n	800dc44 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbb2:	4b36      	ldr	r3, [pc, #216]	; (800dc8c <xTaskIncrementTick+0x14c>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d104      	bne.n	800dbc6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbbc:	4b36      	ldr	r3, [pc, #216]	; (800dc98 <xTaskIncrementTick+0x158>)
 800dbbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dbc2:	601a      	str	r2, [r3, #0]
					break;
 800dbc4:	e03e      	b.n	800dc44 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbc6:	4b31      	ldr	r3, [pc, #196]	; (800dc8c <xTaskIncrementTick+0x14c>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	68db      	ldr	r3, [r3, #12]
 800dbcc:	68db      	ldr	r3, [r3, #12]
 800dbce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dbd6:	693a      	ldr	r2, [r7, #16]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d203      	bcs.n	800dbe6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dbde:	4a2e      	ldr	r2, [pc, #184]	; (800dc98 <xTaskIncrementTick+0x158>)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dbe4:	e02e      	b.n	800dc44 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	3304      	adds	r3, #4
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7ff fcb2 	bl	800d554 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d004      	beq.n	800dc02 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	3318      	adds	r3, #24
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f7ff fca9 	bl	800d554 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc06:	2201      	movs	r2, #1
 800dc08:	409a      	lsls	r2, r3
 800dc0a:	4b24      	ldr	r3, [pc, #144]	; (800dc9c <xTaskIncrementTick+0x15c>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	4a22      	ldr	r2, [pc, #136]	; (800dc9c <xTaskIncrementTick+0x15c>)
 800dc12:	6013      	str	r3, [r2, #0]
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc18:	4613      	mov	r3, r2
 800dc1a:	009b      	lsls	r3, r3, #2
 800dc1c:	4413      	add	r3, r2
 800dc1e:	009b      	lsls	r3, r3, #2
 800dc20:	4a1f      	ldr	r2, [pc, #124]	; (800dca0 <xTaskIncrementTick+0x160>)
 800dc22:	441a      	add	r2, r3
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	3304      	adds	r3, #4
 800dc28:	4619      	mov	r1, r3
 800dc2a:	4610      	mov	r0, r2
 800dc2c:	f7ff fc35 	bl	800d49a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc34:	4b1b      	ldr	r3, [pc, #108]	; (800dca4 <xTaskIncrementTick+0x164>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d3b9      	bcc.n	800dbb2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800dc3e:	2301      	movs	r3, #1
 800dc40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc42:	e7b6      	b.n	800dbb2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dc44:	4b17      	ldr	r3, [pc, #92]	; (800dca4 <xTaskIncrementTick+0x164>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc4a:	4915      	ldr	r1, [pc, #84]	; (800dca0 <xTaskIncrementTick+0x160>)
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	4413      	add	r3, r2
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	440b      	add	r3, r1
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d907      	bls.n	800dc6c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	617b      	str	r3, [r7, #20]
 800dc60:	e004      	b.n	800dc6c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800dc62:	4b11      	ldr	r3, [pc, #68]	; (800dca8 <xTaskIncrementTick+0x168>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	3301      	adds	r3, #1
 800dc68:	4a0f      	ldr	r2, [pc, #60]	; (800dca8 <xTaskIncrementTick+0x168>)
 800dc6a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800dc6c:	4b0f      	ldr	r3, [pc, #60]	; (800dcac <xTaskIncrementTick+0x16c>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d001      	beq.n	800dc78 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800dc74:	2301      	movs	r3, #1
 800dc76:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800dc78:	697b      	ldr	r3, [r7, #20]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3718      	adds	r7, #24
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	20000db8 	.word	0x20000db8
 800dc88:	20000d94 	.word	0x20000d94
 800dc8c:	20000d48 	.word	0x20000d48
 800dc90:	20000d4c 	.word	0x20000d4c
 800dc94:	20000da8 	.word	0x20000da8
 800dc98:	20000db0 	.word	0x20000db0
 800dc9c:	20000d98 	.word	0x20000d98
 800dca0:	20000c94 	.word	0x20000c94
 800dca4:	20000c90 	.word	0x20000c90
 800dca8:	20000da0 	.word	0x20000da0
 800dcac:	20000da4 	.word	0x20000da4

0800dcb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b087      	sub	sp, #28
 800dcb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dcb6:	4b26      	ldr	r3, [pc, #152]	; (800dd50 <vTaskSwitchContext+0xa0>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d003      	beq.n	800dcc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dcbe:	4b25      	ldr	r3, [pc, #148]	; (800dd54 <vTaskSwitchContext+0xa4>)
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dcc4:	e03e      	b.n	800dd44 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800dcc6:	4b23      	ldr	r3, [pc, #140]	; (800dd54 <vTaskSwitchContext+0xa4>)
 800dcc8:	2200      	movs	r2, #0
 800dcca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dccc:	4b22      	ldr	r3, [pc, #136]	; (800dd58 <vTaskSwitchContext+0xa8>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	fab3 f383 	clz	r3, r3
 800dcd8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dcda:	7afb      	ldrb	r3, [r7, #11]
 800dcdc:	f1c3 031f 	rsb	r3, r3, #31
 800dce0:	617b      	str	r3, [r7, #20]
 800dce2:	491e      	ldr	r1, [pc, #120]	; (800dd5c <vTaskSwitchContext+0xac>)
 800dce4:	697a      	ldr	r2, [r7, #20]
 800dce6:	4613      	mov	r3, r2
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	4413      	add	r3, r2
 800dcec:	009b      	lsls	r3, r3, #2
 800dcee:	440b      	add	r3, r1
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d109      	bne.n	800dd0a <vTaskSwitchContext+0x5a>
	__asm volatile
 800dcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcfa:	f383 8811 	msr	BASEPRI, r3
 800dcfe:	f3bf 8f6f 	isb	sy
 800dd02:	f3bf 8f4f 	dsb	sy
 800dd06:	607b      	str	r3, [r7, #4]
 800dd08:	e7fe      	b.n	800dd08 <vTaskSwitchContext+0x58>
 800dd0a:	697a      	ldr	r2, [r7, #20]
 800dd0c:	4613      	mov	r3, r2
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	4413      	add	r3, r2
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	4a11      	ldr	r2, [pc, #68]	; (800dd5c <vTaskSwitchContext+0xac>)
 800dd16:	4413      	add	r3, r2
 800dd18:	613b      	str	r3, [r7, #16]
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	685a      	ldr	r2, [r3, #4]
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	605a      	str	r2, [r3, #4]
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	685a      	ldr	r2, [r3, #4]
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	3308      	adds	r3, #8
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d104      	bne.n	800dd3a <vTaskSwitchContext+0x8a>
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	685a      	ldr	r2, [r3, #4]
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	605a      	str	r2, [r3, #4]
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	68db      	ldr	r3, [r3, #12]
 800dd40:	4a07      	ldr	r2, [pc, #28]	; (800dd60 <vTaskSwitchContext+0xb0>)
 800dd42:	6013      	str	r3, [r2, #0]
}
 800dd44:	bf00      	nop
 800dd46:	371c      	adds	r7, #28
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr
 800dd50:	20000db8 	.word	0x20000db8
 800dd54:	20000da4 	.word	0x20000da4
 800dd58:	20000d98 	.word	0x20000d98
 800dd5c:	20000c94 	.word	0x20000c94
 800dd60:	20000c90 	.word	0x20000c90

0800dd64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dd6c:	f000 f852 	bl	800de14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dd70:	4b06      	ldr	r3, [pc, #24]	; (800dd8c <prvIdleTask+0x28>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d9f9      	bls.n	800dd6c <prvIdleTask+0x8>
			{
				taskYIELD();
 800dd78:	4b05      	ldr	r3, [pc, #20]	; (800dd90 <prvIdleTask+0x2c>)
 800dd7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd7e:	601a      	str	r2, [r3, #0]
 800dd80:	f3bf 8f4f 	dsb	sy
 800dd84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dd88:	e7f0      	b.n	800dd6c <prvIdleTask+0x8>
 800dd8a:	bf00      	nop
 800dd8c:	20000c94 	.word	0x20000c94
 800dd90:	e000ed04 	.word	0xe000ed04

0800dd94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b082      	sub	sp, #8
 800dd98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	607b      	str	r3, [r7, #4]
 800dd9e:	e00c      	b.n	800ddba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dda0:	687a      	ldr	r2, [r7, #4]
 800dda2:	4613      	mov	r3, r2
 800dda4:	009b      	lsls	r3, r3, #2
 800dda6:	4413      	add	r3, r2
 800dda8:	009b      	lsls	r3, r3, #2
 800ddaa:	4a12      	ldr	r2, [pc, #72]	; (800ddf4 <prvInitialiseTaskLists+0x60>)
 800ddac:	4413      	add	r3, r2
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7ff fb46 	bl	800d440 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	607b      	str	r3, [r7, #4]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2b06      	cmp	r3, #6
 800ddbe:	d9ef      	bls.n	800dda0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ddc0:	480d      	ldr	r0, [pc, #52]	; (800ddf8 <prvInitialiseTaskLists+0x64>)
 800ddc2:	f7ff fb3d 	bl	800d440 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ddc6:	480d      	ldr	r0, [pc, #52]	; (800ddfc <prvInitialiseTaskLists+0x68>)
 800ddc8:	f7ff fb3a 	bl	800d440 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ddcc:	480c      	ldr	r0, [pc, #48]	; (800de00 <prvInitialiseTaskLists+0x6c>)
 800ddce:	f7ff fb37 	bl	800d440 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ddd2:	480c      	ldr	r0, [pc, #48]	; (800de04 <prvInitialiseTaskLists+0x70>)
 800ddd4:	f7ff fb34 	bl	800d440 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ddd8:	480b      	ldr	r0, [pc, #44]	; (800de08 <prvInitialiseTaskLists+0x74>)
 800ddda:	f7ff fb31 	bl	800d440 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ddde:	4b0b      	ldr	r3, [pc, #44]	; (800de0c <prvInitialiseTaskLists+0x78>)
 800dde0:	4a05      	ldr	r2, [pc, #20]	; (800ddf8 <prvInitialiseTaskLists+0x64>)
 800dde2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dde4:	4b0a      	ldr	r3, [pc, #40]	; (800de10 <prvInitialiseTaskLists+0x7c>)
 800dde6:	4a05      	ldr	r2, [pc, #20]	; (800ddfc <prvInitialiseTaskLists+0x68>)
 800dde8:	601a      	str	r2, [r3, #0]
}
 800ddea:	bf00      	nop
 800ddec:	3708      	adds	r7, #8
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	20000c94 	.word	0x20000c94
 800ddf8:	20000d20 	.word	0x20000d20
 800ddfc:	20000d34 	.word	0x20000d34
 800de00:	20000d50 	.word	0x20000d50
 800de04:	20000d64 	.word	0x20000d64
 800de08:	20000d7c 	.word	0x20000d7c
 800de0c:	20000d48 	.word	0x20000d48
 800de10:	20000d4c 	.word	0x20000d4c

0800de14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de1a:	e019      	b.n	800de50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800de1c:	f000 f9fe 	bl	800e21c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de20:	4b0f      	ldr	r3, [pc, #60]	; (800de60 <prvCheckTasksWaitingTermination+0x4c>)
 800de22:	68db      	ldr	r3, [r3, #12]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	3304      	adds	r3, #4
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7ff fb91 	bl	800d554 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800de32:	4b0c      	ldr	r3, [pc, #48]	; (800de64 <prvCheckTasksWaitingTermination+0x50>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	3b01      	subs	r3, #1
 800de38:	4a0a      	ldr	r2, [pc, #40]	; (800de64 <prvCheckTasksWaitingTermination+0x50>)
 800de3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800de3c:	4b0a      	ldr	r3, [pc, #40]	; (800de68 <prvCheckTasksWaitingTermination+0x54>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	3b01      	subs	r3, #1
 800de42:	4a09      	ldr	r2, [pc, #36]	; (800de68 <prvCheckTasksWaitingTermination+0x54>)
 800de44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800de46:	f000 fa17 	bl	800e278 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 f80e 	bl	800de6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de50:	4b05      	ldr	r3, [pc, #20]	; (800de68 <prvCheckTasksWaitingTermination+0x54>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d1e1      	bne.n	800de1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800de58:	bf00      	nop
 800de5a:	3708      	adds	r7, #8
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	20000d64 	.word	0x20000d64
 800de64:	20000d90 	.word	0x20000d90
 800de68:	20000d78 	.word	0x20000d78

0800de6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b084      	sub	sp, #16
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d108      	bne.n	800de90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de82:	4618      	mov	r0, r3
 800de84:	f000 fb68 	bl	800e558 <vPortFree>
				vPortFree( pxTCB );
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f000 fb65 	bl	800e558 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800de8e:	e017      	b.n	800dec0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800de96:	2b01      	cmp	r3, #1
 800de98:	d103      	bne.n	800dea2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f000 fb5c 	bl	800e558 <vPortFree>
	}
 800dea0:	e00e      	b.n	800dec0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dea8:	2b02      	cmp	r3, #2
 800deaa:	d009      	beq.n	800dec0 <prvDeleteTCB+0x54>
 800deac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deb0:	f383 8811 	msr	BASEPRI, r3
 800deb4:	f3bf 8f6f 	isb	sy
 800deb8:	f3bf 8f4f 	dsb	sy
 800debc:	60fb      	str	r3, [r7, #12]
 800debe:	e7fe      	b.n	800debe <prvDeleteTCB+0x52>
	}
 800dec0:	bf00      	nop
 800dec2:	3710      	adds	r7, #16
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}

0800dec8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dec8:	b480      	push	{r7}
 800deca:	b083      	sub	sp, #12
 800decc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dece:	4b0c      	ldr	r3, [pc, #48]	; (800df00 <prvResetNextTaskUnblockTime+0x38>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d104      	bne.n	800dee2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ded8:	4b0a      	ldr	r3, [pc, #40]	; (800df04 <prvResetNextTaskUnblockTime+0x3c>)
 800deda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dede:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dee0:	e008      	b.n	800def4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dee2:	4b07      	ldr	r3, [pc, #28]	; (800df00 <prvResetNextTaskUnblockTime+0x38>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	68db      	ldr	r3, [r3, #12]
 800dee8:	68db      	ldr	r3, [r3, #12]
 800deea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	4a04      	ldr	r2, [pc, #16]	; (800df04 <prvResetNextTaskUnblockTime+0x3c>)
 800def2:	6013      	str	r3, [r2, #0]
}
 800def4:	bf00      	nop
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr
 800df00:	20000d48 	.word	0x20000d48
 800df04:	20000db0 	.word	0x20000db0

0800df08 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b084      	sub	sp, #16
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800df12:	4b29      	ldr	r3, [pc, #164]	; (800dfb8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df18:	4b28      	ldr	r3, [pc, #160]	; (800dfbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	3304      	adds	r3, #4
 800df1e:	4618      	mov	r0, r3
 800df20:	f7ff fb18 	bl	800d554 <uxListRemove>
 800df24:	4603      	mov	r3, r0
 800df26:	2b00      	cmp	r3, #0
 800df28:	d10b      	bne.n	800df42 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800df2a:	4b24      	ldr	r3, [pc, #144]	; (800dfbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df30:	2201      	movs	r2, #1
 800df32:	fa02 f303 	lsl.w	r3, r2, r3
 800df36:	43da      	mvns	r2, r3
 800df38:	4b21      	ldr	r3, [pc, #132]	; (800dfc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4013      	ands	r3, r2
 800df3e:	4a20      	ldr	r2, [pc, #128]	; (800dfc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800df40:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df48:	d10a      	bne.n	800df60 <prvAddCurrentTaskToDelayedList+0x58>
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d007      	beq.n	800df60 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df50:	4b1a      	ldr	r3, [pc, #104]	; (800dfbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	3304      	adds	r3, #4
 800df56:	4619      	mov	r1, r3
 800df58:	481a      	ldr	r0, [pc, #104]	; (800dfc4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800df5a:	f7ff fa9e 	bl	800d49a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800df5e:	e026      	b.n	800dfae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800df60:	68fa      	ldr	r2, [r7, #12]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	4413      	add	r3, r2
 800df66:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800df68:	4b14      	ldr	r3, [pc, #80]	; (800dfbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	68ba      	ldr	r2, [r7, #8]
 800df6e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800df70:	68ba      	ldr	r2, [r7, #8]
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	429a      	cmp	r2, r3
 800df76:	d209      	bcs.n	800df8c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df78:	4b13      	ldr	r3, [pc, #76]	; (800dfc8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800df7a:	681a      	ldr	r2, [r3, #0]
 800df7c:	4b0f      	ldr	r3, [pc, #60]	; (800dfbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	3304      	adds	r3, #4
 800df82:	4619      	mov	r1, r3
 800df84:	4610      	mov	r0, r2
 800df86:	f7ff faac 	bl	800d4e2 <vListInsert>
}
 800df8a:	e010      	b.n	800dfae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df8c:	4b0f      	ldr	r3, [pc, #60]	; (800dfcc <prvAddCurrentTaskToDelayedList+0xc4>)
 800df8e:	681a      	ldr	r2, [r3, #0]
 800df90:	4b0a      	ldr	r3, [pc, #40]	; (800dfbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	3304      	adds	r3, #4
 800df96:	4619      	mov	r1, r3
 800df98:	4610      	mov	r0, r2
 800df9a:	f7ff faa2 	bl	800d4e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800df9e:	4b0c      	ldr	r3, [pc, #48]	; (800dfd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	68ba      	ldr	r2, [r7, #8]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d202      	bcs.n	800dfae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dfa8:	4a09      	ldr	r2, [pc, #36]	; (800dfd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	6013      	str	r3, [r2, #0]
}
 800dfae:	bf00      	nop
 800dfb0:	3710      	adds	r7, #16
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	20000d94 	.word	0x20000d94
 800dfbc:	20000c90 	.word	0x20000c90
 800dfc0:	20000d98 	.word	0x20000d98
 800dfc4:	20000d7c 	.word	0x20000d7c
 800dfc8:	20000d4c 	.word	0x20000d4c
 800dfcc:	20000d48 	.word	0x20000d48
 800dfd0:	20000db0 	.word	0x20000db0

0800dfd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b085      	sub	sp, #20
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	60f8      	str	r0, [r7, #12]
 800dfdc:	60b9      	str	r1, [r7, #8]
 800dfde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	3b04      	subs	r3, #4
 800dfe4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dfec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	3b04      	subs	r3, #4
 800dff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	f023 0201 	bic.w	r2, r3, #1
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	3b04      	subs	r3, #4
 800e002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e004:	4a0c      	ldr	r2, [pc, #48]	; (800e038 <pxPortInitialiseStack+0x64>)
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	3b14      	subs	r3, #20
 800e00e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	3b04      	subs	r3, #4
 800e01a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	f06f 0202 	mvn.w	r2, #2
 800e022:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	3b20      	subs	r3, #32
 800e028:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e02a:	68fb      	ldr	r3, [r7, #12]
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3714      	adds	r7, #20
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr
 800e038:	0800e03d 	.word	0x0800e03d

0800e03c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e03c:	b480      	push	{r7}
 800e03e:	b085      	sub	sp, #20
 800e040:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e042:	2300      	movs	r3, #0
 800e044:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e046:	4b11      	ldr	r3, [pc, #68]	; (800e08c <prvTaskExitError+0x50>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e04e:	d009      	beq.n	800e064 <prvTaskExitError+0x28>
 800e050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e054:	f383 8811 	msr	BASEPRI, r3
 800e058:	f3bf 8f6f 	isb	sy
 800e05c:	f3bf 8f4f 	dsb	sy
 800e060:	60fb      	str	r3, [r7, #12]
 800e062:	e7fe      	b.n	800e062 <prvTaskExitError+0x26>
 800e064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e068:	f383 8811 	msr	BASEPRI, r3
 800e06c:	f3bf 8f6f 	isb	sy
 800e070:	f3bf 8f4f 	dsb	sy
 800e074:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e076:	bf00      	nop
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d0fc      	beq.n	800e078 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e07e:	bf00      	nop
 800e080:	3714      	adds	r7, #20
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr
 800e08a:	bf00      	nop
 800e08c:	20000124 	.word	0x20000124

0800e090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e090:	4b07      	ldr	r3, [pc, #28]	; (800e0b0 <pxCurrentTCBConst2>)
 800e092:	6819      	ldr	r1, [r3, #0]
 800e094:	6808      	ldr	r0, [r1, #0]
 800e096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e09a:	f380 8809 	msr	PSP, r0
 800e09e:	f3bf 8f6f 	isb	sy
 800e0a2:	f04f 0000 	mov.w	r0, #0
 800e0a6:	f380 8811 	msr	BASEPRI, r0
 800e0aa:	4770      	bx	lr
 800e0ac:	f3af 8000 	nop.w

0800e0b0 <pxCurrentTCBConst2>:
 800e0b0:	20000c90 	.word	0x20000c90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e0b4:	bf00      	nop
 800e0b6:	bf00      	nop

0800e0b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e0b8:	4808      	ldr	r0, [pc, #32]	; (800e0dc <prvPortStartFirstTask+0x24>)
 800e0ba:	6800      	ldr	r0, [r0, #0]
 800e0bc:	6800      	ldr	r0, [r0, #0]
 800e0be:	f380 8808 	msr	MSP, r0
 800e0c2:	f04f 0000 	mov.w	r0, #0
 800e0c6:	f380 8814 	msr	CONTROL, r0
 800e0ca:	b662      	cpsie	i
 800e0cc:	b661      	cpsie	f
 800e0ce:	f3bf 8f4f 	dsb	sy
 800e0d2:	f3bf 8f6f 	isb	sy
 800e0d6:	df00      	svc	0
 800e0d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e0da:	bf00      	nop
 800e0dc:	e000ed08 	.word	0xe000ed08

0800e0e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b086      	sub	sp, #24
 800e0e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e0e6:	4b44      	ldr	r3, [pc, #272]	; (800e1f8 <xPortStartScheduler+0x118>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4a44      	ldr	r2, [pc, #272]	; (800e1fc <xPortStartScheduler+0x11c>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d109      	bne.n	800e104 <xPortStartScheduler+0x24>
 800e0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f4:	f383 8811 	msr	BASEPRI, r3
 800e0f8:	f3bf 8f6f 	isb	sy
 800e0fc:	f3bf 8f4f 	dsb	sy
 800e100:	613b      	str	r3, [r7, #16]
 800e102:	e7fe      	b.n	800e102 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e104:	4b3c      	ldr	r3, [pc, #240]	; (800e1f8 <xPortStartScheduler+0x118>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	4a3d      	ldr	r2, [pc, #244]	; (800e200 <xPortStartScheduler+0x120>)
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d109      	bne.n	800e122 <xPortStartScheduler+0x42>
 800e10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	60fb      	str	r3, [r7, #12]
 800e120:	e7fe      	b.n	800e120 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e122:	4b38      	ldr	r3, [pc, #224]	; (800e204 <xPortStartScheduler+0x124>)
 800e124:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	b2db      	uxtb	r3, r3
 800e12c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	22ff      	movs	r2, #255	; 0xff
 800e132:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e13c:	78fb      	ldrb	r3, [r7, #3]
 800e13e:	b2db      	uxtb	r3, r3
 800e140:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e144:	b2da      	uxtb	r2, r3
 800e146:	4b30      	ldr	r3, [pc, #192]	; (800e208 <xPortStartScheduler+0x128>)
 800e148:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e14a:	4b30      	ldr	r3, [pc, #192]	; (800e20c <xPortStartScheduler+0x12c>)
 800e14c:	2207      	movs	r2, #7
 800e14e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e150:	e009      	b.n	800e166 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800e152:	4b2e      	ldr	r3, [pc, #184]	; (800e20c <xPortStartScheduler+0x12c>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	3b01      	subs	r3, #1
 800e158:	4a2c      	ldr	r2, [pc, #176]	; (800e20c <xPortStartScheduler+0x12c>)
 800e15a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e15c:	78fb      	ldrb	r3, [r7, #3]
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	005b      	lsls	r3, r3, #1
 800e162:	b2db      	uxtb	r3, r3
 800e164:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e166:	78fb      	ldrb	r3, [r7, #3]
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e16e:	2b80      	cmp	r3, #128	; 0x80
 800e170:	d0ef      	beq.n	800e152 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e172:	4b26      	ldr	r3, [pc, #152]	; (800e20c <xPortStartScheduler+0x12c>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	f1c3 0307 	rsb	r3, r3, #7
 800e17a:	2b04      	cmp	r3, #4
 800e17c:	d009      	beq.n	800e192 <xPortStartScheduler+0xb2>
 800e17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e182:	f383 8811 	msr	BASEPRI, r3
 800e186:	f3bf 8f6f 	isb	sy
 800e18a:	f3bf 8f4f 	dsb	sy
 800e18e:	60bb      	str	r3, [r7, #8]
 800e190:	e7fe      	b.n	800e190 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e192:	4b1e      	ldr	r3, [pc, #120]	; (800e20c <xPortStartScheduler+0x12c>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	021b      	lsls	r3, r3, #8
 800e198:	4a1c      	ldr	r2, [pc, #112]	; (800e20c <xPortStartScheduler+0x12c>)
 800e19a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e19c:	4b1b      	ldr	r3, [pc, #108]	; (800e20c <xPortStartScheduler+0x12c>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e1a4:	4a19      	ldr	r2, [pc, #100]	; (800e20c <xPortStartScheduler+0x12c>)
 800e1a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	b2da      	uxtb	r2, r3
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e1b0:	4b17      	ldr	r3, [pc, #92]	; (800e210 <xPortStartScheduler+0x130>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4a16      	ldr	r2, [pc, #88]	; (800e210 <xPortStartScheduler+0x130>)
 800e1b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e1ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e1bc:	4b14      	ldr	r3, [pc, #80]	; (800e210 <xPortStartScheduler+0x130>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4a13      	ldr	r2, [pc, #76]	; (800e210 <xPortStartScheduler+0x130>)
 800e1c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e1c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e1c8:	f000 f8d6 	bl	800e378 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e1cc:	4b11      	ldr	r3, [pc, #68]	; (800e214 <xPortStartScheduler+0x134>)
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e1d2:	f000 f8f5 	bl	800e3c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e1d6:	4b10      	ldr	r3, [pc, #64]	; (800e218 <xPortStartScheduler+0x138>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	4a0f      	ldr	r2, [pc, #60]	; (800e218 <xPortStartScheduler+0x138>)
 800e1dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e1e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e1e2:	f7ff ff69 	bl	800e0b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e1e6:	f7ff fd63 	bl	800dcb0 <vTaskSwitchContext>
	prvTaskExitError();
 800e1ea:	f7ff ff27 	bl	800e03c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e1ee:	2300      	movs	r3, #0
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3718      	adds	r7, #24
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	e000ed00 	.word	0xe000ed00
 800e1fc:	410fc271 	.word	0x410fc271
 800e200:	410fc270 	.word	0x410fc270
 800e204:	e000e400 	.word	0xe000e400
 800e208:	20000dbc 	.word	0x20000dbc
 800e20c:	20000dc0 	.word	0x20000dc0
 800e210:	e000ed20 	.word	0xe000ed20
 800e214:	20000124 	.word	0x20000124
 800e218:	e000ef34 	.word	0xe000ef34

0800e21c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e21c:	b480      	push	{r7}
 800e21e:	b083      	sub	sp, #12
 800e220:	af00      	add	r7, sp, #0
 800e222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e226:	f383 8811 	msr	BASEPRI, r3
 800e22a:	f3bf 8f6f 	isb	sy
 800e22e:	f3bf 8f4f 	dsb	sy
 800e232:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e234:	4b0e      	ldr	r3, [pc, #56]	; (800e270 <vPortEnterCritical+0x54>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	3301      	adds	r3, #1
 800e23a:	4a0d      	ldr	r2, [pc, #52]	; (800e270 <vPortEnterCritical+0x54>)
 800e23c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e23e:	4b0c      	ldr	r3, [pc, #48]	; (800e270 <vPortEnterCritical+0x54>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	2b01      	cmp	r3, #1
 800e244:	d10e      	bne.n	800e264 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e246:	4b0b      	ldr	r3, [pc, #44]	; (800e274 <vPortEnterCritical+0x58>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d009      	beq.n	800e264 <vPortEnterCritical+0x48>
 800e250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e254:	f383 8811 	msr	BASEPRI, r3
 800e258:	f3bf 8f6f 	isb	sy
 800e25c:	f3bf 8f4f 	dsb	sy
 800e260:	603b      	str	r3, [r7, #0]
 800e262:	e7fe      	b.n	800e262 <vPortEnterCritical+0x46>
	}
}
 800e264:	bf00      	nop
 800e266:	370c      	adds	r7, #12
 800e268:	46bd      	mov	sp, r7
 800e26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26e:	4770      	bx	lr
 800e270:	20000124 	.word	0x20000124
 800e274:	e000ed04 	.word	0xe000ed04

0800e278 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e278:	b480      	push	{r7}
 800e27a:	b083      	sub	sp, #12
 800e27c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e27e:	4b11      	ldr	r3, [pc, #68]	; (800e2c4 <vPortExitCritical+0x4c>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d109      	bne.n	800e29a <vPortExitCritical+0x22>
 800e286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28a:	f383 8811 	msr	BASEPRI, r3
 800e28e:	f3bf 8f6f 	isb	sy
 800e292:	f3bf 8f4f 	dsb	sy
 800e296:	607b      	str	r3, [r7, #4]
 800e298:	e7fe      	b.n	800e298 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800e29a:	4b0a      	ldr	r3, [pc, #40]	; (800e2c4 <vPortExitCritical+0x4c>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	3b01      	subs	r3, #1
 800e2a0:	4a08      	ldr	r2, [pc, #32]	; (800e2c4 <vPortExitCritical+0x4c>)
 800e2a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e2a4:	4b07      	ldr	r3, [pc, #28]	; (800e2c4 <vPortExitCritical+0x4c>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d104      	bne.n	800e2b6 <vPortExitCritical+0x3e>
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e2b6:	bf00      	nop
 800e2b8:	370c      	adds	r7, #12
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c0:	4770      	bx	lr
 800e2c2:	bf00      	nop
 800e2c4:	20000124 	.word	0x20000124
	...

0800e2d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e2d0:	f3ef 8009 	mrs	r0, PSP
 800e2d4:	f3bf 8f6f 	isb	sy
 800e2d8:	4b15      	ldr	r3, [pc, #84]	; (800e330 <pxCurrentTCBConst>)
 800e2da:	681a      	ldr	r2, [r3, #0]
 800e2dc:	f01e 0f10 	tst.w	lr, #16
 800e2e0:	bf08      	it	eq
 800e2e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e2e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ea:	6010      	str	r0, [r2, #0]
 800e2ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e2f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e2f4:	f380 8811 	msr	BASEPRI, r0
 800e2f8:	f3bf 8f4f 	dsb	sy
 800e2fc:	f3bf 8f6f 	isb	sy
 800e300:	f7ff fcd6 	bl	800dcb0 <vTaskSwitchContext>
 800e304:	f04f 0000 	mov.w	r0, #0
 800e308:	f380 8811 	msr	BASEPRI, r0
 800e30c:	bc09      	pop	{r0, r3}
 800e30e:	6819      	ldr	r1, [r3, #0]
 800e310:	6808      	ldr	r0, [r1, #0]
 800e312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e316:	f01e 0f10 	tst.w	lr, #16
 800e31a:	bf08      	it	eq
 800e31c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e320:	f380 8809 	msr	PSP, r0
 800e324:	f3bf 8f6f 	isb	sy
 800e328:	4770      	bx	lr
 800e32a:	bf00      	nop
 800e32c:	f3af 8000 	nop.w

0800e330 <pxCurrentTCBConst>:
 800e330:	20000c90 	.word	0x20000c90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e334:	bf00      	nop
 800e336:	bf00      	nop

0800e338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
	__asm volatile
 800e33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e342:	f383 8811 	msr	BASEPRI, r3
 800e346:	f3bf 8f6f 	isb	sy
 800e34a:	f3bf 8f4f 	dsb	sy
 800e34e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e350:	f7ff fbf6 	bl	800db40 <xTaskIncrementTick>
 800e354:	4603      	mov	r3, r0
 800e356:	2b00      	cmp	r3, #0
 800e358:	d003      	beq.n	800e362 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e35a:	4b06      	ldr	r3, [pc, #24]	; (800e374 <SysTick_Handler+0x3c>)
 800e35c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e360:	601a      	str	r2, [r3, #0]
 800e362:	2300      	movs	r3, #0
 800e364:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e36c:	bf00      	nop
 800e36e:	3708      	adds	r7, #8
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	e000ed04 	.word	0xe000ed04

0800e378 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e378:	b480      	push	{r7}
 800e37a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e37c:	4b0b      	ldr	r3, [pc, #44]	; (800e3ac <vPortSetupTimerInterrupt+0x34>)
 800e37e:	2200      	movs	r2, #0
 800e380:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e382:	4b0b      	ldr	r3, [pc, #44]	; (800e3b0 <vPortSetupTimerInterrupt+0x38>)
 800e384:	2200      	movs	r2, #0
 800e386:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e388:	4b0a      	ldr	r3, [pc, #40]	; (800e3b4 <vPortSetupTimerInterrupt+0x3c>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	4a0a      	ldr	r2, [pc, #40]	; (800e3b8 <vPortSetupTimerInterrupt+0x40>)
 800e38e:	fba2 2303 	umull	r2, r3, r2, r3
 800e392:	099b      	lsrs	r3, r3, #6
 800e394:	4a09      	ldr	r2, [pc, #36]	; (800e3bc <vPortSetupTimerInterrupt+0x44>)
 800e396:	3b01      	subs	r3, #1
 800e398:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e39a:	4b04      	ldr	r3, [pc, #16]	; (800e3ac <vPortSetupTimerInterrupt+0x34>)
 800e39c:	2207      	movs	r2, #7
 800e39e:	601a      	str	r2, [r3, #0]
}
 800e3a0:	bf00      	nop
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop
 800e3ac:	e000e010 	.word	0xe000e010
 800e3b0:	e000e018 	.word	0xe000e018
 800e3b4:	20000008 	.word	0x20000008
 800e3b8:	10624dd3 	.word	0x10624dd3
 800e3bc:	e000e014 	.word	0xe000e014

0800e3c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e3c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e3d0 <vPortEnableVFP+0x10>
 800e3c4:	6801      	ldr	r1, [r0, #0]
 800e3c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e3ca:	6001      	str	r1, [r0, #0]
 800e3cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e3ce:	bf00      	nop
 800e3d0:	e000ed88 	.word	0xe000ed88

0800e3d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b08a      	sub	sp, #40	; 0x28
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e3e0:	f7ff fb04 	bl	800d9ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e3e4:	4b57      	ldr	r3, [pc, #348]	; (800e544 <pvPortMalloc+0x170>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d101      	bne.n	800e3f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e3ec:	f000 f90c 	bl	800e608 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e3f0:	4b55      	ldr	r3, [pc, #340]	; (800e548 <pvPortMalloc+0x174>)
 800e3f2:	681a      	ldr	r2, [r3, #0]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	4013      	ands	r3, r2
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	f040 808c 	bne.w	800e516 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d01c      	beq.n	800e43e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800e404:	2208      	movs	r2, #8
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	4413      	add	r3, r2
 800e40a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f003 0307 	and.w	r3, r3, #7
 800e412:	2b00      	cmp	r3, #0
 800e414:	d013      	beq.n	800e43e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f023 0307 	bic.w	r3, r3, #7
 800e41c:	3308      	adds	r3, #8
 800e41e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f003 0307 	and.w	r3, r3, #7
 800e426:	2b00      	cmp	r3, #0
 800e428:	d009      	beq.n	800e43e <pvPortMalloc+0x6a>
	__asm volatile
 800e42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e42e:	f383 8811 	msr	BASEPRI, r3
 800e432:	f3bf 8f6f 	isb	sy
 800e436:	f3bf 8f4f 	dsb	sy
 800e43a:	617b      	str	r3, [r7, #20]
 800e43c:	e7fe      	b.n	800e43c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d068      	beq.n	800e516 <pvPortMalloc+0x142>
 800e444:	4b41      	ldr	r3, [pc, #260]	; (800e54c <pvPortMalloc+0x178>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	687a      	ldr	r2, [r7, #4]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d863      	bhi.n	800e516 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e44e:	4b40      	ldr	r3, [pc, #256]	; (800e550 <pvPortMalloc+0x17c>)
 800e450:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e452:	4b3f      	ldr	r3, [pc, #252]	; (800e550 <pvPortMalloc+0x17c>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e458:	e004      	b.n	800e464 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800e45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e466:	685b      	ldr	r3, [r3, #4]
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d903      	bls.n	800e476 <pvPortMalloc+0xa2>
 800e46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d1f1      	bne.n	800e45a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e476:	4b33      	ldr	r3, [pc, #204]	; (800e544 <pvPortMalloc+0x170>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d04a      	beq.n	800e516 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e480:	6a3b      	ldr	r3, [r7, #32]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	2208      	movs	r2, #8
 800e486:	4413      	add	r3, r2
 800e488:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48c:	681a      	ldr	r2, [r3, #0]
 800e48e:	6a3b      	ldr	r3, [r7, #32]
 800e490:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e494:	685a      	ldr	r2, [r3, #4]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	1ad2      	subs	r2, r2, r3
 800e49a:	2308      	movs	r3, #8
 800e49c:	005b      	lsls	r3, r3, #1
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d91e      	bls.n	800e4e0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e4a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	4413      	add	r3, r2
 800e4a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4aa:	69bb      	ldr	r3, [r7, #24]
 800e4ac:	f003 0307 	and.w	r3, r3, #7
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d009      	beq.n	800e4c8 <pvPortMalloc+0xf4>
 800e4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b8:	f383 8811 	msr	BASEPRI, r3
 800e4bc:	f3bf 8f6f 	isb	sy
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	613b      	str	r3, [r7, #16]
 800e4c6:	e7fe      	b.n	800e4c6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ca:	685a      	ldr	r2, [r3, #4]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	1ad2      	subs	r2, r2, r3
 800e4d0:	69bb      	ldr	r3, [r7, #24]
 800e4d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d6:	687a      	ldr	r2, [r7, #4]
 800e4d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e4da:	69b8      	ldr	r0, [r7, #24]
 800e4dc:	f000 f8f6 	bl	800e6cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e4e0:	4b1a      	ldr	r3, [pc, #104]	; (800e54c <pvPortMalloc+0x178>)
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	1ad3      	subs	r3, r2, r3
 800e4ea:	4a18      	ldr	r2, [pc, #96]	; (800e54c <pvPortMalloc+0x178>)
 800e4ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e4ee:	4b17      	ldr	r3, [pc, #92]	; (800e54c <pvPortMalloc+0x178>)
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	4b18      	ldr	r3, [pc, #96]	; (800e554 <pvPortMalloc+0x180>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d203      	bcs.n	800e502 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e4fa:	4b14      	ldr	r3, [pc, #80]	; (800e54c <pvPortMalloc+0x178>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	4a15      	ldr	r2, [pc, #84]	; (800e554 <pvPortMalloc+0x180>)
 800e500:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e504:	685a      	ldr	r2, [r3, #4]
 800e506:	4b10      	ldr	r3, [pc, #64]	; (800e548 <pvPortMalloc+0x174>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	431a      	orrs	r2, r3
 800e50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e512:	2200      	movs	r2, #0
 800e514:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e516:	f7ff fa77 	bl	800da08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e51a:	69fb      	ldr	r3, [r7, #28]
 800e51c:	f003 0307 	and.w	r3, r3, #7
 800e520:	2b00      	cmp	r3, #0
 800e522:	d009      	beq.n	800e538 <pvPortMalloc+0x164>
 800e524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e528:	f383 8811 	msr	BASEPRI, r3
 800e52c:	f3bf 8f6f 	isb	sy
 800e530:	f3bf 8f4f 	dsb	sy
 800e534:	60fb      	str	r3, [r7, #12]
 800e536:	e7fe      	b.n	800e536 <pvPortMalloc+0x162>
	return pvReturn;
 800e538:	69fb      	ldr	r3, [r7, #28]
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3728      	adds	r7, #40	; 0x28
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	200049cc 	.word	0x200049cc
 800e548:	200049d8 	.word	0x200049d8
 800e54c:	200049d0 	.word	0x200049d0
 800e550:	200049c4 	.word	0x200049c4
 800e554:	200049d4 	.word	0x200049d4

0800e558 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b086      	sub	sp, #24
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d046      	beq.n	800e5f8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e56a:	2308      	movs	r3, #8
 800e56c:	425b      	negs	r3, r3
 800e56e:	697a      	ldr	r2, [r7, #20]
 800e570:	4413      	add	r3, r2
 800e572:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	685a      	ldr	r2, [r3, #4]
 800e57c:	4b20      	ldr	r3, [pc, #128]	; (800e600 <vPortFree+0xa8>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	4013      	ands	r3, r2
 800e582:	2b00      	cmp	r3, #0
 800e584:	d109      	bne.n	800e59a <vPortFree+0x42>
 800e586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e58a:	f383 8811 	msr	BASEPRI, r3
 800e58e:	f3bf 8f6f 	isb	sy
 800e592:	f3bf 8f4f 	dsb	sy
 800e596:	60fb      	str	r3, [r7, #12]
 800e598:	e7fe      	b.n	800e598 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d009      	beq.n	800e5b6 <vPortFree+0x5e>
 800e5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a6:	f383 8811 	msr	BASEPRI, r3
 800e5aa:	f3bf 8f6f 	isb	sy
 800e5ae:	f3bf 8f4f 	dsb	sy
 800e5b2:	60bb      	str	r3, [r7, #8]
 800e5b4:	e7fe      	b.n	800e5b4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e5b6:	693b      	ldr	r3, [r7, #16]
 800e5b8:	685a      	ldr	r2, [r3, #4]
 800e5ba:	4b11      	ldr	r3, [pc, #68]	; (800e600 <vPortFree+0xa8>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	4013      	ands	r3, r2
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d019      	beq.n	800e5f8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d115      	bne.n	800e5f8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	685a      	ldr	r2, [r3, #4]
 800e5d0:	4b0b      	ldr	r3, [pc, #44]	; (800e600 <vPortFree+0xa8>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	43db      	mvns	r3, r3
 800e5d6:	401a      	ands	r2, r3
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e5dc:	f7ff fa06 	bl	800d9ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	685a      	ldr	r2, [r3, #4]
 800e5e4:	4b07      	ldr	r3, [pc, #28]	; (800e604 <vPortFree+0xac>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	4413      	add	r3, r2
 800e5ea:	4a06      	ldr	r2, [pc, #24]	; (800e604 <vPortFree+0xac>)
 800e5ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e5ee:	6938      	ldr	r0, [r7, #16]
 800e5f0:	f000 f86c 	bl	800e6cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e5f4:	f7ff fa08 	bl	800da08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e5f8:	bf00      	nop
 800e5fa:	3718      	adds	r7, #24
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}
 800e600:	200049d8 	.word	0x200049d8
 800e604:	200049d0 	.word	0x200049d0

0800e608 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e608:	b480      	push	{r7}
 800e60a:	b085      	sub	sp, #20
 800e60c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e60e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e612:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e614:	4b27      	ldr	r3, [pc, #156]	; (800e6b4 <prvHeapInit+0xac>)
 800e616:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f003 0307 	and.w	r3, r3, #7
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d00c      	beq.n	800e63c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	3307      	adds	r3, #7
 800e626:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f023 0307 	bic.w	r3, r3, #7
 800e62e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e630:	68ba      	ldr	r2, [r7, #8]
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	1ad3      	subs	r3, r2, r3
 800e636:	4a1f      	ldr	r2, [pc, #124]	; (800e6b4 <prvHeapInit+0xac>)
 800e638:	4413      	add	r3, r2
 800e63a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e640:	4a1d      	ldr	r2, [pc, #116]	; (800e6b8 <prvHeapInit+0xb0>)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e646:	4b1c      	ldr	r3, [pc, #112]	; (800e6b8 <prvHeapInit+0xb0>)
 800e648:	2200      	movs	r2, #0
 800e64a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	68ba      	ldr	r2, [r7, #8]
 800e650:	4413      	add	r3, r2
 800e652:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e654:	2208      	movs	r2, #8
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	1a9b      	subs	r3, r3, r2
 800e65a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f023 0307 	bic.w	r3, r3, #7
 800e662:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	4a15      	ldr	r2, [pc, #84]	; (800e6bc <prvHeapInit+0xb4>)
 800e668:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e66a:	4b14      	ldr	r3, [pc, #80]	; (800e6bc <prvHeapInit+0xb4>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2200      	movs	r2, #0
 800e670:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e672:	4b12      	ldr	r3, [pc, #72]	; (800e6bc <prvHeapInit+0xb4>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	2200      	movs	r2, #0
 800e678:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	68fa      	ldr	r2, [r7, #12]
 800e682:	1ad2      	subs	r2, r2, r3
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e688:	4b0c      	ldr	r3, [pc, #48]	; (800e6bc <prvHeapInit+0xb4>)
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	685b      	ldr	r3, [r3, #4]
 800e694:	4a0a      	ldr	r2, [pc, #40]	; (800e6c0 <prvHeapInit+0xb8>)
 800e696:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	4a09      	ldr	r2, [pc, #36]	; (800e6c4 <prvHeapInit+0xbc>)
 800e69e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e6a0:	4b09      	ldr	r3, [pc, #36]	; (800e6c8 <prvHeapInit+0xc0>)
 800e6a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e6a6:	601a      	str	r2, [r3, #0]
}
 800e6a8:	bf00      	nop
 800e6aa:	3714      	adds	r7, #20
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr
 800e6b4:	20000dc4 	.word	0x20000dc4
 800e6b8:	200049c4 	.word	0x200049c4
 800e6bc:	200049cc 	.word	0x200049cc
 800e6c0:	200049d4 	.word	0x200049d4
 800e6c4:	200049d0 	.word	0x200049d0
 800e6c8:	200049d8 	.word	0x200049d8

0800e6cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b085      	sub	sp, #20
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e6d4:	4b28      	ldr	r3, [pc, #160]	; (800e778 <prvInsertBlockIntoFreeList+0xac>)
 800e6d6:	60fb      	str	r3, [r7, #12]
 800e6d8:	e002      	b.n	800e6e0 <prvInsertBlockIntoFreeList+0x14>
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	60fb      	str	r3, [r7, #12]
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d8f7      	bhi.n	800e6da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	685b      	ldr	r3, [r3, #4]
 800e6f2:	68ba      	ldr	r2, [r7, #8]
 800e6f4:	4413      	add	r3, r2
 800e6f6:	687a      	ldr	r2, [r7, #4]
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d108      	bne.n	800e70e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	685a      	ldr	r2, [r3, #4]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	685b      	ldr	r3, [r3, #4]
 800e704:	441a      	add	r2, r3
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	68ba      	ldr	r2, [r7, #8]
 800e718:	441a      	add	r2, r3
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	429a      	cmp	r2, r3
 800e720:	d118      	bne.n	800e754 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	681a      	ldr	r2, [r3, #0]
 800e726:	4b15      	ldr	r3, [pc, #84]	; (800e77c <prvInsertBlockIntoFreeList+0xb0>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d00d      	beq.n	800e74a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	685a      	ldr	r2, [r3, #4]
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	441a      	add	r2, r3
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	601a      	str	r2, [r3, #0]
 800e748:	e008      	b.n	800e75c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e74a:	4b0c      	ldr	r3, [pc, #48]	; (800e77c <prvInsertBlockIntoFreeList+0xb0>)
 800e74c:	681a      	ldr	r2, [r3, #0]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	601a      	str	r2, [r3, #0]
 800e752:	e003      	b.n	800e75c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e75c:	68fa      	ldr	r2, [r7, #12]
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	429a      	cmp	r2, r3
 800e762:	d002      	beq.n	800e76a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	687a      	ldr	r2, [r7, #4]
 800e768:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e76a:	bf00      	nop
 800e76c:	3714      	adds	r7, #20
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr
 800e776:	bf00      	nop
 800e778:	200049c4 	.word	0x200049c4
 800e77c:	200049cc 	.word	0x200049cc

0800e780 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e784:	2200      	movs	r2, #0
 800e786:	4912      	ldr	r1, [pc, #72]	; (800e7d0 <MX_USB_DEVICE_Init+0x50>)
 800e788:	4812      	ldr	r0, [pc, #72]	; (800e7d4 <MX_USB_DEVICE_Init+0x54>)
 800e78a:	f7fd fcd5 	bl	800c138 <USBD_Init>
 800e78e:	4603      	mov	r3, r0
 800e790:	2b00      	cmp	r3, #0
 800e792:	d001      	beq.n	800e798 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e794:	f7f2 faa6 	bl	8000ce4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e798:	490f      	ldr	r1, [pc, #60]	; (800e7d8 <MX_USB_DEVICE_Init+0x58>)
 800e79a:	480e      	ldr	r0, [pc, #56]	; (800e7d4 <MX_USB_DEVICE_Init+0x54>)
 800e79c:	f7fd fd02 	bl	800c1a4 <USBD_RegisterClass>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d001      	beq.n	800e7aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e7a6:	f7f2 fa9d 	bl	8000ce4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e7aa:	490c      	ldr	r1, [pc, #48]	; (800e7dc <MX_USB_DEVICE_Init+0x5c>)
 800e7ac:	4809      	ldr	r0, [pc, #36]	; (800e7d4 <MX_USB_DEVICE_Init+0x54>)
 800e7ae:	f7fd fc27 	bl	800c000 <USBD_CDC_RegisterInterface>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d001      	beq.n	800e7bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e7b8:	f7f2 fa94 	bl	8000ce4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e7bc:	4805      	ldr	r0, [pc, #20]	; (800e7d4 <MX_USB_DEVICE_Init+0x54>)
 800e7be:	f7fd fd12 	bl	800c1e6 <USBD_Start>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d001      	beq.n	800e7cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e7c8:	f7f2 fa8c 	bl	8000ce4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e7cc:	bf00      	nop
 800e7ce:	bd80      	pop	{r7, pc}
 800e7d0:	2000013c 	.word	0x2000013c
 800e7d4:	20004fd4 	.word	0x20004fd4
 800e7d8:	20000020 	.word	0x20000020
 800e7dc:	20000128 	.word	0x20000128

0800e7e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	4907      	ldr	r1, [pc, #28]	; (800e804 <CDC_Init_FS+0x24>)
 800e7e8:	4807      	ldr	r0, [pc, #28]	; (800e808 <CDC_Init_FS+0x28>)
 800e7ea:	f7fd fc1e 	bl	800c02a <USBD_CDC_SetTxBuffer>
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e7ee:	4907      	ldr	r1, [pc, #28]	; (800e80c <CDC_Init_FS+0x2c>)
 800e7f0:	4805      	ldr	r0, [pc, #20]	; (800e808 <CDC_Init_FS+0x28>)
 800e7f2:	f7fd fc33 	bl	800c05c <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);                                         //This is new to the function, the rest is standard HAL
 800e7f6:	4804      	ldr	r0, [pc, #16]	; (800e808 <CDC_Init_FS+0x28>)
 800e7f8:	f7fd fc74 	bl	800c0e4 <USBD_CDC_ReceivePacket>
	  return (USBD_OK);
 800e7fc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	200056a4 	.word	0x200056a4
 800e808:	20004fd4 	.word	0x20004fd4
 800e80c:	200052a4 	.word	0x200052a4

0800e810 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e810:	b480      	push	{r7}
 800e812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e814:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e816:	4618      	mov	r0, r3
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e820:	b480      	push	{r7}
 800e822:	b083      	sub	sp, #12
 800e824:	af00      	add	r7, sp, #0
 800e826:	4603      	mov	r3, r0
 800e828:	6039      	str	r1, [r7, #0]
 800e82a:	71fb      	strb	r3, [r7, #7]
 800e82c:	4613      	mov	r3, r2
 800e82e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e830:	79fb      	ldrb	r3, [r7, #7]
 800e832:	2b23      	cmp	r3, #35	; 0x23
 800e834:	d84a      	bhi.n	800e8cc <CDC_Control_FS+0xac>
 800e836:	a201      	add	r2, pc, #4	; (adr r2, 800e83c <CDC_Control_FS+0x1c>)
 800e838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e83c:	0800e8cd 	.word	0x0800e8cd
 800e840:	0800e8cd 	.word	0x0800e8cd
 800e844:	0800e8cd 	.word	0x0800e8cd
 800e848:	0800e8cd 	.word	0x0800e8cd
 800e84c:	0800e8cd 	.word	0x0800e8cd
 800e850:	0800e8cd 	.word	0x0800e8cd
 800e854:	0800e8cd 	.word	0x0800e8cd
 800e858:	0800e8cd 	.word	0x0800e8cd
 800e85c:	0800e8cd 	.word	0x0800e8cd
 800e860:	0800e8cd 	.word	0x0800e8cd
 800e864:	0800e8cd 	.word	0x0800e8cd
 800e868:	0800e8cd 	.word	0x0800e8cd
 800e86c:	0800e8cd 	.word	0x0800e8cd
 800e870:	0800e8cd 	.word	0x0800e8cd
 800e874:	0800e8cd 	.word	0x0800e8cd
 800e878:	0800e8cd 	.word	0x0800e8cd
 800e87c:	0800e8cd 	.word	0x0800e8cd
 800e880:	0800e8cd 	.word	0x0800e8cd
 800e884:	0800e8cd 	.word	0x0800e8cd
 800e888:	0800e8cd 	.word	0x0800e8cd
 800e88c:	0800e8cd 	.word	0x0800e8cd
 800e890:	0800e8cd 	.word	0x0800e8cd
 800e894:	0800e8cd 	.word	0x0800e8cd
 800e898:	0800e8cd 	.word	0x0800e8cd
 800e89c:	0800e8cd 	.word	0x0800e8cd
 800e8a0:	0800e8cd 	.word	0x0800e8cd
 800e8a4:	0800e8cd 	.word	0x0800e8cd
 800e8a8:	0800e8cd 	.word	0x0800e8cd
 800e8ac:	0800e8cd 	.word	0x0800e8cd
 800e8b0:	0800e8cd 	.word	0x0800e8cd
 800e8b4:	0800e8cd 	.word	0x0800e8cd
 800e8b8:	0800e8cd 	.word	0x0800e8cd
 800e8bc:	0800e8cd 	.word	0x0800e8cd
 800e8c0:	0800e8cd 	.word	0x0800e8cd
 800e8c4:	0800e8cd 	.word	0x0800e8cd
 800e8c8:	0800e8cd 	.word	0x0800e8cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e8cc:	bf00      	nop
  }

  return (USBD_OK);
 800e8ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	370c      	adds	r7, #12
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8da:	4770      	bx	lr

0800e8dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


  volatile uint32_t counter = 0;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	60fb      	str	r3, [r7, #12]

  while(counter < *Len)
 800e8ea:	e01e      	b.n	800e92a <CDC_Receive_FS+0x4e>
  {
       RxBuffer[RxFifoIndex ] = Buf[counter];
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	687a      	ldr	r2, [r7, #4]
 800e8f0:	441a      	add	r2, r3
 800e8f2:	4b16      	ldr	r3, [pc, #88]	; (800e94c <CDC_Receive_FS+0x70>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	7811      	ldrb	r1, [r2, #0]
 800e8f8:	4a15      	ldr	r2, [pc, #84]	; (800e950 <CDC_Receive_FS+0x74>)
 800e8fa:	54d1      	strb	r1, [r2, r3]
       cdc_receive_put(Buf[counter]);
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	687a      	ldr	r2, [r7, #4]
 800e900:	4413      	add	r3, r2
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	4618      	mov	r0, r3
 800e906:	f7f4 fe13 	bl	8003530 <cdc_receive_put>
       counter++, RxFifoIndex++;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	3301      	adds	r3, #1
 800e90e:	60fb      	str	r3, [r7, #12]
 800e910:	4b0e      	ldr	r3, [pc, #56]	; (800e94c <CDC_Receive_FS+0x70>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	3301      	adds	r3, #1
 800e916:	4a0d      	ldr	r2, [pc, #52]	; (800e94c <CDC_Receive_FS+0x70>)
 800e918:	6013      	str	r3, [r2, #0]
       if(RxFifoIndex  == RxBufferSize)
 800e91a:	4b0c      	ldr	r3, [pc, #48]	; (800e94c <CDC_Receive_FS+0x70>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e922:	d102      	bne.n	800e92a <CDC_Receive_FS+0x4e>
            RxFifoIndex  = 0;
 800e924:	4b09      	ldr	r3, [pc, #36]	; (800e94c <CDC_Receive_FS+0x70>)
 800e926:	2200      	movs	r2, #0
 800e928:	601a      	str	r2, [r3, #0]
  while(counter < *Len)
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	681a      	ldr	r2, [r3, #0]
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	429a      	cmp	r2, r3
 800e932:	d8db      	bhi.n	800e8ec <CDC_Receive_FS+0x10>
   }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e934:	6879      	ldr	r1, [r7, #4]
 800e936:	4807      	ldr	r0, [pc, #28]	; (800e954 <CDC_Receive_FS+0x78>)
 800e938:	f7fd fb90 	bl	800c05c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e93c:	4805      	ldr	r0, [pc, #20]	; (800e954 <CDC_Receive_FS+0x78>)
 800e93e:	f7fd fbd1 	bl	800c0e4 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800e942:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e944:	4618      	mov	r0, r3
 800e946:	3710      	adds	r7, #16
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}
 800e94c:	200049dc 	.word	0x200049dc
 800e950:	20005aa4 	.word	0x20005aa4
 800e954:	20004fd4 	.word	0x20004fd4

0800e958 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b084      	sub	sp, #16
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	460b      	mov	r3, r1
 800e962:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e964:	2300      	movs	r3, #0
 800e966:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e968:	4b0d      	ldr	r3, [pc, #52]	; (800e9a0 <CDC_Transmit_FS+0x48>)
 800e96a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e96e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e976:	2b00      	cmp	r3, #0
 800e978:	d001      	beq.n	800e97e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e97a:	2301      	movs	r3, #1
 800e97c:	e00b      	b.n	800e996 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e97e:	887b      	ldrh	r3, [r7, #2]
 800e980:	461a      	mov	r2, r3
 800e982:	6879      	ldr	r1, [r7, #4]
 800e984:	4806      	ldr	r0, [pc, #24]	; (800e9a0 <CDC_Transmit_FS+0x48>)
 800e986:	f7fd fb50 	bl	800c02a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e98a:	4805      	ldr	r0, [pc, #20]	; (800e9a0 <CDC_Transmit_FS+0x48>)
 800e98c:	f7fd fb7a 	bl	800c084 <USBD_CDC_TransmitPacket>
 800e990:	4603      	mov	r3, r0
 800e992:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e994:	7bfb      	ldrb	r3, [r7, #15]
}
 800e996:	4618      	mov	r0, r3
 800e998:	3710      	adds	r7, #16
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	20004fd4 	.word	0x20004fd4

0800e9a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b087      	sub	sp, #28
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e9b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	371c      	adds	r7, #28
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c4:	4770      	bx	lr
	...

0800e9c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	6039      	str	r1, [r7, #0]
 800e9d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	2212      	movs	r2, #18
 800e9d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e9da:	4b03      	ldr	r3, [pc, #12]	; (800e9e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	370c      	adds	r7, #12
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr
 800e9e8:	20000158 	.word	0x20000158

0800e9ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	6039      	str	r1, [r7, #0]
 800e9f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	2204      	movs	r2, #4
 800e9fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e9fe:	4b03      	ldr	r3, [pc, #12]	; (800ea0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	370c      	adds	r7, #12
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr
 800ea0c:	2000016c 	.word	0x2000016c

0800ea10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b082      	sub	sp, #8
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	4603      	mov	r3, r0
 800ea18:	6039      	str	r1, [r7, #0]
 800ea1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ea1c:	79fb      	ldrb	r3, [r7, #7]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d105      	bne.n	800ea2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ea22:	683a      	ldr	r2, [r7, #0]
 800ea24:	4907      	ldr	r1, [pc, #28]	; (800ea44 <USBD_FS_ProductStrDescriptor+0x34>)
 800ea26:	4808      	ldr	r0, [pc, #32]	; (800ea48 <USBD_FS_ProductStrDescriptor+0x38>)
 800ea28:	f7fe fbab 	bl	800d182 <USBD_GetString>
 800ea2c:	e004      	b.n	800ea38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ea2e:	683a      	ldr	r2, [r7, #0]
 800ea30:	4904      	ldr	r1, [pc, #16]	; (800ea44 <USBD_FS_ProductStrDescriptor+0x34>)
 800ea32:	4805      	ldr	r0, [pc, #20]	; (800ea48 <USBD_FS_ProductStrDescriptor+0x38>)
 800ea34:	f7fe fba5 	bl	800d182 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ea38:	4b02      	ldr	r3, [pc, #8]	; (800ea44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3708      	adds	r7, #8
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	20005ea4 	.word	0x20005ea4
 800ea48:	0800f940 	.word	0x0800f940

0800ea4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b082      	sub	sp, #8
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	4603      	mov	r3, r0
 800ea54:	6039      	str	r1, [r7, #0]
 800ea56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ea58:	683a      	ldr	r2, [r7, #0]
 800ea5a:	4904      	ldr	r1, [pc, #16]	; (800ea6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ea5c:	4804      	ldr	r0, [pc, #16]	; (800ea70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ea5e:	f7fe fb90 	bl	800d182 <USBD_GetString>
  return USBD_StrDesc;
 800ea62:	4b02      	ldr	r3, [pc, #8]	; (800ea6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3708      	adds	r7, #8
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}
 800ea6c:	20005ea4 	.word	0x20005ea4
 800ea70:	0800f958 	.word	0x0800f958

0800ea74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	6039      	str	r1, [r7, #0]
 800ea7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	221a      	movs	r2, #26
 800ea84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ea86:	f000 f843 	bl	800eb10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ea8a:	4b02      	ldr	r3, [pc, #8]	; (800ea94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3708      	adds	r7, #8
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}
 800ea94:	20000170 	.word	0x20000170

0800ea98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	6039      	str	r1, [r7, #0]
 800eaa2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eaa4:	79fb      	ldrb	r3, [r7, #7]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d105      	bne.n	800eab6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eaaa:	683a      	ldr	r2, [r7, #0]
 800eaac:	4907      	ldr	r1, [pc, #28]	; (800eacc <USBD_FS_ConfigStrDescriptor+0x34>)
 800eaae:	4808      	ldr	r0, [pc, #32]	; (800ead0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eab0:	f7fe fb67 	bl	800d182 <USBD_GetString>
 800eab4:	e004      	b.n	800eac0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eab6:	683a      	ldr	r2, [r7, #0]
 800eab8:	4904      	ldr	r1, [pc, #16]	; (800eacc <USBD_FS_ConfigStrDescriptor+0x34>)
 800eaba:	4805      	ldr	r0, [pc, #20]	; (800ead0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eabc:	f7fe fb61 	bl	800d182 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eac0:	4b02      	ldr	r3, [pc, #8]	; (800eacc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3708      	adds	r7, #8
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	20005ea4 	.word	0x20005ea4
 800ead0:	0800f96c 	.word	0x0800f96c

0800ead4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
 800eada:	4603      	mov	r3, r0
 800eadc:	6039      	str	r1, [r7, #0]
 800eade:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eae0:	79fb      	ldrb	r3, [r7, #7]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d105      	bne.n	800eaf2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eae6:	683a      	ldr	r2, [r7, #0]
 800eae8:	4907      	ldr	r1, [pc, #28]	; (800eb08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eaea:	4808      	ldr	r0, [pc, #32]	; (800eb0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eaec:	f7fe fb49 	bl	800d182 <USBD_GetString>
 800eaf0:	e004      	b.n	800eafc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eaf2:	683a      	ldr	r2, [r7, #0]
 800eaf4:	4904      	ldr	r1, [pc, #16]	; (800eb08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eaf6:	4805      	ldr	r0, [pc, #20]	; (800eb0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eaf8:	f7fe fb43 	bl	800d182 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eafc:	4b02      	ldr	r3, [pc, #8]	; (800eb08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3708      	adds	r7, #8
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	20005ea4 	.word	0x20005ea4
 800eb0c:	0800f978 	.word	0x0800f978

0800eb10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b084      	sub	sp, #16
 800eb14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800eb16:	4b0f      	ldr	r3, [pc, #60]	; (800eb54 <Get_SerialNum+0x44>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800eb1c:	4b0e      	ldr	r3, [pc, #56]	; (800eb58 <Get_SerialNum+0x48>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800eb22:	4b0e      	ldr	r3, [pc, #56]	; (800eb5c <Get_SerialNum+0x4c>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800eb28:	68fa      	ldr	r2, [r7, #12]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d009      	beq.n	800eb4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800eb36:	2208      	movs	r2, #8
 800eb38:	4909      	ldr	r1, [pc, #36]	; (800eb60 <Get_SerialNum+0x50>)
 800eb3a:	68f8      	ldr	r0, [r7, #12]
 800eb3c:	f000 f814 	bl	800eb68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800eb40:	2204      	movs	r2, #4
 800eb42:	4908      	ldr	r1, [pc, #32]	; (800eb64 <Get_SerialNum+0x54>)
 800eb44:	68b8      	ldr	r0, [r7, #8]
 800eb46:	f000 f80f 	bl	800eb68 <IntToUnicode>
  }
}
 800eb4a:	bf00      	nop
 800eb4c:	3710      	adds	r7, #16
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	1fff7a10 	.word	0x1fff7a10
 800eb58:	1fff7a14 	.word	0x1fff7a14
 800eb5c:	1fff7a18 	.word	0x1fff7a18
 800eb60:	20000172 	.word	0x20000172
 800eb64:	20000182 	.word	0x20000182

0800eb68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b087      	sub	sp, #28
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	60b9      	str	r1, [r7, #8]
 800eb72:	4613      	mov	r3, r2
 800eb74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800eb76:	2300      	movs	r3, #0
 800eb78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	75fb      	strb	r3, [r7, #23]
 800eb7e:	e027      	b.n	800ebd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	0f1b      	lsrs	r3, r3, #28
 800eb84:	2b09      	cmp	r3, #9
 800eb86:	d80b      	bhi.n	800eba0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	0f1b      	lsrs	r3, r3, #28
 800eb8c:	b2da      	uxtb	r2, r3
 800eb8e:	7dfb      	ldrb	r3, [r7, #23]
 800eb90:	005b      	lsls	r3, r3, #1
 800eb92:	4619      	mov	r1, r3
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	440b      	add	r3, r1
 800eb98:	3230      	adds	r2, #48	; 0x30
 800eb9a:	b2d2      	uxtb	r2, r2
 800eb9c:	701a      	strb	r2, [r3, #0]
 800eb9e:	e00a      	b.n	800ebb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	0f1b      	lsrs	r3, r3, #28
 800eba4:	b2da      	uxtb	r2, r3
 800eba6:	7dfb      	ldrb	r3, [r7, #23]
 800eba8:	005b      	lsls	r3, r3, #1
 800ebaa:	4619      	mov	r1, r3
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	440b      	add	r3, r1
 800ebb0:	3237      	adds	r2, #55	; 0x37
 800ebb2:	b2d2      	uxtb	r2, r2
 800ebb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	011b      	lsls	r3, r3, #4
 800ebba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ebbc:	7dfb      	ldrb	r3, [r7, #23]
 800ebbe:	005b      	lsls	r3, r3, #1
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	68ba      	ldr	r2, [r7, #8]
 800ebc4:	4413      	add	r3, r2
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ebca:	7dfb      	ldrb	r3, [r7, #23]
 800ebcc:	3301      	adds	r3, #1
 800ebce:	75fb      	strb	r3, [r7, #23]
 800ebd0:	7dfa      	ldrb	r2, [r7, #23]
 800ebd2:	79fb      	ldrb	r3, [r7, #7]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d3d3      	bcc.n	800eb80 <IntToUnicode+0x18>
  }
}
 800ebd8:	bf00      	nop
 800ebda:	371c      	adds	r7, #28
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe2:	4770      	bx	lr

0800ebe4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b08a      	sub	sp, #40	; 0x28
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ebec:	f107 0314 	add.w	r3, r7, #20
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	601a      	str	r2, [r3, #0]
 800ebf4:	605a      	str	r2, [r3, #4]
 800ebf6:	609a      	str	r2, [r3, #8]
 800ebf8:	60da      	str	r2, [r3, #12]
 800ebfa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ec04:	d13a      	bne.n	800ec7c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ec06:	2300      	movs	r3, #0
 800ec08:	613b      	str	r3, [r7, #16]
 800ec0a:	4b1e      	ldr	r3, [pc, #120]	; (800ec84 <HAL_PCD_MspInit+0xa0>)
 800ec0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec0e:	4a1d      	ldr	r2, [pc, #116]	; (800ec84 <HAL_PCD_MspInit+0xa0>)
 800ec10:	f043 0301 	orr.w	r3, r3, #1
 800ec14:	6313      	str	r3, [r2, #48]	; 0x30
 800ec16:	4b1b      	ldr	r3, [pc, #108]	; (800ec84 <HAL_PCD_MspInit+0xa0>)
 800ec18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec1a:	f003 0301 	and.w	r3, r3, #1
 800ec1e:	613b      	str	r3, [r7, #16]
 800ec20:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ec22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ec26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec28:	2302      	movs	r3, #2
 800ec2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec30:	2303      	movs	r3, #3
 800ec32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ec34:	230a      	movs	r3, #10
 800ec36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec38:	f107 0314 	add.w	r3, r7, #20
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	4812      	ldr	r0, [pc, #72]	; (800ec88 <HAL_PCD_MspInit+0xa4>)
 800ec40:	f7f6 ff16 	bl	8005a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ec44:	4b0f      	ldr	r3, [pc, #60]	; (800ec84 <HAL_PCD_MspInit+0xa0>)
 800ec46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec48:	4a0e      	ldr	r2, [pc, #56]	; (800ec84 <HAL_PCD_MspInit+0xa0>)
 800ec4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec4e:	6353      	str	r3, [r2, #52]	; 0x34
 800ec50:	2300      	movs	r3, #0
 800ec52:	60fb      	str	r3, [r7, #12]
 800ec54:	4b0b      	ldr	r3, [pc, #44]	; (800ec84 <HAL_PCD_MspInit+0xa0>)
 800ec56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec58:	4a0a      	ldr	r2, [pc, #40]	; (800ec84 <HAL_PCD_MspInit+0xa0>)
 800ec5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ec5e:	6453      	str	r3, [r2, #68]	; 0x44
 800ec60:	4b08      	ldr	r3, [pc, #32]	; (800ec84 <HAL_PCD_MspInit+0xa0>)
 800ec62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ec68:	60fb      	str	r3, [r7, #12]
 800ec6a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	2100      	movs	r1, #0
 800ec70:	2043      	movs	r0, #67	; 0x43
 800ec72:	f7f6 fea3 	bl	80059bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ec76:	2043      	movs	r0, #67	; 0x43
 800ec78:	f7f6 febc 	bl	80059f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ec7c:	bf00      	nop
 800ec7e:	3728      	adds	r7, #40	; 0x28
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}
 800ec84:	40023800 	.word	0x40023800
 800ec88:	40020000 	.word	0x40020000

0800ec8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800eca0:	4619      	mov	r1, r3
 800eca2:	4610      	mov	r0, r2
 800eca4:	f7fd faea 	bl	800c27c <USBD_LL_SetupStage>
}
 800eca8:	bf00      	nop
 800ecaa:	3708      	adds	r7, #8
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}

0800ecb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	460b      	mov	r3, r1
 800ecba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ecc2:	78fa      	ldrb	r2, [r7, #3]
 800ecc4:	6879      	ldr	r1, [r7, #4]
 800ecc6:	4613      	mov	r3, r2
 800ecc8:	00db      	lsls	r3, r3, #3
 800ecca:	1a9b      	subs	r3, r3, r2
 800eccc:	009b      	lsls	r3, r3, #2
 800ecce:	440b      	add	r3, r1
 800ecd0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ecd4:	681a      	ldr	r2, [r3, #0]
 800ecd6:	78fb      	ldrb	r3, [r7, #3]
 800ecd8:	4619      	mov	r1, r3
 800ecda:	f7fd fb22 	bl	800c322 <USBD_LL_DataOutStage>
}
 800ecde:	bf00      	nop
 800ece0:	3708      	adds	r7, #8
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}

0800ece6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ece6:	b580      	push	{r7, lr}
 800ece8:	b082      	sub	sp, #8
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	6078      	str	r0, [r7, #4]
 800ecee:	460b      	mov	r3, r1
 800ecf0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ecf8:	78fa      	ldrb	r2, [r7, #3]
 800ecfa:	6879      	ldr	r1, [r7, #4]
 800ecfc:	4613      	mov	r3, r2
 800ecfe:	00db      	lsls	r3, r3, #3
 800ed00:	1a9b      	subs	r3, r3, r2
 800ed02:	009b      	lsls	r3, r3, #2
 800ed04:	440b      	add	r3, r1
 800ed06:	3348      	adds	r3, #72	; 0x48
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	78fb      	ldrb	r3, [r7, #3]
 800ed0c:	4619      	mov	r1, r3
 800ed0e:	f7fd fb6b 	bl	800c3e8 <USBD_LL_DataInStage>
}
 800ed12:	bf00      	nop
 800ed14:	3708      	adds	r7, #8
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}

0800ed1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed1a:	b580      	push	{r7, lr}
 800ed1c:	b082      	sub	sp, #8
 800ed1e:	af00      	add	r7, sp, #0
 800ed20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7fd fc6f 	bl	800c60c <USBD_LL_SOF>
}
 800ed2e:	bf00      	nop
 800ed30:	3708      	adds	r7, #8
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}

0800ed36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed36:	b580      	push	{r7, lr}
 800ed38:	b084      	sub	sp, #16
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ed3e:	2301      	movs	r3, #1
 800ed40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	68db      	ldr	r3, [r3, #12]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d102      	bne.n	800ed50 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	73fb      	strb	r3, [r7, #15]
 800ed4e:	e008      	b.n	800ed62 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	68db      	ldr	r3, [r3, #12]
 800ed54:	2b02      	cmp	r3, #2
 800ed56:	d102      	bne.n	800ed5e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	73fb      	strb	r3, [r7, #15]
 800ed5c:	e001      	b.n	800ed62 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ed5e:	f7f1 ffc1 	bl	8000ce4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ed68:	7bfa      	ldrb	r2, [r7, #15]
 800ed6a:	4611      	mov	r1, r2
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7fd fc12 	bl	800c596 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f7fd fbcb 	bl	800c514 <USBD_LL_Reset>
}
 800ed7e:	bf00      	nop
 800ed80:	3710      	adds	r7, #16
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
	...

0800ed88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b082      	sub	sp, #8
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7fd fc0d 	bl	800c5b6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	687a      	ldr	r2, [r7, #4]
 800eda8:	6812      	ldr	r2, [r2, #0]
 800edaa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800edae:	f043 0301 	orr.w	r3, r3, #1
 800edb2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6a1b      	ldr	r3, [r3, #32]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d005      	beq.n	800edc8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800edbc:	4b04      	ldr	r3, [pc, #16]	; (800edd0 <HAL_PCD_SuspendCallback+0x48>)
 800edbe:	691b      	ldr	r3, [r3, #16]
 800edc0:	4a03      	ldr	r2, [pc, #12]	; (800edd0 <HAL_PCD_SuspendCallback+0x48>)
 800edc2:	f043 0306 	orr.w	r3, r3, #6
 800edc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800edc8:	bf00      	nop
 800edca:	3708      	adds	r7, #8
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	e000ed00 	.word	0xe000ed00

0800edd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b082      	sub	sp, #8
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ede2:	4618      	mov	r0, r3
 800ede4:	f7fd fbfc 	bl	800c5e0 <USBD_LL_Resume>
}
 800ede8:	bf00      	nop
 800edea:	3708      	adds	r7, #8
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	460b      	mov	r3, r1
 800edfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee02:	78fa      	ldrb	r2, [r7, #3]
 800ee04:	4611      	mov	r1, r2
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7fd fc27 	bl	800c65a <USBD_LL_IsoOUTIncomplete>
}
 800ee0c:	bf00      	nop
 800ee0e:	3708      	adds	r7, #8
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b082      	sub	sp, #8
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee26:	78fa      	ldrb	r2, [r7, #3]
 800ee28:	4611      	mov	r1, r2
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7fd fc08 	bl	800c640 <USBD_LL_IsoINIncomplete>
}
 800ee30:	bf00      	nop
 800ee32:	3708      	adds	r7, #8
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}

0800ee38 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b082      	sub	sp, #8
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7fd fc14 	bl	800c674 <USBD_LL_DevConnected>
}
 800ee4c:	bf00      	nop
 800ee4e:	3708      	adds	r7, #8
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b082      	sub	sp, #8
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7fd fc11 	bl	800c68a <USBD_LL_DevDisconnected>
}
 800ee68:	bf00      	nop
 800ee6a:	3708      	adds	r7, #8
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	bd80      	pop	{r7, pc}

0800ee70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b082      	sub	sp, #8
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d13c      	bne.n	800eefa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ee80:	4a20      	ldr	r2, [pc, #128]	; (800ef04 <USBD_LL_Init+0x94>)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	4a1e      	ldr	r2, [pc, #120]	; (800ef04 <USBD_LL_Init+0x94>)
 800ee8c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ee90:	4b1c      	ldr	r3, [pc, #112]	; (800ef04 <USBD_LL_Init+0x94>)
 800ee92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ee96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ee98:	4b1a      	ldr	r3, [pc, #104]	; (800ef04 <USBD_LL_Init+0x94>)
 800ee9a:	2204      	movs	r2, #4
 800ee9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ee9e:	4b19      	ldr	r3, [pc, #100]	; (800ef04 <USBD_LL_Init+0x94>)
 800eea0:	2202      	movs	r2, #2
 800eea2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eea4:	4b17      	ldr	r3, [pc, #92]	; (800ef04 <USBD_LL_Init+0x94>)
 800eea6:	2200      	movs	r2, #0
 800eea8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eeaa:	4b16      	ldr	r3, [pc, #88]	; (800ef04 <USBD_LL_Init+0x94>)
 800eeac:	2202      	movs	r2, #2
 800eeae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eeb0:	4b14      	ldr	r3, [pc, #80]	; (800ef04 <USBD_LL_Init+0x94>)
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800eeb6:	4b13      	ldr	r3, [pc, #76]	; (800ef04 <USBD_LL_Init+0x94>)
 800eeb8:	2200      	movs	r2, #0
 800eeba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800eebc:	4b11      	ldr	r3, [pc, #68]	; (800ef04 <USBD_LL_Init+0x94>)
 800eebe:	2200      	movs	r2, #0
 800eec0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800eec2:	4b10      	ldr	r3, [pc, #64]	; (800ef04 <USBD_LL_Init+0x94>)
 800eec4:	2200      	movs	r2, #0
 800eec6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800eec8:	4b0e      	ldr	r3, [pc, #56]	; (800ef04 <USBD_LL_Init+0x94>)
 800eeca:	2200      	movs	r2, #0
 800eecc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800eece:	480d      	ldr	r0, [pc, #52]	; (800ef04 <USBD_LL_Init+0x94>)
 800eed0:	f7f9 fac4 	bl	800845c <HAL_PCD_Init>
 800eed4:	4603      	mov	r3, r0
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d001      	beq.n	800eede <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800eeda:	f7f1 ff03 	bl	8000ce4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800eede:	2180      	movs	r1, #128	; 0x80
 800eee0:	4808      	ldr	r0, [pc, #32]	; (800ef04 <USBD_LL_Init+0x94>)
 800eee2:	f7fa fc22 	bl	800972a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800eee6:	2240      	movs	r2, #64	; 0x40
 800eee8:	2100      	movs	r1, #0
 800eeea:	4806      	ldr	r0, [pc, #24]	; (800ef04 <USBD_LL_Init+0x94>)
 800eeec:	f7fa fbd6 	bl	800969c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800eef0:	2280      	movs	r2, #128	; 0x80
 800eef2:	2101      	movs	r1, #1
 800eef4:	4803      	ldr	r0, [pc, #12]	; (800ef04 <USBD_LL_Init+0x94>)
 800eef6:	f7fa fbd1 	bl	800969c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800eefa:	2300      	movs	r3, #0
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3708      	adds	r7, #8
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}
 800ef04:	200060a4 	.word	0x200060a4

0800ef08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b084      	sub	sp, #16
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef10:	2300      	movs	r3, #0
 800ef12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef14:	2300      	movs	r3, #0
 800ef16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f7f9 fbb9 	bl	8008696 <HAL_PCD_Start>
 800ef24:	4603      	mov	r3, r0
 800ef26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef28:	7bfb      	ldrb	r3, [r7, #15]
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f000 f92a 	bl	800f184 <USBD_Get_USB_Status>
 800ef30:	4603      	mov	r3, r0
 800ef32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef34:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3710      	adds	r7, #16
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ef3e:	b580      	push	{r7, lr}
 800ef40:	b084      	sub	sp, #16
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
 800ef46:	4608      	mov	r0, r1
 800ef48:	4611      	mov	r1, r2
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	70fb      	strb	r3, [r7, #3]
 800ef50:	460b      	mov	r3, r1
 800ef52:	70bb      	strb	r3, [r7, #2]
 800ef54:	4613      	mov	r3, r2
 800ef56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ef66:	78bb      	ldrb	r3, [r7, #2]
 800ef68:	883a      	ldrh	r2, [r7, #0]
 800ef6a:	78f9      	ldrb	r1, [r7, #3]
 800ef6c:	f7f9 ff9d 	bl	8008eaa <HAL_PCD_EP_Open>
 800ef70:	4603      	mov	r3, r0
 800ef72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef74:	7bfb      	ldrb	r3, [r7, #15]
 800ef76:	4618      	mov	r0, r3
 800ef78:	f000 f904 	bl	800f184 <USBD_Get_USB_Status>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}

0800ef8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef8a:	b580      	push	{r7, lr}
 800ef8c:	b084      	sub	sp, #16
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	6078      	str	r0, [r7, #4]
 800ef92:	460b      	mov	r3, r1
 800ef94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef96:	2300      	movs	r3, #0
 800ef98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800efa4:	78fa      	ldrb	r2, [r7, #3]
 800efa6:	4611      	mov	r1, r2
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7f9 ffe6 	bl	8008f7a <HAL_PCD_EP_Close>
 800efae:	4603      	mov	r3, r0
 800efb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efb2:	7bfb      	ldrb	r3, [r7, #15]
 800efb4:	4618      	mov	r0, r3
 800efb6:	f000 f8e5 	bl	800f184 <USBD_Get_USB_Status>
 800efba:	4603      	mov	r3, r0
 800efbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	3710      	adds	r7, #16
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}

0800efc8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b084      	sub	sp, #16
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	460b      	mov	r3, r1
 800efd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efd4:	2300      	movs	r3, #0
 800efd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efd8:	2300      	movs	r3, #0
 800efda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800efe2:	78fa      	ldrb	r2, [r7, #3]
 800efe4:	4611      	mov	r1, r2
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7fa f8be 	bl	8009168 <HAL_PCD_EP_SetStall>
 800efec:	4603      	mov	r3, r0
 800efee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eff0:	7bfb      	ldrb	r3, [r7, #15]
 800eff2:	4618      	mov	r0, r3
 800eff4:	f000 f8c6 	bl	800f184 <USBD_Get_USB_Status>
 800eff8:	4603      	mov	r3, r0
 800effa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800effc:	7bbb      	ldrb	r3, [r7, #14]
}
 800effe:	4618      	mov	r0, r3
 800f000:	3710      	adds	r7, #16
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}

0800f006 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f006:	b580      	push	{r7, lr}
 800f008:	b084      	sub	sp, #16
 800f00a:	af00      	add	r7, sp, #0
 800f00c:	6078      	str	r0, [r7, #4]
 800f00e:	460b      	mov	r3, r1
 800f010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f012:	2300      	movs	r3, #0
 800f014:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f016:	2300      	movs	r3, #0
 800f018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f020:	78fa      	ldrb	r2, [r7, #3]
 800f022:	4611      	mov	r1, r2
 800f024:	4618      	mov	r0, r3
 800f026:	f7fa f903 	bl	8009230 <HAL_PCD_EP_ClrStall>
 800f02a:	4603      	mov	r3, r0
 800f02c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f02e:	7bfb      	ldrb	r3, [r7, #15]
 800f030:	4618      	mov	r0, r3
 800f032:	f000 f8a7 	bl	800f184 <USBD_Get_USB_Status>
 800f036:	4603      	mov	r3, r0
 800f038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f03a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3710      	adds	r7, #16
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f044:	b480      	push	{r7}
 800f046:	b085      	sub	sp, #20
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	460b      	mov	r3, r1
 800f04e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f056:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f058:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	da0b      	bge.n	800f078 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f060:	78fb      	ldrb	r3, [r7, #3]
 800f062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f066:	68f9      	ldr	r1, [r7, #12]
 800f068:	4613      	mov	r3, r2
 800f06a:	00db      	lsls	r3, r3, #3
 800f06c:	1a9b      	subs	r3, r3, r2
 800f06e:	009b      	lsls	r3, r3, #2
 800f070:	440b      	add	r3, r1
 800f072:	333e      	adds	r3, #62	; 0x3e
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	e00b      	b.n	800f090 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f078:	78fb      	ldrb	r3, [r7, #3]
 800f07a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f07e:	68f9      	ldr	r1, [r7, #12]
 800f080:	4613      	mov	r3, r2
 800f082:	00db      	lsls	r3, r3, #3
 800f084:	1a9b      	subs	r3, r3, r2
 800f086:	009b      	lsls	r3, r3, #2
 800f088:	440b      	add	r3, r1
 800f08a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f08e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f090:	4618      	mov	r0, r3
 800f092:	3714      	adds	r7, #20
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr

0800f09c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	460b      	mov	r3, r1
 800f0a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f0b6:	78fa      	ldrb	r2, [r7, #3]
 800f0b8:	4611      	mov	r1, r2
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7f9 fed0 	bl	8008e60 <HAL_PCD_SetAddress>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0c4:	7bfb      	ldrb	r3, [r7, #15]
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f000 f85c 	bl	800f184 <USBD_Get_USB_Status>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3710      	adds	r7, #16
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}

0800f0da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f0da:	b580      	push	{r7, lr}
 800f0dc:	b086      	sub	sp, #24
 800f0de:	af00      	add	r7, sp, #0
 800f0e0:	60f8      	str	r0, [r7, #12]
 800f0e2:	607a      	str	r2, [r7, #4]
 800f0e4:	603b      	str	r3, [r7, #0]
 800f0e6:	460b      	mov	r3, r1
 800f0e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f0f8:	7af9      	ldrb	r1, [r7, #11]
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	687a      	ldr	r2, [r7, #4]
 800f0fe:	f7f9 ffe9 	bl	80090d4 <HAL_PCD_EP_Transmit>
 800f102:	4603      	mov	r3, r0
 800f104:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f106:	7dfb      	ldrb	r3, [r7, #23]
 800f108:	4618      	mov	r0, r3
 800f10a:	f000 f83b 	bl	800f184 <USBD_Get_USB_Status>
 800f10e:	4603      	mov	r3, r0
 800f110:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f112:	7dbb      	ldrb	r3, [r7, #22]
}
 800f114:	4618      	mov	r0, r3
 800f116:	3718      	adds	r7, #24
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd80      	pop	{r7, pc}

0800f11c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b086      	sub	sp, #24
 800f120:	af00      	add	r7, sp, #0
 800f122:	60f8      	str	r0, [r7, #12]
 800f124:	607a      	str	r2, [r7, #4]
 800f126:	603b      	str	r3, [r7, #0]
 800f128:	460b      	mov	r3, r1
 800f12a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f12c:	2300      	movs	r3, #0
 800f12e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f130:	2300      	movs	r3, #0
 800f132:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f13a:	7af9      	ldrb	r1, [r7, #11]
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	687a      	ldr	r2, [r7, #4]
 800f140:	f7f9 ff65 	bl	800900e <HAL_PCD_EP_Receive>
 800f144:	4603      	mov	r3, r0
 800f146:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f148:	7dfb      	ldrb	r3, [r7, #23]
 800f14a:	4618      	mov	r0, r3
 800f14c:	f000 f81a 	bl	800f184 <USBD_Get_USB_Status>
 800f150:	4603      	mov	r3, r0
 800f152:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f154:	7dbb      	ldrb	r3, [r7, #22]
}
 800f156:	4618      	mov	r0, r3
 800f158:	3718      	adds	r7, #24
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}

0800f15e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f15e:	b580      	push	{r7, lr}
 800f160:	b082      	sub	sp, #8
 800f162:	af00      	add	r7, sp, #0
 800f164:	6078      	str	r0, [r7, #4]
 800f166:	460b      	mov	r3, r1
 800f168:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f170:	78fa      	ldrb	r2, [r7, #3]
 800f172:	4611      	mov	r1, r2
 800f174:	4618      	mov	r0, r3
 800f176:	f7f9 ff95 	bl	80090a4 <HAL_PCD_EP_GetRxCount>
 800f17a:	4603      	mov	r3, r0
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3708      	adds	r7, #8
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f184:	b480      	push	{r7}
 800f186:	b085      	sub	sp, #20
 800f188:	af00      	add	r7, sp, #0
 800f18a:	4603      	mov	r3, r0
 800f18c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f18e:	2300      	movs	r3, #0
 800f190:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f192:	79fb      	ldrb	r3, [r7, #7]
 800f194:	2b03      	cmp	r3, #3
 800f196:	d817      	bhi.n	800f1c8 <USBD_Get_USB_Status+0x44>
 800f198:	a201      	add	r2, pc, #4	; (adr r2, 800f1a0 <USBD_Get_USB_Status+0x1c>)
 800f19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f19e:	bf00      	nop
 800f1a0:	0800f1b1 	.word	0x0800f1b1
 800f1a4:	0800f1b7 	.word	0x0800f1b7
 800f1a8:	0800f1bd 	.word	0x0800f1bd
 800f1ac:	0800f1c3 	.word	0x0800f1c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	73fb      	strb	r3, [r7, #15]
    break;
 800f1b4:	e00b      	b.n	800f1ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f1b6:	2303      	movs	r3, #3
 800f1b8:	73fb      	strb	r3, [r7, #15]
    break;
 800f1ba:	e008      	b.n	800f1ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f1bc:	2301      	movs	r3, #1
 800f1be:	73fb      	strb	r3, [r7, #15]
    break;
 800f1c0:	e005      	b.n	800f1ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f1c2:	2303      	movs	r3, #3
 800f1c4:	73fb      	strb	r3, [r7, #15]
    break;
 800f1c6:	e002      	b.n	800f1ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f1c8:	2303      	movs	r3, #3
 800f1ca:	73fb      	strb	r3, [r7, #15]
    break;
 800f1cc:	bf00      	nop
  }
  return usb_status;
 800f1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3714      	adds	r7, #20
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr

0800f1dc <__cxa_pure_virtual>:
 800f1dc:	b508      	push	{r3, lr}
 800f1de:	f000 f80d 	bl	800f1fc <_ZSt9terminatev>

0800f1e2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f1e2:	b508      	push	{r3, lr}
 800f1e4:	4780      	blx	r0
 800f1e6:	f000 f80e 	bl	800f206 <abort>
	...

0800f1ec <_ZSt13get_terminatev>:
 800f1ec:	4b02      	ldr	r3, [pc, #8]	; (800f1f8 <_ZSt13get_terminatev+0xc>)
 800f1ee:	6818      	ldr	r0, [r3, #0]
 800f1f0:	f3bf 8f5b 	dmb	ish
 800f1f4:	4770      	bx	lr
 800f1f6:	bf00      	nop
 800f1f8:	2000018c 	.word	0x2000018c

0800f1fc <_ZSt9terminatev>:
 800f1fc:	b508      	push	{r3, lr}
 800f1fe:	f7ff fff5 	bl	800f1ec <_ZSt13get_terminatev>
 800f202:	f7ff ffee 	bl	800f1e2 <_ZN10__cxxabiv111__terminateEPFvvE>

0800f206 <abort>:
 800f206:	b508      	push	{r3, lr}
 800f208:	2006      	movs	r0, #6
 800f20a:	f000 f939 	bl	800f480 <raise>
 800f20e:	2001      	movs	r0, #1
 800f210:	f7f2 fbe2 	bl	80019d8 <_exit>

0800f214 <__errno>:
 800f214:	4b01      	ldr	r3, [pc, #4]	; (800f21c <__errno+0x8>)
 800f216:	6818      	ldr	r0, [r3, #0]
 800f218:	4770      	bx	lr
 800f21a:	bf00      	nop
 800f21c:	20000190 	.word	0x20000190

0800f220 <__libc_init_array>:
 800f220:	b570      	push	{r4, r5, r6, lr}
 800f222:	4e0d      	ldr	r6, [pc, #52]	; (800f258 <__libc_init_array+0x38>)
 800f224:	4c0d      	ldr	r4, [pc, #52]	; (800f25c <__libc_init_array+0x3c>)
 800f226:	1ba4      	subs	r4, r4, r6
 800f228:	10a4      	asrs	r4, r4, #2
 800f22a:	2500      	movs	r5, #0
 800f22c:	42a5      	cmp	r5, r4
 800f22e:	d109      	bne.n	800f244 <__libc_init_array+0x24>
 800f230:	4e0b      	ldr	r6, [pc, #44]	; (800f260 <__libc_init_array+0x40>)
 800f232:	4c0c      	ldr	r4, [pc, #48]	; (800f264 <__libc_init_array+0x44>)
 800f234:	f000 f970 	bl	800f518 <_init>
 800f238:	1ba4      	subs	r4, r4, r6
 800f23a:	10a4      	asrs	r4, r4, #2
 800f23c:	2500      	movs	r5, #0
 800f23e:	42a5      	cmp	r5, r4
 800f240:	d105      	bne.n	800f24e <__libc_init_array+0x2e>
 800f242:	bd70      	pop	{r4, r5, r6, pc}
 800f244:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f248:	4798      	blx	r3
 800f24a:	3501      	adds	r5, #1
 800f24c:	e7ee      	b.n	800f22c <__libc_init_array+0xc>
 800f24e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f252:	4798      	blx	r3
 800f254:	3501      	adds	r5, #1
 800f256:	e7f2      	b.n	800f23e <__libc_init_array+0x1e>
 800f258:	0800fb0c 	.word	0x0800fb0c
 800f25c:	0800fb0c 	.word	0x0800fb0c
 800f260:	0800fb0c 	.word	0x0800fb0c
 800f264:	0800fb14 	.word	0x0800fb14

0800f268 <malloc>:
 800f268:	4b02      	ldr	r3, [pc, #8]	; (800f274 <malloc+0xc>)
 800f26a:	4601      	mov	r1, r0
 800f26c:	6818      	ldr	r0, [r3, #0]
 800f26e:	f000 b86d 	b.w	800f34c <_malloc_r>
 800f272:	bf00      	nop
 800f274:	20000190 	.word	0x20000190

0800f278 <free>:
 800f278:	4b02      	ldr	r3, [pc, #8]	; (800f284 <free+0xc>)
 800f27a:	4601      	mov	r1, r0
 800f27c:	6818      	ldr	r0, [r3, #0]
 800f27e:	f000 b817 	b.w	800f2b0 <_free_r>
 800f282:	bf00      	nop
 800f284:	20000190 	.word	0x20000190

0800f288 <memcpy>:
 800f288:	b510      	push	{r4, lr}
 800f28a:	1e43      	subs	r3, r0, #1
 800f28c:	440a      	add	r2, r1
 800f28e:	4291      	cmp	r1, r2
 800f290:	d100      	bne.n	800f294 <memcpy+0xc>
 800f292:	bd10      	pop	{r4, pc}
 800f294:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f298:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f29c:	e7f7      	b.n	800f28e <memcpy+0x6>

0800f29e <memset>:
 800f29e:	4402      	add	r2, r0
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d100      	bne.n	800f2a8 <memset+0xa>
 800f2a6:	4770      	bx	lr
 800f2a8:	f803 1b01 	strb.w	r1, [r3], #1
 800f2ac:	e7f9      	b.n	800f2a2 <memset+0x4>
	...

0800f2b0 <_free_r>:
 800f2b0:	b538      	push	{r3, r4, r5, lr}
 800f2b2:	4605      	mov	r5, r0
 800f2b4:	2900      	cmp	r1, #0
 800f2b6:	d045      	beq.n	800f344 <_free_r+0x94>
 800f2b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2bc:	1f0c      	subs	r4, r1, #4
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	bfb8      	it	lt
 800f2c2:	18e4      	addlt	r4, r4, r3
 800f2c4:	f000 f8f8 	bl	800f4b8 <__malloc_lock>
 800f2c8:	4a1f      	ldr	r2, [pc, #124]	; (800f348 <_free_r+0x98>)
 800f2ca:	6813      	ldr	r3, [r2, #0]
 800f2cc:	4610      	mov	r0, r2
 800f2ce:	b933      	cbnz	r3, 800f2de <_free_r+0x2e>
 800f2d0:	6063      	str	r3, [r4, #4]
 800f2d2:	6014      	str	r4, [r2, #0]
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2da:	f000 b8ee 	b.w	800f4ba <__malloc_unlock>
 800f2de:	42a3      	cmp	r3, r4
 800f2e0:	d90c      	bls.n	800f2fc <_free_r+0x4c>
 800f2e2:	6821      	ldr	r1, [r4, #0]
 800f2e4:	1862      	adds	r2, r4, r1
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	bf04      	itt	eq
 800f2ea:	681a      	ldreq	r2, [r3, #0]
 800f2ec:	685b      	ldreq	r3, [r3, #4]
 800f2ee:	6063      	str	r3, [r4, #4]
 800f2f0:	bf04      	itt	eq
 800f2f2:	1852      	addeq	r2, r2, r1
 800f2f4:	6022      	streq	r2, [r4, #0]
 800f2f6:	6004      	str	r4, [r0, #0]
 800f2f8:	e7ec      	b.n	800f2d4 <_free_r+0x24>
 800f2fa:	4613      	mov	r3, r2
 800f2fc:	685a      	ldr	r2, [r3, #4]
 800f2fe:	b10a      	cbz	r2, 800f304 <_free_r+0x54>
 800f300:	42a2      	cmp	r2, r4
 800f302:	d9fa      	bls.n	800f2fa <_free_r+0x4a>
 800f304:	6819      	ldr	r1, [r3, #0]
 800f306:	1858      	adds	r0, r3, r1
 800f308:	42a0      	cmp	r0, r4
 800f30a:	d10b      	bne.n	800f324 <_free_r+0x74>
 800f30c:	6820      	ldr	r0, [r4, #0]
 800f30e:	4401      	add	r1, r0
 800f310:	1858      	adds	r0, r3, r1
 800f312:	4282      	cmp	r2, r0
 800f314:	6019      	str	r1, [r3, #0]
 800f316:	d1dd      	bne.n	800f2d4 <_free_r+0x24>
 800f318:	6810      	ldr	r0, [r2, #0]
 800f31a:	6852      	ldr	r2, [r2, #4]
 800f31c:	605a      	str	r2, [r3, #4]
 800f31e:	4401      	add	r1, r0
 800f320:	6019      	str	r1, [r3, #0]
 800f322:	e7d7      	b.n	800f2d4 <_free_r+0x24>
 800f324:	d902      	bls.n	800f32c <_free_r+0x7c>
 800f326:	230c      	movs	r3, #12
 800f328:	602b      	str	r3, [r5, #0]
 800f32a:	e7d3      	b.n	800f2d4 <_free_r+0x24>
 800f32c:	6820      	ldr	r0, [r4, #0]
 800f32e:	1821      	adds	r1, r4, r0
 800f330:	428a      	cmp	r2, r1
 800f332:	bf04      	itt	eq
 800f334:	6811      	ldreq	r1, [r2, #0]
 800f336:	6852      	ldreq	r2, [r2, #4]
 800f338:	6062      	str	r2, [r4, #4]
 800f33a:	bf04      	itt	eq
 800f33c:	1809      	addeq	r1, r1, r0
 800f33e:	6021      	streq	r1, [r4, #0]
 800f340:	605c      	str	r4, [r3, #4]
 800f342:	e7c7      	b.n	800f2d4 <_free_r+0x24>
 800f344:	bd38      	pop	{r3, r4, r5, pc}
 800f346:	bf00      	nop
 800f348:	200049e0 	.word	0x200049e0

0800f34c <_malloc_r>:
 800f34c:	b570      	push	{r4, r5, r6, lr}
 800f34e:	1ccd      	adds	r5, r1, #3
 800f350:	f025 0503 	bic.w	r5, r5, #3
 800f354:	3508      	adds	r5, #8
 800f356:	2d0c      	cmp	r5, #12
 800f358:	bf38      	it	cc
 800f35a:	250c      	movcc	r5, #12
 800f35c:	2d00      	cmp	r5, #0
 800f35e:	4606      	mov	r6, r0
 800f360:	db01      	blt.n	800f366 <_malloc_r+0x1a>
 800f362:	42a9      	cmp	r1, r5
 800f364:	d903      	bls.n	800f36e <_malloc_r+0x22>
 800f366:	230c      	movs	r3, #12
 800f368:	6033      	str	r3, [r6, #0]
 800f36a:	2000      	movs	r0, #0
 800f36c:	bd70      	pop	{r4, r5, r6, pc}
 800f36e:	f000 f8a3 	bl	800f4b8 <__malloc_lock>
 800f372:	4a21      	ldr	r2, [pc, #132]	; (800f3f8 <_malloc_r+0xac>)
 800f374:	6814      	ldr	r4, [r2, #0]
 800f376:	4621      	mov	r1, r4
 800f378:	b991      	cbnz	r1, 800f3a0 <_malloc_r+0x54>
 800f37a:	4c20      	ldr	r4, [pc, #128]	; (800f3fc <_malloc_r+0xb0>)
 800f37c:	6823      	ldr	r3, [r4, #0]
 800f37e:	b91b      	cbnz	r3, 800f388 <_malloc_r+0x3c>
 800f380:	4630      	mov	r0, r6
 800f382:	f000 f845 	bl	800f410 <_sbrk_r>
 800f386:	6020      	str	r0, [r4, #0]
 800f388:	4629      	mov	r1, r5
 800f38a:	4630      	mov	r0, r6
 800f38c:	f000 f840 	bl	800f410 <_sbrk_r>
 800f390:	1c43      	adds	r3, r0, #1
 800f392:	d124      	bne.n	800f3de <_malloc_r+0x92>
 800f394:	230c      	movs	r3, #12
 800f396:	6033      	str	r3, [r6, #0]
 800f398:	4630      	mov	r0, r6
 800f39a:	f000 f88e 	bl	800f4ba <__malloc_unlock>
 800f39e:	e7e4      	b.n	800f36a <_malloc_r+0x1e>
 800f3a0:	680b      	ldr	r3, [r1, #0]
 800f3a2:	1b5b      	subs	r3, r3, r5
 800f3a4:	d418      	bmi.n	800f3d8 <_malloc_r+0x8c>
 800f3a6:	2b0b      	cmp	r3, #11
 800f3a8:	d90f      	bls.n	800f3ca <_malloc_r+0x7e>
 800f3aa:	600b      	str	r3, [r1, #0]
 800f3ac:	50cd      	str	r5, [r1, r3]
 800f3ae:	18cc      	adds	r4, r1, r3
 800f3b0:	4630      	mov	r0, r6
 800f3b2:	f000 f882 	bl	800f4ba <__malloc_unlock>
 800f3b6:	f104 000b 	add.w	r0, r4, #11
 800f3ba:	1d23      	adds	r3, r4, #4
 800f3bc:	f020 0007 	bic.w	r0, r0, #7
 800f3c0:	1ac3      	subs	r3, r0, r3
 800f3c2:	d0d3      	beq.n	800f36c <_malloc_r+0x20>
 800f3c4:	425a      	negs	r2, r3
 800f3c6:	50e2      	str	r2, [r4, r3]
 800f3c8:	e7d0      	b.n	800f36c <_malloc_r+0x20>
 800f3ca:	428c      	cmp	r4, r1
 800f3cc:	684b      	ldr	r3, [r1, #4]
 800f3ce:	bf16      	itet	ne
 800f3d0:	6063      	strne	r3, [r4, #4]
 800f3d2:	6013      	streq	r3, [r2, #0]
 800f3d4:	460c      	movne	r4, r1
 800f3d6:	e7eb      	b.n	800f3b0 <_malloc_r+0x64>
 800f3d8:	460c      	mov	r4, r1
 800f3da:	6849      	ldr	r1, [r1, #4]
 800f3dc:	e7cc      	b.n	800f378 <_malloc_r+0x2c>
 800f3de:	1cc4      	adds	r4, r0, #3
 800f3e0:	f024 0403 	bic.w	r4, r4, #3
 800f3e4:	42a0      	cmp	r0, r4
 800f3e6:	d005      	beq.n	800f3f4 <_malloc_r+0xa8>
 800f3e8:	1a21      	subs	r1, r4, r0
 800f3ea:	4630      	mov	r0, r6
 800f3ec:	f000 f810 	bl	800f410 <_sbrk_r>
 800f3f0:	3001      	adds	r0, #1
 800f3f2:	d0cf      	beq.n	800f394 <_malloc_r+0x48>
 800f3f4:	6025      	str	r5, [r4, #0]
 800f3f6:	e7db      	b.n	800f3b0 <_malloc_r+0x64>
 800f3f8:	200049e0 	.word	0x200049e0
 800f3fc:	200049e4 	.word	0x200049e4

0800f400 <realloc>:
 800f400:	4b02      	ldr	r3, [pc, #8]	; (800f40c <realloc+0xc>)
 800f402:	460a      	mov	r2, r1
 800f404:	4601      	mov	r1, r0
 800f406:	6818      	ldr	r0, [r3, #0]
 800f408:	f000 b858 	b.w	800f4bc <_realloc_r>
 800f40c:	20000190 	.word	0x20000190

0800f410 <_sbrk_r>:
 800f410:	b538      	push	{r3, r4, r5, lr}
 800f412:	4c06      	ldr	r4, [pc, #24]	; (800f42c <_sbrk_r+0x1c>)
 800f414:	2300      	movs	r3, #0
 800f416:	4605      	mov	r5, r0
 800f418:	4608      	mov	r0, r1
 800f41a:	6023      	str	r3, [r4, #0]
 800f41c:	f7f2 fae6 	bl	80019ec <_sbrk>
 800f420:	1c43      	adds	r3, r0, #1
 800f422:	d102      	bne.n	800f42a <_sbrk_r+0x1a>
 800f424:	6823      	ldr	r3, [r4, #0]
 800f426:	b103      	cbz	r3, 800f42a <_sbrk_r+0x1a>
 800f428:	602b      	str	r3, [r5, #0]
 800f42a:	bd38      	pop	{r3, r4, r5, pc}
 800f42c:	200064ac 	.word	0x200064ac

0800f430 <_raise_r>:
 800f430:	291f      	cmp	r1, #31
 800f432:	b538      	push	{r3, r4, r5, lr}
 800f434:	4604      	mov	r4, r0
 800f436:	460d      	mov	r5, r1
 800f438:	d904      	bls.n	800f444 <_raise_r+0x14>
 800f43a:	2316      	movs	r3, #22
 800f43c:	6003      	str	r3, [r0, #0]
 800f43e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f442:	bd38      	pop	{r3, r4, r5, pc}
 800f444:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f446:	b112      	cbz	r2, 800f44e <_raise_r+0x1e>
 800f448:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f44c:	b94b      	cbnz	r3, 800f462 <_raise_r+0x32>
 800f44e:	4620      	mov	r0, r4
 800f450:	f000 f830 	bl	800f4b4 <_getpid_r>
 800f454:	462a      	mov	r2, r5
 800f456:	4601      	mov	r1, r0
 800f458:	4620      	mov	r0, r4
 800f45a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f45e:	f000 b817 	b.w	800f490 <_kill_r>
 800f462:	2b01      	cmp	r3, #1
 800f464:	d00a      	beq.n	800f47c <_raise_r+0x4c>
 800f466:	1c59      	adds	r1, r3, #1
 800f468:	d103      	bne.n	800f472 <_raise_r+0x42>
 800f46a:	2316      	movs	r3, #22
 800f46c:	6003      	str	r3, [r0, #0]
 800f46e:	2001      	movs	r0, #1
 800f470:	e7e7      	b.n	800f442 <_raise_r+0x12>
 800f472:	2400      	movs	r4, #0
 800f474:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f478:	4628      	mov	r0, r5
 800f47a:	4798      	blx	r3
 800f47c:	2000      	movs	r0, #0
 800f47e:	e7e0      	b.n	800f442 <_raise_r+0x12>

0800f480 <raise>:
 800f480:	4b02      	ldr	r3, [pc, #8]	; (800f48c <raise+0xc>)
 800f482:	4601      	mov	r1, r0
 800f484:	6818      	ldr	r0, [r3, #0]
 800f486:	f7ff bfd3 	b.w	800f430 <_raise_r>
 800f48a:	bf00      	nop
 800f48c:	20000190 	.word	0x20000190

0800f490 <_kill_r>:
 800f490:	b538      	push	{r3, r4, r5, lr}
 800f492:	4c07      	ldr	r4, [pc, #28]	; (800f4b0 <_kill_r+0x20>)
 800f494:	2300      	movs	r3, #0
 800f496:	4605      	mov	r5, r0
 800f498:	4608      	mov	r0, r1
 800f49a:	4611      	mov	r1, r2
 800f49c:	6023      	str	r3, [r4, #0]
 800f49e:	f7f2 fa8b 	bl	80019b8 <_kill>
 800f4a2:	1c43      	adds	r3, r0, #1
 800f4a4:	d102      	bne.n	800f4ac <_kill_r+0x1c>
 800f4a6:	6823      	ldr	r3, [r4, #0]
 800f4a8:	b103      	cbz	r3, 800f4ac <_kill_r+0x1c>
 800f4aa:	602b      	str	r3, [r5, #0]
 800f4ac:	bd38      	pop	{r3, r4, r5, pc}
 800f4ae:	bf00      	nop
 800f4b0:	200064ac 	.word	0x200064ac

0800f4b4 <_getpid_r>:
 800f4b4:	f7f2 ba78 	b.w	80019a8 <_getpid>

0800f4b8 <__malloc_lock>:
 800f4b8:	4770      	bx	lr

0800f4ba <__malloc_unlock>:
 800f4ba:	4770      	bx	lr

0800f4bc <_realloc_r>:
 800f4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4be:	4607      	mov	r7, r0
 800f4c0:	4614      	mov	r4, r2
 800f4c2:	460e      	mov	r6, r1
 800f4c4:	b921      	cbnz	r1, 800f4d0 <_realloc_r+0x14>
 800f4c6:	4611      	mov	r1, r2
 800f4c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f4cc:	f7ff bf3e 	b.w	800f34c <_malloc_r>
 800f4d0:	b922      	cbnz	r2, 800f4dc <_realloc_r+0x20>
 800f4d2:	f7ff feed 	bl	800f2b0 <_free_r>
 800f4d6:	4625      	mov	r5, r4
 800f4d8:	4628      	mov	r0, r5
 800f4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4dc:	f000 f814 	bl	800f508 <_malloc_usable_size_r>
 800f4e0:	42a0      	cmp	r0, r4
 800f4e2:	d20f      	bcs.n	800f504 <_realloc_r+0x48>
 800f4e4:	4621      	mov	r1, r4
 800f4e6:	4638      	mov	r0, r7
 800f4e8:	f7ff ff30 	bl	800f34c <_malloc_r>
 800f4ec:	4605      	mov	r5, r0
 800f4ee:	2800      	cmp	r0, #0
 800f4f0:	d0f2      	beq.n	800f4d8 <_realloc_r+0x1c>
 800f4f2:	4631      	mov	r1, r6
 800f4f4:	4622      	mov	r2, r4
 800f4f6:	f7ff fec7 	bl	800f288 <memcpy>
 800f4fa:	4631      	mov	r1, r6
 800f4fc:	4638      	mov	r0, r7
 800f4fe:	f7ff fed7 	bl	800f2b0 <_free_r>
 800f502:	e7e9      	b.n	800f4d8 <_realloc_r+0x1c>
 800f504:	4635      	mov	r5, r6
 800f506:	e7e7      	b.n	800f4d8 <_realloc_r+0x1c>

0800f508 <_malloc_usable_size_r>:
 800f508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f50c:	1f18      	subs	r0, r3, #4
 800f50e:	2b00      	cmp	r3, #0
 800f510:	bfbc      	itt	lt
 800f512:	580b      	ldrlt	r3, [r1, r0]
 800f514:	18c0      	addlt	r0, r0, r3
 800f516:	4770      	bx	lr

0800f518 <_init>:
 800f518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f51a:	bf00      	nop
 800f51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f51e:	bc08      	pop	{r3}
 800f520:	469e      	mov	lr, r3
 800f522:	4770      	bx	lr

0800f524 <_fini>:
 800f524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f526:	bf00      	nop
 800f528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f52a:	bc08      	pop	{r3}
 800f52c:	469e      	mov	lr, r3
 800f52e:	4770      	bx	lr
