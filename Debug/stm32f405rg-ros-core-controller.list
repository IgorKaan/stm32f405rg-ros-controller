
stm32f405rg-ros-core-controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  0800fa70  0800fa70  0001fa70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010108  08010108  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08010108  08010108  00020108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010110  08010110  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010110  08010110  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010118  08010118  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0801011c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000064b4  200001f4  08010310  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200066a8  08010310  000366a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030d9f  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005de3  00000000  00000000  00060fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001fb0  00000000  00000000  00066da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d88  00000000  00000000  00068d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002934d  00000000  00000000  0006aae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b597  00000000  00000000  00093e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dcf7b  00000000  00000000  000af3c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018c33f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088e4  00000000  00000000  0018c3bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fa58 	.word	0x0800fa58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800fa58 	.word	0x0800fa58

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000210 	.word	0x20000210
 8000510:	20000264 	.word	0x20000264

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b0aa      	sub	sp, #168	; 0xa8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f004 fd77 	bl	800500c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f8eb 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f9b7 	bl	8000894 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000526:	f000 f951 	bl	80007cc <MX_CAN1_Init>
  MX_I2C1_Init();
 800052a:	f000 f985 	bl	8000838 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ctrl = read_id();
 800052e:	f000 fb89 	bl	8000c44 <read_id>
 8000532:	4603      	mov	r3, r0
 8000534:	461a      	mov	r2, r3
 8000536:	4b5f      	ldr	r3, [pc, #380]	; (80006b4 <main+0x1a0>)
 8000538:	701a      	strb	r2, [r3, #0]
  MPU9250_calibrate();
 800053a:	f000 fbb9 	bl	8000cb0 <MPU9250_calibrate>

  HAL_Delay(2000);
 800053e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000542:	f004 fda5 	bl	8005090 <HAL_Delay>
  MPU9250_init();
 8000546:	f000 fb91 	bl	8000c6c <MPU9250_init>
  HAL_Delay(500);
 800054a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800054e:	f004 fd9f 	bl	8005090 <HAL_Delay>
  init_ROS();
 8000552:	f003 fad5 	bl	8003b00 <init_ROS>
  HAL_Delay(500);
 8000556:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800055a:	f004 fd99 	bl	8005090 <HAL_Delay>

  left_wheels_Header.DLC = 4;
 800055e:	4b56      	ldr	r3, [pc, #344]	; (80006b8 <main+0x1a4>)
 8000560:	2204      	movs	r2, #4
 8000562:	611a      	str	r2, [r3, #16]
  left_wheels_Header.IDE = CAN_ID_STD;
 8000564:	4b54      	ldr	r3, [pc, #336]	; (80006b8 <main+0x1a4>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  left_wheels_Header.RTR = CAN_RTR_DATA;
 800056a:	4b53      	ldr	r3, [pc, #332]	; (80006b8 <main+0x1a4>)
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]
  left_wheels_Header.StdId = 0xF;
 8000570:	4b51      	ldr	r3, [pc, #324]	; (80006b8 <main+0x1a4>)
 8000572:	220f      	movs	r2, #15
 8000574:	601a      	str	r2, [r3, #0]

  right_wheels_Header.DLC = 4;
 8000576:	4b51      	ldr	r3, [pc, #324]	; (80006bc <main+0x1a8>)
 8000578:	2204      	movs	r2, #4
 800057a:	611a      	str	r2, [r3, #16]
  right_wheels_Header.IDE = CAN_ID_STD;
 800057c:	4b4f      	ldr	r3, [pc, #316]	; (80006bc <main+0x1a8>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  right_wheels_Header.RTR = CAN_RTR_DATA;
 8000582:	4b4e      	ldr	r3, [pc, #312]	; (80006bc <main+0x1a8>)
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  right_wheels_Header.StdId = 0x1F;
 8000588:	4b4c      	ldr	r3, [pc, #304]	; (80006bc <main+0x1a8>)
 800058a:	221f      	movs	r2, #31
 800058c:	601a      	str	r2, [r3, #0]

  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800058e:	4b4c      	ldr	r3, [pc, #304]	; (80006c0 <main+0x1ac>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0;
 8000594:	4b4a      	ldr	r3, [pc, #296]	; (80006c0 <main+0x1ac>)
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 800059a:	4b49      	ldr	r3, [pc, #292]	; (80006c0 <main+0x1ac>)
 800059c:	2200      	movs	r2, #0
 800059e:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 80005a0:	4b47      	ldr	r3, [pc, #284]	; (80006c0 <main+0x1ac>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 80005a6:	4b46      	ldr	r3, [pc, #280]	; (80006c0 <main+0x1ac>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005ac:	4b44      	ldr	r3, [pc, #272]	; (80006c0 <main+0x1ac>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	61da      	str	r2, [r3, #28]
  //sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterActivation = ENABLE;
 80005b2:	4b43      	ldr	r3, [pc, #268]	; (80006c0 <main+0x1ac>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80005b8:	4941      	ldr	r1, [pc, #260]	; (80006c0 <main+0x1ac>)
 80005ba:	4842      	ldr	r0, [pc, #264]	; (80006c4 <main+0x1b0>)
 80005bc:	f004 fe86 	bl	80052cc <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1);
 80005c0:	4840      	ldr	r0, [pc, #256]	; (80006c4 <main+0x1b0>)
 80005c2:	f004 ff63 	bl	800548c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005c6:	2102      	movs	r1, #2
 80005c8:	483e      	ldr	r0, [pc, #248]	; (80006c4 <main+0x1b0>)
 80005ca:	f005 f990 	bl	80058ee <HAL_CAN_ActivateNotification>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ce:	4b3e      	ldr	r3, [pc, #248]	; (80006c8 <main+0x1b4>)
 80005d0:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80005d4:	461d      	mov	r5, r3
 80005d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f00d f969 	bl	800d8c0 <osThreadCreate>
 80005ee:	4602      	mov	r2, r0
 80005f0:	4b36      	ldr	r3, [pc, #216]	; (80006cc <main+0x1b8>)
 80005f2:	601a      	str	r2, [r3, #0]

  /* definition and creation of task1 */
  osThreadDef(task1, StartTask02, osPriorityNormal, 0, 128);
 80005f4:	4b36      	ldr	r3, [pc, #216]	; (80006d0 <main+0x1bc>)
 80005f6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80005fa:	461d      	mov	r5, r3
 80005fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000600:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000604:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1Handle = osThreadCreate(osThread(task1), NULL);
 8000608:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f00d f956 	bl	800d8c0 <osThreadCreate>
 8000614:	4602      	mov	r2, r0
 8000616:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <main+0x1c0>)
 8000618:	601a      	str	r2, [r3, #0]

  /* definition and creation of task2 */
  osThreadDef(task2, StartTask03, osPriorityHigh, 0, 128);
 800061a:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <main+0x1c4>)
 800061c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000620:	461d      	mov	r5, r3
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2Handle = osThreadCreate(osThread(task2), NULL);
 800062e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f00d f943 	bl	800d8c0 <osThreadCreate>
 800063a:	4602      	mov	r2, r0
 800063c:	4b27      	ldr	r3, [pc, #156]	; (80006dc <main+0x1c8>)
 800063e:	601a      	str	r2, [r3, #0]

  /* definition and creation of task3 */
  osThreadDef(task3, StartTask04, osPriorityNormal, 0, 128);
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <main+0x1cc>)
 8000642:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000646:	461d      	mov	r5, r3
 8000648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000650:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task3Handle = osThreadCreate(osThread(task3), NULL);
 8000654:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f00d f930 	bl	800d8c0 <osThreadCreate>
 8000660:	4602      	mov	r2, r0
 8000662:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <main+0x1d0>)
 8000664:	601a      	str	r2, [r3, #0]

  /* definition and creation of task4 */
  osThreadDef(task4, StartTask05, osPriorityIdle, 0, 128);
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <main+0x1d4>)
 8000668:	f107 041c 	add.w	r4, r7, #28
 800066c:	461d      	mov	r5, r3
 800066e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000672:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task4Handle = osThreadCreate(osThread(task4), NULL);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f00d f91d 	bl	800d8c0 <osThreadCreate>
 8000686:	4602      	mov	r2, r0
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <main+0x1d8>)
 800068a:	601a      	str	r2, [r3, #0]

  /* definition and creation of task5 */
  osThreadDef(task5, StartTask06, osPriorityIdle, 0, 128);
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <main+0x1dc>)
 800068e:	463c      	mov	r4, r7
 8000690:	461d      	mov	r5, r3
 8000692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000696:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800069a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task5Handle = osThreadCreate(osThread(task5), NULL);
 800069e:	463b      	mov	r3, r7
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f00d f90c 	bl	800d8c0 <osThreadCreate>
 80006a8:	4602      	mov	r2, r0
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <main+0x1e0>)
 80006ac:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006ae:	f00d f900 	bl	800d8b2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <main+0x19e>
 80006b4:	20000464 	.word	0x20000464
 80006b8:	20004c38 	.word	0x20004c38
 80006bc:	200050f4 	.word	0x200050f4
 80006c0:	20004c00 	.word	0x20004c00
 80006c4:	20005134 	.word	0x20005134
 80006c8:	0800fa7c 	.word	0x0800fa7c
 80006cc:	20004c2c 	.word	0x20004c2c
 80006d0:	0800faa0 	.word	0x0800faa0
 80006d4:	20004cb8 	.word	0x20004cb8
 80006d8:	0800fac4 	.word	0x0800fac4
 80006dc:	20005184 	.word	0x20005184
 80006e0:	0800fae8 	.word	0x0800fae8
 80006e4:	20004ce0 	.word	0x20004ce0
 80006e8:	0800fb0c 	.word	0x0800fb0c
 80006ec:	20004cc8 	.word	0x20004cc8
 80006f0:	0800fb30 	.word	0x0800fb30
 80006f4:	20004cc0 	.word	0x20004cc0

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	2230      	movs	r2, #48	; 0x30
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f00f f869 	bl	800f7de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <SystemClock_Config+0xcc>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	4a27      	ldr	r2, [pc, #156]	; (80007c4 <SystemClock_Config+0xcc>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	; 0x40
 800072c:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <SystemClock_Config+0xcc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <SystemClock_Config+0xd0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <SystemClock_Config+0xd0>)
 8000742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <SystemClock_Config+0xd0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000754:	2301      	movs	r3, #1
 8000756:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2302      	movs	r3, #2
 8000760:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000768:	2304      	movs	r3, #4
 800076a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800076c:	23a8      	movs	r3, #168	; 0xa8
 800076e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000770:	2302      	movs	r3, #2
 8000772:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000774:	2307      	movs	r3, #7
 8000776:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	4618      	mov	r0, r3
 800077e:	f009 fa91 	bl	8009ca4 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000788:	f000 f9d0 	bl	8000b2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000790:	2302      	movs	r3, #2
 8000792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000798:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800079c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800079e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2105      	movs	r1, #5
 80007aa:	4618      	mov	r0, r3
 80007ac:	f009 fcea 	bl	800a184 <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007b6:	f000 f9b9 	bl	8000b2c <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3750      	adds	r7, #80	; 0x50
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40007000 	.word	0x40007000

080007cc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_CAN1_Init+0x64>)
 80007d2:	4a18      	ldr	r2, [pc, #96]	; (8000834 <MX_CAN1_Init+0x68>)
 80007d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_CAN1_Init+0x64>)
 80007d8:	2203      	movs	r2, #3
 80007da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_CAN1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_CAN1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_CAN1_Init+0x64>)
 80007ea:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80007ee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_CAN1_Init+0x64>)
 80007f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007f6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <MX_CAN1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_CAN1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_CAN1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_CAN1_Init+0x64>)
 800080c:	2200      	movs	r2, #0
 800080e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_CAN1_Init+0x64>)
 8000812:	2200      	movs	r2, #0
 8000814:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_CAN1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_CAN1_Init+0x64>)
 800081e:	f004 fc59 	bl	80050d4 <HAL_CAN_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000828:	f000 f980 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20005134 	.word	0x20005134
 8000834:	40006400 	.word	0x40006400

08000838 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_I2C1_Init+0x50>)
 800083e:	4a13      	ldr	r2, [pc, #76]	; (800088c <MX_I2C1_Init+0x54>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_I2C1_Init+0x50>)
 8000844:	4a12      	ldr	r2, [pc, #72]	; (8000890 <MX_I2C1_Init+0x58>)
 8000846:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_I2C1_Init+0x50>)
 8000856:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_I2C1_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_I2C1_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_I2C1_Init+0x50>)
 8000876:	f005 fd51 	bl	800631c <HAL_I2C_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000880:	f000 f954 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20004c5c 	.word	0x20004c5c
 800088c:	40005400 	.word	0x40005400
 8000890:	00061a80 	.word	0x00061a80

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_GPIO_Init+0x68>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a16      	ldr	r2, [pc, #88]	; (80008fc <MX_GPIO_Init+0x68>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_GPIO_Init+0x68>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_GPIO_Init+0x68>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <MX_GPIO_Init+0x68>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <MX_GPIO_Init+0x68>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_GPIO_Init+0x68>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <MX_GPIO_Init+0x68>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_GPIO_Init+0x68>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

}
 80008ee:	bf00      	nop
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &can_RxHeader, canRXData);
 8000908:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800090a:	4a1b      	ldr	r2, [pc, #108]	; (8000978 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800090c:	2100      	movs	r1, #0
 800090e:	481b      	ldr	r0, [pc, #108]	; (800097c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000910:	f004 fedb 	bl	80056ca <HAL_CAN_GetRxMessage>

	if (can_RxHeader.StdId == 0xA) {
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b0a      	cmp	r3, #10
 800091a:	d110      	bne.n	800093e <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
		speedRXDataLeftFrontWheel = canRXData[0];
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000922:	701a      	strb	r2, [r3, #0]
		sideRXDataLeftFrontWheel = canRXData[1];
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000926:	785a      	ldrb	r2, [r3, #1]
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800092a:	701a      	strb	r2, [r3, #0]
		speedRXDataLeftBackWheel = canRXData[2];
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800092e:	789a      	ldrb	r2, [r3, #2]
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000932:	701a      	strb	r2, [r3, #0]
		sideRXDataLeftBackWheel = canRXData[3];
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000936:	78da      	ldrb	r2, [r3, #3]
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 800093a:	701a      	strb	r2, [r3, #0]
 800093c:	e013      	b.n	8000966 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
	}
	else if (can_RxHeader.StdId == 0x1A) {
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b1a      	cmp	r3, #26
 8000944:	d10f      	bne.n	8000966 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
		speedRXDataRightFrontWheel = canRXData[0];
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000948:	781a      	ldrb	r2, [r3, #0]
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 800094c:	701a      	strb	r2, [r3, #0]
		sideRXDataRightFrontWheel = canRXData[1];
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000950:	785a      	ldrb	r2, [r3, #1]
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000954:	701a      	strb	r2, [r3, #0]
		speedRXDataRightBackWheel = canRXData[2];
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000958:	789a      	ldrb	r2, [r3, #2]
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 800095c:	701a      	strb	r2, [r3, #0]
		sideRXDataRightBackWheel = canRXData[3];
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000960:	78da      	ldrb	r2, [r3, #3]
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000964:	701a      	strb	r2, [r3, #0]
	}
	can_RxHeader.StdId = 0x0000;
 8000966:	4b04      	ldr	r3, [pc, #16]	; (8000978 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200050e8 	.word	0x200050e8
 8000978:	20005164 	.word	0x20005164
 800097c:	20005134 	.word	0x20005134
 8000980:	20004cc4 	.word	0x20004cc4
 8000984:	20005128 	.word	0x20005128
 8000988:	20004ccc 	.word	0x20004ccc
 800098c:	20004cdc 	.word	0x20004cdc
 8000990:	20005130 	.word	0x20005130
 8000994:	2000510c 	.word	0x2000510c
 8000998:	20004ce4 	.word	0x20004ce4
 800099c:	20004c34 	.word	0x20004c34

080009a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80009a8:	f00e f98a 	bl	800ecc0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  gyro_handler();
 80009ac:	f003 fa40 	bl	8003e30 <gyro_handler>
	  osDelay(4);
 80009b0:	2004      	movs	r0, #4
 80009b2:	f00c ffd1 	bl	800d958 <osDelay>
	  accel_handler();
 80009b6:	f003 fa69 	bl	8003e8c <accel_handler>
	  osDelay(4);
 80009ba:	2004      	movs	r0, #4
 80009bc:	f00c ffcc 	bl	800d958 <osDelay>
	  gyro_handler();
 80009c0:	e7f4      	b.n	80009ac <StartDefaultTask+0xc>
	...

080009c4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  MPU9250_getAllData(allData);
 80009cc:	4803      	ldr	r0, [pc, #12]	; (80009dc <StartTask02+0x18>)
 80009ce:	f000 fb87 	bl	80010e0 <MPU9250_getAllData>
	  osDelay(10);
 80009d2:	200a      	movs	r0, #10
 80009d4:	f00c ffc0 	bl	800d958 <osDelay>
	  MPU9250_getAllData(allData);
 80009d8:	e7f8      	b.n	80009cc <StartTask02+0x8>
 80009da:	bf00      	nop
 80009dc:	2000511c 	.word	0x2000511c

080009e0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  left_wheels_data[0] = sideDataLeftFrontWheel;
 80009e8:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <StartTask03+0xb8>)
 80009ea:	f993 3000 	ldrsb.w	r3, [r3]
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <StartTask03+0xbc>)
 80009f2:	701a      	strb	r2, [r3, #0]
	  left_wheels_data[1] = speedDataLeftFrontWheel;
 80009f4:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <StartTask03+0xc0>)
 80009f6:	f993 3000 	ldrsb.w	r3, [r3]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <StartTask03+0xbc>)
 80009fe:	705a      	strb	r2, [r3, #1]
	  left_wheels_data[2] = sideDataLeftBackWheel;
 8000a00:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <StartTask03+0xc4>)
 8000a02:	f993 3000 	ldrsb.w	r3, [r3]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <StartTask03+0xbc>)
 8000a0a:	709a      	strb	r2, [r3, #2]
	  left_wheels_data[3] = speedDataLeftBackWheel;
 8000a0c:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <StartTask03+0xc8>)
 8000a0e:	f993 3000 	ldrsb.w	r3, [r3]
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <StartTask03+0xbc>)
 8000a16:	70da      	strb	r2, [r3, #3]
	  right_wheels_data[0] = sideDataRightFrontWheel;
 8000a18:	4b24      	ldr	r3, [pc, #144]	; (8000aac <StartTask03+0xcc>)
 8000a1a:	f993 3000 	ldrsb.w	r3, [r3]
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <StartTask03+0xd0>)
 8000a22:	701a      	strb	r2, [r3, #0]
	  right_wheels_data[1] = speedDataRightFrontWheel;
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <StartTask03+0xd4>)
 8000a26:	f993 3000 	ldrsb.w	r3, [r3]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <StartTask03+0xd0>)
 8000a2e:	705a      	strb	r2, [r3, #1]
	  right_wheels_data[2] = sideDataRightBackWheel;
 8000a30:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <StartTask03+0xd8>)
 8000a32:	f993 3000 	ldrsb.w	r3, [r3]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <StartTask03+0xd0>)
 8000a3a:	709a      	strb	r2, [r3, #2]
	  right_wheels_data[3] = speedDataRightBackWheel;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <StartTask03+0xdc>)
 8000a3e:	f993 3000 	ldrsb.w	r3, [r3]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <StartTask03+0xd0>)
 8000a46:	70da      	strb	r2, [r3, #3]
	  HAL_CAN_AddTxMessage(&hcan1, &left_wheels_Header, left_wheels_data, &TxMailbox);
 8000a48:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <StartTask03+0xe0>)
 8000a4a:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <StartTask03+0xbc>)
 8000a4c:	491d      	ldr	r1, [pc, #116]	; (8000ac4 <StartTask03+0xe4>)
 8000a4e:	481e      	ldr	r0, [pc, #120]	; (8000ac8 <StartTask03+0xe8>)
 8000a50:	f004 fd60 	bl	8005514 <HAL_CAN_AddTxMessage>
	  osDelay(2);
 8000a54:	2002      	movs	r0, #2
 8000a56:	f00c ff7f 	bl	800d958 <osDelay>
	  HAL_CAN_AddTxMessage(&hcan1, &right_wheels_Header, right_wheels_data, &TxMailbox);
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <StartTask03+0xe0>)
 8000a5c:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <StartTask03+0xd0>)
 8000a5e:	491b      	ldr	r1, [pc, #108]	; (8000acc <StartTask03+0xec>)
 8000a60:	4819      	ldr	r0, [pc, #100]	; (8000ac8 <StartTask03+0xe8>)
 8000a62:	f004 fd57 	bl	8005514 <HAL_CAN_AddTxMessage>
	  osDelay(2);
 8000a66:	2002      	movs	r0, #2
 8000a68:	f00c ff76 	bl	800d958 <osDelay>
	  rpm_left_front_handler();
 8000a6c:	f003 f932 	bl	8003cd4 <rpm_left_front_handler>
	  osDelay(2);
 8000a70:	2002      	movs	r0, #2
 8000a72:	f00c ff71 	bl	800d958 <osDelay>
	  rpm_left_back_handler();
 8000a76:	f003 f9a1 	bl	8003dbc <rpm_left_back_handler>
	  osDelay(2);
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f00c ff6c 	bl	800d958 <osDelay>
	  rpm_right_front_handler();
 8000a80:	f003 f8ee 	bl	8003c60 <rpm_right_front_handler>
	  osDelay(2);
 8000a84:	2002      	movs	r0, #2
 8000a86:	f00c ff67 	bl	800d958 <osDelay>
	  rpm_right_back_handler();
 8000a8a:	f003 f95d 	bl	8003d48 <rpm_right_back_handler>
	  osDelay(2);
 8000a8e:	2002      	movs	r0, #2
 8000a90:	f00c ff62 	bl	800d958 <osDelay>
	  left_wheels_data[0] = sideDataLeftFrontWheel;
 8000a94:	e7a8      	b.n	80009e8 <StartTask03+0x8>
 8000a96:	bf00      	nop
 8000a98:	2000046a 	.word	0x2000046a
 8000a9c:	20000480 	.word	0x20000480
 8000aa0:	20000466 	.word	0x20000466
 8000aa4:	2000046c 	.word	0x2000046c
 8000aa8:	20000468 	.word	0x20000468
 8000aac:	20000469 	.word	0x20000469
 8000ab0:	20000484 	.word	0x20000484
 8000ab4:	20000465 	.word	0x20000465
 8000ab8:	2000046b 	.word	0x2000046b
 8000abc:	20000467 	.word	0x20000467
 8000ac0:	20005110 	.word	0x20005110
 8000ac4:	20004c38 	.word	0x20004c38
 8000ac8:	20005134 	.word	0x20005134
 8000acc:	200050f4 	.word	0x200050f4

08000ad0 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	  laser_sensors_data_handler();
 8000ad8:	f003 f89e 	bl	8003c18 <laser_sensors_data_handler>
	  osDelay(50);
 8000adc:	2032      	movs	r0, #50	; 0x32
 8000ade:	f00c ff3b 	bl	800d958 <osDelay>
	  laser_sensors_data_handler();
 8000ae2:	e7f9      	b.n	8000ad8 <StartTask04+0x8>

08000ae4 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
	  spinOnce();
 8000aec:	f003 f9fc 	bl	8003ee8 <spinOnce>
	  osDelay(10);
 8000af0:	200a      	movs	r0, #10
 8000af2:	f00c ff31 	bl	800d958 <osDelay>
	  spinOnce();
 8000af6:	e7f9      	b.n	8000aec <StartTask05+0x8>

08000af8 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void const * argument)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 8000b00:	200a      	movs	r0, #10
 8000b02:	f00c ff29 	bl	800d958 <osDelay>
 8000b06:	e7fb      	b.n	8000b00 <StartTask06+0x8>

08000b08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d101      	bne.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b1a:	f004 fa99 	bl	8005050 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40000400 	.word	0x40000400

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <error>:
void delay(uint32_t delayTime){
	uint32_t startTime =  sysTick_Time;
	while ( (sysTick_Time - startTime) < delayTime );
}

void error(void) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000b40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b44:	481d      	ldr	r0, [pc, #116]	; (8000bbc <error+0x80>)
 8000b46:	f005 fbcd 	bl	80062e4 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000b4a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b4e:	f004 fa9f 	bl	8005090 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000b52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b56:	4819      	ldr	r0, [pc, #100]	; (8000bbc <error+0x80>)
 8000b58:	f005 fbc4 	bl	80062e4 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000b5c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b60:	f004 fa96 	bl	8005090 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000b64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b68:	4814      	ldr	r0, [pc, #80]	; (8000bbc <error+0x80>)
 8000b6a:	f005 fbbb 	bl	80062e4 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000b6e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b72:	f004 fa8d 	bl	8005090 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7a:	4810      	ldr	r0, [pc, #64]	; (8000bbc <error+0x80>)
 8000b7c:	f005 fbb2 	bl	80062e4 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000b80:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b84:	f004 fa84 	bl	8005090 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000b88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8c:	480b      	ldr	r0, [pc, #44]	; (8000bbc <error+0x80>)
 8000b8e:	f005 fba9 	bl	80062e4 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000b92:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b96:	f004 fa7b 	bl	8005090 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000b9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b9e:	4807      	ldr	r0, [pc, #28]	; (8000bbc <error+0x80>)
 8000ba0:	f005 fba0 	bl	80062e4 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000ba4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ba8:	f004 fa72 	bl	8005090 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_8);
 8000bac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <error+0x80>)
 8000bb2:	f005 fb97 	bl	80062e4 <HAL_GPIO_TogglePin>
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <sensor_io_read>:

uint8_t sensor_io_read(uint16_t DeviceAddr, uint8_t RegisterAddr) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	460a      	mov	r2, r1
 8000bca:	80fb      	strh	r3, [r7, #6]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	717b      	strb	r3, [r7, #5]
	return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8000bd0:	797a      	ldrb	r2, [r7, #5]
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f806 	bl	8000be8 <I2Cx_ReadData>
 8000bdc:	4603      	mov	r3, r0
	return HAL_OK;
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <I2Cx_ReadData>:
uint8_t sensor_io_write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value) {
	I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
	return HAL_OK;
}

uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af04      	add	r7, sp, #16
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	80fb      	strh	r3, [r7, #6]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]
	value = 0;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <I2Cx_ReadData+0x54>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Read(&hi2c1, Addr<<1, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	b299      	uxth	r1, r3
 8000c08:	797b      	ldrb	r3, [r7, #5]
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c10:	9302      	str	r3, [sp, #8]
 8000c12:	2301      	movs	r3, #1
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <I2Cx_ReadData+0x54>)
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	4808      	ldr	r0, [pc, #32]	; (8000c40 <I2Cx_ReadData+0x58>)
 8000c1e:	f005 fdb3 	bl	8006788 <HAL_I2C_Mem_Read>
 8000c22:	4603      	mov	r3, r0
 8000c24:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <I2Cx_ReadData+0x48>
	{
	    error();
 8000c2c:	f7ff ff86 	bl	8000b3c <error>
	}
	return value;
 8000c30:	4b02      	ldr	r3, [pc, #8]	; (8000c3c <I2Cx_ReadData+0x54>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200004c4 	.word	0x200004c4
 8000c40:	20004c5c 	.word	0x20004c5c

08000c44 <read_id>:
	if ((read_id()==0xFF)||(read_id()==0x70)||(read_id()==0x48)) {

	}
}

uint8_t read_id(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	ctrl = 0x00;
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <read_id+0x24>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
	ctrl = sensor_io_read(0x68, 0x75);
 8000c4e:	2175      	movs	r1, #117	; 0x75
 8000c50:	2068      	movs	r0, #104	; 0x68
 8000c52:	f7ff ffb5 	bl	8000bc0 <sensor_io_read>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <read_id+0x24>)
 8000c5c:	701a      	strb	r2, [r3, #0]
	return ctrl;
 8000c5e:	4b02      	ldr	r3, [pc, #8]	; (8000c68 <read_id+0x24>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000464 	.word	0x20000464

08000c6c <MPU9250_init>:

void MPU9250_init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	//power up gyro
	MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);
 8000c70:	2200      	movs	r2, #0
 8000c72:	216b      	movs	r1, #107	; 0x6b
 8000c74:	2068      	movs	r0, #104	; 0x68
 8000c76:	f000 fbb3 	bl	80013e0 <MPU9250_writeReg>
	//delay(100);
	MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	216b      	movs	r1, #107	; 0x6b
 8000c7e:	2068      	movs	r0, #104	; 0x68
 8000c80:	f000 fbae 	bl	80013e0 <MPU9250_writeReg>

	MPU9250_writeReg(MPU9250_ADDRESS, CONFIG, 0x03);
 8000c84:	2203      	movs	r2, #3
 8000c86:	211a      	movs	r1, #26
 8000c88:	2068      	movs	r0, #104	; 0x68
 8000c8a:	f000 fba9 	bl	80013e0 <MPU9250_writeReg>

	MPU9250_writeReg(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);
 8000c8e:	2204      	movs	r2, #4
 8000c90:	2119      	movs	r1, #25
 8000c92:	2068      	movs	r0, #104	; 0x68
 8000c94:	f000 fba4 	bl	80013e0 <MPU9250_writeReg>
	//MPU6050_SMPLRT_DIV
	//gyro config 500

	MPU9250_writeReg(MPU9250_ADDRESS, GYRO_CONFIG, 0x08);
 8000c98:	2208      	movs	r2, #8
 8000c9a:	211b      	movs	r1, #27
 8000c9c:	2068      	movs	r0, #104	; 0x68
 8000c9e:	f000 fb9f 	bl	80013e0 <MPU9250_writeReg>
	//accel config 8g
	MPU9250_writeReg(MPU9250_ADDRESS, ACCEL_CONFIG, 0x10);
 8000ca2:	2210      	movs	r2, #16
 8000ca4:	211c      	movs	r1, #28
 8000ca6:	2068      	movs	r0, #104	; 0x68
 8000ca8:	f000 fb9a 	bl	80013e0 <MPU9250_writeReg>

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <MPU9250_calibrate>:

//void calibrateMPU9250(float * dest1, float * dest2)
void MPU9250_calibrate()
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
    uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
    uint16_t ii, packet_count, fifo_count;
    //int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};

    // reset device
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8000cb6:	2280      	movs	r2, #128	; 0x80
 8000cb8:	216b      	movs	r1, #107	; 0x6b
 8000cba:	2068      	movs	r0, #104	; 0x68
 8000cbc:	f000 fb90 	bl	80013e0 <MPU9250_writeReg>
    HAL_Delay(100);
 8000cc0:	2064      	movs	r0, #100	; 0x64
 8000cc2:	f004 f9e5 	bl	8005090 <HAL_Delay>

    // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
    // else use the internal oscillator, bits 2:0 = 001
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	216b      	movs	r1, #107	; 0x6b
 8000cca:	2068      	movs	r0, #104	; 0x68
 8000ccc:	f000 fb88 	bl	80013e0 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	216c      	movs	r1, #108	; 0x6c
 8000cd4:	2068      	movs	r0, #104	; 0x68
 8000cd6:	f000 fb83 	bl	80013e0 <MPU9250_writeReg>
    HAL_Delay(200);
 8000cda:	20c8      	movs	r0, #200	; 0xc8
 8000cdc:	f004 f9d8 	bl	8005090 <HAL_Delay>

    // Configure device for bias calculation
    MPU9250_writeReg(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2138      	movs	r1, #56	; 0x38
 8000ce4:	2068      	movs	r0, #104	; 0x68
 8000ce6:	f000 fb7b 	bl	80013e0 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 8000cea:	2200      	movs	r2, #0
 8000cec:	2123      	movs	r1, #35	; 0x23
 8000cee:	2068      	movs	r0, #104	; 0x68
 8000cf0:	f000 fb76 	bl	80013e0 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	216b      	movs	r1, #107	; 0x6b
 8000cf8:	2068      	movs	r0, #104	; 0x68
 8000cfa:	f000 fb71 	bl	80013e0 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2124      	movs	r1, #36	; 0x24
 8000d02:	2068      	movs	r0, #104	; 0x68
 8000d04:	f000 fb6c 	bl	80013e0 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8000d08:	2200      	movs	r2, #0
 8000d0a:	216a      	movs	r1, #106	; 0x6a
 8000d0c:	2068      	movs	r0, #104	; 0x68
 8000d0e:	f000 fb67 	bl	80013e0 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8000d12:	220c      	movs	r2, #12
 8000d14:	216a      	movs	r1, #106	; 0x6a
 8000d16:	2068      	movs	r0, #104	; 0x68
 8000d18:	f000 fb62 	bl	80013e0 <MPU9250_writeReg>
    HAL_Delay(15);
 8000d1c:	200f      	movs	r0, #15
 8000d1e:	f004 f9b7 	bl	8005090 <HAL_Delay>

    // Configure MPU6050 gyro and accelerometer for bias calculation
    MPU9250_writeReg(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8000d22:	2201      	movs	r2, #1
 8000d24:	211a      	movs	r1, #26
 8000d26:	2068      	movs	r0, #104	; 0x68
 8000d28:	f000 fb5a 	bl	80013e0 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2119      	movs	r1, #25
 8000d30:	2068      	movs	r0, #104	; 0x68
 8000d32:	f000 fb55 	bl	80013e0 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8000d36:	2200      	movs	r2, #0
 8000d38:	211b      	movs	r1, #27
 8000d3a:	2068      	movs	r0, #104	; 0x68
 8000d3c:	f000 fb50 	bl	80013e0 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8000d40:	2200      	movs	r2, #0
 8000d42:	211c      	movs	r1, #28
 8000d44:	2068      	movs	r0, #104	; 0x68
 8000d46:	f000 fb4b 	bl	80013e0 <MPU9250_writeReg>

    //uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
    uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8000d4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d4e:	84bb      	strh	r3, [r7, #36]	; 0x24

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
    MPU9250_writeReg(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 8000d50:	2240      	movs	r2, #64	; 0x40
 8000d52:	216a      	movs	r1, #106	; 0x6a
 8000d54:	2068      	movs	r0, #104	; 0x68
 8000d56:	f000 fb43 	bl	80013e0 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8000d5a:	2278      	movs	r2, #120	; 0x78
 8000d5c:	2123      	movs	r1, #35	; 0x23
 8000d5e:	2068      	movs	r0, #104	; 0x68
 8000d60:	f000 fb3e 	bl	80013e0 <MPU9250_writeReg>
    HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8000d64:	2028      	movs	r0, #40	; 0x28
 8000d66:	f004 f993 	bl	8005090 <HAL_Delay>

    // At end of sample accumulation, turn off FIFO sensor read
    MPU9250_writeReg(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2123      	movs	r1, #35	; 0x23
 8000d6e:	2068      	movs	r0, #104	; 0x68
 8000d70:	f000 fb36 	bl	80013e0 <MPU9250_writeReg>
    //readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
    fifo_count = MPU9250_readReg16Bit(MPU9250_ADDRESS, FIFO_COUNTH);
 8000d74:	2172      	movs	r1, #114	; 0x72
 8000d76:	2068      	movs	r0, #104	; 0x68
 8000d78:	f000 fb72 	bl	8001460 <MPU9250_readReg16Bit>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	847b      	strh	r3, [r7, #34]	; 0x22
    packet_count = fifo_count / 12;// How many sets of full gyro and accelerometer data for averaging
 8000d80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d82:	4a58      	ldr	r2, [pc, #352]	; (8000ee4 <MPU9250_calibrate+0x234>)
 8000d84:	fba2 2303 	umull	r2, r3, r2, r3
 8000d88:	08db      	lsrs	r3, r3, #3
 8000d8a:	843b      	strh	r3, [r7, #32]

    for (ii = 0; ii < packet_count; ii++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000d90:	e06f      	b.n	8000e72 <MPU9250_calibrate+0x1c2>
    {
        int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8000d92:	2300      	movs	r3, #0
 8000d94:	813b      	strh	r3, [r7, #8]
 8000d96:	2300      	movs	r3, #0
 8000d98:	817b      	strh	r3, [r7, #10]
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	81bb      	strh	r3, [r7, #12]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	803b      	strh	r3, [r7, #0]
 8000da2:	2300      	movs	r3, #0
 8000da4:	807b      	strh	r3, [r7, #2]
 8000da6:	2300      	movs	r3, #0
 8000da8:	80bb      	strh	r3, [r7, #4]
        MPU9250_readMulti(MPU9250_ADDRESS, FIFO_R_W, data, 12); // read data for averaging
 8000daa:	f107 0214 	add.w	r2, r7, #20
 8000dae:	230c      	movs	r3, #12
 8000db0:	2174      	movs	r1, #116	; 0x74
 8000db2:	2068      	movs	r0, #104	; 0x68
 8000db4:	f000 fb74 	bl	80014a0 <MPU9250_readMulti>
        accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8000db8:	7d3b      	ldrb	r3, [r7, #20]
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	b21a      	sxth	r2, r3
 8000dbe:	7d7b      	ldrb	r3, [r7, #21]
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	b21b      	sxth	r3, r3
 8000dc6:	813b      	strh	r3, [r7, #8]
        accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8000dc8:	7dbb      	ldrb	r3, [r7, #22]
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	b21a      	sxth	r2, r3
 8000dce:	7dfb      	ldrb	r3, [r7, #23]
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	817b      	strh	r3, [r7, #10]
        accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8000dd8:	7e3b      	ldrb	r3, [r7, #24]
 8000dda:	021b      	lsls	r3, r3, #8
 8000ddc:	b21a      	sxth	r2, r3
 8000dde:	7e7b      	ldrb	r3, [r7, #25]
 8000de0:	b21b      	sxth	r3, r3
 8000de2:	4313      	orrs	r3, r2
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	81bb      	strh	r3, [r7, #12]
        gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8000de8:	7ebb      	ldrb	r3, [r7, #26]
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	7efb      	ldrb	r3, [r7, #27]
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	4313      	orrs	r3, r2
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	803b      	strh	r3, [r7, #0]
        gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8000df8:	7f3b      	ldrb	r3, [r7, #28]
 8000dfa:	021b      	lsls	r3, r3, #8
 8000dfc:	b21a      	sxth	r2, r3
 8000dfe:	7f7b      	ldrb	r3, [r7, #29]
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	4313      	orrs	r3, r2
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	807b      	strh	r3, [r7, #2]
        gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8000e08:	7fbb      	ldrb	r3, [r7, #30]
 8000e0a:	021b      	lsls	r3, r3, #8
 8000e0c:	b21a      	sxth	r2, r3
 8000e0e:	7ffb      	ldrb	r3, [r7, #31]
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	4313      	orrs	r3, r2
 8000e14:	b21b      	sxth	r3, r3
 8000e16:	80bb      	strh	r3, [r7, #4]

        accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8000e18:	4b33      	ldr	r3, [pc, #204]	; (8000ee8 <MPU9250_calibrate+0x238>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000e20:	4413      	add	r3, r2
 8000e22:	4a31      	ldr	r2, [pc, #196]	; (8000ee8 <MPU9250_calibrate+0x238>)
 8000e24:	6013      	str	r3, [r2, #0]
        accel_bias[1] += (int32_t) accel_temp[1];
 8000e26:	4b30      	ldr	r3, [pc, #192]	; (8000ee8 <MPU9250_calibrate+0x238>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a2d      	ldr	r2, [pc, #180]	; (8000ee8 <MPU9250_calibrate+0x238>)
 8000e32:	6053      	str	r3, [r2, #4]
        accel_bias[2] += (int32_t) accel_temp[2];
 8000e34:	4b2c      	ldr	r3, [pc, #176]	; (8000ee8 <MPU9250_calibrate+0x238>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a2a      	ldr	r2, [pc, #168]	; (8000ee8 <MPU9250_calibrate+0x238>)
 8000e40:	6093      	str	r3, [r2, #8]
        gyro_bias[0]  += (int32_t) gyro_temp[0];
 8000e42:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <MPU9250_calibrate+0x23c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a27      	ldr	r2, [pc, #156]	; (8000eec <MPU9250_calibrate+0x23c>)
 8000e4e:	6013      	str	r3, [r2, #0]
        gyro_bias[1]  += (int32_t) gyro_temp[1];
 8000e50:	4b26      	ldr	r3, [pc, #152]	; (8000eec <MPU9250_calibrate+0x23c>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a24      	ldr	r2, [pc, #144]	; (8000eec <MPU9250_calibrate+0x23c>)
 8000e5c:	6053      	str	r3, [r2, #4]
        gyro_bias[2]  += (int32_t) gyro_temp[2];
 8000e5e:	4b23      	ldr	r3, [pc, #140]	; (8000eec <MPU9250_calibrate+0x23c>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a20      	ldr	r2, [pc, #128]	; (8000eec <MPU9250_calibrate+0x23c>)
 8000e6a:	6093      	str	r3, [r2, #8]
    for (ii = 0; ii < packet_count; ii++)
 8000e6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e6e:	3301      	adds	r3, #1
 8000e70:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000e72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e74:	8c3b      	ldrh	r3, [r7, #32]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d38b      	bcc.n	8000d92 <MPU9250_calibrate+0xe2>
    }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <MPU9250_calibrate+0x238>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	8c3b      	ldrh	r3, [r7, #32]
 8000e80:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e84:	4a18      	ldr	r2, [pc, #96]	; (8000ee8 <MPU9250_calibrate+0x238>)
 8000e86:	6013      	str	r3, [r2, #0]
    accel_bias[1] /= (int32_t) packet_count;
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <MPU9250_calibrate+0x238>)
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	8c3b      	ldrh	r3, [r7, #32]
 8000e8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e92:	4a15      	ldr	r2, [pc, #84]	; (8000ee8 <MPU9250_calibrate+0x238>)
 8000e94:	6053      	str	r3, [r2, #4]
    accel_bias[2] /= (int32_t) packet_count;
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MPU9250_calibrate+0x238>)
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	8c3b      	ldrh	r3, [r7, #32]
 8000e9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ea0:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <MPU9250_calibrate+0x238>)
 8000ea2:	6093      	str	r3, [r2, #8]
    gyro_bias[0]  /= (int32_t) packet_count;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MPU9250_calibrate+0x23c>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	8c3b      	ldrh	r3, [r7, #32]
 8000eaa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000eae:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <MPU9250_calibrate+0x23c>)
 8000eb0:	6013      	str	r3, [r2, #0]
    gyro_bias[1]  /= (int32_t) packet_count;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MPU9250_calibrate+0x23c>)
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	8c3b      	ldrh	r3, [r7, #32]
 8000eb8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ebc:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <MPU9250_calibrate+0x23c>)
 8000ebe:	6053      	str	r3, [r2, #4]
    gyro_bias[2]  /= (int32_t) packet_count;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <MPU9250_calibrate+0x23c>)
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	8c3b      	ldrh	r3, [r7, #32]
 8000ec6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <MPU9250_calibrate+0x23c>)
 8000ecc:	6093      	str	r3, [r2, #8]

    if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MPU9250_calibrate+0x238>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	dd0c      	ble.n	8000ef0 <MPU9250_calibrate+0x240>
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <MPU9250_calibrate+0x238>)
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	4a02      	ldr	r2, [pc, #8]	; (8000ee8 <MPU9250_calibrate+0x238>)
 8000ee0:	6093      	str	r3, [r2, #8]
 8000ee2:	e00b      	b.n	8000efc <MPU9250_calibrate+0x24c>
 8000ee4:	aaaaaaab 	.word	0xaaaaaaab
 8000ee8:	20000494 	.word	0x20000494
 8000eec:	20000488 	.word	0x20000488
    else {accel_bias[2] += (int32_t) accelsensitivity;}
 8000ef0:	4b78      	ldr	r3, [pc, #480]	; (80010d4 <MPU9250_calibrate+0x424>)
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a76      	ldr	r2, [pc, #472]	; (80010d4 <MPU9250_calibrate+0x424>)
 8000efa:	6093      	str	r3, [r2, #8]

    // Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
    data[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8000efc:	4b76      	ldr	r3, [pc, #472]	; (80010d8 <MPU9250_calibrate+0x428>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	425b      	negs	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	da00      	bge.n	8000f08 <MPU9250_calibrate+0x258>
 8000f06:	3303      	adds	r3, #3
 8000f08:	109b      	asrs	r3, r3, #2
 8000f0a:	121b      	asrs	r3, r3, #8
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	753b      	strb	r3, [r7, #20]
    data[1] = (-gyro_bias[0] / 4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8000f10:	4b71      	ldr	r3, [pc, #452]	; (80010d8 <MPU9250_calibrate+0x428>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	425b      	negs	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	da00      	bge.n	8000f1c <MPU9250_calibrate+0x26c>
 8000f1a:	3303      	adds	r3, #3
 8000f1c:	109b      	asrs	r3, r3, #2
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	757b      	strb	r3, [r7, #21]
    data[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8000f22:	4b6d      	ldr	r3, [pc, #436]	; (80010d8 <MPU9250_calibrate+0x428>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	425b      	negs	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	da00      	bge.n	8000f2e <MPU9250_calibrate+0x27e>
 8000f2c:	3303      	adds	r3, #3
 8000f2e:	109b      	asrs	r3, r3, #2
 8000f30:	121b      	asrs	r3, r3, #8
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	75bb      	strb	r3, [r7, #22]
    data[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8000f36:	4b68      	ldr	r3, [pc, #416]	; (80010d8 <MPU9250_calibrate+0x428>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	425b      	negs	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	da00      	bge.n	8000f42 <MPU9250_calibrate+0x292>
 8000f40:	3303      	adds	r3, #3
 8000f42:	109b      	asrs	r3, r3, #2
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	75fb      	strb	r3, [r7, #23]
    data[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8000f48:	4b63      	ldr	r3, [pc, #396]	; (80010d8 <MPU9250_calibrate+0x428>)
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	425b      	negs	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	da00      	bge.n	8000f54 <MPU9250_calibrate+0x2a4>
 8000f52:	3303      	adds	r3, #3
 8000f54:	109b      	asrs	r3, r3, #2
 8000f56:	121b      	asrs	r3, r3, #8
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	763b      	strb	r3, [r7, #24]
    data[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8000f5c:	4b5e      	ldr	r3, [pc, #376]	; (80010d8 <MPU9250_calibrate+0x428>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	425b      	negs	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	da00      	bge.n	8000f68 <MPU9250_calibrate+0x2b8>
 8000f66:	3303      	adds	r3, #3
 8000f68:	109b      	asrs	r3, r3, #2
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	767b      	strb	r3, [r7, #25]

    // Push gyro biases to hardware registers
    MPU9250_writeReg(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 8000f6e:	7d3b      	ldrb	r3, [r7, #20]
 8000f70:	461a      	mov	r2, r3
 8000f72:	2113      	movs	r1, #19
 8000f74:	2068      	movs	r0, #104	; 0x68
 8000f76:	f000 fa33 	bl	80013e0 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 8000f7a:	7d7b      	ldrb	r3, [r7, #21]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	2114      	movs	r1, #20
 8000f80:	2068      	movs	r0, #104	; 0x68
 8000f82:	f000 fa2d 	bl	80013e0 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 8000f86:	7dbb      	ldrb	r3, [r7, #22]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	2115      	movs	r1, #21
 8000f8c:	2068      	movs	r0, #104	; 0x68
 8000f8e:	f000 fa27 	bl	80013e0 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
 8000f94:	461a      	mov	r2, r3
 8000f96:	2116      	movs	r1, #22
 8000f98:	2068      	movs	r0, #104	; 0x68
 8000f9a:	f000 fa21 	bl	80013e0 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 8000f9e:	7e3b      	ldrb	r3, [r7, #24]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	2117      	movs	r1, #23
 8000fa4:	2068      	movs	r0, #104	; 0x68
 8000fa6:	f000 fa1b 	bl	80013e0 <MPU9250_writeReg>
    MPU9250_writeReg(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 8000faa:	7e7b      	ldrb	r3, [r7, #25]
 8000fac:	461a      	mov	r2, r3
 8000fae:	2118      	movs	r1, #24
 8000fb0:	2068      	movs	r0, #104	; 0x68
 8000fb2:	f000 fa15 	bl	80013e0 <MPU9250_writeReg>
    // the accelerometer biases calculated above must be divided by 8.


     //int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
     //readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
     data[0] = MPU9250_readReg(MPU9250_ADDRESS, XA_OFFSET_H);
 8000fb6:	2177      	movs	r1, #119	; 0x77
 8000fb8:	2068      	movs	r0, #104	; 0x68
 8000fba:	f000 fa31 	bl	8001420 <MPU9250_readReg>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	753b      	strb	r3, [r7, #20]
     data[1] = MPU9250_readReg(MPU9250_ADDRESS, XA_OFFSET_L);
 8000fc2:	2178      	movs	r1, #120	; 0x78
 8000fc4:	2068      	movs	r0, #104	; 0x68
 8000fc6:	f000 fa2b 	bl	8001420 <MPU9250_readReg>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	757b      	strb	r3, [r7, #21]
     data[2] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_H);
 8000fce:	217a      	movs	r1, #122	; 0x7a
 8000fd0:	2068      	movs	r0, #104	; 0x68
 8000fd2:	f000 fa25 	bl	8001420 <MPU9250_readReg>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	75bb      	strb	r3, [r7, #22]
     data[3] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_L);
 8000fda:	217b      	movs	r1, #123	; 0x7b
 8000fdc:	2068      	movs	r0, #104	; 0x68
 8000fde:	f000 fa1f 	bl	8001420 <MPU9250_readReg>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	75fb      	strb	r3, [r7, #23]
     data[4] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_H);
 8000fe6:	217d      	movs	r1, #125	; 0x7d
 8000fe8:	2068      	movs	r0, #104	; 0x68
 8000fea:	f000 fa19 	bl	8001420 <MPU9250_readReg>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	763b      	strb	r3, [r7, #24]
     data[5] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_L);
 8000ff2:	217e      	movs	r1, #126	; 0x7e
 8000ff4:	2068      	movs	r0, #104	; 0x68
 8000ff6:	f000 fa13 	bl	8001420 <MPU9250_readReg>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	767b      	strb	r3, [r7, #25]
     accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]  );
 8000ffe:	7d3b      	ldrb	r3, [r7, #20]
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	7d7a      	ldrb	r2, [r7, #21]
 8001004:	4313      	orrs	r3, r2
 8001006:	4a35      	ldr	r2, [pc, #212]	; (80010dc <MPU9250_calibrate+0x42c>)
 8001008:	6013      	str	r3, [r2, #0]
     accel_bias_reg[1] = (int32_t) (((int16_t)data[2] << 8) | data[3]  );
 800100a:	7dbb      	ldrb	r3, [r7, #22]
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	7dfa      	ldrb	r2, [r7, #23]
 8001010:	4313      	orrs	r3, r2
 8001012:	4a32      	ldr	r2, [pc, #200]	; (80010dc <MPU9250_calibrate+0x42c>)
 8001014:	6053      	str	r3, [r2, #4]
     accel_bias_reg[2] = (int32_t) (((int16_t)data[4] << 8) | data[5]  );
 8001016:	7e3b      	ldrb	r3, [r7, #24]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	7e7a      	ldrb	r2, [r7, #25]
 800101c:	4313      	orrs	r3, r2
 800101e:	4a2f      	ldr	r2, [pc, #188]	; (80010dc <MPU9250_calibrate+0x42c>)
 8001020:	6093      	str	r3, [r2, #8]
//     accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
//     readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
//     accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);

     //uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
     uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8001022:	2300      	movs	r3, #0
 8001024:	743b      	strb	r3, [r7, #16]
 8001026:	2300      	movs	r3, #0
 8001028:	747b      	strb	r3, [r7, #17]
 800102a:	2300      	movs	r3, #0
 800102c:	74bb      	strb	r3, [r7, #18]
    // for(ii = 0; ii < 3; ii++) {
    //     if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
    // }

     // Construct total accelerometer bias, including calculated average accelerometer bias from above
     accel_bias_reg[0] -= (accel_bias[0] / 8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 800102e:	4b2b      	ldr	r3, [pc, #172]	; (80010dc <MPU9250_calibrate+0x42c>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <MPU9250_calibrate+0x424>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	da00      	bge.n	800103c <MPU9250_calibrate+0x38c>
 800103a:	3307      	adds	r3, #7
 800103c:	10db      	asrs	r3, r3, #3
 800103e:	425b      	negs	r3, r3
 8001040:	4413      	add	r3, r2
 8001042:	4a26      	ldr	r2, [pc, #152]	; (80010dc <MPU9250_calibrate+0x42c>)
 8001044:	6013      	str	r3, [r2, #0]
     accel_bias_reg[1] -= (accel_bias[1] / 8);
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <MPU9250_calibrate+0x42c>)
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <MPU9250_calibrate+0x424>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	da00      	bge.n	8001054 <MPU9250_calibrate+0x3a4>
 8001052:	3307      	adds	r3, #7
 8001054:	10db      	asrs	r3, r3, #3
 8001056:	425b      	negs	r3, r3
 8001058:	4413      	add	r3, r2
 800105a:	4a20      	ldr	r2, [pc, #128]	; (80010dc <MPU9250_calibrate+0x42c>)
 800105c:	6053      	str	r3, [r2, #4]
     accel_bias_reg[2] -= (accel_bias[2] / 8);
 800105e:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <MPU9250_calibrate+0x42c>)
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MPU9250_calibrate+0x424>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	da00      	bge.n	800106c <MPU9250_calibrate+0x3bc>
 800106a:	3307      	adds	r3, #7
 800106c:	10db      	asrs	r3, r3, #3
 800106e:	425b      	negs	r3, r3
 8001070:	4413      	add	r3, r2
 8001072:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <MPU9250_calibrate+0x42c>)
 8001074:	6093      	str	r3, [r2, #8]

     data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <MPU9250_calibrate+0x42c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	121b      	asrs	r3, r3, #8
 800107c:	b2db      	uxtb	r3, r3
 800107e:	753b      	strb	r3, [r7, #20]
     data[1] = (accel_bias_reg[0])      & 0xFF;
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <MPU9250_calibrate+0x42c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	757b      	strb	r3, [r7, #21]
     data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001088:	7d7a      	ldrb	r2, [r7, #21]
 800108a:	7c3b      	ldrb	r3, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	b2db      	uxtb	r3, r3
 8001090:	757b      	strb	r3, [r7, #21]
     data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MPU9250_calibrate+0x42c>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	121b      	asrs	r3, r3, #8
 8001098:	b2db      	uxtb	r3, r3
 800109a:	75bb      	strb	r3, [r7, #22]
     data[3] = (accel_bias_reg[1])      & 0xFF;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MPU9250_calibrate+0x42c>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	75fb      	strb	r3, [r7, #23]
     data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80010a4:	7dfa      	ldrb	r2, [r7, #23]
 80010a6:	7c7b      	ldrb	r3, [r7, #17]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	75fb      	strb	r3, [r7, #23]
     data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <MPU9250_calibrate+0x42c>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	121b      	asrs	r3, r3, #8
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	763b      	strb	r3, [r7, #24]
     data[5] = (accel_bias_reg[2])      & 0xFF;
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <MPU9250_calibrate+0x42c>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	767b      	strb	r3, [r7, #25]
     data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 80010c0:	7e7a      	ldrb	r2, [r7, #25]
 80010c2:	7cbb      	ldrb	r3, [r7, #18]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	767b      	strb	r3, [r7, #25]
//     MPU9250_writeReg(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
//     MPU9250_writeReg(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
//     MPU9250_writeReg(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
//     MPU9250_writeReg(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);

}
 80010ca:	bf00      	nop
 80010cc:	3728      	adds	r7, #40	; 0x28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000494 	.word	0x20000494
 80010d8:	20000488 	.word	0x20000488
 80010dc:	200004a0 	.word	0x200004a0

080010e0 <MPU9250_getAllData>:

void MPU9250_getAllData(int16_t *Data)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	uint8_t buffer[12];
	buffer[0] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_XOUT_H);
 80010e8:	2143      	movs	r1, #67	; 0x43
 80010ea:	2068      	movs	r0, #104	; 0x68
 80010ec:	f000 f998 	bl	8001420 <MPU9250_readReg>
 80010f0:	4603      	mov	r3, r0
 80010f2:	733b      	strb	r3, [r7, #12]
	buffer[1] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_XOUT_L);
 80010f4:	2144      	movs	r1, #68	; 0x44
 80010f6:	2068      	movs	r0, #104	; 0x68
 80010f8:	f000 f992 	bl	8001420 <MPU9250_readReg>
 80010fc:	4603      	mov	r3, r0
 80010fe:	737b      	strb	r3, [r7, #13]
	buffer[2] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_YOUT_H);
 8001100:	2145      	movs	r1, #69	; 0x45
 8001102:	2068      	movs	r0, #104	; 0x68
 8001104:	f000 f98c 	bl	8001420 <MPU9250_readReg>
 8001108:	4603      	mov	r3, r0
 800110a:	73bb      	strb	r3, [r7, #14]
	buffer[3] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_YOUT_L);
 800110c:	2146      	movs	r1, #70	; 0x46
 800110e:	2068      	movs	r0, #104	; 0x68
 8001110:	f000 f986 	bl	8001420 <MPU9250_readReg>
 8001114:	4603      	mov	r3, r0
 8001116:	73fb      	strb	r3, [r7, #15]
	buffer[4] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_ZOUT_H);
 8001118:	2147      	movs	r1, #71	; 0x47
 800111a:	2068      	movs	r0, #104	; 0x68
 800111c:	f000 f980 	bl	8001420 <MPU9250_readReg>
 8001120:	4603      	mov	r3, r0
 8001122:	743b      	strb	r3, [r7, #16]
	buffer[5] = MPU9250_readReg(MPU9250_ADDRESS, GYRO_ZOUT_L);
 8001124:	2148      	movs	r1, #72	; 0x48
 8001126:	2068      	movs	r0, #104	; 0x68
 8001128:	f000 f97a 	bl	8001420 <MPU9250_readReg>
 800112c:	4603      	mov	r3, r0
 800112e:	747b      	strb	r3, [r7, #17]
	buffer[6] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_XOUT_H);
 8001130:	213b      	movs	r1, #59	; 0x3b
 8001132:	2068      	movs	r0, #104	; 0x68
 8001134:	f000 f974 	bl	8001420 <MPU9250_readReg>
 8001138:	4603      	mov	r3, r0
 800113a:	74bb      	strb	r3, [r7, #18]
	buffer[7] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_XOUT_L);
 800113c:	213c      	movs	r1, #60	; 0x3c
 800113e:	2068      	movs	r0, #104	; 0x68
 8001140:	f000 f96e 	bl	8001420 <MPU9250_readReg>
 8001144:	4603      	mov	r3, r0
 8001146:	74fb      	strb	r3, [r7, #19]
	buffer[8] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_YOUT_H);
 8001148:	213d      	movs	r1, #61	; 0x3d
 800114a:	2068      	movs	r0, #104	; 0x68
 800114c:	f000 f968 	bl	8001420 <MPU9250_readReg>
 8001150:	4603      	mov	r3, r0
 8001152:	753b      	strb	r3, [r7, #20]
	buffer[9] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_YOUT_L);
 8001154:	213e      	movs	r1, #62	; 0x3e
 8001156:	2068      	movs	r0, #104	; 0x68
 8001158:	f000 f962 	bl	8001420 <MPU9250_readReg>
 800115c:	4603      	mov	r3, r0
 800115e:	757b      	strb	r3, [r7, #21]
	buffer[10] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_ZOUT_H);
 8001160:	213f      	movs	r1, #63	; 0x3f
 8001162:	2068      	movs	r0, #104	; 0x68
 8001164:	f000 f95c 	bl	8001420 <MPU9250_readReg>
 8001168:	4603      	mov	r3, r0
 800116a:	75bb      	strb	r3, [r7, #22]
	buffer[11] = MPU9250_readReg(MPU9250_ADDRESS, ACCEL_ZOUT_L);
 800116c:	2140      	movs	r1, #64	; 0x40
 800116e:	2068      	movs	r0, #104	; 0x68
 8001170:	f000 f956 	bl	8001420 <MPU9250_readReg>
 8001174:	4603      	mov	r3, r0
 8001176:	75fb      	strb	r3, [r7, #23]
	gyroX=(((int16_t)((uint16_t)buffer[0] << 8) + buffer[1]))/65.5f*3.14f/180.0f;
 8001178:	7b3b      	ldrb	r3, [r7, #12]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	b21b      	sxth	r3, r3
 800117e:	461a      	mov	r2, r3
 8001180:	7b7b      	ldrb	r3, [r7, #13]
 8001182:	4413      	add	r3, r2
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800118c:	eddf 6a53 	vldr	s13, [pc, #332]	; 80012dc <MPU9250_getAllData+0x1fc>
 8001190:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001194:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80012e0 <MPU9250_getAllData+0x200>
 8001198:	ee27 7a87 	vmul.f32	s14, s15, s14
 800119c:	eddf 6a51 	vldr	s13, [pc, #324]	; 80012e4 <MPU9250_getAllData+0x204>
 80011a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a4:	4b50      	ldr	r3, [pc, #320]	; (80012e8 <MPU9250_getAllData+0x208>)
 80011a6:	edc3 7a00 	vstr	s15, [r3]
	gyroY=(((int16_t)((uint16_t)buffer[2] << 8) + buffer[3]))/65.5f*3.14f/180.0f;
 80011aa:	7bbb      	ldrb	r3, [r7, #14]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	4413      	add	r3, r2
 80011b6:	ee07 3a90 	vmov	s15, r3
 80011ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011be:	eddf 6a47 	vldr	s13, [pc, #284]	; 80012dc <MPU9250_getAllData+0x1fc>
 80011c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c6:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80012e0 <MPU9250_getAllData+0x200>
 80011ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011ce:	eddf 6a45 	vldr	s13, [pc, #276]	; 80012e4 <MPU9250_getAllData+0x204>
 80011d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d6:	4b45      	ldr	r3, [pc, #276]	; (80012ec <MPU9250_getAllData+0x20c>)
 80011d8:	edc3 7a00 	vstr	s15, [r3]
	gyroZ=(((int16_t)((uint16_t)buffer[4] << 8) + buffer[5]))/65.5f*3.14f/180.0f;
 80011dc:	7c3b      	ldrb	r3, [r7, #16]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	7c7b      	ldrb	r3, [r7, #17]
 80011e6:	4413      	add	r3, r2
 80011e8:	ee07 3a90 	vmov	s15, r3
 80011ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80012dc <MPU9250_getAllData+0x1fc>
 80011f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011f8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80012e0 <MPU9250_getAllData+0x200>
 80011fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001200:	eddf 6a38 	vldr	s13, [pc, #224]	; 80012e4 <MPU9250_getAllData+0x204>
 8001204:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001208:	4b39      	ldr	r3, [pc, #228]	; (80012f0 <MPU9250_getAllData+0x210>)
 800120a:	edc3 7a00 	vstr	s15, [r3]
//	accelX=((((int16_t)((uint16_t)buffer[6] << 8) + buffer[7])))/4096.0f*9.8f;
//	accelY=((((int16_t)((uint16_t)buffer[8] << 8) + buffer[9])))/4096.0f*9.8f;
	accelX=((((int16_t)((uint16_t)buffer[6] << 8) + buffer[7])))/4096.0f*9.8f;
 800120e:	7cbb      	ldrb	r3, [r7, #18]
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	b21b      	sxth	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	7cfb      	ldrb	r3, [r7, #19]
 8001218:	4413      	add	r3, r2
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001222:	eddf 6a34 	vldr	s13, [pc, #208]	; 80012f4 <MPU9250_getAllData+0x214>
 8001226:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800122a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80012f8 <MPU9250_getAllData+0x218>
 800122e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001232:	4b32      	ldr	r3, [pc, #200]	; (80012fc <MPU9250_getAllData+0x21c>)
 8001234:	edc3 7a00 	vstr	s15, [r3]
	accelY=((((int16_t)((uint16_t)buffer[8] << 8) + buffer[9])))/4096.0f*9.8f;
 8001238:	7d3b      	ldrb	r3, [r7, #20]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21b      	sxth	r3, r3
 800123e:	461a      	mov	r2, r3
 8001240:	7d7b      	ldrb	r3, [r7, #21]
 8001242:	4413      	add	r3, r2
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800124c:	eddf 6a29 	vldr	s13, [pc, #164]	; 80012f4 <MPU9250_getAllData+0x214>
 8001250:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001254:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80012f8 <MPU9250_getAllData+0x218>
 8001258:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125c:	4b28      	ldr	r3, [pc, #160]	; (8001300 <MPU9250_getAllData+0x220>)
 800125e:	edc3 7a00 	vstr	s15, [r3]
	accelZ=(((int16_t)((uint16_t)buffer[10] << 8) + buffer[11]))/4096.0f*9.8f;
 8001262:	7dbb      	ldrb	r3, [r7, #22]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21b      	sxth	r3, r3
 8001268:	461a      	mov	r2, r3
 800126a:	7dfb      	ldrb	r3, [r7, #23]
 800126c:	4413      	add	r3, r2
 800126e:	ee07 3a90 	vmov	s15, r3
 8001272:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001276:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80012f4 <MPU9250_getAllData+0x214>
 800127a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800127e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80012f8 <MPU9250_getAllData+0x218>
 8001282:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <MPU9250_getAllData+0x224>)
 8001288:	edc3 7a00 	vstr	s15, [r3]
	gyroX_filtered = filter(gyroX);
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <MPU9250_getAllData+0x208>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	eeb0 0a67 	vmov.f32	s0, s15
 8001296:	f000 f83d 	bl	8001314 <filter>
 800129a:	eef0 7a40 	vmov.f32	s15, s0
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <MPU9250_getAllData+0x228>)
 80012a0:	edc3 7a00 	vstr	s15, [r3]
	gyroY_filtered = filter(gyroY);
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MPU9250_getAllData+0x20c>)
 80012a6:	edd3 7a00 	vldr	s15, [r3]
 80012aa:	eeb0 0a67 	vmov.f32	s0, s15
 80012ae:	f000 f831 	bl	8001314 <filter>
 80012b2:	eef0 7a40 	vmov.f32	s15, s0
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <MPU9250_getAllData+0x22c>)
 80012b8:	edc3 7a00 	vstr	s15, [r3]
	gyroZ_filtered = filter(gyroZ);
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MPU9250_getAllData+0x210>)
 80012be:	edd3 7a00 	vldr	s15, [r3]
 80012c2:	eeb0 0a67 	vmov.f32	s0, s15
 80012c6:	f000 f825 	bl	8001314 <filter>
 80012ca:	eef0 7a40 	vmov.f32	s15, s0
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <MPU9250_getAllData+0x230>)
 80012d0:	edc3 7a00 	vstr	s15, [r3]
//	accelX=((((int16_t)((uint16_t)buffer[6] << 8) + buffer[7])));
//	accelY=((((int16_t)((uint16_t)buffer[8] << 8) + buffer[9])));
//	accelZ=((((int16_t)((uint16_t)buffer[10] << 8) + buffer[11])));
	//accelX_offset=(((int16_t)((uint16_t)buffer[6] << 8) + buffer[7]))/4096.0f*9.8f;
}
 80012d4:	bf00      	nop
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	42830000 	.word	0x42830000
 80012e0:	4048f5c3 	.word	0x4048f5c3
 80012e4:	43340000 	.word	0x43340000
 80012e8:	20004cb4 	.word	0x20004cb4
 80012ec:	2000515c 	.word	0x2000515c
 80012f0:	20004cd0 	.word	0x20004cd0
 80012f4:	45800000 	.word	0x45800000
 80012f8:	411ccccd 	.word	0x411ccccd
 80012fc:	20004c30 	.word	0x20004c30
 8001300:	20004c28 	.word	0x20004c28
 8001304:	20005114 	.word	0x20005114
 8001308:	20005118 	.word	0x20005118
 800130c:	200050f0 	.word	0x200050f0
 8001310:	20005160 	.word	0x20005160

08001314 <filter>:

float filter(float val) { //функция фильтрации
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	ed87 0a01 	vstr	s0, [r7, #4]
	Pc = P + varProcess;
 800131e:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <filter+0xac>)
 8001320:	ed93 7a00 	vldr	s14, [r3]
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <filter+0xb0>)
 8001326:	edd3 7a00 	vldr	s15, [r3]
 800132a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <filter+0xb4>)
 8001330:	edc3 7a00 	vstr	s15, [r3]
	G = Pc/(Pc + varVolt);
 8001334:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <filter+0xb4>)
 8001336:	edd3 6a00 	vldr	s13, [r3]
 800133a:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <filter+0xb4>)
 800133c:	ed93 7a00 	vldr	s14, [r3]
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <filter+0xb8>)
 8001342:	edd3 7a00 	vldr	s15, [r3]
 8001346:	ee37 7a27 	vadd.f32	s14, s14, s15
 800134a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <filter+0xbc>)
 8001350:	edc3 7a00 	vstr	s15, [r3]
	P = (1-G)*Pc;
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <filter+0xbc>)
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800135e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001362:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <filter+0xb4>)
 8001364:	edd3 7a00 	vldr	s15, [r3]
 8001368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <filter+0xac>)
 800136e:	edc3 7a00 	vstr	s15, [r3]
	Xp = Xe;
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <filter+0xc0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a18      	ldr	r2, [pc, #96]	; (80013d8 <filter+0xc4>)
 8001378:	6013      	str	r3, [r2, #0]
	Zp = Xp;
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <filter+0xc4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a17      	ldr	r2, [pc, #92]	; (80013dc <filter+0xc8>)
 8001380:	6013      	str	r3, [r2, #0]
	Xe = G*(val-Zp)+Xp; // "фильтрованное" значение
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <filter+0xc8>)
 8001384:	edd3 7a00 	vldr	s15, [r3]
 8001388:	ed97 7a01 	vldr	s14, [r7, #4]
 800138c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <filter+0xbc>)
 8001392:	edd3 7a00 	vldr	s15, [r3]
 8001396:	ee27 7a27 	vmul.f32	s14, s14, s15
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <filter+0xc4>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <filter+0xc0>)
 80013a6:	edc3 7a00 	vstr	s15, [r3]
return(Xe);
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <filter+0xc0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	ee07 3a90 	vmov	s15, r3
}
 80013b2:	eeb0 0a67 	vmov.f32	s0, s15
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20000004 	.word	0x20000004
 80013c4:	20000000 	.word	0x20000000
 80013c8:	200004b0 	.word	0x200004b0
 80013cc:	200004ac 	.word	0x200004ac
 80013d0:	200004b4 	.word	0x200004b4
 80013d4:	200004c0 	.word	0x200004c0
 80013d8:	200004b8 	.word	0x200004b8
 80013dc:	200004bc 	.word	0x200004bc

080013e0 <MPU9250_writeReg>:

void MPU9250_writeReg(uint16_t Addr, uint8_t reg, uint8_t value)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
 80013ea:	460b      	mov	r3, r1
 80013ec:	717b      	strb	r3, [r7, #5]
 80013ee:	4613      	mov	r3, r2
 80013f0:	713b      	strb	r3, [r7, #4]
	uint8_t buf[2];
	buf[0] = reg;
 80013f2:	797b      	ldrb	r3, [r7, #5]
 80013f4:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 80013f6:	793b      	ldrb	r3, [r7, #4]
 80013f8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 2, 1000);
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	b299      	uxth	r1, r3
 8001400:	f107 020c 	add.w	r2, r7, #12
 8001404:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	2302      	movs	r3, #2
 800140c:	4803      	ldr	r0, [pc, #12]	; (800141c <MPU9250_writeReg+0x3c>)
 800140e:	f005 f8bd 	bl	800658c <HAL_I2C_Master_Transmit>
}
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20004c5c 	.word	0x20004c5c

08001420 <MPU9250_readReg>:
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(Addr << 1), buf, 5, 1000);
}

// Read an 8-bit register
uint8_t MPU9250_readReg(uint16_t Addr, uint8_t reg)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af04      	add	r7, sp, #16
 8001426:	4603      	mov	r3, r0
 8001428:	460a      	mov	r2, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	717b      	strb	r3, [r7, #5]
  uint8_t value;
  HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, &value, 1, 1000);
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	b299      	uxth	r1, r3
 8001436:	797b      	ldrb	r3, [r7, #5]
 8001438:	b29a      	uxth	r2, r3
 800143a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143e:	9302      	str	r3, [sp, #8]
 8001440:	2301      	movs	r3, #1
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	f107 030f 	add.w	r3, r7, #15
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2301      	movs	r3, #1
 800144c:	4803      	ldr	r0, [pc, #12]	; (800145c <MPU9250_readReg+0x3c>)
 800144e:	f005 f99b 	bl	8006788 <HAL_I2C_Mem_Read>
  return value;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20004c5c 	.word	0x20004c5c

08001460 <MPU9250_readReg16Bit>:

// Read a 16-bit register
uint16_t MPU9250_readReg16Bit(uint16_t Addr, uint8_t reg)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	460a      	mov	r2, r1
 800146a:	80fb      	strh	r3, [r7, #6]
 800146c:	4613      	mov	r3, r2
 800146e:	717b      	strb	r3, [r7, #5]
  uint16_t value;
  uint8_t buff[2];
  MPU9250_readMulti(Addr, reg, buff, 2);
 8001470:	f107 0208 	add.w	r2, r7, #8
 8001474:	7979      	ldrb	r1, [r7, #5]
 8001476:	88f8      	ldrh	r0, [r7, #6]
 8001478:	2302      	movs	r3, #2
 800147a:	f000 f811 	bl	80014a0 <MPU9250_readMulti>
  uint16_t tmp;
  tmp = buff[0];
 800147e:	7a3b      	ldrb	r3, [r7, #8]
 8001480:	81fb      	strh	r3, [r7, #14]
  tmp <<= 8;
 8001482:	89fb      	ldrh	r3, [r7, #14]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	81fb      	strh	r3, [r7, #14]
  tmp |= buff[1];
 8001488:	7a7b      	ldrb	r3, [r7, #9]
 800148a:	b29a      	uxth	r2, r3
 800148c:	89fb      	ldrh	r3, [r7, #14]
 800148e:	4313      	orrs	r3, r2
 8001490:	81fb      	strh	r3, [r7, #14]
  value = tmp;
 8001492:	89fb      	ldrh	r3, [r7, #14]
 8001494:	81bb      	strh	r3, [r7, #12]
  return value;
 8001496:	89bb      	ldrh	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <MPU9250_readMulti>:
}

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void MPU9250_readMulti(uint16_t Addr, uint8_t reg, uint8_t * dst, uint8_t count)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af04      	add	r7, sp, #16
 80014a6:	603a      	str	r2, [r7, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4603      	mov	r3, r0
 80014ac:	80fb      	strh	r3, [r7, #6]
 80014ae:	460b      	mov	r3, r1
 80014b0:	717b      	strb	r3, [r7, #5]
 80014b2:	4613      	mov	r3, r2
 80014b4:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, (uint16_t)(Addr << 1), reg, 1, dst, count, 1000);
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	b299      	uxth	r1, r3
 80014bc:	797b      	ldrb	r3, [r7, #5]
 80014be:	b298      	uxth	r0, r3
 80014c0:	793b      	ldrb	r3, [r7, #4]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014c8:	9202      	str	r2, [sp, #8]
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2301      	movs	r3, #1
 80014d2:	4602      	mov	r2, r0
 80014d4:	4803      	ldr	r0, [pc, #12]	; (80014e4 <MPU9250_readMulti+0x44>)
 80014d6:	f005 f957 	bl	8006788 <HAL_I2C_Mem_Read>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20004c5c 	.word	0x20004c5c

080014e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <HAL_MspInit+0x58>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <HAL_MspInit+0x58>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_MspInit+0x58>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <HAL_MspInit+0x58>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <HAL_MspInit+0x58>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_MspInit+0x58>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	2005      	movs	r0, #5
 800152c:	f004 fce6 	bl	8005efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001530:	2005      	movs	r0, #5
 8001532:	f004 fcff 	bl	8005f34 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800

08001544 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <HAL_CAN_MspInit+0xa4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d13c      	bne.n	80015e0 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_CAN_MspInit+0xa8>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a1f      	ldr	r2, [pc, #124]	; (80015ec <HAL_CAN_MspInit+0xa8>)
 8001570:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_CAN_MspInit+0xa8>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_CAN_MspInit+0xa8>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <HAL_CAN_MspInit+0xa8>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <HAL_CAN_MspInit+0xa8>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800159e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80015b0:	2309      	movs	r3, #9
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	480d      	ldr	r0, [pc, #52]	; (80015f0 <HAL_CAN_MspInit+0xac>)
 80015bc:	f004 fcf8 	bl	8005fb0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	2014      	movs	r0, #20
 80015c6:	f004 fc99 	bl	8005efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80015ca:	2014      	movs	r0, #20
 80015cc:	f004 fcb2 	bl	8005f34 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	2015      	movs	r0, #21
 80015d6:	f004 fc91 	bl	8005efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80015da:	2015      	movs	r0, #21
 80015dc:	f004 fcaa 	bl	8005f34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80015e0:	bf00      	nop
 80015e2:	3728      	adds	r7, #40	; 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40006400 	.word	0x40006400
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020400 	.word	0x40020400

080015f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <HAL_I2C_MspInit+0x94>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d133      	bne.n	800167e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <HAL_I2C_MspInit+0x98>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a1b      	ldr	r2, [pc, #108]	; (800168c <HAL_I2C_MspInit+0x98>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_I2C_MspInit+0x98>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001632:	23c0      	movs	r3, #192	; 0xc0
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001636:	2312      	movs	r3, #18
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163a:	2301      	movs	r3, #1
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001642:	2304      	movs	r3, #4
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4810      	ldr	r0, [pc, #64]	; (8001690 <HAL_I2C_MspInit+0x9c>)
 800164e:	f004 fcaf 	bl	8005fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b0d      	ldr	r3, [pc, #52]	; (800168c <HAL_I2C_MspInit+0x98>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a0c      	ldr	r2, [pc, #48]	; (800168c <HAL_I2C_MspInit+0x98>)
 800165c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_I2C_MspInit+0x98>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	201f      	movs	r0, #31
 8001674:	f004 fc42 	bl	8005efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001678:	201f      	movs	r0, #31
 800167a:	f004 fc5b 	bl	8005f34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800167e:	bf00      	nop
 8001680:	3728      	adds	r7, #40	; 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40005400 	.word	0x40005400
 800168c:	40023800 	.word	0x40023800
 8001690:	40020400 	.word	0x40020400

08001694 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08c      	sub	sp, #48	; 0x30
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	201d      	movs	r0, #29
 80016aa:	f004 fc27 	bl	8005efc <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016ae:	201d      	movs	r0, #29
 80016b0:	f004 fc40 	bl	8005f34 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <HAL_InitTick+0xa4>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	4a1e      	ldr	r2, [pc, #120]	; (8001738 <HAL_InitTick+0xa4>)
 80016be:	f043 0302 	orr.w	r3, r3, #2
 80016c2:	6413      	str	r3, [r2, #64]	; 0x40
 80016c4:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <HAL_InitTick+0xa4>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016d0:	f107 0210 	add.w	r2, r7, #16
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f008 ff30 	bl	800a540 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80016e0:	f008 ff1a 	bl	800a518 <HAL_RCC_GetPCLK1Freq>
 80016e4:	4603      	mov	r3, r0
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80016ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ec:	4a13      	ldr	r2, [pc, #76]	; (800173c <HAL_InitTick+0xa8>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	0c9b      	lsrs	r3, r3, #18
 80016f4:	3b01      	subs	r3, #1
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_InitTick+0xac>)
 80016fa:	4a12      	ldr	r2, [pc, #72]	; (8001744 <HAL_InitTick+0xb0>)
 80016fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_InitTick+0xac>)
 8001700:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001704:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_InitTick+0xac>)
 8001708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_InitTick+0xac>)
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_InitTick+0xac>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001718:	4809      	ldr	r0, [pc, #36]	; (8001740 <HAL_InitTick+0xac>)
 800171a:	f008 ff43 	bl	800a5a4 <HAL_TIM_Base_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d104      	bne.n	800172e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001724:	4806      	ldr	r0, [pc, #24]	; (8001740 <HAL_InitTick+0xac>)
 8001726:	f008 ff72 	bl	800a60e <HAL_TIM_Base_Start_IT>
 800172a:	4603      	mov	r3, r0
 800172c:	e000      	b.n	8001730 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	3730      	adds	r7, #48	; 0x30
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40023800 	.word	0x40023800
 800173c:	431bde83 	.word	0x431bde83
 8001740:	20005188 	.word	0x20005188
 8001744:	40000400 	.word	0x40000400

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <MemManage_Handler+0x4>

08001762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <UsageFault_Handler+0x4>

0800176e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <CAN1_RX0_IRQHandler+0x10>)
 8001792:	f004 f8d2 	bl	800593a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20005134 	.word	0x20005134

080017a0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <CAN1_RX1_IRQHandler+0x10>)
 80017a6:	f004 f8c8 	bl	800593a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20005134 	.word	0x20005134

080017b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <TIM3_IRQHandler+0x10>)
 80017ba:	f008 ff4c 	bl	800a656 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20005188 	.word	0x20005188

080017c8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <I2C1_EV_IRQHandler+0x10>)
 80017ce:	f005 fa01 	bl	8006bd4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20004c5c 	.word	0x20004c5c

080017dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <OTG_FS_IRQHandler+0x10>)
 80017e2:	f007 fa2b 	bl	8008c3c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2000629c 	.word	0x2000629c

080017f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
	return 1;
 80017f4:	2301      	movs	r3, #1
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_kill>:

int _kill(int pid, int sig)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800180a:	f00d ffa3 	bl	800f754 <__errno>
 800180e:	4602      	mov	r2, r0
 8001810:	2316      	movs	r3, #22
 8001812:	6013      	str	r3, [r2, #0]
	return -1;
 8001814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_exit>:

void _exit (int status)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001828:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ffe7 	bl	8001800 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001832:	e7fe      	b.n	8001832 <_exit+0x12>

08001834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800183c:	4a14      	ldr	r2, [pc, #80]	; (8001890 <_sbrk+0x5c>)
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <_sbrk+0x60>)
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <_sbrk+0x64>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d102      	bne.n	8001856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <_sbrk+0x64>)
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <_sbrk+0x68>)
 8001854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	429a      	cmp	r2, r3
 8001862:	d207      	bcs.n	8001874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001864:	f00d ff76 	bl	800f754 <__errno>
 8001868:	4602      	mov	r2, r0
 800186a:	230c      	movs	r3, #12
 800186c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001872:	e009      	b.n	8001888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <_sbrk+0x64>)
 8001884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001886:	68fb      	ldr	r3, [r7, #12]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20020000 	.word	0x20020000
 8001894:	00000400 	.word	0x00000400
 8001898:	200004c8 	.word	0x200004c8
 800189c:	200066a8 	.word	0x200066a8

080018a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <SystemInit+0x28>)
 80018a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018aa:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <SystemInit+0x28>)
 80018ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <SystemInit+0x28>)
 80018b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ba:	609a      	str	r2, [r3, #8]
#endif
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001904 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018d2:	e003      	b.n	80018dc <LoopCopyDataInit>

080018d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018da:	3104      	adds	r1, #4

080018dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018dc:	480b      	ldr	r0, [pc, #44]	; (800190c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018e4:	d3f6      	bcc.n	80018d4 <CopyDataInit>
  ldr  r2, =_sbss
 80018e6:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018e8:	e002      	b.n	80018f0 <LoopFillZerobss>

080018ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018ec:	f842 3b04 	str.w	r3, [r2], #4

080018f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018f4:	d3f9      	bcc.n	80018ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018f6:	f7ff ffd3 	bl	80018a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fa:	f00d ff31 	bl	800f760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fe:	f7fe fe09 	bl	8000514 <main>
  bx  lr    
 8001902:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001904:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001908:	0801011c 	.word	0x0801011c
  ldr  r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001910:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8001914:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8001918:	200066a8 	.word	0x200066a8

0800191c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC_IRQHandler>
	...

08001920 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	0a5a      	lsrs	r2, r3, #9
 8001930:	490f      	ldr	r1, [pc, #60]	; (8001970 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8001932:	fba1 1202 	umull	r1, r2, r1, r2
 8001936:	09d2      	lsrs	r2, r2, #7
 8001938:	490e      	ldr	r1, [pc, #56]	; (8001974 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800193a:	fb01 f202 	mul.w	r2, r1, r2
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	0a5b      	lsrs	r3, r3, #9
 8001948:	4a09      	ldr	r2, [pc, #36]	; (8001970 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	09db      	lsrs	r3, r3, #7
 8001950:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	441a      	add	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	601a      	str	r2, [r3, #0]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	00044b83 	.word	0x00044b83
 8001974:	3b9aca00 	.word	0x3b9aca00

08001978 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 8001978:	b480      	push	{r7}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	ed87 0a00 	vstr	s0, [r7]
  {
    const int32_t* val = (int32_t*) &f;
 8001984:	463b      	mov	r3, r7
 8001986:	613b      	str	r3, [r7, #16]
    int32_t exp = ((*val >> 23) & 255);
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	15db      	asrs	r3, r3, #23
 800198e:	b2db      	uxtb	r3, r3
 8001990:	617b      	str	r3, [r7, #20]
    if (exp != 0)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x28>
    {
      exp += 1023 - 127;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f503 7360 	add.w	r3, r3, #896	; 0x380
 800199e:	617b      	str	r3, [r7, #20]
    }

    int32_t sig = *val;
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60fb      	str	r3, [r7, #12]
    *(outbuffer++) = 0;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig << 5) & 0xff;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	0159      	lsls	r1, r3, #5
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	b2ca      	uxtb	r2, r1
 80019d0:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 3) & 0xff;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	10d9      	asrs	r1, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	b2ca      	uxtb	r2, r1
 80019de:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 11) & 0xff;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	12d9      	asrs	r1, r3, #11
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	b2ca      	uxtb	r2, r1
 80019ec:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	b25a      	sxtb	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	14db      	asrs	r3, r3, #19
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	b25b      	sxtb	r3, r3
 8001a00:	4313      	orrs	r3, r2
 8001a02:	b259      	sxtb	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	b2ca      	uxtb	r2, r1
 8001a0c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	111b      	asrs	r3, r3, #4
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	1c59      	adds	r1, r3, #1
 8001a18:	6079      	str	r1, [r7, #4]
 8001a1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8001a22:	edd7 7a00 	vldr	s15, [r7]
 8001a26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2e:	d508      	bpl.n	8001a42 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0xca>
    {
      *(outbuffer - 1) |= 0x80;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	781a      	ldrb	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8001a42:	2308      	movs	r3, #8
  }
 8001a44:	4618      	mov	r0, r3
 8001a46:	371c      	adds	r7, #28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  {
    uint32_t* val = (uint32_t*)f;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]
    inbuffer += 3;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3303      	adds	r3, #3
 8001a62:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	095b      	lsrs	r3, r3, #5
 8001a6e:	f003 0207 	and.w	r2, r3, #7
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	00da      	lsls	r2, r3, #3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	431a      	orrs	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	02da      	lsls	r2, r3, #11
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	04db      	lsls	r3, r3, #19
 8001aa8:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8001aac:	431a      	orrs	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	601a      	str	r2, [r3, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	091b      	lsrs	r3, r3, #4
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	60bb      	str	r3, [r7, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	f403 62fe 	and.w	r2, r3, #2032	; 0x7f0
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	60bb      	str	r3, [r7, #8]
    if (exp != 0)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x9a>
    {
      *val |= ((exp) - 1023 + 127) << 23;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8001ae2:	05db      	lsls	r3, r3, #23
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	601a      	str	r2, [r3, #0]
    }

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	061b      	lsls	r3, r3, #24
 8001af4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	431a      	orrs	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	601a      	str	r2, [r3, #0]

    return 8;
 8001b02:	2308      	movs	r3, #8
  }
 8001b04:	4618      	mov	r0, r3
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <_ZN3ros3MsgC1Ev>:
class Msg
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <_ZN3ros3MsgC1Ev+0x1c>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	080100f8 	.word	0x080100f8

08001b54 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
      data()
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ffe8 	bl	8001b34 <_ZN3ros3MsgC1Ev>
 8001b64:	4a06      	ldr	r2, [pc, #24]	; (8001b80 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ffce 	bl	8001b10 <_ZN3ros4TimeC1Ev>
    {
    }
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	080100e0 	.word	0x080100e0

08001b84 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6859      	ldr	r1, [r3, #4]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	b2ca      	uxtb	r2, r1
 8001b9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	0a19      	lsrs	r1, r3, #8
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	4413      	add	r3, r2
 8001bae:	b2ca      	uxtb	r2, r1
 8001bb0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	0c19      	lsrs	r1, r3, #16
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3302      	adds	r3, #2
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	b2ca      	uxtb	r2, r1
 8001bc2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	0e19      	lsrs	r1, r3, #24
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	3303      	adds	r3, #3
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b2ca      	uxtb	r2, r1
 8001bd4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6899      	ldr	r1, [r3, #8]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	4413      	add	r3, r2
 8001be6:	b2ca      	uxtb	r2, r1
 8001be8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	0a19      	lsrs	r1, r3, #8
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	b2ca      	uxtb	r2, r1
 8001bfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	0c19      	lsrs	r1, r3, #16
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	3302      	adds	r3, #2
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	4413      	add	r3, r2
 8001c0a:	b2ca      	uxtb	r2, r1
 8001c0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	0e19      	lsrs	r1, r3, #24
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3303      	adds	r3, #3
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b2ca      	uxtb	r2, r1
 8001c1e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3304      	adds	r3, #4
 8001c24:	60fb      	str	r3, [r7, #12]
      return offset;
 8001c26:	68fb      	ldr	r3, [r7, #12]
    }
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	3301      	adds	r3, #1
 8001c58:	6839      	ldr	r1, [r7, #0]
 8001c5a:	440b      	add	r3, r1
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	6839      	ldr	r1, [r7, #0]
 8001c70:	440b      	add	r3, r1
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	3303      	adds	r3, #3
 8001c84:	6839      	ldr	r1, [r7, #0]
 8001c86:	440b      	add	r3, r1
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	061b      	lsls	r3, r3, #24
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3304      	adds	r3, #4
 8001c96:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3301      	adds	r3, #1
 8001cae:	6839      	ldr	r1, [r7, #0]
 8001cb0:	440b      	add	r3, r1
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	6839      	ldr	r1, [r7, #0]
 8001cc6:	440b      	add	r3, r1
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	041b      	lsls	r3, r3, #16
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	3303      	adds	r3, #3
 8001cda:	6839      	ldr	r1, [r7, #0]
 8001cdc:	440b      	add	r3, r1
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	061b      	lsls	r3, r3, #24
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3304      	adds	r3, #4
 8001cec:	60fb      	str	r3, [r7, #12]
     return offset;
 8001cee:	68fb      	ldr	r3, [r7, #12]
    }
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	0800fb4c 	.word	0x0800fb4c

08001d18 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	0800fb5c 	.word	0x0800fb5c

08001d34 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fef8 	bl	8001b34 <_ZN3ros3MsgC1Ev>
 8001d44:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	809a      	strh	r2, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a07      	ldr	r2, [pc, #28]	; (8001d78 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d5a:	60da      	str	r2, [r3, #12]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a06      	ldr	r2, [pc, #24]	; (8001d78 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001d60:	611a      	str	r2, [r3, #16]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	615a      	str	r2, [r3, #20]
    {
    }
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	080100c8 	.word	0x080100c8
 8001d78:	0800fb80 	.word	0x0800fb80

08001d7c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	8899      	ldrh	r1, [r3, #4]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	b2ca      	uxtb	r2, r1
 8001d96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	889b      	ldrh	r3, [r3, #4]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	b299      	uxth	r1, r3
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	3301      	adds	r3, #1
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	b2ca      	uxtb	r2, r1
 8001daa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	3302      	adds	r3, #2
 8001db0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fa0a 	bl	80001d0 <strlen>
 8001dbc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	69b9      	ldr	r1, [r7, #24]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f002 f8a0 	bl	8003f0c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	18d0      	adds	r0, r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4619      	mov	r1, r3
 8001de0:	f00d fcf2 	bl	800f7c8 <memcpy>
      offset += length_topic_name;
 8001de4:	69fa      	ldr	r2, [r7, #28]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4413      	add	r3, r2
 8001dea:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe f9ed 	bl	80001d0 <strlen>
 8001df6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	6979      	ldr	r1, [r7, #20]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f002 f883 	bl	8003f0c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	18d0      	adds	r0, r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f00d fcd5 	bl	800f7c8 <memcpy>
      offset += length_message_type;
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	4413      	add	r3, r2
 8001e24:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe f9d0 	bl	80001d0 <strlen>
 8001e30:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	6939      	ldr	r1, [r7, #16]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f002 f866 	bl	8003f0c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	3304      	adds	r3, #4
 8001e44:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	18d0      	adds	r0, r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4619      	mov	r1, r3
 8001e54:	f00d fcb8 	bl	800f7c8 <memcpy>
      offset += length_md5sum;
 8001e58:	69fa      	ldr	r2, [r7, #28]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001e66:	68f9      	ldr	r1, [r7, #12]
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	b2ca      	uxtb	r2, r1
 8001e70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	0a19      	lsrs	r1, r3, #8
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	b2ca      	uxtb	r2, r1
 8001e80:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	0c19      	lsrs	r1, r3, #16
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3302      	adds	r3, #2
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	b2ca      	uxtb	r2, r1
 8001e90:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	0e19      	lsrs	r1, r3, #24
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3303      	adds	r3, #3
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	b2ca      	uxtb	r2, r1
 8001ea0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	61fb      	str	r3, [r7, #28]
      return offset;
 8001ea8:	69fb      	ldr	r3, [r7, #28]
    }
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3720      	adds	r7, #32
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b08a      	sub	sp, #40	; 0x28
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	889b      	ldrh	r3, [r3, #4]
 8001ed2:	b21a      	sxth	r2, r3
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	6839      	ldr	r1, [r7, #0]
 8001eda:	440b      	add	r3, r1
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	b21b      	sxth	r3, r3
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	3302      	adds	r3, #2
 8001ef0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	441a      	add	r2, r3
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f002 f822 	bl	8003f48 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	3304      	adds	r3, #4
 8001f08:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	4413      	add	r3, r2
 8001f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d20c      	bcs.n	8001f34 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	441a      	add	r2, r3
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	3b01      	subs	r3, #1
 8001f24:	6839      	ldr	r1, [r7, #0]
 8001f26:	440b      	add	r3, r1
 8001f28:	7812      	ldrb	r2, [r2, #0]
 8001f2a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	3301      	adds	r3, #1
 8001f30:	627b      	str	r3, [r7, #36]	; 0x24
 8001f32:	e7ec      	b.n	8001f0e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	4413      	add	r3, r2
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	441a      	add	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	4413      	add	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	441a      	add	r2, r3
 8001f5e:	f107 0310 	add.w	r3, r7, #16
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f001 ffef 	bl	8003f48 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	623b      	str	r3, [r7, #32]
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4413      	add	r3, r2
 8001f7a:	6a3a      	ldr	r2, [r7, #32]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d20c      	bcs.n	8001f9a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	441a      	add	r2, r3
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	6839      	ldr	r1, [r7, #0]
 8001f8c:	440b      	add	r3, r1
 8001f8e:	7812      	ldrb	r2, [r2, #0]
 8001f90:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	3301      	adds	r3, #1
 8001f96:	623b      	str	r3, [r7, #32]
 8001f98:	e7ec      	b.n	8001f74 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	441a      	add	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	441a      	add	r2, r3
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f001 ffbc 	bl	8003f48 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4413      	add	r3, r2
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d20c      	bcs.n	8002000 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	441a      	add	r2, r3
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	6839      	ldr	r1, [r7, #0]
 8001ff2:	440b      	add	r3, r1
 8001ff4:	7812      	ldrb	r2, [r2, #0]
 8001ff6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	e7ec      	b.n	8001fda <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4413      	add	r3, r2
 8002006:	3b01      	subs	r3, #1
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	4413      	add	r3, r2
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	3b01      	subs	r3, #1
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	441a      	add	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4413      	add	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	6839      	ldr	r1, [r7, #0]
 800202e:	440a      	add	r2, r1
 8002030:	7812      	ldrb	r2, [r2, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	3301      	adds	r3, #1
 800203c:	6839      	ldr	r1, [r7, #0]
 800203e:	440b      	add	r3, r1
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	4313      	orrs	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	3302      	adds	r3, #2
 800204e:	6839      	ldr	r1, [r7, #0]
 8002050:	440b      	add	r3, r1
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	041b      	lsls	r3, r3, #16
 8002056:	4313      	orrs	r3, r2
 8002058:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	3303      	adds	r3, #3
 8002060:	6839      	ldr	r1, [r7, #0]
 8002062:	440b      	add	r3, r1
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	061b      	lsls	r3, r3, #24
 8002068:	4313      	orrs	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	3304      	adds	r3, #4
 8002076:	61bb      	str	r3, [r7, #24]
     return offset;
 8002078:	69bb      	ldr	r3, [r7, #24]
    }
 800207a:	4618      	mov	r0, r3
 800207c:	3728      	adds	r7, #40	; 0x28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	0800fb84 	.word	0x0800fb84

080020a0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	0800fba0 	.word	0x0800fba0

080020bc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fd34 	bl	8001b34 <_ZN3ros3MsgC1Ev>
 80020cc:	4a06      	ldr	r2, [pc, #24]	; (80020e8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	711a      	strb	r2, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a04      	ldr	r2, [pc, #16]	; (80020ec <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80020dc:	609a      	str	r2, [r3, #8]
    {
    }
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	080100b0 	.word	0x080100b0
 80020ec:	0800fb80 	.word	0x0800fb80

080020f0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	4413      	add	r3, r2
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	7912      	ldrb	r2, [r2, #4]
 8002108:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3301      	adds	r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe f85b 	bl	80001d0 <strlen>
 800211a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	4413      	add	r3, r2
 8002122:	68b9      	ldr	r1, [r7, #8]
 8002124:	4618      	mov	r0, r3
 8002126:	f001 fef1 	bl	8003f0c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	3304      	adds	r3, #4
 800212e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	18d0      	adds	r0, r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	4619      	mov	r1, r3
 800213e:	f00d fb43 	bl	800f7c8 <memcpy>
      offset += length_msg;
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	4413      	add	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]
      return offset;
 800214a:	68fb      	ldr	r3, [r7, #12]
    }
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	4413      	add	r3, r2
 8002168:	781a      	ldrb	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	3301      	adds	r3, #1
 8002172:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	441a      	add	r2, r3
 800217a:	f107 030c 	add.w	r3, r7, #12
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f001 fee1 	bl	8003f48 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	3304      	adds	r3, #4
 800218a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4413      	add	r3, r2
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	429a      	cmp	r2, r3
 800219a:	d20c      	bcs.n	80021b6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	441a      	add	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	6839      	ldr	r1, [r7, #0]
 80021a8:	440b      	add	r3, r1
 80021aa:	7812      	ldrb	r2, [r2, #0]
 80021ac:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3301      	adds	r3, #1
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	e7ec      	b.n	8002190 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4413      	add	r3, r2
 80021bc:	3b01      	subs	r3, #1
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	441a      	add	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4413      	add	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
     return offset;
 80021da:	693b      	ldr	r3, [r7, #16]
    }
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	0800fbc4 	.word	0x0800fbc4

08002200 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	0800fbd8 	.word	0x0800fbd8

0800221c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fc84 	bl	8001b34 <_ZN3ros3MsgC1Ev>
 800222c:	4a0c      	ldr	r2, [pc, #48]	; (8002260 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	619a      	str	r2, [r3, #24]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	61da      	str	r2, [r3, #28]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	08010098 	.word	0x08010098

08002264 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	; 0x28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6859      	ldr	r1, [r3, #4]
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	4413      	add	r3, r2
 800227c:	b2ca      	uxtb	r2, r1
 800227e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	0a19      	lsrs	r1, r3, #8
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	3301      	adds	r3, #1
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	4413      	add	r3, r2
 800228e:	b2ca      	uxtb	r2, r1
 8002290:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	0c19      	lsrs	r1, r3, #16
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	3302      	adds	r3, #2
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	b2ca      	uxtb	r2, r1
 80022a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	0e19      	lsrs	r1, r3, #24
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	3303      	adds	r3, #3
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	4413      	add	r3, r2
 80022b2:	b2ca      	uxtb	r2, r1
 80022b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	3304      	adds	r3, #4
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80022bc:	2300      	movs	r3, #0
 80022be:	623b      	str	r3, [r7, #32]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	6a3a      	ldr	r2, [r7, #32]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d22b      	bcs.n	8002322 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80022d8:	6939      	ldr	r1, [r7, #16]
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	b2ca      	uxtb	r2, r1
 80022e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	0a19      	lsrs	r1, r3, #8
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	3301      	adds	r3, #1
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	b2ca      	uxtb	r2, r1
 80022f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	0c19      	lsrs	r1, r3, #16
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	3302      	adds	r3, #2
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	b2ca      	uxtb	r2, r1
 8002302:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	0e19      	lsrs	r1, r3, #24
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	3303      	adds	r3, #3
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	4413      	add	r3, r2
 8002310:	b2ca      	uxtb	r2, r1
 8002312:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	3304      	adds	r3, #4
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	3301      	adds	r3, #1
 800231e:	623b      	str	r3, [r7, #32]
 8002320:	e7ce      	b.n	80022c0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6919      	ldr	r1, [r3, #16]
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	4413      	add	r3, r2
 800232c:	b2ca      	uxtb	r2, r1
 800232e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	0a19      	lsrs	r1, r3, #8
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	3301      	adds	r3, #1
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	4413      	add	r3, r2
 800233e:	b2ca      	uxtb	r2, r1
 8002340:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	0c19      	lsrs	r1, r3, #16
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	3302      	adds	r3, #2
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	4413      	add	r3, r2
 8002350:	b2ca      	uxtb	r2, r1
 8002352:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	0e19      	lsrs	r1, r3, #24
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	3303      	adds	r3, #3
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	4413      	add	r3, r2
 8002362:	b2ca      	uxtb	r2, r1
 8002364:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	3304      	adds	r3, #4
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800236c:	2300      	movs	r3, #0
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	429a      	cmp	r2, r3
 8002378:	d22b      	bcs.n	80023d2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699a      	ldr	r2, [r3, #24]
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002388:	68f9      	ldr	r1, [r7, #12]
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	4413      	add	r3, r2
 8002390:	b2ca      	uxtb	r2, r1
 8002392:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	0a19      	lsrs	r1, r3, #8
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	3301      	adds	r3, #1
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	b2ca      	uxtb	r2, r1
 80023a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	0c19      	lsrs	r1, r3, #16
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	3302      	adds	r3, #2
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	b2ca      	uxtb	r2, r1
 80023b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	0e19      	lsrs	r1, r3, #24
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	3303      	adds	r3, #3
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	b2ca      	uxtb	r2, r1
 80023c2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	3304      	adds	r3, #4
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3301      	adds	r3, #1
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	e7ce      	b.n	8002370 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69d9      	ldr	r1, [r3, #28]
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	b2ca      	uxtb	r2, r1
 80023de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	0a19      	lsrs	r1, r3, #8
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	3301      	adds	r3, #1
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	4413      	add	r3, r2
 80023ee:	b2ca      	uxtb	r2, r1
 80023f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	0c19      	lsrs	r1, r3, #16
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	3302      	adds	r3, #2
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	b2ca      	uxtb	r2, r1
 8002402:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	0e19      	lsrs	r1, r3, #24
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	3303      	adds	r3, #3
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	4413      	add	r3, r2
 8002412:	b2ca      	uxtb	r2, r1
 8002414:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	3304      	adds	r3, #4
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800241c:	2300      	movs	r3, #0
 800241e:	61bb      	str	r3, [r7, #24]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	429a      	cmp	r2, r3
 8002428:	d228      	bcs.n	800247c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fd feca 	bl	80001d0 <strlen>
 800243c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	4413      	add	r3, r2
 8002444:	6979      	ldr	r1, [r7, #20]
 8002446:	4618      	mov	r0, r3
 8002448:	f001 fd60 	bl	8003f0c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	3304      	adds	r3, #4
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	18d0      	adds	r0, r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	4619      	mov	r1, r3
 8002468:	f00d f9ae 	bl	800f7c8 <memcpy>
      offset += length_stringsi;
 800246c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	4413      	add	r3, r2
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	3301      	adds	r3, #1
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	e7d1      	b.n	8002420 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800247e:	4618      	mov	r0, r3
 8002480:	3728      	adds	r7, #40	; 0x28
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002486:	b580      	push	{r7, lr}
 8002488:	b08e      	sub	sp, #56	; 0x38
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	4413      	add	r3, r2
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800249e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a0:	3301      	adds	r3, #1
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	4413      	add	r3, r2
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	6a3a      	ldr	r2, [r7, #32]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80024b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b2:	3302      	adds	r3, #2
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	041b      	lsls	r3, r3, #16
 80024bc:	6a3a      	ldr	r2, [r7, #32]
 80024be:	4313      	orrs	r3, r2
 80024c0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80024c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c4:	3303      	adds	r3, #3
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	4413      	add	r3, r2
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	061b      	lsls	r3, r3, #24
 80024ce:	6a3a      	ldr	r2, [r7, #32]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80024d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d6:	3304      	adds	r3, #4
 80024d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	6a3a      	ldr	r2, [r7, #32]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d90a      	bls.n	80024fa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4619      	mov	r1, r3
 80024ee:	4610      	mov	r0, r2
 80024f0:	f00d fa26 	bl	800f940 <realloc>
 80024f4:	4602      	mov	r2, r0
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a3a      	ldr	r2, [r7, #32]
 80024fe:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002500:	2300      	movs	r3, #0
 8002502:	633b      	str	r3, [r7, #48]	; 0x30
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800250a:	429a      	cmp	r2, r3
 800250c:	d236      	bcs.n	800257c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002516:	6839      	ldr	r1, [r7, #0]
 8002518:	440a      	add	r2, r1
 800251a:	7812      	ldrb	r2, [r2, #0]
 800251c:	4313      	orrs	r3, r2
 800251e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002524:	3301      	adds	r3, #1
 8002526:	6839      	ldr	r1, [r7, #0]
 8002528:	440b      	add	r3, r1
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	4313      	orrs	r3, r2
 8002530:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002536:	3302      	adds	r3, #2
 8002538:	6839      	ldr	r1, [r7, #0]
 800253a:	440b      	add	r3, r1
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	041b      	lsls	r3, r3, #16
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002548:	3303      	adds	r3, #3
 800254a:	6839      	ldr	r1, [r7, #0]
 800254c:	440b      	add	r3, r1
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	061b      	lsls	r3, r3, #24
 8002552:	4313      	orrs	r3, r2
 8002554:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800255c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255e:	3304      	adds	r3, #4
 8002560:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	3208      	adds	r2, #8
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002576:	3301      	adds	r3, #1
 8002578:	633b      	str	r3, [r7, #48]	; 0x30
 800257a:	e7c3      	b.n	8002504 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800257c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	4413      	add	r3, r2
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002588:	3301      	adds	r3, #1
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	4413      	add	r3, r2
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	4313      	orrs	r3, r2
 8002596:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259a:	3302      	adds	r3, #2
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	041b      	lsls	r3, r3, #16
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80025aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ac:	3303      	adds	r3, #3
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	4413      	add	r3, r2
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	061b      	lsls	r3, r3, #24
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80025bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025be:	3304      	adds	r3, #4
 80025c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d90a      	bls.n	80025e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699a      	ldr	r2, [r3, #24]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4619      	mov	r1, r3
 80025d6:	4610      	mov	r0, r2
 80025d8:	f00d f9b2 	bl	800f940 <realloc>
 80025dc:	4602      	mov	r2, r0
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69fa      	ldr	r2, [r7, #28]
 80025e6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80025e8:	2300      	movs	r3, #0
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d236      	bcs.n	8002664 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025fe:	6839      	ldr	r1, [r7, #0]
 8002600:	440a      	add	r2, r1
 8002602:	7812      	ldrb	r2, [r2, #0]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260c:	3301      	adds	r3, #1
 800260e:	6839      	ldr	r1, [r7, #0]
 8002610:	440b      	add	r3, r1
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	021b      	lsls	r3, r3, #8
 8002616:	4313      	orrs	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800261e:	3302      	adds	r3, #2
 8002620:	6839      	ldr	r1, [r7, #0]
 8002622:	440b      	add	r3, r1
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	041b      	lsls	r3, r3, #16
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002630:	3303      	adds	r3, #3
 8002632:	6839      	ldr	r1, [r7, #0]
 8002634:	440b      	add	r3, r1
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	061b      	lsls	r3, r3, #24
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002646:	3304      	adds	r3, #4
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	3214      	adds	r2, #20
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265e:	3301      	adds	r3, #1
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002662:	e7c3      	b.n	80025ec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	4413      	add	r3, r2
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800266e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002670:	3301      	adds	r3, #1
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	4413      	add	r3, r2
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002682:	3302      	adds	r3, #2
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	4413      	add	r3, r2
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	041b      	lsls	r3, r3, #16
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002694:	3303      	adds	r3, #3
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	4413      	add	r3, r2
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	061b      	lsls	r3, r3, #24
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80026a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a6:	3304      	adds	r3, #4
 80026a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d90a      	bls.n	80026ca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4619      	mov	r1, r3
 80026be:	4610      	mov	r0, r2
 80026c0:	f00d f93e 	bl	800f940 <realloc>
 80026c4:	4602      	mov	r2, r0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80026d0:	2300      	movs	r3, #0
 80026d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026da:	429a      	cmp	r2, r3
 80026dc:	d23f      	bcs.n	800275e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80026de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	441a      	add	r2, r3
 80026e4:	f107 030c 	add.w	r3, r7, #12
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f001 fc2c 	bl	8003f48 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80026f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f2:	3304      	adds	r3, #4
 80026f4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80026f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
 80026fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002702:	429a      	cmp	r2, r3
 8002704:	d20c      	bcs.n	8002720 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	441a      	add	r2, r3
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	3b01      	subs	r3, #1
 8002710:	6839      	ldr	r1, [r7, #0]
 8002712:	440b      	add	r3, r1
 8002714:	7812      	ldrb	r2, [r2, #0]
 8002716:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	3301      	adds	r3, #1
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
 800271e:	e7ec      	b.n	80026fa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4413      	add	r3, r2
 8002726:	3b01      	subs	r3, #1
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	4413      	add	r3, r2
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002732:	3b01      	subs	r3, #1
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	441a      	add	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800273c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4413      	add	r3, r2
 8002742:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	3220      	adds	r2, #32
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002758:	3301      	adds	r3, #1
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28
 800275c:	e7ba      	b.n	80026d4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800275e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002760:	4618      	mov	r0, r3
 8002762:	3738      	adds	r7, #56	; 0x38
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	4b03      	ldr	r3, [pc, #12]	; (8002780 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	0800ff5c 	.word	0x0800ff5c

08002784 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	0800fbfc 	.word	0x0800fbfc

080027a0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	611a      	str	r2, [r3, #16]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68d8      	ldr	r0, [r3, #12]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6891      	ldr	r1, [r2, #8]
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	4798      	blx	r3
 80027ec:	4603      	mov	r3, r0
  };
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
  }
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <_ZN13STM32HardwareC1Ev>:
extern struct ringbuffer rb;

class STM32Hardware
{
public:
	STM32Hardware() {
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
	}
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <_ZN13STM32Hardware4initEv>:

	void init() {
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <_ZN13STM32Hardware4readEv>:

	// Read a byte of data from ROS connection.
	// If no data , returns -1
	int read()
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	{
		uint32_t r;
		uint8_t ch = -1;
 8002840:	23ff      	movs	r3, #255	; 0xff
 8002842:	72fb      	strb	r3, [r7, #11]

		r = ringbuffer_getchar(&rb, &ch);
 8002844:	f107 030b 	add.w	r3, r7, #11
 8002848:	4619      	mov	r1, r3
 800284a:	4807      	ldr	r0, [pc, #28]	; (8002868 <_ZN13STM32Hardware4readEv+0x30>)
 800284c:	f002 fb56 	bl	8004efc <_Z18ringbuffer_getcharP10ringbufferPh>
 8002850:	60f8      	str	r0, [r7, #12]

		if (1 == r)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <_ZN13STM32Hardware4readEv+0x24>
			return ch;
 8002858:	7afb      	ldrb	r3, [r7, #11]
 800285a:	e001      	b.n	8002860 <_ZN13STM32Hardware4readEv+0x28>
		else
			return -1;
 800285c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	200004cc 	.word	0x200004cc

0800286c <_ZN13STM32Hardware5writeEPhi>:


	// Send a byte of data to ROS connection
	void write(uint8_t* data, int length)
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
	{
		CDC_Transmit_FS(data, length);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	b29b      	uxth	r3, r3
 800287c:	4619      	mov	r1, r3
 800287e:	68b8      	ldr	r0, [r7, #8]
 8002880:	f00c fb0a 	bl	800ee98 <CDC_Transmit_FS>
	}
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <_ZN13STM32Hardware4timeEv>:

	// Returns milliseconds since start of program
	unsigned long time(void)
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	{
		return HAL_GetTick();
 8002894:	f002 fbf0 	bl	8005078 <HAL_GetTick>
 8002898:	4603      	mov	r3, r0
	}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <_ZN8std_msgs4Int8C1Ev>:
  {
    public:
      typedef int8_t _data_type;
      _data_type data;

    Int8():
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
      data(0)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff f940 	bl	8001b34 <_ZN3ros3MsgC1Ev>
 80028b4:	4a05      	ldr	r2, [pc, #20]	; (80028cc <_ZN8std_msgs4Int8C1Ev+0x28>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	711a      	strb	r2, [r3, #4]
    {
    }
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	08010054 	.word	0x08010054

080028d0 <_ZNK8std_msgs4Int89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80028e4:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	4413      	add	r3, r2
 80028ec:	7a3a      	ldrb	r2, [r7, #8]
 80028ee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3301      	adds	r3, #1
 80028f4:	60fb      	str	r3, [r7, #12]
      return offset;
 80028f6:	68fb      	ldr	r3, [r7, #12]
    }
 80028f8:	4618      	mov	r0, r3
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <_ZN8std_msgs4Int811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
      union {
        int8_t real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002916:	7a3a      	ldrb	r2, [r7, #8]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6839      	ldr	r1, [r7, #0]
 800291c:	440b      	add	r3, r1
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	4313      	orrs	r3, r2
 8002922:	b2db      	uxtb	r3, r3
 8002924:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8002926:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	3301      	adds	r3, #1
 8002932:	60fb      	str	r3, [r7, #12]
     return offset;
 8002934:	68fb      	ldr	r3, [r7, #12]
    }
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <_ZN8std_msgs4Int87getTypeEv>:

    const char * getType(){ return "std_msgs/Int8"; };
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <_ZN8std_msgs4Int87getTypeEv+0x18>)
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	0800fc20 	.word	0x0800fc20

08002960 <_ZN8std_msgs4Int86getMD5Ev>:
    const char * getMD5(){ return "27ffa0c9c4b8fb8492252bcad9e5c57b"; };
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <_ZN8std_msgs4Int86getMD5Ev+0x18>)
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	0800fc30 	.word	0x0800fc30

0800297c <_ZN8std_msgs5UInt8C1Ev>:
  {
    public:
      typedef uint8_t _data_type;
      _data_type data;

    UInt8():
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
      data(0)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff f8d4 	bl	8001b34 <_ZN3ros3MsgC1Ev>
 800298c:	4a05      	ldr	r2, [pc, #20]	; (80029a4 <_ZN8std_msgs5UInt8C1Ev+0x28>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	711a      	strb	r2, [r3, #4]
    {
    }
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	0801003c 	.word	0x0801003c

080029a8 <_ZNK8std_msgs5UInt89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	7912      	ldrb	r2, [r2, #4]
 80029c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	3301      	adds	r3, #1
 80029c6:	60fb      	str	r3, [r7, #12]
      return offset;
 80029c8:	68fb      	ldr	r3, [r7, #12]
    }
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80029d6:	b480      	push	{r7}
 80029d8:	b085      	sub	sp, #20
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	4413      	add	r3, r2
 80029ea:	781a      	ldrb	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	3301      	adds	r3, #1
 80029f4:	60fb      	str	r3, [r7, #12]
     return offset;
 80029f6:	68fb      	ldr	r3, [r7, #12]
    }
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <_ZN8std_msgs5UInt87getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8"; };
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <_ZN8std_msgs5UInt87getTypeEv+0x18>)
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	0800fc54 	.word	0x0800fc54

08002a20 <_ZN8std_msgs5UInt86getMD5Ev>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <_ZN8std_msgs5UInt86getMD5Ev+0x18>)
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	0800fc64 	.word	0x0800fc64

08002a3c <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff f874 	bl	8001b34 <_ZN3ros3MsgC1Ev>
 8002a4c:	4a08      	ldr	r2, [pc, #32]	; (8002a70 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	60da      	str	r2, [r3, #12]
    {
    }
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	08010024 	.word	0x08010024
 8002a74:	0800fb80 	.word	0x0800fb80

08002a78 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fd fba0 	bl	80001d0 <strlen>
 8002a90:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	4413      	add	r3, r2
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f001 fa36 	bl	8003f0c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	18d0      	adds	r0, r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f00c fe88 	bl	800f7c8 <memcpy>
      offset += length_label;
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	4413      	add	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6899      	ldr	r1, [r3, #8]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	4413      	add	r3, r2
 8002aca:	b2ca      	uxtb	r2, r1
 8002acc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	0a19      	lsrs	r1, r3, #8
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	4413      	add	r3, r2
 8002adc:	b2ca      	uxtb	r2, r1
 8002ade:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	0c19      	lsrs	r1, r3, #16
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	3302      	adds	r3, #2
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	4413      	add	r3, r2
 8002aee:	b2ca      	uxtb	r2, r1
 8002af0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	0e19      	lsrs	r1, r3, #24
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	3303      	adds	r3, #3
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	4413      	add	r3, r2
 8002b00:	b2ca      	uxtb	r2, r1
 8002b02:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	3304      	adds	r3, #4
 8002b08:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68d9      	ldr	r1, [r3, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	4413      	add	r3, r2
 8002b14:	b2ca      	uxtb	r2, r1
 8002b16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	0a19      	lsrs	r1, r3, #8
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	3301      	adds	r3, #1
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	4413      	add	r3, r2
 8002b26:	b2ca      	uxtb	r2, r1
 8002b28:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	0c19      	lsrs	r1, r3, #16
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	3302      	adds	r3, #2
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	4413      	add	r3, r2
 8002b38:	b2ca      	uxtb	r2, r1
 8002b3a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	0e19      	lsrs	r1, r3, #24
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3303      	adds	r3, #3
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	4413      	add	r3, r2
 8002b4a:	b2ca      	uxtb	r2, r1
 8002b4c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3304      	adds	r3, #4
 8002b52:	60fb      	str	r3, [r7, #12]
      return offset;
 8002b54:	68fb      	ldr	r3, [r7, #12]
    }
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b086      	sub	sp, #24
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	441a      	add	r2, r3
 8002b72:	f107 030c 	add.w	r3, r7, #12
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f001 f9e5 	bl	8003f48 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	3304      	adds	r3, #4
 8002b82:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d20c      	bcs.n	8002bae <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	441a      	add	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	6839      	ldr	r1, [r7, #0]
 8002ba0:	440b      	add	r3, r1
 8002ba2:	7812      	ldrb	r2, [r2, #0]
 8002ba4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	e7ec      	b.n	8002b88 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_label-1]=0;
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	4413      	add	r3, r2
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	441a      	add	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4413      	add	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	3301      	adds	r3, #1
 8002be8:	6839      	ldr	r1, [r7, #0]
 8002bea:	440b      	add	r3, r1
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	021b      	lsls	r3, r3, #8
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	6839      	ldr	r1, [r7, #0]
 8002c00:	440b      	add	r3, r1
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	041b      	lsls	r3, r3, #16
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	3303      	adds	r3, #3
 8002c14:	6839      	ldr	r1, [r7, #0]
 8002c16:	440b      	add	r3, r1
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	061b      	lsls	r3, r3, #24
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	3304      	adds	r3, #4
 8002c26:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	6839      	ldr	r1, [r7, #0]
 8002c40:	440b      	add	r3, r1
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	3302      	adds	r3, #2
 8002c54:	6839      	ldr	r1, [r7, #0]
 8002c56:	440b      	add	r3, r1
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	041b      	lsls	r3, r3, #16
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	3303      	adds	r3, #3
 8002c6a:	6839      	ldr	r1, [r7, #0]
 8002c6c:	440b      	add	r3, r1
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	061b      	lsls	r3, r3, #24
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	613b      	str	r3, [r7, #16]
     return offset;
 8002c7e:	693b      	ldr	r3, [r7, #16]
    }
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	0800fc88 	.word	0x0800fc88

08002ca4 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	0800fca8 	.word	0x0800fca8

08002cc0 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe ff32 	bl	8001b34 <_ZN3ros3MsgC1Ev>
 8002cd0:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	605a      	str	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3308      	adds	r3, #8
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff feab 	bl	8002a3c <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	61da      	str	r2, [r3, #28]
    {
    }
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	0801000c 	.word	0x0801000c

08002d00 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6859      	ldr	r1, [r3, #4]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	4413      	add	r3, r2
 8002d18:	b2ca      	uxtb	r2, r1
 8002d1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	0a19      	lsrs	r1, r3, #8
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3301      	adds	r3, #1
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	4413      	add	r3, r2
 8002d2a:	b2ca      	uxtb	r2, r1
 8002d2c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	0c19      	lsrs	r1, r3, #16
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3302      	adds	r3, #2
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	b2ca      	uxtb	r2, r1
 8002d3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	0e19      	lsrs	r1, r3, #24
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3303      	adds	r3, #3
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	b2ca      	uxtb	r2, r1
 8002d50:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	3304      	adds	r3, #4
 8002d56:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d218      	bcs.n	8002d98 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x98>
      offset += this->dim[i].serialize(outbuffer + offset);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	18d0      	adds	r0, r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699a      	ldr	r2, [r3, #24]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	4413      	add	r3, r2
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	6839      	ldr	r1, [r7, #0]
 8002d82:	440a      	add	r2, r1
 8002d84:	4611      	mov	r1, r2
 8002d86:	4798      	blx	r3
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	3301      	adds	r3, #1
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	e7e1      	b.n	8002d5c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69d9      	ldr	r1, [r3, #28]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	4413      	add	r3, r2
 8002da2:	b2ca      	uxtb	r2, r1
 8002da4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	0a19      	lsrs	r1, r3, #8
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	3301      	adds	r3, #1
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	4413      	add	r3, r2
 8002db4:	b2ca      	uxtb	r2, r1
 8002db6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	0c19      	lsrs	r1, r3, #16
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	b2ca      	uxtb	r2, r1
 8002dc8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	0e19      	lsrs	r1, r3, #24
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3303      	adds	r3, #3
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	b2ca      	uxtb	r2, r1
 8002dda:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3304      	adds	r3, #4
 8002de0:	60fb      	str	r3, [r7, #12]
      return offset;
 8002de2:	68fb      	ldr	r3, [r7, #12]
    }
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	4413      	add	r3, r2
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	3301      	adds	r3, #1
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	3302      	adds	r3, #2
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	041b      	lsls	r3, r3, #16
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	3303      	adds	r3, #3
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	061b      	lsls	r3, r3, #24
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d90a      	bls.n	8002e60 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	4619      	mov	r1, r3
 8002e54:	4610      	mov	r0, r2
 8002e56:	f00c fd73 	bl	800f940 <realloc>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8002e66:	2300      	movs	r3, #0
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d21b      	bcs.n	8002eac <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xc0>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f103 0008 	add.w	r0, r3, #8
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	4413      	add	r3, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	f7ff fe6c 	bl	8002b5e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8002e86:	4602      	mov	r2, r0
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	18d0      	adds	r0, r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3308      	adds	r3, #8
 8002e9c:	2210      	movs	r2, #16
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	f00c fc92 	bl	800f7c8 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	e7de      	b.n	8002e6a <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x7e>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	6839      	ldr	r1, [r7, #0]
 8002ec4:	440b      	add	r3, r1
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	021b      	lsls	r3, r3, #8
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69da      	ldr	r2, [r3, #28]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	3302      	adds	r3, #2
 8002ed8:	6839      	ldr	r1, [r7, #0]
 8002eda:	440b      	add	r3, r1
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	041b      	lsls	r3, r3, #16
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69da      	ldr	r2, [r3, #28]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	3303      	adds	r3, #3
 8002eee:	6839      	ldr	r1, [r7, #0]
 8002ef0:	440b      	add	r3, r1
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	061b      	lsls	r3, r3, #24
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	3304      	adds	r3, #4
 8002f00:	617b      	str	r3, [r7, #20]
     return offset;
 8002f02:	697b      	ldr	r3, [r7, #20]
    }
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8002f16:	4618      	mov	r0, r3
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	0800fccc 	.word	0x0800fccc

08002f28 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	0800fce8 	.word	0x0800fce8

08002f44 <_ZN8std_msgs15UInt8MultiArrayC1Ev>:
      uint32_t data_length;
      typedef uint8_t _data_type;
      _data_type st_data;
      _data_type * data;

    UInt8MultiArray():
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), data(NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fdf0 	bl	8001b34 <_ZN3ros3MsgC1Ev>
 8002f54:	4a09      	ldr	r2, [pc, #36]	; (8002f7c <_ZN8std_msgs15UInt8MultiArrayC1Ev+0x38>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff feae 	bl	8002cc0 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	0800fff4 	.word	0x0800fff4

08002f80 <_ZNK8std_msgs15UInt8MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
      offset += this->layout.serialize(outbuffer + offset);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	1d18      	adds	r0, r3, #4
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	4413      	add	r3, r2
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f7ff feb1 	bl	8002d00 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	4413      	add	r3, r2
 8002fb0:	b2ca      	uxtb	r2, r1
 8002fb2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	0a19      	lsrs	r1, r3, #8
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	b2ca      	uxtb	r2, r1
 8002fc4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	0c19      	lsrs	r1, r3, #16
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	3302      	adds	r3, #2
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	b2ca      	uxtb	r2, r1
 8002fd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	0e19      	lsrs	r1, r3, #24
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3303      	adds	r3, #3
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	b2ca      	uxtb	r2, r1
 8002fe8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	3304      	adds	r3, #4
 8002fee:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < data_length; i++){
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d20f      	bcs.n	800301e <_ZNK8std_msgs15UInt8MultiArray9serializeEPh+0x9e>
      *(outbuffer + offset + 0) = (this->data[i] >> (8 * 0)) & 0xFF;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	441a      	add	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6839      	ldr	r1, [r7, #0]
 800300a:	440b      	add	r3, r1
 800300c:	7812      	ldrb	r2, [r2, #0]
 800300e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	3301      	adds	r3, #1
 8003014:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < data_length; i++){
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	3301      	adds	r3, #1
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	e7ea      	b.n	8002ff4 <_ZNK8std_msgs15UInt8MultiArray9serializeEPh+0x74>
      }
      return offset;
 800301e:	68fb      	ldr	r3, [r7, #12]
    }
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	1d18      	adds	r0, r3, #4
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	4413      	add	r3, r2
 8003040:	4619      	mov	r1, r3
 8003042:	f7ff fed3 	bl	8002dec <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8003046:	4602      	mov	r2, r0
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	4413      	add	r3, r2
 800304c:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	4413      	add	r3, r2
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	3301      	adds	r3, #1
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	4413      	add	r3, r2
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	021b      	lsls	r3, r3, #8
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	3302      	adds	r3, #2
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	4413      	add	r3, r2
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	041b      	lsls	r3, r3, #16
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	3303      	adds	r3, #3
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	4413      	add	r3, r2
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	061b      	lsls	r3, r3, #24
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	3304      	adds	r3, #4
 8003092:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	429a      	cmp	r2, r3
 800309c:	d908      	bls.n	80030b0 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0x88>
        this->data = (uint8_t*)realloc(this->data, data_lengthT * sizeof(uint8_t));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	68f9      	ldr	r1, [r7, #12]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f00c fc4b 	bl	800f940 <realloc>
 80030aa:	4602      	mov	r2, r0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d215      	bcs.n	80030f0 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0xc8>
      this->st_data =  ((uint8_t) (*(inbuffer + offset)));
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	4413      	add	r3, r2
 80030ca:	781a      	ldrb	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	3301      	adds	r3, #1
 80030d6:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(uint8_t));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	3228      	adds	r2, #40	; 0x28
 80030e4:	7812      	ldrb	r2, [r2, #0]
 80030e6:	701a      	strb	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	3301      	adds	r3, #1
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	e7e4      	b.n	80030ba <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0x92>
      }
     return offset;
 80030f0:	697b      	ldr	r3, [r7, #20]
    }
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <_ZN8std_msgs15UInt8MultiArray7getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8MultiArray"; };
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <_ZN8std_msgs15UInt8MultiArray7getTypeEv+0x18>)
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	0800fd0c 	.word	0x0800fd0c

08003118 <_ZN8std_msgs15UInt8MultiArray6getMD5Ev>:
    const char * getMD5(){ return "82373f1612381bb6ee473b5cd6f5d89c"; };
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <_ZN8std_msgs15UInt8MultiArray6getMD5Ev+0x18>)
 8003122:	4618      	mov	r0, r3
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	0800fd28 	.word	0x0800fd28

08003134 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe fcf8 	bl	8001b34 <_ZN3ros3MsgC1Ev>
 8003144:	4a09      	ldr	r2, [pc, #36]	; (800316c <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	60da      	str	r2, [r3, #12]
    {
    }
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	0800ffdc 	.word	0x0800ffdc

08003170 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	441a      	add	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	edd3 7a01 	vldr	s15, [r3, #4]
 800318a:	eeb0 0a67 	vmov.f32	s0, s15
 800318e:	4610      	mov	r0, r2
 8003190:	f7fe fbf2 	bl	8001978 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003194:	4602      	mov	r2, r0
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4413      	add	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	441a      	add	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80031a8:	eeb0 0a67 	vmov.f32	s0, s15
 80031ac:	4610      	mov	r0, r2
 80031ae:	f7fe fbe3 	bl	8001978 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80031b2:	4602      	mov	r2, r0
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4413      	add	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	441a      	add	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80031c6:	eeb0 0a67 	vmov.f32	s0, s15
 80031ca:	4610      	mov	r0, r2
 80031cc:	f7fe fbd4 	bl	8001978 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4413      	add	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
      return offset;
 80031d8:	68fb      	ldr	r3, [r7, #12]
    }
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	441a      	add	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3304      	adds	r3, #4
 80031fa:	4619      	mov	r1, r3
 80031fc:	4610      	mov	r0, r2
 80031fe:	f7fe fc27 	bl	8001a50 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003202:	4602      	mov	r2, r0
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	441a      	add	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3308      	adds	r3, #8
 8003214:	4619      	mov	r1, r3
 8003216:	4610      	mov	r0, r2
 8003218:	f7fe fc1a 	bl	8001a50 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800321c:	4602      	mov	r2, r0
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4413      	add	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	441a      	add	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	330c      	adds	r3, #12
 800322e:	4619      	mov	r1, r3
 8003230:	4610      	mov	r0, r2
 8003232:	f7fe fc0d 	bl	8001a50 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003236:	4602      	mov	r2, r0
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
     return offset;
 800323e:	68fb      	ldr	r3, [r7, #12]
    }
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	4b03      	ldr	r3, [pc, #12]	; (8003260 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	0800fd4c 	.word	0x0800fd4c

08003264 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800326e:	4618      	mov	r0, r3
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	0800fd64 	.word	0x0800fd64

08003280 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe fc52 	bl	8001b34 <_ZN3ros3MsgC1Ev>
 8003290:	4a09      	ldr	r2, [pc, #36]	; (80032b8 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3308      	adds	r3, #8
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fe fc35 	bl	8001b10 <_ZN3ros4TimeC1Ev>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a04      	ldr	r2, [pc, #16]	; (80032bc <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 80032aa:	611a      	str	r2, [r3, #16]
    {
    }
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	0800ffc4 	.word	0x0800ffc4
 80032bc:	0800fb80 	.word	0x0800fb80

080032c0 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6859      	ldr	r1, [r3, #4]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	4413      	add	r3, r2
 80032d8:	b2ca      	uxtb	r2, r1
 80032da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	0a19      	lsrs	r1, r3, #8
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	3301      	adds	r3, #1
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	4413      	add	r3, r2
 80032ea:	b2ca      	uxtb	r2, r1
 80032ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	0c19      	lsrs	r1, r3, #16
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	3302      	adds	r3, #2
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	4413      	add	r3, r2
 80032fc:	b2ca      	uxtb	r2, r1
 80032fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	0e19      	lsrs	r1, r3, #24
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	3303      	adds	r3, #3
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	4413      	add	r3, r2
 800330e:	b2ca      	uxtb	r2, r1
 8003310:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3304      	adds	r3, #4
 8003316:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6899      	ldr	r1, [r3, #8]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	4413      	add	r3, r2
 8003322:	b2ca      	uxtb	r2, r1
 8003324:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	0a19      	lsrs	r1, r3, #8
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3301      	adds	r3, #1
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	4413      	add	r3, r2
 8003334:	b2ca      	uxtb	r2, r1
 8003336:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	0c19      	lsrs	r1, r3, #16
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	3302      	adds	r3, #2
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	4413      	add	r3, r2
 8003346:	b2ca      	uxtb	r2, r1
 8003348:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	0e19      	lsrs	r1, r3, #24
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	3303      	adds	r3, #3
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	4413      	add	r3, r2
 8003358:	b2ca      	uxtb	r2, r1
 800335a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	3304      	adds	r3, #4
 8003360:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68d9      	ldr	r1, [r3, #12]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	4413      	add	r3, r2
 800336c:	b2ca      	uxtb	r2, r1
 800336e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	0a19      	lsrs	r1, r3, #8
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3301      	adds	r3, #1
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	4413      	add	r3, r2
 800337e:	b2ca      	uxtb	r2, r1
 8003380:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	0c19      	lsrs	r1, r3, #16
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	3302      	adds	r3, #2
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	4413      	add	r3, r2
 8003390:	b2ca      	uxtb	r2, r1
 8003392:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	0e19      	lsrs	r1, r3, #24
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	3303      	adds	r3, #3
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	4413      	add	r3, r2
 80033a2:	b2ca      	uxtb	r2, r1
 80033a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3304      	adds	r3, #4
 80033aa:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fc ff0d 	bl	80001d0 <strlen>
 80033b6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	4413      	add	r3, r2
 80033be:	68b9      	ldr	r1, [r7, #8]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 fda3 	bl	8003f0c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3304      	adds	r3, #4
 80033ca:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	18d0      	adds	r0, r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	4619      	mov	r1, r3
 80033da:	f00c f9f5 	bl	800f7c8 <memcpy>
      offset += length_frame_id;
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4413      	add	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]
      return offset;
 80033e6:	68fb      	ldr	r3, [r7, #12]
    }
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	4413      	add	r3, r2
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	3301      	adds	r3, #1
 8003414:	6839      	ldr	r1, [r7, #0]
 8003416:	440b      	add	r3, r1
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	3302      	adds	r3, #2
 800342a:	6839      	ldr	r1, [r7, #0]
 800342c:	440b      	add	r3, r1
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	041b      	lsls	r3, r3, #16
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	3303      	adds	r3, #3
 8003440:	6839      	ldr	r1, [r7, #0]
 8003442:	440b      	add	r3, r1
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	061b      	lsls	r3, r3, #24
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	3304      	adds	r3, #4
 8003452:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	4413      	add	r3, r2
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	3301      	adds	r3, #1
 800346a:	6839      	ldr	r1, [r7, #0]
 800346c:	440b      	add	r3, r1
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	3302      	adds	r3, #2
 8003480:	6839      	ldr	r1, [r7, #0]
 8003482:	440b      	add	r3, r1
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	041b      	lsls	r3, r3, #16
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	3303      	adds	r3, #3
 8003496:	6839      	ldr	r1, [r7, #0]
 8003498:	440b      	add	r3, r1
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	061b      	lsls	r3, r3, #24
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	3304      	adds	r3, #4
 80034a8:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	4413      	add	r3, r2
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	3301      	adds	r3, #1
 80034c0:	6839      	ldr	r1, [r7, #0]
 80034c2:	440b      	add	r3, r1
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	021b      	lsls	r3, r3, #8
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	3302      	adds	r3, #2
 80034d6:	6839      	ldr	r1, [r7, #0]
 80034d8:	440b      	add	r3, r1
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	041b      	lsls	r3, r3, #16
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	3303      	adds	r3, #3
 80034ec:	6839      	ldr	r1, [r7, #0]
 80034ee:	440b      	add	r3, r1
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	061b      	lsls	r3, r3, #24
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	3304      	adds	r3, #4
 80034fe:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	441a      	add	r2, r3
 8003506:	f107 030c 	add.w	r3, r7, #12
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f000 fd1b 	bl	8003f48 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	3304      	adds	r3, #4
 8003516:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4413      	add	r3, r2
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	429a      	cmp	r2, r3
 8003526:	d20c      	bcs.n	8003542 <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	441a      	add	r2, r3
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	3b01      	subs	r3, #1
 8003532:	6839      	ldr	r1, [r7, #0]
 8003534:	440b      	add	r3, r1
 8003536:	7812      	ldrb	r2, [r2, #0]
 8003538:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	3301      	adds	r3, #1
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	e7ec      	b.n	800351c <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	3b01      	subs	r3, #1
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	4413      	add	r3, r2
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	3b01      	subs	r3, #1
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	441a      	add	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4413      	add	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
     return offset;
 8003566:	693b      	ldr	r3, [r7, #16]
    }
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	4b03      	ldr	r3, [pc, #12]	; (8003588 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 800357a:	4618      	mov	r0, r3
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	0800fd88 	.word	0x0800fd88

0800358c <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	4b03      	ldr	r3, [pc, #12]	; (80035a4 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 8003596:	4618      	mov	r0, r3
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	0800fd98 	.word	0x0800fd98

080035a8 <_ZN11sensor_msgs5RangeC1Ev>:
      typedef float _range_type;
      _range_type range;
      enum { ULTRASOUND = 0 };
      enum { INFRARED = 1 };

    Range():
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
      header(),
      radiation_type(0),
      field_of_view(0),
      min_range(0),
      max_range(0),
      range(0)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fe fabe 	bl	8001b34 <_ZN3ros3MsgC1Ev>
 80035b8:	4a0f      	ldr	r2, [pc, #60]	; (80035f8 <_ZN11sensor_msgs5RangeC1Ev+0x50>)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3304      	adds	r3, #4
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff fe5c 	bl	8003280 <_ZN8std_msgs6HeaderC1Ev>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	761a      	strb	r2, [r3, #24]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	61da      	str	r2, [r3, #28]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	621a      	str	r2, [r3, #32]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	625a      	str	r2, [r3, #36]	; 0x24
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	0800ffac 	.word	0x0800ffac

080035fc <_ZNK11sensor_msgs5Range9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
      offset += this->header.serialize(outbuffer + offset);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	1d18      	adds	r0, r3, #4
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	4413      	add	r3, r2
 8003614:	4619      	mov	r1, r3
 8003616:	f7ff fe53 	bl	80032c0 <_ZNK8std_msgs6Header9serializeEPh>
 800361a:	4602      	mov	r2, r0
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	4413      	add	r3, r2
 8003620:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->radiation_type >> (8 * 0)) & 0xFF;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	4413      	add	r3, r2
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	7e12      	ldrb	r2, [r2, #24]
 800362c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->radiation_type);
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	3301      	adds	r3, #1
 8003632:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_field_of_view;
      u_field_of_view.real = this->field_of_view;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	61bb      	str	r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_field_of_view.base >> (8 * 0)) & 0xFF;
 800363a:	69b9      	ldr	r1, [r7, #24]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	4413      	add	r3, r2
 8003642:	b2ca      	uxtb	r2, r1
 8003644:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_field_of_view.base >> (8 * 1)) & 0xFF;
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	0a19      	lsrs	r1, r3, #8
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3301      	adds	r3, #1
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	4413      	add	r3, r2
 8003652:	b2ca      	uxtb	r2, r1
 8003654:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_field_of_view.base >> (8 * 2)) & 0xFF;
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	0c19      	lsrs	r1, r3, #16
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	3302      	adds	r3, #2
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	4413      	add	r3, r2
 8003662:	b2ca      	uxtb	r2, r1
 8003664:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_field_of_view.base >> (8 * 3)) & 0xFF;
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	0e19      	lsrs	r1, r3, #24
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	3303      	adds	r3, #3
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	4413      	add	r3, r2
 8003672:	b2ca      	uxtb	r2, r1
 8003674:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->field_of_view);
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3304      	adds	r3, #4
 800367a:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_min_range;
      u_min_range.real = this->min_range;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_min_range.base >> (8 * 0)) & 0xFF;
 8003682:	6979      	ldr	r1, [r7, #20]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	4413      	add	r3, r2
 800368a:	b2ca      	uxtb	r2, r1
 800368c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_min_range.base >> (8 * 1)) & 0xFF;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	0a19      	lsrs	r1, r3, #8
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3301      	adds	r3, #1
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	4413      	add	r3, r2
 800369a:	b2ca      	uxtb	r2, r1
 800369c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_min_range.base >> (8 * 2)) & 0xFF;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	0c19      	lsrs	r1, r3, #16
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	3302      	adds	r3, #2
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	4413      	add	r3, r2
 80036aa:	b2ca      	uxtb	r2, r1
 80036ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_min_range.base >> (8 * 3)) & 0xFF;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	0e19      	lsrs	r1, r3, #24
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	3303      	adds	r3, #3
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	4413      	add	r3, r2
 80036ba:	b2ca      	uxtb	r2, r1
 80036bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->min_range);
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3304      	adds	r3, #4
 80036c2:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_max_range;
      u_max_range.real = this->max_range;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_max_range.base >> (8 * 0)) & 0xFF;
 80036ca:	6939      	ldr	r1, [r7, #16]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	4413      	add	r3, r2
 80036d2:	b2ca      	uxtb	r2, r1
 80036d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_max_range.base >> (8 * 1)) & 0xFF;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	0a19      	lsrs	r1, r3, #8
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3301      	adds	r3, #1
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	4413      	add	r3, r2
 80036e2:	b2ca      	uxtb	r2, r1
 80036e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_max_range.base >> (8 * 2)) & 0xFF;
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	0c19      	lsrs	r1, r3, #16
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3302      	adds	r3, #2
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	4413      	add	r3, r2
 80036f2:	b2ca      	uxtb	r2, r1
 80036f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_max_range.base >> (8 * 3)) & 0xFF;
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	0e19      	lsrs	r1, r3, #24
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3303      	adds	r3, #3
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	4413      	add	r3, r2
 8003702:	b2ca      	uxtb	r2, r1
 8003704:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->max_range);
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	3304      	adds	r3, #4
 800370a:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_range;
      u_range.real = this->range;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003710:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_range.base >> (8 * 0)) & 0xFF;
 8003712:	68f9      	ldr	r1, [r7, #12]
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	4413      	add	r3, r2
 800371a:	b2ca      	uxtb	r2, r1
 800371c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_range.base >> (8 * 1)) & 0xFF;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	0a19      	lsrs	r1, r3, #8
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	3301      	adds	r3, #1
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	4413      	add	r3, r2
 800372a:	b2ca      	uxtb	r2, r1
 800372c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_range.base >> (8 * 2)) & 0xFF;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	0c19      	lsrs	r1, r3, #16
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	3302      	adds	r3, #2
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	4413      	add	r3, r2
 800373a:	b2ca      	uxtb	r2, r1
 800373c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_range.base >> (8 * 3)) & 0xFF;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	0e19      	lsrs	r1, r3, #24
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	3303      	adds	r3, #3
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	4413      	add	r3, r2
 800374a:	b2ca      	uxtb	r2, r1
 800374c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->range);
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3304      	adds	r3, #4
 8003752:	61fb      	str	r3, [r7, #28]
      return offset;
 8003754:	69fb      	ldr	r3, [r7, #28]
    }
 8003756:	4618      	mov	r0, r3
 8003758:	3720      	adds	r7, #32
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <_ZN11sensor_msgs5Range11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800375e:	b580      	push	{r7, lr}
 8003760:	b088      	sub	sp, #32
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	61fb      	str	r3, [r7, #28]
      offset += this->header.deserialize(inbuffer + offset);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	1d18      	adds	r0, r3, #4
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	4413      	add	r3, r2
 8003776:	4619      	mov	r1, r3
 8003778:	f7ff fe3a 	bl	80033f0 <_ZN8std_msgs6Header11deserializeEPh>
 800377c:	4602      	mov	r2, r0
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	61fb      	str	r3, [r7, #28]
      this->radiation_type =  ((uint8_t) (*(inbuffer + offset)));
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	4413      	add	r3, r2
 800378a:	781a      	ldrb	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	761a      	strb	r2, [r3, #24]
      offset += sizeof(this->radiation_type);
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	3301      	adds	r3, #1
 8003794:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_field_of_view;
      u_field_of_view.base = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	61bb      	str	r3, [r7, #24]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	6839      	ldr	r1, [r7, #0]
 80037a0:	440a      	add	r2, r1
 80037a2:	7812      	ldrb	r2, [r2, #0]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3301      	adds	r3, #1
 80037ae:	6839      	ldr	r1, [r7, #0]
 80037b0:	440b      	add	r3, r1
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	3302      	adds	r3, #2
 80037c0:	6839      	ldr	r1, [r7, #0]
 80037c2:	440b      	add	r3, r1
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	041b      	lsls	r3, r3, #16
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
      u_field_of_view.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3303      	adds	r3, #3
 80037d2:	6839      	ldr	r1, [r7, #0]
 80037d4:	440b      	add	r3, r1
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	061b      	lsls	r3, r3, #24
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
      this->field_of_view = u_field_of_view.real;
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->field_of_view);
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	3304      	adds	r3, #4
 80037e8:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_min_range;
      u_min_range.base = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	6839      	ldr	r1, [r7, #0]
 80037f4:	440a      	add	r2, r1
 80037f6:	7812      	ldrb	r2, [r2, #0]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3301      	adds	r3, #1
 8003802:	6839      	ldr	r1, [r7, #0]
 8003804:	440b      	add	r3, r1
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	3302      	adds	r3, #2
 8003814:	6839      	ldr	r1, [r7, #0]
 8003816:	440b      	add	r3, r1
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	041b      	lsls	r3, r3, #16
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
      u_min_range.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	3303      	adds	r3, #3
 8003826:	6839      	ldr	r1, [r7, #0]
 8003828:	440b      	add	r3, r1
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	061b      	lsls	r3, r3, #24
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]
      this->min_range = u_min_range.real;
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	621a      	str	r2, [r3, #32]
      offset += sizeof(this->min_range);
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	3304      	adds	r3, #4
 800383c:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_max_range;
      u_max_range.base = 0;
 800383e:	2300      	movs	r3, #0
 8003840:	613b      	str	r3, [r7, #16]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	6839      	ldr	r1, [r7, #0]
 8003848:	440a      	add	r2, r1
 800384a:	7812      	ldrb	r2, [r2, #0]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3301      	adds	r3, #1
 8003856:	6839      	ldr	r1, [r7, #0]
 8003858:	440b      	add	r3, r1
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	021b      	lsls	r3, r3, #8
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	3302      	adds	r3, #2
 8003868:	6839      	ldr	r1, [r7, #0]
 800386a:	440b      	add	r3, r1
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	041b      	lsls	r3, r3, #16
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
      u_max_range.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3303      	adds	r3, #3
 800387a:	6839      	ldr	r1, [r7, #0]
 800387c:	440b      	add	r3, r1
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	061b      	lsls	r3, r3, #24
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
      this->max_range = u_max_range.real;
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	625a      	str	r2, [r3, #36]	; 0x24
      offset += sizeof(this->max_range);
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	3304      	adds	r3, #4
 8003890:	61fb      	str	r3, [r7, #28]
      union {
        float real;
        uint32_t base;
      } u_range;
      u_range.base = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	6839      	ldr	r1, [r7, #0]
 800389c:	440a      	add	r2, r1
 800389e:	7812      	ldrb	r2, [r2, #0]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	3301      	adds	r3, #1
 80038aa:	6839      	ldr	r1, [r7, #0]
 80038ac:	440b      	add	r3, r1
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	021b      	lsls	r3, r3, #8
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	3302      	adds	r3, #2
 80038bc:	6839      	ldr	r1, [r7, #0]
 80038be:	440b      	add	r3, r1
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	041b      	lsls	r3, r3, #16
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]
      u_range.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	3303      	adds	r3, #3
 80038ce:	6839      	ldr	r1, [r7, #0]
 80038d0:	440b      	add	r3, r1
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	061b      	lsls	r3, r3, #24
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]
      this->range = u_range.real;
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->range);
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	3304      	adds	r3, #4
 80038e4:	61fb      	str	r3, [r7, #28]
     return offset;
 80038e6:	69fb      	ldr	r3, [r7, #28]
    }
 80038e8:	4618      	mov	r0, r3
 80038ea:	3720      	adds	r7, #32
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <_ZN11sensor_msgs5Range7getTypeEv>:

    const char * getType(){ return "sensor_msgs/Range"; };
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	4b03      	ldr	r3, [pc, #12]	; (8003908 <_ZN11sensor_msgs5Range7getTypeEv+0x18>)
 80038fa:	4618      	mov	r0, r3
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	0800fdbc 	.word	0x0800fdbc

0800390c <_ZN11sensor_msgs5Range6getMD5Ev>:
    const char * getMD5(){ return "c005c34273dc426c67a020a87bc24148"; };
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	4b03      	ldr	r3, [pc, #12]	; (8003924 <_ZN11sensor_msgs5Range6getMD5Ev+0x18>)
 8003916:	4618      	mov	r0, r3
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	0800fdd0 	.word	0x0800fdd0

08003928 <rpm_rightFront_subCb>:
static nbt_t ros_nbt;
static nbt_t state_nbt;
static nbt_t laser_sensors_data_nbt;

extern "C" void rpm_rightFront_subCb(const std_msgs::Int8& msg)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003936:	2b05      	cmp	r3, #5
 8003938:	dd08      	ble.n	800394c <rpm_rightFront_subCb+0x24>
		speedDataRightFrontWheel = msg.data;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8003940:	4b14      	ldr	r3, [pc, #80]	; (8003994 <rpm_rightFront_subCb+0x6c>)
 8003942:	701a      	strb	r2, [r3, #0]
		sideDataRightFrontWheel = 0; //CW
 8003944:	4b14      	ldr	r3, [pc, #80]	; (8003998 <rpm_rightFront_subCb+0x70>)
 8003946:	2200      	movs	r2, #0
 8003948:	701a      	strb	r2, [r3, #0]
	}
	else if (msg.data == 0) {
		speedDataRightFrontWheel = 0;
		sideDataRightFrontWheel = 2;
	}
}
 800394a:	e01d      	b.n	8003988 <rpm_rightFront_subCb+0x60>
	else if (msg.data <= -6) {
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003952:	f113 0f05 	cmn.w	r3, #5
 8003956:	da0c      	bge.n	8003972 <rpm_rightFront_subCb+0x4a>
		speedDataRightFrontWheel = -(msg.data);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800395e:	b2db      	uxtb	r3, r3
 8003960:	425b      	negs	r3, r3
 8003962:	b2db      	uxtb	r3, r3
 8003964:	b25a      	sxtb	r2, r3
 8003966:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <rpm_rightFront_subCb+0x6c>)
 8003968:	701a      	strb	r2, [r3, #0]
		sideDataRightFrontWheel = 1; //CCW
 800396a:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <rpm_rightFront_subCb+0x70>)
 800396c:	2201      	movs	r2, #1
 800396e:	701a      	strb	r2, [r3, #0]
}
 8003970:	e00a      	b.n	8003988 <rpm_rightFront_subCb+0x60>
	else if (msg.data == 0) {
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d105      	bne.n	8003988 <rpm_rightFront_subCb+0x60>
		speedDataRightFrontWheel = 0;
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <rpm_rightFront_subCb+0x6c>)
 800397e:	2200      	movs	r2, #0
 8003980:	701a      	strb	r2, [r3, #0]
		sideDataRightFrontWheel = 2;
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <rpm_rightFront_subCb+0x70>)
 8003984:	2202      	movs	r2, #2
 8003986:	701a      	strb	r2, [r3, #0]
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	20000465 	.word	0x20000465
 8003998:	20000469 	.word	0x20000469

0800399c <rpm_leftFront_subCb>:

extern "C" void rpm_leftFront_subCb(const std_msgs::Int8& msg)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80039aa:	2b05      	cmp	r3, #5
 80039ac:	dd08      	ble.n	80039c0 <rpm_leftFront_subCb+0x24>
		speedDataLeftFrontWheel = msg.data;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80039b4:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <rpm_leftFront_subCb+0x64>)
 80039b6:	701a      	strb	r2, [r3, #0]
		sideDataLeftFrontWheel = 1; //CCW
 80039b8:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <rpm_leftFront_subCb+0x68>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	701a      	strb	r2, [r3, #0]
	}
	else {
		speedDataLeftFrontWheel = 0;
		sideDataLeftFrontWheel = 2;
	}
}
 80039be:	e018      	b.n	80039f2 <rpm_leftFront_subCb+0x56>
	else if (msg.data <= -6) {
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80039c6:	f113 0f05 	cmn.w	r3, #5
 80039ca:	da0c      	bge.n	80039e6 <rpm_leftFront_subCb+0x4a>
		speedDataLeftFrontWheel = -(msg.data);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	425b      	negs	r3, r3
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	b25a      	sxtb	r2, r3
 80039da:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <rpm_leftFront_subCb+0x64>)
 80039dc:	701a      	strb	r2, [r3, #0]
		sideDataLeftFrontWheel = 0; //CW
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <rpm_leftFront_subCb+0x68>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]
}
 80039e4:	e005      	b.n	80039f2 <rpm_leftFront_subCb+0x56>
		speedDataLeftFrontWheel = 0;
 80039e6:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <rpm_leftFront_subCb+0x64>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
		sideDataLeftFrontWheel = 2;
 80039ec:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <rpm_leftFront_subCb+0x68>)
 80039ee:	2202      	movs	r2, #2
 80039f0:	701a      	strb	r2, [r3, #0]
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	20000466 	.word	0x20000466
 8003a04:	2000046a 	.word	0x2000046a

08003a08 <rpm_rightBack_subCb>:

extern "C" void rpm_rightBack_subCb(const std_msgs::Int8& msg)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003a16:	2b05      	cmp	r3, #5
 8003a18:	dd08      	ble.n	8003a2c <rpm_rightBack_subCb+0x24>
		speedDataRightBackWheel = msg.data;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8003a20:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <rpm_rightBack_subCb+0x64>)
 8003a22:	701a      	strb	r2, [r3, #0]
		sideDataRightBackWheel = 0; //CW
 8003a24:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <rpm_rightBack_subCb+0x68>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	701a      	strb	r2, [r3, #0]
	}
	else {
		speedDataRightBackWheel = 0;
		sideDataRightBackWheel = 2;
	}
}
 8003a2a:	e018      	b.n	8003a5e <rpm_rightBack_subCb+0x56>
	else if (msg.data <= -6) {
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003a32:	f113 0f05 	cmn.w	r3, #5
 8003a36:	da0c      	bge.n	8003a52 <rpm_rightBack_subCb+0x4a>
		speedDataRightBackWheel = -(msg.data);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	425b      	negs	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	b25a      	sxtb	r2, r3
 8003a46:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <rpm_rightBack_subCb+0x64>)
 8003a48:	701a      	strb	r2, [r3, #0]
		sideDataRightBackWheel = 1; //CCW
 8003a4a:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <rpm_rightBack_subCb+0x68>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	701a      	strb	r2, [r3, #0]
}
 8003a50:	e005      	b.n	8003a5e <rpm_rightBack_subCb+0x56>
		speedDataRightBackWheel = 0;
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <rpm_rightBack_subCb+0x64>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
		sideDataRightBackWheel = 2;
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <rpm_rightBack_subCb+0x68>)
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	701a      	strb	r2, [r3, #0]
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20000467 	.word	0x20000467
 8003a70:	2000046b 	.word	0x2000046b

08003a74 <rpm_leftBack_subCb>:

extern "C" void rpm_leftBack_subCb(const std_msgs::Int8& msg)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	if (msg.data >= 6) {
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003a82:	2b05      	cmp	r3, #5
 8003a84:	dd08      	ble.n	8003a98 <rpm_leftBack_subCb+0x24>
		speedDataLeftBackWheel = msg.data;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8003a8c:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <rpm_leftBack_subCb+0x64>)
 8003a8e:	701a      	strb	r2, [r3, #0]
		sideDataLeftBackWheel = 1; //CCW
 8003a90:	4b12      	ldr	r3, [pc, #72]	; (8003adc <rpm_leftBack_subCb+0x68>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	701a      	strb	r2, [r3, #0]
	}
	else {
		speedDataLeftBackWheel = 0;
		sideDataLeftBackWheel = 2;
	}
}
 8003a96:	e018      	b.n	8003aca <rpm_leftBack_subCb+0x56>
	else if (msg.data <= -6) {
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003a9e:	f113 0f05 	cmn.w	r3, #5
 8003aa2:	da0c      	bge.n	8003abe <rpm_leftBack_subCb+0x4a>
		speedDataLeftBackWheel = -(msg.data);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	425b      	negs	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	b25a      	sxtb	r2, r3
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <rpm_leftBack_subCb+0x64>)
 8003ab4:	701a      	strb	r2, [r3, #0]
		sideDataLeftBackWheel = 0; //CW
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <rpm_leftBack_subCb+0x68>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]
}
 8003abc:	e005      	b.n	8003aca <rpm_leftBack_subCb+0x56>
		speedDataLeftBackWheel = 0;
 8003abe:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <rpm_leftBack_subCb+0x64>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	701a      	strb	r2, [r3, #0]
		sideDataLeftBackWheel = 2;
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <rpm_leftBack_subCb+0x68>)
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	701a      	strb	r2, [r3, #0]
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	20000468 	.word	0x20000468
 8003adc:	2000046c 	.word	0x2000046c

08003ae0 <cdc_receive_put>:

extern "C" void cdc_receive_put(uint8_t value)
	{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]
		ringbuffer_putchar(&rb, value);
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	4619      	mov	r1, r3
 8003aee:	4803      	ldr	r0, [pc, #12]	; (8003afc <cdc_receive_put+0x1c>)
 8003af0:	f001 f9af 	bl	8004e52 <_Z18ringbuffer_putcharP10ringbufferh>
	}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	200004cc 	.word	0x200004cc

08003b00 <init_ROS>:
extern "C" void init_ROS(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
	ringbuffer_init(&rb, RxBuffer, RxBufferSize);
 8003b04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b08:	492c      	ldr	r1, [pc, #176]	; (8003bbc <init_ROS+0xbc>)
 8003b0a:	482d      	ldr	r0, [pc, #180]	; (8003bc0 <init_ROS+0xc0>)
 8003b0c:	f001 fa47 	bl	8004f9e <_Z15ringbuffer_initP10ringbufferPhs>
	// Initialize ROS
	nh.initNode();
 8003b10:	482c      	ldr	r0, [pc, #176]	; (8003bc4 <init_ROS+0xc4>)
 8003b12:	f000 fb01 	bl	8004118 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

	nh.subscribe(rpm_rightFront_sub);
 8003b16:	492c      	ldr	r1, [pc, #176]	; (8003bc8 <init_ROS+0xc8>)
 8003b18:	482a      	ldr	r0, [pc, #168]	; (8003bc4 <init_ROS+0xc4>)
 8003b1a:	f000 fb1a 	bl	8004152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.subscribe(rpm_leftFront_sub);
 8003b1e:	492b      	ldr	r1, [pc, #172]	; (8003bcc <init_ROS+0xcc>)
 8003b20:	4828      	ldr	r0, [pc, #160]	; (8003bc4 <init_ROS+0xc4>)
 8003b22:	f000 fb16 	bl	8004152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.subscribe(rpm_rightBack_sub);
 8003b26:	492a      	ldr	r1, [pc, #168]	; (8003bd0 <init_ROS+0xd0>)
 8003b28:	4826      	ldr	r0, [pc, #152]	; (8003bc4 <init_ROS+0xc4>)
 8003b2a:	f000 fb12 	bl	8004152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>
	nh.subscribe(rpm_leftBack_sub);
 8003b2e:	4929      	ldr	r1, [pc, #164]	; (8003bd4 <init_ROS+0xd4>)
 8003b30:	4824      	ldr	r0, [pc, #144]	; (8003bc4 <init_ROS+0xc4>)
 8003b32:	f000 fb0e 	bl	8004152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>

	nh.advertise(stm);
 8003b36:	4928      	ldr	r1, [pc, #160]	; (8003bd8 <init_ROS+0xd8>)
 8003b38:	4822      	ldr	r0, [pc, #136]	; (8003bc4 <init_ROS+0xc4>)
 8003b3a:	f000 fb37 	bl	80041ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(gyro);
 8003b3e:	4927      	ldr	r1, [pc, #156]	; (8003bdc <init_ROS+0xdc>)
 8003b40:	4820      	ldr	r0, [pc, #128]	; (8003bc4 <init_ROS+0xc4>)
 8003b42:	f000 fb33 	bl	80041ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(accel);
 8003b46:	4926      	ldr	r1, [pc, #152]	; (8003be0 <init_ROS+0xe0>)
 8003b48:	481e      	ldr	r0, [pc, #120]	; (8003bc4 <init_ROS+0xc4>)
 8003b4a:	f000 fb2f 	bl	80041ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_left_front);
 8003b4e:	4925      	ldr	r1, [pc, #148]	; (8003be4 <init_ROS+0xe4>)
 8003b50:	481c      	ldr	r0, [pc, #112]	; (8003bc4 <init_ROS+0xc4>)
 8003b52:	f000 fb2b 	bl	80041ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_right_front);
 8003b56:	4924      	ldr	r1, [pc, #144]	; (8003be8 <init_ROS+0xe8>)
 8003b58:	481a      	ldr	r0, [pc, #104]	; (8003bc4 <init_ROS+0xc4>)
 8003b5a:	f000 fb27 	bl	80041ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_left_back);
 8003b5e:	4923      	ldr	r1, [pc, #140]	; (8003bec <init_ROS+0xec>)
 8003b60:	4818      	ldr	r0, [pc, #96]	; (8003bc4 <init_ROS+0xc4>)
 8003b62:	f000 fb23 	bl	80041ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(rpm_right_back);
 8003b66:	4922      	ldr	r1, [pc, #136]	; (8003bf0 <init_ROS+0xf0>)
 8003b68:	4816      	ldr	r0, [pc, #88]	; (8003bc4 <init_ROS+0xc4>)
 8003b6a:	f000 fb1f 	bl	80041ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	nh.advertise(laser_sensors_data);
 8003b6e:	4921      	ldr	r1, [pc, #132]	; (8003bf4 <init_ROS+0xf4>)
 8003b70:	4814      	ldr	r0, [pc, #80]	; (8003bc4 <init_ROS+0xc4>)
 8003b72:	f000 fb1b 	bl	80041ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

	NBT_init(&rpm_left_front_nbt, 9);
 8003b76:	2109      	movs	r1, #9
 8003b78:	481f      	ldr	r0, [pc, #124]	; (8003bf8 <init_ROS+0xf8>)
 8003b7a:	f001 f8ce 	bl	8004d1a <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_right_front_nbt, 9);
 8003b7e:	2109      	movs	r1, #9
 8003b80:	481e      	ldr	r0, [pc, #120]	; (8003bfc <init_ROS+0xfc>)
 8003b82:	f001 f8ca 	bl	8004d1a <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_left_back_nbt, 9);
 8003b86:	2109      	movs	r1, #9
 8003b88:	481d      	ldr	r0, [pc, #116]	; (8003c00 <init_ROS+0x100>)
 8003b8a:	f001 f8c6 	bl	8004d1a <_Z8NBT_initP5nbt_tm>
	NBT_init(&rpm_right_back_nbt, 9);
 8003b8e:	2109      	movs	r1, #9
 8003b90:	481c      	ldr	r0, [pc, #112]	; (8003c04 <init_ROS+0x104>)
 8003b92:	f001 f8c2 	bl	8004d1a <_Z8NBT_initP5nbt_tm>

	NBT_init(&laser_sensors_data_nbt, 9);
 8003b96:	2109      	movs	r1, #9
 8003b98:	481b      	ldr	r0, [pc, #108]	; (8003c08 <init_ROS+0x108>)
 8003b9a:	f001 f8be 	bl	8004d1a <_Z8NBT_initP5nbt_tm>

	NBT_init(&gyro_nbt, 5);
 8003b9e:	2105      	movs	r1, #5
 8003ba0:	481a      	ldr	r0, [pc, #104]	; (8003c0c <init_ROS+0x10c>)
 8003ba2:	f001 f8ba 	bl	8004d1a <_Z8NBT_initP5nbt_tm>
	NBT_init(&accel_nbt, 5);
 8003ba6:	2105      	movs	r1, #5
 8003ba8:	4819      	ldr	r0, [pc, #100]	; (8003c10 <init_ROS+0x110>)
 8003baa:	f001 f8b6 	bl	8004d1a <_Z8NBT_initP5nbt_tm>

	NBT_init(&ros_nbt, 1);
 8003bae:	2101      	movs	r1, #1
 8003bb0:	4818      	ldr	r0, [pc, #96]	; (8003c14 <init_ROS+0x114>)
 8003bb2:	f001 f8b2 	bl	8004d1a <_Z8NBT_initP5nbt_tm>
}
 8003bb6:	bf00      	nop
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20005c9c 	.word	0x20005c9c
 8003bc0:	200004cc 	.word	0x200004cc
 8003bc4:	200004d8 	.word	0x200004d8
 8003bc8:	20000dcc 	.word	0x20000dcc
 8003bcc:	20000de8 	.word	0x20000de8
 8003bd0:	20000e04 	.word	0x20000e04
 8003bd4:	20000e20 	.word	0x20000e20
 8003bd8:	20000d40 	.word	0x20000d40
 8003bdc:	20000d54 	.word	0x20000d54
 8003be0:	20000d68 	.word	0x20000d68
 8003be4:	20000d90 	.word	0x20000d90
 8003be8:	20000d7c 	.word	0x20000d7c
 8003bec:	20000db8 	.word	0x20000db8
 8003bf0:	20000da4 	.word	0x20000da4
 8003bf4:	20000e3c 	.word	0x20000e3c
 8003bf8:	20000e7c 	.word	0x20000e7c
 8003bfc:	20000e74 	.word	0x20000e74
 8003c00:	20000e8c 	.word	0x20000e8c
 8003c04:	20000e84 	.word	0x20000e84
 8003c08:	20000e9c 	.word	0x20000e9c
 8003c0c:	20000e64 	.word	0x20000e64
 8003c10:	20000e6c 	.word	0x20000e6c
 8003c14:	20000e94 	.word	0x20000e94

08003c18 <laser_sensors_data_handler>:

extern "C" void laser_sensors_data_handler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
	if (NBT_handler(&laser_sensors_data_nbt)) {
 8003c1c:	480b      	ldr	r0, [pc, #44]	; (8003c4c <laser_sensors_data_handler+0x34>)
 8003c1e:	f001 f88d 	bl	8004d3c <_Z11NBT_handlerP5nbt_t>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00f      	beq.n	8003c48 <laser_sensors_data_handler+0x30>
		laser_sensors_data_array.data_length = 16;
 8003c28:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <laser_sensors_data_handler+0x38>)
 8003c2a:	2210      	movs	r2, #16
 8003c2c:	625a      	str	r2, [r3, #36]	; 0x24
		laser_sensors_data_array.data = laser_sensor_data;
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <laser_sensors_data_handler+0x38>)
 8003c30:	4a08      	ldr	r2, [pc, #32]	; (8003c54 <laser_sensors_data_handler+0x3c>)
 8003c32:	62da      	str	r2, [r3, #44]	; 0x2c
    	if (nh.connected()) {
 8003c34:	4808      	ldr	r0, [pc, #32]	; (8003c58 <laser_sensors_data_handler+0x40>)
 8003c36:	f000 fae7 	bl	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <laser_sensors_data_handler+0x30>
    		laser_sensors_data.publish(&laser_sensors_data_array);
 8003c40:	4903      	ldr	r1, [pc, #12]	; (8003c50 <laser_sensors_data_handler+0x38>)
 8003c42:	4806      	ldr	r0, [pc, #24]	; (8003c5c <laser_sensors_data_handler+0x44>)
 8003c44:	f7fe fdc3 	bl	80027ce <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
	}
}
 8003c48:	bf00      	nop
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20000e9c 	.word	0x20000e9c
 8003c50:	20000a28 	.word	0x20000a28
 8003c54:	20000470 	.word	0x20000470
 8003c58:	200004d8 	.word	0x200004d8
 8003c5c:	20000e3c 	.word	0x20000e3c

08003c60 <rpm_right_front_handler>:
    	}
	}
}

extern "C" void rpm_right_front_handler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
	if (NBT_handler(&rpm_right_front_nbt))
 8003c64:	4815      	ldr	r0, [pc, #84]	; (8003cbc <rpm_right_front_handler+0x5c>)
 8003c66:	f001 f869 	bl	8004d3c <_Z11NBT_handlerP5nbt_t>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d022      	beq.n	8003cb6 <rpm_right_front_handler+0x56>
	{
		if (sideRXDataRightFrontWheel == 2) {
 8003c70:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <rpm_right_front_handler+0x60>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d105      	bne.n	8003c84 <rpm_right_front_handler+0x24>
		    uint_msg_right_front.data = speedRXDataRightFrontWheel;
 8003c78:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <rpm_right_front_handler+0x64>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	b25a      	sxtb	r2, r3
 8003c7e:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <rpm_right_front_handler+0x68>)
 8003c80:	711a      	strb	r2, [r3, #4]
 8003c82:	e00e      	b.n	8003ca2 <rpm_right_front_handler+0x42>
		}
		else if (sideRXDataRightFrontWheel == 1) {
 8003c84:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <rpm_right_front_handler+0x60>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d107      	bne.n	8003c9c <rpm_right_front_handler+0x3c>
			uint_msg_right_front.data = -speedRXDataRightFrontWheel;
 8003c8c:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <rpm_right_front_handler+0x64>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	425b      	negs	r3, r3
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	b25a      	sxtb	r2, r3
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <rpm_right_front_handler+0x68>)
 8003c98:	711a      	strb	r2, [r3, #4]
 8003c9a:	e002      	b.n	8003ca2 <rpm_right_front_handler+0x42>
		}
		else {
			uint_msg_right_front.data = 0;
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <rpm_right_front_handler+0x68>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	711a      	strb	r2, [r3, #4]
		}
    	if (nh.connected()) {
 8003ca2:	480a      	ldr	r0, [pc, #40]	; (8003ccc <rpm_right_front_handler+0x6c>)
 8003ca4:	f000 fab0 	bl	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <rpm_right_front_handler+0x56>
    		rpm_right_front.publish(&uint_msg_right_front);
 8003cae:	4906      	ldr	r1, [pc, #24]	; (8003cc8 <rpm_right_front_handler+0x68>)
 8003cb0:	4807      	ldr	r0, [pc, #28]	; (8003cd0 <rpm_right_front_handler+0x70>)
 8003cb2:	f7fe fd8c 	bl	80027ce <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
	}
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000e74 	.word	0x20000e74
 8003cc0:	2000510c 	.word	0x2000510c
 8003cc4:	20005130 	.word	0x20005130
 8003cc8:	20000a08 	.word	0x20000a08
 8003ccc:	200004d8 	.word	0x200004d8
 8003cd0:	20000d7c 	.word	0x20000d7c

08003cd4 <rpm_left_front_handler>:

extern "C" void rpm_left_front_handler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
	if (NBT_handler(&rpm_left_front_nbt))
 8003cd8:	4815      	ldr	r0, [pc, #84]	; (8003d30 <rpm_left_front_handler+0x5c>)
 8003cda:	f001 f82f 	bl	8004d3c <_Z11NBT_handlerP5nbt_t>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d022      	beq.n	8003d2a <rpm_left_front_handler+0x56>
	{
		if (sideRXDataLeftFrontWheel == 1) {
 8003ce4:	4b13      	ldr	r3, [pc, #76]	; (8003d34 <rpm_left_front_handler+0x60>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d105      	bne.n	8003cf8 <rpm_left_front_handler+0x24>
		    uint_msg_left_front.data = speedRXDataLeftFrontWheel;
 8003cec:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <rpm_left_front_handler+0x64>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	b25a      	sxtb	r2, r3
 8003cf2:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <rpm_left_front_handler+0x68>)
 8003cf4:	711a      	strb	r2, [r3, #4]
 8003cf6:	e00e      	b.n	8003d16 <rpm_left_front_handler+0x42>
		}
		else if (sideRXDataLeftFrontWheel == 2) {
 8003cf8:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <rpm_left_front_handler+0x60>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d107      	bne.n	8003d10 <rpm_left_front_handler+0x3c>
		  	uint_msg_left_front.data = -speedRXDataLeftFrontWheel;
 8003d00:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <rpm_left_front_handler+0x64>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	425b      	negs	r3, r3
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	b25a      	sxtb	r2, r3
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <rpm_left_front_handler+0x68>)
 8003d0c:	711a      	strb	r2, [r3, #4]
 8003d0e:	e002      	b.n	8003d16 <rpm_left_front_handler+0x42>
		}
		else {
		  	uint_msg_left_front.data = 0;
 8003d10:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <rpm_left_front_handler+0x68>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	711a      	strb	r2, [r3, #4]
		}
    	if (nh.connected()) {
 8003d16:	480a      	ldr	r0, [pc, #40]	; (8003d40 <rpm_left_front_handler+0x6c>)
 8003d18:	f000 fa76 	bl	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <rpm_left_front_handler+0x56>
    		rpm_left_front.publish(&uint_msg_left_front);
 8003d22:	4906      	ldr	r1, [pc, #24]	; (8003d3c <rpm_left_front_handler+0x68>)
 8003d24:	4807      	ldr	r0, [pc, #28]	; (8003d44 <rpm_left_front_handler+0x70>)
 8003d26:	f7fe fd52 	bl	80027ce <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
	}
}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000e7c 	.word	0x20000e7c
 8003d34:	20005128 	.word	0x20005128
 8003d38:	20004cc4 	.word	0x20004cc4
 8003d3c:	20000a10 	.word	0x20000a10
 8003d40:	200004d8 	.word	0x200004d8
 8003d44:	20000d90 	.word	0x20000d90

08003d48 <rpm_right_back_handler>:

extern "C" void rpm_right_back_handler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
	if (NBT_handler(&rpm_right_back_nbt))
 8003d4c:	4815      	ldr	r0, [pc, #84]	; (8003da4 <rpm_right_back_handler+0x5c>)
 8003d4e:	f000 fff5 	bl	8004d3c <_Z11NBT_handlerP5nbt_t>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d022      	beq.n	8003d9e <rpm_right_back_handler+0x56>
	{
		if (sideRXDataRightBackWheel == 2) {
 8003d58:	4b13      	ldr	r3, [pc, #76]	; (8003da8 <rpm_right_back_handler+0x60>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d105      	bne.n	8003d6c <rpm_right_back_handler+0x24>
		    uint_msg_right_back.data = speedRXDataRightBackWheel;
 8003d60:	4b12      	ldr	r3, [pc, #72]	; (8003dac <rpm_right_back_handler+0x64>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	b25a      	sxtb	r2, r3
 8003d66:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <rpm_right_back_handler+0x68>)
 8003d68:	711a      	strb	r2, [r3, #4]
 8003d6a:	e00e      	b.n	8003d8a <rpm_right_back_handler+0x42>
		}
		else if (sideRXDataRightBackWheel == 1) {
 8003d6c:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <rpm_right_back_handler+0x60>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d107      	bne.n	8003d84 <rpm_right_back_handler+0x3c>
			uint_msg_right_back.data = -speedRXDataRightBackWheel;
 8003d74:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <rpm_right_back_handler+0x64>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	425b      	negs	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	b25a      	sxtb	r2, r3
 8003d7e:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <rpm_right_back_handler+0x68>)
 8003d80:	711a      	strb	r2, [r3, #4]
 8003d82:	e002      	b.n	8003d8a <rpm_right_back_handler+0x42>
		}
		else {
			uint_msg_right_back.data = 0;
 8003d84:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <rpm_right_back_handler+0x68>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	711a      	strb	r2, [r3, #4]
		}
    	if (nh.connected()) {
 8003d8a:	480a      	ldr	r0, [pc, #40]	; (8003db4 <rpm_right_back_handler+0x6c>)
 8003d8c:	f000 fa3c 	bl	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <rpm_right_back_handler+0x56>
    		rpm_right_back.publish(&uint_msg_right_back);
 8003d96:	4906      	ldr	r1, [pc, #24]	; (8003db0 <rpm_right_back_handler+0x68>)
 8003d98:	4807      	ldr	r0, [pc, #28]	; (8003db8 <rpm_right_back_handler+0x70>)
 8003d9a:	f7fe fd18 	bl	80027ce <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
	}
}
 8003d9e:	bf00      	nop
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000e84 	.word	0x20000e84
 8003da8:	20004c34 	.word	0x20004c34
 8003dac:	20004ce4 	.word	0x20004ce4
 8003db0:	20000a18 	.word	0x20000a18
 8003db4:	200004d8 	.word	0x200004d8
 8003db8:	20000da4 	.word	0x20000da4

08003dbc <rpm_left_back_handler>:

extern "C" void rpm_left_back_handler(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
	if (NBT_handler(&rpm_left_back_nbt))
 8003dc0:	4815      	ldr	r0, [pc, #84]	; (8003e18 <rpm_left_back_handler+0x5c>)
 8003dc2:	f000 ffbb 	bl	8004d3c <_Z11NBT_handlerP5nbt_t>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d022      	beq.n	8003e12 <rpm_left_back_handler+0x56>
	{
		if (sideRXDataLeftBackWheel == 1) {
 8003dcc:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <rpm_left_back_handler+0x60>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d105      	bne.n	8003de0 <rpm_left_back_handler+0x24>
		  	uint_msg_left_back.data = speedRXDataLeftBackWheel;
 8003dd4:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <rpm_left_back_handler+0x64>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	b25a      	sxtb	r2, r3
 8003dda:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <rpm_left_back_handler+0x68>)
 8003ddc:	711a      	strb	r2, [r3, #4]
 8003dde:	e00e      	b.n	8003dfe <rpm_left_back_handler+0x42>
		}
		else if (sideRXDataLeftBackWheel == 2) {
 8003de0:	4b0e      	ldr	r3, [pc, #56]	; (8003e1c <rpm_left_back_handler+0x60>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d107      	bne.n	8003df8 <rpm_left_back_handler+0x3c>
			uint_msg_left_back.data = -speedRXDataLeftBackWheel;
 8003de8:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <rpm_left_back_handler+0x64>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	425b      	negs	r3, r3
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	b25a      	sxtb	r2, r3
 8003df2:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <rpm_left_back_handler+0x68>)
 8003df4:	711a      	strb	r2, [r3, #4]
 8003df6:	e002      	b.n	8003dfe <rpm_left_back_handler+0x42>
		}
		else {
			uint_msg_left_back.data = 0;
 8003df8:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <rpm_left_back_handler+0x68>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	711a      	strb	r2, [r3, #4]
		}
		if (nh.connected()) {
 8003dfe:	480a      	ldr	r0, [pc, #40]	; (8003e28 <rpm_left_back_handler+0x6c>)
 8003e00:	f000 fa02 	bl	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <rpm_left_back_handler+0x56>
			rpm_left_back.publish(&uint_msg_left_back);
 8003e0a:	4906      	ldr	r1, [pc, #24]	; (8003e24 <rpm_left_back_handler+0x68>)
 8003e0c:	4807      	ldr	r0, [pc, #28]	; (8003e2c <rpm_left_back_handler+0x70>)
 8003e0e:	f7fe fcde 	bl	80027ce <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		}
	}
}
 8003e12:	bf00      	nop
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20000e8c 	.word	0x20000e8c
 8003e1c:	20004cdc 	.word	0x20004cdc
 8003e20:	20004ccc 	.word	0x20004ccc
 8003e24:	20000a20 	.word	0x20000a20
 8003e28:	200004d8 	.word	0x200004d8
 8003e2c:	20000db8 	.word	0x20000db8

08003e30 <gyro_handler>:

extern "C" void gyro_handler(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
    gyro_msg.x = gyroX;
 8003e34:	4b0e      	ldr	r3, [pc, #56]	; (8003e70 <gyro_handler+0x40>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a0e      	ldr	r2, [pc, #56]	; (8003e74 <gyro_handler+0x44>)
 8003e3a:	6053      	str	r3, [r2, #4]
    gyro_msg.y = gyroY;
 8003e3c:	4b0e      	ldr	r3, [pc, #56]	; (8003e78 <gyro_handler+0x48>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a0c      	ldr	r2, [pc, #48]	; (8003e74 <gyro_handler+0x44>)
 8003e42:	6093      	str	r3, [r2, #8]
    gyro_msg.z = gyroZ;
 8003e44:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <gyro_handler+0x4c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a0a      	ldr	r2, [pc, #40]	; (8003e74 <gyro_handler+0x44>)
 8003e4a:	60d3      	str	r3, [r2, #12]
    if (nh.connected()) {
 8003e4c:	480c      	ldr	r0, [pc, #48]	; (8003e80 <gyro_handler+0x50>)
 8003e4e:	f000 f9db 	bl	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d009      	beq.n	8003e6c <gyro_handler+0x3c>
    	if (NBT_handler(&gyro_nbt))
 8003e58:	480a      	ldr	r0, [pc, #40]	; (8003e84 <gyro_handler+0x54>)
 8003e5a:	f000 ff6f 	bl	8004d3c <_Z11NBT_handlerP5nbt_t>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <gyro_handler+0x3c>
    	{
    		gyro.publish(&gyro_msg);
 8003e64:	4903      	ldr	r1, [pc, #12]	; (8003e74 <gyro_handler+0x44>)
 8003e66:	4808      	ldr	r0, [pc, #32]	; (8003e88 <gyro_handler+0x58>)
 8003e68:	f7fe fcb1 	bl	80027ce <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
    }
}
 8003e6c:	bf00      	nop
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20004cb4 	.word	0x20004cb4
 8003e74:	20000a60 	.word	0x20000a60
 8003e78:	2000515c 	.word	0x2000515c
 8003e7c:	20004cd0 	.word	0x20004cd0
 8003e80:	200004d8 	.word	0x200004d8
 8003e84:	20000e64 	.word	0x20000e64
 8003e88:	20000d54 	.word	0x20000d54

08003e8c <accel_handler>:

extern "C" void accel_handler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
    accel_msg.x = accelX;
 8003e90:	4b0e      	ldr	r3, [pc, #56]	; (8003ecc <accel_handler+0x40>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a0e      	ldr	r2, [pc, #56]	; (8003ed0 <accel_handler+0x44>)
 8003e96:	6053      	str	r3, [r2, #4]
    accel_msg.y = accelY;
 8003e98:	4b0e      	ldr	r3, [pc, #56]	; (8003ed4 <accel_handler+0x48>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a0c      	ldr	r2, [pc, #48]	; (8003ed0 <accel_handler+0x44>)
 8003e9e:	6093      	str	r3, [r2, #8]
    accel_msg.z = accelZ;
 8003ea0:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <accel_handler+0x4c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a0a      	ldr	r2, [pc, #40]	; (8003ed0 <accel_handler+0x44>)
 8003ea6:	60d3      	str	r3, [r2, #12]
    if (nh.connected()) {
 8003ea8:	480c      	ldr	r0, [pc, #48]	; (8003edc <accel_handler+0x50>)
 8003eaa:	f000 f9ad 	bl	8004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d009      	beq.n	8003ec8 <accel_handler+0x3c>
    	if (NBT_handler(&accel_nbt))
 8003eb4:	480a      	ldr	r0, [pc, #40]	; (8003ee0 <accel_handler+0x54>)
 8003eb6:	f000 ff41 	bl	8004d3c <_Z11NBT_handlerP5nbt_t>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <accel_handler+0x3c>
    	{
    		accel.publish(&accel_msg);
 8003ec0:	4903      	ldr	r1, [pc, #12]	; (8003ed0 <accel_handler+0x44>)
 8003ec2:	4808      	ldr	r0, [pc, #32]	; (8003ee4 <accel_handler+0x58>)
 8003ec4:	f7fe fc83 	bl	80027ce <_ZN3ros9Publisher7publishEPKNS_3MsgE>
    	}
    }
}
 8003ec8:	bf00      	nop
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20004c30 	.word	0x20004c30
 8003ed0:	20000a70 	.word	0x20000a70
 8003ed4:	20004c28 	.word	0x20004c28
 8003ed8:	20005114 	.word	0x20005114
 8003edc:	200004d8 	.word	0x200004d8
 8003ee0:	20000e6c 	.word	0x20000e6c
 8003ee4:	20000d68 	.word	0x20000d68

08003ee8 <spinOnce>:

extern "C" void spinOnce(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
	if (NBT_handler(&ros_nbt))	{
 8003eec:	4805      	ldr	r0, [pc, #20]	; (8003f04 <spinOnce+0x1c>)
 8003eee:	f000 ff25 	bl	8004d3c <_Z11NBT_handlerP5nbt_t>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <spinOnce+0x16>
		nh.spinOnce();
 8003ef8:	4803      	ldr	r0, [pc, #12]	; (8003f08 <spinOnce+0x20>)
 8003efa:	f000 f992 	bl	8004222 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	}
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000e94 	.word	0x20000e94
 8003f08:	200004d8 	.word	0x200004d8

08003f0c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d80d      	bhi.n	8003f3c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	fa22 f103 	lsr.w	r1, r2, r3
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	b2ca      	uxtb	r2, r1
 8003f32:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	3301      	adds	r3, #1
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	e7ee      	b.n	8003f1a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003f3c:	bf00      	nop
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	d811      	bhi.n	8003f86 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6839      	ldr	r1, [r7, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	440a      	add	r2, r1
 8003f6c:	7812      	ldrb	r2, [r2, #0]
 8003f6e:	4611      	mov	r1, r2
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	00d2      	lsls	r2, r2, #3
 8003f74:	fa01 f202 	lsl.w	r2, r1, r2
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3301      	adds	r3, #1
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	e7ea      	b.n	8003f5c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003f86:	bf00      	nop
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	4a04      	ldr	r2, [pc, #16]	; (8003fb0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	08010084 	.word	0x08010084

08003fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff ffe8 	bl	8003f94 <_ZN3ros15NodeHandleBase_C1Ev>
 8003fc4:	4a39      	ldr	r2, [pc, #228]	; (80040ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xf8>)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fe fc1d 	bl	800280e <_ZN13STM32HardwareC1Ev>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe f91a 	bl	800221c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2b18      	cmp	r3, #24
 8003ff0:	d80a      	bhi.n	8004008 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	3301      	adds	r3, #1
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	e7f1      	b.n	8003fec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004008:	2300      	movs	r3, #0
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	2b18      	cmp	r3, #24
 8004010:	d80b      	bhi.n	800402a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	2200      	movs	r2, #0
 8004020:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	3301      	adds	r3, #1
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	e7f0      	b.n	800400c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004034:	d209      	bcs.n	800404a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x96>
      message_in[i] = 0;
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	3318      	adds	r3, #24
 800403e:	2200      	movs	r2, #0
 8004040:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	3301      	adds	r3, #1
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	e7f1      	b.n	800402e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800404a:	2300      	movs	r3, #0
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004054:	d20a      	bcs.n	800406c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xb8>
      message_out[i] = 0;
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4413      	add	r3, r2
 800405c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	3301      	adds	r3, #1
 8004068:	60bb      	str	r3, [r7, #8]
 800406a:	e7f0      	b.n	800404e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    req_param_resp.floats_length = 0;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    req_param_resp.floats = NULL;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    req_param_resp.ints_length = 0;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514

    spin_timeout_ = 0;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	615a      	str	r2, [r3, #20]
  }
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	0800ff98 	.word	0x0800ff98

080040b0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	4a04      	ldr	r2, [pc, #16]	; (80040cc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4618      	mov	r0, r3
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	0801006c 	.word	0x0801006c

080040d0 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff ffe5 	bl	80040b0 <_ZN3ros11Subscriber_C1Ev>
 80040e6:	4a0b      	ldr	r2, [pc, #44]	; (8004114 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei+0x44>)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	330c      	adds	r3, #12
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fe fbd7 	bl	80028a4 <_ZN8std_msgs4Int8C1Ev>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	615a      	str	r2, [r3, #20]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	609a      	str	r2, [r3, #8]
  };
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	0800ff80 	.word	0x0800ff80

08004118 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3304      	adds	r3, #4
 8004124:	4618      	mov	r0, r3
 8004126:	f7fe fb7d 	bl	8002824 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b18      	cmp	r3, #24
 8004164:	dc1b      	bgt.n	800419e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10e      	bne.n	8004196 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	605a      	str	r2, [r3, #4]
        return true;
 8004192:	2301      	movs	r3, #1
 8004194:	e004      	b.n	80041a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3301      	adds	r3, #1
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e7e0      	b.n	8004160 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4Int8EvEEEEbRT_+0xe>
      }
    }
    return false;
 800419e:	2300      	movs	r3, #0
  }
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b18      	cmp	r3, #24
 80041be:	dc1c      	bgt.n	80041fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4e>
      if (publishers[i] == 0) // empty slot
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80041c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d110      	bne.n	80041f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80041d8:	6839      	ldr	r1, [r7, #0]
 80041da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	60da      	str	r2, [r3, #12]
        return true;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e004      	b.n	80041fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3301      	adds	r3, #1
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	e7df      	b.n	80041ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80041fa:	2300      	movs	r3, #0
  }
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
    return configured_;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3304      	adds	r3, #4
 800422e:	4618      	mov	r0, r3
 8004230:	f7fe fb2c 	bl	800288c <_ZN13STM32Hardware4timeEv>
 8004234:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004244:	4293      	cmp	r3, r2
 8004246:	d903      	bls.n	8004250 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d009      	beq.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	429a      	cmp	r2, r3
 8004264:	d903      	bls.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d013      	beq.n	800429e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3304      	adds	r3, #4
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe fb06 	bl	800288c <_ZN13STM32Hardware4timeEv>
 8004280:	4602      	mov	r2, r0
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1ad2      	subs	r2, r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	429a      	cmp	r2, r3
 800428c:	bf8c      	ite	hi
 800428e:	2301      	movhi	r3, #1
 8004290:	2300      	movls	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8004298:	f06f 0301 	mvn.w	r3, #1
 800429c:	e193      	b.n	80045c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      int data = hardware_.read();
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3304      	adds	r3, #4
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fe fac8 	bl	8002838 <_ZN13STM32Hardware4readEv>
 80042a8:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f2c0 8173 	blt.w	8004598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x376>
      checksum_ += data;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	441a      	add	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80042c8:	2b07      	cmp	r3, #7
 80042ca:	d11d      	bne.n	8004308 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80042d2:	1c59      	adds	r1, r3, #1
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	b2d1      	uxtb	r1, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	4413      	add	r3, r2
 80042e2:	460a      	mov	r2, r1
 80042e4:	761a      	strb	r2, [r3, #24]
        bytes_--;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80042ec:	1e5a      	subs	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1b7      	bne.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2208      	movs	r2, #8
 8004302:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004306:	e7b2      	b.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d128      	bne.n	8004364 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2bff      	cmp	r3, #255	; 0xff
 8004316:	d10d      	bne.n	8004334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f103 0214 	add.w	r2, r3, #20
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8004332:	e79c      	b.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3304      	adds	r3, #4
 8004338:	4618      	mov	r0, r3
 800433a:	f7fe faa7 	bl	800288c <_ZN13STM32Hardware4timeEv>
 800433e:	4602      	mov	r2, r0
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f241 3288 	movw	r2, #5000	; 0x1388
 8004348:	4293      	cmp	r3, r2
 800434a:	bf8c      	ite	hi
 800434c:	2301      	movhi	r3, #1
 800434e:	2300      	movls	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d08b      	beq.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 800435e:	f06f 0301 	mvn.w	r3, #1
 8004362:	e130      	b.n	80045c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800436a:	2b01      	cmp	r3, #1
 800436c:	d11b      	bne.n	80043a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2bfe      	cmp	r3, #254	; 0xfe
 8004372:	d107      	bne.n	8004384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004382:	e774      	b.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004392:	f083 0301 	eor.w	r3, r3, #1
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	f43f af68 	beq.w	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f915 	bl	80045ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80043a4:	e763      	b.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d113      	bne.n	80043d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 80043d6:	e74a      	b.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d110      	bne.n	8004404 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	441a      	add	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004402:	e734      	b.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800440a:	2b04      	cmp	r3, #4
 800440c:	d116      	bne.n	800443c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004414:	425a      	negs	r2, r3
 8004416:	b2db      	uxtb	r3, r3
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	bf58      	it	pl
 800441c:	4253      	negpl	r3, r2
 800441e:	2bff      	cmp	r3, #255	; 0xff
 8004420:	d107      	bne.n	8004432 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004430:	e71d      	b.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800443a:	e718      	b.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004442:	2b05      	cmp	r3, #5
 8004444:	d10f      	bne.n	8004466 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8004464:	e703      	b.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800446c:	2b06      	cmp	r3, #6
 800446e:	d117      	bne.n	80044a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	441a      	add	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2207      	movs	r2, #7
 8004486:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8004490:	2b00      	cmp	r3, #0
 8004492:	f47f aeec 	bne.w	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2208      	movs	r2, #8
 800449a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800449e:	e6e6      	b.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	f47f aee1 	bne.w	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80044ba:	425a      	negs	r2, r3
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	bf58      	it	pl
 80044c2:	4253      	negpl	r3, r2
 80044c4:	2bff      	cmp	r3, #255	; 0xff
 80044c6:	f47f aed2 	bne.w	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d110      	bne.n	80044f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f87a 	bl	80045ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f894 	bl	8004608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 80044f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044f4:	e067      	b.n	80045c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
          else if (topic_ == TopicInfo::ID_TIME)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80044fc:	2b0a      	cmp	r3, #10
 80044fe:	d106      	bne.n	800450e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ec>
            syncTime(message_in);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3318      	adds	r3, #24
 8004504:	4619      	mov	r1, r3
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f964 	bl	80047d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800450c:	e6af      	b.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004514:	2b06      	cmp	r3, #6
 8004516:	d10d      	bne.n	8004534 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
            req_param_resp.deserialize(message_in);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3318      	adds	r3, #24
 8004522:	4619      	mov	r1, r3
 8004524:	4610      	mov	r0, r2
 8004526:	f7fd ffae 	bl	8002486 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8004532:	e69c      	b.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800453a:	2b0b      	cmp	r3, #11
 800453c:	d104      	bne.n	8004548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x326>
            configured_ = false;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8004546:	e692      	b.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800454e:	3b64      	subs	r3, #100	; 0x64
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	f43f ae86 	beq.w	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004568:	3b64      	subs	r3, #100	; 0x64
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	6858      	ldr	r0, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800457c:	3b64      	subs	r3, #100	; 0x64
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	3218      	adds	r2, #24
 8004592:	4611      	mov	r1, r2
 8004594:	4798      	blx	r3
    while (true)
 8004596:	e66a      	b.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004598:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00f      	beq.n	80045c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d906      	bls.n	80045c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
      requestSyncTime();
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f809 	bl	80045ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 80045c4:	2300      	movs	r3, #0
  }
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b086      	sub	sp, #24
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80045d6:	f107 030c 	add.w	r3, r7, #12
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fd faba 	bl	8001b54 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f107 020c 	add.w	r2, r7, #12
 80045ea:	210a      	movs	r1, #10
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	4798      	blx	r3
    rt_time = hardware_.time();
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3304      	adds	r3, #4
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fe f949 	bl	800288c <_ZN13STM32Hardware4timeEv>
 80045fa:	4602      	mov	r2, r0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	609a      	str	r2, [r3, #8]
  }
 8004600:	bf00      	nop
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004608:	b590      	push	{r4, r7, lr}
 800460a:	b08b      	sub	sp, #44	; 0x2c
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004610:	f107 030c 	add.w	r3, r7, #12
 8004614:	4618      	mov	r0, r3
 8004616:	f7fd fb8d 	bl	8001d34 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800461a:	2300      	movs	r3, #0
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	2b18      	cmp	r3, #24
 8004622:	dc5e      	bgt.n	80046e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
    {
      if (publishers[i] != 0) // non-empty slot
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004628:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800462c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d052      	beq.n	80046da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd2>
      {
        ti.topic_id = publishers[i]->id_;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004638:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800463c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	b29b      	uxth	r3, r3
 8004644:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800464e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800465e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004662:	6859      	ldr	r1, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004668:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800466c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3308      	adds	r3, #8
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4608      	mov	r0, r1
 800467a:	4798      	blx	r3
 800467c:	4603      	mov	r3, r0
 800467e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004684:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800468c:	6859      	ldr	r1, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004692:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	330c      	adds	r3, #12
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4608      	mov	r0, r1
 80046a4:	4798      	blx	r3
 80046a6:	4603      	mov	r3, r0
 80046a8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80046aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046ae:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681c      	ldr	r4, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ba:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80046be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fe f897 	bl	80027f6 <_ZN3ros9Publisher15getEndpointTypeEv>
 80046c8:	4601      	mov	r1, r0
 80046ca:	f107 030c 	add.w	r3, r7, #12
 80046ce:	461a      	mov	r2, r3
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	47a0      	blx	r4
        HAL_Delay(10);
 80046d4:	200a      	movs	r0, #10
 80046d6:	f000 fcdb 	bl	8005090 <HAL_Delay>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	3301      	adds	r3, #1
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
 80046e0:	e79d      	b.n	800461e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80046e2:	2300      	movs	r3, #0
 80046e4:	627b      	str	r3, [r7, #36]	; 0x24
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	2b18      	cmp	r3, #24
 80046ea:	dc6b      	bgt.n	80047c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1bc>
    {
      if (subscribers[i] != 0) // non-empty slot
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d05e      	beq.n	80047bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b4>
      {
        ti.topic_id = subscribers[i]->id_;
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	b29b      	uxth	r3, r3
 8004710:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	6859      	ldr	r1, [r3, #4]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3308      	adds	r3, #8
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4608      	mov	r0, r1
 8004748:	4798      	blx	r3
 800474a:	4603      	mov	r3, r0
 800474c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	6859      	ldr	r1, [r3, #4]
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4608      	mov	r0, r1
 8004772:	4798      	blx	r3
 8004774:	4603      	mov	r3, r0
 8004776:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800477c:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681c      	ldr	r4, [r3, #0]
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	6859      	ldr	r1, [r3, #4]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3304      	adds	r3, #4
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4608      	mov	r0, r1
 80047a8:	4798      	blx	r3
 80047aa:	4601      	mov	r1, r0
 80047ac:	f107 030c 	add.w	r3, r7, #12
 80047b0:	461a      	mov	r2, r3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	47a0      	blx	r4
        HAL_Delay(10);
 80047b6:	200a      	movs	r0, #10
 80047b8:	f000 fc6a 	bl	8005090 <HAL_Delay>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	3301      	adds	r3, #1
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
 80047c2:	e790      	b.n	80046e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
      }
    }
    configured_ = true;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 80047cc:	bf00      	nop
 80047ce:	372c      	adds	r7, #44	; 0x2c
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd90      	pop	{r4, r7, pc}

080047d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80047de:	f107 0308 	add.w	r3, r7, #8
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fd f9b6 	bl	8001b54 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3304      	adds	r3, #4
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fe f84d 	bl	800288c <_ZN13STM32Hardware4timeEv>
 80047f2:	4602      	mov	r2, r0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80047fc:	f107 0308 	add.w	r3, r7, #8
 8004800:	6839      	ldr	r1, [r7, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7fd fa16 	bl	8001c34 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	4914      	ldr	r1, [pc, #80]	; (8004860 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 800480e:	fba1 1303 	umull	r1, r3, r1, r3
 8004812:	099b      	lsrs	r3, r3, #6
 8004814:	4413      	add	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004818:	6939      	ldr	r1, [r7, #16]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4b10      	ldr	r3, [pc, #64]	; (8004860 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 800481e:	fba3 0302 	umull	r0, r3, r3, r2
 8004822:	099b      	lsrs	r3, r3, #6
 8004824:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004828:	fb00 f303 	mul.w	r3, r0, r3
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	4a0d      	ldr	r2, [pc, #52]	; (8004864 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004830:	fb02 f303 	mul.w	r3, r2, r3
 8004834:	440b      	add	r3, r1
 8004836:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004838:	f107 0308 	add.w	r3, r7, #8
 800483c:	3304      	adds	r3, #4
 800483e:	4619      	mov	r1, r3
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f8a3 	bl	800498c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3304      	adds	r3, #4
 800484a:	4618      	mov	r0, r3
 800484c:	f7fe f81e 	bl	800288c <_ZN13STM32Hardware4timeEv>
 8004850:	4602      	mov	r2, r0
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 8004858:	bf00      	nop
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	10624dd3 	.word	0x10624dd3
 8004864:	000f4240 	.word	0x000f4240

08004868 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004868:	b580      	push	{r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b63      	cmp	r3, #99	; 0x63
 8004878:	dd09      	ble.n	800488e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004880:	f083 0301 	eor.w	r3, r3, #1
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800488a:	2300      	movs	r3, #0
 800488c:	e077      	b.n	800497e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	f502 7206 	add.w	r2, r2, #536	; 0x218
 800489a:	3207      	adds	r2, #7
 800489c:	4611      	mov	r1, r2
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	4798      	blx	r3
 80048a2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	22ff      	movs	r2, #255	; 0xff
 80048a8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	22fe      	movs	r2, #254	; 0xfe
 80048b0:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	121b      	asrs	r3, r3, #8
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 80048d8:	4413      	add	r3, r2
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	43db      	mvns	r3, r3
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	b21b      	sxth	r3, r3
 80048f4:	121b      	asrs	r3, r3, #8
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004902:	2305      	movs	r3, #5
 8004904:	61bb      	str	r3, [r7, #24]
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	3307      	adds	r3, #7
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	429a      	cmp	r2, r3
 800490e:	da0d      	bge.n	800492c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	4413      	add	r3, r2
 8004916:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	461a      	mov	r2, r3
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	4413      	add	r3, r2
 8004922:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	3301      	adds	r3, #1
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	e7ec      	b.n	8004906 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	3307      	adds	r3, #7
 8004930:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	425a      	negs	r2, r3
 8004936:	b2db      	uxtb	r3, r3
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	bf58      	it	pl
 800493c:	4253      	negpl	r3, r2
 800493e:	b2da      	uxtb	r2, r3
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	1c59      	adds	r1, r3, #1
 8004944:	6179      	str	r1, [r7, #20]
 8004946:	43d2      	mvns	r2, r2
 8004948:	b2d1      	uxtb	r1, r2
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4413      	add	r3, r2
 800494e:	460a      	mov	r2, r1
 8004950:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800495a:	dc0a      	bgt.n	8004972 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	1d18      	adds	r0, r3, #4
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4619      	mov	r1, r3
 800496a:	f7fd ff7f 	bl	800286c <_ZN13STM32Hardware5writeEPhi>
      return l;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	e005      	b.n	800497e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004972:	4905      	ldr	r1, [pc, #20]	; (8004988 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 f847 	bl	8004a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800497a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 800497e:	4618      	mov	r0, r3
 8004980:	3720      	adds	r7, #32
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	0800fdf4 	.word	0x0800fdf4

0800498c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3304      	adds	r3, #4
 800499a:	4618      	mov	r0, r3
 800499c:	f7fd ff76 	bl	800288c <_ZN13STM32Hardware4timeEv>
 80049a0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4914      	ldr	r1, [pc, #80]	; (80049fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 80049aa:	fba1 1303 	umull	r1, r3, r1, r3
 80049ae:	099b      	lsrs	r3, r3, #6
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	1e5a      	subs	r2, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	6859      	ldr	r1, [r3, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 80049c0:	fba3 0302 	umull	r0, r3, r3, r2
 80049c4:	099b      	lsrs	r3, r3, #6
 80049c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049ca:	fb00 f303 	mul.w	r3, r0, r3
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	4a0b      	ldr	r2, [pc, #44]	; (8004a00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80049d2:	fb02 f303 	mul.w	r3, r2, r3
 80049d6:	1aca      	subs	r2, r1, r3
 80049d8:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80049da:	4413      	add	r3, r2
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f103 020c 	add.w	r2, r3, #12
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3310      	adds	r3, #16
 80049ea:	4619      	mov	r1, r3
 80049ec:	4610      	mov	r0, r2
 80049ee:	f7fc ff97 	bl	8001920 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80049f2:	bf00      	nop
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	10624dd3 	.word	0x10624dd3
 8004a00:	000f4240 	.word	0x000f4240
 8004a04:	3b9aca00 	.word	0x3b9aca00

08004a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	2103      	movs	r1, #3
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f804 	bl	8004a24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004a1c:	bf00      	nop
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004a32:	f107 0314 	add.w	r3, r7, #20
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fd fb40 	bl	80020bc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004a3c:	7afb      	ldrb	r3, [r7, #11]
 8004a3e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f107 0214 	add.w	r2, r7, #20
 8004a4e:	2107      	movs	r1, #7
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	4798      	blx	r3
  }
 8004a54:	bf00      	nop
 8004a56:	3720      	adds	r7, #32
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <_Z41__static_initialization_and_destruction_0ii>:
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	f040 809f 	bne.w	8004bac <_Z41__static_initialization_and_destruction_0ii+0x150>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a74:	4293      	cmp	r3, r2
 8004a76:	f040 8099 	bne.w	8004bac <_Z41__static_initialization_and_destruction_0ii+0x150>
ros::NodeHandle nh;
 8004a7a:	484e      	ldr	r0, [pc, #312]	; (8004bb4 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004a7c:	f7ff fa9a 	bl	8003fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int8 uint_msg_right_front;
 8004a80:	484d      	ldr	r0, [pc, #308]	; (8004bb8 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004a82:	f7fd ff0f 	bl	80028a4 <_ZN8std_msgs4Int8C1Ev>
std_msgs::Int8 uint_msg_left_front;
 8004a86:	484d      	ldr	r0, [pc, #308]	; (8004bbc <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8004a88:	f7fd ff0c 	bl	80028a4 <_ZN8std_msgs4Int8C1Ev>
std_msgs::Int8 uint_msg_right_back;
 8004a8c:	484c      	ldr	r0, [pc, #304]	; (8004bc0 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004a8e:	f7fd ff09 	bl	80028a4 <_ZN8std_msgs4Int8C1Ev>
std_msgs::Int8 uint_msg_left_back;
 8004a92:	484c      	ldr	r0, [pc, #304]	; (8004bc4 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004a94:	f7fd ff06 	bl	80028a4 <_ZN8std_msgs4Int8C1Ev>
std_msgs::UInt8MultiArray laser_sensors_data_array;
 8004a98:	484b      	ldr	r0, [pc, #300]	; (8004bc8 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004a9a:	f7fe fa53 	bl	8002f44 <_ZN8std_msgs15UInt8MultiArrayC1Ev>
std_msgs::UInt8 state_data_msg;
 8004a9e:	484b      	ldr	r0, [pc, #300]	; (8004bcc <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004aa0:	f7fd ff6c 	bl	800297c <_ZN8std_msgs5UInt8C1Ev>
geometry_msgs::Vector3 gyro_msg;
 8004aa4:	484a      	ldr	r0, [pc, #296]	; (8004bd0 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004aa6:	f7fe fb45 	bl	8003134 <_ZN13geometry_msgs7Vector3C1Ev>
geometry_msgs::Vector3 accel_msg;
 8004aaa:	484a      	ldr	r0, [pc, #296]	; (8004bd4 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004aac:	f7fe fb42 	bl	8003134 <_ZN13geometry_msgs7Vector3C1Ev>
sensor_msgs::Range laser_sensor_msg_1;
 8004ab0:	4849      	ldr	r0, [pc, #292]	; (8004bd8 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004ab2:	f7fe fd79 	bl	80035a8 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_2;
 8004ab6:	4849      	ldr	r0, [pc, #292]	; (8004bdc <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004ab8:	f7fe fd76 	bl	80035a8 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_3;
 8004abc:	4848      	ldr	r0, [pc, #288]	; (8004be0 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004abe:	f7fe fd73 	bl	80035a8 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_4;
 8004ac2:	4848      	ldr	r0, [pc, #288]	; (8004be4 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004ac4:	f7fe fd70 	bl	80035a8 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_5;
 8004ac8:	4847      	ldr	r0, [pc, #284]	; (8004be8 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004aca:	f7fe fd6d 	bl	80035a8 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_6;
 8004ace:	4847      	ldr	r0, [pc, #284]	; (8004bec <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8004ad0:	f7fe fd6a 	bl	80035a8 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_7;
 8004ad4:	4846      	ldr	r0, [pc, #280]	; (8004bf0 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004ad6:	f7fe fd67 	bl	80035a8 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_8;
 8004ada:	4846      	ldr	r0, [pc, #280]	; (8004bf4 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8004adc:	f7fe fd64 	bl	80035a8 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_9;
 8004ae0:	4845      	ldr	r0, [pc, #276]	; (8004bf8 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004ae2:	f7fe fd61 	bl	80035a8 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_10;
 8004ae6:	4845      	ldr	r0, [pc, #276]	; (8004bfc <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8004ae8:	f7fe fd5e 	bl	80035a8 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_11;
 8004aec:	4844      	ldr	r0, [pc, #272]	; (8004c00 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 8004aee:	f7fe fd5b 	bl	80035a8 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_12;
 8004af2:	4844      	ldr	r0, [pc, #272]	; (8004c04 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8004af4:	f7fe fd58 	bl	80035a8 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_13;
 8004af8:	4843      	ldr	r0, [pc, #268]	; (8004c08 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8004afa:	f7fe fd55 	bl	80035a8 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_14;
 8004afe:	4843      	ldr	r0, [pc, #268]	; (8004c0c <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8004b00:	f7fe fd52 	bl	80035a8 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_15;
 8004b04:	4842      	ldr	r0, [pc, #264]	; (8004c10 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8004b06:	f7fe fd4f 	bl	80035a8 <_ZN11sensor_msgs5RangeC1Ev>
sensor_msgs::Range laser_sensor_msg_16;
 8004b0a:	4842      	ldr	r0, [pc, #264]	; (8004c14 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8004b0c:	f7fe fd4c 	bl	80035a8 <_ZN11sensor_msgs5RangeC1Ev>
ros::Publisher stm("stm", &gyro_msg);
 8004b10:	2300      	movs	r3, #0
 8004b12:	4a2f      	ldr	r2, [pc, #188]	; (8004bd0 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004b14:	4940      	ldr	r1, [pc, #256]	; (8004c18 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8004b16:	4841      	ldr	r0, [pc, #260]	; (8004c1c <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8004b18:	f7fd fe42 	bl	80027a0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher gyro("gyro", &gyro_msg);
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	4a2c      	ldr	r2, [pc, #176]	; (8004bd0 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004b20:	493f      	ldr	r1, [pc, #252]	; (8004c20 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8004b22:	4840      	ldr	r0, [pc, #256]	; (8004c24 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8004b24:	f7fd fe3c 	bl	80027a0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher accel("accel", &accel_msg);
 8004b28:	2300      	movs	r3, #0
 8004b2a:	4a2a      	ldr	r2, [pc, #168]	; (8004bd4 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004b2c:	493e      	ldr	r1, [pc, #248]	; (8004c28 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8004b2e:	483f      	ldr	r0, [pc, #252]	; (8004c2c <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8004b30:	f7fd fe36 	bl	80027a0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_right_front("rpm_right_front", &uint_msg_right_front);
 8004b34:	2300      	movs	r3, #0
 8004b36:	4a20      	ldr	r2, [pc, #128]	; (8004bb8 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004b38:	493d      	ldr	r1, [pc, #244]	; (8004c30 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8004b3a:	483e      	ldr	r0, [pc, #248]	; (8004c34 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8004b3c:	f7fd fe30 	bl	80027a0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_left_front("rpm_left_front", &uint_msg_left_front);
 8004b40:	2300      	movs	r3, #0
 8004b42:	4a1e      	ldr	r2, [pc, #120]	; (8004bbc <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8004b44:	493c      	ldr	r1, [pc, #240]	; (8004c38 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8004b46:	483d      	ldr	r0, [pc, #244]	; (8004c3c <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8004b48:	f7fd fe2a 	bl	80027a0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_right_back("rpm_right_back", &uint_msg_right_back);
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	4a1c      	ldr	r2, [pc, #112]	; (8004bc0 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004b50:	493b      	ldr	r1, [pc, #236]	; (8004c40 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8004b52:	483c      	ldr	r0, [pc, #240]	; (8004c44 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8004b54:	f7fd fe24 	bl	80027a0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher rpm_left_back("rpm_left_back", &uint_msg_left_back);
 8004b58:	2300      	movs	r3, #0
 8004b5a:	4a1a      	ldr	r2, [pc, #104]	; (8004bc4 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004b5c:	493a      	ldr	r1, [pc, #232]	; (8004c48 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8004b5e:	483b      	ldr	r0, [pc, #236]	; (8004c4c <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8004b60:	f7fd fe1e 	bl	80027a0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int8> rpm_rightFront_sub("rpm_rightFront_sub", rpm_rightFront_subCb);
 8004b64:	2301      	movs	r3, #1
 8004b66:	4a3a      	ldr	r2, [pc, #232]	; (8004c50 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8004b68:	493a      	ldr	r1, [pc, #232]	; (8004c54 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8004b6a:	483b      	ldr	r0, [pc, #236]	; (8004c58 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8004b6c:	f7ff fab0 	bl	80040d0 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> rpm_leftFront_sub("rpm_leftFront_sub", rpm_leftFront_subCb);
 8004b70:	2301      	movs	r3, #1
 8004b72:	4a3a      	ldr	r2, [pc, #232]	; (8004c5c <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8004b74:	493a      	ldr	r1, [pc, #232]	; (8004c60 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8004b76:	483b      	ldr	r0, [pc, #236]	; (8004c64 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8004b78:	f7ff faaa 	bl	80040d0 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> rpm_rightBack_sub("rpm_rightBack_sub", rpm_rightBack_subCb);
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	4a3a      	ldr	r2, [pc, #232]	; (8004c68 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8004b80:	493a      	ldr	r1, [pc, #232]	; (8004c6c <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8004b82:	483b      	ldr	r0, [pc, #236]	; (8004c70 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8004b84:	f7ff faa4 	bl	80040d0 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Int8> rpm_leftBack_sub("rpm_leftBack_sub", rpm_leftBack_subCb);
 8004b88:	2301      	movs	r3, #1
 8004b8a:	4a3a      	ldr	r2, [pc, #232]	; (8004c74 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8004b8c:	493a      	ldr	r1, [pc, #232]	; (8004c78 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8004b8e:	483b      	ldr	r0, [pc, #236]	; (8004c7c <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8004b90:	f7ff fa9e 	bl	80040d0 <_ZN3ros10SubscriberIN8std_msgs4Int8EvEC1EPKcPFvRKS2_Ei>
ros::Publisher laser_sensors_data("laser_sensors_data", &laser_sensors_data_array);
 8004b94:	2300      	movs	r3, #0
 8004b96:	4a0c      	ldr	r2, [pc, #48]	; (8004bc8 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004b98:	4939      	ldr	r1, [pc, #228]	; (8004c80 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8004b9a:	483a      	ldr	r0, [pc, #232]	; (8004c84 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8004b9c:	f7fd fe00 	bl	80027a0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher state_data("state_data", &state_data_msg);
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	4a0a      	ldr	r2, [pc, #40]	; (8004bcc <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004ba4:	4938      	ldr	r1, [pc, #224]	; (8004c88 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8004ba6:	4839      	ldr	r0, [pc, #228]	; (8004c8c <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8004ba8:	f7fd fdfa 	bl	80027a0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004bac:	bf00      	nop
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	200004d8 	.word	0x200004d8
 8004bb8:	20000a08 	.word	0x20000a08
 8004bbc:	20000a10 	.word	0x20000a10
 8004bc0:	20000a18 	.word	0x20000a18
 8004bc4:	20000a20 	.word	0x20000a20
 8004bc8:	20000a28 	.word	0x20000a28
 8004bcc:	20000a58 	.word	0x20000a58
 8004bd0:	20000a60 	.word	0x20000a60
 8004bd4:	20000a70 	.word	0x20000a70
 8004bd8:	20000a80 	.word	0x20000a80
 8004bdc:	20000aac 	.word	0x20000aac
 8004be0:	20000ad8 	.word	0x20000ad8
 8004be4:	20000b04 	.word	0x20000b04
 8004be8:	20000b30 	.word	0x20000b30
 8004bec:	20000b5c 	.word	0x20000b5c
 8004bf0:	20000b88 	.word	0x20000b88
 8004bf4:	20000bb4 	.word	0x20000bb4
 8004bf8:	20000be0 	.word	0x20000be0
 8004bfc:	20000c0c 	.word	0x20000c0c
 8004c00:	20000c38 	.word	0x20000c38
 8004c04:	20000c64 	.word	0x20000c64
 8004c08:	20000c90 	.word	0x20000c90
 8004c0c:	20000cbc 	.word	0x20000cbc
 8004c10:	20000ce8 	.word	0x20000ce8
 8004c14:	20000d14 	.word	0x20000d14
 8004c18:	0800fe30 	.word	0x0800fe30
 8004c1c:	20000d40 	.word	0x20000d40
 8004c20:	0800fe34 	.word	0x0800fe34
 8004c24:	20000d54 	.word	0x20000d54
 8004c28:	0800fe3c 	.word	0x0800fe3c
 8004c2c:	20000d68 	.word	0x20000d68
 8004c30:	0800fe44 	.word	0x0800fe44
 8004c34:	20000d7c 	.word	0x20000d7c
 8004c38:	0800fe54 	.word	0x0800fe54
 8004c3c:	20000d90 	.word	0x20000d90
 8004c40:	0800fe64 	.word	0x0800fe64
 8004c44:	20000da4 	.word	0x20000da4
 8004c48:	0800fe74 	.word	0x0800fe74
 8004c4c:	20000db8 	.word	0x20000db8
 8004c50:	08003929 	.word	0x08003929
 8004c54:	0800fe84 	.word	0x0800fe84
 8004c58:	20000dcc 	.word	0x20000dcc
 8004c5c:	0800399d 	.word	0x0800399d
 8004c60:	0800fe98 	.word	0x0800fe98
 8004c64:	20000de8 	.word	0x20000de8
 8004c68:	08003a09 	.word	0x08003a09
 8004c6c:	0800feac 	.word	0x0800feac
 8004c70:	20000e04 	.word	0x20000e04
 8004c74:	08003a75 	.word	0x08003a75
 8004c78:	0800fec0 	.word	0x0800fec0
 8004c7c:	20000e20 	.word	0x20000e20
 8004c80:	0800fed4 	.word	0x0800fed4
 8004c84:	20000e3c 	.word	0x20000e3c
 8004c88:	0800fee8 	.word	0x0800fee8
 8004c8c:	20000e50 	.word	0x20000e50

08004c90 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	330c      	adds	r3, #12
 8004c9e:	6839      	ldr	r1, [r7, #0]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fd fe2f 	bl	8002904 <_ZN8std_msgs4Int811deserializeEPh>
    this->cb_(msg);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	320c      	adds	r2, #12
 8004cae:	4610      	mov	r0, r2
 8004cb0:	4798      	blx	r3
  }
 8004cb2:	bf00      	nop
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <_ZN3ros10SubscriberIN8std_msgs4Int8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
  }
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <_ZN3ros10SubscriberIN8std_msgs4Int8EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fd fe30 	bl	8002944 <_ZN8std_msgs4Int87getTypeEv>
 8004ce4:	4603      	mov	r3, r0
  }
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <_ZN3ros10SubscriberIN8std_msgs4Int8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	330c      	adds	r3, #12
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fd fe30 	bl	8002960 <_ZN8std_msgs4Int86getMD5Ev>
 8004d00:	4603      	mov	r3, r0
  }
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <_GLOBAL__sub_I_rb>:
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004d12:	2001      	movs	r0, #1
 8004d14:	f7ff fea2 	bl	8004a5c <_Z41__static_initialization_and_destruction_0ii>
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <_Z8NBT_initP5nbt_tm>:
#include "stm32f4xx_hal.h"
#include "nbt.h"

//NBT - Non Blocking Timer
void NBT_init(nbt_t * nbt, uint32_t interval)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	6039      	str	r1, [r7, #0]
	nbt->timeout = interval;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	601a      	str	r2, [r3, #0]
	nbt->previousMillis = HAL_GetTick();
 8004d2a:	f000 f9a5 	bl	8005078 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	605a      	str	r2, [r3, #4]
}
 8004d34:	bf00      	nop
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <_Z11NBT_handlerP5nbt_t>:

bool NBT_handler(nbt_t * nbt)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
	if(HAL_GetTick()-nbt->previousMillis>nbt->timeout){
 8004d44:	f000 f998 	bl	8005078 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	1ad2      	subs	r2, r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	bf8c      	ite	hi
 8004d58:	2301      	movhi	r3, #1
 8004d5a:	2300      	movls	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d006      	beq.n	8004d70 <_Z11NBT_handlerP5nbt_t+0x34>
		nbt->previousMillis = HAL_GetTick();
 8004d62:	f000 f989 	bl	8005078 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	605a      	str	r2, [r3, #4]
		return true;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <_Z11NBT_handlerP5nbt_t+0x36>
	}

	return false;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <_Z17ringbuffer_statusP10ringbuffer>:
#include <string.h>

#define ASSERT(EX)                                                         \

__inline enum ringbuffer_state  ringbuffer_status(struct  ringbuffer *rb)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
	if (rb->read_index == rb->write_index) {
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	889b      	ldrh	r3, [r3, #4]
 8004d86:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	88db      	ldrh	r3, [r3, #6]
 8004d90:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d10f      	bne.n	8004dba <_Z17ringbuffer_statusP10ringbuffer+0x40>
		if (rb->read_mirror == rb->write_mirror)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	791b      	ldrb	r3, [r3, #4]
 8004d9e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	799b      	ldrb	r3, [r3, #6]
 8004da8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d101      	bne.n	8004db6 <_Z17ringbuffer_statusP10ringbuffer+0x3c>
			return RT_RINGBUFFER_EMPTY;
 8004db2:	2300      	movs	r3, #0
 8004db4:	e002      	b.n	8004dbc <_Z17ringbuffer_statusP10ringbuffer+0x42>
		else
			return RT_RINGBUFFER_FULL;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <_Z17ringbuffer_statusP10ringbuffer+0x42>
	}
	return RT_RINGBUFFER_HALFFULL;
 8004dba:	2302      	movs	r3, #2
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <_Z19ringbuffer_data_lenP10ringbuffer>:

/** return the size of data in rb */
uint16_t  ringbuffer_data_len(struct  ringbuffer *rb)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
	switch ( ringbuffer_status(rb)) {
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7ff ffd2 	bl	8004d7a <_Z17ringbuffer_statusP10ringbuffer>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <_Z19ringbuffer_data_lenP10ringbuffer+0x1a>
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d002      	beq.n	8004de6 <_Z19ringbuffer_data_lenP10ringbuffer+0x1e>
 8004de0:	e006      	b.n	8004df0 <_Z19ringbuffer_data_lenP10ringbuffer+0x28>
	case RT_RINGBUFFER_EMPTY:
		return 0;
 8004de2:	2300      	movs	r3, #0
 8004de4:	e031      	b.n	8004e4a <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
	case RT_RINGBUFFER_FULL:
		return rb->buffer_size;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	e02c      	b.n	8004e4a <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
	case RT_RINGBUFFER_HALFFULL:
	default:
		if (rb->write_index > rb->read_index)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	88db      	ldrh	r3, [r3, #6]
 8004df4:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	889b      	ldrh	r3, [r3, #4]
 8004dfe:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d90d      	bls.n	8004e24 <_Z19ringbuffer_data_lenP10ringbuffer+0x5c>
			return rb->write_index - rb->read_index;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	88db      	ldrh	r3, [r3, #6]
 8004e0c:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	461a      	mov	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	889b      	ldrh	r3, [r3, #4]
 8004e18:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	e012      	b.n	8004e4a <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
		else
			return rb->buffer_size - (rb->read_index - rb->write_index);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	88db      	ldrh	r3, [r3, #6]
 8004e30:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	4619      	mov	r1, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	889b      	ldrh	r3, [r3, #4]
 8004e3c:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	1acb      	subs	r3, r1, r3
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	4413      	add	r3, r2
 8004e48:	b29b      	uxth	r3, r3
	};
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <_Z18ringbuffer_putcharP10ringbufferh>:

/**
 * put a character into ring buffer
 */
uint32_t  ringbuffer_putchar(struct  ringbuffer *rb, const uint8_t ch)
{
 8004e52:	b590      	push	{r4, r7, lr}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	70fb      	strb	r3, [r7, #3]
    ASSERT(rb != NULL);

    /* whether has enough space */
	if (! ringbuffer_empty_space(rb))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e64:	461c      	mov	r4, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff ffad 	bl	8004dc8 <_Z19ringbuffer_data_lenP10ringbuffer>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	429c      	cmp	r4, r3
 8004e72:	bf0c      	ite	eq
 8004e74:	2301      	moveq	r3, #1
 8004e76:	2300      	movne	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <_Z18ringbuffer_putcharP10ringbufferh+0x30>
		return 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	e038      	b.n	8004ef4 <_Z18ringbuffer_putcharP10ringbufferh+0xa2>

	rb->buffer_ptr[rb->write_index] = ch;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	88d2      	ldrh	r2, [r2, #6]
 8004e8a:	f3c2 024e 	ubfx	r2, r2, #1, #15
 8004e8e:	b292      	uxth	r2, r2
 8004e90:	4413      	add	r3, r2
 8004e92:	78fa      	ldrb	r2, [r7, #3]
 8004e94:	701a      	strb	r2, [r3, #0]

	/* flip mirror */
	if (rb->write_index == rb->buffer_size - 1) {
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	88db      	ldrh	r3, [r3, #6]
 8004e9a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d114      	bne.n	8004ed8 <_Z18ringbuffer_putcharP10ringbufferh+0x86>
		rb->write_mirror = ~rb->write_mirror;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	799b      	ldrb	r3, [r3, #6]
 8004eb2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	b2d9      	uxtb	r1, r3
 8004ec4:	7993      	ldrb	r3, [r2, #6]
 8004ec6:	f361 0300 	bfi	r3, r1, #0, #1
 8004eca:	7193      	strb	r3, [r2, #6]
		rb->write_index = 0;
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	88d3      	ldrh	r3, [r2, #6]
 8004ed0:	f36f 034f 	bfc	r3, #1, #15
 8004ed4:	80d3      	strh	r3, [r2, #6]
 8004ed6:	e00c      	b.n	8004ef2 <_Z18ringbuffer_putcharP10ringbufferh+0xa0>
	} else {
		rb->write_index++;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	88da      	ldrh	r2, [r3, #6]
 8004edc:	f3c2 024e 	ubfx	r2, r2, #1, #15
 8004ee0:	b292      	uxth	r2, r2
 8004ee2:	3201      	adds	r2, #1
 8004ee4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004ee8:	b291      	uxth	r1, r2
 8004eea:	88da      	ldrh	r2, [r3, #6]
 8004eec:	f361 024f 	bfi	r2, r1, #1, #15
 8004ef0:	80da      	strh	r2, [r3, #6]
	}

	return 1;
 8004ef2:	2301      	movs	r3, #1
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd90      	pop	{r4, r7, pc}

08004efc <_Z18ringbuffer_getcharP10ringbufferPh>:

/**
 * get a character from a ringbuffer
 */
uint32_t  ringbuffer_getchar(struct  ringbuffer *rb, uint8_t *ch)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
    ASSERT(rb != NULL);

    /* ringbuffer is empty */
    if (! ringbuffer_data_len(rb))
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff ff5e 	bl	8004dc8 <_Z19ringbuffer_data_lenP10ringbuffer>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	bf0c      	ite	eq
 8004f12:	2301      	moveq	r3, #1
 8004f14:	2300      	movne	r3, #0
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <_Z18ringbuffer_getcharP10ringbufferPh+0x24>
        return 0;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	e03a      	b.n	8004f96 <_Z18ringbuffer_getcharP10ringbufferPh+0x9a>

    /* put character */
    *ch = rb->buffer_ptr[rb->read_index];
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	8892      	ldrh	r2, [r2, #4]
 8004f28:	f3c2 024e 	ubfx	r2, r2, #1, #15
 8004f2c:	b292      	uxth	r2, r2
 8004f2e:	4413      	add	r3, r2
 8004f30:	781a      	ldrb	r2, [r3, #0]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	701a      	strb	r2, [r3, #0]

    if (rb->read_index == rb->buffer_size-1)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	889b      	ldrh	r3, [r3, #4]
 8004f3a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	461a      	mov	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d114      	bne.n	8004f78 <_Z18ringbuffer_getcharP10ringbufferPh+0x7c>
    {
        rb->read_mirror = ~rb->read_mirror;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	791b      	ldrb	r3, [r3, #4]
 8004f52:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	b2d9      	uxtb	r1, r3
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	7913      	ldrb	r3, [r2, #4]
 8004f66:	f361 0300 	bfi	r3, r1, #0, #1
 8004f6a:	7113      	strb	r3, [r2, #4]
        rb->read_index = 0;
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	8893      	ldrh	r3, [r2, #4]
 8004f70:	f36f 034f 	bfc	r3, #1, #15
 8004f74:	8093      	strh	r3, [r2, #4]
 8004f76:	e00d      	b.n	8004f94 <_Z18ringbuffer_getcharP10ringbufferPh+0x98>
    }
    else
    {
        rb->read_index++;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	889b      	ldrh	r3, [r3, #4]
 8004f7c:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3301      	adds	r3, #1
 8004f84:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004f88:	b299      	uxth	r1, r3
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	8893      	ldrh	r3, [r2, #4]
 8004f8e:	f361 034f 	bfi	r3, r1, #1, #15
 8004f92:	8093      	strh	r3, [r2, #4]
    }

    return 1;
 8004f94:	2301      	movs	r3, #1
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <_Z15ringbuffer_initP10ringbufferPhs>:
}

void  ringbuffer_init(struct  ringbuffer *rb,
                        uint8_t           *pool,
                        int16_t            size)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	80fb      	strh	r3, [r7, #6]
    ASSERT(rb != NULL);
    ASSERT(size > 0);

    /* initialize read and write index */
    rb->read_mirror = rb->read_index = 0;
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	8893      	ldrh	r3, [r2, #4]
 8004fb0:	f36f 034f 	bfc	r3, #1, #15
 8004fb4:	8093      	strh	r3, [r2, #4]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	889b      	ldrh	r3, [r3, #4]
 8004fba:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	b2d9      	uxtb	r1, r3
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	7913      	ldrb	r3, [r2, #4]
 8004fca:	f361 0300 	bfi	r3, r1, #0, #1
 8004fce:	7113      	strb	r3, [r2, #4]
    rb->write_mirror = rb->write_index = 0;
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	88d3      	ldrh	r3, [r2, #6]
 8004fd4:	f36f 034f 	bfc	r3, #1, #15
 8004fd8:	80d3      	strh	r3, [r2, #6]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	88db      	ldrh	r3, [r3, #6]
 8004fde:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	b2d9      	uxtb	r1, r3
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	7993      	ldrb	r3, [r2, #6]
 8004fee:	f361 0300 	bfi	r3, r1, #0, #1
 8004ff2:	7193      	strb	r3, [r2, #6]

    /* set buffer pool and size */
    rb->buffer_ptr = pool;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	601a      	str	r2, [r3, #0]
    rb->buffer_size = size; //ALIGN_DOWN(size, ALIGN_SIZE);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	88fa      	ldrh	r2, [r7, #6]
 8004ffe:	811a      	strh	r2, [r3, #8]
}
 8005000:	bf00      	nop
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005010:	4b0e      	ldr	r3, [pc, #56]	; (800504c <HAL_Init+0x40>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a0d      	ldr	r2, [pc, #52]	; (800504c <HAL_Init+0x40>)
 8005016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800501a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800501c:	4b0b      	ldr	r3, [pc, #44]	; (800504c <HAL_Init+0x40>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a0a      	ldr	r2, [pc, #40]	; (800504c <HAL_Init+0x40>)
 8005022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005028:	4b08      	ldr	r3, [pc, #32]	; (800504c <HAL_Init+0x40>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a07      	ldr	r2, [pc, #28]	; (800504c <HAL_Init+0x40>)
 800502e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005034:	2003      	movs	r0, #3
 8005036:	f000 ff56 	bl	8005ee6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800503a:	2000      	movs	r0, #0
 800503c:	f7fc fb2a 	bl	8001694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005040:	f7fc fa52 	bl	80014e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	40023c00 	.word	0x40023c00

08005050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005054:	4b06      	ldr	r3, [pc, #24]	; (8005070 <HAL_IncTick+0x20>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	4b06      	ldr	r3, [pc, #24]	; (8005074 <HAL_IncTick+0x24>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4413      	add	r3, r2
 8005060:	4a04      	ldr	r2, [pc, #16]	; (8005074 <HAL_IncTick+0x24>)
 8005062:	6013      	str	r3, [r2, #0]
}
 8005064:	bf00      	nop
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	20000010 	.word	0x20000010
 8005074:	200051c8 	.word	0x200051c8

08005078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  return uwTick;
 800507c:	4b03      	ldr	r3, [pc, #12]	; (800508c <HAL_GetTick+0x14>)
 800507e:	681b      	ldr	r3, [r3, #0]
}
 8005080:	4618      	mov	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	200051c8 	.word	0x200051c8

08005090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005098:	f7ff ffee 	bl	8005078 <HAL_GetTick>
 800509c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050a8:	d005      	beq.n	80050b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050aa:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <HAL_Delay+0x40>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80050b6:	bf00      	nop
 80050b8:	f7ff ffde 	bl	8005078 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d8f7      	bhi.n	80050b8 <HAL_Delay+0x28>
  {
  }
}
 80050c8:	bf00      	nop
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20000010 	.word	0x20000010

080050d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e0ed      	b.n	80052c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d102      	bne.n	80050f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fc fa26 	bl	8001544 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0202 	bic.w	r2, r2, #2
 8005106:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005108:	f7ff ffb6 	bl	8005078 <HAL_GetTick>
 800510c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800510e:	e012      	b.n	8005136 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005110:	f7ff ffb2 	bl	8005078 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b0a      	cmp	r3, #10
 800511c:	d90b      	bls.n	8005136 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2205      	movs	r2, #5
 800512e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e0c5      	b.n	80052c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1e5      	bne.n	8005110 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005154:	f7ff ff90 	bl	8005078 <HAL_GetTick>
 8005158:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800515a:	e012      	b.n	8005182 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800515c:	f7ff ff8c 	bl	8005078 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b0a      	cmp	r3, #10
 8005168:	d90b      	bls.n	8005182 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2205      	movs	r2, #5
 800517a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e09f      	b.n	80052c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0e5      	beq.n	800515c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	7e1b      	ldrb	r3, [r3, #24]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d108      	bne.n	80051aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	e007      	b.n	80051ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	7e5b      	ldrb	r3, [r3, #25]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d108      	bne.n	80051d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	e007      	b.n	80051e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	7e9b      	ldrb	r3, [r3, #26]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d108      	bne.n	80051fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0220 	orr.w	r2, r2, #32
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	e007      	b.n	800520e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0220 	bic.w	r2, r2, #32
 800520c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	7edb      	ldrb	r3, [r3, #27]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d108      	bne.n	8005228 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0210 	bic.w	r2, r2, #16
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	e007      	b.n	8005238 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0210 	orr.w	r2, r2, #16
 8005236:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	7f1b      	ldrb	r3, [r3, #28]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d108      	bne.n	8005252 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f042 0208 	orr.w	r2, r2, #8
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	e007      	b.n	8005262 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0208 	bic.w	r2, r2, #8
 8005260:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	7f5b      	ldrb	r3, [r3, #29]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d108      	bne.n	800527c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f042 0204 	orr.w	r2, r2, #4
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	e007      	b.n	800528c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0204 	bic.w	r2, r2, #4
 800528a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	ea42 0103 	orr.w	r1, r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	1e5a      	subs	r2, r3, #1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
	...

080052cc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052e2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80052e4:	7cfb      	ldrb	r3, [r7, #19]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d003      	beq.n	80052f2 <HAL_CAN_ConfigFilter+0x26>
 80052ea:	7cfb      	ldrb	r3, [r7, #19]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	f040 80be 	bne.w	800546e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80052f2:	4b65      	ldr	r3, [pc, #404]	; (8005488 <HAL_CAN_ConfigFilter+0x1bc>)
 80052f4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052fc:	f043 0201 	orr.w	r2, r3, #1
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800530c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	021b      	lsls	r3, r3, #8
 8005322:	431a      	orrs	r2, r3
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	2201      	movs	r2, #1
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	43db      	mvns	r3, r3
 8005344:	401a      	ands	r2, r3
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d123      	bne.n	800539c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	43db      	mvns	r3, r3
 800535e:	401a      	ands	r2, r3
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005376:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	3248      	adds	r2, #72	; 0x48
 800537c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005390:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005392:	6979      	ldr	r1, [r7, #20]
 8005394:	3348      	adds	r3, #72	; 0x48
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	440b      	add	r3, r1
 800539a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d122      	bne.n	80053ea <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	431a      	orrs	r2, r3
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80053c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	3248      	adds	r2, #72	; 0x48
 80053ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80053de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80053e0:	6979      	ldr	r1, [r7, #20]
 80053e2:	3348      	adds	r3, #72	; 0x48
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	440b      	add	r3, r1
 80053e8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d109      	bne.n	8005406 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	43db      	mvns	r3, r3
 80053fc:	401a      	ands	r2, r3
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005404:	e007      	b.n	8005416 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	431a      	orrs	r2, r3
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d109      	bne.n	8005432 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	43db      	mvns	r3, r3
 8005428:	401a      	ands	r2, r3
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005430:	e007      	b.n	8005442 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	431a      	orrs	r2, r3
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d107      	bne.n	800545a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	431a      	orrs	r2, r3
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005460:	f023 0201 	bic.w	r2, r3, #1
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	e006      	b.n	800547c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
  }
}
 800547c:	4618      	mov	r0, r3
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	40006400 	.word	0x40006400

0800548c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 3020 	ldrb.w	r3, [r3, #32]
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b01      	cmp	r3, #1
 800549e:	d12e      	bne.n	80054fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0201 	bic.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054b8:	f7ff fdde 	bl	8005078 <HAL_GetTick>
 80054bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80054be:	e012      	b.n	80054e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80054c0:	f7ff fdda 	bl	8005078 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b0a      	cmp	r3, #10
 80054cc:	d90b      	bls.n	80054e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2205      	movs	r2, #5
 80054de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e012      	b.n	800550c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e5      	bne.n	80054c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	e006      	b.n	800550c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
  }
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005514:	b480      	push	{r7}
 8005516:	b089      	sub	sp, #36	; 0x24
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005528:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005532:	7ffb      	ldrb	r3, [r7, #31]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d003      	beq.n	8005540 <HAL_CAN_AddTxMessage+0x2c>
 8005538:	7ffb      	ldrb	r3, [r7, #31]
 800553a:	2b02      	cmp	r3, #2
 800553c:	f040 80b8 	bne.w	80056b0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10a      	bne.n	8005560 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005550:	2b00      	cmp	r3, #0
 8005552:	d105      	bne.n	8005560 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 80a0 	beq.w	80056a0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	0e1b      	lsrs	r3, r3, #24
 8005564:	f003 0303 	and.w	r3, r3, #3
 8005568:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2b02      	cmp	r3, #2
 800556e:	d907      	bls.n	8005580 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e09e      	b.n	80056be <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005580:	2201      	movs	r2, #1
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	409a      	lsls	r2, r3
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10d      	bne.n	80055ae <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800559c:	68f9      	ldr	r1, [r7, #12]
 800559e:	6809      	ldr	r1, [r1, #0]
 80055a0:	431a      	orrs	r2, r3
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	3318      	adds	r3, #24
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	440b      	add	r3, r1
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	e00f      	b.n	80055ce <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80055b8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80055be:	68f9      	ldr	r1, [r7, #12]
 80055c0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80055c2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	3318      	adds	r3, #24
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	440b      	add	r3, r1
 80055cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6819      	ldr	r1, [r3, #0]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	691a      	ldr	r2, [r3, #16]
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	3318      	adds	r3, #24
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	440b      	add	r3, r1
 80055de:	3304      	adds	r3, #4
 80055e0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	7d1b      	ldrb	r3, [r3, #20]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d111      	bne.n	800560e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	3318      	adds	r3, #24
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	4413      	add	r3, r2
 80055f6:	3304      	adds	r3, #4
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	6811      	ldr	r1, [r2, #0]
 80055fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	3318      	adds	r3, #24
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	440b      	add	r3, r1
 800560a:	3304      	adds	r3, #4
 800560c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3307      	adds	r3, #7
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	061a      	lsls	r2, r3, #24
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	3306      	adds	r3, #6
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	041b      	lsls	r3, r3, #16
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3305      	adds	r3, #5
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	021b      	lsls	r3, r3, #8
 8005628:	4313      	orrs	r3, r2
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	3204      	adds	r2, #4
 800562e:	7812      	ldrb	r2, [r2, #0]
 8005630:	4610      	mov	r0, r2
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	6811      	ldr	r1, [r2, #0]
 8005636:	ea43 0200 	orr.w	r2, r3, r0
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	440b      	add	r3, r1
 8005640:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005644:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	3303      	adds	r3, #3
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	061a      	lsls	r2, r3, #24
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3302      	adds	r3, #2
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	041b      	lsls	r3, r3, #16
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3301      	adds	r3, #1
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	021b      	lsls	r3, r3, #8
 8005660:	4313      	orrs	r3, r2
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	7812      	ldrb	r2, [r2, #0]
 8005666:	4610      	mov	r0, r2
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	6811      	ldr	r1, [r2, #0]
 800566c:	ea43 0200 	orr.w	r2, r3, r0
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	440b      	add	r3, r1
 8005676:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800567a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	3318      	adds	r3, #24
 8005684:	011b      	lsls	r3, r3, #4
 8005686:	4413      	add	r3, r2
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	6811      	ldr	r1, [r2, #0]
 800568e:	f043 0201 	orr.w	r2, r3, #1
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	3318      	adds	r3, #24
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	440b      	add	r3, r1
 800569a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800569c:	2300      	movs	r3, #0
 800569e:	e00e      	b.n	80056be <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e006      	b.n	80056be <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
  }
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3724      	adds	r7, #36	; 0x24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80056ca:	b480      	push	{r7}
 80056cc:	b087      	sub	sp, #28
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	60f8      	str	r0, [r7, #12]
 80056d2:	60b9      	str	r1, [r7, #8]
 80056d4:	607a      	str	r2, [r7, #4]
 80056d6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056de:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80056e0:	7dfb      	ldrb	r3, [r7, #23]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d003      	beq.n	80056ee <HAL_CAN_GetRxMessage+0x24>
 80056e6:	7dfb      	ldrb	r3, [r7, #23]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	f040 80f3 	bne.w	80058d4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10e      	bne.n	8005712 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d116      	bne.n	8005730 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e0e7      	b.n	80058e2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	f003 0303 	and.w	r3, r3, #3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d107      	bne.n	8005730 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e0d8      	b.n	80058e2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	331b      	adds	r3, #27
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	4413      	add	r3, r2
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0204 	and.w	r2, r3, #4
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10c      	bne.n	8005768 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	331b      	adds	r3, #27
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	4413      	add	r3, r2
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	0d5b      	lsrs	r3, r3, #21
 800575e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	e00b      	b.n	8005780 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	331b      	adds	r3, #27
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	4413      	add	r3, r2
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	08db      	lsrs	r3, r3, #3
 8005778:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	331b      	adds	r3, #27
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	4413      	add	r3, r2
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0202 	and.w	r2, r3, #2
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	331b      	adds	r3, #27
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	4413      	add	r3, r2
 80057a2:	3304      	adds	r3, #4
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 020f 	and.w	r2, r3, #15
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	331b      	adds	r3, #27
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	4413      	add	r3, r2
 80057ba:	3304      	adds	r3, #4
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	0a1b      	lsrs	r3, r3, #8
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	331b      	adds	r3, #27
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	4413      	add	r3, r2
 80057d2:	3304      	adds	r3, #4
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	0c1b      	lsrs	r3, r3, #16
 80057d8:	b29a      	uxth	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	0a1a      	lsrs	r2, r3, #8
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	3301      	adds	r3, #1
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	4413      	add	r3, r2
 8005818:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	0c1a      	lsrs	r2, r3, #16
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	3302      	adds	r3, #2
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	4413      	add	r3, r2
 8005832:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	0e1a      	lsrs	r2, r3, #24
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	3303      	adds	r3, #3
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	4413      	add	r3, r2
 800584c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	3304      	adds	r3, #4
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	4413      	add	r3, r2
 8005864:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	0a1a      	lsrs	r2, r3, #8
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	3305      	adds	r3, #5
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	4413      	add	r3, r2
 800587e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	0c1a      	lsrs	r2, r3, #16
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	3306      	adds	r3, #6
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	4413      	add	r3, r2
 8005898:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	0e1a      	lsrs	r2, r3, #24
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	3307      	adds	r3, #7
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d108      	bne.n	80058c0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f042 0220 	orr.w	r2, r2, #32
 80058bc:	60da      	str	r2, [r3, #12]
 80058be:	e007      	b.n	80058d0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f042 0220 	orr.w	r2, r2, #32
 80058ce:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	e006      	b.n	80058e2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
  }
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	371c      	adds	r7, #28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b085      	sub	sp, #20
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058fe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005900:	7bfb      	ldrb	r3, [r7, #15]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d002      	beq.n	800590c <HAL_CAN_ActivateNotification+0x1e>
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	2b02      	cmp	r3, #2
 800590a:	d109      	bne.n	8005920 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6959      	ldr	r1, [r3, #20]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	e006      	b.n	800592e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
  }
}
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b08a      	sub	sp, #40	; 0x28
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005942:	2300      	movs	r3, #0
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d07c      	beq.n	8005a7a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d023      	beq.n	80059d2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2201      	movs	r2, #1
 8005990:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f97d 	bl	8005c9c <HAL_CAN_TxMailbox0CompleteCallback>
 80059a2:	e016      	b.n	80059d2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d004      	beq.n	80059b8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80059b4:	627b      	str	r3, [r7, #36]	; 0x24
 80059b6:	e00c      	b.n	80059d2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	f003 0308 	and.w	r3, r3, #8
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d004      	beq.n	80059cc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
 80059ca:	e002      	b.n	80059d2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f983 	bl	8005cd8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d024      	beq.n	8005a26 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f95d 	bl	8005cb0 <HAL_CAN_TxMailbox1CompleteCallback>
 80059f6:	e016      	b.n	8005a26 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d004      	beq.n	8005a0c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
 8005a0a:	e00c      	b.n	8005a26 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d004      	beq.n	8005a20 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1e:	e002      	b.n	8005a26 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f963 	bl	8005cec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d024      	beq.n	8005a7a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005a38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f93d 	bl	8005cc4 <HAL_CAN_TxMailbox2CompleteCallback>
 8005a4a:	e016      	b.n	8005a7a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d004      	beq.n	8005a60 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a5e:	e00c      	b.n	8005a7a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d004      	beq.n	8005a74 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
 8005a72:	e002      	b.n	8005a7a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f943 	bl	8005d00 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00c      	beq.n	8005a9e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f003 0310 	and.w	r3, r3, #16
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d007      	beq.n	8005a9e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2210      	movs	r2, #16
 8005a9c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00b      	beq.n	8005ac0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d006      	beq.n	8005ac0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2208      	movs	r2, #8
 8005ab8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f92a 	bl	8005d14 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d009      	beq.n	8005ade <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f003 0303 	and.w	r3, r3, #3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7fa ff11 	bl	8000900 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00c      	beq.n	8005b02 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d007      	beq.n	8005b02 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2210      	movs	r2, #16
 8005b00:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	f003 0320 	and.w	r3, r3, #32
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00b      	beq.n	8005b24 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d006      	beq.n	8005b24 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2208      	movs	r2, #8
 8005b1c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f90c 	bl	8005d3c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	f003 0310 	and.w	r3, r3, #16
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d009      	beq.n	8005b42 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	f003 0303 	and.w	r3, r3, #3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f8f3 	bl	8005d28 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00b      	beq.n	8005b64 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f003 0310 	and.w	r3, r3, #16
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d006      	beq.n	8005b64 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2210      	movs	r2, #16
 8005b5c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f8f6 	bl	8005d50 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00b      	beq.n	8005b86 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d006      	beq.n	8005b86 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2208      	movs	r2, #8
 8005b7e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f8ef 	bl	8005d64 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d075      	beq.n	8005c7c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	f003 0304 	and.w	r3, r3, #4
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d06c      	beq.n	8005c74 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d008      	beq.n	8005bb6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	f043 0301 	orr.w	r3, r3, #1
 8005bb4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d008      	beq.n	8005bd2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	f043 0302 	orr.w	r3, r3, #2
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d008      	beq.n	8005bee <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	f043 0304 	orr.w	r3, r3, #4
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d03d      	beq.n	8005c74 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d038      	beq.n	8005c74 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c08:	2b30      	cmp	r3, #48	; 0x30
 8005c0a:	d017      	beq.n	8005c3c <HAL_CAN_IRQHandler+0x302>
 8005c0c:	2b30      	cmp	r3, #48	; 0x30
 8005c0e:	d804      	bhi.n	8005c1a <HAL_CAN_IRQHandler+0x2e0>
 8005c10:	2b10      	cmp	r3, #16
 8005c12:	d009      	beq.n	8005c28 <HAL_CAN_IRQHandler+0x2ee>
 8005c14:	2b20      	cmp	r3, #32
 8005c16:	d00c      	beq.n	8005c32 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005c18:	e024      	b.n	8005c64 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8005c1a:	2b50      	cmp	r3, #80	; 0x50
 8005c1c:	d018      	beq.n	8005c50 <HAL_CAN_IRQHandler+0x316>
 8005c1e:	2b60      	cmp	r3, #96	; 0x60
 8005c20:	d01b      	beq.n	8005c5a <HAL_CAN_IRQHandler+0x320>
 8005c22:	2b40      	cmp	r3, #64	; 0x40
 8005c24:	d00f      	beq.n	8005c46 <HAL_CAN_IRQHandler+0x30c>
            break;
 8005c26:	e01d      	b.n	8005c64 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	f043 0308 	orr.w	r3, r3, #8
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c30:	e018      	b.n	8005c64 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	f043 0310 	orr.w	r3, r3, #16
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c3a:	e013      	b.n	8005c64 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	f043 0320 	orr.w	r3, r3, #32
 8005c42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c44:	e00e      	b.n	8005c64 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c4e:	e009      	b.n	8005c64 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c58:	e004      	b.n	8005c64 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005c62:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005c72:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2204      	movs	r2, #4
 8005c7a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d008      	beq.n	8005c94 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f872 	bl	8005d78 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005c94:	bf00      	nop
 8005c96:	3728      	adds	r7, #40	; 0x28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d9c:	4b0c      	ldr	r3, [pc, #48]	; (8005dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005da8:	4013      	ands	r3, r2
 8005daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005dbe:	4a04      	ldr	r2, [pc, #16]	; (8005dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	60d3      	str	r3, [r2, #12]
}
 8005dc4:	bf00      	nop
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	e000ed00 	.word	0xe000ed00

08005dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005dd8:	4b04      	ldr	r3, [pc, #16]	; (8005dec <__NVIC_GetPriorityGrouping+0x18>)
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	0a1b      	lsrs	r3, r3, #8
 8005dde:	f003 0307 	and.w	r3, r3, #7
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	e000ed00 	.word	0xe000ed00

08005df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	4603      	mov	r3, r0
 8005df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	db0b      	blt.n	8005e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	f003 021f 	and.w	r2, r3, #31
 8005e08:	4907      	ldr	r1, [pc, #28]	; (8005e28 <__NVIC_EnableIRQ+0x38>)
 8005e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e0e:	095b      	lsrs	r3, r3, #5
 8005e10:	2001      	movs	r0, #1
 8005e12:	fa00 f202 	lsl.w	r2, r0, r2
 8005e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	e000e100 	.word	0xe000e100

08005e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	4603      	mov	r3, r0
 8005e34:	6039      	str	r1, [r7, #0]
 8005e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	db0a      	blt.n	8005e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	490c      	ldr	r1, [pc, #48]	; (8005e78 <__NVIC_SetPriority+0x4c>)
 8005e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e4a:	0112      	lsls	r2, r2, #4
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	440b      	add	r3, r1
 8005e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e54:	e00a      	b.n	8005e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	4908      	ldr	r1, [pc, #32]	; (8005e7c <__NVIC_SetPriority+0x50>)
 8005e5c:	79fb      	ldrb	r3, [r7, #7]
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	3b04      	subs	r3, #4
 8005e64:	0112      	lsls	r2, r2, #4
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	440b      	add	r3, r1
 8005e6a:	761a      	strb	r2, [r3, #24]
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	e000e100 	.word	0xe000e100
 8005e7c:	e000ed00 	.word	0xe000ed00

08005e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b089      	sub	sp, #36	; 0x24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	f1c3 0307 	rsb	r3, r3, #7
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	bf28      	it	cs
 8005e9e:	2304      	movcs	r3, #4
 8005ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	2b06      	cmp	r3, #6
 8005ea8:	d902      	bls.n	8005eb0 <NVIC_EncodePriority+0x30>
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	3b03      	subs	r3, #3
 8005eae:	e000      	b.n	8005eb2 <NVIC_EncodePriority+0x32>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	43da      	mvns	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	401a      	ands	r2, r3
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ec8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed2:	43d9      	mvns	r1, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ed8:	4313      	orrs	r3, r2
         );
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3724      	adds	r7, #36	; 0x24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b082      	sub	sp, #8
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7ff ff4c 	bl	8005d8c <__NVIC_SetPriorityGrouping>
}
 8005ef4:	bf00      	nop
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	4603      	mov	r3, r0
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f0e:	f7ff ff61 	bl	8005dd4 <__NVIC_GetPriorityGrouping>
 8005f12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	68b9      	ldr	r1, [r7, #8]
 8005f18:	6978      	ldr	r0, [r7, #20]
 8005f1a:	f7ff ffb1 	bl	8005e80 <NVIC_EncodePriority>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f24:	4611      	mov	r1, r2
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff ff80 	bl	8005e2c <__NVIC_SetPriority>
}
 8005f2c:	bf00      	nop
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff ff54 	bl	8005df0 <__NVIC_EnableIRQ>
}
 8005f48:	bf00      	nop
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d004      	beq.n	8005f6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2280      	movs	r2, #128	; 0x80
 8005f68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e00c      	b.n	8005f88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2205      	movs	r2, #5
 8005f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0201 	bic.w	r2, r2, #1
 8005f84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fa2:	b2db      	uxtb	r3, r3
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b089      	sub	sp, #36	; 0x24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	61fb      	str	r3, [r7, #28]
 8005fca:	e16b      	b.n	80062a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005fcc:	2201      	movs	r2, #1
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	f040 815a 	bne.w	800629e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d00b      	beq.n	800600a <HAL_GPIO_Init+0x5a>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d007      	beq.n	800600a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ffe:	2b11      	cmp	r3, #17
 8006000:	d003      	beq.n	800600a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b12      	cmp	r3, #18
 8006008:	d130      	bne.n	800606c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	2203      	movs	r2, #3
 8006016:	fa02 f303 	lsl.w	r3, r2, r3
 800601a:	43db      	mvns	r3, r3
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	4013      	ands	r3, r2
 8006020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68da      	ldr	r2, [r3, #12]
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	fa02 f303 	lsl.w	r3, r2, r3
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	4313      	orrs	r3, r2
 8006032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006040:	2201      	movs	r2, #1
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	fa02 f303 	lsl.w	r3, r2, r3
 8006048:	43db      	mvns	r3, r3
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	4013      	ands	r3, r2
 800604e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	091b      	lsrs	r3, r3, #4
 8006056:	f003 0201 	and.w	r2, r3, #1
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	fa02 f303 	lsl.w	r3, r2, r3
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	4313      	orrs	r3, r2
 8006064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	2203      	movs	r2, #3
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	43db      	mvns	r3, r3
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	4013      	ands	r3, r2
 8006082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	fa02 f303 	lsl.w	r3, r2, r3
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	4313      	orrs	r3, r2
 8006094:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d003      	beq.n	80060ac <HAL_GPIO_Init+0xfc>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	2b12      	cmp	r3, #18
 80060aa:	d123      	bne.n	80060f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	08da      	lsrs	r2, r3, #3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3208      	adds	r2, #8
 80060b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	220f      	movs	r2, #15
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	43db      	mvns	r3, r3
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	4013      	ands	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	fa02 f303 	lsl.w	r3, r2, r3
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	08da      	lsrs	r2, r3, #3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	3208      	adds	r2, #8
 80060ee:	69b9      	ldr	r1, [r7, #24]
 80060f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	2203      	movs	r2, #3
 8006100:	fa02 f303 	lsl.w	r3, r2, r3
 8006104:	43db      	mvns	r3, r3
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	4013      	ands	r3, r2
 800610a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f003 0203 	and.w	r2, r3, #3
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	fa02 f303 	lsl.w	r3, r2, r3
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	4313      	orrs	r3, r2
 8006120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 80b4 	beq.w	800629e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006136:	2300      	movs	r3, #0
 8006138:	60fb      	str	r3, [r7, #12]
 800613a:	4b5f      	ldr	r3, [pc, #380]	; (80062b8 <HAL_GPIO_Init+0x308>)
 800613c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613e:	4a5e      	ldr	r2, [pc, #376]	; (80062b8 <HAL_GPIO_Init+0x308>)
 8006140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006144:	6453      	str	r3, [r2, #68]	; 0x44
 8006146:	4b5c      	ldr	r3, [pc, #368]	; (80062b8 <HAL_GPIO_Init+0x308>)
 8006148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006152:	4a5a      	ldr	r2, [pc, #360]	; (80062bc <HAL_GPIO_Init+0x30c>)
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	089b      	lsrs	r3, r3, #2
 8006158:	3302      	adds	r3, #2
 800615a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800615e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	f003 0303 	and.w	r3, r3, #3
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	220f      	movs	r2, #15
 800616a:	fa02 f303 	lsl.w	r3, r2, r3
 800616e:	43db      	mvns	r3, r3
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	4013      	ands	r3, r2
 8006174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a51      	ldr	r2, [pc, #324]	; (80062c0 <HAL_GPIO_Init+0x310>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d02b      	beq.n	80061d6 <HAL_GPIO_Init+0x226>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a50      	ldr	r2, [pc, #320]	; (80062c4 <HAL_GPIO_Init+0x314>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d025      	beq.n	80061d2 <HAL_GPIO_Init+0x222>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a4f      	ldr	r2, [pc, #316]	; (80062c8 <HAL_GPIO_Init+0x318>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d01f      	beq.n	80061ce <HAL_GPIO_Init+0x21e>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a4e      	ldr	r2, [pc, #312]	; (80062cc <HAL_GPIO_Init+0x31c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d019      	beq.n	80061ca <HAL_GPIO_Init+0x21a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a4d      	ldr	r2, [pc, #308]	; (80062d0 <HAL_GPIO_Init+0x320>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d013      	beq.n	80061c6 <HAL_GPIO_Init+0x216>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a4c      	ldr	r2, [pc, #304]	; (80062d4 <HAL_GPIO_Init+0x324>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d00d      	beq.n	80061c2 <HAL_GPIO_Init+0x212>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a4b      	ldr	r2, [pc, #300]	; (80062d8 <HAL_GPIO_Init+0x328>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d007      	beq.n	80061be <HAL_GPIO_Init+0x20e>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a4a      	ldr	r2, [pc, #296]	; (80062dc <HAL_GPIO_Init+0x32c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d101      	bne.n	80061ba <HAL_GPIO_Init+0x20a>
 80061b6:	2307      	movs	r3, #7
 80061b8:	e00e      	b.n	80061d8 <HAL_GPIO_Init+0x228>
 80061ba:	2308      	movs	r3, #8
 80061bc:	e00c      	b.n	80061d8 <HAL_GPIO_Init+0x228>
 80061be:	2306      	movs	r3, #6
 80061c0:	e00a      	b.n	80061d8 <HAL_GPIO_Init+0x228>
 80061c2:	2305      	movs	r3, #5
 80061c4:	e008      	b.n	80061d8 <HAL_GPIO_Init+0x228>
 80061c6:	2304      	movs	r3, #4
 80061c8:	e006      	b.n	80061d8 <HAL_GPIO_Init+0x228>
 80061ca:	2303      	movs	r3, #3
 80061cc:	e004      	b.n	80061d8 <HAL_GPIO_Init+0x228>
 80061ce:	2302      	movs	r3, #2
 80061d0:	e002      	b.n	80061d8 <HAL_GPIO_Init+0x228>
 80061d2:	2301      	movs	r3, #1
 80061d4:	e000      	b.n	80061d8 <HAL_GPIO_Init+0x228>
 80061d6:	2300      	movs	r3, #0
 80061d8:	69fa      	ldr	r2, [r7, #28]
 80061da:	f002 0203 	and.w	r2, r2, #3
 80061de:	0092      	lsls	r2, r2, #2
 80061e0:	4093      	lsls	r3, r2
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061e8:	4934      	ldr	r1, [pc, #208]	; (80062bc <HAL_GPIO_Init+0x30c>)
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	089b      	lsrs	r3, r3, #2
 80061ee:	3302      	adds	r3, #2
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061f6:	4b3a      	ldr	r3, [pc, #232]	; (80062e0 <HAL_GPIO_Init+0x330>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	43db      	mvns	r3, r3
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	4013      	ands	r3, r2
 8006204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	4313      	orrs	r3, r2
 8006218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800621a:	4a31      	ldr	r2, [pc, #196]	; (80062e0 <HAL_GPIO_Init+0x330>)
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006220:	4b2f      	ldr	r3, [pc, #188]	; (80062e0 <HAL_GPIO_Init+0x330>)
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	43db      	mvns	r3, r3
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	4013      	ands	r3, r2
 800622e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d003      	beq.n	8006244 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006244:	4a26      	ldr	r2, [pc, #152]	; (80062e0 <HAL_GPIO_Init+0x330>)
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800624a:	4b25      	ldr	r3, [pc, #148]	; (80062e0 <HAL_GPIO_Init+0x330>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	43db      	mvns	r3, r3
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	4013      	ands	r3, r2
 8006258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	4313      	orrs	r3, r2
 800626c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800626e:	4a1c      	ldr	r2, [pc, #112]	; (80062e0 <HAL_GPIO_Init+0x330>)
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006274:	4b1a      	ldr	r3, [pc, #104]	; (80062e0 <HAL_GPIO_Init+0x330>)
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	43db      	mvns	r3, r3
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	4013      	ands	r3, r2
 8006282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d003      	beq.n	8006298 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	4313      	orrs	r3, r2
 8006296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006298:	4a11      	ldr	r2, [pc, #68]	; (80062e0 <HAL_GPIO_Init+0x330>)
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	3301      	adds	r3, #1
 80062a2:	61fb      	str	r3, [r7, #28]
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	2b0f      	cmp	r3, #15
 80062a8:	f67f ae90 	bls.w	8005fcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80062ac:	bf00      	nop
 80062ae:	3724      	adds	r7, #36	; 0x24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	40023800 	.word	0x40023800
 80062bc:	40013800 	.word	0x40013800
 80062c0:	40020000 	.word	0x40020000
 80062c4:	40020400 	.word	0x40020400
 80062c8:	40020800 	.word	0x40020800
 80062cc:	40020c00 	.word	0x40020c00
 80062d0:	40021000 	.word	0x40021000
 80062d4:	40021400 	.word	0x40021400
 80062d8:	40021800 	.word	0x40021800
 80062dc:	40021c00 	.word	0x40021c00
 80062e0:	40013c00 	.word	0x40013c00

080062e4 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	460b      	mov	r3, r1
 80062ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	695a      	ldr	r2, [r3, #20]
 80062f4:	887b      	ldrh	r3, [r7, #2]
 80062f6:	401a      	ands	r2, r3
 80062f8:	887b      	ldrh	r3, [r7, #2]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d104      	bne.n	8006308 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80062fe:	887b      	ldrh	r3, [r7, #2]
 8006300:	041a      	lsls	r2, r3, #16
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006306:	e002      	b.n	800630e <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006308:	887a      	ldrh	r2, [r7, #2]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	619a      	str	r2, [r3, #24]
}
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
	...

0800631c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e11f      	b.n	800656e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fb f956 	bl	80015f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2224      	movs	r2, #36	; 0x24
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0201 	bic.w	r2, r2, #1
 800635e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800636e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800637e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006380:	f004 f8ca 	bl	800a518 <HAL_RCC_GetPCLK1Freq>
 8006384:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	4a7b      	ldr	r2, [pc, #492]	; (8006578 <HAL_I2C_Init+0x25c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d807      	bhi.n	80063a0 <HAL_I2C_Init+0x84>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4a7a      	ldr	r2, [pc, #488]	; (800657c <HAL_I2C_Init+0x260>)
 8006394:	4293      	cmp	r3, r2
 8006396:	bf94      	ite	ls
 8006398:	2301      	movls	r3, #1
 800639a:	2300      	movhi	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	e006      	b.n	80063ae <HAL_I2C_Init+0x92>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4a77      	ldr	r2, [pc, #476]	; (8006580 <HAL_I2C_Init+0x264>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	bf94      	ite	ls
 80063a8:	2301      	movls	r3, #1
 80063aa:	2300      	movhi	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e0db      	b.n	800656e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4a72      	ldr	r2, [pc, #456]	; (8006584 <HAL_I2C_Init+0x268>)
 80063ba:	fba2 2303 	umull	r2, r3, r2, r3
 80063be:	0c9b      	lsrs	r3, r3, #18
 80063c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	4a64      	ldr	r2, [pc, #400]	; (8006578 <HAL_I2C_Init+0x25c>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d802      	bhi.n	80063f0 <HAL_I2C_Init+0xd4>
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	3301      	adds	r3, #1
 80063ee:	e009      	b.n	8006404 <HAL_I2C_Init+0xe8>
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80063f6:	fb02 f303 	mul.w	r3, r2, r3
 80063fa:	4a63      	ldr	r2, [pc, #396]	; (8006588 <HAL_I2C_Init+0x26c>)
 80063fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006400:	099b      	lsrs	r3, r3, #6
 8006402:	3301      	adds	r3, #1
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6812      	ldr	r2, [r2, #0]
 8006408:	430b      	orrs	r3, r1
 800640a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006416:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	4956      	ldr	r1, [pc, #344]	; (8006578 <HAL_I2C_Init+0x25c>)
 8006420:	428b      	cmp	r3, r1
 8006422:	d80d      	bhi.n	8006440 <HAL_I2C_Init+0x124>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	1e59      	subs	r1, r3, #1
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	005b      	lsls	r3, r3, #1
 800642e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006432:	3301      	adds	r3, #1
 8006434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006438:	2b04      	cmp	r3, #4
 800643a:	bf38      	it	cc
 800643c:	2304      	movcc	r3, #4
 800643e:	e04f      	b.n	80064e0 <HAL_I2C_Init+0x1c4>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d111      	bne.n	800646c <HAL_I2C_Init+0x150>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	1e58      	subs	r0, r3, #1
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6859      	ldr	r1, [r3, #4]
 8006450:	460b      	mov	r3, r1
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	440b      	add	r3, r1
 8006456:	fbb0 f3f3 	udiv	r3, r0, r3
 800645a:	3301      	adds	r3, #1
 800645c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006460:	2b00      	cmp	r3, #0
 8006462:	bf0c      	ite	eq
 8006464:	2301      	moveq	r3, #1
 8006466:	2300      	movne	r3, #0
 8006468:	b2db      	uxtb	r3, r3
 800646a:	e012      	b.n	8006492 <HAL_I2C_Init+0x176>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	1e58      	subs	r0, r3, #1
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6859      	ldr	r1, [r3, #4]
 8006474:	460b      	mov	r3, r1
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	440b      	add	r3, r1
 800647a:	0099      	lsls	r1, r3, #2
 800647c:	440b      	add	r3, r1
 800647e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006482:	3301      	adds	r3, #1
 8006484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006488:	2b00      	cmp	r3, #0
 800648a:	bf0c      	ite	eq
 800648c:	2301      	moveq	r3, #1
 800648e:	2300      	movne	r3, #0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <HAL_I2C_Init+0x17e>
 8006496:	2301      	movs	r3, #1
 8006498:	e022      	b.n	80064e0 <HAL_I2C_Init+0x1c4>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10e      	bne.n	80064c0 <HAL_I2C_Init+0x1a4>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	1e58      	subs	r0, r3, #1
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6859      	ldr	r1, [r3, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	440b      	add	r3, r1
 80064b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80064b4:	3301      	adds	r3, #1
 80064b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064be:	e00f      	b.n	80064e0 <HAL_I2C_Init+0x1c4>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	1e58      	subs	r0, r3, #1
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6859      	ldr	r1, [r3, #4]
 80064c8:	460b      	mov	r3, r1
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	440b      	add	r3, r1
 80064ce:	0099      	lsls	r1, r3, #2
 80064d0:	440b      	add	r3, r1
 80064d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80064d6:	3301      	adds	r3, #1
 80064d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064e0:	6879      	ldr	r1, [r7, #4]
 80064e2:	6809      	ldr	r1, [r1, #0]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	69da      	ldr	r2, [r3, #28]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800650e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	6911      	ldr	r1, [r2, #16]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	68d2      	ldr	r2, [r2, #12]
 800651a:	4311      	orrs	r1, r2
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6812      	ldr	r2, [r2, #0]
 8006520:	430b      	orrs	r3, r1
 8006522:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	695a      	ldr	r2, [r3, #20]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	431a      	orrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f042 0201 	orr.w	r2, r2, #1
 800654e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2220      	movs	r2, #32
 800655a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	000186a0 	.word	0x000186a0
 800657c:	001e847f 	.word	0x001e847f
 8006580:	003d08ff 	.word	0x003d08ff
 8006584:	431bde83 	.word	0x431bde83
 8006588:	10624dd3 	.word	0x10624dd3

0800658c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b088      	sub	sp, #32
 8006590:	af02      	add	r7, sp, #8
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	607a      	str	r2, [r7, #4]
 8006596:	461a      	mov	r2, r3
 8006598:	460b      	mov	r3, r1
 800659a:	817b      	strh	r3, [r7, #10]
 800659c:	4613      	mov	r3, r2
 800659e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065a0:	f7fe fd6a 	bl	8005078 <HAL_GetTick>
 80065a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	f040 80e0 	bne.w	8006774 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	2319      	movs	r3, #25
 80065ba:	2201      	movs	r2, #1
 80065bc:	4970      	ldr	r1, [pc, #448]	; (8006780 <HAL_I2C_Master_Transmit+0x1f4>)
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f001 ffc2 	bl	8008548 <I2C_WaitOnFlagUntilTimeout>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80065ca:	2302      	movs	r3, #2
 80065cc:	e0d3      	b.n	8006776 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_I2C_Master_Transmit+0x50>
 80065d8:	2302      	movs	r3, #2
 80065da:	e0cc      	b.n	8006776 <HAL_I2C_Master_Transmit+0x1ea>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d007      	beq.n	8006602 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f042 0201 	orr.w	r2, r2, #1
 8006600:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006610:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2221      	movs	r2, #33	; 0x21
 8006616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2210      	movs	r2, #16
 800661e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	893a      	ldrh	r2, [r7, #8]
 8006632:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4a50      	ldr	r2, [pc, #320]	; (8006784 <HAL_I2C_Master_Transmit+0x1f8>)
 8006642:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006644:	8979      	ldrh	r1, [r7, #10]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	6a3a      	ldr	r2, [r7, #32]
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f001 fd6a 	bl	8008124 <I2C_MasterRequestWrite>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e08d      	b.n	8006776 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800665a:	2300      	movs	r3, #0
 800665c:	613b      	str	r3, [r7, #16]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	613b      	str	r3, [r7, #16]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	613b      	str	r3, [r7, #16]
 800666e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006670:	e066      	b.n	8006740 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	6a39      	ldr	r1, [r7, #32]
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f002 f83c 	bl	80086f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00d      	beq.n	800669e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006686:	2b04      	cmp	r3, #4
 8006688:	d107      	bne.n	800669a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006698:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e06b      	b.n	8006776 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	781a      	ldrb	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c6:	3b01      	subs	r3, #1
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d11b      	bne.n	8006714 <HAL_I2C_Master_Transmit+0x188>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d017      	beq.n	8006714 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	781a      	ldrb	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fe:	b29b      	uxth	r3, r3
 8006700:	3b01      	subs	r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800670c:	3b01      	subs	r3, #1
 800670e:	b29a      	uxth	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	6a39      	ldr	r1, [r7, #32]
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f002 f82c 	bl	8008776 <I2C_WaitOnBTFFlagUntilTimeout>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00d      	beq.n	8006740 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	2b04      	cmp	r3, #4
 800672a:	d107      	bne.n	800673c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800673a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e01a      	b.n	8006776 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006744:	2b00      	cmp	r3, #0
 8006746:	d194      	bne.n	8006672 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006756:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2220      	movs	r2, #32
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006770:	2300      	movs	r3, #0
 8006772:	e000      	b.n	8006776 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006774:	2302      	movs	r3, #2
  }
}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	00100002 	.word	0x00100002
 8006784:	ffff0000 	.word	0xffff0000

08006788 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b08c      	sub	sp, #48	; 0x30
 800678c:	af02      	add	r7, sp, #8
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	4608      	mov	r0, r1
 8006792:	4611      	mov	r1, r2
 8006794:	461a      	mov	r2, r3
 8006796:	4603      	mov	r3, r0
 8006798:	817b      	strh	r3, [r7, #10]
 800679a:	460b      	mov	r3, r1
 800679c:	813b      	strh	r3, [r7, #8]
 800679e:	4613      	mov	r3, r2
 80067a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067a2:	f7fe fc69 	bl	8005078 <HAL_GetTick>
 80067a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b20      	cmp	r3, #32
 80067b2:	f040 8208 	bne.w	8006bc6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	2319      	movs	r3, #25
 80067bc:	2201      	movs	r2, #1
 80067be:	497b      	ldr	r1, [pc, #492]	; (80069ac <HAL_I2C_Mem_Read+0x224>)
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f001 fec1 	bl	8008548 <I2C_WaitOnFlagUntilTimeout>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80067cc:	2302      	movs	r3, #2
 80067ce:	e1fb      	b.n	8006bc8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d101      	bne.n	80067de <HAL_I2C_Mem_Read+0x56>
 80067da:	2302      	movs	r3, #2
 80067dc:	e1f4      	b.n	8006bc8 <HAL_I2C_Mem_Read+0x440>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d007      	beq.n	8006804 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006812:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2222      	movs	r2, #34	; 0x22
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2240      	movs	r2, #64	; 0x40
 8006820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800682e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006834:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683a:	b29a      	uxth	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4a5b      	ldr	r2, [pc, #364]	; (80069b0 <HAL_I2C_Mem_Read+0x228>)
 8006844:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006846:	88f8      	ldrh	r0, [r7, #6]
 8006848:	893a      	ldrh	r2, [r7, #8]
 800684a:	8979      	ldrh	r1, [r7, #10]
 800684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684e:	9301      	str	r3, [sp, #4]
 8006850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	4603      	mov	r3, r0
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f001 fce6 	bl	8008228 <I2C_RequestMemoryRead>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e1b0      	b.n	8006bc8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686a:	2b00      	cmp	r3, #0
 800686c:	d113      	bne.n	8006896 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800686e:	2300      	movs	r3, #0
 8006870:	623b      	str	r3, [r7, #32]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	623b      	str	r3, [r7, #32]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	623b      	str	r3, [r7, #32]
 8006882:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	e184      	b.n	8006ba0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689a:	2b01      	cmp	r3, #1
 800689c:	d11b      	bne.n	80068d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ae:	2300      	movs	r3, #0
 80068b0:	61fb      	str	r3, [r7, #28]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	61fb      	str	r3, [r7, #28]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	61fb      	str	r3, [r7, #28]
 80068c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	e164      	b.n	8006ba0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d11b      	bne.n	8006916 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068fe:	2300      	movs	r3, #0
 8006900:	61bb      	str	r3, [r7, #24]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	61bb      	str	r3, [r7, #24]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	61bb      	str	r3, [r7, #24]
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	e144      	b.n	8006ba0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006916:	2300      	movs	r3, #0
 8006918:	617b      	str	r3, [r7, #20]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	617b      	str	r3, [r7, #20]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	617b      	str	r3, [r7, #20]
 800692a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800692c:	e138      	b.n	8006ba0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006932:	2b03      	cmp	r3, #3
 8006934:	f200 80f1 	bhi.w	8006b1a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800693c:	2b01      	cmp	r3, #1
 800693e:	d123      	bne.n	8006988 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006942:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f001 ff89 	bl	800885c <I2C_WaitOnRXNEFlagUntilTimeout>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e139      	b.n	8006bc8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	691a      	ldr	r2, [r3, #16]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006970:	3b01      	subs	r3, #1
 8006972:	b29a      	uxth	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800697c:	b29b      	uxth	r3, r3
 800697e:	3b01      	subs	r3, #1
 8006980:	b29a      	uxth	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006986:	e10b      	b.n	8006ba0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800698c:	2b02      	cmp	r3, #2
 800698e:	d14e      	bne.n	8006a2e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	2200      	movs	r2, #0
 8006998:	4906      	ldr	r1, [pc, #24]	; (80069b4 <HAL_I2C_Mem_Read+0x22c>)
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f001 fdd4 	bl	8008548 <I2C_WaitOnFlagUntilTimeout>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d008      	beq.n	80069b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e10e      	b.n	8006bc8 <HAL_I2C_Mem_Read+0x440>
 80069aa:	bf00      	nop
 80069ac:	00100002 	.word	0x00100002
 80069b0:	ffff0000 	.word	0xffff0000
 80069b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691a      	ldr	r2, [r3, #16]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	b2d2      	uxtb	r2, r2
 80069d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e4:	3b01      	subs	r3, #1
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	3b01      	subs	r3, #1
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	691a      	ldr	r2, [r3, #16]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a2c:	e0b8      	b.n	8006ba0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a34:	2200      	movs	r2, #0
 8006a36:	4966      	ldr	r1, [pc, #408]	; (8006bd0 <HAL_I2C_Mem_Read+0x448>)
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f001 fd85 	bl	8008548 <I2C_WaitOnFlagUntilTimeout>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d001      	beq.n	8006a48 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e0bf      	b.n	8006bc8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	691a      	ldr	r2, [r3, #16]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	b2d2      	uxtb	r2, r2
 8006a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	1c5a      	adds	r2, r3, #1
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a74:	3b01      	subs	r3, #1
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3b01      	subs	r3, #1
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a90:	2200      	movs	r2, #0
 8006a92:	494f      	ldr	r1, [pc, #316]	; (8006bd0 <HAL_I2C_Mem_Read+0x448>)
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f001 fd57 	bl	8008548 <I2C_WaitOnFlagUntilTimeout>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e091      	b.n	8006bc8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ab2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	691a      	ldr	r2, [r3, #16]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	b2d2      	uxtb	r2, r2
 8006ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	691a      	ldr	r2, [r3, #16]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b02:	3b01      	subs	r3, #1
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	3b01      	subs	r3, #1
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b18:	e042      	b.n	8006ba0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f001 fe9c 	bl	800885c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e04c      	b.n	8006bc8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	691a      	ldr	r2, [r3, #16]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b38:	b2d2      	uxtb	r2, r2
 8006b3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	f003 0304 	and.w	r3, r3, #4
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	d118      	bne.n	8006ba0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	691a      	ldr	r2, [r3, #16]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b78:	b2d2      	uxtb	r2, r2
 8006b7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f47f aec2 	bne.w	800692e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	e000      	b.n	8006bc8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006bc6:	2302      	movs	r3, #2
  }
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3728      	adds	r7, #40	; 0x28
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	00010004 	.word	0x00010004

08006bd4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bf4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
 8006c00:	2b10      	cmp	r3, #16
 8006c02:	d003      	beq.n	8006c0c <HAL_I2C_EV_IRQHandler+0x38>
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	2b40      	cmp	r3, #64	; 0x40
 8006c08:	f040 80bd 	bne.w	8006d86 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10d      	bne.n	8006c42 <HAL_I2C_EV_IRQHandler+0x6e>
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006c2c:	d003      	beq.n	8006c36 <HAL_I2C_EV_IRQHandler+0x62>
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006c34:	d101      	bne.n	8006c3a <HAL_I2C_EV_IRQHandler+0x66>
 8006c36:	2301      	movs	r3, #1
 8006c38:	e000      	b.n	8006c3c <HAL_I2C_EV_IRQHandler+0x68>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	f000 812e 	beq.w	8006e9e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00c      	beq.n	8006c66 <HAL_I2C_EV_IRQHandler+0x92>
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	0a5b      	lsrs	r3, r3, #9
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d006      	beq.n	8006c66 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f001 fe84 	bl	8008966 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fcbb 	bl	80075da <I2C_Master_SB>
 8006c64:	e08e      	b.n	8006d84 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	08db      	lsrs	r3, r3, #3
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d009      	beq.n	8006c86 <HAL_I2C_EV_IRQHandler+0xb2>
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	0a5b      	lsrs	r3, r3, #9
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fd31 	bl	80076e6 <I2C_Master_ADD10>
 8006c84:	e07e      	b.n	8006d84 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	085b      	lsrs	r3, r3, #1
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d009      	beq.n	8006ca6 <HAL_I2C_EV_IRQHandler+0xd2>
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	0a5b      	lsrs	r3, r3, #9
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fd4b 	bl	800773a <I2C_Master_ADDR>
 8006ca4:	e06e      	b.n	8006d84 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	089b      	lsrs	r3, r3, #2
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d037      	beq.n	8006d22 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cc0:	f000 80ef 	beq.w	8006ea2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	09db      	lsrs	r3, r3, #7
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00f      	beq.n	8006cf0 <HAL_I2C_EV_IRQHandler+0x11c>
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	0a9b      	lsrs	r3, r3, #10
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d009      	beq.n	8006cf0 <HAL_I2C_EV_IRQHandler+0x11c>
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	089b      	lsrs	r3, r3, #2
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d103      	bne.n	8006cf0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f948 	bl	8006f7e <I2C_MasterTransmit_TXE>
 8006cee:	e049      	b.n	8006d84 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	089b      	lsrs	r3, r3, #2
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 80d2 	beq.w	8006ea2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	0a5b      	lsrs	r3, r3, #9
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 80cb 	beq.w	8006ea2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
 8006d0e:	2b10      	cmp	r3, #16
 8006d10:	d103      	bne.n	8006d1a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f9cf 	bl	80070b6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d18:	e0c3      	b.n	8006ea2 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fa33 	bl	8007186 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d20:	e0bf      	b.n	8006ea2 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d30:	f000 80b7 	beq.w	8006ea2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	099b      	lsrs	r3, r3, #6
 8006d38:	f003 0301 	and.w	r3, r3, #1
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00f      	beq.n	8006d60 <HAL_I2C_EV_IRQHandler+0x18c>
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	0a9b      	lsrs	r3, r3, #10
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d009      	beq.n	8006d60 <HAL_I2C_EV_IRQHandler+0x18c>
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	089b      	lsrs	r3, r3, #2
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d103      	bne.n	8006d60 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 faa3 	bl	80072a4 <I2C_MasterReceive_RXNE>
 8006d5e:	e011      	b.n	8006d84 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	089b      	lsrs	r3, r3, #2
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 809a 	beq.w	8006ea2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	0a5b      	lsrs	r3, r3, #9
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 8093 	beq.w	8006ea2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fb42 	bl	8007406 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d82:	e08e      	b.n	8006ea2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8006d84:	e08d      	b.n	8006ea2 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d004      	beq.n	8006d98 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	61fb      	str	r3, [r7, #28]
 8006d96:	e007      	b.n	8006da8 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	085b      	lsrs	r3, r3, #1
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d012      	beq.n	8006dda <HAL_I2C_EV_IRQHandler+0x206>
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	0a5b      	lsrs	r3, r3, #9
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00c      	beq.n	8006dda <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006dd0:	69b9      	ldr	r1, [r7, #24]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 ff00 	bl	8007bd8 <I2C_Slave_ADDR>
 8006dd8:	e066      	b.n	8006ea8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	091b      	lsrs	r3, r3, #4
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d009      	beq.n	8006dfa <HAL_I2C_EV_IRQHandler+0x226>
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	0a5b      	lsrs	r3, r3, #9
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 ff34 	bl	8007c60 <I2C_Slave_STOPF>
 8006df8:	e056      	b.n	8006ea8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006dfa:	7bbb      	ldrb	r3, [r7, #14]
 8006dfc:	2b21      	cmp	r3, #33	; 0x21
 8006dfe:	d002      	beq.n	8006e06 <HAL_I2C_EV_IRQHandler+0x232>
 8006e00:	7bbb      	ldrb	r3, [r7, #14]
 8006e02:	2b29      	cmp	r3, #41	; 0x29
 8006e04:	d125      	bne.n	8006e52 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	09db      	lsrs	r3, r3, #7
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00f      	beq.n	8006e32 <HAL_I2C_EV_IRQHandler+0x25e>
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	0a9b      	lsrs	r3, r3, #10
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d009      	beq.n	8006e32 <HAL_I2C_EV_IRQHandler+0x25e>
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	089b      	lsrs	r3, r3, #2
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d103      	bne.n	8006e32 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fe16 	bl	8007a5c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e30:	e039      	b.n	8006ea6 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	089b      	lsrs	r3, r3, #2
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d033      	beq.n	8006ea6 <HAL_I2C_EV_IRQHandler+0x2d2>
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	0a5b      	lsrs	r3, r3, #9
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d02d      	beq.n	8006ea6 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fe43 	bl	8007ad6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e50:	e029      	b.n	8006ea6 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	099b      	lsrs	r3, r3, #6
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00f      	beq.n	8006e7e <HAL_I2C_EV_IRQHandler+0x2aa>
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	0a9b      	lsrs	r3, r3, #10
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d009      	beq.n	8006e7e <HAL_I2C_EV_IRQHandler+0x2aa>
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	089b      	lsrs	r3, r3, #2
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d103      	bne.n	8006e7e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fe4e 	bl	8007b18 <I2C_SlaveReceive_RXNE>
 8006e7c:	e014      	b.n	8006ea8 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	089b      	lsrs	r3, r3, #2
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00e      	beq.n	8006ea8 <HAL_I2C_EV_IRQHandler+0x2d4>
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	0a5b      	lsrs	r3, r3, #9
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d008      	beq.n	8006ea8 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fe7c 	bl	8007b94 <I2C_SlaveReceive_BTF>
 8006e9c:	e004      	b.n	8006ea8 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8006e9e:	bf00      	nop
 8006ea0:	e002      	b.n	8006ea8 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ea2:	bf00      	nop
 8006ea4:	e000      	b.n	8006ea8 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ea6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006ea8:	3720      	adds	r7, #32
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006eb6:	bf00      	nop
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b083      	sub	sp, #12
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006eca:	bf00      	nop
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006ede:	bf00      	nop
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b083      	sub	sp, #12
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006ef2:	bf00      	nop
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b083      	sub	sp, #12
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	460b      	mov	r3, r1
 8006f08:	70fb      	strb	r3, [r7, #3]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006f0e:	bf00      	nop
 8006f10:	370c      	adds	r7, #12
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b083      	sub	sp, #12
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006f22:	bf00      	nop
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006f36:	bf00      	nop
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006f4a:	bf00      	nop
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b084      	sub	sp, #16
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f8c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f94:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d150      	bne.n	8007046 <I2C_MasterTransmit_TXE+0xc8>
 8006fa4:	7bfb      	ldrb	r3, [r7, #15]
 8006fa6:	2b21      	cmp	r3, #33	; 0x21
 8006fa8:	d14d      	bne.n	8007046 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d01d      	beq.n	8006fec <I2C_MasterTransmit_TXE+0x6e>
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	d01a      	beq.n	8006fec <I2C_MasterTransmit_TXE+0x6e>
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fbc:	d016      	beq.n	8006fec <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685a      	ldr	r2, [r3, #4]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fcc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2211      	movs	r2, #17
 8006fd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff ff62 	bl	8006eae <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fea:	e060      	b.n	80070ae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ffa:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800700a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2220      	movs	r2, #32
 8007016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b40      	cmp	r3, #64	; 0x40
 8007024:	d107      	bne.n	8007036 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7ff ff7d 	bl	8006f2e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007034:	e03b      	b.n	80070ae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7ff ff35 	bl	8006eae <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007044:	e033      	b.n	80070ae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007046:	7bfb      	ldrb	r3, [r7, #15]
 8007048:	2b21      	cmp	r3, #33	; 0x21
 800704a:	d005      	beq.n	8007058 <I2C_MasterTransmit_TXE+0xda>
 800704c:	7bbb      	ldrb	r3, [r7, #14]
 800704e:	2b40      	cmp	r3, #64	; 0x40
 8007050:	d12d      	bne.n	80070ae <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	2b22      	cmp	r3, #34	; 0x22
 8007056:	d12a      	bne.n	80070ae <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800705c:	b29b      	uxth	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d108      	bne.n	8007074 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007070:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007072:	e01c      	b.n	80070ae <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b40      	cmp	r3, #64	; 0x40
 800707e:	d103      	bne.n	8007088 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f880 	bl	8007186 <I2C_MemoryTransmit_TXE_BTF>
}
 8007086:	e012      	b.n	80070ae <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	781a      	ldrb	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	3b01      	subs	r3, #1
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80070ac:	e7ff      	b.n	80070ae <I2C_MasterTransmit_TXE+0x130>
 80070ae:	bf00      	nop
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b084      	sub	sp, #16
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b21      	cmp	r3, #33	; 0x21
 80070ce:	d156      	bne.n	800717e <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d012      	beq.n	8007100 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	781a      	ldrb	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	3b01      	subs	r3, #1
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80070fe:	e03e      	b.n	800717e <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b08      	cmp	r3, #8
 8007104:	d01d      	beq.n	8007142 <I2C_MasterTransmit_BTF+0x8c>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b20      	cmp	r3, #32
 800710a:	d01a      	beq.n	8007142 <I2C_MasterTransmit_BTF+0x8c>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007112:	d016      	beq.n	8007142 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007122:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2211      	movs	r2, #17
 8007128:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2220      	movs	r2, #32
 8007136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff feb7 	bl	8006eae <HAL_I2C_MasterTxCpltCallback>
}
 8007140:	e01d      	b.n	800717e <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007150:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007160:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2220      	movs	r2, #32
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff fe98 	bl	8006eae <HAL_I2C_MasterTxCpltCallback>
}
 800717e:	bf00      	nop
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007194:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800719a:	2b00      	cmp	r3, #0
 800719c:	d11d      	bne.n	80071da <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d10b      	bne.n	80071be <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b6:	1c9a      	adds	r2, r3, #2
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80071bc:	e06e      	b.n	800729c <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	121b      	asrs	r3, r3, #8
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80071d8:	e060      	b.n	800729c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d10b      	bne.n	80071fa <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f2:	1c5a      	adds	r2, r3, #1
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80071f8:	e050      	b.n	800729c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d14c      	bne.n	800729c <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007202:	7bfb      	ldrb	r3, [r7, #15]
 8007204:	2b22      	cmp	r3, #34	; 0x22
 8007206:	d108      	bne.n	800721a <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007216:	601a      	str	r2, [r3, #0]
}
 8007218:	e040      	b.n	800729c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800721e:	b29b      	uxth	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	d015      	beq.n	8007250 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8007224:	7bfb      	ldrb	r3, [r7, #15]
 8007226:	2b21      	cmp	r3, #33	; 0x21
 8007228:	d112      	bne.n	8007250 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	781a      	ldrb	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007244:	b29b      	uxth	r3, r3
 8007246:	3b01      	subs	r3, #1
 8007248:	b29a      	uxth	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800724e:	e025      	b.n	800729c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007254:	b29b      	uxth	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d120      	bne.n	800729c <I2C_MemoryTransmit_TXE_BTF+0x116>
 800725a:	7bfb      	ldrb	r3, [r7, #15]
 800725c:	2b21      	cmp	r3, #33	; 0x21
 800725e:	d11d      	bne.n	800729c <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800726e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800727e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2220      	movs	r2, #32
 800728a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7ff fe49 	bl	8006f2e <HAL_I2C_MemTxCpltCallback>
}
 800729c:	bf00      	nop
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b22      	cmp	r3, #34	; 0x22
 80072b6:	f040 80a2 	bne.w	80073fe <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072be:	b29b      	uxth	r3, r3
 80072c0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d921      	bls.n	800730c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	691a      	ldr	r2, [r3, #16]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	b2d2      	uxtb	r2, r2
 80072d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	1c5a      	adds	r2, r3, #1
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	3b01      	subs	r3, #1
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	f040 8082 	bne.w	80073fe <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007308:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800730a:	e078      	b.n	80073fe <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007310:	2b02      	cmp	r3, #2
 8007312:	d074      	beq.n	80073fe <I2C_MasterReceive_RXNE+0x15a>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d002      	beq.n	8007320 <I2C_MasterReceive_RXNE+0x7c>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d16e      	bne.n	80073fe <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f001 fa69 	bl	80087f8 <I2C_WaitOnSTOPRequestThroughIT>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d142      	bne.n	80073b2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800733a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800734a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691a      	ldr	r2, [r3, #16]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	b2d2      	uxtb	r2, r2
 8007358:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	1c5a      	adds	r2, r3, #1
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007368:	b29b      	uxth	r3, r3
 800736a:	3b01      	subs	r3, #1
 800736c:	b29a      	uxth	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2220      	movs	r2, #32
 8007376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b40      	cmp	r3, #64	; 0x40
 8007384:	d10a      	bne.n	800739c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff fdd4 	bl	8006f42 <HAL_I2C_MemRxCpltCallback>
}
 800739a:	e030      	b.n	80073fe <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2212      	movs	r2, #18
 80073a8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7ff fd89 	bl	8006ec2 <HAL_I2C_MasterRxCpltCallback>
}
 80073b0:	e025      	b.n	80073fe <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073c0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	691a      	ldr	r2, [r3, #16]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	b2d2      	uxtb	r2, r2
 80073ce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7ff fdac 	bl	8006f56 <HAL_I2C_ErrorCallback>
}
 80073fe:	bf00      	nop
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007412:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007418:	b29b      	uxth	r3, r3
 800741a:	2b04      	cmp	r3, #4
 800741c:	d11b      	bne.n	8007456 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800742c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	691a      	ldr	r2, [r3, #16]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	b2d2      	uxtb	r2, r2
 800743a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744a:	b29b      	uxth	r3, r3
 800744c:	3b01      	subs	r3, #1
 800744e:	b29a      	uxth	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007454:	e0bd      	b.n	80075d2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800745a:	b29b      	uxth	r3, r3
 800745c:	2b03      	cmp	r3, #3
 800745e:	d129      	bne.n	80074b4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800746e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2b04      	cmp	r3, #4
 8007474:	d00a      	beq.n	800748c <I2C_MasterReceive_BTF+0x86>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2b02      	cmp	r3, #2
 800747a:	d007      	beq.n	800748c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800748a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	691a      	ldr	r2, [r3, #16]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	3b01      	subs	r3, #1
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80074b2:	e08e      	b.n	80075d2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d176      	bne.n	80075ac <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d002      	beq.n	80074ca <I2C_MasterReceive_BTF+0xc4>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b10      	cmp	r3, #16
 80074c8:	d108      	bne.n	80074dc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	e019      	b.n	8007510 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d002      	beq.n	80074e8 <I2C_MasterReceive_BTF+0xe2>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d108      	bne.n	80074fa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	e00a      	b.n	8007510 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b10      	cmp	r3, #16
 80074fe:	d007      	beq.n	8007510 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800750e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	691a      	ldr	r2, [r3, #16]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800752c:	b29b      	uxth	r3, r3
 800752e:	3b01      	subs	r3, #1
 8007530:	b29a      	uxth	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	691a      	ldr	r2, [r3, #16]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007540:	b2d2      	uxtb	r2, r2
 8007542:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007552:	b29b      	uxth	r3, r3
 8007554:	3b01      	subs	r3, #1
 8007556:	b29a      	uxth	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800756a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2220      	movs	r2, #32
 8007570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b40      	cmp	r3, #64	; 0x40
 800757e:	d10a      	bne.n	8007596 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff fcd7 	bl	8006f42 <HAL_I2C_MemRxCpltCallback>
}
 8007594:	e01d      	b.n	80075d2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2212      	movs	r2, #18
 80075a2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f7ff fc8c 	bl	8006ec2 <HAL_I2C_MasterRxCpltCallback>
}
 80075aa:	e012      	b.n	80075d2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	691a      	ldr	r2, [r3, #16]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	b2d2      	uxtb	r2, r2
 80075b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80075d2:	bf00      	nop
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b40      	cmp	r3, #64	; 0x40
 80075ec:	d117      	bne.n	800761e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d109      	bne.n	800760a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	461a      	mov	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007606:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007608:	e067      	b.n	80076da <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760e:	b2db      	uxtb	r3, r3
 8007610:	f043 0301 	orr.w	r3, r3, #1
 8007614:	b2da      	uxtb	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	611a      	str	r2, [r3, #16]
}
 800761c:	e05d      	b.n	80076da <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007626:	d133      	bne.n	8007690 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b21      	cmp	r3, #33	; 0x21
 8007632:	d109      	bne.n	8007648 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007638:	b2db      	uxtb	r3, r3
 800763a:	461a      	mov	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007644:	611a      	str	r2, [r3, #16]
 8007646:	e008      	b.n	800765a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764c:	b2db      	uxtb	r3, r3
 800764e:	f043 0301 	orr.w	r3, r3, #1
 8007652:	b2da      	uxtb	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800765e:	2b00      	cmp	r3, #0
 8007660:	d004      	beq.n	800766c <I2C_Master_SB+0x92>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d108      	bne.n	800767e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007670:	2b00      	cmp	r3, #0
 8007672:	d032      	beq.n	80076da <I2C_Master_SB+0x100>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767a:	2b00      	cmp	r3, #0
 800767c:	d02d      	beq.n	80076da <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	685a      	ldr	r2, [r3, #4]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800768c:	605a      	str	r2, [r3, #4]
}
 800768e:	e024      	b.n	80076da <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10e      	bne.n	80076b6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800769c:	b29b      	uxth	r3, r3
 800769e:	11db      	asrs	r3, r3, #7
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	f003 0306 	and.w	r3, r3, #6
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	f063 030f 	orn	r3, r3, #15
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	611a      	str	r2, [r3, #16]
}
 80076b4:	e011      	b.n	80076da <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d10d      	bne.n	80076da <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	11db      	asrs	r3, r3, #7
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	f003 0306 	and.w	r3, r3, #6
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	f063 030e 	orn	r3, r3, #14
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	611a      	str	r2, [r3, #16]
}
 80076da:	bf00      	nop
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d103      	bne.n	800770a <I2C_Master_ADD10+0x24>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007706:	2b00      	cmp	r3, #0
 8007708:	d011      	beq.n	800772e <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800770e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007710:	2b00      	cmp	r3, #0
 8007712:	d104      	bne.n	800771e <I2C_Master_ADD10+0x38>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771a:	2b00      	cmp	r3, #0
 800771c:	d007      	beq.n	800772e <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800772c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800772e:	bf00      	nop
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800773a:	b480      	push	{r7}
 800773c:	b091      	sub	sp, #68	; 0x44
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007748:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007750:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007756:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b22      	cmp	r3, #34	; 0x22
 8007762:	f040 8169 	bne.w	8007a38 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10f      	bne.n	800778e <I2C_Master_ADDR+0x54>
 800776e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007772:	2b40      	cmp	r3, #64	; 0x40
 8007774:	d10b      	bne.n	800778e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007776:	2300      	movs	r3, #0
 8007778:	633b      	str	r3, [r7, #48]	; 0x30
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	633b      	str	r3, [r7, #48]	; 0x30
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	633b      	str	r3, [r7, #48]	; 0x30
 800778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778c:	e160      	b.n	8007a50 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007792:	2b00      	cmp	r3, #0
 8007794:	d11d      	bne.n	80077d2 <I2C_Master_ADDR+0x98>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800779e:	d118      	bne.n	80077d2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077a0:	2300      	movs	r3, #0
 80077a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077c4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	651a      	str	r2, [r3, #80]	; 0x50
 80077d0:	e13e      	b.n	8007a50 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d113      	bne.n	8007804 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077dc:	2300      	movs	r3, #0
 80077de:	62bb      	str	r3, [r7, #40]	; 0x28
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80077f0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	e115      	b.n	8007a30 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007808:	b29b      	uxth	r3, r3
 800780a:	2b01      	cmp	r3, #1
 800780c:	f040 808a 	bne.w	8007924 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007812:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007816:	d137      	bne.n	8007888 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007826:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007836:	d113      	bne.n	8007860 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007846:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007848:	2300      	movs	r3, #0
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	627b      	str	r3, [r7, #36]	; 0x24
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	627b      	str	r3, [r7, #36]	; 0x24
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	e0e7      	b.n	8007a30 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007860:	2300      	movs	r3, #0
 8007862:	623b      	str	r3, [r7, #32]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	623b      	str	r3, [r7, #32]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	623b      	str	r3, [r7, #32]
 8007874:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	e0d3      	b.n	8007a30 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788a:	2b08      	cmp	r3, #8
 800788c:	d02e      	beq.n	80078ec <I2C_Master_ADDR+0x1b2>
 800788e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007890:	2b20      	cmp	r3, #32
 8007892:	d02b      	beq.n	80078ec <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007896:	2b12      	cmp	r3, #18
 8007898:	d102      	bne.n	80078a0 <I2C_Master_ADDR+0x166>
 800789a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789c:	2b01      	cmp	r3, #1
 800789e:	d125      	bne.n	80078ec <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80078a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d00e      	beq.n	80078c4 <I2C_Master_ADDR+0x18a>
 80078a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d00b      	beq.n	80078c4 <I2C_Master_ADDR+0x18a>
 80078ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ae:	2b10      	cmp	r3, #16
 80078b0:	d008      	beq.n	80078c4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	e007      	b.n	80078d4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078d2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078d4:	2300      	movs	r3, #0
 80078d6:	61fb      	str	r3, [r7, #28]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	61fb      	str	r3, [r7, #28]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	61fb      	str	r3, [r7, #28]
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	e0a1      	b.n	8007a30 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078fa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078fc:	2300      	movs	r3, #0
 80078fe:	61bb      	str	r3, [r7, #24]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	61bb      	str	r3, [r7, #24]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	61bb      	str	r3, [r7, #24]
 8007910:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	e085      	b.n	8007a30 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007928:	b29b      	uxth	r3, r3
 800792a:	2b02      	cmp	r3, #2
 800792c:	d14d      	bne.n	80079ca <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800792e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007930:	2b04      	cmp	r3, #4
 8007932:	d016      	beq.n	8007962 <I2C_Master_ADDR+0x228>
 8007934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007936:	2b02      	cmp	r3, #2
 8007938:	d013      	beq.n	8007962 <I2C_Master_ADDR+0x228>
 800793a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793c:	2b10      	cmp	r3, #16
 800793e:	d010      	beq.n	8007962 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800794e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	e007      	b.n	8007972 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007970:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800797c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007980:	d117      	bne.n	80079b2 <I2C_Master_ADDR+0x278>
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007988:	d00b      	beq.n	80079a2 <I2C_Master_ADDR+0x268>
 800798a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798c:	2b01      	cmp	r3, #1
 800798e:	d008      	beq.n	80079a2 <I2C_Master_ADDR+0x268>
 8007990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007992:	2b08      	cmp	r3, #8
 8007994:	d005      	beq.n	80079a2 <I2C_Master_ADDR+0x268>
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	2b10      	cmp	r3, #16
 800799a:	d002      	beq.n	80079a2 <I2C_Master_ADDR+0x268>
 800799c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799e:	2b20      	cmp	r3, #32
 80079a0:	d107      	bne.n	80079b2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079b0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079b2:	2300      	movs	r3, #0
 80079b4:	617b      	str	r3, [r7, #20]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	617b      	str	r3, [r7, #20]
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	e032      	b.n	8007a30 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079d8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079e8:	d117      	bne.n	8007a1a <I2C_Master_ADDR+0x2e0>
 80079ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079f0:	d00b      	beq.n	8007a0a <I2C_Master_ADDR+0x2d0>
 80079f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d008      	beq.n	8007a0a <I2C_Master_ADDR+0x2d0>
 80079f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fa:	2b08      	cmp	r3, #8
 80079fc:	d005      	beq.n	8007a0a <I2C_Master_ADDR+0x2d0>
 80079fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a00:	2b10      	cmp	r3, #16
 8007a02:	d002      	beq.n	8007a0a <I2C_Master_ADDR+0x2d0>
 8007a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	d107      	bne.n	8007a1a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a18:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	613b      	str	r3, [r7, #16]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	613b      	str	r3, [r7, #16]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	613b      	str	r3, [r7, #16]
 8007a2e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007a36:	e00b      	b.n	8007a50 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	60fb      	str	r3, [r7, #12]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
}
 8007a4e:	e7ff      	b.n	8007a50 <I2C_Master_ADDR+0x316>
 8007a50:	bf00      	nop
 8007a52:	3744      	adds	r7, #68	; 0x44
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a6a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d02b      	beq.n	8007ace <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7a:	781a      	ldrb	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	3b01      	subs	r3, #1
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d114      	bne.n	8007ace <I2C_SlaveTransmit_TXE+0x72>
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	2b29      	cmp	r3, #41	; 0x29
 8007aa8:	d111      	bne.n	8007ace <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ab8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2221      	movs	r2, #33	; 0x21
 8007abe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2228      	movs	r2, #40	; 0x28
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7ff fa04 	bl	8006ed6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007ace:	bf00      	nop
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d011      	beq.n	8007b0c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	781a      	ldrb	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	3b01      	subs	r3, #1
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b26:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d02c      	beq.n	8007b8c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	691a      	ldr	r2, [r3, #16]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	b2d2      	uxtb	r2, r2
 8007b3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b44:	1c5a      	adds	r2, r3, #1
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	3b01      	subs	r3, #1
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d114      	bne.n	8007b8c <I2C_SlaveReceive_RXNE+0x74>
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
 8007b64:	2b2a      	cmp	r3, #42	; 0x2a
 8007b66:	d111      	bne.n	8007b8c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b76:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2222      	movs	r2, #34	; 0x22
 8007b7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2228      	movs	r2, #40	; 0x28
 8007b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7ff f9af 	bl	8006eea <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007b8c:	bf00      	nop
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d012      	beq.n	8007bcc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	691a      	ldr	r2, [r3, #16]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb0:	b2d2      	uxtb	r2, r2
 8007bb2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007be2:	2300      	movs	r3, #0
 8007be4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007bf2:	2b28      	cmp	r3, #40	; 0x28
 8007bf4:	d127      	bne.n	8007c46 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c04:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	089b      	lsrs	r3, r3, #2
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007c12:	2301      	movs	r3, #1
 8007c14:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	09db      	lsrs	r3, r3, #7
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d103      	bne.n	8007c2a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	81bb      	strh	r3, [r7, #12]
 8007c28:	e002      	b.n	8007c30 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007c38:	89ba      	ldrh	r2, [r7, #12]
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7ff f95d 	bl	8006efe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007c44:	e008      	b.n	8007c58 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f06f 0202 	mvn.w	r2, #2
 8007c4e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007c58:	bf00      	nop
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c6e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c7e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007c80:	2300      	movs	r3, #0
 8007c82:	60bb      	str	r3, [r7, #8]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	60bb      	str	r3, [r7, #8]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f042 0201 	orr.w	r2, r2, #1
 8007c9a:	601a      	str	r2, [r3, #0]
 8007c9c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cac:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cbc:	d172      	bne.n	8007da4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
 8007cc0:	2b22      	cmp	r3, #34	; 0x22
 8007cc2:	d002      	beq.n	8007cca <I2C_Slave_STOPF+0x6a>
 8007cc4:	7bfb      	ldrb	r3, [r7, #15]
 8007cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8007cc8:	d135      	bne.n	8007d36 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d005      	beq.n	8007cee <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce6:	f043 0204 	orr.w	r2, r3, #4
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cfc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe f946 	bl	8005f94 <HAL_DMA_GetState>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d049      	beq.n	8007da2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d12:	4a69      	ldr	r2, [pc, #420]	; (8007eb8 <I2C_Slave_STOPF+0x258>)
 8007d14:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fe f918 	bl	8005f50 <HAL_DMA_Abort_IT>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d03d      	beq.n	8007da2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d30:	4610      	mov	r0, r2
 8007d32:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d34:	e035      	b.n	8007da2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d005      	beq.n	8007d5a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d52:	f043 0204 	orr.w	r2, r3, #4
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d68:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fe f910 	bl	8005f94 <HAL_DMA_GetState>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d014      	beq.n	8007da4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7e:	4a4e      	ldr	r2, [pc, #312]	; (8007eb8 <I2C_Slave_STOPF+0x258>)
 8007d80:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fe f8e2 	bl	8005f50 <HAL_DMA_Abort_IT>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d008      	beq.n	8007da4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4798      	blx	r3
 8007da0:	e000      	b.n	8007da4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007da2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d03e      	beq.n	8007e2c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d112      	bne.n	8007de2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	691a      	ldr	r2, [r3, #16]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc6:	b2d2      	uxtb	r2, r2
 8007dc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	1c5a      	adds	r2, r3, #1
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dec:	2b40      	cmp	r3, #64	; 0x40
 8007dee:	d112      	bne.n	8007e16 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	691a      	ldr	r2, [r3, #16]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	b2d2      	uxtb	r2, r2
 8007dfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e02:	1c5a      	adds	r2, r3, #1
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d005      	beq.n	8007e2c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e24:	f043 0204 	orr.w	r2, r3, #4
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d003      	beq.n	8007e3c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f843 	bl	8007ec0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007e3a:	e039      	b.n	8007eb0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
 8007e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8007e40:	d109      	bne.n	8007e56 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2228      	movs	r2, #40	; 0x28
 8007e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f7ff f84a 	bl	8006eea <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b28      	cmp	r3, #40	; 0x28
 8007e60:	d111      	bne.n	8007e86 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a15      	ldr	r2, [pc, #84]	; (8007ebc <I2C_Slave_STOPF+0x25c>)
 8007e66:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7ff f84b 	bl	8006f1a <HAL_I2C_ListenCpltCallback>
}
 8007e84:	e014      	b.n	8007eb0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8a:	2b22      	cmp	r3, #34	; 0x22
 8007e8c:	d002      	beq.n	8007e94 <I2C_Slave_STOPF+0x234>
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	2b22      	cmp	r3, #34	; 0x22
 8007e92:	d10d      	bne.n	8007eb0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7ff f81d 	bl	8006eea <HAL_I2C_SlaveRxCpltCallback>
}
 8007eb0:	bf00      	nop
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	080083f9 	.word	0x080083f9
 8007ebc:	ffff0000 	.word	0xffff0000

08007ec0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ece:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ed6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	2b10      	cmp	r3, #16
 8007edc:	d002      	beq.n	8007ee4 <I2C_ITError+0x24>
 8007ede:	7bbb      	ldrb	r3, [r7, #14]
 8007ee0:	2b40      	cmp	r3, #64	; 0x40
 8007ee2:	d10a      	bne.n	8007efa <I2C_ITError+0x3a>
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	2b22      	cmp	r3, #34	; 0x22
 8007ee8:	d107      	bne.n	8007efa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ef8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
 8007efc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f00:	2b28      	cmp	r3, #40	; 0x28
 8007f02:	d107      	bne.n	8007f14 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2228      	movs	r2, #40	; 0x28
 8007f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007f12:	e015      	b.n	8007f40 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f22:	d00a      	beq.n	8007f3a <I2C_ITError+0x7a>
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
 8007f26:	2b60      	cmp	r3, #96	; 0x60
 8007f28:	d007      	beq.n	8007f3a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f4e:	d162      	bne.n	8008016 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	685a      	ldr	r2, [r3, #4]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f5e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d020      	beq.n	8007fb0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f72:	4a6a      	ldr	r2, [pc, #424]	; (800811c <I2C_ITError+0x25c>)
 8007f74:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fd ffe8 	bl	8005f50 <HAL_DMA_Abort_IT>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f000 8089 	beq.w	800809a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0201 	bic.w	r2, r2, #1
 8007f96:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007faa:	4610      	mov	r0, r2
 8007fac:	4798      	blx	r3
 8007fae:	e074      	b.n	800809a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb4:	4a59      	ldr	r2, [pc, #356]	; (800811c <I2C_ITError+0x25c>)
 8007fb6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fd ffc7 	bl	8005f50 <HAL_DMA_Abort_IT>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d068      	beq.n	800809a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd2:	2b40      	cmp	r3, #64	; 0x40
 8007fd4:	d10b      	bne.n	8007fee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	691a      	ldr	r2, [r3, #16]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe0:	b2d2      	uxtb	r2, r2
 8007fe2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe8:	1c5a      	adds	r2, r3, #1
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0201 	bic.w	r2, r2, #1
 8007ffc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2220      	movs	r2, #32
 8008002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008010:	4610      	mov	r0, r2
 8008012:	4798      	blx	r3
 8008014:	e041      	b.n	800809a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b60      	cmp	r3, #96	; 0x60
 8008020:	d125      	bne.n	800806e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2220      	movs	r2, #32
 8008026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800803a:	2b40      	cmp	r3, #64	; 0x40
 800803c:	d10b      	bne.n	8008056 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	691a      	ldr	r2, [r3, #16]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	b2d2      	uxtb	r2, r2
 800804a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008050:	1c5a      	adds	r2, r3, #1
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f022 0201 	bic.w	r2, r2, #1
 8008064:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f7fe ff7f 	bl	8006f6a <HAL_I2C_AbortCpltCallback>
 800806c:	e015      	b.n	800809a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008078:	2b40      	cmp	r3, #64	; 0x40
 800807a:	d10b      	bne.n	8008094 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	691a      	ldr	r2, [r3, #16]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	b2d2      	uxtb	r2, r2
 8008088:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808e:	1c5a      	adds	r2, r3, #1
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7fe ff5e 	bl	8006f56 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10e      	bne.n	80080c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d109      	bne.n	80080c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d104      	bne.n	80080c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d007      	beq.n	80080d8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80080d6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080de:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e4:	f003 0304 	and.w	r3, r3, #4
 80080e8:	2b04      	cmp	r3, #4
 80080ea:	d113      	bne.n	8008114 <I2C_ITError+0x254>
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
 80080ee:	2b28      	cmp	r3, #40	; 0x28
 80080f0:	d110      	bne.n	8008114 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a0a      	ldr	r2, [pc, #40]	; (8008120 <I2C_ITError+0x260>)
 80080f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7fe ff03 	bl	8006f1a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008114:	bf00      	nop
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	080083f9 	.word	0x080083f9
 8008120:	ffff0000 	.word	0xffff0000

08008124 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b088      	sub	sp, #32
 8008128:	af02      	add	r7, sp, #8
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	607a      	str	r2, [r7, #4]
 800812e:	603b      	str	r3, [r7, #0]
 8008130:	460b      	mov	r3, r1
 8008132:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008138:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2b08      	cmp	r3, #8
 800813e:	d006      	beq.n	800814e <I2C_MasterRequestWrite+0x2a>
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	2b01      	cmp	r3, #1
 8008144:	d003      	beq.n	800814e <I2C_MasterRequestWrite+0x2a>
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800814c:	d108      	bne.n	8008160 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	e00b      	b.n	8008178 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008164:	2b12      	cmp	r3, #18
 8008166:	d107      	bne.n	8008178 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008176:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 f9df 	bl	8008548 <I2C_WaitOnFlagUntilTimeout>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00d      	beq.n	80081ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800819a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800819e:	d103      	bne.n	80081a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e035      	b.n	8008218 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081b4:	d108      	bne.n	80081c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80081b6:	897b      	ldrh	r3, [r7, #10]
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	461a      	mov	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80081c4:	611a      	str	r2, [r3, #16]
 80081c6:	e01b      	b.n	8008200 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80081c8:	897b      	ldrh	r3, [r7, #10]
 80081ca:	11db      	asrs	r3, r3, #7
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	f003 0306 	and.w	r3, r3, #6
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	f063 030f 	orn	r3, r3, #15
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	490e      	ldr	r1, [pc, #56]	; (8008220 <I2C_MasterRequestWrite+0xfc>)
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f000 fa05 	bl	80085f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e010      	b.n	8008218 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80081f6:	897b      	ldrh	r3, [r7, #10]
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	4907      	ldr	r1, [pc, #28]	; (8008224 <I2C_MasterRequestWrite+0x100>)
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f000 f9f5 	bl	80085f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e000      	b.n	8008218 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3718      	adds	r7, #24
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	00010008 	.word	0x00010008
 8008224:	00010002 	.word	0x00010002

08008228 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af02      	add	r7, sp, #8
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	4608      	mov	r0, r1
 8008232:	4611      	mov	r1, r2
 8008234:	461a      	mov	r2, r3
 8008236:	4603      	mov	r3, r0
 8008238:	817b      	strh	r3, [r7, #10]
 800823a:	460b      	mov	r3, r1
 800823c:	813b      	strh	r3, [r7, #8]
 800823e:	4613      	mov	r3, r2
 8008240:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008250:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008260:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	2200      	movs	r2, #0
 800826a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f000 f96a 	bl	8008548 <I2C_WaitOnFlagUntilTimeout>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00d      	beq.n	8008296 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008288:	d103      	bne.n	8008292 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008290:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e0aa      	b.n	80083ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008296:	897b      	ldrh	r3, [r7, #10]
 8008298:	b2db      	uxtb	r3, r3
 800829a:	461a      	mov	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80082a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	6a3a      	ldr	r2, [r7, #32]
 80082aa:	4952      	ldr	r1, [pc, #328]	; (80083f4 <I2C_RequestMemoryRead+0x1cc>)
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f000 f9a2 	bl	80085f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e097      	b.n	80083ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082bc:	2300      	movs	r3, #0
 80082be:	617b      	str	r3, [r7, #20]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	617b      	str	r3, [r7, #20]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	617b      	str	r3, [r7, #20]
 80082d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d4:	6a39      	ldr	r1, [r7, #32]
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 fa0c 	bl	80086f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00d      	beq.n	80082fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	2b04      	cmp	r3, #4
 80082e8:	d107      	bne.n	80082fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e076      	b.n	80083ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082fe:	88fb      	ldrh	r3, [r7, #6]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d105      	bne.n	8008310 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008304:	893b      	ldrh	r3, [r7, #8]
 8008306:	b2da      	uxtb	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	611a      	str	r2, [r3, #16]
 800830e:	e021      	b.n	8008354 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008310:	893b      	ldrh	r3, [r7, #8]
 8008312:	0a1b      	lsrs	r3, r3, #8
 8008314:	b29b      	uxth	r3, r3
 8008316:	b2da      	uxtb	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800831e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008320:	6a39      	ldr	r1, [r7, #32]
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f000 f9e6 	bl	80086f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00d      	beq.n	800834a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008332:	2b04      	cmp	r3, #4
 8008334:	d107      	bne.n	8008346 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008344:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e050      	b.n	80083ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800834a:	893b      	ldrh	r3, [r7, #8]
 800834c:	b2da      	uxtb	r2, r3
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008356:	6a39      	ldr	r1, [r7, #32]
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 f9cb 	bl	80086f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00d      	beq.n	8008380 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008368:	2b04      	cmp	r3, #4
 800836a:	d107      	bne.n	800837c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800837a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e035      	b.n	80083ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800838e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	6a3b      	ldr	r3, [r7, #32]
 8008396:	2200      	movs	r2, #0
 8008398:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 f8d3 	bl	8008548 <I2C_WaitOnFlagUntilTimeout>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00d      	beq.n	80083c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083b6:	d103      	bne.n	80083c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e013      	b.n	80083ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80083c4:	897b      	ldrh	r3, [r7, #10]
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	f043 0301 	orr.w	r3, r3, #1
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	6a3a      	ldr	r2, [r7, #32]
 80083d8:	4906      	ldr	r1, [pc, #24]	; (80083f4 <I2C_RequestMemoryRead+0x1cc>)
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 f90b 	bl	80085f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e000      	b.n	80083ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3718      	adds	r7, #24
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	00010002 	.word	0x00010002

080083f8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008408:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008410:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008412:	4b4b      	ldr	r3, [pc, #300]	; (8008540 <I2C_DMAAbort+0x148>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	08db      	lsrs	r3, r3, #3
 8008418:	4a4a      	ldr	r2, [pc, #296]	; (8008544 <I2C_DMAAbort+0x14c>)
 800841a:	fba2 2303 	umull	r2, r3, r2, r3
 800841e:	0a1a      	lsrs	r2, r3, #8
 8008420:	4613      	mov	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	00da      	lsls	r2, r3, #3
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d106      	bne.n	8008440 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008436:	f043 0220 	orr.w	r2, r3, #32
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800843e:	e00a      	b.n	8008456 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	3b01      	subs	r3, #1
 8008444:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008454:	d0ea      	beq.n	800842c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008462:	2200      	movs	r2, #0
 8008464:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008472:	2200      	movs	r2, #0
 8008474:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008484:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	2200      	movs	r2, #0
 800848a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008490:	2b00      	cmp	r3, #0
 8008492:	d003      	beq.n	800849c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008498:	2200      	movs	r2, #0
 800849a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d003      	beq.n	80084ac <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a8:	2200      	movs	r2, #0
 80084aa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f022 0201 	bic.w	r2, r2, #1
 80084ba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b60      	cmp	r3, #96	; 0x60
 80084c6:	d10e      	bne.n	80084e6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	2220      	movs	r2, #32
 80084cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	2200      	movs	r2, #0
 80084dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80084de:	6978      	ldr	r0, [r7, #20]
 80084e0:	f7fe fd43 	bl	8006f6a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80084e4:	e027      	b.n	8008536 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80084e6:	7cfb      	ldrb	r3, [r7, #19]
 80084e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80084ec:	2b28      	cmp	r3, #40	; 0x28
 80084ee:	d117      	bne.n	8008520 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f042 0201 	orr.w	r2, r2, #1
 80084fe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800850e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	2200      	movs	r2, #0
 8008514:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2228      	movs	r2, #40	; 0x28
 800851a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800851e:	e007      	b.n	8008530 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	2220      	movs	r2, #32
 8008524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008530:	6978      	ldr	r0, [r7, #20]
 8008532:	f7fe fd10 	bl	8006f56 <HAL_I2C_ErrorCallback>
}
 8008536:	bf00      	nop
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	20000008 	.word	0x20000008
 8008544:	14f8b589 	.word	0x14f8b589

08008548 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	603b      	str	r3, [r7, #0]
 8008554:	4613      	mov	r3, r2
 8008556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008558:	e025      	b.n	80085a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008560:	d021      	beq.n	80085a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008562:	f7fc fd89 	bl	8005078 <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	429a      	cmp	r2, r3
 8008570:	d302      	bcc.n	8008578 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d116      	bne.n	80085a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2220      	movs	r2, #32
 8008582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008592:	f043 0220 	orr.w	r2, r3, #32
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e023      	b.n	80085ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	0c1b      	lsrs	r3, r3, #16
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d10d      	bne.n	80085cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	43da      	mvns	r2, r3
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	4013      	ands	r3, r2
 80085bc:	b29b      	uxth	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	bf0c      	ite	eq
 80085c2:	2301      	moveq	r3, #1
 80085c4:	2300      	movne	r3, #0
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	461a      	mov	r2, r3
 80085ca:	e00c      	b.n	80085e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	43da      	mvns	r2, r3
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	4013      	ands	r3, r2
 80085d8:	b29b      	uxth	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	bf0c      	ite	eq
 80085de:	2301      	moveq	r3, #1
 80085e0:	2300      	movne	r3, #0
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	461a      	mov	r2, r3
 80085e6:	79fb      	ldrb	r3, [r7, #7]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d0b6      	beq.n	800855a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b084      	sub	sp, #16
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	60f8      	str	r0, [r7, #12]
 80085fe:	60b9      	str	r1, [r7, #8]
 8008600:	607a      	str	r2, [r7, #4]
 8008602:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008604:	e051      	b.n	80086aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008614:	d123      	bne.n	800865e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008624:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800862e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2220      	movs	r2, #32
 800863a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864a:	f043 0204 	orr.w	r2, r3, #4
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e046      	b.n	80086ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008664:	d021      	beq.n	80086aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008666:	f7fc fd07 	bl	8005078 <HAL_GetTick>
 800866a:	4602      	mov	r2, r0
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	429a      	cmp	r2, r3
 8008674:	d302      	bcc.n	800867c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d116      	bne.n	80086aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2220      	movs	r2, #32
 8008686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008696:	f043 0220 	orr.w	r2, r3, #32
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e020      	b.n	80086ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	0c1b      	lsrs	r3, r3, #16
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d10c      	bne.n	80086ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	43da      	mvns	r2, r3
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	4013      	ands	r3, r2
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	bf14      	ite	ne
 80086c6:	2301      	movne	r3, #1
 80086c8:	2300      	moveq	r3, #0
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	e00b      	b.n	80086e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	43da      	mvns	r2, r3
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	4013      	ands	r3, r2
 80086da:	b29b      	uxth	r3, r3
 80086dc:	2b00      	cmp	r3, #0
 80086de:	bf14      	ite	ne
 80086e0:	2301      	movne	r3, #1
 80086e2:	2300      	moveq	r3, #0
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d18d      	bne.n	8008606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008700:	e02d      	b.n	800875e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f000 f900 	bl	8008908 <I2C_IsAcknowledgeFailed>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e02d      	b.n	800876e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008718:	d021      	beq.n	800875e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800871a:	f7fc fcad 	bl	8005078 <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	429a      	cmp	r2, r3
 8008728:	d302      	bcc.n	8008730 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d116      	bne.n	800875e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2220      	movs	r2, #32
 800873a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874a:	f043 0220 	orr.w	r2, r3, #32
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e007      	b.n	800876e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008768:	2b80      	cmp	r3, #128	; 0x80
 800876a:	d1ca      	bne.n	8008702 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008782:	e02d      	b.n	80087e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f000 f8bf 	bl	8008908 <I2C_IsAcknowledgeFailed>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e02d      	b.n	80087f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800879a:	d021      	beq.n	80087e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800879c:	f7fc fc6c 	bl	8005078 <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d302      	bcc.n	80087b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d116      	bne.n	80087e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2220      	movs	r2, #32
 80087bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087cc:	f043 0220 	orr.w	r2, r3, #32
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e007      	b.n	80087f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	f003 0304 	and.w	r3, r3, #4
 80087ea:	2b04      	cmp	r3, #4
 80087ec:	d1ca      	bne.n	8008784 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008804:	4b13      	ldr	r3, [pc, #76]	; (8008854 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	08db      	lsrs	r3, r3, #3
 800880a:	4a13      	ldr	r2, [pc, #76]	; (8008858 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800880c:	fba2 2303 	umull	r2, r3, r2, r3
 8008810:	0a1a      	lsrs	r2, r3, #8
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3b01      	subs	r3, #1
 800881e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d107      	bne.n	8008836 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882a:	f043 0220 	orr.w	r2, r3, #32
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e008      	b.n	8008848 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008844:	d0e9      	beq.n	800881a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr
 8008854:	20000008 	.word	0x20000008
 8008858:	14f8b589 	.word	0x14f8b589

0800885c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008868:	e042      	b.n	80088f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	f003 0310 	and.w	r3, r3, #16
 8008874:	2b10      	cmp	r3, #16
 8008876:	d119      	bne.n	80088ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f06f 0210 	mvn.w	r2, #16
 8008880:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2220      	movs	r2, #32
 800888c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e029      	b.n	8008900 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088ac:	f7fc fbe4 	bl	8005078 <HAL_GetTick>
 80088b0:	4602      	mov	r2, r0
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d302      	bcc.n	80088c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d116      	bne.n	80088f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2220      	movs	r2, #32
 80088cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088dc:	f043 0220 	orr.w	r2, r3, #32
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e007      	b.n	8008900 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088fa:	2b40      	cmp	r3, #64	; 0x40
 80088fc:	d1b5      	bne.n	800886a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800891a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800891e:	d11b      	bne.n	8008958 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008928:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2220      	movs	r2, #32
 8008934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008944:	f043 0204 	orr.w	r2, r3, #4
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e000      	b.n	800895a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008966:	b480      	push	{r7}
 8008968:	b083      	sub	sp, #12
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008972:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008976:	d103      	bne.n	8008980 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800897e:	e007      	b.n	8008990 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008984:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008988:	d102      	bne.n	8008990 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2208      	movs	r2, #8
 800898e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800899c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800899e:	b08f      	sub	sp, #60	; 0x3c
 80089a0:	af0a      	add	r7, sp, #40	; 0x28
 80089a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e10f      	b.n	8008bce <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d106      	bne.n	80089ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f006 fbab 	bl	800f124 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2203      	movs	r2, #3
 80089d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d102      	bne.n	80089e8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f002 f92c 	bl	800ac4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	603b      	str	r3, [r7, #0]
 80089f8:	687e      	ldr	r6, [r7, #4]
 80089fa:	466d      	mov	r5, sp
 80089fc:	f106 0410 	add.w	r4, r6, #16
 8008a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008a08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008a0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8008a10:	1d33      	adds	r3, r6, #4
 8008a12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a14:	6838      	ldr	r0, [r7, #0]
 8008a16:	f002 f803 	bl	800aa20 <USB_CoreInit>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d005      	beq.n	8008a2c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2202      	movs	r2, #2
 8008a24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e0d0      	b.n	8008bce <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2100      	movs	r1, #0
 8008a32:	4618      	mov	r0, r3
 8008a34:	f002 f91a 	bl	800ac6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	73fb      	strb	r3, [r7, #15]
 8008a3c:	e04a      	b.n	8008ad4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008a3e:	7bfa      	ldrb	r2, [r7, #15]
 8008a40:	6879      	ldr	r1, [r7, #4]
 8008a42:	4613      	mov	r3, r2
 8008a44:	00db      	lsls	r3, r3, #3
 8008a46:	1a9b      	subs	r3, r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	440b      	add	r3, r1
 8008a4c:	333d      	adds	r3, #61	; 0x3d
 8008a4e:	2201      	movs	r2, #1
 8008a50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008a52:	7bfa      	ldrb	r2, [r7, #15]
 8008a54:	6879      	ldr	r1, [r7, #4]
 8008a56:	4613      	mov	r3, r2
 8008a58:	00db      	lsls	r3, r3, #3
 8008a5a:	1a9b      	subs	r3, r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	440b      	add	r3, r1
 8008a60:	333c      	adds	r3, #60	; 0x3c
 8008a62:	7bfa      	ldrb	r2, [r7, #15]
 8008a64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008a66:	7bfa      	ldrb	r2, [r7, #15]
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	b298      	uxth	r0, r3
 8008a6c:	6879      	ldr	r1, [r7, #4]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	00db      	lsls	r3, r3, #3
 8008a72:	1a9b      	subs	r3, r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	440b      	add	r3, r1
 8008a78:	3342      	adds	r3, #66	; 0x42
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008a7e:	7bfa      	ldrb	r2, [r7, #15]
 8008a80:	6879      	ldr	r1, [r7, #4]
 8008a82:	4613      	mov	r3, r2
 8008a84:	00db      	lsls	r3, r3, #3
 8008a86:	1a9b      	subs	r3, r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	440b      	add	r3, r1
 8008a8c:	333f      	adds	r3, #63	; 0x3f
 8008a8e:	2200      	movs	r2, #0
 8008a90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008a92:	7bfa      	ldrb	r2, [r7, #15]
 8008a94:	6879      	ldr	r1, [r7, #4]
 8008a96:	4613      	mov	r3, r2
 8008a98:	00db      	lsls	r3, r3, #3
 8008a9a:	1a9b      	subs	r3, r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	440b      	add	r3, r1
 8008aa0:	3344      	adds	r3, #68	; 0x44
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008aa6:	7bfa      	ldrb	r2, [r7, #15]
 8008aa8:	6879      	ldr	r1, [r7, #4]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	00db      	lsls	r3, r3, #3
 8008aae:	1a9b      	subs	r3, r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	440b      	add	r3, r1
 8008ab4:	3348      	adds	r3, #72	; 0x48
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008aba:	7bfa      	ldrb	r2, [r7, #15]
 8008abc:	6879      	ldr	r1, [r7, #4]
 8008abe:	4613      	mov	r3, r2
 8008ac0:	00db      	lsls	r3, r3, #3
 8008ac2:	1a9b      	subs	r3, r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	440b      	add	r3, r1
 8008ac8:	3350      	adds	r3, #80	; 0x50
 8008aca:	2200      	movs	r2, #0
 8008acc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	73fb      	strb	r3, [r7, #15]
 8008ad4:	7bfa      	ldrb	r2, [r7, #15]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d3af      	bcc.n	8008a3e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]
 8008ae2:	e044      	b.n	8008b6e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008ae4:	7bfa      	ldrb	r2, [r7, #15]
 8008ae6:	6879      	ldr	r1, [r7, #4]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	00db      	lsls	r3, r3, #3
 8008aec:	1a9b      	subs	r3, r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	440b      	add	r3, r1
 8008af2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008af6:	2200      	movs	r2, #0
 8008af8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008afa:	7bfa      	ldrb	r2, [r7, #15]
 8008afc:	6879      	ldr	r1, [r7, #4]
 8008afe:	4613      	mov	r3, r2
 8008b00:	00db      	lsls	r3, r3, #3
 8008b02:	1a9b      	subs	r3, r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	440b      	add	r3, r1
 8008b08:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008b0c:	7bfa      	ldrb	r2, [r7, #15]
 8008b0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008b10:	7bfa      	ldrb	r2, [r7, #15]
 8008b12:	6879      	ldr	r1, [r7, #4]
 8008b14:	4613      	mov	r3, r2
 8008b16:	00db      	lsls	r3, r3, #3
 8008b18:	1a9b      	subs	r3, r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	440b      	add	r3, r1
 8008b1e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008b22:	2200      	movs	r2, #0
 8008b24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008b26:	7bfa      	ldrb	r2, [r7, #15]
 8008b28:	6879      	ldr	r1, [r7, #4]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	00db      	lsls	r3, r3, #3
 8008b2e:	1a9b      	subs	r3, r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	440b      	add	r3, r1
 8008b34:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008b38:	2200      	movs	r2, #0
 8008b3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008b3c:	7bfa      	ldrb	r2, [r7, #15]
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	4613      	mov	r3, r2
 8008b42:	00db      	lsls	r3, r3, #3
 8008b44:	1a9b      	subs	r3, r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	440b      	add	r3, r1
 8008b4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008b4e:	2200      	movs	r2, #0
 8008b50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008b52:	7bfa      	ldrb	r2, [r7, #15]
 8008b54:	6879      	ldr	r1, [r7, #4]
 8008b56:	4613      	mov	r3, r2
 8008b58:	00db      	lsls	r3, r3, #3
 8008b5a:	1a9b      	subs	r3, r3, r2
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	440b      	add	r3, r1
 8008b60:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008b64:	2200      	movs	r2, #0
 8008b66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	73fb      	strb	r3, [r7, #15]
 8008b6e:	7bfa      	ldrb	r2, [r7, #15]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d3b5      	bcc.n	8008ae4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	603b      	str	r3, [r7, #0]
 8008b7e:	687e      	ldr	r6, [r7, #4]
 8008b80:	466d      	mov	r5, sp
 8008b82:	f106 0410 	add.w	r4, r6, #16
 8008b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008b92:	e885 0003 	stmia.w	r5, {r0, r1}
 8008b96:	1d33      	adds	r3, r6, #4
 8008b98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b9a:	6838      	ldr	r0, [r7, #0]
 8008b9c:	f002 f890 	bl	800acc0 <USB_DevInit>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d005      	beq.n	8008bb2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2202      	movs	r2, #2
 8008baa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e00d      	b.n	8008bce <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f003 f8d8 	bl	800bd7c <USB_DevDisconnect>

  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008bd6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b084      	sub	sp, #16
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d101      	bne.n	8008bf2 <HAL_PCD_Start+0x1c>
 8008bee:	2302      	movs	r3, #2
 8008bf0:	e020      	b.n	8008c34 <HAL_PCD_Start+0x5e>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d109      	bne.n	8008c16 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d005      	beq.n	8008c16 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f002 f804 	bl	800ac28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4618      	mov	r0, r3
 8008c26:	f003 f888 	bl	800bd3a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008c3c:	b590      	push	{r4, r7, lr}
 8008c3e:	b08d      	sub	sp, #52	; 0x34
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f003 f946 	bl	800bee4 <USB_GetMode>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f040 839d 	bne.w	800939a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f003 f8aa 	bl	800bdbe <USB_ReadInterrupts>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f000 8393 	beq.w	8009398 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f003 f8a1 	bl	800bdbe <USB_ReadInterrupts>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	f003 0302 	and.w	r3, r3, #2
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d107      	bne.n	8008c96 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	695a      	ldr	r2, [r3, #20]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f002 0202 	and.w	r2, r2, #2
 8008c94:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f003 f88f 	bl	800bdbe <USB_ReadInterrupts>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	f003 0310 	and.w	r3, r3, #16
 8008ca6:	2b10      	cmp	r3, #16
 8008ca8:	d161      	bne.n	8008d6e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	699a      	ldr	r2, [r3, #24]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f022 0210 	bic.w	r2, r2, #16
 8008cb8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008cba:	6a3b      	ldr	r3, [r7, #32]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	f003 020f 	and.w	r2, r3, #15
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	00db      	lsls	r3, r3, #3
 8008cca:	1a9b      	subs	r3, r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	3304      	adds	r3, #4
 8008cd8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	0c5b      	lsrs	r3, r3, #17
 8008cde:	f003 030f 	and.w	r3, r3, #15
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d124      	bne.n	8008d30 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008cec:	4013      	ands	r3, r2
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d035      	beq.n	8008d5e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	091b      	lsrs	r3, r3, #4
 8008cfa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008cfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	461a      	mov	r2, r3
 8008d04:	6a38      	ldr	r0, [r7, #32]
 8008d06:	f002 fef5 	bl	800baf4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	68da      	ldr	r2, [r3, #12]
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	091b      	lsrs	r3, r3, #4
 8008d12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d16:	441a      	add	r2, r3
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	699a      	ldr	r2, [r3, #24]
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	091b      	lsrs	r3, r3, #4
 8008d24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d28:	441a      	add	r2, r3
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	619a      	str	r2, [r3, #24]
 8008d2e:	e016      	b.n	8008d5e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	0c5b      	lsrs	r3, r3, #17
 8008d34:	f003 030f 	and.w	r3, r3, #15
 8008d38:	2b06      	cmp	r3, #6
 8008d3a:	d110      	bne.n	8008d5e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008d42:	2208      	movs	r2, #8
 8008d44:	4619      	mov	r1, r3
 8008d46:	6a38      	ldr	r0, [r7, #32]
 8008d48:	f002 fed4 	bl	800baf4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	699a      	ldr	r2, [r3, #24]
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	091b      	lsrs	r3, r3, #4
 8008d54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d58:	441a      	add	r2, r3
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	699a      	ldr	r2, [r3, #24]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f042 0210 	orr.w	r2, r2, #16
 8008d6c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f003 f823 	bl	800bdbe <USB_ReadInterrupts>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008d82:	d16e      	bne.n	8008e62 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008d84:	2300      	movs	r3, #0
 8008d86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f003 f829 	bl	800bde4 <USB_ReadDevAllOutEpInterrupt>
 8008d92:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008d94:	e062      	b.n	8008e5c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d98:	f003 0301 	and.w	r3, r3, #1
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d057      	beq.n	8008e50 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008da6:	b2d2      	uxtb	r2, r2
 8008da8:	4611      	mov	r1, r2
 8008daa:	4618      	mov	r0, r3
 8008dac:	f003 f84e 	bl	800be4c <USB_ReadDevOutEPInterrupt>
 8008db0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	f003 0301 	and.w	r3, r3, #1
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00c      	beq.n	8008dd6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	015a      	lsls	r2, r3, #5
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc8:	461a      	mov	r2, r3
 8008dca:	2301      	movs	r3, #1
 8008dcc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fdb1 	bl	8009938 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	f003 0308 	and.w	r3, r3, #8
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00c      	beq.n	8008dfa <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de2:	015a      	lsls	r2, r3, #5
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dec:	461a      	mov	r2, r3
 8008dee:	2308      	movs	r3, #8
 8008df0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008df2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 feab 	bl	8009b50 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	f003 0310 	and.w	r3, r3, #16
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d008      	beq.n	8008e16 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e10:	461a      	mov	r2, r3
 8008e12:	2310      	movs	r3, #16
 8008e14:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	f003 0320 	and.w	r3, r3, #32
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d008      	beq.n	8008e32 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	015a      	lsls	r2, r3, #5
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	4413      	add	r3, r2
 8008e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	2320      	movs	r3, #32
 8008e30:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d009      	beq.n	8008e50 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e48:	461a      	mov	r2, r3
 8008e4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e4e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	3301      	adds	r3, #1
 8008e54:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e58:	085b      	lsrs	r3, r3, #1
 8008e5a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d199      	bne.n	8008d96 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4618      	mov	r0, r3
 8008e68:	f002 ffa9 	bl	800bdbe <USB_ReadInterrupts>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e76:	f040 80c0 	bne.w	8008ffa <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f002 ffca 	bl	800be18 <USB_ReadDevAllInEpInterrupt>
 8008e84:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008e86:	2300      	movs	r3, #0
 8008e88:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008e8a:	e0b2      	b.n	8008ff2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f000 80a7 	beq.w	8008fe6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e9e:	b2d2      	uxtb	r2, r2
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f002 fff0 	bl	800be88 <USB_ReadDevInEPInterrupt>
 8008ea8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d057      	beq.n	8008f64 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	f003 030f 	and.w	r3, r3, #15
 8008eba:	2201      	movs	r2, #1
 8008ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	43db      	mvns	r3, r3
 8008ece:	69f9      	ldr	r1, [r7, #28]
 8008ed0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eda:	015a      	lsls	r2, r3, #5
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d132      	bne.n	8008f58 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008ef2:	6879      	ldr	r1, [r7, #4]
 8008ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	00db      	lsls	r3, r3, #3
 8008efa:	1a9b      	subs	r3, r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	440b      	add	r3, r1
 8008f00:	3348      	adds	r3, #72	; 0x48
 8008f02:	6819      	ldr	r1, [r3, #0]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f08:	4613      	mov	r3, r2
 8008f0a:	00db      	lsls	r3, r3, #3
 8008f0c:	1a9b      	subs	r3, r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4403      	add	r3, r0
 8008f12:	3344      	adds	r3, #68	; 0x44
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4419      	add	r1, r3
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	00db      	lsls	r3, r3, #3
 8008f20:	1a9b      	subs	r3, r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4403      	add	r3, r0
 8008f26:	3348      	adds	r3, #72	; 0x48
 8008f28:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d113      	bne.n	8008f58 <HAL_PCD_IRQHandler+0x31c>
 8008f30:	6879      	ldr	r1, [r7, #4]
 8008f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f34:	4613      	mov	r3, r2
 8008f36:	00db      	lsls	r3, r3, #3
 8008f38:	1a9b      	subs	r3, r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	440b      	add	r3, r1
 8008f3e:	3350      	adds	r3, #80	; 0x50
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d108      	bne.n	8008f58 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008f50:	461a      	mov	r2, r3
 8008f52:	2101      	movs	r1, #1
 8008f54:	f002 fff8 	bl	800bf48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f006 f961 	bl	800f226 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	f003 0308 	and.w	r3, r3, #8
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d008      	beq.n	8008f80 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f70:	015a      	lsls	r2, r3, #5
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	4413      	add	r3, r2
 8008f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	2308      	movs	r3, #8
 8008f7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	f003 0310 	and.w	r3, r3, #16
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d008      	beq.n	8008f9c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	015a      	lsls	r2, r3, #5
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	4413      	add	r3, r2
 8008f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f96:	461a      	mov	r2, r3
 8008f98:	2310      	movs	r3, #16
 8008f9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d008      	beq.n	8008fb8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa8:	015a      	lsls	r2, r3, #5
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	4413      	add	r3, r2
 8008fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	2340      	movs	r3, #64	; 0x40
 8008fb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	f003 0302 	and.w	r3, r3, #2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d008      	beq.n	8008fd4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fce:	461a      	mov	r2, r3
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d003      	beq.n	8008fe6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008fde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fc1b 	bl	800981c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe8:	3301      	adds	r3, #1
 8008fea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fee:	085b      	lsrs	r3, r3, #1
 8008ff0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f47f af49 	bne.w	8008e8c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4618      	mov	r0, r3
 8009000:	f002 fedd 	bl	800bdbe <USB_ReadInterrupts>
 8009004:	4603      	mov	r3, r0
 8009006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800900a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800900e:	d122      	bne.n	8009056 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	69fa      	ldr	r2, [r7, #28]
 800901a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800901e:	f023 0301 	bic.w	r3, r3, #1
 8009022:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800902a:	2b01      	cmp	r3, #1
 800902c:	d108      	bne.n	8009040 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009036:	2100      	movs	r1, #0
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fe27 	bl	8009c8c <HAL_PCDEx_LPM_Callback>
 800903e:	e002      	b.n	8009046 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f006 f967 	bl	800f314 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	695a      	ldr	r2, [r3, #20]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009054:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4618      	mov	r0, r3
 800905c:	f002 feaf 	bl	800bdbe <USB_ReadInterrupts>
 8009060:	4603      	mov	r3, r0
 8009062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800906a:	d112      	bne.n	8009092 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f003 0301 	and.w	r3, r3, #1
 8009078:	2b01      	cmp	r3, #1
 800907a:	d102      	bne.n	8009082 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f006 f923 	bl	800f2c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	695a      	ldr	r2, [r3, #20]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009090:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4618      	mov	r0, r3
 8009098:	f002 fe91 	bl	800bdbe <USB_ReadInterrupts>
 800909c:	4603      	mov	r3, r0
 800909e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090a6:	f040 80c7 	bne.w	8009238 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	69fa      	ldr	r2, [r7, #28]
 80090b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090b8:	f023 0301 	bic.w	r3, r3, #1
 80090bc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2110      	movs	r1, #16
 80090c4:	4618      	mov	r0, r3
 80090c6:	f001 ff5f 	bl	800af88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80090ca:	2300      	movs	r3, #0
 80090cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090ce:	e056      	b.n	800917e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80090d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090dc:	461a      	mov	r2, r3
 80090de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80090e2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80090e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e6:	015a      	lsls	r2, r3, #5
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	4413      	add	r3, r2
 80090ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090f4:	0151      	lsls	r1, r2, #5
 80090f6:	69fa      	ldr	r2, [r7, #28]
 80090f8:	440a      	add	r2, r1
 80090fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009102:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009114:	0151      	lsls	r1, r2, #5
 8009116:	69fa      	ldr	r2, [r7, #28]
 8009118:	440a      	add	r2, r1
 800911a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800911e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009122:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009126:	015a      	lsls	r2, r3, #5
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	4413      	add	r3, r2
 800912c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009130:	461a      	mov	r2, r3
 8009132:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009136:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913a:	015a      	lsls	r2, r3, #5
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	4413      	add	r3, r2
 8009140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009148:	0151      	lsls	r1, r2, #5
 800914a:	69fa      	ldr	r2, [r7, #28]
 800914c:	440a      	add	r2, r1
 800914e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009152:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009156:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	4413      	add	r3, r2
 8009160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009168:	0151      	lsls	r1, r2, #5
 800916a:	69fa      	ldr	r2, [r7, #28]
 800916c:	440a      	add	r2, r1
 800916e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009172:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009176:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917a:	3301      	adds	r3, #1
 800917c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009184:	429a      	cmp	r2, r3
 8009186:	d3a3      	bcc.n	80090d0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800918e:	69db      	ldr	r3, [r3, #28]
 8009190:	69fa      	ldr	r2, [r7, #28]
 8009192:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009196:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800919a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d016      	beq.n	80091d2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091ae:	69fa      	ldr	r2, [r7, #28]
 80091b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091b4:	f043 030b 	orr.w	r3, r3, #11
 80091b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091c4:	69fa      	ldr	r2, [r7, #28]
 80091c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091ca:	f043 030b 	orr.w	r3, r3, #11
 80091ce:	6453      	str	r3, [r2, #68]	; 0x44
 80091d0:	e015      	b.n	80091fe <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	69fa      	ldr	r2, [r7, #28]
 80091dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80091e4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80091e8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	69fa      	ldr	r2, [r7, #28]
 80091f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091f8:	f043 030b 	orr.w	r3, r3, #11
 80091fc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	69fa      	ldr	r2, [r7, #28]
 8009208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800920c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009210:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6818      	ldr	r0, [r3, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009222:	461a      	mov	r2, r3
 8009224:	f002 fe90 	bl	800bf48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	695a      	ldr	r2, [r3, #20]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009236:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4618      	mov	r0, r3
 800923e:	f002 fdbe 	bl	800bdbe <USB_ReadInterrupts>
 8009242:	4603      	mov	r3, r0
 8009244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800924c:	d124      	bne.n	8009298 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4618      	mov	r0, r3
 8009254:	f002 fe54 	bl	800bf00 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4618      	mov	r0, r3
 800925e:	f001 fef4 	bl	800b04a <USB_GetDevSpeed>
 8009262:	4603      	mov	r3, r0
 8009264:	461a      	mov	r2, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681c      	ldr	r4, [r3, #0]
 800926e:	f001 f947 	bl	800a500 <HAL_RCC_GetHCLKFreq>
 8009272:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009278:	b2db      	uxtb	r3, r3
 800927a:	461a      	mov	r2, r3
 800927c:	4620      	mov	r0, r4
 800927e:	f001 fc31 	bl	800aae4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f005 fff7 	bl	800f276 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	695a      	ldr	r2, [r3, #20]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009296:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4618      	mov	r0, r3
 800929e:	f002 fd8e 	bl	800bdbe <USB_ReadInterrupts>
 80092a2:	4603      	mov	r3, r0
 80092a4:	f003 0308 	and.w	r3, r3, #8
 80092a8:	2b08      	cmp	r3, #8
 80092aa:	d10a      	bne.n	80092c2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f005 ffd4 	bl	800f25a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	695a      	ldr	r2, [r3, #20]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f002 0208 	and.w	r2, r2, #8
 80092c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f002 fd79 	bl	800bdbe <USB_ReadInterrupts>
 80092cc:	4603      	mov	r3, r0
 80092ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092d6:	d10f      	bne.n	80092f8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80092d8:	2300      	movs	r3, #0
 80092da:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	4619      	mov	r1, r3
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f006 f836 	bl	800f354 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	695a      	ldr	r2, [r3, #20]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80092f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4618      	mov	r0, r3
 80092fe:	f002 fd5e 	bl	800bdbe <USB_ReadInterrupts>
 8009302:	4603      	mov	r3, r0
 8009304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009308:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800930c:	d10f      	bne.n	800932e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800930e:	2300      	movs	r3, #0
 8009310:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	b2db      	uxtb	r3, r3
 8009316:	4619      	mov	r1, r3
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f006 f809 	bl	800f330 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	695a      	ldr	r2, [r3, #20]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800932c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4618      	mov	r0, r3
 8009334:	f002 fd43 	bl	800bdbe <USB_ReadInterrupts>
 8009338:	4603      	mov	r3, r0
 800933a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800933e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009342:	d10a      	bne.n	800935a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f006 f817 	bl	800f378 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	695a      	ldr	r2, [r3, #20]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009358:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4618      	mov	r0, r3
 8009360:	f002 fd2d 	bl	800bdbe <USB_ReadInterrupts>
 8009364:	4603      	mov	r3, r0
 8009366:	f003 0304 	and.w	r3, r3, #4
 800936a:	2b04      	cmp	r3, #4
 800936c:	d115      	bne.n	800939a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	f003 0304 	and.w	r3, r3, #4
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f006 f807 	bl	800f394 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6859      	ldr	r1, [r3, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	69ba      	ldr	r2, [r7, #24]
 8009392:	430a      	orrs	r2, r1
 8009394:	605a      	str	r2, [r3, #4]
 8009396:	e000      	b.n	800939a <HAL_PCD_IRQHandler+0x75e>
      return;
 8009398:	bf00      	nop
    }
  }
}
 800939a:	3734      	adds	r7, #52	; 0x34
 800939c:	46bd      	mov	sp, r7
 800939e:	bd90      	pop	{r4, r7, pc}

080093a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	460b      	mov	r3, r1
 80093aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d101      	bne.n	80093ba <HAL_PCD_SetAddress+0x1a>
 80093b6:	2302      	movs	r3, #2
 80093b8:	e013      	b.n	80093e2 <HAL_PCD_SetAddress+0x42>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2201      	movs	r2, #1
 80093be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	78fa      	ldrb	r2, [r7, #3]
 80093c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	78fa      	ldrb	r2, [r7, #3]
 80093d0:	4611      	mov	r1, r2
 80093d2:	4618      	mov	r0, r3
 80093d4:	f002 fc8b 	bl	800bcee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b084      	sub	sp, #16
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	4608      	mov	r0, r1
 80093f4:	4611      	mov	r1, r2
 80093f6:	461a      	mov	r2, r3
 80093f8:	4603      	mov	r3, r0
 80093fa:	70fb      	strb	r3, [r7, #3]
 80093fc:	460b      	mov	r3, r1
 80093fe:	803b      	strh	r3, [r7, #0]
 8009400:	4613      	mov	r3, r2
 8009402:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800940c:	2b00      	cmp	r3, #0
 800940e:	da0f      	bge.n	8009430 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009410:	78fb      	ldrb	r3, [r7, #3]
 8009412:	f003 020f 	and.w	r2, r3, #15
 8009416:	4613      	mov	r3, r2
 8009418:	00db      	lsls	r3, r3, #3
 800941a:	1a9b      	subs	r3, r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	3338      	adds	r3, #56	; 0x38
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	4413      	add	r3, r2
 8009424:	3304      	adds	r3, #4
 8009426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2201      	movs	r2, #1
 800942c:	705a      	strb	r2, [r3, #1]
 800942e:	e00f      	b.n	8009450 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009430:	78fb      	ldrb	r3, [r7, #3]
 8009432:	f003 020f 	and.w	r2, r3, #15
 8009436:	4613      	mov	r3, r2
 8009438:	00db      	lsls	r3, r3, #3
 800943a:	1a9b      	subs	r3, r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	4413      	add	r3, r2
 8009446:	3304      	adds	r3, #4
 8009448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009450:	78fb      	ldrb	r3, [r7, #3]
 8009452:	f003 030f 	and.w	r3, r3, #15
 8009456:	b2da      	uxtb	r2, r3
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800945c:	883a      	ldrh	r2, [r7, #0]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	78ba      	ldrb	r2, [r7, #2]
 8009466:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	785b      	ldrb	r3, [r3, #1]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d004      	beq.n	800947a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	b29a      	uxth	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800947a:	78bb      	ldrb	r3, [r7, #2]
 800947c:	2b02      	cmp	r3, #2
 800947e:	d102      	bne.n	8009486 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800948c:	2b01      	cmp	r3, #1
 800948e:	d101      	bne.n	8009494 <HAL_PCD_EP_Open+0xaa>
 8009490:	2302      	movs	r3, #2
 8009492:	e00e      	b.n	80094b2 <HAL_PCD_EP_Open+0xc8>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68f9      	ldr	r1, [r7, #12]
 80094a2:	4618      	mov	r0, r3
 80094a4:	f001 fdf6 	bl	800b094 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80094b0:	7afb      	ldrb	r3, [r7, #11]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	460b      	mov	r3, r1
 80094c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80094c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	da0f      	bge.n	80094ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094ce:	78fb      	ldrb	r3, [r7, #3]
 80094d0:	f003 020f 	and.w	r2, r3, #15
 80094d4:	4613      	mov	r3, r2
 80094d6:	00db      	lsls	r3, r3, #3
 80094d8:	1a9b      	subs	r3, r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	3338      	adds	r3, #56	; 0x38
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	4413      	add	r3, r2
 80094e2:	3304      	adds	r3, #4
 80094e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2201      	movs	r2, #1
 80094ea:	705a      	strb	r2, [r3, #1]
 80094ec:	e00f      	b.n	800950e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094ee:	78fb      	ldrb	r3, [r7, #3]
 80094f0:	f003 020f 	and.w	r2, r3, #15
 80094f4:	4613      	mov	r3, r2
 80094f6:	00db      	lsls	r3, r3, #3
 80094f8:	1a9b      	subs	r3, r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	4413      	add	r3, r2
 8009504:	3304      	adds	r3, #4
 8009506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2200      	movs	r2, #0
 800950c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800950e:	78fb      	ldrb	r3, [r7, #3]
 8009510:	f003 030f 	and.w	r3, r3, #15
 8009514:	b2da      	uxtb	r2, r3
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009520:	2b01      	cmp	r3, #1
 8009522:	d101      	bne.n	8009528 <HAL_PCD_EP_Close+0x6e>
 8009524:	2302      	movs	r3, #2
 8009526:	e00e      	b.n	8009546 <HAL_PCD_EP_Close+0x8c>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68f9      	ldr	r1, [r7, #12]
 8009536:	4618      	mov	r0, r3
 8009538:	f001 fe34 	bl	800b1a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b086      	sub	sp, #24
 8009552:	af00      	add	r7, sp, #0
 8009554:	60f8      	str	r0, [r7, #12]
 8009556:	607a      	str	r2, [r7, #4]
 8009558:	603b      	str	r3, [r7, #0]
 800955a:	460b      	mov	r3, r1
 800955c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800955e:	7afb      	ldrb	r3, [r7, #11]
 8009560:	f003 020f 	and.w	r2, r3, #15
 8009564:	4613      	mov	r3, r2
 8009566:	00db      	lsls	r3, r3, #3
 8009568:	1a9b      	subs	r3, r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	4413      	add	r3, r2
 8009574:	3304      	adds	r3, #4
 8009576:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	683a      	ldr	r2, [r7, #0]
 8009582:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	2200      	movs	r2, #0
 8009588:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	2200      	movs	r2, #0
 800958e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009590:	7afb      	ldrb	r3, [r7, #11]
 8009592:	f003 030f 	and.w	r3, r3, #15
 8009596:	b2da      	uxtb	r2, r3
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d102      	bne.n	80095aa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80095aa:	7afb      	ldrb	r3, [r7, #11]
 80095ac:	f003 030f 	and.w	r3, r3, #15
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d109      	bne.n	80095c8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6818      	ldr	r0, [r3, #0]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	461a      	mov	r2, r3
 80095c0:	6979      	ldr	r1, [r7, #20]
 80095c2:	f002 f90f 	bl	800b7e4 <USB_EP0StartXfer>
 80095c6:	e008      	b.n	80095da <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6818      	ldr	r0, [r3, #0]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	461a      	mov	r2, r3
 80095d4:	6979      	ldr	r1, [r7, #20]
 80095d6:	f001 fec1 	bl	800b35c <USB_EPStartXfer>
  }

  return HAL_OK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3718      	adds	r7, #24
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	460b      	mov	r3, r1
 80095ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80095f0:	78fb      	ldrb	r3, [r7, #3]
 80095f2:	f003 020f 	and.w	r2, r3, #15
 80095f6:	6879      	ldr	r1, [r7, #4]
 80095f8:	4613      	mov	r3, r2
 80095fa:	00db      	lsls	r3, r3, #3
 80095fc:	1a9b      	subs	r3, r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	440b      	add	r3, r1
 8009602:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009606:	681b      	ldr	r3, [r3, #0]
}
 8009608:	4618      	mov	r0, r3
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b086      	sub	sp, #24
 8009618:	af00      	add	r7, sp, #0
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	607a      	str	r2, [r7, #4]
 800961e:	603b      	str	r3, [r7, #0]
 8009620:	460b      	mov	r3, r1
 8009622:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009624:	7afb      	ldrb	r3, [r7, #11]
 8009626:	f003 020f 	and.w	r2, r3, #15
 800962a:	4613      	mov	r3, r2
 800962c:	00db      	lsls	r3, r3, #3
 800962e:	1a9b      	subs	r3, r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	3338      	adds	r3, #56	; 0x38
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	4413      	add	r3, r2
 8009638:	3304      	adds	r3, #4
 800963a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	683a      	ldr	r2, [r7, #0]
 8009646:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	2200      	movs	r2, #0
 800964c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	2201      	movs	r2, #1
 8009652:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009654:	7afb      	ldrb	r3, [r7, #11]
 8009656:	f003 030f 	and.w	r3, r3, #15
 800965a:	b2da      	uxtb	r2, r3
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d102      	bne.n	800966e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800966e:	7afb      	ldrb	r3, [r7, #11]
 8009670:	f003 030f 	and.w	r3, r3, #15
 8009674:	2b00      	cmp	r3, #0
 8009676:	d109      	bne.n	800968c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6818      	ldr	r0, [r3, #0]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	b2db      	uxtb	r3, r3
 8009682:	461a      	mov	r2, r3
 8009684:	6979      	ldr	r1, [r7, #20]
 8009686:	f002 f8ad 	bl	800b7e4 <USB_EP0StartXfer>
 800968a:	e008      	b.n	800969e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6818      	ldr	r0, [r3, #0]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	b2db      	uxtb	r3, r3
 8009696:	461a      	mov	r2, r3
 8009698:	6979      	ldr	r1, [r7, #20]
 800969a:	f001 fe5f 	bl	800b35c <USB_EPStartXfer>
  }

  return HAL_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3718      	adds	r7, #24
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	460b      	mov	r3, r1
 80096b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80096b4:	78fb      	ldrb	r3, [r7, #3]
 80096b6:	f003 020f 	and.w	r2, r3, #15
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d901      	bls.n	80096c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	e050      	b.n	8009768 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80096c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	da0f      	bge.n	80096ee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096ce:	78fb      	ldrb	r3, [r7, #3]
 80096d0:	f003 020f 	and.w	r2, r3, #15
 80096d4:	4613      	mov	r3, r2
 80096d6:	00db      	lsls	r3, r3, #3
 80096d8:	1a9b      	subs	r3, r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	3338      	adds	r3, #56	; 0x38
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	4413      	add	r3, r2
 80096e2:	3304      	adds	r3, #4
 80096e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2201      	movs	r2, #1
 80096ea:	705a      	strb	r2, [r3, #1]
 80096ec:	e00d      	b.n	800970a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80096ee:	78fa      	ldrb	r2, [r7, #3]
 80096f0:	4613      	mov	r3, r2
 80096f2:	00db      	lsls	r3, r3, #3
 80096f4:	1a9b      	subs	r3, r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	4413      	add	r3, r2
 8009700:	3304      	adds	r3, #4
 8009702:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2200      	movs	r2, #0
 8009708:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2201      	movs	r2, #1
 800970e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009710:	78fb      	ldrb	r3, [r7, #3]
 8009712:	f003 030f 	and.w	r3, r3, #15
 8009716:	b2da      	uxtb	r2, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009722:	2b01      	cmp	r3, #1
 8009724:	d101      	bne.n	800972a <HAL_PCD_EP_SetStall+0x82>
 8009726:	2302      	movs	r3, #2
 8009728:	e01e      	b.n	8009768 <HAL_PCD_EP_SetStall+0xc0>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2201      	movs	r2, #1
 800972e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	68f9      	ldr	r1, [r7, #12]
 8009738:	4618      	mov	r0, r3
 800973a:	f002 fa04 	bl	800bb46 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800973e:	78fb      	ldrb	r3, [r7, #3]
 8009740:	f003 030f 	and.w	r3, r3, #15
 8009744:	2b00      	cmp	r3, #0
 8009746:	d10a      	bne.n	800975e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6818      	ldr	r0, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	b2d9      	uxtb	r1, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009758:	461a      	mov	r2, r3
 800975a:	f002 fbf5 	bl	800bf48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	460b      	mov	r3, r1
 800977a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800977c:	78fb      	ldrb	r3, [r7, #3]
 800977e:	f003 020f 	and.w	r2, r3, #15
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	429a      	cmp	r2, r3
 8009788:	d901      	bls.n	800978e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e042      	b.n	8009814 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800978e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009792:	2b00      	cmp	r3, #0
 8009794:	da0f      	bge.n	80097b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009796:	78fb      	ldrb	r3, [r7, #3]
 8009798:	f003 020f 	and.w	r2, r3, #15
 800979c:	4613      	mov	r3, r2
 800979e:	00db      	lsls	r3, r3, #3
 80097a0:	1a9b      	subs	r3, r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	3338      	adds	r3, #56	; 0x38
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	4413      	add	r3, r2
 80097aa:	3304      	adds	r3, #4
 80097ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2201      	movs	r2, #1
 80097b2:	705a      	strb	r2, [r3, #1]
 80097b4:	e00f      	b.n	80097d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80097b6:	78fb      	ldrb	r3, [r7, #3]
 80097b8:	f003 020f 	and.w	r2, r3, #15
 80097bc:	4613      	mov	r3, r2
 80097be:	00db      	lsls	r3, r3, #3
 80097c0:	1a9b      	subs	r3, r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	4413      	add	r3, r2
 80097cc:	3304      	adds	r3, #4
 80097ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80097dc:	78fb      	ldrb	r3, [r7, #3]
 80097de:	f003 030f 	and.w	r3, r3, #15
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d101      	bne.n	80097f6 <HAL_PCD_EP_ClrStall+0x86>
 80097f2:	2302      	movs	r3, #2
 80097f4:	e00e      	b.n	8009814 <HAL_PCD_EP_ClrStall+0xa4>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68f9      	ldr	r1, [r7, #12]
 8009804:	4618      	mov	r0, r3
 8009806:	f002 fa0c 	bl	800bc22 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b08a      	sub	sp, #40	; 0x28
 8009820:	af02      	add	r7, sp, #8
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009830:	683a      	ldr	r2, [r7, #0]
 8009832:	4613      	mov	r3, r2
 8009834:	00db      	lsls	r3, r3, #3
 8009836:	1a9b      	subs	r3, r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	3338      	adds	r3, #56	; 0x38
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	4413      	add	r3, r2
 8009840:	3304      	adds	r3, #4
 8009842:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	699a      	ldr	r2, [r3, #24]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	695b      	ldr	r3, [r3, #20]
 800984c:	429a      	cmp	r2, r3
 800984e:	d901      	bls.n	8009854 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	e06c      	b.n	800992e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	695a      	ldr	r2, [r3, #20]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	699b      	ldr	r3, [r3, #24]
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	69fa      	ldr	r2, [r7, #28]
 8009866:	429a      	cmp	r2, r3
 8009868:	d902      	bls.n	8009870 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	3303      	adds	r3, #3
 8009874:	089b      	lsrs	r3, r3, #2
 8009876:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009878:	e02b      	b.n	80098d2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	695a      	ldr	r2, [r3, #20]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	1ad3      	subs	r3, r2, r3
 8009884:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	69fa      	ldr	r2, [r7, #28]
 800988c:	429a      	cmp	r2, r3
 800988e:	d902      	bls.n	8009896 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	3303      	adds	r3, #3
 800989a:	089b      	lsrs	r3, r3, #2
 800989c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	68d9      	ldr	r1, [r3, #12]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	b2da      	uxtb	r2, r3
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	9300      	str	r3, [sp, #0]
 80098b2:	4603      	mov	r3, r0
 80098b4:	6978      	ldr	r0, [r7, #20]
 80098b6:	f002 f8e8 	bl	800ba8a <USB_WritePacket>

    ep->xfer_buff  += len;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	68da      	ldr	r2, [r3, #12]
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	441a      	add	r2, r3
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	699a      	ldr	r2, [r3, #24]
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	441a      	add	r2, r3
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	015a      	lsls	r2, r3, #5
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098de:	699b      	ldr	r3, [r3, #24]
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	69ba      	ldr	r2, [r7, #24]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d809      	bhi.n	80098fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	699a      	ldr	r2, [r3, #24]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d203      	bcs.n	80098fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	695b      	ldr	r3, [r3, #20]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1be      	bne.n	800987a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	695a      	ldr	r2, [r3, #20]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	429a      	cmp	r2, r3
 8009906:	d811      	bhi.n	800992c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	f003 030f 	and.w	r3, r3, #15
 800990e:	2201      	movs	r2, #1
 8009910:	fa02 f303 	lsl.w	r3, r2, r3
 8009914:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800991c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	43db      	mvns	r3, r3
 8009922:	6939      	ldr	r1, [r7, #16]
 8009924:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009928:	4013      	ands	r3, r2
 800992a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3720      	adds	r7, #32
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
	...

08009938 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b086      	sub	sp, #24
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	333c      	adds	r3, #60	; 0x3c
 8009950:	3304      	adds	r3, #4
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	015a      	lsls	r2, r3, #5
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	4413      	add	r3, r2
 800995e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	2b01      	cmp	r3, #1
 800996c:	f040 80a0 	bne.w	8009ab0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	f003 0308 	and.w	r3, r3, #8
 8009976:	2b00      	cmp	r3, #0
 8009978:	d015      	beq.n	80099a6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	4a72      	ldr	r2, [pc, #456]	; (8009b48 <PCD_EP_OutXfrComplete_int+0x210>)
 800997e:	4293      	cmp	r3, r2
 8009980:	f240 80dd 	bls.w	8009b3e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800998a:	2b00      	cmp	r3, #0
 800998c:	f000 80d7 	beq.w	8009b3e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800999c:	461a      	mov	r2, r3
 800999e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099a2:	6093      	str	r3, [r2, #8]
 80099a4:	e0cb      	b.n	8009b3e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	f003 0320 	and.w	r3, r3, #32
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d009      	beq.n	80099c4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	015a      	lsls	r2, r3, #5
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	4413      	add	r3, r2
 80099b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099bc:	461a      	mov	r2, r3
 80099be:	2320      	movs	r3, #32
 80099c0:	6093      	str	r3, [r2, #8]
 80099c2:	e0bc      	b.n	8009b3e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f040 80b7 	bne.w	8009b3e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4a5d      	ldr	r2, [pc, #372]	; (8009b48 <PCD_EP_OutXfrComplete_int+0x210>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d90f      	bls.n	80099f8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00a      	beq.n	80099f8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	015a      	lsls	r2, r3, #5
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	4413      	add	r3, r2
 80099ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ee:	461a      	mov	r2, r3
 80099f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099f4:	6093      	str	r3, [r2, #8]
 80099f6:	e0a2      	b.n	8009b3e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80099f8:	6879      	ldr	r1, [r7, #4]
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	4613      	mov	r3, r2
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	1a9b      	subs	r3, r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	440b      	add	r3, r1
 8009a06:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009a0a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	0159      	lsls	r1, r3, #5
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	440b      	add	r3, r1
 8009a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009a1e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	683a      	ldr	r2, [r7, #0]
 8009a24:	4613      	mov	r3, r2
 8009a26:	00db      	lsls	r3, r3, #3
 8009a28:	1a9b      	subs	r3, r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4403      	add	r3, r0
 8009a2e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009a32:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009a34:	6879      	ldr	r1, [r7, #4]
 8009a36:	683a      	ldr	r2, [r7, #0]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	00db      	lsls	r3, r3, #3
 8009a3c:	1a9b      	subs	r3, r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	440b      	add	r3, r1
 8009a42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009a46:	6819      	ldr	r1, [r3, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	00db      	lsls	r3, r3, #3
 8009a50:	1a9b      	subs	r3, r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	4403      	add	r3, r0
 8009a56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4419      	add	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	4613      	mov	r3, r2
 8009a64:	00db      	lsls	r3, r3, #3
 8009a66:	1a9b      	subs	r3, r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4403      	add	r3, r0
 8009a6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009a70:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d114      	bne.n	8009aa2 <PCD_EP_OutXfrComplete_int+0x16a>
 8009a78:	6879      	ldr	r1, [r7, #4]
 8009a7a:	683a      	ldr	r2, [r7, #0]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	00db      	lsls	r3, r3, #3
 8009a80:	1a9b      	subs	r3, r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	440b      	add	r3, r1
 8009a86:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d108      	bne.n	8009aa2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6818      	ldr	r0, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	f002 fa53 	bl	800bf48 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f005 fba1 	bl	800f1f0 <HAL_PCD_DataOutStageCallback>
 8009aae:	e046      	b.n	8009b3e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	4a26      	ldr	r2, [pc, #152]	; (8009b4c <PCD_EP_OutXfrComplete_int+0x214>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d124      	bne.n	8009b02 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d00a      	beq.n	8009ad8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	015a      	lsls	r2, r3, #5
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ace:	461a      	mov	r2, r3
 8009ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ad4:	6093      	str	r3, [r2, #8]
 8009ad6:	e032      	b.n	8009b3e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	f003 0320 	and.w	r3, r3, #32
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d008      	beq.n	8009af4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	015a      	lsls	r2, r3, #5
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	4413      	add	r3, r2
 8009aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aee:	461a      	mov	r2, r3
 8009af0:	2320      	movs	r3, #32
 8009af2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	4619      	mov	r1, r3
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f005 fb78 	bl	800f1f0 <HAL_PCD_DataOutStageCallback>
 8009b00:	e01d      	b.n	8009b3e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d114      	bne.n	8009b32 <PCD_EP_OutXfrComplete_int+0x1fa>
 8009b08:	6879      	ldr	r1, [r7, #4]
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	00db      	lsls	r3, r3, #3
 8009b10:	1a9b      	subs	r3, r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	440b      	add	r3, r1
 8009b16:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d108      	bne.n	8009b32 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6818      	ldr	r0, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	2100      	movs	r1, #0
 8009b2e:	f002 fa0b 	bl	800bf48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f005 fb59 	bl	800f1f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3718      	adds	r7, #24
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	4f54300a 	.word	0x4f54300a
 8009b4c:	4f54310a 	.word	0x4f54310a

08009b50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	333c      	adds	r3, #60	; 0x3c
 8009b68:	3304      	adds	r3, #4
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	015a      	lsls	r2, r3, #5
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	4413      	add	r3, r2
 8009b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	4a15      	ldr	r2, [pc, #84]	; (8009bd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d90e      	bls.n	8009ba4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d009      	beq.n	8009ba4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	015a      	lsls	r2, r3, #5
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	4413      	add	r3, r2
 8009b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ba2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f005 fb11 	bl	800f1cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	4a0a      	ldr	r2, [pc, #40]	; (8009bd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d90c      	bls.n	8009bcc <PCD_EP_OutSetupPacket_int+0x7c>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d108      	bne.n	8009bcc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6818      	ldr	r0, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	f002 f9be 	bl	800bf48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3718      	adds	r7, #24
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	4f54300a 	.word	0x4f54300a

08009bdc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	460b      	mov	r3, r1
 8009be6:	70fb      	strb	r3, [r7, #3]
 8009be8:	4613      	mov	r3, r2
 8009bea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009bf4:	78fb      	ldrb	r3, [r7, #3]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d107      	bne.n	8009c0a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009bfa:	883b      	ldrh	r3, [r7, #0]
 8009bfc:	0419      	lsls	r1, r3, #16
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	430a      	orrs	r2, r1
 8009c06:	629a      	str	r2, [r3, #40]	; 0x28
 8009c08:	e028      	b.n	8009c5c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c10:	0c1b      	lsrs	r3, r3, #16
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	4413      	add	r3, r2
 8009c16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009c18:	2300      	movs	r3, #0
 8009c1a:	73fb      	strb	r3, [r7, #15]
 8009c1c:	e00d      	b.n	8009c3a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	7bfb      	ldrb	r3, [r7, #15]
 8009c24:	3340      	adds	r3, #64	; 0x40
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4413      	add	r3, r2
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	0c1b      	lsrs	r3, r3, #16
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	4413      	add	r3, r2
 8009c32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
 8009c36:	3301      	adds	r3, #1
 8009c38:	73fb      	strb	r3, [r7, #15]
 8009c3a:	7bfa      	ldrb	r2, [r7, #15]
 8009c3c:	78fb      	ldrb	r3, [r7, #3]
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d3ec      	bcc.n	8009c1e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009c44:	883b      	ldrh	r3, [r7, #0]
 8009c46:	0418      	lsls	r0, r3, #16
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6819      	ldr	r1, [r3, #0]
 8009c4c:	78fb      	ldrb	r3, [r7, #3]
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	4302      	orrs	r2, r0
 8009c54:	3340      	adds	r3, #64	; 0x40
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	440b      	add	r3, r1
 8009c5a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3714      	adds	r7, #20
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr

08009c6a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009c6a:	b480      	push	{r7}
 8009c6c:	b083      	sub	sp, #12
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	460b      	mov	r3, r1
 8009c74:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	887a      	ldrh	r2, [r7, #2]
 8009c7c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	460b      	mov	r3, r1
 8009c96:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009c98:	bf00      	nop
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b086      	sub	sp, #24
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d101      	bne.n	8009cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e25b      	b.n	800a16e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f003 0301 	and.w	r3, r3, #1
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d075      	beq.n	8009dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009cc2:	4ba3      	ldr	r3, [pc, #652]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	f003 030c 	and.w	r3, r3, #12
 8009cca:	2b04      	cmp	r3, #4
 8009ccc:	d00c      	beq.n	8009ce8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009cce:	4ba0      	ldr	r3, [pc, #640]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009cd6:	2b08      	cmp	r3, #8
 8009cd8:	d112      	bne.n	8009d00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009cda:	4b9d      	ldr	r3, [pc, #628]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ce6:	d10b      	bne.n	8009d00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ce8:	4b99      	ldr	r3, [pc, #612]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d05b      	beq.n	8009dac <HAL_RCC_OscConfig+0x108>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d157      	bne.n	8009dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e236      	b.n	800a16e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d08:	d106      	bne.n	8009d18 <HAL_RCC_OscConfig+0x74>
 8009d0a:	4b91      	ldr	r3, [pc, #580]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a90      	ldr	r2, [pc, #576]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d14:	6013      	str	r3, [r2, #0]
 8009d16:	e01d      	b.n	8009d54 <HAL_RCC_OscConfig+0xb0>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d20:	d10c      	bne.n	8009d3c <HAL_RCC_OscConfig+0x98>
 8009d22:	4b8b      	ldr	r3, [pc, #556]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a8a      	ldr	r2, [pc, #552]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d2c:	6013      	str	r3, [r2, #0]
 8009d2e:	4b88      	ldr	r3, [pc, #544]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a87      	ldr	r2, [pc, #540]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d38:	6013      	str	r3, [r2, #0]
 8009d3a:	e00b      	b.n	8009d54 <HAL_RCC_OscConfig+0xb0>
 8009d3c:	4b84      	ldr	r3, [pc, #528]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a83      	ldr	r2, [pc, #524]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d46:	6013      	str	r3, [r2, #0]
 8009d48:	4b81      	ldr	r3, [pc, #516]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a80      	ldr	r2, [pc, #512]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d013      	beq.n	8009d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d5c:	f7fb f98c 	bl	8005078 <HAL_GetTick>
 8009d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d62:	e008      	b.n	8009d76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d64:	f7fb f988 	bl	8005078 <HAL_GetTick>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	2b64      	cmp	r3, #100	; 0x64
 8009d70:	d901      	bls.n	8009d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009d72:	2303      	movs	r3, #3
 8009d74:	e1fb      	b.n	800a16e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d76:	4b76      	ldr	r3, [pc, #472]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d0f0      	beq.n	8009d64 <HAL_RCC_OscConfig+0xc0>
 8009d82:	e014      	b.n	8009dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d84:	f7fb f978 	bl	8005078 <HAL_GetTick>
 8009d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d8a:	e008      	b.n	8009d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d8c:	f7fb f974 	bl	8005078 <HAL_GetTick>
 8009d90:	4602      	mov	r2, r0
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	2b64      	cmp	r3, #100	; 0x64
 8009d98:	d901      	bls.n	8009d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e1e7      	b.n	800a16e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d9e:	4b6c      	ldr	r3, [pc, #432]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1f0      	bne.n	8009d8c <HAL_RCC_OscConfig+0xe8>
 8009daa:	e000      	b.n	8009dae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f003 0302 	and.w	r3, r3, #2
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d063      	beq.n	8009e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009dba:	4b65      	ldr	r3, [pc, #404]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	f003 030c 	and.w	r3, r3, #12
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00b      	beq.n	8009dde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009dc6:	4b62      	ldr	r3, [pc, #392]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009dce:	2b08      	cmp	r3, #8
 8009dd0:	d11c      	bne.n	8009e0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009dd2:	4b5f      	ldr	r3, [pc, #380]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d116      	bne.n	8009e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009dde:	4b5c      	ldr	r3, [pc, #368]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f003 0302 	and.w	r3, r3, #2
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d005      	beq.n	8009df6 <HAL_RCC_OscConfig+0x152>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d001      	beq.n	8009df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e1bb      	b.n	800a16e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009df6:	4b56      	ldr	r3, [pc, #344]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	00db      	lsls	r3, r3, #3
 8009e04:	4952      	ldr	r1, [pc, #328]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009e06:	4313      	orrs	r3, r2
 8009e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009e0a:	e03a      	b.n	8009e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d020      	beq.n	8009e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009e14:	4b4f      	ldr	r3, [pc, #316]	; (8009f54 <HAL_RCC_OscConfig+0x2b0>)
 8009e16:	2201      	movs	r2, #1
 8009e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e1a:	f7fb f92d 	bl	8005078 <HAL_GetTick>
 8009e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e20:	e008      	b.n	8009e34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009e22:	f7fb f929 	bl	8005078 <HAL_GetTick>
 8009e26:	4602      	mov	r2, r0
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d901      	bls.n	8009e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009e30:	2303      	movs	r3, #3
 8009e32:	e19c      	b.n	800a16e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e34:	4b46      	ldr	r3, [pc, #280]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 0302 	and.w	r3, r3, #2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d0f0      	beq.n	8009e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e40:	4b43      	ldr	r3, [pc, #268]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	00db      	lsls	r3, r3, #3
 8009e4e:	4940      	ldr	r1, [pc, #256]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009e50:	4313      	orrs	r3, r2
 8009e52:	600b      	str	r3, [r1, #0]
 8009e54:	e015      	b.n	8009e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009e56:	4b3f      	ldr	r3, [pc, #252]	; (8009f54 <HAL_RCC_OscConfig+0x2b0>)
 8009e58:	2200      	movs	r2, #0
 8009e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e5c:	f7fb f90c 	bl	8005078 <HAL_GetTick>
 8009e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e62:	e008      	b.n	8009e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009e64:	f7fb f908 	bl	8005078 <HAL_GetTick>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d901      	bls.n	8009e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009e72:	2303      	movs	r3, #3
 8009e74:	e17b      	b.n	800a16e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e76:	4b36      	ldr	r3, [pc, #216]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 0302 	and.w	r3, r3, #2
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1f0      	bne.n	8009e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f003 0308 	and.w	r3, r3, #8
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d030      	beq.n	8009ef0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d016      	beq.n	8009ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e96:	4b30      	ldr	r3, [pc, #192]	; (8009f58 <HAL_RCC_OscConfig+0x2b4>)
 8009e98:	2201      	movs	r2, #1
 8009e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e9c:	f7fb f8ec 	bl	8005078 <HAL_GetTick>
 8009ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009ea2:	e008      	b.n	8009eb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ea4:	f7fb f8e8 	bl	8005078 <HAL_GetTick>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d901      	bls.n	8009eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e15b      	b.n	800a16e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009eb6:	4b26      	ldr	r3, [pc, #152]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eba:	f003 0302 	and.w	r3, r3, #2
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d0f0      	beq.n	8009ea4 <HAL_RCC_OscConfig+0x200>
 8009ec2:	e015      	b.n	8009ef0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ec4:	4b24      	ldr	r3, [pc, #144]	; (8009f58 <HAL_RCC_OscConfig+0x2b4>)
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009eca:	f7fb f8d5 	bl	8005078 <HAL_GetTick>
 8009ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ed0:	e008      	b.n	8009ee4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ed2:	f7fb f8d1 	bl	8005078 <HAL_GetTick>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d901      	bls.n	8009ee4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e144      	b.n	800a16e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ee4:	4b1a      	ldr	r3, [pc, #104]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ee8:	f003 0302 	and.w	r3, r3, #2
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1f0      	bne.n	8009ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f003 0304 	and.w	r3, r3, #4
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f000 80a0 	beq.w	800a03e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009efe:	2300      	movs	r3, #0
 8009f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f02:	4b13      	ldr	r3, [pc, #76]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10f      	bne.n	8009f2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f0e:	2300      	movs	r3, #0
 8009f10:	60bb      	str	r3, [r7, #8]
 8009f12:	4b0f      	ldr	r3, [pc, #60]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f16:	4a0e      	ldr	r2, [pc, #56]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8009f1e:	4b0c      	ldr	r3, [pc, #48]	; (8009f50 <HAL_RCC_OscConfig+0x2ac>)
 8009f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f26:	60bb      	str	r3, [r7, #8]
 8009f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f2e:	4b0b      	ldr	r3, [pc, #44]	; (8009f5c <HAL_RCC_OscConfig+0x2b8>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d121      	bne.n	8009f7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009f3a:	4b08      	ldr	r3, [pc, #32]	; (8009f5c <HAL_RCC_OscConfig+0x2b8>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a07      	ldr	r2, [pc, #28]	; (8009f5c <HAL_RCC_OscConfig+0x2b8>)
 8009f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009f46:	f7fb f897 	bl	8005078 <HAL_GetTick>
 8009f4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f4c:	e011      	b.n	8009f72 <HAL_RCC_OscConfig+0x2ce>
 8009f4e:	bf00      	nop
 8009f50:	40023800 	.word	0x40023800
 8009f54:	42470000 	.word	0x42470000
 8009f58:	42470e80 	.word	0x42470e80
 8009f5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f60:	f7fb f88a 	bl	8005078 <HAL_GetTick>
 8009f64:	4602      	mov	r2, r0
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d901      	bls.n	8009f72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	e0fd      	b.n	800a16e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f72:	4b81      	ldr	r3, [pc, #516]	; (800a178 <HAL_RCC_OscConfig+0x4d4>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d0f0      	beq.n	8009f60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d106      	bne.n	8009f94 <HAL_RCC_OscConfig+0x2f0>
 8009f86:	4b7d      	ldr	r3, [pc, #500]	; (800a17c <HAL_RCC_OscConfig+0x4d8>)
 8009f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f8a:	4a7c      	ldr	r2, [pc, #496]	; (800a17c <HAL_RCC_OscConfig+0x4d8>)
 8009f8c:	f043 0301 	orr.w	r3, r3, #1
 8009f90:	6713      	str	r3, [r2, #112]	; 0x70
 8009f92:	e01c      	b.n	8009fce <HAL_RCC_OscConfig+0x32a>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	2b05      	cmp	r3, #5
 8009f9a:	d10c      	bne.n	8009fb6 <HAL_RCC_OscConfig+0x312>
 8009f9c:	4b77      	ldr	r3, [pc, #476]	; (800a17c <HAL_RCC_OscConfig+0x4d8>)
 8009f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fa0:	4a76      	ldr	r2, [pc, #472]	; (800a17c <HAL_RCC_OscConfig+0x4d8>)
 8009fa2:	f043 0304 	orr.w	r3, r3, #4
 8009fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8009fa8:	4b74      	ldr	r3, [pc, #464]	; (800a17c <HAL_RCC_OscConfig+0x4d8>)
 8009faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fac:	4a73      	ldr	r2, [pc, #460]	; (800a17c <HAL_RCC_OscConfig+0x4d8>)
 8009fae:	f043 0301 	orr.w	r3, r3, #1
 8009fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8009fb4:	e00b      	b.n	8009fce <HAL_RCC_OscConfig+0x32a>
 8009fb6:	4b71      	ldr	r3, [pc, #452]	; (800a17c <HAL_RCC_OscConfig+0x4d8>)
 8009fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fba:	4a70      	ldr	r2, [pc, #448]	; (800a17c <HAL_RCC_OscConfig+0x4d8>)
 8009fbc:	f023 0301 	bic.w	r3, r3, #1
 8009fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8009fc2:	4b6e      	ldr	r3, [pc, #440]	; (800a17c <HAL_RCC_OscConfig+0x4d8>)
 8009fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fc6:	4a6d      	ldr	r2, [pc, #436]	; (800a17c <HAL_RCC_OscConfig+0x4d8>)
 8009fc8:	f023 0304 	bic.w	r3, r3, #4
 8009fcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d015      	beq.n	800a002 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fd6:	f7fb f84f 	bl	8005078 <HAL_GetTick>
 8009fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fdc:	e00a      	b.n	8009ff4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009fde:	f7fb f84b 	bl	8005078 <HAL_GetTick>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d901      	bls.n	8009ff4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	e0bc      	b.n	800a16e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ff4:	4b61      	ldr	r3, [pc, #388]	; (800a17c <HAL_RCC_OscConfig+0x4d8>)
 8009ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff8:	f003 0302 	and.w	r3, r3, #2
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d0ee      	beq.n	8009fde <HAL_RCC_OscConfig+0x33a>
 800a000:	e014      	b.n	800a02c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a002:	f7fb f839 	bl	8005078 <HAL_GetTick>
 800a006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a008:	e00a      	b.n	800a020 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a00a:	f7fb f835 	bl	8005078 <HAL_GetTick>
 800a00e:	4602      	mov	r2, r0
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	f241 3288 	movw	r2, #5000	; 0x1388
 800a018:	4293      	cmp	r3, r2
 800a01a:	d901      	bls.n	800a020 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a01c:	2303      	movs	r3, #3
 800a01e:	e0a6      	b.n	800a16e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a020:	4b56      	ldr	r3, [pc, #344]	; (800a17c <HAL_RCC_OscConfig+0x4d8>)
 800a022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a024:	f003 0302 	and.w	r3, r3, #2
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1ee      	bne.n	800a00a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a02c:	7dfb      	ldrb	r3, [r7, #23]
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d105      	bne.n	800a03e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a032:	4b52      	ldr	r3, [pc, #328]	; (800a17c <HAL_RCC_OscConfig+0x4d8>)
 800a034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a036:	4a51      	ldr	r2, [pc, #324]	; (800a17c <HAL_RCC_OscConfig+0x4d8>)
 800a038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a03c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	699b      	ldr	r3, [r3, #24]
 800a042:	2b00      	cmp	r3, #0
 800a044:	f000 8092 	beq.w	800a16c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a048:	4b4c      	ldr	r3, [pc, #304]	; (800a17c <HAL_RCC_OscConfig+0x4d8>)
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	f003 030c 	and.w	r3, r3, #12
 800a050:	2b08      	cmp	r3, #8
 800a052:	d05c      	beq.n	800a10e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	699b      	ldr	r3, [r3, #24]
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d141      	bne.n	800a0e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a05c:	4b48      	ldr	r3, [pc, #288]	; (800a180 <HAL_RCC_OscConfig+0x4dc>)
 800a05e:	2200      	movs	r2, #0
 800a060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a062:	f7fb f809 	bl	8005078 <HAL_GetTick>
 800a066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a068:	e008      	b.n	800a07c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a06a:	f7fb f805 	bl	8005078 <HAL_GetTick>
 800a06e:	4602      	mov	r2, r0
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	2b02      	cmp	r3, #2
 800a076:	d901      	bls.n	800a07c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a078:	2303      	movs	r3, #3
 800a07a:	e078      	b.n	800a16e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a07c:	4b3f      	ldr	r3, [pc, #252]	; (800a17c <HAL_RCC_OscConfig+0x4d8>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a084:	2b00      	cmp	r3, #0
 800a086:	d1f0      	bne.n	800a06a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	69da      	ldr	r2, [r3, #28]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a1b      	ldr	r3, [r3, #32]
 800a090:	431a      	orrs	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a096:	019b      	lsls	r3, r3, #6
 800a098:	431a      	orrs	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a09e:	085b      	lsrs	r3, r3, #1
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	041b      	lsls	r3, r3, #16
 800a0a4:	431a      	orrs	r2, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0aa:	061b      	lsls	r3, r3, #24
 800a0ac:	4933      	ldr	r1, [pc, #204]	; (800a17c <HAL_RCC_OscConfig+0x4d8>)
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a0b2:	4b33      	ldr	r3, [pc, #204]	; (800a180 <HAL_RCC_OscConfig+0x4dc>)
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0b8:	f7fa ffde 	bl	8005078 <HAL_GetTick>
 800a0bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a0be:	e008      	b.n	800a0d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a0c0:	f7fa ffda 	bl	8005078 <HAL_GetTick>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	1ad3      	subs	r3, r2, r3
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	d901      	bls.n	800a0d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	e04d      	b.n	800a16e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a0d2:	4b2a      	ldr	r3, [pc, #168]	; (800a17c <HAL_RCC_OscConfig+0x4d8>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d0f0      	beq.n	800a0c0 <HAL_RCC_OscConfig+0x41c>
 800a0de:	e045      	b.n	800a16c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0e0:	4b27      	ldr	r3, [pc, #156]	; (800a180 <HAL_RCC_OscConfig+0x4dc>)
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0e6:	f7fa ffc7 	bl	8005078 <HAL_GetTick>
 800a0ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0ec:	e008      	b.n	800a100 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a0ee:	f7fa ffc3 	bl	8005078 <HAL_GetTick>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d901      	bls.n	800a100 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	e036      	b.n	800a16e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a100:	4b1e      	ldr	r3, [pc, #120]	; (800a17c <HAL_RCC_OscConfig+0x4d8>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1f0      	bne.n	800a0ee <HAL_RCC_OscConfig+0x44a>
 800a10c:	e02e      	b.n	800a16c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	699b      	ldr	r3, [r3, #24]
 800a112:	2b01      	cmp	r3, #1
 800a114:	d101      	bne.n	800a11a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	e029      	b.n	800a16e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a11a:	4b18      	ldr	r3, [pc, #96]	; (800a17c <HAL_RCC_OscConfig+0x4d8>)
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	69db      	ldr	r3, [r3, #28]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d11c      	bne.n	800a168 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a138:	429a      	cmp	r2, r3
 800a13a:	d115      	bne.n	800a168 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a142:	4013      	ands	r3, r2
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a148:	4293      	cmp	r3, r2
 800a14a:	d10d      	bne.n	800a168 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a156:	429a      	cmp	r2, r3
 800a158:	d106      	bne.n	800a168 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a164:	429a      	cmp	r2, r3
 800a166:	d001      	beq.n	800a16c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	e000      	b.n	800a16e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3718      	adds	r7, #24
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	40007000 	.word	0x40007000
 800a17c:	40023800 	.word	0x40023800
 800a180:	42470060 	.word	0x42470060

0800a184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d101      	bne.n	800a198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	e0cc      	b.n	800a332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a198:	4b68      	ldr	r3, [pc, #416]	; (800a33c <HAL_RCC_ClockConfig+0x1b8>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f003 030f 	and.w	r3, r3, #15
 800a1a0:	683a      	ldr	r2, [r7, #0]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d90c      	bls.n	800a1c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1a6:	4b65      	ldr	r3, [pc, #404]	; (800a33c <HAL_RCC_ClockConfig+0x1b8>)
 800a1a8:	683a      	ldr	r2, [r7, #0]
 800a1aa:	b2d2      	uxtb	r2, r2
 800a1ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1ae:	4b63      	ldr	r3, [pc, #396]	; (800a33c <HAL_RCC_ClockConfig+0x1b8>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f003 030f 	and.w	r3, r3, #15
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d001      	beq.n	800a1c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e0b8      	b.n	800a332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 0302 	and.w	r3, r3, #2
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d020      	beq.n	800a20e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f003 0304 	and.w	r3, r3, #4
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d005      	beq.n	800a1e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a1d8:	4b59      	ldr	r3, [pc, #356]	; (800a340 <HAL_RCC_ClockConfig+0x1bc>)
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	4a58      	ldr	r2, [pc, #352]	; (800a340 <HAL_RCC_ClockConfig+0x1bc>)
 800a1de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a1e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 0308 	and.w	r3, r3, #8
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d005      	beq.n	800a1fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a1f0:	4b53      	ldr	r3, [pc, #332]	; (800a340 <HAL_RCC_ClockConfig+0x1bc>)
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	4a52      	ldr	r2, [pc, #328]	; (800a340 <HAL_RCC_ClockConfig+0x1bc>)
 800a1f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a1fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1fc:	4b50      	ldr	r3, [pc, #320]	; (800a340 <HAL_RCC_ClockConfig+0x1bc>)
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	494d      	ldr	r1, [pc, #308]	; (800a340 <HAL_RCC_ClockConfig+0x1bc>)
 800a20a:	4313      	orrs	r3, r2
 800a20c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 0301 	and.w	r3, r3, #1
 800a216:	2b00      	cmp	r3, #0
 800a218:	d044      	beq.n	800a2a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d107      	bne.n	800a232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a222:	4b47      	ldr	r3, [pc, #284]	; (800a340 <HAL_RCC_ClockConfig+0x1bc>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d119      	bne.n	800a262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e07f      	b.n	800a332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	2b02      	cmp	r3, #2
 800a238:	d003      	beq.n	800a242 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a23e:	2b03      	cmp	r3, #3
 800a240:	d107      	bne.n	800a252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a242:	4b3f      	ldr	r3, [pc, #252]	; (800a340 <HAL_RCC_ClockConfig+0x1bc>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d109      	bne.n	800a262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e06f      	b.n	800a332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a252:	4b3b      	ldr	r3, [pc, #236]	; (800a340 <HAL_RCC_ClockConfig+0x1bc>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 0302 	and.w	r3, r3, #2
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d101      	bne.n	800a262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	e067      	b.n	800a332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a262:	4b37      	ldr	r3, [pc, #220]	; (800a340 <HAL_RCC_ClockConfig+0x1bc>)
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	f023 0203 	bic.w	r2, r3, #3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	4934      	ldr	r1, [pc, #208]	; (800a340 <HAL_RCC_ClockConfig+0x1bc>)
 800a270:	4313      	orrs	r3, r2
 800a272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a274:	f7fa ff00 	bl	8005078 <HAL_GetTick>
 800a278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a27a:	e00a      	b.n	800a292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a27c:	f7fa fefc 	bl	8005078 <HAL_GetTick>
 800a280:	4602      	mov	r2, r0
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	1ad3      	subs	r3, r2, r3
 800a286:	f241 3288 	movw	r2, #5000	; 0x1388
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d901      	bls.n	800a292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a28e:	2303      	movs	r3, #3
 800a290:	e04f      	b.n	800a332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a292:	4b2b      	ldr	r3, [pc, #172]	; (800a340 <HAL_RCC_ClockConfig+0x1bc>)
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	f003 020c 	and.w	r2, r3, #12
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d1eb      	bne.n	800a27c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a2a4:	4b25      	ldr	r3, [pc, #148]	; (800a33c <HAL_RCC_ClockConfig+0x1b8>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 030f 	and.w	r3, r3, #15
 800a2ac:	683a      	ldr	r2, [r7, #0]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d20c      	bcs.n	800a2cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2b2:	4b22      	ldr	r3, [pc, #136]	; (800a33c <HAL_RCC_ClockConfig+0x1b8>)
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	b2d2      	uxtb	r2, r2
 800a2b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2ba:	4b20      	ldr	r3, [pc, #128]	; (800a33c <HAL_RCC_ClockConfig+0x1b8>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f003 030f 	and.w	r3, r3, #15
 800a2c2:	683a      	ldr	r2, [r7, #0]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d001      	beq.n	800a2cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e032      	b.n	800a332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 0304 	and.w	r3, r3, #4
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d008      	beq.n	800a2ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a2d8:	4b19      	ldr	r3, [pc, #100]	; (800a340 <HAL_RCC_ClockConfig+0x1bc>)
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	4916      	ldr	r1, [pc, #88]	; (800a340 <HAL_RCC_ClockConfig+0x1bc>)
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 0308 	and.w	r3, r3, #8
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d009      	beq.n	800a30a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a2f6:	4b12      	ldr	r3, [pc, #72]	; (800a340 <HAL_RCC_ClockConfig+0x1bc>)
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	00db      	lsls	r3, r3, #3
 800a304:	490e      	ldr	r1, [pc, #56]	; (800a340 <HAL_RCC_ClockConfig+0x1bc>)
 800a306:	4313      	orrs	r3, r2
 800a308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a30a:	f000 f821 	bl	800a350 <HAL_RCC_GetSysClockFreq>
 800a30e:	4601      	mov	r1, r0
 800a310:	4b0b      	ldr	r3, [pc, #44]	; (800a340 <HAL_RCC_ClockConfig+0x1bc>)
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	091b      	lsrs	r3, r3, #4
 800a316:	f003 030f 	and.w	r3, r3, #15
 800a31a:	4a0a      	ldr	r2, [pc, #40]	; (800a344 <HAL_RCC_ClockConfig+0x1c0>)
 800a31c:	5cd3      	ldrb	r3, [r2, r3]
 800a31e:	fa21 f303 	lsr.w	r3, r1, r3
 800a322:	4a09      	ldr	r2, [pc, #36]	; (800a348 <HAL_RCC_ClockConfig+0x1c4>)
 800a324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a326:	4b09      	ldr	r3, [pc, #36]	; (800a34c <HAL_RCC_ClockConfig+0x1c8>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7f7 f9b2 	bl	8001694 <HAL_InitTick>

  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	40023c00 	.word	0x40023c00
 800a340:	40023800 	.word	0x40023800
 800a344:	0800ff44 	.word	0x0800ff44
 800a348:	20000008 	.word	0x20000008
 800a34c:	2000000c 	.word	0x2000000c

0800a350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a350:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a352:	b085      	sub	sp, #20
 800a354:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a356:	2300      	movs	r3, #0
 800a358:	607b      	str	r3, [r7, #4]
 800a35a:	2300      	movs	r3, #0
 800a35c:	60fb      	str	r3, [r7, #12]
 800a35e:	2300      	movs	r3, #0
 800a360:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a362:	2300      	movs	r3, #0
 800a364:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a366:	4b63      	ldr	r3, [pc, #396]	; (800a4f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	f003 030c 	and.w	r3, r3, #12
 800a36e:	2b04      	cmp	r3, #4
 800a370:	d007      	beq.n	800a382 <HAL_RCC_GetSysClockFreq+0x32>
 800a372:	2b08      	cmp	r3, #8
 800a374:	d008      	beq.n	800a388 <HAL_RCC_GetSysClockFreq+0x38>
 800a376:	2b00      	cmp	r3, #0
 800a378:	f040 80b4 	bne.w	800a4e4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a37c:	4b5e      	ldr	r3, [pc, #376]	; (800a4f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a37e:	60bb      	str	r3, [r7, #8]
       break;
 800a380:	e0b3      	b.n	800a4ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a382:	4b5e      	ldr	r3, [pc, #376]	; (800a4fc <HAL_RCC_GetSysClockFreq+0x1ac>)
 800a384:	60bb      	str	r3, [r7, #8]
      break;
 800a386:	e0b0      	b.n	800a4ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a388:	4b5a      	ldr	r3, [pc, #360]	; (800a4f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a390:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a392:	4b58      	ldr	r3, [pc, #352]	; (800a4f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d04a      	beq.n	800a434 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a39e:	4b55      	ldr	r3, [pc, #340]	; (800a4f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	099b      	lsrs	r3, r3, #6
 800a3a4:	f04f 0400 	mov.w	r4, #0
 800a3a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a3ac:	f04f 0200 	mov.w	r2, #0
 800a3b0:	ea03 0501 	and.w	r5, r3, r1
 800a3b4:	ea04 0602 	and.w	r6, r4, r2
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	4632      	mov	r2, r6
 800a3bc:	f04f 0300 	mov.w	r3, #0
 800a3c0:	f04f 0400 	mov.w	r4, #0
 800a3c4:	0154      	lsls	r4, r2, #5
 800a3c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a3ca:	014b      	lsls	r3, r1, #5
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	4622      	mov	r2, r4
 800a3d0:	1b49      	subs	r1, r1, r5
 800a3d2:	eb62 0206 	sbc.w	r2, r2, r6
 800a3d6:	f04f 0300 	mov.w	r3, #0
 800a3da:	f04f 0400 	mov.w	r4, #0
 800a3de:	0194      	lsls	r4, r2, #6
 800a3e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a3e4:	018b      	lsls	r3, r1, #6
 800a3e6:	1a5b      	subs	r3, r3, r1
 800a3e8:	eb64 0402 	sbc.w	r4, r4, r2
 800a3ec:	f04f 0100 	mov.w	r1, #0
 800a3f0:	f04f 0200 	mov.w	r2, #0
 800a3f4:	00e2      	lsls	r2, r4, #3
 800a3f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a3fa:	00d9      	lsls	r1, r3, #3
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	4614      	mov	r4, r2
 800a400:	195b      	adds	r3, r3, r5
 800a402:	eb44 0406 	adc.w	r4, r4, r6
 800a406:	f04f 0100 	mov.w	r1, #0
 800a40a:	f04f 0200 	mov.w	r2, #0
 800a40e:	0262      	lsls	r2, r4, #9
 800a410:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800a414:	0259      	lsls	r1, r3, #9
 800a416:	460b      	mov	r3, r1
 800a418:	4614      	mov	r4, r2
 800a41a:	4618      	mov	r0, r3
 800a41c:	4621      	mov	r1, r4
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f04f 0400 	mov.w	r4, #0
 800a424:	461a      	mov	r2, r3
 800a426:	4623      	mov	r3, r4
 800a428:	f7f5 feda 	bl	80001e0 <__aeabi_uldivmod>
 800a42c:	4603      	mov	r3, r0
 800a42e:	460c      	mov	r4, r1
 800a430:	60fb      	str	r3, [r7, #12]
 800a432:	e049      	b.n	800a4c8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a434:	4b2f      	ldr	r3, [pc, #188]	; (800a4f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	099b      	lsrs	r3, r3, #6
 800a43a:	f04f 0400 	mov.w	r4, #0
 800a43e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a442:	f04f 0200 	mov.w	r2, #0
 800a446:	ea03 0501 	and.w	r5, r3, r1
 800a44a:	ea04 0602 	and.w	r6, r4, r2
 800a44e:	4629      	mov	r1, r5
 800a450:	4632      	mov	r2, r6
 800a452:	f04f 0300 	mov.w	r3, #0
 800a456:	f04f 0400 	mov.w	r4, #0
 800a45a:	0154      	lsls	r4, r2, #5
 800a45c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a460:	014b      	lsls	r3, r1, #5
 800a462:	4619      	mov	r1, r3
 800a464:	4622      	mov	r2, r4
 800a466:	1b49      	subs	r1, r1, r5
 800a468:	eb62 0206 	sbc.w	r2, r2, r6
 800a46c:	f04f 0300 	mov.w	r3, #0
 800a470:	f04f 0400 	mov.w	r4, #0
 800a474:	0194      	lsls	r4, r2, #6
 800a476:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a47a:	018b      	lsls	r3, r1, #6
 800a47c:	1a5b      	subs	r3, r3, r1
 800a47e:	eb64 0402 	sbc.w	r4, r4, r2
 800a482:	f04f 0100 	mov.w	r1, #0
 800a486:	f04f 0200 	mov.w	r2, #0
 800a48a:	00e2      	lsls	r2, r4, #3
 800a48c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a490:	00d9      	lsls	r1, r3, #3
 800a492:	460b      	mov	r3, r1
 800a494:	4614      	mov	r4, r2
 800a496:	195b      	adds	r3, r3, r5
 800a498:	eb44 0406 	adc.w	r4, r4, r6
 800a49c:	f04f 0100 	mov.w	r1, #0
 800a4a0:	f04f 0200 	mov.w	r2, #0
 800a4a4:	02a2      	lsls	r2, r4, #10
 800a4a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a4aa:	0299      	lsls	r1, r3, #10
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	4614      	mov	r4, r2
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	4621      	mov	r1, r4
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f04f 0400 	mov.w	r4, #0
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	4623      	mov	r3, r4
 800a4be:	f7f5 fe8f 	bl	80001e0 <__aeabi_uldivmod>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	460c      	mov	r4, r1
 800a4c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a4c8:	4b0a      	ldr	r3, [pc, #40]	; (800a4f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	0c1b      	lsrs	r3, r3, #16
 800a4ce:	f003 0303 	and.w	r3, r3, #3
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4e0:	60bb      	str	r3, [r7, #8]
      break;
 800a4e2:	e002      	b.n	800a4ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a4e4:	4b04      	ldr	r3, [pc, #16]	; (800a4f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a4e6:	60bb      	str	r3, [r7, #8]
      break;
 800a4e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a4ea:	68bb      	ldr	r3, [r7, #8]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3714      	adds	r7, #20
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4f4:	40023800 	.word	0x40023800
 800a4f8:	00f42400 	.word	0x00f42400
 800a4fc:	007a1200 	.word	0x007a1200

0800a500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a500:	b480      	push	{r7}
 800a502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a504:	4b03      	ldr	r3, [pc, #12]	; (800a514 <HAL_RCC_GetHCLKFreq+0x14>)
 800a506:	681b      	ldr	r3, [r3, #0]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	20000008 	.word	0x20000008

0800a518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a51c:	f7ff fff0 	bl	800a500 <HAL_RCC_GetHCLKFreq>
 800a520:	4601      	mov	r1, r0
 800a522:	4b05      	ldr	r3, [pc, #20]	; (800a538 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	0a9b      	lsrs	r3, r3, #10
 800a528:	f003 0307 	and.w	r3, r3, #7
 800a52c:	4a03      	ldr	r2, [pc, #12]	; (800a53c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a52e:	5cd3      	ldrb	r3, [r2, r3]
 800a530:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a534:	4618      	mov	r0, r3
 800a536:	bd80      	pop	{r7, pc}
 800a538:	40023800 	.word	0x40023800
 800a53c:	0800ff54 	.word	0x0800ff54

0800a540 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	220f      	movs	r2, #15
 800a54e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a550:	4b12      	ldr	r3, [pc, #72]	; (800a59c <HAL_RCC_GetClockConfig+0x5c>)
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	f003 0203 	and.w	r2, r3, #3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a55c:	4b0f      	ldr	r3, [pc, #60]	; (800a59c <HAL_RCC_GetClockConfig+0x5c>)
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a568:	4b0c      	ldr	r3, [pc, #48]	; (800a59c <HAL_RCC_GetClockConfig+0x5c>)
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a574:	4b09      	ldr	r3, [pc, #36]	; (800a59c <HAL_RCC_GetClockConfig+0x5c>)
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	08db      	lsrs	r3, r3, #3
 800a57a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a582:	4b07      	ldr	r3, [pc, #28]	; (800a5a0 <HAL_RCC_GetClockConfig+0x60>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 020f 	and.w	r2, r3, #15
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	601a      	str	r2, [r3, #0]
}
 800a58e:	bf00      	nop
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	40023800 	.word	0x40023800
 800a5a0:	40023c00 	.word	0x40023c00

0800a5a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d101      	bne.n	800a5b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e01d      	b.n	800a5f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d106      	bne.n	800a5d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f815 	bl	800a5fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	3304      	adds	r3, #4
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	4610      	mov	r0, r2
 800a5e4:	f000 f968 	bl	800a8b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a5fa:	b480      	push	{r7}
 800a5fc:	b083      	sub	sp, #12
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a602:	bf00      	nop
 800a604:	370c      	adds	r7, #12
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr

0800a60e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a60e:	b480      	push	{r7}
 800a610:	b085      	sub	sp, #20
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	68da      	ldr	r2, [r3, #12]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f042 0201 	orr.w	r2, r2, #1
 800a624:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	f003 0307 	and.w	r3, r3, #7
 800a630:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2b06      	cmp	r3, #6
 800a636:	d007      	beq.n	800a648 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f042 0201 	orr.w	r2, r2, #1
 800a646:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3714      	adds	r7, #20
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr

0800a656 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a656:	b580      	push	{r7, lr}
 800a658:	b082      	sub	sp, #8
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	f003 0302 	and.w	r3, r3, #2
 800a668:	2b02      	cmp	r3, #2
 800a66a:	d122      	bne.n	800a6b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	f003 0302 	and.w	r3, r3, #2
 800a676:	2b02      	cmp	r3, #2
 800a678:	d11b      	bne.n	800a6b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f06f 0202 	mvn.w	r2, #2
 800a682:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2201      	movs	r2, #1
 800a688:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	699b      	ldr	r3, [r3, #24]
 800a690:	f003 0303 	and.w	r3, r3, #3
 800a694:	2b00      	cmp	r3, #0
 800a696:	d003      	beq.n	800a6a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 f8ee 	bl	800a87a <HAL_TIM_IC_CaptureCallback>
 800a69e:	e005      	b.n	800a6ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 f8e0 	bl	800a866 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f8f1 	bl	800a88e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	691b      	ldr	r3, [r3, #16]
 800a6b8:	f003 0304 	and.w	r3, r3, #4
 800a6bc:	2b04      	cmp	r3, #4
 800a6be:	d122      	bne.n	800a706 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	f003 0304 	and.w	r3, r3, #4
 800a6ca:	2b04      	cmp	r3, #4
 800a6cc:	d11b      	bne.n	800a706 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f06f 0204 	mvn.w	r2, #4
 800a6d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2202      	movs	r2, #2
 800a6dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	699b      	ldr	r3, [r3, #24]
 800a6e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d003      	beq.n	800a6f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 f8c4 	bl	800a87a <HAL_TIM_IC_CaptureCallback>
 800a6f2:	e005      	b.n	800a700 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 f8b6 	bl	800a866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f8c7 	bl	800a88e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	f003 0308 	and.w	r3, r3, #8
 800a710:	2b08      	cmp	r3, #8
 800a712:	d122      	bne.n	800a75a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	f003 0308 	and.w	r3, r3, #8
 800a71e:	2b08      	cmp	r3, #8
 800a720:	d11b      	bne.n	800a75a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f06f 0208 	mvn.w	r2, #8
 800a72a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2204      	movs	r2, #4
 800a730:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	69db      	ldr	r3, [r3, #28]
 800a738:	f003 0303 	and.w	r3, r3, #3
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d003      	beq.n	800a748 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f89a 	bl	800a87a <HAL_TIM_IC_CaptureCallback>
 800a746:	e005      	b.n	800a754 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 f88c 	bl	800a866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f89d 	bl	800a88e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	691b      	ldr	r3, [r3, #16]
 800a760:	f003 0310 	and.w	r3, r3, #16
 800a764:	2b10      	cmp	r3, #16
 800a766:	d122      	bne.n	800a7ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	68db      	ldr	r3, [r3, #12]
 800a76e:	f003 0310 	and.w	r3, r3, #16
 800a772:	2b10      	cmp	r3, #16
 800a774:	d11b      	bne.n	800a7ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f06f 0210 	mvn.w	r2, #16
 800a77e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2208      	movs	r2, #8
 800a784:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	69db      	ldr	r3, [r3, #28]
 800a78c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a790:	2b00      	cmp	r3, #0
 800a792:	d003      	beq.n	800a79c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 f870 	bl	800a87a <HAL_TIM_IC_CaptureCallback>
 800a79a:	e005      	b.n	800a7a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 f862 	bl	800a866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 f873 	bl	800a88e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	691b      	ldr	r3, [r3, #16]
 800a7b4:	f003 0301 	and.w	r3, r3, #1
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d10e      	bne.n	800a7da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	f003 0301 	and.w	r3, r3, #1
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d107      	bne.n	800a7da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f06f 0201 	mvn.w	r2, #1
 800a7d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f7f6 f997 	bl	8000b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7e4:	2b80      	cmp	r3, #128	; 0x80
 800a7e6:	d10e      	bne.n	800a806 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7f2:	2b80      	cmp	r3, #128	; 0x80
 800a7f4:	d107      	bne.n	800a806 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a7fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f903 	bl	800aa0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a810:	2b40      	cmp	r3, #64	; 0x40
 800a812:	d10e      	bne.n	800a832 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a81e:	2b40      	cmp	r3, #64	; 0x40
 800a820:	d107      	bne.n	800a832 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a82a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f838 	bl	800a8a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	691b      	ldr	r3, [r3, #16]
 800a838:	f003 0320 	and.w	r3, r3, #32
 800a83c:	2b20      	cmp	r3, #32
 800a83e:	d10e      	bne.n	800a85e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	f003 0320 	and.w	r3, r3, #32
 800a84a:	2b20      	cmp	r3, #32
 800a84c:	d107      	bne.n	800a85e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f06f 0220 	mvn.w	r2, #32
 800a856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 f8cd 	bl	800a9f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a85e:	bf00      	nop
 800a860:	3708      	adds	r7, #8
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a866:	b480      	push	{r7}
 800a868:	b083      	sub	sp, #12
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a86e:	bf00      	nop
 800a870:	370c      	adds	r7, #12
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b083      	sub	sp, #12
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a882:	bf00      	nop
 800a884:	370c      	adds	r7, #12
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr

0800a88e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a88e:	b480      	push	{r7}
 800a890:	b083      	sub	sp, #12
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a896:	bf00      	nop
 800a898:	370c      	adds	r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr

0800a8a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	b083      	sub	sp, #12
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8aa:	bf00      	nop
 800a8ac:	370c      	adds	r7, #12
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
	...

0800a8b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a40      	ldr	r2, [pc, #256]	; (800a9cc <TIM_Base_SetConfig+0x114>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d013      	beq.n	800a8f8 <TIM_Base_SetConfig+0x40>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8d6:	d00f      	beq.n	800a8f8 <TIM_Base_SetConfig+0x40>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a3d      	ldr	r2, [pc, #244]	; (800a9d0 <TIM_Base_SetConfig+0x118>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d00b      	beq.n	800a8f8 <TIM_Base_SetConfig+0x40>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a3c      	ldr	r2, [pc, #240]	; (800a9d4 <TIM_Base_SetConfig+0x11c>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d007      	beq.n	800a8f8 <TIM_Base_SetConfig+0x40>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	4a3b      	ldr	r2, [pc, #236]	; (800a9d8 <TIM_Base_SetConfig+0x120>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d003      	beq.n	800a8f8 <TIM_Base_SetConfig+0x40>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a3a      	ldr	r2, [pc, #232]	; (800a9dc <TIM_Base_SetConfig+0x124>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d108      	bne.n	800a90a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	4313      	orrs	r3, r2
 800a908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4a2f      	ldr	r2, [pc, #188]	; (800a9cc <TIM_Base_SetConfig+0x114>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d02b      	beq.n	800a96a <TIM_Base_SetConfig+0xb2>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a918:	d027      	beq.n	800a96a <TIM_Base_SetConfig+0xb2>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4a2c      	ldr	r2, [pc, #176]	; (800a9d0 <TIM_Base_SetConfig+0x118>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d023      	beq.n	800a96a <TIM_Base_SetConfig+0xb2>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4a2b      	ldr	r2, [pc, #172]	; (800a9d4 <TIM_Base_SetConfig+0x11c>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d01f      	beq.n	800a96a <TIM_Base_SetConfig+0xb2>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a2a      	ldr	r2, [pc, #168]	; (800a9d8 <TIM_Base_SetConfig+0x120>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d01b      	beq.n	800a96a <TIM_Base_SetConfig+0xb2>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a29      	ldr	r2, [pc, #164]	; (800a9dc <TIM_Base_SetConfig+0x124>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d017      	beq.n	800a96a <TIM_Base_SetConfig+0xb2>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a28      	ldr	r2, [pc, #160]	; (800a9e0 <TIM_Base_SetConfig+0x128>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d013      	beq.n	800a96a <TIM_Base_SetConfig+0xb2>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a27      	ldr	r2, [pc, #156]	; (800a9e4 <TIM_Base_SetConfig+0x12c>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d00f      	beq.n	800a96a <TIM_Base_SetConfig+0xb2>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a26      	ldr	r2, [pc, #152]	; (800a9e8 <TIM_Base_SetConfig+0x130>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d00b      	beq.n	800a96a <TIM_Base_SetConfig+0xb2>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a25      	ldr	r2, [pc, #148]	; (800a9ec <TIM_Base_SetConfig+0x134>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d007      	beq.n	800a96a <TIM_Base_SetConfig+0xb2>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a24      	ldr	r2, [pc, #144]	; (800a9f0 <TIM_Base_SetConfig+0x138>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d003      	beq.n	800a96a <TIM_Base_SetConfig+0xb2>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a23      	ldr	r2, [pc, #140]	; (800a9f4 <TIM_Base_SetConfig+0x13c>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d108      	bne.n	800a97c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	4313      	orrs	r3, r2
 800a97a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	4313      	orrs	r3, r2
 800a988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	689a      	ldr	r2, [r3, #8]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4a0a      	ldr	r2, [pc, #40]	; (800a9cc <TIM_Base_SetConfig+0x114>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d003      	beq.n	800a9b0 <TIM_Base_SetConfig+0xf8>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4a0c      	ldr	r2, [pc, #48]	; (800a9dc <TIM_Base_SetConfig+0x124>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d103      	bne.n	800a9b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	691a      	ldr	r2, [r3, #16]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	615a      	str	r2, [r3, #20]
}
 800a9be:	bf00      	nop
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	40010000 	.word	0x40010000
 800a9d0:	40000400 	.word	0x40000400
 800a9d4:	40000800 	.word	0x40000800
 800a9d8:	40000c00 	.word	0x40000c00
 800a9dc:	40010400 	.word	0x40010400
 800a9e0:	40014000 	.word	0x40014000
 800a9e4:	40014400 	.word	0x40014400
 800a9e8:	40014800 	.word	0x40014800
 800a9ec:	40001800 	.word	0x40001800
 800a9f0:	40001c00 	.word	0x40001c00
 800a9f4:	40002000 	.word	0x40002000

0800a9f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa00:	bf00      	nop
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa14:	bf00      	nop
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa20:	b084      	sub	sp, #16
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b084      	sub	sp, #16
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	f107 001c 	add.w	r0, r7, #28
 800aa2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d122      	bne.n	800aa7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800aa4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aa60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d105      	bne.n	800aa72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f001 fac6 	bl	800c004 <USB_CoreReset>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	73fb      	strb	r3, [r7, #15]
 800aa7c:	e01a      	b.n	800aab4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f001 faba 	bl	800c004 <USB_CoreReset>
 800aa90:	4603      	mov	r3, r0
 800aa92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800aa94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d106      	bne.n	800aaa8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	639a      	str	r2, [r3, #56]	; 0x38
 800aaa6:	e005      	b.n	800aab4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800aab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d10b      	bne.n	800aad2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	f043 0206 	orr.w	r2, r3, #6
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	f043 0220 	orr.w	r2, r3, #32
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aade:	b004      	add	sp, #16
 800aae0:	4770      	bx	lr
	...

0800aae4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b087      	sub	sp, #28
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	4613      	mov	r3, r2
 800aaf0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800aaf2:	79fb      	ldrb	r3, [r7, #7]
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	d165      	bne.n	800abc4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	4a41      	ldr	r2, [pc, #260]	; (800ac00 <USB_SetTurnaroundTime+0x11c>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d906      	bls.n	800ab0e <USB_SetTurnaroundTime+0x2a>
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	4a40      	ldr	r2, [pc, #256]	; (800ac04 <USB_SetTurnaroundTime+0x120>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d802      	bhi.n	800ab0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ab08:	230f      	movs	r3, #15
 800ab0a:	617b      	str	r3, [r7, #20]
 800ab0c:	e062      	b.n	800abd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	4a3c      	ldr	r2, [pc, #240]	; (800ac04 <USB_SetTurnaroundTime+0x120>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d906      	bls.n	800ab24 <USB_SetTurnaroundTime+0x40>
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	4a3b      	ldr	r2, [pc, #236]	; (800ac08 <USB_SetTurnaroundTime+0x124>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d802      	bhi.n	800ab24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ab1e:	230e      	movs	r3, #14
 800ab20:	617b      	str	r3, [r7, #20]
 800ab22:	e057      	b.n	800abd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	4a38      	ldr	r2, [pc, #224]	; (800ac08 <USB_SetTurnaroundTime+0x124>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d906      	bls.n	800ab3a <USB_SetTurnaroundTime+0x56>
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	4a37      	ldr	r2, [pc, #220]	; (800ac0c <USB_SetTurnaroundTime+0x128>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d802      	bhi.n	800ab3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ab34:	230d      	movs	r3, #13
 800ab36:	617b      	str	r3, [r7, #20]
 800ab38:	e04c      	b.n	800abd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	4a33      	ldr	r2, [pc, #204]	; (800ac0c <USB_SetTurnaroundTime+0x128>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d906      	bls.n	800ab50 <USB_SetTurnaroundTime+0x6c>
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	4a32      	ldr	r2, [pc, #200]	; (800ac10 <USB_SetTurnaroundTime+0x12c>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d802      	bhi.n	800ab50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ab4a:	230c      	movs	r3, #12
 800ab4c:	617b      	str	r3, [r7, #20]
 800ab4e:	e041      	b.n	800abd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	4a2f      	ldr	r2, [pc, #188]	; (800ac10 <USB_SetTurnaroundTime+0x12c>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d906      	bls.n	800ab66 <USB_SetTurnaroundTime+0x82>
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	4a2e      	ldr	r2, [pc, #184]	; (800ac14 <USB_SetTurnaroundTime+0x130>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d802      	bhi.n	800ab66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ab60:	230b      	movs	r3, #11
 800ab62:	617b      	str	r3, [r7, #20]
 800ab64:	e036      	b.n	800abd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	4a2a      	ldr	r2, [pc, #168]	; (800ac14 <USB_SetTurnaroundTime+0x130>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d906      	bls.n	800ab7c <USB_SetTurnaroundTime+0x98>
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	4a29      	ldr	r2, [pc, #164]	; (800ac18 <USB_SetTurnaroundTime+0x134>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d802      	bhi.n	800ab7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ab76:	230a      	movs	r3, #10
 800ab78:	617b      	str	r3, [r7, #20]
 800ab7a:	e02b      	b.n	800abd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	4a26      	ldr	r2, [pc, #152]	; (800ac18 <USB_SetTurnaroundTime+0x134>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d906      	bls.n	800ab92 <USB_SetTurnaroundTime+0xae>
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	4a25      	ldr	r2, [pc, #148]	; (800ac1c <USB_SetTurnaroundTime+0x138>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d802      	bhi.n	800ab92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ab8c:	2309      	movs	r3, #9
 800ab8e:	617b      	str	r3, [r7, #20]
 800ab90:	e020      	b.n	800abd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	4a21      	ldr	r2, [pc, #132]	; (800ac1c <USB_SetTurnaroundTime+0x138>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d906      	bls.n	800aba8 <USB_SetTurnaroundTime+0xc4>
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	4a20      	ldr	r2, [pc, #128]	; (800ac20 <USB_SetTurnaroundTime+0x13c>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d802      	bhi.n	800aba8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800aba2:	2308      	movs	r3, #8
 800aba4:	617b      	str	r3, [r7, #20]
 800aba6:	e015      	b.n	800abd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	4a1d      	ldr	r2, [pc, #116]	; (800ac20 <USB_SetTurnaroundTime+0x13c>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d906      	bls.n	800abbe <USB_SetTurnaroundTime+0xda>
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	4a1c      	ldr	r2, [pc, #112]	; (800ac24 <USB_SetTurnaroundTime+0x140>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d802      	bhi.n	800abbe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800abb8:	2307      	movs	r3, #7
 800abba:	617b      	str	r3, [r7, #20]
 800abbc:	e00a      	b.n	800abd4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800abbe:	2306      	movs	r3, #6
 800abc0:	617b      	str	r3, [r7, #20]
 800abc2:	e007      	b.n	800abd4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800abc4:	79fb      	ldrb	r3, [r7, #7]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d102      	bne.n	800abd0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800abca:	2309      	movs	r3, #9
 800abcc:	617b      	str	r3, [r7, #20]
 800abce:	e001      	b.n	800abd4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800abd0:	2309      	movs	r3, #9
 800abd2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	68da      	ldr	r2, [r3, #12]
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	029b      	lsls	r3, r3, #10
 800abe8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800abec:	431a      	orrs	r2, r3
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	371c      	adds	r7, #28
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	00d8acbf 	.word	0x00d8acbf
 800ac04:	00e4e1bf 	.word	0x00e4e1bf
 800ac08:	00f423ff 	.word	0x00f423ff
 800ac0c:	0106737f 	.word	0x0106737f
 800ac10:	011a499f 	.word	0x011a499f
 800ac14:	01312cff 	.word	0x01312cff
 800ac18:	014ca43f 	.word	0x014ca43f
 800ac1c:	016e35ff 	.word	0x016e35ff
 800ac20:	01a6ab1f 	.word	0x01a6ab1f
 800ac24:	01e847ff 	.word	0x01e847ff

0800ac28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	689b      	ldr	r3, [r3, #8]
 800ac34:	f043 0201 	orr.w	r2, r3, #1
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	370c      	adds	r7, #12
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac4a:	b480      	push	{r7}
 800ac4c:	b083      	sub	sp, #12
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	f023 0201 	bic.w	r2, r3, #1
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ac5e:	2300      	movs	r3, #0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	460b      	mov	r3, r1
 800ac76:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ac84:	78fb      	ldrb	r3, [r7, #3]
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d106      	bne.n	800ac98 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	68db      	ldr	r3, [r3, #12]
 800ac8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	60da      	str	r2, [r3, #12]
 800ac96:	e00b      	b.n	800acb0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ac98:	78fb      	ldrb	r3, [r7, #3]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d106      	bne.n	800acac <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	60da      	str	r2, [r3, #12]
 800acaa:	e001      	b.n	800acb0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800acac:	2301      	movs	r3, #1
 800acae:	e003      	b.n	800acb8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800acb0:	2032      	movs	r0, #50	; 0x32
 800acb2:	f7fa f9ed 	bl	8005090 <HAL_Delay>

  return HAL_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800acc0:	b084      	sub	sp, #16
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b086      	sub	sp, #24
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
 800acca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800acce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800acd2:	2300      	movs	r3, #0
 800acd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800acda:	2300      	movs	r3, #0
 800acdc:	613b      	str	r3, [r7, #16]
 800acde:	e009      	b.n	800acf4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	3340      	adds	r3, #64	; 0x40
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	4413      	add	r3, r2
 800acea:	2200      	movs	r2, #0
 800acec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	3301      	adds	r3, #1
 800acf2:	613b      	str	r3, [r7, #16]
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	2b0e      	cmp	r3, #14
 800acf8:	d9f2      	bls.n	800ace0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800acfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d11c      	bne.n	800ad3a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad0e:	f043 0302 	orr.w	r3, r3, #2
 800ad12:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad24:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad30:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	639a      	str	r2, [r3, #56]	; 0x38
 800ad38:	e00b      	b.n	800ad52 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad3e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad58:	461a      	mov	r2, r3
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad64:	4619      	mov	r1, r3
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	680b      	ldr	r3, [r1, #0]
 800ad70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ad72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d10c      	bne.n	800ad92 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ad78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d104      	bne.n	800ad88 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ad7e:	2100      	movs	r1, #0
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f949 	bl	800b018 <USB_SetDevSpeed>
 800ad86:	e008      	b.n	800ad9a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ad88:	2101      	movs	r1, #1
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 f944 	bl	800b018 <USB_SetDevSpeed>
 800ad90:	e003      	b.n	800ad9a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ad92:	2103      	movs	r1, #3
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 f93f 	bl	800b018 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ad9a:	2110      	movs	r1, #16
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 f8f3 	bl	800af88 <USB_FlushTxFifo>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d001      	beq.n	800adac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 f911 	bl	800afd4 <USB_FlushRxFifo>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d001      	beq.n	800adbc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800adb8:	2301      	movs	r3, #1
 800adba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adc2:	461a      	mov	r2, r3
 800adc4:	2300      	movs	r3, #0
 800adc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adce:	461a      	mov	r2, r3
 800add0:	2300      	movs	r3, #0
 800add2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adda:	461a      	mov	r2, r3
 800addc:	2300      	movs	r3, #0
 800adde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ade0:	2300      	movs	r3, #0
 800ade2:	613b      	str	r3, [r7, #16]
 800ade4:	e043      	b.n	800ae6e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	015a      	lsls	r2, r3, #5
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	4413      	add	r3, r2
 800adee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800adf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800adfc:	d118      	bne.n	800ae30 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d10a      	bne.n	800ae1a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	015a      	lsls	r2, r3, #5
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	4413      	add	r3, r2
 800ae0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae10:	461a      	mov	r2, r3
 800ae12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae16:	6013      	str	r3, [r2, #0]
 800ae18:	e013      	b.n	800ae42 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	015a      	lsls	r2, r3, #5
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	4413      	add	r3, r2
 800ae22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae26:	461a      	mov	r2, r3
 800ae28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ae2c:	6013      	str	r3, [r2, #0]
 800ae2e:	e008      	b.n	800ae42 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	015a      	lsls	r2, r3, #5
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	4413      	add	r3, r2
 800ae38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	2300      	movs	r3, #0
 800ae40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	015a      	lsls	r2, r3, #5
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	4413      	add	r3, r2
 800ae4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae4e:	461a      	mov	r2, r3
 800ae50:	2300      	movs	r3, #0
 800ae52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	015a      	lsls	r2, r3, #5
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae60:	461a      	mov	r2, r3
 800ae62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ae66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	613b      	str	r3, [r7, #16]
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae70:	693a      	ldr	r2, [r7, #16]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d3b7      	bcc.n	800ade6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae76:	2300      	movs	r3, #0
 800ae78:	613b      	str	r3, [r7, #16]
 800ae7a:	e043      	b.n	800af04 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	015a      	lsls	r2, r3, #5
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	4413      	add	r3, r2
 800ae84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae92:	d118      	bne.n	800aec6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10a      	bne.n	800aeb0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	015a      	lsls	r2, r3, #5
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	4413      	add	r3, r2
 800aea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea6:	461a      	mov	r2, r3
 800aea8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aeac:	6013      	str	r3, [r2, #0]
 800aeae:	e013      	b.n	800aed8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	015a      	lsls	r2, r3, #5
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aebc:	461a      	mov	r2, r3
 800aebe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aec2:	6013      	str	r3, [r2, #0]
 800aec4:	e008      	b.n	800aed8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	015a      	lsls	r2, r3, #5
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	4413      	add	r3, r2
 800aece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aed2:	461a      	mov	r2, r3
 800aed4:	2300      	movs	r3, #0
 800aed6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	015a      	lsls	r2, r3, #5
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	4413      	add	r3, r2
 800aee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aee4:	461a      	mov	r2, r3
 800aee6:	2300      	movs	r3, #0
 800aee8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	015a      	lsls	r2, r3, #5
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	4413      	add	r3, r2
 800aef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aef6:	461a      	mov	r2, r3
 800aef8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aefc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	3301      	adds	r3, #1
 800af02:	613b      	str	r3, [r7, #16]
 800af04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af06:	693a      	ldr	r2, [r7, #16]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d3b7      	bcc.n	800ae7c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af12:	691b      	ldr	r3, [r3, #16]
 800af14:	68fa      	ldr	r2, [r7, #12]
 800af16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800af2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800af2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af30:	2b00      	cmp	r3, #0
 800af32:	d105      	bne.n	800af40 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	699b      	ldr	r3, [r3, #24]
 800af38:	f043 0210 	orr.w	r2, r3, #16
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	699a      	ldr	r2, [r3, #24]
 800af44:	4b0f      	ldr	r3, [pc, #60]	; (800af84 <USB_DevInit+0x2c4>)
 800af46:	4313      	orrs	r3, r2
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800af4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d005      	beq.n	800af5e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	699b      	ldr	r3, [r3, #24]
 800af56:	f043 0208 	orr.w	r2, r3, #8
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800af5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af60:	2b01      	cmp	r3, #1
 800af62:	d107      	bne.n	800af74 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	699b      	ldr	r3, [r3, #24]
 800af68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af6c:	f043 0304 	orr.w	r3, r3, #4
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800af74:	7dfb      	ldrb	r3, [r7, #23]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3718      	adds	r7, #24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af80:	b004      	add	sp, #16
 800af82:	4770      	bx	lr
 800af84:	803c3800 	.word	0x803c3800

0800af88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800af92:	2300      	movs	r3, #0
 800af94:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	019b      	lsls	r3, r3, #6
 800af9a:	f043 0220 	orr.w	r2, r3, #32
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	3301      	adds	r3, #1
 800afa6:	60fb      	str	r3, [r7, #12]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	4a09      	ldr	r2, [pc, #36]	; (800afd0 <USB_FlushTxFifo+0x48>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d901      	bls.n	800afb4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800afb0:	2303      	movs	r3, #3
 800afb2:	e006      	b.n	800afc2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	f003 0320 	and.w	r3, r3, #32
 800afbc:	2b20      	cmp	r3, #32
 800afbe:	d0f0      	beq.n	800afa2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3714      	adds	r7, #20
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	00030d40 	.word	0x00030d40

0800afd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800afdc:	2300      	movs	r3, #0
 800afde:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2210      	movs	r2, #16
 800afe4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	3301      	adds	r3, #1
 800afea:	60fb      	str	r3, [r7, #12]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	4a09      	ldr	r2, [pc, #36]	; (800b014 <USB_FlushRxFifo+0x40>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d901      	bls.n	800aff8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800aff4:	2303      	movs	r3, #3
 800aff6:	e006      	b.n	800b006 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	691b      	ldr	r3, [r3, #16]
 800affc:	f003 0310 	and.w	r3, r3, #16
 800b000:	2b10      	cmp	r3, #16
 800b002:	d0f0      	beq.n	800afe6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3714      	adds	r7, #20
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop
 800b014:	00030d40 	.word	0x00030d40

0800b018 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	460b      	mov	r3, r1
 800b022:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	78fb      	ldrb	r3, [r7, #3]
 800b032:	68f9      	ldr	r1, [r7, #12]
 800b034:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b038:	4313      	orrs	r3, r2
 800b03a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3714      	adds	r7, #20
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b04a:	b480      	push	{r7}
 800b04c:	b087      	sub	sp, #28
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	f003 0306 	and.w	r3, r3, #6
 800b062:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d102      	bne.n	800b070 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b06a:	2300      	movs	r3, #0
 800b06c:	75fb      	strb	r3, [r7, #23]
 800b06e:	e00a      	b.n	800b086 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2b02      	cmp	r3, #2
 800b074:	d002      	beq.n	800b07c <USB_GetDevSpeed+0x32>
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2b06      	cmp	r3, #6
 800b07a:	d102      	bne.n	800b082 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b07c:	2302      	movs	r3, #2
 800b07e:	75fb      	strb	r3, [r7, #23]
 800b080:	e001      	b.n	800b086 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b082:	230f      	movs	r3, #15
 800b084:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b086:	7dfb      	ldrb	r3, [r7, #23]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	371c      	adds	r7, #28
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b094:	b480      	push	{r7}
 800b096:	b085      	sub	sp, #20
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	785b      	ldrb	r3, [r3, #1]
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d13a      	bne.n	800b126 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0b6:	69da      	ldr	r2, [r3, #28]
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	f003 030f 	and.w	r3, r3, #15
 800b0c0:	2101      	movs	r1, #1
 800b0c2:	fa01 f303 	lsl.w	r3, r1, r3
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	68f9      	ldr	r1, [r7, #12]
 800b0ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	015a      	lsls	r2, r3, #5
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	4413      	add	r3, r2
 800b0da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d155      	bne.n	800b194 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	015a      	lsls	r2, r3, #5
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	78db      	ldrb	r3, [r3, #3]
 800b102:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b104:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	059b      	lsls	r3, r3, #22
 800b10a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b10c:	4313      	orrs	r3, r2
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	0151      	lsls	r1, r2, #5
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	440a      	add	r2, r1
 800b116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b11a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b11e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b122:	6013      	str	r3, [r2, #0]
 800b124:	e036      	b.n	800b194 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b12c:	69da      	ldr	r2, [r3, #28]
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	f003 030f 	and.w	r3, r3, #15
 800b136:	2101      	movs	r1, #1
 800b138:	fa01 f303 	lsl.w	r3, r1, r3
 800b13c:	041b      	lsls	r3, r3, #16
 800b13e:	68f9      	ldr	r1, [r7, #12]
 800b140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b144:	4313      	orrs	r3, r2
 800b146:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	015a      	lsls	r2, r3, #5
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	4413      	add	r3, r2
 800b150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d11a      	bne.n	800b194 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	015a      	lsls	r2, r3, #5
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	4413      	add	r3, r2
 800b166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	78db      	ldrb	r3, [r3, #3]
 800b178:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b17a:	430b      	orrs	r3, r1
 800b17c:	4313      	orrs	r3, r2
 800b17e:	68ba      	ldr	r2, [r7, #8]
 800b180:	0151      	lsls	r1, r2, #5
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	440a      	add	r2, r1
 800b186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b18a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b18e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b192:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
	...

0800b1a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	785b      	ldrb	r3, [r3, #1]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d161      	bne.n	800b284 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	015a      	lsls	r2, r3, #5
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1d6:	d11f      	bne.n	800b218 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	015a      	lsls	r2, r3, #5
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	4413      	add	r3, r2
 800b1e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68ba      	ldr	r2, [r7, #8]
 800b1e8:	0151      	lsls	r1, r2, #5
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	440a      	add	r2, r1
 800b1ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b1f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	015a      	lsls	r2, r3, #5
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	4413      	add	r3, r2
 800b200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	68ba      	ldr	r2, [r7, #8]
 800b208:	0151      	lsls	r1, r2, #5
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	440a      	add	r2, r1
 800b20e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b212:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b216:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b21e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	f003 030f 	and.w	r3, r3, #15
 800b228:	2101      	movs	r1, #1
 800b22a:	fa01 f303 	lsl.w	r3, r1, r3
 800b22e:	b29b      	uxth	r3, r3
 800b230:	43db      	mvns	r3, r3
 800b232:	68f9      	ldr	r1, [r7, #12]
 800b234:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b238:	4013      	ands	r3, r2
 800b23a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b242:	69da      	ldr	r2, [r3, #28]
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	f003 030f 	and.w	r3, r3, #15
 800b24c:	2101      	movs	r1, #1
 800b24e:	fa01 f303 	lsl.w	r3, r1, r3
 800b252:	b29b      	uxth	r3, r3
 800b254:	43db      	mvns	r3, r3
 800b256:	68f9      	ldr	r1, [r7, #12]
 800b258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b25c:	4013      	ands	r3, r2
 800b25e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	015a      	lsls	r2, r3, #5
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	4413      	add	r3, r2
 800b268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	0159      	lsls	r1, r3, #5
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	440b      	add	r3, r1
 800b276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b27a:	4619      	mov	r1, r3
 800b27c:	4b35      	ldr	r3, [pc, #212]	; (800b354 <USB_DeactivateEndpoint+0x1b0>)
 800b27e:	4013      	ands	r3, r2
 800b280:	600b      	str	r3, [r1, #0]
 800b282:	e060      	b.n	800b346 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	015a      	lsls	r2, r3, #5
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	4413      	add	r3, r2
 800b28c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b29a:	d11f      	bne.n	800b2dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	015a      	lsls	r2, r3, #5
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	0151      	lsls	r1, r2, #5
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	440a      	add	r2, r1
 800b2b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b2ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	015a      	lsls	r2, r3, #5
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	0151      	lsls	r1, r2, #5
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	440a      	add	r2, r1
 800b2d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	f003 030f 	and.w	r3, r3, #15
 800b2ec:	2101      	movs	r1, #1
 800b2ee:	fa01 f303 	lsl.w	r3, r1, r3
 800b2f2:	041b      	lsls	r3, r3, #16
 800b2f4:	43db      	mvns	r3, r3
 800b2f6:	68f9      	ldr	r1, [r7, #12]
 800b2f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2fc:	4013      	ands	r3, r2
 800b2fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b306:	69da      	ldr	r2, [r3, #28]
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	f003 030f 	and.w	r3, r3, #15
 800b310:	2101      	movs	r1, #1
 800b312:	fa01 f303 	lsl.w	r3, r1, r3
 800b316:	041b      	lsls	r3, r3, #16
 800b318:	43db      	mvns	r3, r3
 800b31a:	68f9      	ldr	r1, [r7, #12]
 800b31c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b320:	4013      	ands	r3, r2
 800b322:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	015a      	lsls	r2, r3, #5
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	4413      	add	r3, r2
 800b32c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	0159      	lsls	r1, r3, #5
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	440b      	add	r3, r1
 800b33a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b33e:	4619      	mov	r1, r3
 800b340:	4b05      	ldr	r3, [pc, #20]	; (800b358 <USB_DeactivateEndpoint+0x1b4>)
 800b342:	4013      	ands	r3, r2
 800b344:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3714      	adds	r7, #20
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr
 800b354:	ec337800 	.word	0xec337800
 800b358:	eff37800 	.word	0xeff37800

0800b35c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b08a      	sub	sp, #40	; 0x28
 800b360:	af02      	add	r7, sp, #8
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	4613      	mov	r3, r2
 800b368:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	785b      	ldrb	r3, [r3, #1]
 800b378:	2b01      	cmp	r3, #1
 800b37a:	f040 815c 	bne.w	800b636 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	695b      	ldr	r3, [r3, #20]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d132      	bne.n	800b3ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	015a      	lsls	r2, r3, #5
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	4413      	add	r3, r2
 800b38e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	69ba      	ldr	r2, [r7, #24]
 800b396:	0151      	lsls	r1, r2, #5
 800b398:	69fa      	ldr	r2, [r7, #28]
 800b39a:	440a      	add	r2, r1
 800b39c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b3a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b3a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	015a      	lsls	r2, r3, #5
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3b6:	691b      	ldr	r3, [r3, #16]
 800b3b8:	69ba      	ldr	r2, [r7, #24]
 800b3ba:	0151      	lsls	r1, r2, #5
 800b3bc:	69fa      	ldr	r2, [r7, #28]
 800b3be:	440a      	add	r2, r1
 800b3c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	015a      	lsls	r2, r3, #5
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3d6:	691b      	ldr	r3, [r3, #16]
 800b3d8:	69ba      	ldr	r2, [r7, #24]
 800b3da:	0151      	lsls	r1, r2, #5
 800b3dc:	69fa      	ldr	r2, [r7, #28]
 800b3de:	440a      	add	r2, r1
 800b3e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3e4:	0cdb      	lsrs	r3, r3, #19
 800b3e6:	04db      	lsls	r3, r3, #19
 800b3e8:	6113      	str	r3, [r2, #16]
 800b3ea:	e074      	b.n	800b4d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b3ec:	69bb      	ldr	r3, [r7, #24]
 800b3ee:	015a      	lsls	r2, r3, #5
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3f8:	691b      	ldr	r3, [r3, #16]
 800b3fa:	69ba      	ldr	r2, [r7, #24]
 800b3fc:	0151      	lsls	r1, r2, #5
 800b3fe:	69fa      	ldr	r2, [r7, #28]
 800b400:	440a      	add	r2, r1
 800b402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b406:	0cdb      	lsrs	r3, r3, #19
 800b408:	04db      	lsls	r3, r3, #19
 800b40a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	015a      	lsls	r2, r3, #5
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	4413      	add	r3, r2
 800b414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b418:	691b      	ldr	r3, [r3, #16]
 800b41a:	69ba      	ldr	r2, [r7, #24]
 800b41c:	0151      	lsls	r1, r2, #5
 800b41e:	69fa      	ldr	r2, [r7, #28]
 800b420:	440a      	add	r2, r1
 800b422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b426:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b42a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b42e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	015a      	lsls	r2, r3, #5
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	4413      	add	r3, r2
 800b438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b43c:	691a      	ldr	r2, [r3, #16]
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	6959      	ldr	r1, [r3, #20]
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	440b      	add	r3, r1
 800b448:	1e59      	subs	r1, r3, #1
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	689b      	ldr	r3, [r3, #8]
 800b44e:	fbb1 f3f3 	udiv	r3, r1, r3
 800b452:	04d9      	lsls	r1, r3, #19
 800b454:	4b9d      	ldr	r3, [pc, #628]	; (800b6cc <USB_EPStartXfer+0x370>)
 800b456:	400b      	ands	r3, r1
 800b458:	69b9      	ldr	r1, [r7, #24]
 800b45a:	0148      	lsls	r0, r1, #5
 800b45c:	69f9      	ldr	r1, [r7, #28]
 800b45e:	4401      	add	r1, r0
 800b460:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b464:	4313      	orrs	r3, r2
 800b466:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	015a      	lsls	r2, r3, #5
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	4413      	add	r3, r2
 800b470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b474:	691a      	ldr	r2, [r3, #16]
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	695b      	ldr	r3, [r3, #20]
 800b47a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b47e:	69b9      	ldr	r1, [r7, #24]
 800b480:	0148      	lsls	r0, r1, #5
 800b482:	69f9      	ldr	r1, [r7, #28]
 800b484:	4401      	add	r1, r0
 800b486:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b48a:	4313      	orrs	r3, r2
 800b48c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	78db      	ldrb	r3, [r3, #3]
 800b492:	2b01      	cmp	r3, #1
 800b494:	d11f      	bne.n	800b4d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	015a      	lsls	r2, r3, #5
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	4413      	add	r3, r2
 800b49e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4a2:	691b      	ldr	r3, [r3, #16]
 800b4a4:	69ba      	ldr	r2, [r7, #24]
 800b4a6:	0151      	lsls	r1, r2, #5
 800b4a8:	69fa      	ldr	r2, [r7, #28]
 800b4aa:	440a      	add	r2, r1
 800b4ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b4b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	015a      	lsls	r2, r3, #5
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	4413      	add	r3, r2
 800b4be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	69ba      	ldr	r2, [r7, #24]
 800b4c6:	0151      	lsls	r1, r2, #5
 800b4c8:	69fa      	ldr	r2, [r7, #28]
 800b4ca:	440a      	add	r2, r1
 800b4cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b4d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b4d6:	79fb      	ldrb	r3, [r7, #7]
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d14b      	bne.n	800b574 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	691b      	ldr	r3, [r3, #16]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d009      	beq.n	800b4f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b4e4:	69bb      	ldr	r3, [r7, #24]
 800b4e6:	015a      	lsls	r2, r3, #5
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	4413      	add	r3, r2
 800b4ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	691b      	ldr	r3, [r3, #16]
 800b4f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	78db      	ldrb	r3, [r3, #3]
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d128      	bne.n	800b552 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b500:	69fb      	ldr	r3, [r7, #28]
 800b502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d110      	bne.n	800b532 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	015a      	lsls	r2, r3, #5
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	4413      	add	r3, r2
 800b518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	69ba      	ldr	r2, [r7, #24]
 800b520:	0151      	lsls	r1, r2, #5
 800b522:	69fa      	ldr	r2, [r7, #28]
 800b524:	440a      	add	r2, r1
 800b526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b52a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b52e:	6013      	str	r3, [r2, #0]
 800b530:	e00f      	b.n	800b552 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	015a      	lsls	r2, r3, #5
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	4413      	add	r3, r2
 800b53a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	69ba      	ldr	r2, [r7, #24]
 800b542:	0151      	lsls	r1, r2, #5
 800b544:	69fa      	ldr	r2, [r7, #28]
 800b546:	440a      	add	r2, r1
 800b548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b54c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b550:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b552:	69bb      	ldr	r3, [r7, #24]
 800b554:	015a      	lsls	r2, r3, #5
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	4413      	add	r3, r2
 800b55a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	69ba      	ldr	r2, [r7, #24]
 800b562:	0151      	lsls	r1, r2, #5
 800b564:	69fa      	ldr	r2, [r7, #28]
 800b566:	440a      	add	r2, r1
 800b568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b56c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b570:	6013      	str	r3, [r2, #0]
 800b572:	e12f      	b.n	800b7d4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b574:	69bb      	ldr	r3, [r7, #24]
 800b576:	015a      	lsls	r2, r3, #5
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	4413      	add	r3, r2
 800b57c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	69ba      	ldr	r2, [r7, #24]
 800b584:	0151      	lsls	r1, r2, #5
 800b586:	69fa      	ldr	r2, [r7, #28]
 800b588:	440a      	add	r2, r1
 800b58a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b58e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b592:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	78db      	ldrb	r3, [r3, #3]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d015      	beq.n	800b5c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	695b      	ldr	r3, [r3, #20]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	f000 8117 	beq.w	800b7d4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	f003 030f 	and.w	r3, r3, #15
 800b5b6:	2101      	movs	r1, #1
 800b5b8:	fa01 f303 	lsl.w	r3, r1, r3
 800b5bc:	69f9      	ldr	r1, [r7, #28]
 800b5be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	634b      	str	r3, [r1, #52]	; 0x34
 800b5c6:	e105      	b.n	800b7d4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b5c8:	69fb      	ldr	r3, [r7, #28]
 800b5ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d110      	bne.n	800b5fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b5d8:	69bb      	ldr	r3, [r7, #24]
 800b5da:	015a      	lsls	r2, r3, #5
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	4413      	add	r3, r2
 800b5e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	69ba      	ldr	r2, [r7, #24]
 800b5e8:	0151      	lsls	r1, r2, #5
 800b5ea:	69fa      	ldr	r2, [r7, #28]
 800b5ec:	440a      	add	r2, r1
 800b5ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b5f6:	6013      	str	r3, [r2, #0]
 800b5f8:	e00f      	b.n	800b61a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	015a      	lsls	r2, r3, #5
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	4413      	add	r3, r2
 800b602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	69ba      	ldr	r2, [r7, #24]
 800b60a:	0151      	lsls	r1, r2, #5
 800b60c:	69fa      	ldr	r2, [r7, #28]
 800b60e:	440a      	add	r2, r1
 800b610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b618:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	68d9      	ldr	r1, [r3, #12]
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	781a      	ldrb	r2, [r3, #0]
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	695b      	ldr	r3, [r3, #20]
 800b626:	b298      	uxth	r0, r3
 800b628:	79fb      	ldrb	r3, [r7, #7]
 800b62a:	9300      	str	r3, [sp, #0]
 800b62c:	4603      	mov	r3, r0
 800b62e:	68f8      	ldr	r0, [r7, #12]
 800b630:	f000 fa2b 	bl	800ba8a <USB_WritePacket>
 800b634:	e0ce      	b.n	800b7d4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	015a      	lsls	r2, r3, #5
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	4413      	add	r3, r2
 800b63e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	69ba      	ldr	r2, [r7, #24]
 800b646:	0151      	lsls	r1, r2, #5
 800b648:	69fa      	ldr	r2, [r7, #28]
 800b64a:	440a      	add	r2, r1
 800b64c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b650:	0cdb      	lsrs	r3, r3, #19
 800b652:	04db      	lsls	r3, r3, #19
 800b654:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b656:	69bb      	ldr	r3, [r7, #24]
 800b658:	015a      	lsls	r2, r3, #5
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	4413      	add	r3, r2
 800b65e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b662:	691b      	ldr	r3, [r3, #16]
 800b664:	69ba      	ldr	r2, [r7, #24]
 800b666:	0151      	lsls	r1, r2, #5
 800b668:	69fa      	ldr	r2, [r7, #28]
 800b66a:	440a      	add	r2, r1
 800b66c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b670:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b674:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b678:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	695b      	ldr	r3, [r3, #20]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d126      	bne.n	800b6d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b682:	69bb      	ldr	r3, [r7, #24]
 800b684:	015a      	lsls	r2, r3, #5
 800b686:	69fb      	ldr	r3, [r7, #28]
 800b688:	4413      	add	r3, r2
 800b68a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b68e:	691a      	ldr	r2, [r3, #16]
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b698:	69b9      	ldr	r1, [r7, #24]
 800b69a:	0148      	lsls	r0, r1, #5
 800b69c:	69f9      	ldr	r1, [r7, #28]
 800b69e:	4401      	add	r1, r0
 800b6a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	015a      	lsls	r2, r3, #5
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6b4:	691b      	ldr	r3, [r3, #16]
 800b6b6:	69ba      	ldr	r2, [r7, #24]
 800b6b8:	0151      	lsls	r1, r2, #5
 800b6ba:	69fa      	ldr	r2, [r7, #28]
 800b6bc:	440a      	add	r2, r1
 800b6be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b6c6:	6113      	str	r3, [r2, #16]
 800b6c8:	e036      	b.n	800b738 <USB_EPStartXfer+0x3dc>
 800b6ca:	bf00      	nop
 800b6cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	695a      	ldr	r2, [r3, #20]
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	4413      	add	r3, r2
 800b6da:	1e5a      	subs	r2, r3, #1
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6e4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	015a      	lsls	r2, r3, #5
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f2:	691a      	ldr	r2, [r3, #16]
 800b6f4:	8afb      	ldrh	r3, [r7, #22]
 800b6f6:	04d9      	lsls	r1, r3, #19
 800b6f8:	4b39      	ldr	r3, [pc, #228]	; (800b7e0 <USB_EPStartXfer+0x484>)
 800b6fa:	400b      	ands	r3, r1
 800b6fc:	69b9      	ldr	r1, [r7, #24]
 800b6fe:	0148      	lsls	r0, r1, #5
 800b700:	69f9      	ldr	r1, [r7, #28]
 800b702:	4401      	add	r1, r0
 800b704:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b708:	4313      	orrs	r3, r2
 800b70a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	015a      	lsls	r2, r3, #5
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	4413      	add	r3, r2
 800b714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b718:	691a      	ldr	r2, [r3, #16]
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	689b      	ldr	r3, [r3, #8]
 800b71e:	8af9      	ldrh	r1, [r7, #22]
 800b720:	fb01 f303 	mul.w	r3, r1, r3
 800b724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b728:	69b9      	ldr	r1, [r7, #24]
 800b72a:	0148      	lsls	r0, r1, #5
 800b72c:	69f9      	ldr	r1, [r7, #28]
 800b72e:	4401      	add	r1, r0
 800b730:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b734:	4313      	orrs	r3, r2
 800b736:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b738:	79fb      	ldrb	r3, [r7, #7]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d10d      	bne.n	800b75a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d009      	beq.n	800b75a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	68d9      	ldr	r1, [r3, #12]
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	015a      	lsls	r2, r3, #5
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	4413      	add	r3, r2
 800b752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b756:	460a      	mov	r2, r1
 800b758:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	78db      	ldrb	r3, [r3, #3]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d128      	bne.n	800b7b4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d110      	bne.n	800b794 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	015a      	lsls	r2, r3, #5
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	4413      	add	r3, r2
 800b77a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	69ba      	ldr	r2, [r7, #24]
 800b782:	0151      	lsls	r1, r2, #5
 800b784:	69fa      	ldr	r2, [r7, #28]
 800b786:	440a      	add	r2, r1
 800b788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b78c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b790:	6013      	str	r3, [r2, #0]
 800b792:	e00f      	b.n	800b7b4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b794:	69bb      	ldr	r3, [r7, #24]
 800b796:	015a      	lsls	r2, r3, #5
 800b798:	69fb      	ldr	r3, [r7, #28]
 800b79a:	4413      	add	r3, r2
 800b79c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	69ba      	ldr	r2, [r7, #24]
 800b7a4:	0151      	lsls	r1, r2, #5
 800b7a6:	69fa      	ldr	r2, [r7, #28]
 800b7a8:	440a      	add	r2, r1
 800b7aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	015a      	lsls	r2, r3, #5
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	69ba      	ldr	r2, [r7, #24]
 800b7c4:	0151      	lsls	r1, r2, #5
 800b7c6:	69fa      	ldr	r2, [r7, #28]
 800b7c8:	440a      	add	r2, r1
 800b7ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b7d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3720      	adds	r7, #32
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	1ff80000 	.word	0x1ff80000

0800b7e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b087      	sub	sp, #28
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	785b      	ldrb	r3, [r3, #1]
 800b800:	2b01      	cmp	r3, #1
 800b802:	f040 80cd 	bne.w	800b9a0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	695b      	ldr	r3, [r3, #20]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d132      	bne.n	800b874 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	015a      	lsls	r2, r3, #5
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	4413      	add	r3, r2
 800b816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b81a:	691b      	ldr	r3, [r3, #16]
 800b81c:	693a      	ldr	r2, [r7, #16]
 800b81e:	0151      	lsls	r1, r2, #5
 800b820:	697a      	ldr	r2, [r7, #20]
 800b822:	440a      	add	r2, r1
 800b824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b828:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b82c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b830:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	015a      	lsls	r2, r3, #5
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	4413      	add	r3, r2
 800b83a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b83e:	691b      	ldr	r3, [r3, #16]
 800b840:	693a      	ldr	r2, [r7, #16]
 800b842:	0151      	lsls	r1, r2, #5
 800b844:	697a      	ldr	r2, [r7, #20]
 800b846:	440a      	add	r2, r1
 800b848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b84c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b850:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	015a      	lsls	r2, r3, #5
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	4413      	add	r3, r2
 800b85a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b85e:	691b      	ldr	r3, [r3, #16]
 800b860:	693a      	ldr	r2, [r7, #16]
 800b862:	0151      	lsls	r1, r2, #5
 800b864:	697a      	ldr	r2, [r7, #20]
 800b866:	440a      	add	r2, r1
 800b868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b86c:	0cdb      	lsrs	r3, r3, #19
 800b86e:	04db      	lsls	r3, r3, #19
 800b870:	6113      	str	r3, [r2, #16]
 800b872:	e04e      	b.n	800b912 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	015a      	lsls	r2, r3, #5
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	4413      	add	r3, r2
 800b87c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b880:	691b      	ldr	r3, [r3, #16]
 800b882:	693a      	ldr	r2, [r7, #16]
 800b884:	0151      	lsls	r1, r2, #5
 800b886:	697a      	ldr	r2, [r7, #20]
 800b888:	440a      	add	r2, r1
 800b88a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b88e:	0cdb      	lsrs	r3, r3, #19
 800b890:	04db      	lsls	r3, r3, #19
 800b892:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	015a      	lsls	r2, r3, #5
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	4413      	add	r3, r2
 800b89c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	693a      	ldr	r2, [r7, #16]
 800b8a4:	0151      	lsls	r1, r2, #5
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	440a      	add	r2, r1
 800b8aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b8b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b8b6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	695a      	ldr	r2, [r3, #20]
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	689b      	ldr	r3, [r3, #8]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d903      	bls.n	800b8cc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	689a      	ldr	r2, [r3, #8]
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	015a      	lsls	r2, r3, #5
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	4413      	add	r3, r2
 800b8d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	693a      	ldr	r2, [r7, #16]
 800b8dc:	0151      	lsls	r1, r2, #5
 800b8de:	697a      	ldr	r2, [r7, #20]
 800b8e0:	440a      	add	r2, r1
 800b8e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b8ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	015a      	lsls	r2, r3, #5
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8f8:	691a      	ldr	r2, [r3, #16]
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	695b      	ldr	r3, [r3, #20]
 800b8fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b902:	6939      	ldr	r1, [r7, #16]
 800b904:	0148      	lsls	r0, r1, #5
 800b906:	6979      	ldr	r1, [r7, #20]
 800b908:	4401      	add	r1, r0
 800b90a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b90e:	4313      	orrs	r3, r2
 800b910:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b912:	79fb      	ldrb	r3, [r7, #7]
 800b914:	2b01      	cmp	r3, #1
 800b916:	d11e      	bne.n	800b956 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	691b      	ldr	r3, [r3, #16]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d009      	beq.n	800b934 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	015a      	lsls	r2, r3, #5
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	4413      	add	r3, r2
 800b928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b92c:	461a      	mov	r2, r3
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	015a      	lsls	r2, r3, #5
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	4413      	add	r3, r2
 800b93c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	693a      	ldr	r2, [r7, #16]
 800b944:	0151      	lsls	r1, r2, #5
 800b946:	697a      	ldr	r2, [r7, #20]
 800b948:	440a      	add	r2, r1
 800b94a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b94e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b952:	6013      	str	r3, [r2, #0]
 800b954:	e092      	b.n	800ba7c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	015a      	lsls	r2, r3, #5
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	4413      	add	r3, r2
 800b95e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	693a      	ldr	r2, [r7, #16]
 800b966:	0151      	lsls	r1, r2, #5
 800b968:	697a      	ldr	r2, [r7, #20]
 800b96a:	440a      	add	r2, r1
 800b96c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b970:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b974:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d07e      	beq.n	800ba7c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	f003 030f 	and.w	r3, r3, #15
 800b98e:	2101      	movs	r1, #1
 800b990:	fa01 f303 	lsl.w	r3, r1, r3
 800b994:	6979      	ldr	r1, [r7, #20]
 800b996:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b99a:	4313      	orrs	r3, r2
 800b99c:	634b      	str	r3, [r1, #52]	; 0x34
 800b99e:	e06d      	b.n	800ba7c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	015a      	lsls	r2, r3, #5
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ac:	691b      	ldr	r3, [r3, #16]
 800b9ae:	693a      	ldr	r2, [r7, #16]
 800b9b0:	0151      	lsls	r1, r2, #5
 800b9b2:	697a      	ldr	r2, [r7, #20]
 800b9b4:	440a      	add	r2, r1
 800b9b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9ba:	0cdb      	lsrs	r3, r3, #19
 800b9bc:	04db      	lsls	r3, r3, #19
 800b9be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	015a      	lsls	r2, r3, #5
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9cc:	691b      	ldr	r3, [r3, #16]
 800b9ce:	693a      	ldr	r2, [r7, #16]
 800b9d0:	0151      	lsls	r1, r2, #5
 800b9d2:	697a      	ldr	r2, [r7, #20]
 800b9d4:	440a      	add	r2, r1
 800b9d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b9de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b9e2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	695b      	ldr	r3, [r3, #20]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d003      	beq.n	800b9f4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	689a      	ldr	r2, [r3, #8]
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	015a      	lsls	r2, r3, #5
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	4413      	add	r3, r2
 800b9fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba00:	691b      	ldr	r3, [r3, #16]
 800ba02:	693a      	ldr	r2, [r7, #16]
 800ba04:	0151      	lsls	r1, r2, #5
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	440a      	add	r2, r1
 800ba0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	015a      	lsls	r2, r3, #5
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba20:	691a      	ldr	r2, [r3, #16]
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba2a:	6939      	ldr	r1, [r7, #16]
 800ba2c:	0148      	lsls	r0, r1, #5
 800ba2e:	6979      	ldr	r1, [r7, #20]
 800ba30:	4401      	add	r1, r0
 800ba32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ba36:	4313      	orrs	r3, r2
 800ba38:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ba3a:	79fb      	ldrb	r3, [r7, #7]
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d10d      	bne.n	800ba5c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d009      	beq.n	800ba5c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	68d9      	ldr	r1, [r3, #12]
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	015a      	lsls	r2, r3, #5
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	4413      	add	r3, r2
 800ba54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba58:	460a      	mov	r2, r1
 800ba5a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	015a      	lsls	r2, r3, #5
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	4413      	add	r3, r2
 800ba64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	693a      	ldr	r2, [r7, #16]
 800ba6c:	0151      	lsls	r1, r2, #5
 800ba6e:	697a      	ldr	r2, [r7, #20]
 800ba70:	440a      	add	r2, r1
 800ba72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ba7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ba7c:	2300      	movs	r3, #0
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	371c      	adds	r7, #28
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr

0800ba8a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ba8a:	b480      	push	{r7}
 800ba8c:	b089      	sub	sp, #36	; 0x24
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	60f8      	str	r0, [r7, #12]
 800ba92:	60b9      	str	r1, [r7, #8]
 800ba94:	4611      	mov	r1, r2
 800ba96:	461a      	mov	r2, r3
 800ba98:	460b      	mov	r3, r1
 800ba9a:	71fb      	strb	r3, [r7, #7]
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800baa8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800baac:	2b00      	cmp	r3, #0
 800baae:	d11a      	bne.n	800bae6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bab0:	88bb      	ldrh	r3, [r7, #4]
 800bab2:	3303      	adds	r3, #3
 800bab4:	089b      	lsrs	r3, r3, #2
 800bab6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bab8:	2300      	movs	r3, #0
 800baba:	61bb      	str	r3, [r7, #24]
 800babc:	e00f      	b.n	800bade <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800babe:	79fb      	ldrb	r3, [r7, #7]
 800bac0:	031a      	lsls	r2, r3, #12
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	4413      	add	r3, r2
 800bac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baca:	461a      	mov	r2, r3
 800bacc:	69fb      	ldr	r3, [r7, #28]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bad2:	69fb      	ldr	r3, [r7, #28]
 800bad4:	3304      	adds	r3, #4
 800bad6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	3301      	adds	r3, #1
 800badc:	61bb      	str	r3, [r7, #24]
 800bade:	69ba      	ldr	r2, [r7, #24]
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d3eb      	bcc.n	800babe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3724      	adds	r7, #36	; 0x24
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b089      	sub	sp, #36	; 0x24
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	4613      	mov	r3, r2
 800bb00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800bb0a:	88fb      	ldrh	r3, [r7, #6]
 800bb0c:	3303      	adds	r3, #3
 800bb0e:	089b      	lsrs	r3, r3, #2
 800bb10:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800bb12:	2300      	movs	r3, #0
 800bb14:	61bb      	str	r3, [r7, #24]
 800bb16:	e00b      	b.n	800bb30 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	601a      	str	r2, [r3, #0]
    pDest++;
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	3304      	adds	r3, #4
 800bb28:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	61bb      	str	r3, [r7, #24]
 800bb30:	69ba      	ldr	r2, [r7, #24]
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d3ef      	bcc.n	800bb18 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800bb38:	69fb      	ldr	r3, [r7, #28]
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3724      	adds	r7, #36	; 0x24
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr

0800bb46 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bb46:	b480      	push	{r7}
 800bb48:	b085      	sub	sp, #20
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
 800bb4e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	785b      	ldrb	r3, [r3, #1]
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d12c      	bne.n	800bbbc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	015a      	lsls	r2, r3, #5
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	4413      	add	r3, r2
 800bb6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	db12      	blt.n	800bb9a <USB_EPSetStall+0x54>
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00f      	beq.n	800bb9a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	015a      	lsls	r2, r3, #5
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	4413      	add	r3, r2
 800bb82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	68ba      	ldr	r2, [r7, #8]
 800bb8a:	0151      	lsls	r1, r2, #5
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	440a      	add	r2, r1
 800bb90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bb98:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	015a      	lsls	r2, r3, #5
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	4413      	add	r3, r2
 800bba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	68ba      	ldr	r2, [r7, #8]
 800bbaa:	0151      	lsls	r1, r2, #5
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	440a      	add	r2, r1
 800bbb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bbb8:	6013      	str	r3, [r2, #0]
 800bbba:	e02b      	b.n	800bc14 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	015a      	lsls	r2, r3, #5
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	db12      	blt.n	800bbf4 <USB_EPSetStall+0xae>
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00f      	beq.n	800bbf4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	015a      	lsls	r2, r3, #5
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	4413      	add	r3, r2
 800bbdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	0151      	lsls	r1, r2, #5
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	440a      	add	r2, r1
 800bbea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bbf2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	015a      	lsls	r2, r3, #5
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	4413      	add	r3, r2
 800bbfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	68ba      	ldr	r2, [r7, #8]
 800bc04:	0151      	lsls	r1, r2, #5
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	440a      	add	r2, r1
 800bc0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bc12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3714      	adds	r7, #20
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bc22:	b480      	push	{r7}
 800bc24:	b085      	sub	sp, #20
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
 800bc2a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	785b      	ldrb	r3, [r3, #1]
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d128      	bne.n	800bc90 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	015a      	lsls	r2, r3, #5
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	4413      	add	r3, r2
 800bc46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	0151      	lsls	r1, r2, #5
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	440a      	add	r2, r1
 800bc54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bc5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	78db      	ldrb	r3, [r3, #3]
 800bc62:	2b03      	cmp	r3, #3
 800bc64:	d003      	beq.n	800bc6e <USB_EPClearStall+0x4c>
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	78db      	ldrb	r3, [r3, #3]
 800bc6a:	2b02      	cmp	r3, #2
 800bc6c:	d138      	bne.n	800bce0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	015a      	lsls	r2, r3, #5
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	4413      	add	r3, r2
 800bc76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	68ba      	ldr	r2, [r7, #8]
 800bc7e:	0151      	lsls	r1, r2, #5
 800bc80:	68fa      	ldr	r2, [r7, #12]
 800bc82:	440a      	add	r2, r1
 800bc84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc8c:	6013      	str	r3, [r2, #0]
 800bc8e:	e027      	b.n	800bce0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	015a      	lsls	r2, r3, #5
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	4413      	add	r3, r2
 800bc98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	68ba      	ldr	r2, [r7, #8]
 800bca0:	0151      	lsls	r1, r2, #5
 800bca2:	68fa      	ldr	r2, [r7, #12]
 800bca4:	440a      	add	r2, r1
 800bca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bcae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	78db      	ldrb	r3, [r3, #3]
 800bcb4:	2b03      	cmp	r3, #3
 800bcb6:	d003      	beq.n	800bcc0 <USB_EPClearStall+0x9e>
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	78db      	ldrb	r3, [r3, #3]
 800bcbc:	2b02      	cmp	r3, #2
 800bcbe:	d10f      	bne.n	800bce0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	015a      	lsls	r2, r3, #5
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	68ba      	ldr	r2, [r7, #8]
 800bcd0:	0151      	lsls	r1, r2, #5
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	440a      	add	r2, r1
 800bcd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcde:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3714      	adds	r7, #20
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr

0800bcee <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bcee:	b480      	push	{r7}
 800bcf0:	b085      	sub	sp, #20
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd0c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bd10:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	78fb      	ldrb	r3, [r7, #3]
 800bd1c:	011b      	lsls	r3, r3, #4
 800bd1e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bd22:	68f9      	ldr	r1, [r7, #12]
 800bd24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3714      	adds	r7, #20
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr

0800bd3a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bd3a:	b480      	push	{r7}
 800bd3c:	b085      	sub	sp, #20
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd54:	f023 0303 	bic.w	r3, r3, #3
 800bd58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	68fa      	ldr	r2, [r7, #12]
 800bd64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd68:	f023 0302 	bic.w	r3, r3, #2
 800bd6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3714      	adds	r7, #20
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd96:	f023 0303 	bic.w	r3, r3, #3
 800bd9a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdaa:	f043 0302 	orr.w	r3, r3, #2
 800bdae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3714      	adds	r7, #20
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr

0800bdbe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bdbe:	b480      	push	{r7}
 800bdc0:	b085      	sub	sp, #20
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	695b      	ldr	r3, [r3, #20]
 800bdca:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	699b      	ldr	r3, [r3, #24]
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	4013      	ands	r3, r2
 800bdd4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3714      	adds	r7, #20
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b085      	sub	sp, #20
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdf6:	699b      	ldr	r3, [r3, #24]
 800bdf8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be00:	69db      	ldr	r3, [r3, #28]
 800be02:	68ba      	ldr	r2, [r7, #8]
 800be04:	4013      	ands	r3, r2
 800be06:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	0c1b      	lsrs	r3, r3, #16
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3714      	adds	r7, #20
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800be18:	b480      	push	{r7}
 800be1a:	b085      	sub	sp, #20
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be2a:	699b      	ldr	r3, [r3, #24]
 800be2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be34:	69db      	ldr	r3, [r3, #28]
 800be36:	68ba      	ldr	r2, [r7, #8]
 800be38:	4013      	ands	r3, r2
 800be3a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	b29b      	uxth	r3, r3
}
 800be40:	4618      	mov	r0, r3
 800be42:	3714      	adds	r7, #20
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr

0800be4c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b085      	sub	sp, #20
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	460b      	mov	r3, r1
 800be56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800be5c:	78fb      	ldrb	r3, [r7, #3]
 800be5e:	015a      	lsls	r2, r3, #5
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	4413      	add	r3, r2
 800be64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be72:	695b      	ldr	r3, [r3, #20]
 800be74:	68ba      	ldr	r2, [r7, #8]
 800be76:	4013      	ands	r3, r2
 800be78:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800be7a:	68bb      	ldr	r3, [r7, #8]
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3714      	adds	r7, #20
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800be88:	b480      	push	{r7}
 800be8a:	b087      	sub	sp, #28
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	460b      	mov	r3, r1
 800be92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be9e:	691b      	ldr	r3, [r3, #16]
 800bea0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beaa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800beac:	78fb      	ldrb	r3, [r7, #3]
 800beae:	f003 030f 	and.w	r3, r3, #15
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	fa22 f303 	lsr.w	r3, r2, r3
 800beb8:	01db      	lsls	r3, r3, #7
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	4313      	orrs	r3, r2
 800bec0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bec2:	78fb      	ldrb	r3, [r7, #3]
 800bec4:	015a      	lsls	r2, r3, #5
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	4413      	add	r3, r2
 800beca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	693a      	ldr	r2, [r7, #16]
 800bed2:	4013      	ands	r3, r2
 800bed4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bed6:	68bb      	ldr	r3, [r7, #8]
}
 800bed8:	4618      	mov	r0, r3
 800beda:	371c      	adds	r7, #28
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b083      	sub	sp, #12
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	695b      	ldr	r3, [r3, #20]
 800bef0:	f003 0301 	and.w	r3, r3, #1
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	370c      	adds	r7, #12
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b085      	sub	sp, #20
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68fa      	ldr	r2, [r7, #12]
 800bf16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf1a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bf1e:	f023 0307 	bic.w	r3, r3, #7
 800bf22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	68fa      	ldr	r2, [r7, #12]
 800bf2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3714      	adds	r7, #20
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr
	...

0800bf48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b087      	sub	sp, #28
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	460b      	mov	r3, r1
 800bf52:	607a      	str	r2, [r7, #4]
 800bf54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	333c      	adds	r3, #60	; 0x3c
 800bf5e:	3304      	adds	r3, #4
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	4a26      	ldr	r2, [pc, #152]	; (800c000 <USB_EP0_OutStart+0xb8>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d90a      	bls.n	800bf82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf7c:	d101      	bne.n	800bf82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	e037      	b.n	800bff2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf88:	461a      	mov	r2, r3
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf94:	691b      	ldr	r3, [r3, #16]
 800bf96:	697a      	ldr	r2, [r7, #20]
 800bf98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bfa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	697a      	ldr	r2, [r7, #20]
 800bfac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfb0:	f043 0318 	orr.w	r3, r3, #24
 800bfb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	697a      	ldr	r2, [r7, #20]
 800bfc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfc4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bfc8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bfca:	7afb      	ldrb	r3, [r7, #11]
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d10f      	bne.n	800bff0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	697a      	ldr	r2, [r7, #20]
 800bfe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bfee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bff0:	2300      	movs	r3, #0
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	371c      	adds	r7, #28
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
 800bffe:	bf00      	nop
 800c000:	4f54300a 	.word	0x4f54300a

0800c004 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c004:	b480      	push	{r7}
 800c006:	b085      	sub	sp, #20
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c00c:	2300      	movs	r3, #0
 800c00e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	3301      	adds	r3, #1
 800c014:	60fb      	str	r3, [r7, #12]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	4a13      	ldr	r2, [pc, #76]	; (800c068 <USB_CoreReset+0x64>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d901      	bls.n	800c022 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c01e:	2303      	movs	r3, #3
 800c020:	e01b      	b.n	800c05a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	691b      	ldr	r3, [r3, #16]
 800c026:	2b00      	cmp	r3, #0
 800c028:	daf2      	bge.n	800c010 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c02a:	2300      	movs	r3, #0
 800c02c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	691b      	ldr	r3, [r3, #16]
 800c032:	f043 0201 	orr.w	r2, r3, #1
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	3301      	adds	r3, #1
 800c03e:	60fb      	str	r3, [r7, #12]
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	4a09      	ldr	r2, [pc, #36]	; (800c068 <USB_CoreReset+0x64>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d901      	bls.n	800c04c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c048:	2303      	movs	r3, #3
 800c04a:	e006      	b.n	800c05a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	691b      	ldr	r3, [r3, #16]
 800c050:	f003 0301 	and.w	r3, r3, #1
 800c054:	2b01      	cmp	r3, #1
 800c056:	d0f0      	beq.n	800c03a <USB_CoreReset+0x36>

  return HAL_OK;
 800c058:	2300      	movs	r3, #0
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3714      	adds	r7, #20
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr
 800c066:	bf00      	nop
 800c068:	00030d40 	.word	0x00030d40

0800c06c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	460b      	mov	r3, r1
 800c076:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c078:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c07c:	f003 fb94 	bl	800f7a8 <malloc>
 800c080:	4603      	mov	r3, r0
 800c082:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d105      	bne.n	800c096 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c092:	2302      	movs	r3, #2
 800c094:	e066      	b.n	800c164 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	7c1b      	ldrb	r3, [r3, #16]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d119      	bne.n	800c0da <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c0a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0aa:	2202      	movs	r2, #2
 800c0ac:	2181      	movs	r1, #129	; 0x81
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f003 f9e5 	bl	800f47e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c0ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0be:	2202      	movs	r2, #2
 800c0c0:	2101      	movs	r1, #1
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f003 f9db 	bl	800f47e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2210      	movs	r2, #16
 800c0d4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800c0d8:	e016      	b.n	800c108 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c0da:	2340      	movs	r3, #64	; 0x40
 800c0dc:	2202      	movs	r2, #2
 800c0de:	2181      	movs	r1, #129	; 0x81
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f003 f9cc 	bl	800f47e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c0ec:	2340      	movs	r3, #64	; 0x40
 800c0ee:	2202      	movs	r2, #2
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f003 f9c3 	bl	800f47e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2210      	movs	r2, #16
 800c104:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c108:	2308      	movs	r3, #8
 800c10a:	2203      	movs	r2, #3
 800c10c:	2182      	movs	r1, #130	; 0x82
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f003 f9b5 	bl	800f47e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2201      	movs	r2, #1
 800c118:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2200      	movs	r2, #0
 800c12a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2200      	movs	r2, #0
 800c132:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	7c1b      	ldrb	r3, [r3, #16]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d109      	bne.n	800c152 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c144:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c148:	2101      	movs	r1, #1
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f003 fa86 	bl	800f65c <USBD_LL_PrepareReceive>
 800c150:	e007      	b.n	800c162 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c158:	2340      	movs	r3, #64	; 0x40
 800c15a:	2101      	movs	r1, #1
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f003 fa7d 	bl	800f65c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3710      	adds	r7, #16
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	460b      	mov	r3, r1
 800c176:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800c178:	2300      	movs	r3, #0
 800c17a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c17c:	2181      	movs	r1, #129	; 0x81
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f003 f9a3 	bl	800f4ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c18a:	2101      	movs	r1, #1
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f003 f99c 	bl	800f4ca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c19a:	2182      	movs	r1, #130	; 0x82
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f003 f994 	bl	800f4ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00e      	beq.n	800c1da <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f003 faf3 	bl	800f7b8 <free>
    pdev->pClassData = NULL;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800c1da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b086      	sub	sp, #24
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1f4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1fe:	2300      	movs	r3, #0
 800c200:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d03a      	beq.n	800c284 <USBD_CDC_Setup+0xa0>
 800c20e:	2b20      	cmp	r3, #32
 800c210:	f040 8097 	bne.w	800c342 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	88db      	ldrh	r3, [r3, #6]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d029      	beq.n	800c270 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	b25b      	sxtb	r3, r3
 800c222:	2b00      	cmp	r3, #0
 800c224:	da11      	bge.n	800c24a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	683a      	ldr	r2, [r7, #0]
 800c230:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800c232:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c234:	683a      	ldr	r2, [r7, #0]
 800c236:	88d2      	ldrh	r2, [r2, #6]
 800c238:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c23a:	6939      	ldr	r1, [r7, #16]
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	88db      	ldrh	r3, [r3, #6]
 800c240:	461a      	mov	r2, r3
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f001 fa9d 	bl	800d782 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800c248:	e082      	b.n	800c350 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	785a      	ldrb	r2, [r3, #1]
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	88db      	ldrh	r3, [r3, #6]
 800c258:	b2da      	uxtb	r2, r3
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c260:	6939      	ldr	r1, [r7, #16]
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	88db      	ldrh	r3, [r3, #6]
 800c266:	461a      	mov	r2, r3
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f001 fab6 	bl	800d7da <USBD_CtlPrepareRx>
    break;
 800c26e:	e06f      	b.n	800c350 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	683a      	ldr	r2, [r7, #0]
 800c27a:	7850      	ldrb	r0, [r2, #1]
 800c27c:	2200      	movs	r2, #0
 800c27e:	6839      	ldr	r1, [r7, #0]
 800c280:	4798      	blx	r3
    break;
 800c282:	e065      	b.n	800c350 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	785b      	ldrb	r3, [r3, #1]
 800c288:	2b0b      	cmp	r3, #11
 800c28a:	d84f      	bhi.n	800c32c <USBD_CDC_Setup+0x148>
 800c28c:	a201      	add	r2, pc, #4	; (adr r2, 800c294 <USBD_CDC_Setup+0xb0>)
 800c28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c292:	bf00      	nop
 800c294:	0800c2c5 	.word	0x0800c2c5
 800c298:	0800c33b 	.word	0x0800c33b
 800c29c:	0800c32d 	.word	0x0800c32d
 800c2a0:	0800c32d 	.word	0x0800c32d
 800c2a4:	0800c32d 	.word	0x0800c32d
 800c2a8:	0800c32d 	.word	0x0800c32d
 800c2ac:	0800c32d 	.word	0x0800c32d
 800c2b0:	0800c32d 	.word	0x0800c32d
 800c2b4:	0800c32d 	.word	0x0800c32d
 800c2b8:	0800c32d 	.word	0x0800c32d
 800c2bc:	0800c2ed 	.word	0x0800c2ed
 800c2c0:	0800c315 	.word	0x0800c315
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2ca:	2b03      	cmp	r3, #3
 800c2cc:	d107      	bne.n	800c2de <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c2ce:	f107 030c 	add.w	r3, r7, #12
 800c2d2:	2202      	movs	r2, #2
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f001 fa53 	bl	800d782 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c2dc:	e030      	b.n	800c340 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800c2de:	6839      	ldr	r1, [r7, #0]
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f001 f9dd 	bl	800d6a0 <USBD_CtlError>
        ret = USBD_FAIL;
 800c2e6:	2303      	movs	r3, #3
 800c2e8:	75fb      	strb	r3, [r7, #23]
      break;
 800c2ea:	e029      	b.n	800c340 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2f2:	2b03      	cmp	r3, #3
 800c2f4:	d107      	bne.n	800c306 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c2f6:	f107 030f 	add.w	r3, r7, #15
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f001 fa3f 	bl	800d782 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c304:	e01c      	b.n	800c340 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800c306:	6839      	ldr	r1, [r7, #0]
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f001 f9c9 	bl	800d6a0 <USBD_CtlError>
        ret = USBD_FAIL;
 800c30e:	2303      	movs	r3, #3
 800c310:	75fb      	strb	r3, [r7, #23]
      break;
 800c312:	e015      	b.n	800c340 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c31a:	2b03      	cmp	r3, #3
 800c31c:	d00f      	beq.n	800c33e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800c31e:	6839      	ldr	r1, [r7, #0]
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f001 f9bd 	bl	800d6a0 <USBD_CtlError>
        ret = USBD_FAIL;
 800c326:	2303      	movs	r3, #3
 800c328:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c32a:	e008      	b.n	800c33e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800c32c:	6839      	ldr	r1, [r7, #0]
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f001 f9b6 	bl	800d6a0 <USBD_CtlError>
      ret = USBD_FAIL;
 800c334:	2303      	movs	r3, #3
 800c336:	75fb      	strb	r3, [r7, #23]
      break;
 800c338:	e002      	b.n	800c340 <USBD_CDC_Setup+0x15c>
      break;
 800c33a:	bf00      	nop
 800c33c:	e008      	b.n	800c350 <USBD_CDC_Setup+0x16c>
      break;
 800c33e:	bf00      	nop
    }
    break;
 800c340:	e006      	b.n	800c350 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800c342:	6839      	ldr	r1, [r7, #0]
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f001 f9ab 	bl	800d6a0 <USBD_CtlError>
    ret = USBD_FAIL;
 800c34a:	2303      	movs	r3, #3
 800c34c:	75fb      	strb	r3, [r7, #23]
    break;
 800c34e:	bf00      	nop
  }

  return (uint8_t)ret;
 800c350:	7dfb      	ldrb	r3, [r7, #23]
}
 800c352:	4618      	mov	r0, r3
 800c354:	3718      	adds	r7, #24
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop

0800c35c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	460b      	mov	r3, r1
 800c366:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c36e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c376:	2b00      	cmp	r3, #0
 800c378:	d101      	bne.n	800c37e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c37a:	2303      	movs	r3, #3
 800c37c:	e049      	b.n	800c412 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c384:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c386:	78fa      	ldrb	r2, [r7, #3]
 800c388:	6879      	ldr	r1, [r7, #4]
 800c38a:	4613      	mov	r3, r2
 800c38c:	009b      	lsls	r3, r3, #2
 800c38e:	4413      	add	r3, r2
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	440b      	add	r3, r1
 800c394:	3318      	adds	r3, #24
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d029      	beq.n	800c3f0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c39c:	78fa      	ldrb	r2, [r7, #3]
 800c39e:	6879      	ldr	r1, [r7, #4]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4413      	add	r3, r2
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	440b      	add	r3, r1
 800c3aa:	3318      	adds	r3, #24
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	78f9      	ldrb	r1, [r7, #3]
 800c3b0:	68f8      	ldr	r0, [r7, #12]
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	00db      	lsls	r3, r3, #3
 800c3b6:	1a5b      	subs	r3, r3, r1
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	4403      	add	r3, r0
 800c3bc:	3344      	adds	r3, #68	; 0x44
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	fbb2 f1f3 	udiv	r1, r2, r3
 800c3c4:	fb03 f301 	mul.w	r3, r3, r1
 800c3c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d110      	bne.n	800c3f0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c3ce:	78fa      	ldrb	r2, [r7, #3]
 800c3d0:	6879      	ldr	r1, [r7, #4]
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	009b      	lsls	r3, r3, #2
 800c3d6:	4413      	add	r3, r2
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	440b      	add	r3, r1
 800c3dc:	3318      	adds	r3, #24
 800c3de:	2200      	movs	r2, #0
 800c3e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c3e2:	78f9      	ldrb	r1, [r7, #3]
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f003 f916 	bl	800f61a <USBD_LL_Transmit>
 800c3ee:	e00f      	b.n	800c410 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3fe:	691b      	ldr	r3, [r3, #16]
 800c400:	68ba      	ldr	r2, [r7, #8]
 800c402:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c40c:	78fa      	ldrb	r2, [r7, #3]
 800c40e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b084      	sub	sp, #16
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
 800c422:	460b      	mov	r3, r1
 800c424:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c42c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c434:	2b00      	cmp	r3, #0
 800c436:	d101      	bne.n	800c43c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c438:	2303      	movs	r3, #3
 800c43a:	e015      	b.n	800c468 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c43c:	78fb      	ldrb	r3, [r7, #3]
 800c43e:	4619      	mov	r1, r3
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f003 f92c 	bl	800f69e <USBD_LL_GetRxDataSize>
 800c446:	4602      	mov	r2, r0
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c454:	68db      	ldr	r3, [r3, #12]
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c462:	4611      	mov	r1, r2
 800c464:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c466:	2300      	movs	r3, #0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c47e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d015      	beq.n	800c4b6 <USBD_CDC_EP0_RxReady+0x46>
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c490:	2bff      	cmp	r3, #255	; 0xff
 800c492:	d010      	beq.n	800c4b6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c49a:	689b      	ldr	r3, [r3, #8]
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c4a2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c4aa:	b292      	uxth	r2, r2
 800c4ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	22ff      	movs	r2, #255	; 0xff
 800c4b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800c4b6:	2300      	movs	r3, #0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3710      	adds	r7, #16
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2243      	movs	r2, #67	; 0x43
 800c4cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c4ce:	4b03      	ldr	r3, [pc, #12]	; (800c4dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr
 800c4dc:	2000009c 	.word	0x2000009c

0800c4e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2243      	movs	r2, #67	; 0x43
 800c4ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c4ee:	4b03      	ldr	r3, [pc, #12]	; (800c4fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr
 800c4fc:	20000058 	.word	0x20000058

0800c500 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2243      	movs	r2, #67	; 0x43
 800c50c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c50e:	4b03      	ldr	r3, [pc, #12]	; (800c51c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c510:	4618      	mov	r0, r3
 800c512:	370c      	adds	r7, #12
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr
 800c51c:	200000e0 	.word	0x200000e0

0800c520 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	220a      	movs	r2, #10
 800c52c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c52e:	4b03      	ldr	r3, [pc, #12]	; (800c53c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c530:	4618      	mov	r0, r3
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr
 800c53c:	20000014 	.word	0x20000014

0800c540 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d101      	bne.n	800c554 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c550:	2303      	movs	r3, #3
 800c552:	e004      	b.n	800c55e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	683a      	ldr	r2, [r7, #0]
 800c558:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	370c      	adds	r7, #12
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c56a:	b480      	push	{r7}
 800c56c:	b087      	sub	sp, #28
 800c56e:	af00      	add	r7, sp, #0
 800c570:	60f8      	str	r0, [r7, #12]
 800c572:	60b9      	str	r1, [r7, #8]
 800c574:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c57c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	68ba      	ldr	r2, [r7, #8]
 800c582:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c58e:	2300      	movs	r3, #0
}
 800c590:	4618      	mov	r0, r3
 800c592:	371c      	adds	r7, #28
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b085      	sub	sp, #20
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c5ac:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	683a      	ldr	r2, [r7, #0]
 800c5b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3714      	adds	r7, #20
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c5d2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d101      	bne.n	800c5e6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c5e2:	2303      	movs	r3, #3
 800c5e4:	e01a      	b.n	800c61c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d114      	bne.n	800c61a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c60e:	2181      	movs	r1, #129	; 0x81
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f003 f802 	bl	800f61a <USBD_LL_Transmit>

    ret = USBD_OK;
 800c616:	2300      	movs	r3, #0
 800c618:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c61a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c632:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d101      	bne.n	800c642 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c63e:	2303      	movs	r3, #3
 800c640:	e016      	b.n	800c670 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	7c1b      	ldrb	r3, [r3, #16]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d109      	bne.n	800c65e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c650:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c654:	2101      	movs	r1, #1
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f003 f800 	bl	800f65c <USBD_LL_PrepareReceive>
 800c65c:	e007      	b.n	800c66e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c664:	2340      	movs	r3, #64	; 0x40
 800c666:	2101      	movs	r1, #1
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f002 fff7 	bl	800f65c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c66e:	2300      	movs	r3, #0
}
 800c670:	4618      	mov	r0, r3
 800c672:	3710      	adds	r7, #16
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b086      	sub	sp, #24
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	60f8      	str	r0, [r7, #12]
 800c680:	60b9      	str	r1, [r7, #8]
 800c682:	4613      	mov	r3, r2
 800c684:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d101      	bne.n	800c690 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c68c:	2303      	movs	r3, #3
 800c68e:	e025      	b.n	800c6dc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c696:	2b00      	cmp	r3, #0
 800c698:	d003      	beq.n	800c6a2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2200      	movs	r2, #0
 800c69e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d003      	beq.n	800c6b4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d003      	beq.n	800c6c2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	68ba      	ldr	r2, [r7, #8]
 800c6be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	79fa      	ldrb	r2, [r7, #7]
 800c6ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c6d0:	68f8      	ldr	r0, [r7, #12]
 800c6d2:	f002 fe6d 	bl	800f3b0 <USBD_LL_Init>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c6da:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3718      	adds	r7, #24
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b084      	sub	sp, #16
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d101      	bne.n	800c6fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c6f8:	2303      	movs	r3, #3
 800c6fa:	e010      	b.n	800c71e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	683a      	ldr	r2, [r7, #0]
 800c700:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c70c:	f107 020e 	add.w	r2, r7, #14
 800c710:	4610      	mov	r0, r2
 800c712:	4798      	blx	r3
 800c714:	4602      	mov	r2, r0
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800c71c:	2300      	movs	r3, #0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b082      	sub	sp, #8
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f002 fe8a 	bl	800f448 <USBD_LL_Start>
 800c734:	4603      	mov	r3, r0
}
 800c736:	4618      	mov	r0, r3
 800c738:	3708      	adds	r7, #8
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}

0800c73e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c73e:	b480      	push	{r7}
 800c740:	b083      	sub	sp, #12
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c746:	2300      	movs	r3, #0
}
 800c748:	4618      	mov	r0, r3
 800c74a:	370c      	adds	r7, #12
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr

0800c754 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	460b      	mov	r3, r1
 800c75e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c760:	2303      	movs	r3, #3
 800c762:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d009      	beq.n	800c782 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	78fa      	ldrb	r2, [r7, #3]
 800c778:	4611      	mov	r1, r2
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	4798      	blx	r3
 800c77e:	4603      	mov	r3, r0
 800c780:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c782:	7bfb      	ldrb	r3, [r7, #15]
}
 800c784:	4618      	mov	r0, r3
 800c786:	3710      	adds	r7, #16
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	460b      	mov	r3, r1
 800c796:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d007      	beq.n	800c7b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	78fa      	ldrb	r2, [r7, #3]
 800c7ac:	4611      	mov	r1, r2
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	4798      	blx	r3
  }

  return USBD_OK;
 800c7b2:	2300      	movs	r3, #0
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3708      	adds	r7, #8
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c7cc:	6839      	ldr	r1, [r7, #0]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f000 ff2c 	bl	800d62c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c7f0:	f003 031f 	and.w	r3, r3, #31
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	d00e      	beq.n	800c816 <USBD_LL_SetupStage+0x5a>
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d302      	bcc.n	800c802 <USBD_LL_SetupStage+0x46>
 800c7fc:	2b02      	cmp	r3, #2
 800c7fe:	d014      	beq.n	800c82a <USBD_LL_SetupStage+0x6e>
 800c800:	e01d      	b.n	800c83e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c808:	4619      	mov	r1, r3
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 fa18 	bl	800cc40 <USBD_StdDevReq>
 800c810:	4603      	mov	r3, r0
 800c812:	73fb      	strb	r3, [r7, #15]
      break;
 800c814:	e020      	b.n	800c858 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c81c:	4619      	mov	r1, r3
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 fa7c 	bl	800cd1c <USBD_StdItfReq>
 800c824:	4603      	mov	r3, r0
 800c826:	73fb      	strb	r3, [r7, #15]
      break;
 800c828:	e016      	b.n	800c858 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c830:	4619      	mov	r1, r3
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 fab8 	bl	800cda8 <USBD_StdEPReq>
 800c838:	4603      	mov	r3, r0
 800c83a:	73fb      	strb	r3, [r7, #15]
      break;
 800c83c:	e00c      	b.n	800c858 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c844:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c848:	b2db      	uxtb	r3, r3
 800c84a:	4619      	mov	r1, r3
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f002 fe5b 	bl	800f508 <USBD_LL_StallEP>
 800c852:	4603      	mov	r3, r0
 800c854:	73fb      	strb	r3, [r7, #15]
      break;
 800c856:	bf00      	nop
  }

  return ret;
 800c858:	7bfb      	ldrb	r3, [r7, #15]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b086      	sub	sp, #24
 800c866:	af00      	add	r7, sp, #0
 800c868:	60f8      	str	r0, [r7, #12]
 800c86a:	460b      	mov	r3, r1
 800c86c:	607a      	str	r2, [r7, #4]
 800c86e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c870:	7afb      	ldrb	r3, [r7, #11]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d137      	bne.n	800c8e6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c87c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c884:	2b03      	cmp	r3, #3
 800c886:	d14a      	bne.n	800c91e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	689a      	ldr	r2, [r3, #8]
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	68db      	ldr	r3, [r3, #12]
 800c890:	429a      	cmp	r2, r3
 800c892:	d913      	bls.n	800c8bc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	689a      	ldr	r2, [r3, #8]
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	68db      	ldr	r3, [r3, #12]
 800c89c:	1ad2      	subs	r2, r2, r3
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	68da      	ldr	r2, [r3, #12]
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	689b      	ldr	r3, [r3, #8]
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	bf28      	it	cs
 800c8ae:	4613      	movcs	r3, r2
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	6879      	ldr	r1, [r7, #4]
 800c8b4:	68f8      	ldr	r0, [r7, #12]
 800c8b6:	f000 ffad 	bl	800d814 <USBD_CtlContinueRx>
 800c8ba:	e030      	b.n	800c91e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8c2:	691b      	ldr	r3, [r3, #16]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d00a      	beq.n	800c8de <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	d105      	bne.n	800c8de <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8d8:	691b      	ldr	r3, [r3, #16]
 800c8da:	68f8      	ldr	r0, [r7, #12]
 800c8dc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f000 ffa9 	bl	800d836 <USBD_CtlSendStatus>
 800c8e4:	e01b      	b.n	800c91e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8ec:	699b      	ldr	r3, [r3, #24]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d013      	beq.n	800c91a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c8f8:	2b03      	cmp	r3, #3
 800c8fa:	d10e      	bne.n	800c91a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c902:	699b      	ldr	r3, [r3, #24]
 800c904:	7afa      	ldrb	r2, [r7, #11]
 800c906:	4611      	mov	r1, r2
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	4798      	blx	r3
 800c90c:	4603      	mov	r3, r0
 800c90e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800c910:	7dfb      	ldrb	r3, [r7, #23]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d003      	beq.n	800c91e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800c916:	7dfb      	ldrb	r3, [r7, #23]
 800c918:	e002      	b.n	800c920 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c91a:	2303      	movs	r3, #3
 800c91c:	e000      	b.n	800c920 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800c91e:	2300      	movs	r3, #0
}
 800c920:	4618      	mov	r0, r3
 800c922:	3718      	adds	r7, #24
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b086      	sub	sp, #24
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	460b      	mov	r3, r1
 800c932:	607a      	str	r2, [r7, #4]
 800c934:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c936:	7afb      	ldrb	r3, [r7, #11]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d16a      	bne.n	800ca12 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	3314      	adds	r3, #20
 800c940:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c948:	2b02      	cmp	r3, #2
 800c94a:	d155      	bne.n	800c9f8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	689a      	ldr	r2, [r3, #8]
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	68db      	ldr	r3, [r3, #12]
 800c954:	429a      	cmp	r2, r3
 800c956:	d914      	bls.n	800c982 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	689a      	ldr	r2, [r3, #8]
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	1ad2      	subs	r2, r2, r3
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	461a      	mov	r2, r3
 800c96c:	6879      	ldr	r1, [r7, #4]
 800c96e:	68f8      	ldr	r0, [r7, #12]
 800c970:	f000 ff22 	bl	800d7b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c974:	2300      	movs	r3, #0
 800c976:	2200      	movs	r2, #0
 800c978:	2100      	movs	r1, #0
 800c97a:	68f8      	ldr	r0, [r7, #12]
 800c97c:	f002 fe6e 	bl	800f65c <USBD_LL_PrepareReceive>
 800c980:	e03a      	b.n	800c9f8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	68da      	ldr	r2, [r3, #12]
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	689b      	ldr	r3, [r3, #8]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d11c      	bne.n	800c9c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	685a      	ldr	r2, [r3, #4]
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c996:	429a      	cmp	r2, r3
 800c998:	d316      	bcc.n	800c9c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	685a      	ldr	r2, [r3, #4]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d20f      	bcs.n	800c9c8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	2100      	movs	r1, #0
 800c9ac:	68f8      	ldr	r0, [r7, #12]
 800c9ae:	f000 ff03 	bl	800d7b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	2200      	movs	r2, #0
 800c9be:	2100      	movs	r1, #0
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f002 fe4b 	bl	800f65c <USBD_LL_PrepareReceive>
 800c9c6:	e017      	b.n	800c9f8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9ce:	68db      	ldr	r3, [r3, #12]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d00a      	beq.n	800c9ea <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c9da:	2b03      	cmp	r3, #3
 800c9dc:	d105      	bne.n	800c9ea <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9e4:	68db      	ldr	r3, [r3, #12]
 800c9e6:	68f8      	ldr	r0, [r7, #12]
 800c9e8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9ea:	2180      	movs	r1, #128	; 0x80
 800c9ec:	68f8      	ldr	r0, [r7, #12]
 800c9ee:	f002 fd8b 	bl	800f508 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f000 ff32 	bl	800d85c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d123      	bne.n	800ca4a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	f7ff fe9b 	bl	800c73e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ca10:	e01b      	b.n	800ca4a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca18:	695b      	ldr	r3, [r3, #20]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d013      	beq.n	800ca46 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ca24:	2b03      	cmp	r3, #3
 800ca26:	d10e      	bne.n	800ca46 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca2e:	695b      	ldr	r3, [r3, #20]
 800ca30:	7afa      	ldrb	r2, [r7, #11]
 800ca32:	4611      	mov	r1, r2
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	4798      	blx	r3
 800ca38:	4603      	mov	r3, r0
 800ca3a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ca3c:	7dfb      	ldrb	r3, [r7, #23]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d003      	beq.n	800ca4a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800ca42:	7dfb      	ldrb	r3, [r7, #23]
 800ca44:	e002      	b.n	800ca4c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ca46:	2303      	movs	r3, #3
 800ca48:	e000      	b.n	800ca4c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800ca4a:	2300      	movs	r3, #0
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3718      	adds	r7, #24
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2200      	movs	r2, #0
 800ca68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2200      	movs	r2, #0
 800ca76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d009      	beq.n	800ca98 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	6852      	ldr	r2, [r2, #4]
 800ca90:	b2d2      	uxtb	r2, r2
 800ca92:	4611      	mov	r1, r2
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ca98:	2340      	movs	r3, #64	; 0x40
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	2100      	movs	r1, #0
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f002 fced 	bl	800f47e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2201      	movs	r2, #1
 800caa8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2240      	movs	r2, #64	; 0x40
 800cab0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cab4:	2340      	movs	r3, #64	; 0x40
 800cab6:	2200      	movs	r2, #0
 800cab8:	2180      	movs	r1, #128	; 0x80
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f002 fcdf 	bl	800f47e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2201      	movs	r2, #1
 800cac4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2240      	movs	r2, #64	; 0x40
 800caca:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800cacc:	2300      	movs	r3, #0
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3708      	adds	r7, #8
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}

0800cad6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cad6:	b480      	push	{r7}
 800cad8:	b083      	sub	sp, #12
 800cada:	af00      	add	r7, sp, #0
 800cadc:	6078      	str	r0, [r7, #4]
 800cade:	460b      	mov	r3, r1
 800cae0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	78fa      	ldrb	r2, [r7, #3]
 800cae6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cae8:	2300      	movs	r3, #0
}
 800caea:	4618      	mov	r0, r3
 800caec:	370c      	adds	r7, #12
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr

0800caf6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800caf6:	b480      	push	{r7}
 800caf8:	b083      	sub	sp, #12
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2204      	movs	r2, #4
 800cb0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cb12:	2300      	movs	r3, #0
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb2e:	2b04      	cmp	r3, #4
 800cb30:	d105      	bne.n	800cb3e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cb3e:	2300      	movs	r3, #0
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	370c      	adds	r7, #12
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb5a:	2b03      	cmp	r3, #3
 800cb5c:	d10b      	bne.n	800cb76 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb64:	69db      	ldr	r3, [r3, #28]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d005      	beq.n	800cb76 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb70:	69db      	ldr	r3, [r3, #28]
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3708      	adds	r7, #8
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b083      	sub	sp, #12
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	460b      	mov	r3, r1
 800cb8a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	370c      	adds	r7, #12
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr

0800cb9a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cb9a:	b480      	push	{r7}
 800cb9c:	b083      	sub	sp, #12
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
 800cba2:	460b      	mov	r3, r1
 800cba4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	370c      	adds	r7, #12
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr

0800cbb4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cbbc:	2300      	movs	r3, #0
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	370c      	adds	r7, #12
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr

0800cbca <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b082      	sub	sp, #8
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d009      	beq.n	800cbf8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	6852      	ldr	r2, [r2, #4]
 800cbf0:	b2d2      	uxtb	r2, r2
 800cbf2:	4611      	mov	r1, r2
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	4798      	blx	r3
  }

  return USBD_OK;
 800cbf8:	2300      	movs	r3, #0
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3708      	adds	r7, #8
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cc02:	b480      	push	{r7}
 800cc04:	b087      	sub	sp, #28
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	3301      	adds	r3, #1
 800cc18:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cc20:	8a3b      	ldrh	r3, [r7, #16]
 800cc22:	021b      	lsls	r3, r3, #8
 800cc24:	b21a      	sxth	r2, r3
 800cc26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	b21b      	sxth	r3, r3
 800cc2e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cc30:	89fb      	ldrh	r3, [r7, #14]
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	371c      	adds	r7, #28
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr
	...

0800cc40 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b084      	sub	sp, #16
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cc56:	2b20      	cmp	r3, #32
 800cc58:	d004      	beq.n	800cc64 <USBD_StdDevReq+0x24>
 800cc5a:	2b40      	cmp	r3, #64	; 0x40
 800cc5c:	d002      	beq.n	800cc64 <USBD_StdDevReq+0x24>
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d00a      	beq.n	800cc78 <USBD_StdDevReq+0x38>
 800cc62:	e050      	b.n	800cd06 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	6839      	ldr	r1, [r7, #0]
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	4798      	blx	r3
 800cc72:	4603      	mov	r3, r0
 800cc74:	73fb      	strb	r3, [r7, #15]
    break;
 800cc76:	e04b      	b.n	800cd10 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	785b      	ldrb	r3, [r3, #1]
 800cc7c:	2b09      	cmp	r3, #9
 800cc7e:	d83c      	bhi.n	800ccfa <USBD_StdDevReq+0xba>
 800cc80:	a201      	add	r2, pc, #4	; (adr r2, 800cc88 <USBD_StdDevReq+0x48>)
 800cc82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc86:	bf00      	nop
 800cc88:	0800ccdd 	.word	0x0800ccdd
 800cc8c:	0800ccf1 	.word	0x0800ccf1
 800cc90:	0800ccfb 	.word	0x0800ccfb
 800cc94:	0800cce7 	.word	0x0800cce7
 800cc98:	0800ccfb 	.word	0x0800ccfb
 800cc9c:	0800ccbb 	.word	0x0800ccbb
 800cca0:	0800ccb1 	.word	0x0800ccb1
 800cca4:	0800ccfb 	.word	0x0800ccfb
 800cca8:	0800ccd3 	.word	0x0800ccd3
 800ccac:	0800ccc5 	.word	0x0800ccc5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ccb0:	6839      	ldr	r1, [r7, #0]
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 f9ce 	bl	800d054 <USBD_GetDescriptor>
      break;
 800ccb8:	e024      	b.n	800cd04 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ccba:	6839      	ldr	r1, [r7, #0]
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f000 fb33 	bl	800d328 <USBD_SetAddress>
      break;
 800ccc2:	e01f      	b.n	800cd04 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ccc4:	6839      	ldr	r1, [r7, #0]
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f000 fb70 	bl	800d3ac <USBD_SetConfig>
 800cccc:	4603      	mov	r3, r0
 800ccce:	73fb      	strb	r3, [r7, #15]
      break;
 800ccd0:	e018      	b.n	800cd04 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ccd2:	6839      	ldr	r1, [r7, #0]
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 fc0d 	bl	800d4f4 <USBD_GetConfig>
      break;
 800ccda:	e013      	b.n	800cd04 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ccdc:	6839      	ldr	r1, [r7, #0]
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 fc3c 	bl	800d55c <USBD_GetStatus>
      break;
 800cce4:	e00e      	b.n	800cd04 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800cce6:	6839      	ldr	r1, [r7, #0]
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f000 fc6a 	bl	800d5c2 <USBD_SetFeature>
      break;
 800ccee:	e009      	b.n	800cd04 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ccf0:	6839      	ldr	r1, [r7, #0]
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 fc79 	bl	800d5ea <USBD_ClrFeature>
      break;
 800ccf8:	e004      	b.n	800cd04 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ccfa:	6839      	ldr	r1, [r7, #0]
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f000 fccf 	bl	800d6a0 <USBD_CtlError>
      break;
 800cd02:	bf00      	nop
    }
    break;
 800cd04:	e004      	b.n	800cd10 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800cd06:	6839      	ldr	r1, [r7, #0]
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 fcc9 	bl	800d6a0 <USBD_CtlError>
    break;
 800cd0e:	bf00      	nop
  }

  return ret;
 800cd10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3710      	adds	r7, #16
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop

0800cd1c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd26:	2300      	movs	r3, #0
 800cd28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd32:	2b20      	cmp	r3, #32
 800cd34:	d003      	beq.n	800cd3e <USBD_StdItfReq+0x22>
 800cd36:	2b40      	cmp	r3, #64	; 0x40
 800cd38:	d001      	beq.n	800cd3e <USBD_StdItfReq+0x22>
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d12a      	bne.n	800cd94 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd44:	3b01      	subs	r3, #1
 800cd46:	2b02      	cmp	r3, #2
 800cd48:	d81d      	bhi.n	800cd86 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	889b      	ldrh	r3, [r3, #4]
 800cd4e:	b2db      	uxtb	r3, r3
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d813      	bhi.n	800cd7c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd5a:	689b      	ldr	r3, [r3, #8]
 800cd5c:	6839      	ldr	r1, [r7, #0]
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	4798      	blx	r3
 800cd62:	4603      	mov	r3, r0
 800cd64:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	88db      	ldrh	r3, [r3, #6]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d110      	bne.n	800cd90 <USBD_StdItfReq+0x74>
 800cd6e:	7bfb      	ldrb	r3, [r7, #15]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d10d      	bne.n	800cd90 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 fd5e 	bl	800d836 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800cd7a:	e009      	b.n	800cd90 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800cd7c:	6839      	ldr	r1, [r7, #0]
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 fc8e 	bl	800d6a0 <USBD_CtlError>
      break;
 800cd84:	e004      	b.n	800cd90 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800cd86:	6839      	ldr	r1, [r7, #0]
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 fc89 	bl	800d6a0 <USBD_CtlError>
      break;
 800cd8e:	e000      	b.n	800cd92 <USBD_StdItfReq+0x76>
      break;
 800cd90:	bf00      	nop
    }
    break;
 800cd92:	e004      	b.n	800cd9e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800cd94:	6839      	ldr	r1, [r7, #0]
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 fc82 	bl	800d6a0 <USBD_CtlError>
    break;
 800cd9c:	bf00      	nop
  }

  return ret;
 800cd9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3710      	adds	r7, #16
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	889b      	ldrh	r3, [r3, #4]
 800cdba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cdc4:	2b20      	cmp	r3, #32
 800cdc6:	d004      	beq.n	800cdd2 <USBD_StdEPReq+0x2a>
 800cdc8:	2b40      	cmp	r3, #64	; 0x40
 800cdca:	d002      	beq.n	800cdd2 <USBD_StdEPReq+0x2a>
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d00a      	beq.n	800cde6 <USBD_StdEPReq+0x3e>
 800cdd0:	e135      	b.n	800d03e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdd8:	689b      	ldr	r3, [r3, #8]
 800cdda:	6839      	ldr	r1, [r7, #0]
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	4798      	blx	r3
 800cde0:	4603      	mov	r3, r0
 800cde2:	73fb      	strb	r3, [r7, #15]
    break;
 800cde4:	e130      	b.n	800d048 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	785b      	ldrb	r3, [r3, #1]
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d03e      	beq.n	800ce6c <USBD_StdEPReq+0xc4>
 800cdee:	2b03      	cmp	r3, #3
 800cdf0:	d002      	beq.n	800cdf8 <USBD_StdEPReq+0x50>
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d077      	beq.n	800cee6 <USBD_StdEPReq+0x13e>
 800cdf6:	e11c      	b.n	800d032 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdfe:	2b02      	cmp	r3, #2
 800ce00:	d002      	beq.n	800ce08 <USBD_StdEPReq+0x60>
 800ce02:	2b03      	cmp	r3, #3
 800ce04:	d015      	beq.n	800ce32 <USBD_StdEPReq+0x8a>
 800ce06:	e02b      	b.n	800ce60 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce08:	7bbb      	ldrb	r3, [r7, #14]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d00c      	beq.n	800ce28 <USBD_StdEPReq+0x80>
 800ce0e:	7bbb      	ldrb	r3, [r7, #14]
 800ce10:	2b80      	cmp	r3, #128	; 0x80
 800ce12:	d009      	beq.n	800ce28 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce14:	7bbb      	ldrb	r3, [r7, #14]
 800ce16:	4619      	mov	r1, r3
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f002 fb75 	bl	800f508 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce1e:	2180      	movs	r1, #128	; 0x80
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f002 fb71 	bl	800f508 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ce26:	e020      	b.n	800ce6a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800ce28:	6839      	ldr	r1, [r7, #0]
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 fc38 	bl	800d6a0 <USBD_CtlError>
        break;
 800ce30:	e01b      	b.n	800ce6a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	885b      	ldrh	r3, [r3, #2]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d10e      	bne.n	800ce58 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ce3a:	7bbb      	ldrb	r3, [r7, #14]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00b      	beq.n	800ce58 <USBD_StdEPReq+0xb0>
 800ce40:	7bbb      	ldrb	r3, [r7, #14]
 800ce42:	2b80      	cmp	r3, #128	; 0x80
 800ce44:	d008      	beq.n	800ce58 <USBD_StdEPReq+0xb0>
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	88db      	ldrh	r3, [r3, #6]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d104      	bne.n	800ce58 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce4e:	7bbb      	ldrb	r3, [r7, #14]
 800ce50:	4619      	mov	r1, r3
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f002 fb58 	bl	800f508 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f000 fcec 	bl	800d836 <USBD_CtlSendStatus>

        break;
 800ce5e:	e004      	b.n	800ce6a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800ce60:	6839      	ldr	r1, [r7, #0]
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 fc1c 	bl	800d6a0 <USBD_CtlError>
        break;
 800ce68:	bf00      	nop
      }
      break;
 800ce6a:	e0e7      	b.n	800d03c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce72:	2b02      	cmp	r3, #2
 800ce74:	d002      	beq.n	800ce7c <USBD_StdEPReq+0xd4>
 800ce76:	2b03      	cmp	r3, #3
 800ce78:	d015      	beq.n	800cea6 <USBD_StdEPReq+0xfe>
 800ce7a:	e02d      	b.n	800ced8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce7c:	7bbb      	ldrb	r3, [r7, #14]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00c      	beq.n	800ce9c <USBD_StdEPReq+0xf4>
 800ce82:	7bbb      	ldrb	r3, [r7, #14]
 800ce84:	2b80      	cmp	r3, #128	; 0x80
 800ce86:	d009      	beq.n	800ce9c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce88:	7bbb      	ldrb	r3, [r7, #14]
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f002 fb3b 	bl	800f508 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce92:	2180      	movs	r1, #128	; 0x80
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f002 fb37 	bl	800f508 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ce9a:	e023      	b.n	800cee4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800ce9c:	6839      	ldr	r1, [r7, #0]
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 fbfe 	bl	800d6a0 <USBD_CtlError>
        break;
 800cea4:	e01e      	b.n	800cee4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	885b      	ldrh	r3, [r3, #2]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d119      	bne.n	800cee2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ceae:	7bbb      	ldrb	r3, [r7, #14]
 800ceb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d004      	beq.n	800cec2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ceb8:	7bbb      	ldrb	r3, [r7, #14]
 800ceba:	4619      	mov	r1, r3
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f002 fb42 	bl	800f546 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 fcb7 	bl	800d836 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cece:	689b      	ldr	r3, [r3, #8]
 800ced0:	6839      	ldr	r1, [r7, #0]
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	4798      	blx	r3
        }
        break;
 800ced6:	e004      	b.n	800cee2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800ced8:	6839      	ldr	r1, [r7, #0]
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 fbe0 	bl	800d6a0 <USBD_CtlError>
        break;
 800cee0:	e000      	b.n	800cee4 <USBD_StdEPReq+0x13c>
        break;
 800cee2:	bf00      	nop
      }
      break;
 800cee4:	e0aa      	b.n	800d03c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ceec:	2b02      	cmp	r3, #2
 800ceee:	d002      	beq.n	800cef6 <USBD_StdEPReq+0x14e>
 800cef0:	2b03      	cmp	r3, #3
 800cef2:	d032      	beq.n	800cf5a <USBD_StdEPReq+0x1b2>
 800cef4:	e097      	b.n	800d026 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cef6:	7bbb      	ldrb	r3, [r7, #14]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d007      	beq.n	800cf0c <USBD_StdEPReq+0x164>
 800cefc:	7bbb      	ldrb	r3, [r7, #14]
 800cefe:	2b80      	cmp	r3, #128	; 0x80
 800cf00:	d004      	beq.n	800cf0c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800cf02:	6839      	ldr	r1, [r7, #0]
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f000 fbcb 	bl	800d6a0 <USBD_CtlError>
          break;
 800cf0a:	e091      	b.n	800d030 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	da0b      	bge.n	800cf2c <USBD_StdEPReq+0x184>
 800cf14:	7bbb      	ldrb	r3, [r7, #14]
 800cf16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf1a:	4613      	mov	r3, r2
 800cf1c:	009b      	lsls	r3, r3, #2
 800cf1e:	4413      	add	r3, r2
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	3310      	adds	r3, #16
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	4413      	add	r3, r2
 800cf28:	3304      	adds	r3, #4
 800cf2a:	e00b      	b.n	800cf44 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800cf2c:	7bbb      	ldrb	r3, [r7, #14]
 800cf2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf32:	4613      	mov	r3, r2
 800cf34:	009b      	lsls	r3, r3, #2
 800cf36:	4413      	add	r3, r2
 800cf38:	009b      	lsls	r3, r3, #2
 800cf3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	4413      	add	r3, r2
 800cf42:	3304      	adds	r3, #4
 800cf44:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	2202      	movs	r2, #2
 800cf50:	4619      	mov	r1, r3
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 fc15 	bl	800d782 <USBD_CtlSendData>
        break;
 800cf58:	e06a      	b.n	800d030 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800cf5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	da11      	bge.n	800cf86 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cf62:	7bbb      	ldrb	r3, [r7, #14]
 800cf64:	f003 020f 	and.w	r2, r3, #15
 800cf68:	6879      	ldr	r1, [r7, #4]
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	009b      	lsls	r3, r3, #2
 800cf6e:	4413      	add	r3, r2
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	440b      	add	r3, r1
 800cf74:	3324      	adds	r3, #36	; 0x24
 800cf76:	881b      	ldrh	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d117      	bne.n	800cfac <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800cf7c:	6839      	ldr	r1, [r7, #0]
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 fb8e 	bl	800d6a0 <USBD_CtlError>
            break;
 800cf84:	e054      	b.n	800d030 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cf86:	7bbb      	ldrb	r3, [r7, #14]
 800cf88:	f003 020f 	and.w	r2, r3, #15
 800cf8c:	6879      	ldr	r1, [r7, #4]
 800cf8e:	4613      	mov	r3, r2
 800cf90:	009b      	lsls	r3, r3, #2
 800cf92:	4413      	add	r3, r2
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	440b      	add	r3, r1
 800cf98:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cf9c:	881b      	ldrh	r3, [r3, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d104      	bne.n	800cfac <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800cfa2:	6839      	ldr	r1, [r7, #0]
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f000 fb7b 	bl	800d6a0 <USBD_CtlError>
            break;
 800cfaa:	e041      	b.n	800d030 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cfac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	da0b      	bge.n	800cfcc <USBD_StdEPReq+0x224>
 800cfb4:	7bbb      	ldrb	r3, [r7, #14]
 800cfb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cfba:	4613      	mov	r3, r2
 800cfbc:	009b      	lsls	r3, r3, #2
 800cfbe:	4413      	add	r3, r2
 800cfc0:	009b      	lsls	r3, r3, #2
 800cfc2:	3310      	adds	r3, #16
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	4413      	add	r3, r2
 800cfc8:	3304      	adds	r3, #4
 800cfca:	e00b      	b.n	800cfe4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800cfcc:	7bbb      	ldrb	r3, [r7, #14]
 800cfce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cfd2:	4613      	mov	r3, r2
 800cfd4:	009b      	lsls	r3, r3, #2
 800cfd6:	4413      	add	r3, r2
 800cfd8:	009b      	lsls	r3, r3, #2
 800cfda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	4413      	add	r3, r2
 800cfe2:	3304      	adds	r3, #4
 800cfe4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cfe6:	7bbb      	ldrb	r3, [r7, #14]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d002      	beq.n	800cff2 <USBD_StdEPReq+0x24a>
 800cfec:	7bbb      	ldrb	r3, [r7, #14]
 800cfee:	2b80      	cmp	r3, #128	; 0x80
 800cff0:	d103      	bne.n	800cffa <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	2200      	movs	r2, #0
 800cff6:	601a      	str	r2, [r3, #0]
 800cff8:	e00e      	b.n	800d018 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cffa:	7bbb      	ldrb	r3, [r7, #14]
 800cffc:	4619      	mov	r1, r3
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f002 fac0 	bl	800f584 <USBD_LL_IsStallEP>
 800d004:	4603      	mov	r3, r0
 800d006:	2b00      	cmp	r3, #0
 800d008:	d003      	beq.n	800d012 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	2201      	movs	r2, #1
 800d00e:	601a      	str	r2, [r3, #0]
 800d010:	e002      	b.n	800d018 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	2200      	movs	r2, #0
 800d016:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	2202      	movs	r2, #2
 800d01c:	4619      	mov	r1, r3
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 fbaf 	bl	800d782 <USBD_CtlSendData>
          break;
 800d024:	e004      	b.n	800d030 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800d026:	6839      	ldr	r1, [r7, #0]
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 fb39 	bl	800d6a0 <USBD_CtlError>
        break;
 800d02e:	bf00      	nop
      }
      break;
 800d030:	e004      	b.n	800d03c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800d032:	6839      	ldr	r1, [r7, #0]
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 fb33 	bl	800d6a0 <USBD_CtlError>
      break;
 800d03a:	bf00      	nop
    }
    break;
 800d03c:	e004      	b.n	800d048 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800d03e:	6839      	ldr	r1, [r7, #0]
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f000 fb2d 	bl	800d6a0 <USBD_CtlError>
    break;
 800d046:	bf00      	nop
  }

  return ret;
 800d048:	7bfb      	ldrb	r3, [r7, #15]
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3710      	adds	r7, #16
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
	...

0800d054 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d05e:	2300      	movs	r3, #0
 800d060:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d062:	2300      	movs	r3, #0
 800d064:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d066:	2300      	movs	r3, #0
 800d068:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	885b      	ldrh	r3, [r3, #2]
 800d06e:	0a1b      	lsrs	r3, r3, #8
 800d070:	b29b      	uxth	r3, r3
 800d072:	3b01      	subs	r3, #1
 800d074:	2b06      	cmp	r3, #6
 800d076:	f200 8128 	bhi.w	800d2ca <USBD_GetDescriptor+0x276>
 800d07a:	a201      	add	r2, pc, #4	; (adr r2, 800d080 <USBD_GetDescriptor+0x2c>)
 800d07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d080:	0800d09d 	.word	0x0800d09d
 800d084:	0800d0b5 	.word	0x0800d0b5
 800d088:	0800d0f5 	.word	0x0800d0f5
 800d08c:	0800d2cb 	.word	0x0800d2cb
 800d090:	0800d2cb 	.word	0x0800d2cb
 800d094:	0800d26b 	.word	0x0800d26b
 800d098:	0800d297 	.word	0x0800d297
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	7c12      	ldrb	r2, [r2, #16]
 800d0a8:	f107 0108 	add.w	r1, r7, #8
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	4798      	blx	r3
 800d0b0:	60f8      	str	r0, [r7, #12]
    break;
 800d0b2:	e112      	b.n	800d2da <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	7c1b      	ldrb	r3, [r3, #16]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d10d      	bne.n	800d0d8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0c4:	f107 0208 	add.w	r2, r7, #8
 800d0c8:	4610      	mov	r0, r2
 800d0ca:	4798      	blx	r3
 800d0cc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	2202      	movs	r2, #2
 800d0d4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800d0d6:	e100      	b.n	800d2da <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e0:	f107 0208 	add.w	r2, r7, #8
 800d0e4:	4610      	mov	r0, r2
 800d0e6:	4798      	blx	r3
 800d0e8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	2202      	movs	r2, #2
 800d0f0:	701a      	strb	r2, [r3, #0]
    break;
 800d0f2:	e0f2      	b.n	800d2da <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	885b      	ldrh	r3, [r3, #2]
 800d0f8:	b2db      	uxtb	r3, r3
 800d0fa:	2b05      	cmp	r3, #5
 800d0fc:	f200 80ac 	bhi.w	800d258 <USBD_GetDescriptor+0x204>
 800d100:	a201      	add	r2, pc, #4	; (adr r2, 800d108 <USBD_GetDescriptor+0xb4>)
 800d102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d106:	bf00      	nop
 800d108:	0800d121 	.word	0x0800d121
 800d10c:	0800d155 	.word	0x0800d155
 800d110:	0800d189 	.word	0x0800d189
 800d114:	0800d1bd 	.word	0x0800d1bd
 800d118:	0800d1f1 	.word	0x0800d1f1
 800d11c:	0800d225 	.word	0x0800d225
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d00b      	beq.n	800d144 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	7c12      	ldrb	r2, [r2, #16]
 800d138:	f107 0108 	add.w	r1, r7, #8
 800d13c:	4610      	mov	r0, r2
 800d13e:	4798      	blx	r3
 800d140:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d142:	e091      	b.n	800d268 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d144:	6839      	ldr	r1, [r7, #0]
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 faaa 	bl	800d6a0 <USBD_CtlError>
        err++;
 800d14c:	7afb      	ldrb	r3, [r7, #11]
 800d14e:	3301      	adds	r3, #1
 800d150:	72fb      	strb	r3, [r7, #11]
      break;
 800d152:	e089      	b.n	800d268 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d15a:	689b      	ldr	r3, [r3, #8]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00b      	beq.n	800d178 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d166:	689b      	ldr	r3, [r3, #8]
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	7c12      	ldrb	r2, [r2, #16]
 800d16c:	f107 0108 	add.w	r1, r7, #8
 800d170:	4610      	mov	r0, r2
 800d172:	4798      	blx	r3
 800d174:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d176:	e077      	b.n	800d268 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d178:	6839      	ldr	r1, [r7, #0]
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 fa90 	bl	800d6a0 <USBD_CtlError>
        err++;
 800d180:	7afb      	ldrb	r3, [r7, #11]
 800d182:	3301      	adds	r3, #1
 800d184:	72fb      	strb	r3, [r7, #11]
      break;
 800d186:	e06f      	b.n	800d268 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d00b      	beq.n	800d1ac <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d19a:	68db      	ldr	r3, [r3, #12]
 800d19c:	687a      	ldr	r2, [r7, #4]
 800d19e:	7c12      	ldrb	r2, [r2, #16]
 800d1a0:	f107 0108 	add.w	r1, r7, #8
 800d1a4:	4610      	mov	r0, r2
 800d1a6:	4798      	blx	r3
 800d1a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d1aa:	e05d      	b.n	800d268 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d1ac:	6839      	ldr	r1, [r7, #0]
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 fa76 	bl	800d6a0 <USBD_CtlError>
        err++;
 800d1b4:	7afb      	ldrb	r3, [r7, #11]
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	72fb      	strb	r3, [r7, #11]
      break;
 800d1ba:	e055      	b.n	800d268 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1c2:	691b      	ldr	r3, [r3, #16]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d00b      	beq.n	800d1e0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1ce:	691b      	ldr	r3, [r3, #16]
 800d1d0:	687a      	ldr	r2, [r7, #4]
 800d1d2:	7c12      	ldrb	r2, [r2, #16]
 800d1d4:	f107 0108 	add.w	r1, r7, #8
 800d1d8:	4610      	mov	r0, r2
 800d1da:	4798      	blx	r3
 800d1dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d1de:	e043      	b.n	800d268 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d1e0:	6839      	ldr	r1, [r7, #0]
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f000 fa5c 	bl	800d6a0 <USBD_CtlError>
        err++;
 800d1e8:	7afb      	ldrb	r3, [r7, #11]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	72fb      	strb	r3, [r7, #11]
      break;
 800d1ee:	e03b      	b.n	800d268 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1f6:	695b      	ldr	r3, [r3, #20]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00b      	beq.n	800d214 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d202:	695b      	ldr	r3, [r3, #20]
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	7c12      	ldrb	r2, [r2, #16]
 800d208:	f107 0108 	add.w	r1, r7, #8
 800d20c:	4610      	mov	r0, r2
 800d20e:	4798      	blx	r3
 800d210:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d212:	e029      	b.n	800d268 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d214:	6839      	ldr	r1, [r7, #0]
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 fa42 	bl	800d6a0 <USBD_CtlError>
        err++;
 800d21c:	7afb      	ldrb	r3, [r7, #11]
 800d21e:	3301      	adds	r3, #1
 800d220:	72fb      	strb	r3, [r7, #11]
      break;
 800d222:	e021      	b.n	800d268 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d22a:	699b      	ldr	r3, [r3, #24]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d00b      	beq.n	800d248 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d236:	699b      	ldr	r3, [r3, #24]
 800d238:	687a      	ldr	r2, [r7, #4]
 800d23a:	7c12      	ldrb	r2, [r2, #16]
 800d23c:	f107 0108 	add.w	r1, r7, #8
 800d240:	4610      	mov	r0, r2
 800d242:	4798      	blx	r3
 800d244:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d246:	e00f      	b.n	800d268 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800d248:	6839      	ldr	r1, [r7, #0]
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 fa28 	bl	800d6a0 <USBD_CtlError>
        err++;
 800d250:	7afb      	ldrb	r3, [r7, #11]
 800d252:	3301      	adds	r3, #1
 800d254:	72fb      	strb	r3, [r7, #11]
      break;
 800d256:	e007      	b.n	800d268 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800d258:	6839      	ldr	r1, [r7, #0]
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 fa20 	bl	800d6a0 <USBD_CtlError>
      err++;
 800d260:	7afb      	ldrb	r3, [r7, #11]
 800d262:	3301      	adds	r3, #1
 800d264:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800d266:	bf00      	nop
    }
    break;
 800d268:	e037      	b.n	800d2da <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	7c1b      	ldrb	r3, [r3, #16]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d109      	bne.n	800d286 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d27a:	f107 0208 	add.w	r2, r7, #8
 800d27e:	4610      	mov	r0, r2
 800d280:	4798      	blx	r3
 800d282:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800d284:	e029      	b.n	800d2da <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 fa09 	bl	800d6a0 <USBD_CtlError>
      err++;
 800d28e:	7afb      	ldrb	r3, [r7, #11]
 800d290:	3301      	adds	r3, #1
 800d292:	72fb      	strb	r3, [r7, #11]
    break;
 800d294:	e021      	b.n	800d2da <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	7c1b      	ldrb	r3, [r3, #16]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d10d      	bne.n	800d2ba <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2a6:	f107 0208 	add.w	r2, r7, #8
 800d2aa:	4610      	mov	r0, r2
 800d2ac:	4798      	blx	r3
 800d2ae:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	2207      	movs	r2, #7
 800d2b6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800d2b8:	e00f      	b.n	800d2da <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800d2ba:	6839      	ldr	r1, [r7, #0]
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f000 f9ef 	bl	800d6a0 <USBD_CtlError>
      err++;
 800d2c2:	7afb      	ldrb	r3, [r7, #11]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	72fb      	strb	r3, [r7, #11]
    break;
 800d2c8:	e007      	b.n	800d2da <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800d2ca:	6839      	ldr	r1, [r7, #0]
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 f9e7 	bl	800d6a0 <USBD_CtlError>
    err++;
 800d2d2:	7afb      	ldrb	r3, [r7, #11]
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	72fb      	strb	r3, [r7, #11]
    break;
 800d2d8:	bf00      	nop
  }

  if (err != 0U)
 800d2da:	7afb      	ldrb	r3, [r7, #11]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d11e      	bne.n	800d31e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	88db      	ldrh	r3, [r3, #6]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d016      	beq.n	800d316 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800d2e8:	893b      	ldrh	r3, [r7, #8]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d00e      	beq.n	800d30c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	88da      	ldrh	r2, [r3, #6]
 800d2f2:	893b      	ldrh	r3, [r7, #8]
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	bf28      	it	cs
 800d2f8:	4613      	movcs	r3, r2
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800d2fe:	893b      	ldrh	r3, [r7, #8]
 800d300:	461a      	mov	r2, r3
 800d302:	68f9      	ldr	r1, [r7, #12]
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f000 fa3c 	bl	800d782 <USBD_CtlSendData>
 800d30a:	e009      	b.n	800d320 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800d30c:	6839      	ldr	r1, [r7, #0]
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 f9c6 	bl	800d6a0 <USBD_CtlError>
 800d314:	e004      	b.n	800d320 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 fa8d 	bl	800d836 <USBD_CtlSendStatus>
 800d31c:	e000      	b.n	800d320 <USBD_GetDescriptor+0x2cc>
    return;
 800d31e:	bf00      	nop
    }
  }
}
 800d320:	3710      	adds	r7, #16
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop

0800d328 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	889b      	ldrh	r3, [r3, #4]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d130      	bne.n	800d39c <USBD_SetAddress+0x74>
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	88db      	ldrh	r3, [r3, #6]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d12c      	bne.n	800d39c <USBD_SetAddress+0x74>
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	885b      	ldrh	r3, [r3, #2]
 800d346:	2b7f      	cmp	r3, #127	; 0x7f
 800d348:	d828      	bhi.n	800d39c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	885b      	ldrh	r3, [r3, #2]
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d354:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d35c:	2b03      	cmp	r3, #3
 800d35e:	d104      	bne.n	800d36a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800d360:	6839      	ldr	r1, [r7, #0]
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 f99c 	bl	800d6a0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d368:	e01c      	b.n	800d3a4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	7bfa      	ldrb	r2, [r7, #15]
 800d36e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d372:	7bfb      	ldrb	r3, [r7, #15]
 800d374:	4619      	mov	r1, r3
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f002 f930 	bl	800f5dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f000 fa5a 	bl	800d836 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d382:	7bfb      	ldrb	r3, [r7, #15]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d004      	beq.n	800d392 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2202      	movs	r2, #2
 800d38c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d390:	e008      	b.n	800d3a4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2201      	movs	r2, #1
 800d396:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d39a:	e003      	b.n	800d3a4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d39c:	6839      	ldr	r1, [r7, #0]
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 f97e 	bl	800d6a0 <USBD_CtlError>
  }
}
 800d3a4:	bf00      	nop
 800d3a6:	3710      	adds	r7, #16
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	885b      	ldrh	r3, [r3, #2]
 800d3be:	b2da      	uxtb	r2, r3
 800d3c0:	4b4b      	ldr	r3, [pc, #300]	; (800d4f0 <USBD_SetConfig+0x144>)
 800d3c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d3c4:	4b4a      	ldr	r3, [pc, #296]	; (800d4f0 <USBD_SetConfig+0x144>)
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d905      	bls.n	800d3d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d3cc:	6839      	ldr	r1, [r7, #0]
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f000 f966 	bl	800d6a0 <USBD_CtlError>
    return USBD_FAIL;
 800d3d4:	2303      	movs	r3, #3
 800d3d6:	e087      	b.n	800d4e8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3de:	2b02      	cmp	r3, #2
 800d3e0:	d002      	beq.n	800d3e8 <USBD_SetConfig+0x3c>
 800d3e2:	2b03      	cmp	r3, #3
 800d3e4:	d025      	beq.n	800d432 <USBD_SetConfig+0x86>
 800d3e6:	e071      	b.n	800d4cc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800d3e8:	4b41      	ldr	r3, [pc, #260]	; (800d4f0 <USBD_SetConfig+0x144>)
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d01c      	beq.n	800d42a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800d3f0:	4b3f      	ldr	r3, [pc, #252]	; (800d4f0 <USBD_SetConfig+0x144>)
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800d3fa:	4b3d      	ldr	r3, [pc, #244]	; (800d4f0 <USBD_SetConfig+0x144>)
 800d3fc:	781b      	ldrb	r3, [r3, #0]
 800d3fe:	4619      	mov	r1, r3
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f7ff f9a7 	bl	800c754 <USBD_SetClassConfig>
 800d406:	4603      	mov	r3, r0
 800d408:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800d40a:	7bfb      	ldrb	r3, [r7, #15]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d004      	beq.n	800d41a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800d410:	6839      	ldr	r1, [r7, #0]
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f000 f944 	bl	800d6a0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800d418:	e065      	b.n	800d4e6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f000 fa0b 	bl	800d836 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2203      	movs	r2, #3
 800d424:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800d428:	e05d      	b.n	800d4e6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 fa03 	bl	800d836 <USBD_CtlSendStatus>
    break;
 800d430:	e059      	b.n	800d4e6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800d432:	4b2f      	ldr	r3, [pc, #188]	; (800d4f0 <USBD_SetConfig+0x144>)
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d112      	bne.n	800d460 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2202      	movs	r2, #2
 800d43e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800d442:	4b2b      	ldr	r3, [pc, #172]	; (800d4f0 <USBD_SetConfig+0x144>)
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	461a      	mov	r2, r3
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d44c:	4b28      	ldr	r3, [pc, #160]	; (800d4f0 <USBD_SetConfig+0x144>)
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	4619      	mov	r1, r3
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f7ff f99a 	bl	800c78c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 f9ec 	bl	800d836 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800d45e:	e042      	b.n	800d4e6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800d460:	4b23      	ldr	r3, [pc, #140]	; (800d4f0 <USBD_SetConfig+0x144>)
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	461a      	mov	r2, r3
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d02a      	beq.n	800d4c4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	685b      	ldr	r3, [r3, #4]
 800d472:	b2db      	uxtb	r3, r3
 800d474:	4619      	mov	r1, r3
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f7ff f988 	bl	800c78c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800d47c:	4b1c      	ldr	r3, [pc, #112]	; (800d4f0 <USBD_SetConfig+0x144>)
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	461a      	mov	r2, r3
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800d486:	4b1a      	ldr	r3, [pc, #104]	; (800d4f0 <USBD_SetConfig+0x144>)
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	4619      	mov	r1, r3
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f7ff f961 	bl	800c754 <USBD_SetClassConfig>
 800d492:	4603      	mov	r3, r0
 800d494:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800d496:	7bfb      	ldrb	r3, [r7, #15]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d00f      	beq.n	800d4bc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800d49c:	6839      	ldr	r1, [r7, #0]
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 f8fe 	bl	800d6a0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f7ff f96d 	bl	800c78c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2202      	movs	r2, #2
 800d4b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800d4ba:	e014      	b.n	800d4e6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 f9ba 	bl	800d836 <USBD_CtlSendStatus>
    break;
 800d4c2:	e010      	b.n	800d4e6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f000 f9b6 	bl	800d836 <USBD_CtlSendStatus>
    break;
 800d4ca:	e00c      	b.n	800d4e6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800d4cc:	6839      	ldr	r1, [r7, #0]
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 f8e6 	bl	800d6a0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d4d4:	4b06      	ldr	r3, [pc, #24]	; (800d4f0 <USBD_SetConfig+0x144>)
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	4619      	mov	r1, r3
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f7ff f956 	bl	800c78c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800d4e0:	2303      	movs	r3, #3
 800d4e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d4e4:	bf00      	nop
  }

  return ret;
 800d4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3710      	adds	r7, #16
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}
 800d4f0:	20000ea4 	.word	0x20000ea4

0800d4f4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b082      	sub	sp, #8
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	88db      	ldrh	r3, [r3, #6]
 800d502:	2b01      	cmp	r3, #1
 800d504:	d004      	beq.n	800d510 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d506:	6839      	ldr	r1, [r7, #0]
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f000 f8c9 	bl	800d6a0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800d50e:	e021      	b.n	800d554 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d516:	2b01      	cmp	r3, #1
 800d518:	db17      	blt.n	800d54a <USBD_GetConfig+0x56>
 800d51a:	2b02      	cmp	r3, #2
 800d51c:	dd02      	ble.n	800d524 <USBD_GetConfig+0x30>
 800d51e:	2b03      	cmp	r3, #3
 800d520:	d00b      	beq.n	800d53a <USBD_GetConfig+0x46>
 800d522:	e012      	b.n	800d54a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2200      	movs	r2, #0
 800d528:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	3308      	adds	r3, #8
 800d52e:	2201      	movs	r2, #1
 800d530:	4619      	mov	r1, r3
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 f925 	bl	800d782 <USBD_CtlSendData>
      break;
 800d538:	e00c      	b.n	800d554 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	3304      	adds	r3, #4
 800d53e:	2201      	movs	r2, #1
 800d540:	4619      	mov	r1, r3
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 f91d 	bl	800d782 <USBD_CtlSendData>
      break;
 800d548:	e004      	b.n	800d554 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800d54a:	6839      	ldr	r1, [r7, #0]
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 f8a7 	bl	800d6a0 <USBD_CtlError>
      break;
 800d552:	bf00      	nop
}
 800d554:	bf00      	nop
 800d556:	3708      	adds	r7, #8
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b082      	sub	sp, #8
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d56c:	3b01      	subs	r3, #1
 800d56e:	2b02      	cmp	r3, #2
 800d570:	d81e      	bhi.n	800d5b0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	88db      	ldrh	r3, [r3, #6]
 800d576:	2b02      	cmp	r3, #2
 800d578:	d004      	beq.n	800d584 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800d57a:	6839      	ldr	r1, [r7, #0]
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f000 f88f 	bl	800d6a0 <USBD_CtlError>
      break;
 800d582:	e01a      	b.n	800d5ba <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2201      	movs	r2, #1
 800d588:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d590:	2b00      	cmp	r3, #0
 800d592:	d005      	beq.n	800d5a0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	f043 0202 	orr.w	r2, r3, #2
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	330c      	adds	r3, #12
 800d5a4:	2202      	movs	r2, #2
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f000 f8ea 	bl	800d782 <USBD_CtlSendData>
    break;
 800d5ae:	e004      	b.n	800d5ba <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800d5b0:	6839      	ldr	r1, [r7, #0]
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f000 f874 	bl	800d6a0 <USBD_CtlError>
    break;
 800d5b8:	bf00      	nop
  }
}
 800d5ba:	bf00      	nop
 800d5bc:	3708      	adds	r7, #8
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}

0800d5c2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5c2:	b580      	push	{r7, lr}
 800d5c4:	b082      	sub	sp, #8
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
 800d5ca:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	885b      	ldrh	r3, [r3, #2]
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d106      	bne.n	800d5e2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f000 f92a 	bl	800d836 <USBD_CtlSendStatus>
  }
}
 800d5e2:	bf00      	nop
 800d5e4:	3708      	adds	r7, #8
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b082      	sub	sp, #8
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
 800d5f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5fa:	3b01      	subs	r3, #1
 800d5fc:	2b02      	cmp	r3, #2
 800d5fe:	d80b      	bhi.n	800d618 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	885b      	ldrh	r3, [r3, #2]
 800d604:	2b01      	cmp	r3, #1
 800d606:	d10c      	bne.n	800d622 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2200      	movs	r2, #0
 800d60c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f000 f910 	bl	800d836 <USBD_CtlSendStatus>
      }
      break;
 800d616:	e004      	b.n	800d622 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800d618:	6839      	ldr	r1, [r7, #0]
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 f840 	bl	800d6a0 <USBD_CtlError>
      break;
 800d620:	e000      	b.n	800d624 <USBD_ClrFeature+0x3a>
      break;
 800d622:	bf00      	nop
  }
}
 800d624:	bf00      	nop
 800d626:	3708      	adds	r7, #8
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b084      	sub	sp, #16
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	781a      	ldrb	r2, [r3, #0]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	3301      	adds	r3, #1
 800d646:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	781a      	ldrb	r2, [r3, #0]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	3301      	adds	r3, #1
 800d654:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d656:	68f8      	ldr	r0, [r7, #12]
 800d658:	f7ff fad3 	bl	800cc02 <SWAPBYTE>
 800d65c:	4603      	mov	r3, r0
 800d65e:	461a      	mov	r2, r3
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	3301      	adds	r3, #1
 800d668:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	3301      	adds	r3, #1
 800d66e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d670:	68f8      	ldr	r0, [r7, #12]
 800d672:	f7ff fac6 	bl	800cc02 <SWAPBYTE>
 800d676:	4603      	mov	r3, r0
 800d678:	461a      	mov	r2, r3
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	3301      	adds	r3, #1
 800d682:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	3301      	adds	r3, #1
 800d688:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d68a:	68f8      	ldr	r0, [r7, #12]
 800d68c:	f7ff fab9 	bl	800cc02 <SWAPBYTE>
 800d690:	4603      	mov	r3, r0
 800d692:	461a      	mov	r2, r3
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	80da      	strh	r2, [r3, #6]
}
 800d698:	bf00      	nop
 800d69a:	3710      	adds	r7, #16
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d6aa:	2180      	movs	r1, #128	; 0x80
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f001 ff2b 	bl	800f508 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d6b2:	2100      	movs	r1, #0
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f001 ff27 	bl	800f508 <USBD_LL_StallEP>
}
 800d6ba:	bf00      	nop
 800d6bc:	3708      	adds	r7, #8
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}

0800d6c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d6c2:	b580      	push	{r7, lr}
 800d6c4:	b086      	sub	sp, #24
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	60f8      	str	r0, [r7, #12]
 800d6ca:	60b9      	str	r1, [r7, #8]
 800d6cc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d036      	beq.n	800d746 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d6dc:	6938      	ldr	r0, [r7, #16]
 800d6de:	f000 f836 	bl	800d74e <USBD_GetLen>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	3301      	adds	r3, #1
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	005b      	lsls	r3, r3, #1
 800d6ea:	b29a      	uxth	r2, r3
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d6f0:	7dfb      	ldrb	r3, [r7, #23]
 800d6f2:	68ba      	ldr	r2, [r7, #8]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	687a      	ldr	r2, [r7, #4]
 800d6f8:	7812      	ldrb	r2, [r2, #0]
 800d6fa:	701a      	strb	r2, [r3, #0]
  idx++;
 800d6fc:	7dfb      	ldrb	r3, [r7, #23]
 800d6fe:	3301      	adds	r3, #1
 800d700:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d702:	7dfb      	ldrb	r3, [r7, #23]
 800d704:	68ba      	ldr	r2, [r7, #8]
 800d706:	4413      	add	r3, r2
 800d708:	2203      	movs	r2, #3
 800d70a:	701a      	strb	r2, [r3, #0]
  idx++;
 800d70c:	7dfb      	ldrb	r3, [r7, #23]
 800d70e:	3301      	adds	r3, #1
 800d710:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d712:	e013      	b.n	800d73c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d714:	7dfb      	ldrb	r3, [r7, #23]
 800d716:	68ba      	ldr	r2, [r7, #8]
 800d718:	4413      	add	r3, r2
 800d71a:	693a      	ldr	r2, [r7, #16]
 800d71c:	7812      	ldrb	r2, [r2, #0]
 800d71e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	3301      	adds	r3, #1
 800d724:	613b      	str	r3, [r7, #16]
    idx++;
 800d726:	7dfb      	ldrb	r3, [r7, #23]
 800d728:	3301      	adds	r3, #1
 800d72a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d72c:	7dfb      	ldrb	r3, [r7, #23]
 800d72e:	68ba      	ldr	r2, [r7, #8]
 800d730:	4413      	add	r3, r2
 800d732:	2200      	movs	r2, #0
 800d734:	701a      	strb	r2, [r3, #0]
    idx++;
 800d736:	7dfb      	ldrb	r3, [r7, #23]
 800d738:	3301      	adds	r3, #1
 800d73a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d1e7      	bne.n	800d714 <USBD_GetString+0x52>
 800d744:	e000      	b.n	800d748 <USBD_GetString+0x86>
    return;
 800d746:	bf00      	nop
  }
}
 800d748:	3718      	adds	r7, #24
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}

0800d74e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d74e:	b480      	push	{r7}
 800d750:	b085      	sub	sp, #20
 800d752:	af00      	add	r7, sp, #0
 800d754:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d756:	2300      	movs	r3, #0
 800d758:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d75e:	e005      	b.n	800d76c <USBD_GetLen+0x1e>
  {
    len++;
 800d760:	7bfb      	ldrb	r3, [r7, #15]
 800d762:	3301      	adds	r3, #1
 800d764:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	3301      	adds	r3, #1
 800d76a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d1f5      	bne.n	800d760 <USBD_GetLen+0x12>
  }

  return len;
 800d774:	7bfb      	ldrb	r3, [r7, #15]
}
 800d776:	4618      	mov	r0, r3
 800d778:	3714      	adds	r7, #20
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr

0800d782 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d782:	b580      	push	{r7, lr}
 800d784:	b084      	sub	sp, #16
 800d786:	af00      	add	r7, sp, #0
 800d788:	60f8      	str	r0, [r7, #12]
 800d78a:	60b9      	str	r1, [r7, #8]
 800d78c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2202      	movs	r2, #2
 800d792:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	68ba      	ldr	r2, [r7, #8]
 800d7a6:	2100      	movs	r1, #0
 800d7a8:	68f8      	ldr	r0, [r7, #12]
 800d7aa:	f001 ff36 	bl	800f61a <USBD_LL_Transmit>

  return USBD_OK;
 800d7ae:	2300      	movs	r3, #0
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3710      	adds	r7, #16
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	60f8      	str	r0, [r7, #12]
 800d7c0:	60b9      	str	r1, [r7, #8]
 800d7c2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	68ba      	ldr	r2, [r7, #8]
 800d7c8:	2100      	movs	r1, #0
 800d7ca:	68f8      	ldr	r0, [r7, #12]
 800d7cc:	f001 ff25 	bl	800f61a <USBD_LL_Transmit>

  return USBD_OK;
 800d7d0:	2300      	movs	r3, #0
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3710      	adds	r7, #16
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}

0800d7da <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d7da:	b580      	push	{r7, lr}
 800d7dc:	b084      	sub	sp, #16
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	60f8      	str	r0, [r7, #12]
 800d7e2:	60b9      	str	r1, [r7, #8]
 800d7e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2203      	movs	r2, #3
 800d7ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	68ba      	ldr	r2, [r7, #8]
 800d802:	2100      	movs	r1, #0
 800d804:	68f8      	ldr	r0, [r7, #12]
 800d806:	f001 ff29 	bl	800f65c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d80a:	2300      	movs	r3, #0
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3710      	adds	r7, #16
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b084      	sub	sp, #16
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	68ba      	ldr	r2, [r7, #8]
 800d824:	2100      	movs	r1, #0
 800d826:	68f8      	ldr	r0, [r7, #12]
 800d828:	f001 ff18 	bl	800f65c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d82c:	2300      	movs	r3, #0
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3710      	adds	r7, #16
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d836:	b580      	push	{r7, lr}
 800d838:	b082      	sub	sp, #8
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2204      	movs	r2, #4
 800d842:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d846:	2300      	movs	r3, #0
 800d848:	2200      	movs	r2, #0
 800d84a:	2100      	movs	r1, #0
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f001 fee4 	bl	800f61a <USBD_LL_Transmit>

  return USBD_OK;
 800d852:	2300      	movs	r3, #0
}
 800d854:	4618      	mov	r0, r3
 800d856:	3708      	adds	r7, #8
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2205      	movs	r2, #5
 800d868:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d86c:	2300      	movs	r3, #0
 800d86e:	2200      	movs	r2, #0
 800d870:	2100      	movs	r1, #0
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f001 fef2 	bl	800f65c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d878:	2300      	movs	r3, #0
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3708      	adds	r7, #8
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d882:	b480      	push	{r7}
 800d884:	b085      	sub	sp, #20
 800d886:	af00      	add	r7, sp, #0
 800d888:	4603      	mov	r3, r0
 800d88a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d88c:	2300      	movs	r3, #0
 800d88e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d890:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d894:	2b84      	cmp	r3, #132	; 0x84
 800d896:	d005      	beq.n	800d8a4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d898:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	4413      	add	r3, r2
 800d8a0:	3303      	adds	r3, #3
 800d8a2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3714      	adds	r7, #20
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b0:	4770      	bx	lr

0800d8b2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d8b2:	b580      	push	{r7, lr}
 800d8b4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d8b6:	f000 fadb 	bl	800de70 <vTaskStartScheduler>
  
  return osOK;
 800d8ba:	2300      	movs	r3, #0
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8c2:	b089      	sub	sp, #36	; 0x24
 800d8c4:	af04      	add	r7, sp, #16
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	695b      	ldr	r3, [r3, #20]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d020      	beq.n	800d914 <osThreadCreate+0x54>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	699b      	ldr	r3, [r3, #24]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d01c      	beq.n	800d914 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	685c      	ldr	r4, [r3, #4]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681d      	ldr	r5, [r3, #0]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	691e      	ldr	r6, [r3, #16]
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f7ff ffc8 	bl	800d882 <makeFreeRtosPriority>
 800d8f2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	695b      	ldr	r3, [r3, #20]
 800d8f8:	687a      	ldr	r2, [r7, #4]
 800d8fa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d8fc:	9202      	str	r2, [sp, #8]
 800d8fe:	9301      	str	r3, [sp, #4]
 800d900:	9100      	str	r1, [sp, #0]
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	4632      	mov	r2, r6
 800d906:	4629      	mov	r1, r5
 800d908:	4620      	mov	r0, r4
 800d90a:	f000 f8ed 	bl	800dae8 <xTaskCreateStatic>
 800d90e:	4603      	mov	r3, r0
 800d910:	60fb      	str	r3, [r7, #12]
 800d912:	e01c      	b.n	800d94e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	685c      	ldr	r4, [r3, #4]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d920:	b29e      	uxth	r6, r3
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d928:	4618      	mov	r0, r3
 800d92a:	f7ff ffaa 	bl	800d882 <makeFreeRtosPriority>
 800d92e:	4602      	mov	r2, r0
 800d930:	f107 030c 	add.w	r3, r7, #12
 800d934:	9301      	str	r3, [sp, #4]
 800d936:	9200      	str	r2, [sp, #0]
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	4632      	mov	r2, r6
 800d93c:	4629      	mov	r1, r5
 800d93e:	4620      	mov	r0, r4
 800d940:	f000 f92c 	bl	800db9c <xTaskCreate>
 800d944:	4603      	mov	r3, r0
 800d946:	2b01      	cmp	r3, #1
 800d948:	d001      	beq.n	800d94e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d94a:	2300      	movs	r3, #0
 800d94c:	e000      	b.n	800d950 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d94e:	68fb      	ldr	r3, [r7, #12]
}
 800d950:	4618      	mov	r0, r3
 800d952:	3714      	adds	r7, #20
 800d954:	46bd      	mov	sp, r7
 800d956:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d958 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d001      	beq.n	800d96e <osDelay+0x16>
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	e000      	b.n	800d970 <osDelay+0x18>
 800d96e:	2301      	movs	r3, #1
 800d970:	4618      	mov	r0, r3
 800d972:	f000 fa49 	bl	800de08 <vTaskDelay>
  
  return osOK;
 800d976:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3710      	adds	r7, #16
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f103 0208 	add.w	r2, r3, #8
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d998:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f103 0208 	add.w	r2, r3, #8
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f103 0208 	add.w	r2, r3, #8
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d9b4:	bf00      	nop
 800d9b6:	370c      	adds	r7, #12
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr

0800d9c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b083      	sub	sp, #12
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d9ce:	bf00      	nop
 800d9d0:	370c      	adds	r7, #12
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr

0800d9da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d9da:	b480      	push	{r7}
 800d9dc:	b085      	sub	sp, #20
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
 800d9e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	68fa      	ldr	r2, [r7, #12]
 800d9ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	689a      	ldr	r2, [r3, #8]
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	689b      	ldr	r3, [r3, #8]
 800d9fc:	683a      	ldr	r2, [r7, #0]
 800d9fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	683a      	ldr	r2, [r7, #0]
 800da04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	1c5a      	adds	r2, r3, #1
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	601a      	str	r2, [r3, #0]
}
 800da16:	bf00      	nop
 800da18:	3714      	adds	r7, #20
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr

0800da22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800da22:	b480      	push	{r7}
 800da24:	b085      	sub	sp, #20
 800da26:	af00      	add	r7, sp, #0
 800da28:	6078      	str	r0, [r7, #4]
 800da2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da38:	d103      	bne.n	800da42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	691b      	ldr	r3, [r3, #16]
 800da3e:	60fb      	str	r3, [r7, #12]
 800da40:	e00c      	b.n	800da5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	3308      	adds	r3, #8
 800da46:	60fb      	str	r3, [r7, #12]
 800da48:	e002      	b.n	800da50 <vListInsert+0x2e>
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	60fb      	str	r3, [r7, #12]
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	685b      	ldr	r3, [r3, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	68ba      	ldr	r2, [r7, #8]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d2f6      	bcs.n	800da4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	685a      	ldr	r2, [r3, #4]
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	683a      	ldr	r2, [r7, #0]
 800da6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	68fa      	ldr	r2, [r7, #12]
 800da70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	683a      	ldr	r2, [r7, #0]
 800da76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	1c5a      	adds	r2, r3, #1
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	601a      	str	r2, [r3, #0]
}
 800da88:	bf00      	nop
 800da8a:	3714      	adds	r7, #20
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr

0800da94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800da94:	b480      	push	{r7}
 800da96:	b085      	sub	sp, #20
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	691b      	ldr	r3, [r3, #16]
 800daa0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	687a      	ldr	r2, [r7, #4]
 800daa8:	6892      	ldr	r2, [r2, #8]
 800daaa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	689b      	ldr	r3, [r3, #8]
 800dab0:	687a      	ldr	r2, [r7, #4]
 800dab2:	6852      	ldr	r2, [r2, #4]
 800dab4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d103      	bne.n	800dac8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	689a      	ldr	r2, [r3, #8]
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2200      	movs	r2, #0
 800dacc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	1e5a      	subs	r2, r3, #1
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681b      	ldr	r3, [r3, #0]
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3714      	adds	r7, #20
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr

0800dae8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b08e      	sub	sp, #56	; 0x38
 800daec:	af04      	add	r7, sp, #16
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	607a      	str	r2, [r7, #4]
 800daf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800daf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d109      	bne.n	800db10 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db00:	f383 8811 	msr	BASEPRI, r3
 800db04:	f3bf 8f6f 	isb	sy
 800db08:	f3bf 8f4f 	dsb	sy
 800db0c:	623b      	str	r3, [r7, #32]
 800db0e:	e7fe      	b.n	800db0e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800db10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db12:	2b00      	cmp	r3, #0
 800db14:	d109      	bne.n	800db2a <xTaskCreateStatic+0x42>
 800db16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1a:	f383 8811 	msr	BASEPRI, r3
 800db1e:	f3bf 8f6f 	isb	sy
 800db22:	f3bf 8f4f 	dsb	sy
 800db26:	61fb      	str	r3, [r7, #28]
 800db28:	e7fe      	b.n	800db28 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800db2a:	2354      	movs	r3, #84	; 0x54
 800db2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	2b54      	cmp	r3, #84	; 0x54
 800db32:	d009      	beq.n	800db48 <xTaskCreateStatic+0x60>
 800db34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db38:	f383 8811 	msr	BASEPRI, r3
 800db3c:	f3bf 8f6f 	isb	sy
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	61bb      	str	r3, [r7, #24]
 800db46:	e7fe      	b.n	800db46 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800db48:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800db4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d01e      	beq.n	800db8e <xTaskCreateStatic+0xa6>
 800db50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db52:	2b00      	cmp	r3, #0
 800db54:	d01b      	beq.n	800db8e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800db56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db58:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800db5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db5e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800db60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db62:	2202      	movs	r2, #2
 800db64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800db68:	2300      	movs	r3, #0
 800db6a:	9303      	str	r3, [sp, #12]
 800db6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6e:	9302      	str	r3, [sp, #8]
 800db70:	f107 0314 	add.w	r3, r7, #20
 800db74:	9301      	str	r3, [sp, #4]
 800db76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db78:	9300      	str	r3, [sp, #0]
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	687a      	ldr	r2, [r7, #4]
 800db7e:	68b9      	ldr	r1, [r7, #8]
 800db80:	68f8      	ldr	r0, [r7, #12]
 800db82:	f000 f850 	bl	800dc26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db88:	f000 f8d4 	bl	800dd34 <prvAddNewTaskToReadyList>
 800db8c:	e001      	b.n	800db92 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800db8e:	2300      	movs	r3, #0
 800db90:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800db92:	697b      	ldr	r3, [r7, #20]
	}
 800db94:	4618      	mov	r0, r3
 800db96:	3728      	adds	r7, #40	; 0x28
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b08c      	sub	sp, #48	; 0x30
 800dba0:	af04      	add	r7, sp, #16
 800dba2:	60f8      	str	r0, [r7, #12]
 800dba4:	60b9      	str	r1, [r7, #8]
 800dba6:	603b      	str	r3, [r7, #0]
 800dba8:	4613      	mov	r3, r2
 800dbaa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dbac:	88fb      	ldrh	r3, [r7, #6]
 800dbae:	009b      	lsls	r3, r3, #2
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f000 feaf 	bl	800e914 <pvPortMalloc>
 800dbb6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00e      	beq.n	800dbdc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dbbe:	2054      	movs	r0, #84	; 0x54
 800dbc0:	f000 fea8 	bl	800e914 <pvPortMalloc>
 800dbc4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d003      	beq.n	800dbd4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	697a      	ldr	r2, [r7, #20]
 800dbd0:	631a      	str	r2, [r3, #48]	; 0x30
 800dbd2:	e005      	b.n	800dbe0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dbd4:	6978      	ldr	r0, [r7, #20]
 800dbd6:	f000 ff5f 	bl	800ea98 <vPortFree>
 800dbda:	e001      	b.n	800dbe0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d017      	beq.n	800dc16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dbe6:	69fb      	ldr	r3, [r7, #28]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dbee:	88fa      	ldrh	r2, [r7, #6]
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	9303      	str	r3, [sp, #12]
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	9302      	str	r3, [sp, #8]
 800dbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfa:	9301      	str	r3, [sp, #4]
 800dbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbfe:	9300      	str	r3, [sp, #0]
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	68b9      	ldr	r1, [r7, #8]
 800dc04:	68f8      	ldr	r0, [r7, #12]
 800dc06:	f000 f80e 	bl	800dc26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc0a:	69f8      	ldr	r0, [r7, #28]
 800dc0c:	f000 f892 	bl	800dd34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dc10:	2301      	movs	r3, #1
 800dc12:	61bb      	str	r3, [r7, #24]
 800dc14:	e002      	b.n	800dc1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dc16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dc1c:	69bb      	ldr	r3, [r7, #24]
	}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3720      	adds	r7, #32
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}

0800dc26 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dc26:	b580      	push	{r7, lr}
 800dc28:	b088      	sub	sp, #32
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	60f8      	str	r0, [r7, #12]
 800dc2e:	60b9      	str	r1, [r7, #8]
 800dc30:	607a      	str	r2, [r7, #4]
 800dc32:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dc3e:	3b01      	subs	r3, #1
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	4413      	add	r3, r2
 800dc44:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dc46:	69bb      	ldr	r3, [r7, #24]
 800dc48:	f023 0307 	bic.w	r3, r3, #7
 800dc4c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dc4e:	69bb      	ldr	r3, [r7, #24]
 800dc50:	f003 0307 	and.w	r3, r3, #7
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d009      	beq.n	800dc6c <prvInitialiseNewTask+0x46>
 800dc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc5c:	f383 8811 	msr	BASEPRI, r3
 800dc60:	f3bf 8f6f 	isb	sy
 800dc64:	f3bf 8f4f 	dsb	sy
 800dc68:	617b      	str	r3, [r7, #20]
 800dc6a:	e7fe      	b.n	800dc6a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d01f      	beq.n	800dcb2 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc72:	2300      	movs	r3, #0
 800dc74:	61fb      	str	r3, [r7, #28]
 800dc76:	e012      	b.n	800dc9e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dc78:	68ba      	ldr	r2, [r7, #8]
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	7819      	ldrb	r1, [r3, #0]
 800dc80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc82:	69fb      	ldr	r3, [r7, #28]
 800dc84:	4413      	add	r3, r2
 800dc86:	3334      	adds	r3, #52	; 0x34
 800dc88:	460a      	mov	r2, r1
 800dc8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dc8c:	68ba      	ldr	r2, [r7, #8]
 800dc8e:	69fb      	ldr	r3, [r7, #28]
 800dc90:	4413      	add	r3, r2
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d006      	beq.n	800dca6 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	61fb      	str	r3, [r7, #28]
 800dc9e:	69fb      	ldr	r3, [r7, #28]
 800dca0:	2b0f      	cmp	r3, #15
 800dca2:	d9e9      	bls.n	800dc78 <prvInitialiseNewTask+0x52>
 800dca4:	e000      	b.n	800dca8 <prvInitialiseNewTask+0x82>
			{
				break;
 800dca6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcaa:	2200      	movs	r2, #0
 800dcac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dcb0:	e003      	b.n	800dcba <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbc:	2b06      	cmp	r3, #6
 800dcbe:	d901      	bls.n	800dcc4 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dcc0:	2306      	movs	r3, #6
 800dcc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dcd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd8:	3304      	adds	r3, #4
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7ff fe70 	bl	800d9c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce2:	3318      	adds	r3, #24
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7ff fe6b 	bl	800d9c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf2:	f1c3 0207 	rsb	r2, r3, #7
 800dcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcfe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd02:	2200      	movs	r2, #0
 800dd04:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd08:	2200      	movs	r2, #0
 800dd0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dd0e:	683a      	ldr	r2, [r7, #0]
 800dd10:	68f9      	ldr	r1, [r7, #12]
 800dd12:	69b8      	ldr	r0, [r7, #24]
 800dd14:	f000 fbfe 	bl	800e514 <pxPortInitialiseStack>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d002      	beq.n	800dd2a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd2a:	bf00      	nop
 800dd2c:	3720      	adds	r7, #32
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
	...

0800dd34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dd3c:	f000 fd0e 	bl	800e75c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dd40:	4b2a      	ldr	r3, [pc, #168]	; (800ddec <prvAddNewTaskToReadyList+0xb8>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	3301      	adds	r3, #1
 800dd46:	4a29      	ldr	r2, [pc, #164]	; (800ddec <prvAddNewTaskToReadyList+0xb8>)
 800dd48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dd4a:	4b29      	ldr	r3, [pc, #164]	; (800ddf0 <prvAddNewTaskToReadyList+0xbc>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d109      	bne.n	800dd66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dd52:	4a27      	ldr	r2, [pc, #156]	; (800ddf0 <prvAddNewTaskToReadyList+0xbc>)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dd58:	4b24      	ldr	r3, [pc, #144]	; (800ddec <prvAddNewTaskToReadyList+0xb8>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d110      	bne.n	800dd82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dd60:	f000 fab8 	bl	800e2d4 <prvInitialiseTaskLists>
 800dd64:	e00d      	b.n	800dd82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dd66:	4b23      	ldr	r3, [pc, #140]	; (800ddf4 <prvAddNewTaskToReadyList+0xc0>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d109      	bne.n	800dd82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dd6e:	4b20      	ldr	r3, [pc, #128]	; (800ddf0 <prvAddNewTaskToReadyList+0xbc>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d802      	bhi.n	800dd82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dd7c:	4a1c      	ldr	r2, [pc, #112]	; (800ddf0 <prvAddNewTaskToReadyList+0xbc>)
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dd82:	4b1d      	ldr	r3, [pc, #116]	; (800ddf8 <prvAddNewTaskToReadyList+0xc4>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	3301      	adds	r3, #1
 800dd88:	4a1b      	ldr	r2, [pc, #108]	; (800ddf8 <prvAddNewTaskToReadyList+0xc4>)
 800dd8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd90:	2201      	movs	r2, #1
 800dd92:	409a      	lsls	r2, r3
 800dd94:	4b19      	ldr	r3, [pc, #100]	; (800ddfc <prvAddNewTaskToReadyList+0xc8>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	4313      	orrs	r3, r2
 800dd9a:	4a18      	ldr	r2, [pc, #96]	; (800ddfc <prvAddNewTaskToReadyList+0xc8>)
 800dd9c:	6013      	str	r3, [r2, #0]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dda2:	4613      	mov	r3, r2
 800dda4:	009b      	lsls	r3, r3, #2
 800dda6:	4413      	add	r3, r2
 800dda8:	009b      	lsls	r3, r3, #2
 800ddaa:	4a15      	ldr	r2, [pc, #84]	; (800de00 <prvAddNewTaskToReadyList+0xcc>)
 800ddac:	441a      	add	r2, r3
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	3304      	adds	r3, #4
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	4610      	mov	r0, r2
 800ddb6:	f7ff fe10 	bl	800d9da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ddba:	f000 fcfd 	bl	800e7b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ddbe:	4b0d      	ldr	r3, [pc, #52]	; (800ddf4 <prvAddNewTaskToReadyList+0xc0>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d00e      	beq.n	800dde4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ddc6:	4b0a      	ldr	r3, [pc, #40]	; (800ddf0 <prvAddNewTaskToReadyList+0xbc>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d207      	bcs.n	800dde4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ddd4:	4b0b      	ldr	r3, [pc, #44]	; (800de04 <prvAddNewTaskToReadyList+0xd0>)
 800ddd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddda:	601a      	str	r2, [r3, #0]
 800dddc:	f3bf 8f4f 	dsb	sy
 800dde0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dde4:	bf00      	nop
 800dde6:	3708      	adds	r7, #8
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	20000fa8 	.word	0x20000fa8
 800ddf0:	20000ea8 	.word	0x20000ea8
 800ddf4:	20000fb4 	.word	0x20000fb4
 800ddf8:	20000fc4 	.word	0x20000fc4
 800ddfc:	20000fb0 	.word	0x20000fb0
 800de00:	20000eac 	.word	0x20000eac
 800de04:	e000ed04 	.word	0xe000ed04

0800de08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800de10:	2300      	movs	r3, #0
 800de12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d016      	beq.n	800de48 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800de1a:	4b13      	ldr	r3, [pc, #76]	; (800de68 <vTaskDelay+0x60>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d009      	beq.n	800de36 <vTaskDelay+0x2e>
 800de22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de26:	f383 8811 	msr	BASEPRI, r3
 800de2a:	f3bf 8f6f 	isb	sy
 800de2e:	f3bf 8f4f 	dsb	sy
 800de32:	60bb      	str	r3, [r7, #8]
 800de34:	e7fe      	b.n	800de34 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800de36:	f000 f879 	bl	800df2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800de3a:	2100      	movs	r1, #0
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f000 fb03 	bl	800e448 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800de42:	f000 f881 	bl	800df48 <xTaskResumeAll>
 800de46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d107      	bne.n	800de5e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800de4e:	4b07      	ldr	r3, [pc, #28]	; (800de6c <vTaskDelay+0x64>)
 800de50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de54:	601a      	str	r2, [r3, #0]
 800de56:	f3bf 8f4f 	dsb	sy
 800de5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800de5e:	bf00      	nop
 800de60:	3710      	adds	r7, #16
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	20000fd0 	.word	0x20000fd0
 800de6c:	e000ed04 	.word	0xe000ed04

0800de70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b08a      	sub	sp, #40	; 0x28
 800de74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800de76:	2300      	movs	r3, #0
 800de78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800de7a:	2300      	movs	r3, #0
 800de7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800de7e:	463a      	mov	r2, r7
 800de80:	1d39      	adds	r1, r7, #4
 800de82:	f107 0308 	add.w	r3, r7, #8
 800de86:	4618      	mov	r0, r3
 800de88:	f7f2 fb2a 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800de8c:	6839      	ldr	r1, [r7, #0]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	68ba      	ldr	r2, [r7, #8]
 800de92:	9202      	str	r2, [sp, #8]
 800de94:	9301      	str	r3, [sp, #4]
 800de96:	2300      	movs	r3, #0
 800de98:	9300      	str	r3, [sp, #0]
 800de9a:	2300      	movs	r3, #0
 800de9c:	460a      	mov	r2, r1
 800de9e:	491d      	ldr	r1, [pc, #116]	; (800df14 <vTaskStartScheduler+0xa4>)
 800dea0:	481d      	ldr	r0, [pc, #116]	; (800df18 <vTaskStartScheduler+0xa8>)
 800dea2:	f7ff fe21 	bl	800dae8 <xTaskCreateStatic>
 800dea6:	4602      	mov	r2, r0
 800dea8:	4b1c      	ldr	r3, [pc, #112]	; (800df1c <vTaskStartScheduler+0xac>)
 800deaa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800deac:	4b1b      	ldr	r3, [pc, #108]	; (800df1c <vTaskStartScheduler+0xac>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d002      	beq.n	800deba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800deb4:	2301      	movs	r3, #1
 800deb6:	617b      	str	r3, [r7, #20]
 800deb8:	e001      	b.n	800debe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800deba:	2300      	movs	r3, #0
 800debc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d115      	bne.n	800def0 <vTaskStartScheduler+0x80>
 800dec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec8:	f383 8811 	msr	BASEPRI, r3
 800decc:	f3bf 8f6f 	isb	sy
 800ded0:	f3bf 8f4f 	dsb	sy
 800ded4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ded6:	4b12      	ldr	r3, [pc, #72]	; (800df20 <vTaskStartScheduler+0xb0>)
 800ded8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dedc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dede:	4b11      	ldr	r3, [pc, #68]	; (800df24 <vTaskStartScheduler+0xb4>)
 800dee0:	2201      	movs	r2, #1
 800dee2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dee4:	4b10      	ldr	r3, [pc, #64]	; (800df28 <vTaskStartScheduler+0xb8>)
 800dee6:	2200      	movs	r2, #0
 800dee8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800deea:	f000 fb99 	bl	800e620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800deee:	e00d      	b.n	800df0c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800def6:	d109      	bne.n	800df0c <vTaskStartScheduler+0x9c>
 800def8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defc:	f383 8811 	msr	BASEPRI, r3
 800df00:	f3bf 8f6f 	isb	sy
 800df04:	f3bf 8f4f 	dsb	sy
 800df08:	60fb      	str	r3, [r7, #12]
 800df0a:	e7fe      	b.n	800df0a <vTaskStartScheduler+0x9a>
}
 800df0c:	bf00      	nop
 800df0e:	3718      	adds	r7, #24
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	0800fef4 	.word	0x0800fef4
 800df18:	0800e2a5 	.word	0x0800e2a5
 800df1c:	20000fcc 	.word	0x20000fcc
 800df20:	20000fc8 	.word	0x20000fc8
 800df24:	20000fb4 	.word	0x20000fb4
 800df28:	20000fac 	.word	0x20000fac

0800df2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800df2c:	b480      	push	{r7}
 800df2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800df30:	4b04      	ldr	r3, [pc, #16]	; (800df44 <vTaskSuspendAll+0x18>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	3301      	adds	r3, #1
 800df36:	4a03      	ldr	r2, [pc, #12]	; (800df44 <vTaskSuspendAll+0x18>)
 800df38:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800df3a:	bf00      	nop
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr
 800df44:	20000fd0 	.word	0x20000fd0

0800df48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800df4e:	2300      	movs	r3, #0
 800df50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800df52:	2300      	movs	r3, #0
 800df54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800df56:	4b41      	ldr	r3, [pc, #260]	; (800e05c <xTaskResumeAll+0x114>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d109      	bne.n	800df72 <xTaskResumeAll+0x2a>
 800df5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df62:	f383 8811 	msr	BASEPRI, r3
 800df66:	f3bf 8f6f 	isb	sy
 800df6a:	f3bf 8f4f 	dsb	sy
 800df6e:	603b      	str	r3, [r7, #0]
 800df70:	e7fe      	b.n	800df70 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800df72:	f000 fbf3 	bl	800e75c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800df76:	4b39      	ldr	r3, [pc, #228]	; (800e05c <xTaskResumeAll+0x114>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	3b01      	subs	r3, #1
 800df7c:	4a37      	ldr	r2, [pc, #220]	; (800e05c <xTaskResumeAll+0x114>)
 800df7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df80:	4b36      	ldr	r3, [pc, #216]	; (800e05c <xTaskResumeAll+0x114>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d161      	bne.n	800e04c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800df88:	4b35      	ldr	r3, [pc, #212]	; (800e060 <xTaskResumeAll+0x118>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d05d      	beq.n	800e04c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df90:	e02e      	b.n	800dff0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df92:	4b34      	ldr	r3, [pc, #208]	; (800e064 <xTaskResumeAll+0x11c>)
 800df94:	68db      	ldr	r3, [r3, #12]
 800df96:	68db      	ldr	r3, [r3, #12]
 800df98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	3318      	adds	r3, #24
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7ff fd78 	bl	800da94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	3304      	adds	r3, #4
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7ff fd73 	bl	800da94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	409a      	lsls	r2, r3
 800dfb6:	4b2c      	ldr	r3, [pc, #176]	; (800e068 <xTaskResumeAll+0x120>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	4a2a      	ldr	r2, [pc, #168]	; (800e068 <xTaskResumeAll+0x120>)
 800dfbe:	6013      	str	r3, [r2, #0]
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfc4:	4613      	mov	r3, r2
 800dfc6:	009b      	lsls	r3, r3, #2
 800dfc8:	4413      	add	r3, r2
 800dfca:	009b      	lsls	r3, r3, #2
 800dfcc:	4a27      	ldr	r2, [pc, #156]	; (800e06c <xTaskResumeAll+0x124>)
 800dfce:	441a      	add	r2, r3
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	3304      	adds	r3, #4
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	4610      	mov	r0, r2
 800dfd8:	f7ff fcff 	bl	800d9da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfe0:	4b23      	ldr	r3, [pc, #140]	; (800e070 <xTaskResumeAll+0x128>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d302      	bcc.n	800dff0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800dfea:	4b22      	ldr	r3, [pc, #136]	; (800e074 <xTaskResumeAll+0x12c>)
 800dfec:	2201      	movs	r2, #1
 800dfee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dff0:	4b1c      	ldr	r3, [pc, #112]	; (800e064 <xTaskResumeAll+0x11c>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d1cc      	bne.n	800df92 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d001      	beq.n	800e002 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dffe:	f000 fa03 	bl	800e408 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e002:	4b1d      	ldr	r3, [pc, #116]	; (800e078 <xTaskResumeAll+0x130>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d010      	beq.n	800e030 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e00e:	f000 f837 	bl	800e080 <xTaskIncrementTick>
 800e012:	4603      	mov	r3, r0
 800e014:	2b00      	cmp	r3, #0
 800e016:	d002      	beq.n	800e01e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800e018:	4b16      	ldr	r3, [pc, #88]	; (800e074 <xTaskResumeAll+0x12c>)
 800e01a:	2201      	movs	r2, #1
 800e01c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	3b01      	subs	r3, #1
 800e022:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d1f1      	bne.n	800e00e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800e02a:	4b13      	ldr	r3, [pc, #76]	; (800e078 <xTaskResumeAll+0x130>)
 800e02c:	2200      	movs	r2, #0
 800e02e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e030:	4b10      	ldr	r3, [pc, #64]	; (800e074 <xTaskResumeAll+0x12c>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d009      	beq.n	800e04c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e038:	2301      	movs	r3, #1
 800e03a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e03c:	4b0f      	ldr	r3, [pc, #60]	; (800e07c <xTaskResumeAll+0x134>)
 800e03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e042:	601a      	str	r2, [r3, #0]
 800e044:	f3bf 8f4f 	dsb	sy
 800e048:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e04c:	f000 fbb4 	bl	800e7b8 <vPortExitCritical>

	return xAlreadyYielded;
 800e050:	68bb      	ldr	r3, [r7, #8]
}
 800e052:	4618      	mov	r0, r3
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	bf00      	nop
 800e05c:	20000fd0 	.word	0x20000fd0
 800e060:	20000fa8 	.word	0x20000fa8
 800e064:	20000f68 	.word	0x20000f68
 800e068:	20000fb0 	.word	0x20000fb0
 800e06c:	20000eac 	.word	0x20000eac
 800e070:	20000ea8 	.word	0x20000ea8
 800e074:	20000fbc 	.word	0x20000fbc
 800e078:	20000fb8 	.word	0x20000fb8
 800e07c:	e000ed04 	.word	0xe000ed04

0800e080 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b086      	sub	sp, #24
 800e084:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e086:	2300      	movs	r3, #0
 800e088:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e08a:	4b4e      	ldr	r3, [pc, #312]	; (800e1c4 <xTaskIncrementTick+0x144>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	f040 8087 	bne.w	800e1a2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e094:	4b4c      	ldr	r3, [pc, #304]	; (800e1c8 <xTaskIncrementTick+0x148>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	3301      	adds	r3, #1
 800e09a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e09c:	4a4a      	ldr	r2, [pc, #296]	; (800e1c8 <xTaskIncrementTick+0x148>)
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d11f      	bne.n	800e0e8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800e0a8:	4b48      	ldr	r3, [pc, #288]	; (800e1cc <xTaskIncrementTick+0x14c>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d009      	beq.n	800e0c6 <xTaskIncrementTick+0x46>
 800e0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b6:	f383 8811 	msr	BASEPRI, r3
 800e0ba:	f3bf 8f6f 	isb	sy
 800e0be:	f3bf 8f4f 	dsb	sy
 800e0c2:	603b      	str	r3, [r7, #0]
 800e0c4:	e7fe      	b.n	800e0c4 <xTaskIncrementTick+0x44>
 800e0c6:	4b41      	ldr	r3, [pc, #260]	; (800e1cc <xTaskIncrementTick+0x14c>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	60fb      	str	r3, [r7, #12]
 800e0cc:	4b40      	ldr	r3, [pc, #256]	; (800e1d0 <xTaskIncrementTick+0x150>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4a3e      	ldr	r2, [pc, #248]	; (800e1cc <xTaskIncrementTick+0x14c>)
 800e0d2:	6013      	str	r3, [r2, #0]
 800e0d4:	4a3e      	ldr	r2, [pc, #248]	; (800e1d0 <xTaskIncrementTick+0x150>)
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	6013      	str	r3, [r2, #0]
 800e0da:	4b3e      	ldr	r3, [pc, #248]	; (800e1d4 <xTaskIncrementTick+0x154>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	4a3c      	ldr	r2, [pc, #240]	; (800e1d4 <xTaskIncrementTick+0x154>)
 800e0e2:	6013      	str	r3, [r2, #0]
 800e0e4:	f000 f990 	bl	800e408 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e0e8:	4b3b      	ldr	r3, [pc, #236]	; (800e1d8 <xTaskIncrementTick+0x158>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	693a      	ldr	r2, [r7, #16]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d348      	bcc.n	800e184 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0f2:	4b36      	ldr	r3, [pc, #216]	; (800e1cc <xTaskIncrementTick+0x14c>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d104      	bne.n	800e106 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0fc:	4b36      	ldr	r3, [pc, #216]	; (800e1d8 <xTaskIncrementTick+0x158>)
 800e0fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e102:	601a      	str	r2, [r3, #0]
					break;
 800e104:	e03e      	b.n	800e184 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e106:	4b31      	ldr	r3, [pc, #196]	; (800e1cc <xTaskIncrementTick+0x14c>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	68db      	ldr	r3, [r3, #12]
 800e10c:	68db      	ldr	r3, [r3, #12]
 800e10e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e116:	693a      	ldr	r2, [r7, #16]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d203      	bcs.n	800e126 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e11e:	4a2e      	ldr	r2, [pc, #184]	; (800e1d8 <xTaskIncrementTick+0x158>)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e124:	e02e      	b.n	800e184 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	3304      	adds	r3, #4
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7ff fcb2 	bl	800da94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e134:	2b00      	cmp	r3, #0
 800e136:	d004      	beq.n	800e142 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	3318      	adds	r3, #24
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7ff fca9 	bl	800da94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e146:	2201      	movs	r2, #1
 800e148:	409a      	lsls	r2, r3
 800e14a:	4b24      	ldr	r3, [pc, #144]	; (800e1dc <xTaskIncrementTick+0x15c>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	4313      	orrs	r3, r2
 800e150:	4a22      	ldr	r2, [pc, #136]	; (800e1dc <xTaskIncrementTick+0x15c>)
 800e152:	6013      	str	r3, [r2, #0]
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e158:	4613      	mov	r3, r2
 800e15a:	009b      	lsls	r3, r3, #2
 800e15c:	4413      	add	r3, r2
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	4a1f      	ldr	r2, [pc, #124]	; (800e1e0 <xTaskIncrementTick+0x160>)
 800e162:	441a      	add	r2, r3
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	3304      	adds	r3, #4
 800e168:	4619      	mov	r1, r3
 800e16a:	4610      	mov	r0, r2
 800e16c:	f7ff fc35 	bl	800d9da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e174:	4b1b      	ldr	r3, [pc, #108]	; (800e1e4 <xTaskIncrementTick+0x164>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d3b9      	bcc.n	800e0f2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800e17e:	2301      	movs	r3, #1
 800e180:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e182:	e7b6      	b.n	800e0f2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e184:	4b17      	ldr	r3, [pc, #92]	; (800e1e4 <xTaskIncrementTick+0x164>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e18a:	4915      	ldr	r1, [pc, #84]	; (800e1e0 <xTaskIncrementTick+0x160>)
 800e18c:	4613      	mov	r3, r2
 800e18e:	009b      	lsls	r3, r3, #2
 800e190:	4413      	add	r3, r2
 800e192:	009b      	lsls	r3, r3, #2
 800e194:	440b      	add	r3, r1
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d907      	bls.n	800e1ac <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800e19c:	2301      	movs	r3, #1
 800e19e:	617b      	str	r3, [r7, #20]
 800e1a0:	e004      	b.n	800e1ac <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e1a2:	4b11      	ldr	r3, [pc, #68]	; (800e1e8 <xTaskIncrementTick+0x168>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	4a0f      	ldr	r2, [pc, #60]	; (800e1e8 <xTaskIncrementTick+0x168>)
 800e1aa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e1ac:	4b0f      	ldr	r3, [pc, #60]	; (800e1ec <xTaskIncrementTick+0x16c>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d001      	beq.n	800e1b8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e1b8:	697b      	ldr	r3, [r7, #20]
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3718      	adds	r7, #24
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}
 800e1c2:	bf00      	nop
 800e1c4:	20000fd0 	.word	0x20000fd0
 800e1c8:	20000fac 	.word	0x20000fac
 800e1cc:	20000f60 	.word	0x20000f60
 800e1d0:	20000f64 	.word	0x20000f64
 800e1d4:	20000fc0 	.word	0x20000fc0
 800e1d8:	20000fc8 	.word	0x20000fc8
 800e1dc:	20000fb0 	.word	0x20000fb0
 800e1e0:	20000eac 	.word	0x20000eac
 800e1e4:	20000ea8 	.word	0x20000ea8
 800e1e8:	20000fb8 	.word	0x20000fb8
 800e1ec:	20000fbc 	.word	0x20000fbc

0800e1f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b087      	sub	sp, #28
 800e1f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e1f6:	4b26      	ldr	r3, [pc, #152]	; (800e290 <vTaskSwitchContext+0xa0>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d003      	beq.n	800e206 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e1fe:	4b25      	ldr	r3, [pc, #148]	; (800e294 <vTaskSwitchContext+0xa4>)
 800e200:	2201      	movs	r2, #1
 800e202:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e204:	e03e      	b.n	800e284 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800e206:	4b23      	ldr	r3, [pc, #140]	; (800e294 <vTaskSwitchContext+0xa4>)
 800e208:	2200      	movs	r2, #0
 800e20a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e20c:	4b22      	ldr	r3, [pc, #136]	; (800e298 <vTaskSwitchContext+0xa8>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	fab3 f383 	clz	r3, r3
 800e218:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e21a:	7afb      	ldrb	r3, [r7, #11]
 800e21c:	f1c3 031f 	rsb	r3, r3, #31
 800e220:	617b      	str	r3, [r7, #20]
 800e222:	491e      	ldr	r1, [pc, #120]	; (800e29c <vTaskSwitchContext+0xac>)
 800e224:	697a      	ldr	r2, [r7, #20]
 800e226:	4613      	mov	r3, r2
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	4413      	add	r3, r2
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	440b      	add	r3, r1
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d109      	bne.n	800e24a <vTaskSwitchContext+0x5a>
	__asm volatile
 800e236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e23a:	f383 8811 	msr	BASEPRI, r3
 800e23e:	f3bf 8f6f 	isb	sy
 800e242:	f3bf 8f4f 	dsb	sy
 800e246:	607b      	str	r3, [r7, #4]
 800e248:	e7fe      	b.n	800e248 <vTaskSwitchContext+0x58>
 800e24a:	697a      	ldr	r2, [r7, #20]
 800e24c:	4613      	mov	r3, r2
 800e24e:	009b      	lsls	r3, r3, #2
 800e250:	4413      	add	r3, r2
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	4a11      	ldr	r2, [pc, #68]	; (800e29c <vTaskSwitchContext+0xac>)
 800e256:	4413      	add	r3, r2
 800e258:	613b      	str	r3, [r7, #16]
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	685a      	ldr	r2, [r3, #4]
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	605a      	str	r2, [r3, #4]
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	685a      	ldr	r2, [r3, #4]
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	3308      	adds	r3, #8
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d104      	bne.n	800e27a <vTaskSwitchContext+0x8a>
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	685b      	ldr	r3, [r3, #4]
 800e274:	685a      	ldr	r2, [r3, #4]
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	605a      	str	r2, [r3, #4]
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	68db      	ldr	r3, [r3, #12]
 800e280:	4a07      	ldr	r2, [pc, #28]	; (800e2a0 <vTaskSwitchContext+0xb0>)
 800e282:	6013      	str	r3, [r2, #0]
}
 800e284:	bf00      	nop
 800e286:	371c      	adds	r7, #28
 800e288:	46bd      	mov	sp, r7
 800e28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28e:	4770      	bx	lr
 800e290:	20000fd0 	.word	0x20000fd0
 800e294:	20000fbc 	.word	0x20000fbc
 800e298:	20000fb0 	.word	0x20000fb0
 800e29c:	20000eac 	.word	0x20000eac
 800e2a0:	20000ea8 	.word	0x20000ea8

0800e2a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b082      	sub	sp, #8
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e2ac:	f000 f852 	bl	800e354 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e2b0:	4b06      	ldr	r3, [pc, #24]	; (800e2cc <prvIdleTask+0x28>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	2b01      	cmp	r3, #1
 800e2b6:	d9f9      	bls.n	800e2ac <prvIdleTask+0x8>
			{
				taskYIELD();
 800e2b8:	4b05      	ldr	r3, [pc, #20]	; (800e2d0 <prvIdleTask+0x2c>)
 800e2ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2be:	601a      	str	r2, [r3, #0]
 800e2c0:	f3bf 8f4f 	dsb	sy
 800e2c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e2c8:	e7f0      	b.n	800e2ac <prvIdleTask+0x8>
 800e2ca:	bf00      	nop
 800e2cc:	20000eac 	.word	0x20000eac
 800e2d0:	e000ed04 	.word	0xe000ed04

0800e2d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2da:	2300      	movs	r3, #0
 800e2dc:	607b      	str	r3, [r7, #4]
 800e2de:	e00c      	b.n	800e2fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e2e0:	687a      	ldr	r2, [r7, #4]
 800e2e2:	4613      	mov	r3, r2
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	4413      	add	r3, r2
 800e2e8:	009b      	lsls	r3, r3, #2
 800e2ea:	4a12      	ldr	r2, [pc, #72]	; (800e334 <prvInitialiseTaskLists+0x60>)
 800e2ec:	4413      	add	r3, r2
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7ff fb46 	bl	800d980 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	607b      	str	r3, [r7, #4]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2b06      	cmp	r3, #6
 800e2fe:	d9ef      	bls.n	800e2e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e300:	480d      	ldr	r0, [pc, #52]	; (800e338 <prvInitialiseTaskLists+0x64>)
 800e302:	f7ff fb3d 	bl	800d980 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e306:	480d      	ldr	r0, [pc, #52]	; (800e33c <prvInitialiseTaskLists+0x68>)
 800e308:	f7ff fb3a 	bl	800d980 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e30c:	480c      	ldr	r0, [pc, #48]	; (800e340 <prvInitialiseTaskLists+0x6c>)
 800e30e:	f7ff fb37 	bl	800d980 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e312:	480c      	ldr	r0, [pc, #48]	; (800e344 <prvInitialiseTaskLists+0x70>)
 800e314:	f7ff fb34 	bl	800d980 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e318:	480b      	ldr	r0, [pc, #44]	; (800e348 <prvInitialiseTaskLists+0x74>)
 800e31a:	f7ff fb31 	bl	800d980 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e31e:	4b0b      	ldr	r3, [pc, #44]	; (800e34c <prvInitialiseTaskLists+0x78>)
 800e320:	4a05      	ldr	r2, [pc, #20]	; (800e338 <prvInitialiseTaskLists+0x64>)
 800e322:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e324:	4b0a      	ldr	r3, [pc, #40]	; (800e350 <prvInitialiseTaskLists+0x7c>)
 800e326:	4a05      	ldr	r2, [pc, #20]	; (800e33c <prvInitialiseTaskLists+0x68>)
 800e328:	601a      	str	r2, [r3, #0]
}
 800e32a:	bf00      	nop
 800e32c:	3708      	adds	r7, #8
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	20000eac 	.word	0x20000eac
 800e338:	20000f38 	.word	0x20000f38
 800e33c:	20000f4c 	.word	0x20000f4c
 800e340:	20000f68 	.word	0x20000f68
 800e344:	20000f7c 	.word	0x20000f7c
 800e348:	20000f94 	.word	0x20000f94
 800e34c:	20000f60 	.word	0x20000f60
 800e350:	20000f64 	.word	0x20000f64

0800e354 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b082      	sub	sp, #8
 800e358:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e35a:	e019      	b.n	800e390 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e35c:	f000 f9fe 	bl	800e75c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e360:	4b0f      	ldr	r3, [pc, #60]	; (800e3a0 <prvCheckTasksWaitingTermination+0x4c>)
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	68db      	ldr	r3, [r3, #12]
 800e366:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	3304      	adds	r3, #4
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7ff fb91 	bl	800da94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e372:	4b0c      	ldr	r3, [pc, #48]	; (800e3a4 <prvCheckTasksWaitingTermination+0x50>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	3b01      	subs	r3, #1
 800e378:	4a0a      	ldr	r2, [pc, #40]	; (800e3a4 <prvCheckTasksWaitingTermination+0x50>)
 800e37a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e37c:	4b0a      	ldr	r3, [pc, #40]	; (800e3a8 <prvCheckTasksWaitingTermination+0x54>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	3b01      	subs	r3, #1
 800e382:	4a09      	ldr	r2, [pc, #36]	; (800e3a8 <prvCheckTasksWaitingTermination+0x54>)
 800e384:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e386:	f000 fa17 	bl	800e7b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 f80e 	bl	800e3ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e390:	4b05      	ldr	r3, [pc, #20]	; (800e3a8 <prvCheckTasksWaitingTermination+0x54>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d1e1      	bne.n	800e35c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e398:	bf00      	nop
 800e39a:	3708      	adds	r7, #8
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	20000f7c 	.word	0x20000f7c
 800e3a4:	20000fa8 	.word	0x20000fa8
 800e3a8:	20000f90 	.word	0x20000f90

0800e3ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b084      	sub	sp, #16
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d108      	bne.n	800e3d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f000 fb68 	bl	800ea98 <vPortFree>
				vPortFree( pxTCB );
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f000 fb65 	bl	800ea98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e3ce:	e017      	b.n	800e400 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d103      	bne.n	800e3e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 fb5c 	bl	800ea98 <vPortFree>
	}
 800e3e0:	e00e      	b.n	800e400 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e3e8:	2b02      	cmp	r3, #2
 800e3ea:	d009      	beq.n	800e400 <prvDeleteTCB+0x54>
 800e3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f0:	f383 8811 	msr	BASEPRI, r3
 800e3f4:	f3bf 8f6f 	isb	sy
 800e3f8:	f3bf 8f4f 	dsb	sy
 800e3fc:	60fb      	str	r3, [r7, #12]
 800e3fe:	e7fe      	b.n	800e3fe <prvDeleteTCB+0x52>
	}
 800e400:	bf00      	nop
 800e402:	3710      	adds	r7, #16
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}

0800e408 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e408:	b480      	push	{r7}
 800e40a:	b083      	sub	sp, #12
 800e40c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e40e:	4b0c      	ldr	r3, [pc, #48]	; (800e440 <prvResetNextTaskUnblockTime+0x38>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d104      	bne.n	800e422 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e418:	4b0a      	ldr	r3, [pc, #40]	; (800e444 <prvResetNextTaskUnblockTime+0x3c>)
 800e41a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e41e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e420:	e008      	b.n	800e434 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e422:	4b07      	ldr	r3, [pc, #28]	; (800e440 <prvResetNextTaskUnblockTime+0x38>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	68db      	ldr	r3, [r3, #12]
 800e428:	68db      	ldr	r3, [r3, #12]
 800e42a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	4a04      	ldr	r2, [pc, #16]	; (800e444 <prvResetNextTaskUnblockTime+0x3c>)
 800e432:	6013      	str	r3, [r2, #0]
}
 800e434:	bf00      	nop
 800e436:	370c      	adds	r7, #12
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr
 800e440:	20000f60 	.word	0x20000f60
 800e444:	20000fc8 	.word	0x20000fc8

0800e448 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e452:	4b29      	ldr	r3, [pc, #164]	; (800e4f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e458:	4b28      	ldr	r3, [pc, #160]	; (800e4fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	3304      	adds	r3, #4
 800e45e:	4618      	mov	r0, r3
 800e460:	f7ff fb18 	bl	800da94 <uxListRemove>
 800e464:	4603      	mov	r3, r0
 800e466:	2b00      	cmp	r3, #0
 800e468:	d10b      	bne.n	800e482 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e46a:	4b24      	ldr	r3, [pc, #144]	; (800e4fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e470:	2201      	movs	r2, #1
 800e472:	fa02 f303 	lsl.w	r3, r2, r3
 800e476:	43da      	mvns	r2, r3
 800e478:	4b21      	ldr	r3, [pc, #132]	; (800e500 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	4013      	ands	r3, r2
 800e47e:	4a20      	ldr	r2, [pc, #128]	; (800e500 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e480:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e488:	d10a      	bne.n	800e4a0 <prvAddCurrentTaskToDelayedList+0x58>
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d007      	beq.n	800e4a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e490:	4b1a      	ldr	r3, [pc, #104]	; (800e4fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	3304      	adds	r3, #4
 800e496:	4619      	mov	r1, r3
 800e498:	481a      	ldr	r0, [pc, #104]	; (800e504 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e49a:	f7ff fa9e 	bl	800d9da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e49e:	e026      	b.n	800e4ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e4a0:	68fa      	ldr	r2, [r7, #12]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	4413      	add	r3, r2
 800e4a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e4a8:	4b14      	ldr	r3, [pc, #80]	; (800e4fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	68ba      	ldr	r2, [r7, #8]
 800e4ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e4b0:	68ba      	ldr	r2, [r7, #8]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d209      	bcs.n	800e4cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4b8:	4b13      	ldr	r3, [pc, #76]	; (800e508 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e4ba:	681a      	ldr	r2, [r3, #0]
 800e4bc:	4b0f      	ldr	r3, [pc, #60]	; (800e4fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	3304      	adds	r3, #4
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	4610      	mov	r0, r2
 800e4c6:	f7ff faac 	bl	800da22 <vListInsert>
}
 800e4ca:	e010      	b.n	800e4ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e4cc:	4b0f      	ldr	r3, [pc, #60]	; (800e50c <prvAddCurrentTaskToDelayedList+0xc4>)
 800e4ce:	681a      	ldr	r2, [r3, #0]
 800e4d0:	4b0a      	ldr	r3, [pc, #40]	; (800e4fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	3304      	adds	r3, #4
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	4610      	mov	r0, r2
 800e4da:	f7ff faa2 	bl	800da22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e4de:	4b0c      	ldr	r3, [pc, #48]	; (800e510 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	68ba      	ldr	r2, [r7, #8]
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	d202      	bcs.n	800e4ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e4e8:	4a09      	ldr	r2, [pc, #36]	; (800e510 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	6013      	str	r3, [r2, #0]
}
 800e4ee:	bf00      	nop
 800e4f0:	3710      	adds	r7, #16
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
 800e4f6:	bf00      	nop
 800e4f8:	20000fac 	.word	0x20000fac
 800e4fc:	20000ea8 	.word	0x20000ea8
 800e500:	20000fb0 	.word	0x20000fb0
 800e504:	20000f94 	.word	0x20000f94
 800e508:	20000f64 	.word	0x20000f64
 800e50c:	20000f60 	.word	0x20000f60
 800e510:	20000fc8 	.word	0x20000fc8

0800e514 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e514:	b480      	push	{r7}
 800e516:	b085      	sub	sp, #20
 800e518:	af00      	add	r7, sp, #0
 800e51a:	60f8      	str	r0, [r7, #12]
 800e51c:	60b9      	str	r1, [r7, #8]
 800e51e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	3b04      	subs	r3, #4
 800e524:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e52c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	3b04      	subs	r3, #4
 800e532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	f023 0201 	bic.w	r2, r3, #1
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	3b04      	subs	r3, #4
 800e542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e544:	4a0c      	ldr	r2, [pc, #48]	; (800e578 <pxPortInitialiseStack+0x64>)
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	3b14      	subs	r3, #20
 800e54e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e550:	687a      	ldr	r2, [r7, #4]
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	3b04      	subs	r3, #4
 800e55a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f06f 0202 	mvn.w	r2, #2
 800e562:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	3b20      	subs	r3, #32
 800e568:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e56a:	68fb      	ldr	r3, [r7, #12]
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3714      	adds	r7, #20
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr
 800e578:	0800e57d 	.word	0x0800e57d

0800e57c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e57c:	b480      	push	{r7}
 800e57e:	b085      	sub	sp, #20
 800e580:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e582:	2300      	movs	r3, #0
 800e584:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e586:	4b11      	ldr	r3, [pc, #68]	; (800e5cc <prvTaskExitError+0x50>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e58e:	d009      	beq.n	800e5a4 <prvTaskExitError+0x28>
 800e590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e594:	f383 8811 	msr	BASEPRI, r3
 800e598:	f3bf 8f6f 	isb	sy
 800e59c:	f3bf 8f4f 	dsb	sy
 800e5a0:	60fb      	str	r3, [r7, #12]
 800e5a2:	e7fe      	b.n	800e5a2 <prvTaskExitError+0x26>
 800e5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a8:	f383 8811 	msr	BASEPRI, r3
 800e5ac:	f3bf 8f6f 	isb	sy
 800e5b0:	f3bf 8f4f 	dsb	sy
 800e5b4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e5b6:	bf00      	nop
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d0fc      	beq.n	800e5b8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e5be:	bf00      	nop
 800e5c0:	3714      	adds	r7, #20
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c8:	4770      	bx	lr
 800e5ca:	bf00      	nop
 800e5cc:	20000124 	.word	0x20000124

0800e5d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e5d0:	4b07      	ldr	r3, [pc, #28]	; (800e5f0 <pxCurrentTCBConst2>)
 800e5d2:	6819      	ldr	r1, [r3, #0]
 800e5d4:	6808      	ldr	r0, [r1, #0]
 800e5d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5da:	f380 8809 	msr	PSP, r0
 800e5de:	f3bf 8f6f 	isb	sy
 800e5e2:	f04f 0000 	mov.w	r0, #0
 800e5e6:	f380 8811 	msr	BASEPRI, r0
 800e5ea:	4770      	bx	lr
 800e5ec:	f3af 8000 	nop.w

0800e5f0 <pxCurrentTCBConst2>:
 800e5f0:	20000ea8 	.word	0x20000ea8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e5f4:	bf00      	nop
 800e5f6:	bf00      	nop

0800e5f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e5f8:	4808      	ldr	r0, [pc, #32]	; (800e61c <prvPortStartFirstTask+0x24>)
 800e5fa:	6800      	ldr	r0, [r0, #0]
 800e5fc:	6800      	ldr	r0, [r0, #0]
 800e5fe:	f380 8808 	msr	MSP, r0
 800e602:	f04f 0000 	mov.w	r0, #0
 800e606:	f380 8814 	msr	CONTROL, r0
 800e60a:	b662      	cpsie	i
 800e60c:	b661      	cpsie	f
 800e60e:	f3bf 8f4f 	dsb	sy
 800e612:	f3bf 8f6f 	isb	sy
 800e616:	df00      	svc	0
 800e618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e61a:	bf00      	nop
 800e61c:	e000ed08 	.word	0xe000ed08

0800e620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b086      	sub	sp, #24
 800e624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e626:	4b44      	ldr	r3, [pc, #272]	; (800e738 <xPortStartScheduler+0x118>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	4a44      	ldr	r2, [pc, #272]	; (800e73c <xPortStartScheduler+0x11c>)
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d109      	bne.n	800e644 <xPortStartScheduler+0x24>
 800e630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e634:	f383 8811 	msr	BASEPRI, r3
 800e638:	f3bf 8f6f 	isb	sy
 800e63c:	f3bf 8f4f 	dsb	sy
 800e640:	613b      	str	r3, [r7, #16]
 800e642:	e7fe      	b.n	800e642 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e644:	4b3c      	ldr	r3, [pc, #240]	; (800e738 <xPortStartScheduler+0x118>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4a3d      	ldr	r2, [pc, #244]	; (800e740 <xPortStartScheduler+0x120>)
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d109      	bne.n	800e662 <xPortStartScheduler+0x42>
 800e64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e652:	f383 8811 	msr	BASEPRI, r3
 800e656:	f3bf 8f6f 	isb	sy
 800e65a:	f3bf 8f4f 	dsb	sy
 800e65e:	60fb      	str	r3, [r7, #12]
 800e660:	e7fe      	b.n	800e660 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e662:	4b38      	ldr	r3, [pc, #224]	; (800e744 <xPortStartScheduler+0x124>)
 800e664:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	22ff      	movs	r2, #255	; 0xff
 800e672:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e67c:	78fb      	ldrb	r3, [r7, #3]
 800e67e:	b2db      	uxtb	r3, r3
 800e680:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e684:	b2da      	uxtb	r2, r3
 800e686:	4b30      	ldr	r3, [pc, #192]	; (800e748 <xPortStartScheduler+0x128>)
 800e688:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e68a:	4b30      	ldr	r3, [pc, #192]	; (800e74c <xPortStartScheduler+0x12c>)
 800e68c:	2207      	movs	r2, #7
 800e68e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e690:	e009      	b.n	800e6a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800e692:	4b2e      	ldr	r3, [pc, #184]	; (800e74c <xPortStartScheduler+0x12c>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	3b01      	subs	r3, #1
 800e698:	4a2c      	ldr	r2, [pc, #176]	; (800e74c <xPortStartScheduler+0x12c>)
 800e69a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e69c:	78fb      	ldrb	r3, [r7, #3]
 800e69e:	b2db      	uxtb	r3, r3
 800e6a0:	005b      	lsls	r3, r3, #1
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e6a6:	78fb      	ldrb	r3, [r7, #3]
 800e6a8:	b2db      	uxtb	r3, r3
 800e6aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6ae:	2b80      	cmp	r3, #128	; 0x80
 800e6b0:	d0ef      	beq.n	800e692 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e6b2:	4b26      	ldr	r3, [pc, #152]	; (800e74c <xPortStartScheduler+0x12c>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	f1c3 0307 	rsb	r3, r3, #7
 800e6ba:	2b04      	cmp	r3, #4
 800e6bc:	d009      	beq.n	800e6d2 <xPortStartScheduler+0xb2>
 800e6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	60bb      	str	r3, [r7, #8]
 800e6d0:	e7fe      	b.n	800e6d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e6d2:	4b1e      	ldr	r3, [pc, #120]	; (800e74c <xPortStartScheduler+0x12c>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	021b      	lsls	r3, r3, #8
 800e6d8:	4a1c      	ldr	r2, [pc, #112]	; (800e74c <xPortStartScheduler+0x12c>)
 800e6da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6dc:	4b1b      	ldr	r3, [pc, #108]	; (800e74c <xPortStartScheduler+0x12c>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e6e4:	4a19      	ldr	r2, [pc, #100]	; (800e74c <xPortStartScheduler+0x12c>)
 800e6e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	b2da      	uxtb	r2, r3
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e6f0:	4b17      	ldr	r3, [pc, #92]	; (800e750 <xPortStartScheduler+0x130>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4a16      	ldr	r2, [pc, #88]	; (800e750 <xPortStartScheduler+0x130>)
 800e6f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e6fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e6fc:	4b14      	ldr	r3, [pc, #80]	; (800e750 <xPortStartScheduler+0x130>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a13      	ldr	r2, [pc, #76]	; (800e750 <xPortStartScheduler+0x130>)
 800e702:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e706:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e708:	f000 f8d6 	bl	800e8b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e70c:	4b11      	ldr	r3, [pc, #68]	; (800e754 <xPortStartScheduler+0x134>)
 800e70e:	2200      	movs	r2, #0
 800e710:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e712:	f000 f8f5 	bl	800e900 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e716:	4b10      	ldr	r3, [pc, #64]	; (800e758 <xPortStartScheduler+0x138>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	4a0f      	ldr	r2, [pc, #60]	; (800e758 <xPortStartScheduler+0x138>)
 800e71c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e720:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e722:	f7ff ff69 	bl	800e5f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e726:	f7ff fd63 	bl	800e1f0 <vTaskSwitchContext>
	prvTaskExitError();
 800e72a:	f7ff ff27 	bl	800e57c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e72e:	2300      	movs	r3, #0
}
 800e730:	4618      	mov	r0, r3
 800e732:	3718      	adds	r7, #24
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	e000ed00 	.word	0xe000ed00
 800e73c:	410fc271 	.word	0x410fc271
 800e740:	410fc270 	.word	0x410fc270
 800e744:	e000e400 	.word	0xe000e400
 800e748:	20000fd4 	.word	0x20000fd4
 800e74c:	20000fd8 	.word	0x20000fd8
 800e750:	e000ed20 	.word	0xe000ed20
 800e754:	20000124 	.word	0x20000124
 800e758:	e000ef34 	.word	0xe000ef34

0800e75c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e75c:	b480      	push	{r7}
 800e75e:	b083      	sub	sp, #12
 800e760:	af00      	add	r7, sp, #0
 800e762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e766:	f383 8811 	msr	BASEPRI, r3
 800e76a:	f3bf 8f6f 	isb	sy
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e774:	4b0e      	ldr	r3, [pc, #56]	; (800e7b0 <vPortEnterCritical+0x54>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	3301      	adds	r3, #1
 800e77a:	4a0d      	ldr	r2, [pc, #52]	; (800e7b0 <vPortEnterCritical+0x54>)
 800e77c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e77e:	4b0c      	ldr	r3, [pc, #48]	; (800e7b0 <vPortEnterCritical+0x54>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2b01      	cmp	r3, #1
 800e784:	d10e      	bne.n	800e7a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e786:	4b0b      	ldr	r3, [pc, #44]	; (800e7b4 <vPortEnterCritical+0x58>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	b2db      	uxtb	r3, r3
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d009      	beq.n	800e7a4 <vPortEnterCritical+0x48>
 800e790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e794:	f383 8811 	msr	BASEPRI, r3
 800e798:	f3bf 8f6f 	isb	sy
 800e79c:	f3bf 8f4f 	dsb	sy
 800e7a0:	603b      	str	r3, [r7, #0]
 800e7a2:	e7fe      	b.n	800e7a2 <vPortEnterCritical+0x46>
	}
}
 800e7a4:	bf00      	nop
 800e7a6:	370c      	adds	r7, #12
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr
 800e7b0:	20000124 	.word	0x20000124
 800e7b4:	e000ed04 	.word	0xe000ed04

0800e7b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b083      	sub	sp, #12
 800e7bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e7be:	4b11      	ldr	r3, [pc, #68]	; (800e804 <vPortExitCritical+0x4c>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d109      	bne.n	800e7da <vPortExitCritical+0x22>
 800e7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ca:	f383 8811 	msr	BASEPRI, r3
 800e7ce:	f3bf 8f6f 	isb	sy
 800e7d2:	f3bf 8f4f 	dsb	sy
 800e7d6:	607b      	str	r3, [r7, #4]
 800e7d8:	e7fe      	b.n	800e7d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800e7da:	4b0a      	ldr	r3, [pc, #40]	; (800e804 <vPortExitCritical+0x4c>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	3b01      	subs	r3, #1
 800e7e0:	4a08      	ldr	r2, [pc, #32]	; (800e804 <vPortExitCritical+0x4c>)
 800e7e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e7e4:	4b07      	ldr	r3, [pc, #28]	; (800e804 <vPortExitCritical+0x4c>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d104      	bne.n	800e7f6 <vPortExitCritical+0x3e>
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e7f6:	bf00      	nop
 800e7f8:	370c      	adds	r7, #12
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr
 800e802:	bf00      	nop
 800e804:	20000124 	.word	0x20000124
	...

0800e810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e810:	f3ef 8009 	mrs	r0, PSP
 800e814:	f3bf 8f6f 	isb	sy
 800e818:	4b15      	ldr	r3, [pc, #84]	; (800e870 <pxCurrentTCBConst>)
 800e81a:	681a      	ldr	r2, [r3, #0]
 800e81c:	f01e 0f10 	tst.w	lr, #16
 800e820:	bf08      	it	eq
 800e822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e82a:	6010      	str	r0, [r2, #0]
 800e82c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e830:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e834:	f380 8811 	msr	BASEPRI, r0
 800e838:	f3bf 8f4f 	dsb	sy
 800e83c:	f3bf 8f6f 	isb	sy
 800e840:	f7ff fcd6 	bl	800e1f0 <vTaskSwitchContext>
 800e844:	f04f 0000 	mov.w	r0, #0
 800e848:	f380 8811 	msr	BASEPRI, r0
 800e84c:	bc09      	pop	{r0, r3}
 800e84e:	6819      	ldr	r1, [r3, #0]
 800e850:	6808      	ldr	r0, [r1, #0]
 800e852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e856:	f01e 0f10 	tst.w	lr, #16
 800e85a:	bf08      	it	eq
 800e85c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e860:	f380 8809 	msr	PSP, r0
 800e864:	f3bf 8f6f 	isb	sy
 800e868:	4770      	bx	lr
 800e86a:	bf00      	nop
 800e86c:	f3af 8000 	nop.w

0800e870 <pxCurrentTCBConst>:
 800e870:	20000ea8 	.word	0x20000ea8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e874:	bf00      	nop
 800e876:	bf00      	nop

0800e878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
	__asm volatile
 800e87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e882:	f383 8811 	msr	BASEPRI, r3
 800e886:	f3bf 8f6f 	isb	sy
 800e88a:	f3bf 8f4f 	dsb	sy
 800e88e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e890:	f7ff fbf6 	bl	800e080 <xTaskIncrementTick>
 800e894:	4603      	mov	r3, r0
 800e896:	2b00      	cmp	r3, #0
 800e898:	d003      	beq.n	800e8a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e89a:	4b06      	ldr	r3, [pc, #24]	; (800e8b4 <SysTick_Handler+0x3c>)
 800e89c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8a0:	601a      	str	r2, [r3, #0]
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e8ac:	bf00      	nop
 800e8ae:	3708      	adds	r7, #8
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}
 800e8b4:	e000ed04 	.word	0xe000ed04

0800e8b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e8bc:	4b0b      	ldr	r3, [pc, #44]	; (800e8ec <vPortSetupTimerInterrupt+0x34>)
 800e8be:	2200      	movs	r2, #0
 800e8c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e8c2:	4b0b      	ldr	r3, [pc, #44]	; (800e8f0 <vPortSetupTimerInterrupt+0x38>)
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e8c8:	4b0a      	ldr	r3, [pc, #40]	; (800e8f4 <vPortSetupTimerInterrupt+0x3c>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	4a0a      	ldr	r2, [pc, #40]	; (800e8f8 <vPortSetupTimerInterrupt+0x40>)
 800e8ce:	fba2 2303 	umull	r2, r3, r2, r3
 800e8d2:	099b      	lsrs	r3, r3, #6
 800e8d4:	4a09      	ldr	r2, [pc, #36]	; (800e8fc <vPortSetupTimerInterrupt+0x44>)
 800e8d6:	3b01      	subs	r3, #1
 800e8d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e8da:	4b04      	ldr	r3, [pc, #16]	; (800e8ec <vPortSetupTimerInterrupt+0x34>)
 800e8dc:	2207      	movs	r2, #7
 800e8de:	601a      	str	r2, [r3, #0]
}
 800e8e0:	bf00      	nop
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e8:	4770      	bx	lr
 800e8ea:	bf00      	nop
 800e8ec:	e000e010 	.word	0xe000e010
 800e8f0:	e000e018 	.word	0xe000e018
 800e8f4:	20000008 	.word	0x20000008
 800e8f8:	10624dd3 	.word	0x10624dd3
 800e8fc:	e000e014 	.word	0xe000e014

0800e900 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e900:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e910 <vPortEnableVFP+0x10>
 800e904:	6801      	ldr	r1, [r0, #0]
 800e906:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e90a:	6001      	str	r1, [r0, #0]
 800e90c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e90e:	bf00      	nop
 800e910:	e000ed88 	.word	0xe000ed88

0800e914 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b08a      	sub	sp, #40	; 0x28
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e91c:	2300      	movs	r3, #0
 800e91e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e920:	f7ff fb04 	bl	800df2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e924:	4b57      	ldr	r3, [pc, #348]	; (800ea84 <pvPortMalloc+0x170>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d101      	bne.n	800e930 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e92c:	f000 f90c 	bl	800eb48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e930:	4b55      	ldr	r3, [pc, #340]	; (800ea88 <pvPortMalloc+0x174>)
 800e932:	681a      	ldr	r2, [r3, #0]
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	4013      	ands	r3, r2
 800e938:	2b00      	cmp	r3, #0
 800e93a:	f040 808c 	bne.w	800ea56 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d01c      	beq.n	800e97e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800e944:	2208      	movs	r2, #8
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	4413      	add	r3, r2
 800e94a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f003 0307 	and.w	r3, r3, #7
 800e952:	2b00      	cmp	r3, #0
 800e954:	d013      	beq.n	800e97e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f023 0307 	bic.w	r3, r3, #7
 800e95c:	3308      	adds	r3, #8
 800e95e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f003 0307 	and.w	r3, r3, #7
 800e966:	2b00      	cmp	r3, #0
 800e968:	d009      	beq.n	800e97e <pvPortMalloc+0x6a>
	__asm volatile
 800e96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e96e:	f383 8811 	msr	BASEPRI, r3
 800e972:	f3bf 8f6f 	isb	sy
 800e976:	f3bf 8f4f 	dsb	sy
 800e97a:	617b      	str	r3, [r7, #20]
 800e97c:	e7fe      	b.n	800e97c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d068      	beq.n	800ea56 <pvPortMalloc+0x142>
 800e984:	4b41      	ldr	r3, [pc, #260]	; (800ea8c <pvPortMalloc+0x178>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	687a      	ldr	r2, [r7, #4]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d863      	bhi.n	800ea56 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e98e:	4b40      	ldr	r3, [pc, #256]	; (800ea90 <pvPortMalloc+0x17c>)
 800e990:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e992:	4b3f      	ldr	r3, [pc, #252]	; (800ea90 <pvPortMalloc+0x17c>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e998:	e004      	b.n	800e9a4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800e99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a6:	685b      	ldr	r3, [r3, #4]
 800e9a8:	687a      	ldr	r2, [r7, #4]
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d903      	bls.n	800e9b6 <pvPortMalloc+0xa2>
 800e9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d1f1      	bne.n	800e99a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e9b6:	4b33      	ldr	r3, [pc, #204]	; (800ea84 <pvPortMalloc+0x170>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d04a      	beq.n	800ea56 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e9c0:	6a3b      	ldr	r3, [r7, #32]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	2208      	movs	r2, #8
 800e9c6:	4413      	add	r3, r2
 800e9c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9cc:	681a      	ldr	r2, [r3, #0]
 800e9ce:	6a3b      	ldr	r3, [r7, #32]
 800e9d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d4:	685a      	ldr	r2, [r3, #4]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	1ad2      	subs	r2, r2, r3
 800e9da:	2308      	movs	r3, #8
 800e9dc:	005b      	lsls	r3, r3, #1
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d91e      	bls.n	800ea20 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e9e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	4413      	add	r3, r2
 800e9e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9ea:	69bb      	ldr	r3, [r7, #24]
 800e9ec:	f003 0307 	and.w	r3, r3, #7
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d009      	beq.n	800ea08 <pvPortMalloc+0xf4>
 800e9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f8:	f383 8811 	msr	BASEPRI, r3
 800e9fc:	f3bf 8f6f 	isb	sy
 800ea00:	f3bf 8f4f 	dsb	sy
 800ea04:	613b      	str	r3, [r7, #16]
 800ea06:	e7fe      	b.n	800ea06 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ea08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0a:	685a      	ldr	r2, [r3, #4]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	1ad2      	subs	r2, r2, r3
 800ea10:	69bb      	ldr	r3, [r7, #24]
 800ea12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ea14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea16:	687a      	ldr	r2, [r7, #4]
 800ea18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ea1a:	69b8      	ldr	r0, [r7, #24]
 800ea1c:	f000 f8f6 	bl	800ec0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ea20:	4b1a      	ldr	r3, [pc, #104]	; (800ea8c <pvPortMalloc+0x178>)
 800ea22:	681a      	ldr	r2, [r3, #0]
 800ea24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea26:	685b      	ldr	r3, [r3, #4]
 800ea28:	1ad3      	subs	r3, r2, r3
 800ea2a:	4a18      	ldr	r2, [pc, #96]	; (800ea8c <pvPortMalloc+0x178>)
 800ea2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ea2e:	4b17      	ldr	r3, [pc, #92]	; (800ea8c <pvPortMalloc+0x178>)
 800ea30:	681a      	ldr	r2, [r3, #0]
 800ea32:	4b18      	ldr	r3, [pc, #96]	; (800ea94 <pvPortMalloc+0x180>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d203      	bcs.n	800ea42 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ea3a:	4b14      	ldr	r3, [pc, #80]	; (800ea8c <pvPortMalloc+0x178>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	4a15      	ldr	r2, [pc, #84]	; (800ea94 <pvPortMalloc+0x180>)
 800ea40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ea42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea44:	685a      	ldr	r2, [r3, #4]
 800ea46:	4b10      	ldr	r3, [pc, #64]	; (800ea88 <pvPortMalloc+0x174>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	431a      	orrs	r2, r3
 800ea4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ea50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea52:	2200      	movs	r2, #0
 800ea54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ea56:	f7ff fa77 	bl	800df48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea5a:	69fb      	ldr	r3, [r7, #28]
 800ea5c:	f003 0307 	and.w	r3, r3, #7
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d009      	beq.n	800ea78 <pvPortMalloc+0x164>
 800ea64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea68:	f383 8811 	msr	BASEPRI, r3
 800ea6c:	f3bf 8f6f 	isb	sy
 800ea70:	f3bf 8f4f 	dsb	sy
 800ea74:	60fb      	str	r3, [r7, #12]
 800ea76:	e7fe      	b.n	800ea76 <pvPortMalloc+0x162>
	return pvReturn;
 800ea78:	69fb      	ldr	r3, [r7, #28]
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3728      	adds	r7, #40	; 0x28
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	20004be4 	.word	0x20004be4
 800ea88:	20004bf0 	.word	0x20004bf0
 800ea8c:	20004be8 	.word	0x20004be8
 800ea90:	20004bdc 	.word	0x20004bdc
 800ea94:	20004bec 	.word	0x20004bec

0800ea98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b086      	sub	sp, #24
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d046      	beq.n	800eb38 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eaaa:	2308      	movs	r3, #8
 800eaac:	425b      	negs	r3, r3
 800eaae:	697a      	ldr	r2, [r7, #20]
 800eab0:	4413      	add	r3, r2
 800eab2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	685a      	ldr	r2, [r3, #4]
 800eabc:	4b20      	ldr	r3, [pc, #128]	; (800eb40 <vPortFree+0xa8>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4013      	ands	r3, r2
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d109      	bne.n	800eada <vPortFree+0x42>
 800eac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaca:	f383 8811 	msr	BASEPRI, r3
 800eace:	f3bf 8f6f 	isb	sy
 800ead2:	f3bf 8f4f 	dsb	sy
 800ead6:	60fb      	str	r3, [r7, #12]
 800ead8:	e7fe      	b.n	800ead8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eada:	693b      	ldr	r3, [r7, #16]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d009      	beq.n	800eaf6 <vPortFree+0x5e>
 800eae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae6:	f383 8811 	msr	BASEPRI, r3
 800eaea:	f3bf 8f6f 	isb	sy
 800eaee:	f3bf 8f4f 	dsb	sy
 800eaf2:	60bb      	str	r3, [r7, #8]
 800eaf4:	e7fe      	b.n	800eaf4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	685a      	ldr	r2, [r3, #4]
 800eafa:	4b11      	ldr	r3, [pc, #68]	; (800eb40 <vPortFree+0xa8>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	4013      	ands	r3, r2
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d019      	beq.n	800eb38 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d115      	bne.n	800eb38 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	685a      	ldr	r2, [r3, #4]
 800eb10:	4b0b      	ldr	r3, [pc, #44]	; (800eb40 <vPortFree+0xa8>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	43db      	mvns	r3, r3
 800eb16:	401a      	ands	r2, r3
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eb1c:	f7ff fa06 	bl	800df2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	685a      	ldr	r2, [r3, #4]
 800eb24:	4b07      	ldr	r3, [pc, #28]	; (800eb44 <vPortFree+0xac>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	4413      	add	r3, r2
 800eb2a:	4a06      	ldr	r2, [pc, #24]	; (800eb44 <vPortFree+0xac>)
 800eb2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eb2e:	6938      	ldr	r0, [r7, #16]
 800eb30:	f000 f86c 	bl	800ec0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eb34:	f7ff fa08 	bl	800df48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eb38:	bf00      	nop
 800eb3a:	3718      	adds	r7, #24
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}
 800eb40:	20004bf0 	.word	0x20004bf0
 800eb44:	20004be8 	.word	0x20004be8

0800eb48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b085      	sub	sp, #20
 800eb4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eb4e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800eb52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eb54:	4b27      	ldr	r3, [pc, #156]	; (800ebf4 <prvHeapInit+0xac>)
 800eb56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	f003 0307 	and.w	r3, r3, #7
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d00c      	beq.n	800eb7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	3307      	adds	r3, #7
 800eb66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f023 0307 	bic.w	r3, r3, #7
 800eb6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eb70:	68ba      	ldr	r2, [r7, #8]
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	1ad3      	subs	r3, r2, r3
 800eb76:	4a1f      	ldr	r2, [pc, #124]	; (800ebf4 <prvHeapInit+0xac>)
 800eb78:	4413      	add	r3, r2
 800eb7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eb80:	4a1d      	ldr	r2, [pc, #116]	; (800ebf8 <prvHeapInit+0xb0>)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eb86:	4b1c      	ldr	r3, [pc, #112]	; (800ebf8 <prvHeapInit+0xb0>)
 800eb88:	2200      	movs	r2, #0
 800eb8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	68ba      	ldr	r2, [r7, #8]
 800eb90:	4413      	add	r3, r2
 800eb92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eb94:	2208      	movs	r2, #8
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	1a9b      	subs	r3, r3, r2
 800eb9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	f023 0307 	bic.w	r3, r3, #7
 800eba2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	4a15      	ldr	r2, [pc, #84]	; (800ebfc <prvHeapInit+0xb4>)
 800eba8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ebaa:	4b14      	ldr	r3, [pc, #80]	; (800ebfc <prvHeapInit+0xb4>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ebb2:	4b12      	ldr	r3, [pc, #72]	; (800ebfc <prvHeapInit+0xb4>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	1ad2      	subs	r2, r2, r3
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ebc8:	4b0c      	ldr	r3, [pc, #48]	; (800ebfc <prvHeapInit+0xb4>)
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	685b      	ldr	r3, [r3, #4]
 800ebd4:	4a0a      	ldr	r2, [pc, #40]	; (800ec00 <prvHeapInit+0xb8>)
 800ebd6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	685b      	ldr	r3, [r3, #4]
 800ebdc:	4a09      	ldr	r2, [pc, #36]	; (800ec04 <prvHeapInit+0xbc>)
 800ebde:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ebe0:	4b09      	ldr	r3, [pc, #36]	; (800ec08 <prvHeapInit+0xc0>)
 800ebe2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ebe6:	601a      	str	r2, [r3, #0]
}
 800ebe8:	bf00      	nop
 800ebea:	3714      	adds	r7, #20
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr
 800ebf4:	20000fdc 	.word	0x20000fdc
 800ebf8:	20004bdc 	.word	0x20004bdc
 800ebfc:	20004be4 	.word	0x20004be4
 800ec00:	20004bec 	.word	0x20004bec
 800ec04:	20004be8 	.word	0x20004be8
 800ec08:	20004bf0 	.word	0x20004bf0

0800ec0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b085      	sub	sp, #20
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec14:	4b28      	ldr	r3, [pc, #160]	; (800ecb8 <prvInsertBlockIntoFreeList+0xac>)
 800ec16:	60fb      	str	r3, [r7, #12]
 800ec18:	e002      	b.n	800ec20 <prvInsertBlockIntoFreeList+0x14>
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	60fb      	str	r3, [r7, #12]
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	687a      	ldr	r2, [r7, #4]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d8f7      	bhi.n	800ec1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	68ba      	ldr	r2, [r7, #8]
 800ec34:	4413      	add	r3, r2
 800ec36:	687a      	ldr	r2, [r7, #4]
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d108      	bne.n	800ec4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	685a      	ldr	r2, [r3, #4]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	441a      	add	r2, r3
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	685b      	ldr	r3, [r3, #4]
 800ec56:	68ba      	ldr	r2, [r7, #8]
 800ec58:	441a      	add	r2, r3
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	429a      	cmp	r2, r3
 800ec60:	d118      	bne.n	800ec94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681a      	ldr	r2, [r3, #0]
 800ec66:	4b15      	ldr	r3, [pc, #84]	; (800ecbc <prvInsertBlockIntoFreeList+0xb0>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d00d      	beq.n	800ec8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	685a      	ldr	r2, [r3, #4]
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	441a      	add	r2, r3
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	681a      	ldr	r2, [r3, #0]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	601a      	str	r2, [r3, #0]
 800ec88:	e008      	b.n	800ec9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec8a:	4b0c      	ldr	r3, [pc, #48]	; (800ecbc <prvInsertBlockIntoFreeList+0xb0>)
 800ec8c:	681a      	ldr	r2, [r3, #0]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	601a      	str	r2, [r3, #0]
 800ec92:	e003      	b.n	800ec9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681a      	ldr	r2, [r3, #0]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ec9c:	68fa      	ldr	r2, [r7, #12]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d002      	beq.n	800ecaa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	687a      	ldr	r2, [r7, #4]
 800eca8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ecaa:	bf00      	nop
 800ecac:	3714      	adds	r7, #20
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb4:	4770      	bx	lr
 800ecb6:	bf00      	nop
 800ecb8:	20004bdc 	.word	0x20004bdc
 800ecbc:	20004be4 	.word	0x20004be4

0800ecc0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	4912      	ldr	r1, [pc, #72]	; (800ed10 <MX_USB_DEVICE_Init+0x50>)
 800ecc8:	4812      	ldr	r0, [pc, #72]	; (800ed14 <MX_USB_DEVICE_Init+0x54>)
 800ecca:	f7fd fcd5 	bl	800c678 <USBD_Init>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d001      	beq.n	800ecd8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ecd4:	f7f1 ff2a 	bl	8000b2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ecd8:	490f      	ldr	r1, [pc, #60]	; (800ed18 <MX_USB_DEVICE_Init+0x58>)
 800ecda:	480e      	ldr	r0, [pc, #56]	; (800ed14 <MX_USB_DEVICE_Init+0x54>)
 800ecdc:	f7fd fd02 	bl	800c6e4 <USBD_RegisterClass>
 800ece0:	4603      	mov	r3, r0
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d001      	beq.n	800ecea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ece6:	f7f1 ff21 	bl	8000b2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ecea:	490c      	ldr	r1, [pc, #48]	; (800ed1c <MX_USB_DEVICE_Init+0x5c>)
 800ecec:	4809      	ldr	r0, [pc, #36]	; (800ed14 <MX_USB_DEVICE_Init+0x54>)
 800ecee:	f7fd fc27 	bl	800c540 <USBD_CDC_RegisterInterface>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d001      	beq.n	800ecfc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ecf8:	f7f1 ff18 	bl	8000b2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ecfc:	4805      	ldr	r0, [pc, #20]	; (800ed14 <MX_USB_DEVICE_Init+0x54>)
 800ecfe:	f7fd fd12 	bl	800c726 <USBD_Start>
 800ed02:	4603      	mov	r3, r0
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d001      	beq.n	800ed0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ed08:	f7f1 ff10 	bl	8000b2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ed0c:	bf00      	nop
 800ed0e:	bd80      	pop	{r7, pc}
 800ed10:	2000013c 	.word	0x2000013c
 800ed14:	200051cc 	.word	0x200051cc
 800ed18:	20000020 	.word	0x20000020
 800ed1c:	20000128 	.word	0x20000128

0800ed20 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ed24:	2200      	movs	r2, #0
 800ed26:	4907      	ldr	r1, [pc, #28]	; (800ed44 <CDC_Init_FS+0x24>)
 800ed28:	4807      	ldr	r0, [pc, #28]	; (800ed48 <CDC_Init_FS+0x28>)
 800ed2a:	f7fd fc1e 	bl	800c56a <USBD_CDC_SetTxBuffer>
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ed2e:	4907      	ldr	r1, [pc, #28]	; (800ed4c <CDC_Init_FS+0x2c>)
 800ed30:	4805      	ldr	r0, [pc, #20]	; (800ed48 <CDC_Init_FS+0x28>)
 800ed32:	f7fd fc33 	bl	800c59c <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);                                         //This is new to the function, the rest is standard HAL
 800ed36:	4804      	ldr	r0, [pc, #16]	; (800ed48 <CDC_Init_FS+0x28>)
 800ed38:	f7fd fc74 	bl	800c624 <USBD_CDC_ReceivePacket>
	  return (USBD_OK);
 800ed3c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	2000589c 	.word	0x2000589c
 800ed48:	200051cc 	.word	0x200051cc
 800ed4c:	2000549c 	.word	0x2000549c

0800ed50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ed50:	b480      	push	{r7}
 800ed52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ed54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr

0800ed60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b083      	sub	sp, #12
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	4603      	mov	r3, r0
 800ed68:	6039      	str	r1, [r7, #0]
 800ed6a:	71fb      	strb	r3, [r7, #7]
 800ed6c:	4613      	mov	r3, r2
 800ed6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ed70:	79fb      	ldrb	r3, [r7, #7]
 800ed72:	2b23      	cmp	r3, #35	; 0x23
 800ed74:	d84a      	bhi.n	800ee0c <CDC_Control_FS+0xac>
 800ed76:	a201      	add	r2, pc, #4	; (adr r2, 800ed7c <CDC_Control_FS+0x1c>)
 800ed78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed7c:	0800ee0d 	.word	0x0800ee0d
 800ed80:	0800ee0d 	.word	0x0800ee0d
 800ed84:	0800ee0d 	.word	0x0800ee0d
 800ed88:	0800ee0d 	.word	0x0800ee0d
 800ed8c:	0800ee0d 	.word	0x0800ee0d
 800ed90:	0800ee0d 	.word	0x0800ee0d
 800ed94:	0800ee0d 	.word	0x0800ee0d
 800ed98:	0800ee0d 	.word	0x0800ee0d
 800ed9c:	0800ee0d 	.word	0x0800ee0d
 800eda0:	0800ee0d 	.word	0x0800ee0d
 800eda4:	0800ee0d 	.word	0x0800ee0d
 800eda8:	0800ee0d 	.word	0x0800ee0d
 800edac:	0800ee0d 	.word	0x0800ee0d
 800edb0:	0800ee0d 	.word	0x0800ee0d
 800edb4:	0800ee0d 	.word	0x0800ee0d
 800edb8:	0800ee0d 	.word	0x0800ee0d
 800edbc:	0800ee0d 	.word	0x0800ee0d
 800edc0:	0800ee0d 	.word	0x0800ee0d
 800edc4:	0800ee0d 	.word	0x0800ee0d
 800edc8:	0800ee0d 	.word	0x0800ee0d
 800edcc:	0800ee0d 	.word	0x0800ee0d
 800edd0:	0800ee0d 	.word	0x0800ee0d
 800edd4:	0800ee0d 	.word	0x0800ee0d
 800edd8:	0800ee0d 	.word	0x0800ee0d
 800eddc:	0800ee0d 	.word	0x0800ee0d
 800ede0:	0800ee0d 	.word	0x0800ee0d
 800ede4:	0800ee0d 	.word	0x0800ee0d
 800ede8:	0800ee0d 	.word	0x0800ee0d
 800edec:	0800ee0d 	.word	0x0800ee0d
 800edf0:	0800ee0d 	.word	0x0800ee0d
 800edf4:	0800ee0d 	.word	0x0800ee0d
 800edf8:	0800ee0d 	.word	0x0800ee0d
 800edfc:	0800ee0d 	.word	0x0800ee0d
 800ee00:	0800ee0d 	.word	0x0800ee0d
 800ee04:	0800ee0d 	.word	0x0800ee0d
 800ee08:	0800ee0d 	.word	0x0800ee0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ee0c:	bf00      	nop
  }

  return (USBD_OK);
 800ee0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	370c      	adds	r7, #12
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr

0800ee1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b084      	sub	sp, #16
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


  volatile uint32_t counter = 0;
 800ee26:	2300      	movs	r3, #0
 800ee28:	60fb      	str	r3, [r7, #12]

  while(counter < *Len)
 800ee2a:	e01e      	b.n	800ee6a <CDC_Receive_FS+0x4e>
  {
       RxBuffer[RxFifoIndex ] = Buf[counter];
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	441a      	add	r2, r3
 800ee32:	4b16      	ldr	r3, [pc, #88]	; (800ee8c <CDC_Receive_FS+0x70>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	7811      	ldrb	r1, [r2, #0]
 800ee38:	4a15      	ldr	r2, [pc, #84]	; (800ee90 <CDC_Receive_FS+0x74>)
 800ee3a:	54d1      	strb	r1, [r2, r3]
       cdc_receive_put(Buf[counter]);
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	687a      	ldr	r2, [r7, #4]
 800ee40:	4413      	add	r3, r2
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7f4 fe4b 	bl	8003ae0 <cdc_receive_put>
       counter++, RxFifoIndex++;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	60fb      	str	r3, [r7, #12]
 800ee50:	4b0e      	ldr	r3, [pc, #56]	; (800ee8c <CDC_Receive_FS+0x70>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	3301      	adds	r3, #1
 800ee56:	4a0d      	ldr	r2, [pc, #52]	; (800ee8c <CDC_Receive_FS+0x70>)
 800ee58:	6013      	str	r3, [r2, #0]
       if(RxFifoIndex  == RxBufferSize)
 800ee5a:	4b0c      	ldr	r3, [pc, #48]	; (800ee8c <CDC_Receive_FS+0x70>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee62:	d102      	bne.n	800ee6a <CDC_Receive_FS+0x4e>
            RxFifoIndex  = 0;
 800ee64:	4b09      	ldr	r3, [pc, #36]	; (800ee8c <CDC_Receive_FS+0x70>)
 800ee66:	2200      	movs	r2, #0
 800ee68:	601a      	str	r2, [r3, #0]
  while(counter < *Len)
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d8db      	bhi.n	800ee2c <CDC_Receive_FS+0x10>
   }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ee74:	6879      	ldr	r1, [r7, #4]
 800ee76:	4807      	ldr	r0, [pc, #28]	; (800ee94 <CDC_Receive_FS+0x78>)
 800ee78:	f7fd fb90 	bl	800c59c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ee7c:	4805      	ldr	r0, [pc, #20]	; (800ee94 <CDC_Receive_FS+0x78>)
 800ee7e:	f7fd fbd1 	bl	800c624 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800ee82:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	3710      	adds	r7, #16
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}
 800ee8c:	20004bf4 	.word	0x20004bf4
 800ee90:	20005c9c 	.word	0x20005c9c
 800ee94:	200051cc 	.word	0x200051cc

0800ee98 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b084      	sub	sp, #16
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	460b      	mov	r3, r1
 800eea2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800eea4:	2300      	movs	r3, #0
 800eea6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800eea8:	4b0d      	ldr	r3, [pc, #52]	; (800eee0 <CDC_Transmit_FS+0x48>)
 800eeaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eeae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d001      	beq.n	800eebe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800eeba:	2301      	movs	r3, #1
 800eebc:	e00b      	b.n	800eed6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800eebe:	887b      	ldrh	r3, [r7, #2]
 800eec0:	461a      	mov	r2, r3
 800eec2:	6879      	ldr	r1, [r7, #4]
 800eec4:	4806      	ldr	r0, [pc, #24]	; (800eee0 <CDC_Transmit_FS+0x48>)
 800eec6:	f7fd fb50 	bl	800c56a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800eeca:	4805      	ldr	r0, [pc, #20]	; (800eee0 <CDC_Transmit_FS+0x48>)
 800eecc:	f7fd fb7a 	bl	800c5c4 <USBD_CDC_TransmitPacket>
 800eed0:	4603      	mov	r3, r0
 800eed2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800eed4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3710      	adds	r7, #16
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}
 800eede:	bf00      	nop
 800eee0:	200051cc 	.word	0x200051cc

0800eee4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b087      	sub	sp, #28
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	60f8      	str	r0, [r7, #12]
 800eeec:	60b9      	str	r1, [r7, #8]
 800eeee:	4613      	mov	r3, r2
 800eef0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eef2:	2300      	movs	r3, #0
 800eef4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	371c      	adds	r7, #28
 800eefe:	46bd      	mov	sp, r7
 800ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef04:	4770      	bx	lr
	...

0800ef08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b083      	sub	sp, #12
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	4603      	mov	r3, r0
 800ef10:	6039      	str	r1, [r7, #0]
 800ef12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	2212      	movs	r2, #18
 800ef18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ef1a:	4b03      	ldr	r3, [pc, #12]	; (800ef28 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	370c      	adds	r7, #12
 800ef20:	46bd      	mov	sp, r7
 800ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef26:	4770      	bx	lr
 800ef28:	20000158 	.word	0x20000158

0800ef2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b083      	sub	sp, #12
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	4603      	mov	r3, r0
 800ef34:	6039      	str	r1, [r7, #0]
 800ef36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	2204      	movs	r2, #4
 800ef3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ef3e:	4b03      	ldr	r3, [pc, #12]	; (800ef4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	370c      	adds	r7, #12
 800ef44:	46bd      	mov	sp, r7
 800ef46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4a:	4770      	bx	lr
 800ef4c:	2000016c 	.word	0x2000016c

0800ef50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	4603      	mov	r3, r0
 800ef58:	6039      	str	r1, [r7, #0]
 800ef5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ef5c:	79fb      	ldrb	r3, [r7, #7]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d105      	bne.n	800ef6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ef62:	683a      	ldr	r2, [r7, #0]
 800ef64:	4907      	ldr	r1, [pc, #28]	; (800ef84 <USBD_FS_ProductStrDescriptor+0x34>)
 800ef66:	4808      	ldr	r0, [pc, #32]	; (800ef88 <USBD_FS_ProductStrDescriptor+0x38>)
 800ef68:	f7fe fbab 	bl	800d6c2 <USBD_GetString>
 800ef6c:	e004      	b.n	800ef78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ef6e:	683a      	ldr	r2, [r7, #0]
 800ef70:	4904      	ldr	r1, [pc, #16]	; (800ef84 <USBD_FS_ProductStrDescriptor+0x34>)
 800ef72:	4805      	ldr	r0, [pc, #20]	; (800ef88 <USBD_FS_ProductStrDescriptor+0x38>)
 800ef74:	f7fe fba5 	bl	800d6c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef78:	4b02      	ldr	r3, [pc, #8]	; (800ef84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3708      	adds	r7, #8
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	2000609c 	.word	0x2000609c
 800ef88:	0800fefc 	.word	0x0800fefc

0800ef8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	4603      	mov	r3, r0
 800ef94:	6039      	str	r1, [r7, #0]
 800ef96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ef98:	683a      	ldr	r2, [r7, #0]
 800ef9a:	4904      	ldr	r1, [pc, #16]	; (800efac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ef9c:	4804      	ldr	r0, [pc, #16]	; (800efb0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ef9e:	f7fe fb90 	bl	800d6c2 <USBD_GetString>
  return USBD_StrDesc;
 800efa2:	4b02      	ldr	r3, [pc, #8]	; (800efac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	3708      	adds	r7, #8
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}
 800efac:	2000609c 	.word	0x2000609c
 800efb0:	0800ff14 	.word	0x0800ff14

0800efb4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b082      	sub	sp, #8
 800efb8:	af00      	add	r7, sp, #0
 800efba:	4603      	mov	r3, r0
 800efbc:	6039      	str	r1, [r7, #0]
 800efbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	221a      	movs	r2, #26
 800efc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800efc6:	f000 f843 	bl	800f050 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800efca:	4b02      	ldr	r3, [pc, #8]	; (800efd4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3708      	adds	r7, #8
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	20000170 	.word	0x20000170

0800efd8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b082      	sub	sp, #8
 800efdc:	af00      	add	r7, sp, #0
 800efde:	4603      	mov	r3, r0
 800efe0:	6039      	str	r1, [r7, #0]
 800efe2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800efe4:	79fb      	ldrb	r3, [r7, #7]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d105      	bne.n	800eff6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800efea:	683a      	ldr	r2, [r7, #0]
 800efec:	4907      	ldr	r1, [pc, #28]	; (800f00c <USBD_FS_ConfigStrDescriptor+0x34>)
 800efee:	4808      	ldr	r0, [pc, #32]	; (800f010 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eff0:	f7fe fb67 	bl	800d6c2 <USBD_GetString>
 800eff4:	e004      	b.n	800f000 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eff6:	683a      	ldr	r2, [r7, #0]
 800eff8:	4904      	ldr	r1, [pc, #16]	; (800f00c <USBD_FS_ConfigStrDescriptor+0x34>)
 800effa:	4805      	ldr	r0, [pc, #20]	; (800f010 <USBD_FS_ConfigStrDescriptor+0x38>)
 800effc:	f7fe fb61 	bl	800d6c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f000:	4b02      	ldr	r3, [pc, #8]	; (800f00c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f002:	4618      	mov	r0, r3
 800f004:	3708      	adds	r7, #8
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}
 800f00a:	bf00      	nop
 800f00c:	2000609c 	.word	0x2000609c
 800f010:	0800ff28 	.word	0x0800ff28

0800f014 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b082      	sub	sp, #8
 800f018:	af00      	add	r7, sp, #0
 800f01a:	4603      	mov	r3, r0
 800f01c:	6039      	str	r1, [r7, #0]
 800f01e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f020:	79fb      	ldrb	r3, [r7, #7]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d105      	bne.n	800f032 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f026:	683a      	ldr	r2, [r7, #0]
 800f028:	4907      	ldr	r1, [pc, #28]	; (800f048 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f02a:	4808      	ldr	r0, [pc, #32]	; (800f04c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f02c:	f7fe fb49 	bl	800d6c2 <USBD_GetString>
 800f030:	e004      	b.n	800f03c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f032:	683a      	ldr	r2, [r7, #0]
 800f034:	4904      	ldr	r1, [pc, #16]	; (800f048 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f036:	4805      	ldr	r0, [pc, #20]	; (800f04c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f038:	f7fe fb43 	bl	800d6c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f03c:	4b02      	ldr	r3, [pc, #8]	; (800f048 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3708      	adds	r7, #8
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	2000609c 	.word	0x2000609c
 800f04c:	0800ff34 	.word	0x0800ff34

0800f050 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b084      	sub	sp, #16
 800f054:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f056:	4b0f      	ldr	r3, [pc, #60]	; (800f094 <Get_SerialNum+0x44>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f05c:	4b0e      	ldr	r3, [pc, #56]	; (800f098 <Get_SerialNum+0x48>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f062:	4b0e      	ldr	r3, [pc, #56]	; (800f09c <Get_SerialNum+0x4c>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f068:	68fa      	ldr	r2, [r7, #12]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	4413      	add	r3, r2
 800f06e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d009      	beq.n	800f08a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f076:	2208      	movs	r2, #8
 800f078:	4909      	ldr	r1, [pc, #36]	; (800f0a0 <Get_SerialNum+0x50>)
 800f07a:	68f8      	ldr	r0, [r7, #12]
 800f07c:	f000 f814 	bl	800f0a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f080:	2204      	movs	r2, #4
 800f082:	4908      	ldr	r1, [pc, #32]	; (800f0a4 <Get_SerialNum+0x54>)
 800f084:	68b8      	ldr	r0, [r7, #8]
 800f086:	f000 f80f 	bl	800f0a8 <IntToUnicode>
  }
}
 800f08a:	bf00      	nop
 800f08c:	3710      	adds	r7, #16
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
 800f092:	bf00      	nop
 800f094:	1fff7a10 	.word	0x1fff7a10
 800f098:	1fff7a14 	.word	0x1fff7a14
 800f09c:	1fff7a18 	.word	0x1fff7a18
 800f0a0:	20000172 	.word	0x20000172
 800f0a4:	20000182 	.word	0x20000182

0800f0a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	b087      	sub	sp, #28
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	60f8      	str	r0, [r7, #12]
 800f0b0:	60b9      	str	r1, [r7, #8]
 800f0b2:	4613      	mov	r3, r2
 800f0b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	75fb      	strb	r3, [r7, #23]
 800f0be:	e027      	b.n	800f110 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	0f1b      	lsrs	r3, r3, #28
 800f0c4:	2b09      	cmp	r3, #9
 800f0c6:	d80b      	bhi.n	800f0e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	0f1b      	lsrs	r3, r3, #28
 800f0cc:	b2da      	uxtb	r2, r3
 800f0ce:	7dfb      	ldrb	r3, [r7, #23]
 800f0d0:	005b      	lsls	r3, r3, #1
 800f0d2:	4619      	mov	r1, r3
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	440b      	add	r3, r1
 800f0d8:	3230      	adds	r2, #48	; 0x30
 800f0da:	b2d2      	uxtb	r2, r2
 800f0dc:	701a      	strb	r2, [r3, #0]
 800f0de:	e00a      	b.n	800f0f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	0f1b      	lsrs	r3, r3, #28
 800f0e4:	b2da      	uxtb	r2, r3
 800f0e6:	7dfb      	ldrb	r3, [r7, #23]
 800f0e8:	005b      	lsls	r3, r3, #1
 800f0ea:	4619      	mov	r1, r3
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	440b      	add	r3, r1
 800f0f0:	3237      	adds	r2, #55	; 0x37
 800f0f2:	b2d2      	uxtb	r2, r2
 800f0f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	011b      	lsls	r3, r3, #4
 800f0fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f0fc:	7dfb      	ldrb	r3, [r7, #23]
 800f0fe:	005b      	lsls	r3, r3, #1
 800f100:	3301      	adds	r3, #1
 800f102:	68ba      	ldr	r2, [r7, #8]
 800f104:	4413      	add	r3, r2
 800f106:	2200      	movs	r2, #0
 800f108:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f10a:	7dfb      	ldrb	r3, [r7, #23]
 800f10c:	3301      	adds	r3, #1
 800f10e:	75fb      	strb	r3, [r7, #23]
 800f110:	7dfa      	ldrb	r2, [r7, #23]
 800f112:	79fb      	ldrb	r3, [r7, #7]
 800f114:	429a      	cmp	r2, r3
 800f116:	d3d3      	bcc.n	800f0c0 <IntToUnicode+0x18>
  }
}
 800f118:	bf00      	nop
 800f11a:	371c      	adds	r7, #28
 800f11c:	46bd      	mov	sp, r7
 800f11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f122:	4770      	bx	lr

0800f124 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b08a      	sub	sp, #40	; 0x28
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f12c:	f107 0314 	add.w	r3, r7, #20
 800f130:	2200      	movs	r2, #0
 800f132:	601a      	str	r2, [r3, #0]
 800f134:	605a      	str	r2, [r3, #4]
 800f136:	609a      	str	r2, [r3, #8]
 800f138:	60da      	str	r2, [r3, #12]
 800f13a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f144:	d13a      	bne.n	800f1bc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f146:	2300      	movs	r3, #0
 800f148:	613b      	str	r3, [r7, #16]
 800f14a:	4b1e      	ldr	r3, [pc, #120]	; (800f1c4 <HAL_PCD_MspInit+0xa0>)
 800f14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f14e:	4a1d      	ldr	r2, [pc, #116]	; (800f1c4 <HAL_PCD_MspInit+0xa0>)
 800f150:	f043 0301 	orr.w	r3, r3, #1
 800f154:	6313      	str	r3, [r2, #48]	; 0x30
 800f156:	4b1b      	ldr	r3, [pc, #108]	; (800f1c4 <HAL_PCD_MspInit+0xa0>)
 800f158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f15a:	f003 0301 	and.w	r3, r3, #1
 800f15e:	613b      	str	r3, [r7, #16]
 800f160:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f162:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f168:	2302      	movs	r3, #2
 800f16a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f16c:	2300      	movs	r3, #0
 800f16e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f170:	2303      	movs	r3, #3
 800f172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f174:	230a      	movs	r3, #10
 800f176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f178:	f107 0314 	add.w	r3, r7, #20
 800f17c:	4619      	mov	r1, r3
 800f17e:	4812      	ldr	r0, [pc, #72]	; (800f1c8 <HAL_PCD_MspInit+0xa4>)
 800f180:	f7f6 ff16 	bl	8005fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f184:	4b0f      	ldr	r3, [pc, #60]	; (800f1c4 <HAL_PCD_MspInit+0xa0>)
 800f186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f188:	4a0e      	ldr	r2, [pc, #56]	; (800f1c4 <HAL_PCD_MspInit+0xa0>)
 800f18a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f18e:	6353      	str	r3, [r2, #52]	; 0x34
 800f190:	2300      	movs	r3, #0
 800f192:	60fb      	str	r3, [r7, #12]
 800f194:	4b0b      	ldr	r3, [pc, #44]	; (800f1c4 <HAL_PCD_MspInit+0xa0>)
 800f196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f198:	4a0a      	ldr	r2, [pc, #40]	; (800f1c4 <HAL_PCD_MspInit+0xa0>)
 800f19a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f19e:	6453      	str	r3, [r2, #68]	; 0x44
 800f1a0:	4b08      	ldr	r3, [pc, #32]	; (800f1c4 <HAL_PCD_MspInit+0xa0>)
 800f1a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f1a8:	60fb      	str	r3, [r7, #12]
 800f1aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	2100      	movs	r1, #0
 800f1b0:	2043      	movs	r0, #67	; 0x43
 800f1b2:	f7f6 fea3 	bl	8005efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f1b6:	2043      	movs	r0, #67	; 0x43
 800f1b8:	f7f6 febc 	bl	8005f34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f1bc:	bf00      	nop
 800f1be:	3728      	adds	r7, #40	; 0x28
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}
 800f1c4:	40023800 	.word	0x40023800
 800f1c8:	40020000 	.word	0x40020000

0800f1cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b082      	sub	sp, #8
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f1e0:	4619      	mov	r1, r3
 800f1e2:	4610      	mov	r0, r2
 800f1e4:	f7fd faea 	bl	800c7bc <USBD_LL_SetupStage>
}
 800f1e8:	bf00      	nop
 800f1ea:	3708      	adds	r7, #8
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}

0800f1f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	460b      	mov	r3, r1
 800f1fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f202:	78fa      	ldrb	r2, [r7, #3]
 800f204:	6879      	ldr	r1, [r7, #4]
 800f206:	4613      	mov	r3, r2
 800f208:	00db      	lsls	r3, r3, #3
 800f20a:	1a9b      	subs	r3, r3, r2
 800f20c:	009b      	lsls	r3, r3, #2
 800f20e:	440b      	add	r3, r1
 800f210:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f214:	681a      	ldr	r2, [r3, #0]
 800f216:	78fb      	ldrb	r3, [r7, #3]
 800f218:	4619      	mov	r1, r3
 800f21a:	f7fd fb22 	bl	800c862 <USBD_LL_DataOutStage>
}
 800f21e:	bf00      	nop
 800f220:	3708      	adds	r7, #8
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}

0800f226 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f226:	b580      	push	{r7, lr}
 800f228:	b082      	sub	sp, #8
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	6078      	str	r0, [r7, #4]
 800f22e:	460b      	mov	r3, r1
 800f230:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f238:	78fa      	ldrb	r2, [r7, #3]
 800f23a:	6879      	ldr	r1, [r7, #4]
 800f23c:	4613      	mov	r3, r2
 800f23e:	00db      	lsls	r3, r3, #3
 800f240:	1a9b      	subs	r3, r3, r2
 800f242:	009b      	lsls	r3, r3, #2
 800f244:	440b      	add	r3, r1
 800f246:	3348      	adds	r3, #72	; 0x48
 800f248:	681a      	ldr	r2, [r3, #0]
 800f24a:	78fb      	ldrb	r3, [r7, #3]
 800f24c:	4619      	mov	r1, r3
 800f24e:	f7fd fb6b 	bl	800c928 <USBD_LL_DataInStage>
}
 800f252:	bf00      	nop
 800f254:	3708      	adds	r7, #8
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}

0800f25a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f25a:	b580      	push	{r7, lr}
 800f25c:	b082      	sub	sp, #8
 800f25e:	af00      	add	r7, sp, #0
 800f260:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f268:	4618      	mov	r0, r3
 800f26a:	f7fd fc6f 	bl	800cb4c <USBD_LL_SOF>
}
 800f26e:	bf00      	nop
 800f270:	3708      	adds	r7, #8
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}

0800f276 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f276:	b580      	push	{r7, lr}
 800f278:	b084      	sub	sp, #16
 800f27a:	af00      	add	r7, sp, #0
 800f27c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f27e:	2301      	movs	r3, #1
 800f280:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	68db      	ldr	r3, [r3, #12]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d102      	bne.n	800f290 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f28a:	2300      	movs	r3, #0
 800f28c:	73fb      	strb	r3, [r7, #15]
 800f28e:	e008      	b.n	800f2a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	68db      	ldr	r3, [r3, #12]
 800f294:	2b02      	cmp	r3, #2
 800f296:	d102      	bne.n	800f29e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f298:	2301      	movs	r3, #1
 800f29a:	73fb      	strb	r3, [r7, #15]
 800f29c:	e001      	b.n	800f2a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f29e:	f7f1 fc45 	bl	8000b2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f2a8:	7bfa      	ldrb	r2, [r7, #15]
 800f2aa:	4611      	mov	r1, r2
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f7fd fc12 	bl	800cad6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7fd fbcb 	bl	800ca54 <USBD_LL_Reset>
}
 800f2be:	bf00      	nop
 800f2c0:	3710      	adds	r7, #16
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
	...

0800f2c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7fd fc0d 	bl	800caf6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	687a      	ldr	r2, [r7, #4]
 800f2e8:	6812      	ldr	r2, [r2, #0]
 800f2ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f2ee:	f043 0301 	orr.w	r3, r3, #1
 800f2f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6a1b      	ldr	r3, [r3, #32]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d005      	beq.n	800f308 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f2fc:	4b04      	ldr	r3, [pc, #16]	; (800f310 <HAL_PCD_SuspendCallback+0x48>)
 800f2fe:	691b      	ldr	r3, [r3, #16]
 800f300:	4a03      	ldr	r2, [pc, #12]	; (800f310 <HAL_PCD_SuspendCallback+0x48>)
 800f302:	f043 0306 	orr.w	r3, r3, #6
 800f306:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f308:	bf00      	nop
 800f30a:	3708      	adds	r7, #8
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}
 800f310:	e000ed00 	.word	0xe000ed00

0800f314 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f322:	4618      	mov	r0, r3
 800f324:	f7fd fbfc 	bl	800cb20 <USBD_LL_Resume>
}
 800f328:	bf00      	nop
 800f32a:	3708      	adds	r7, #8
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b082      	sub	sp, #8
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	460b      	mov	r3, r1
 800f33a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f342:	78fa      	ldrb	r2, [r7, #3]
 800f344:	4611      	mov	r1, r2
 800f346:	4618      	mov	r0, r3
 800f348:	f7fd fc27 	bl	800cb9a <USBD_LL_IsoOUTIncomplete>
}
 800f34c:	bf00      	nop
 800f34e:	3708      	adds	r7, #8
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}

0800f354 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b082      	sub	sp, #8
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	460b      	mov	r3, r1
 800f35e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f366:	78fa      	ldrb	r2, [r7, #3]
 800f368:	4611      	mov	r1, r2
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7fd fc08 	bl	800cb80 <USBD_LL_IsoINIncomplete>
}
 800f370:	bf00      	nop
 800f372:	3708      	adds	r7, #8
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}

0800f378 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b082      	sub	sp, #8
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f386:	4618      	mov	r0, r3
 800f388:	f7fd fc14 	bl	800cbb4 <USBD_LL_DevConnected>
}
 800f38c:	bf00      	nop
 800f38e:	3708      	adds	r7, #8
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b082      	sub	sp, #8
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7fd fc11 	bl	800cbca <USBD_LL_DevDisconnected>
}
 800f3a8:	bf00      	nop
 800f3aa:	3708      	adds	r7, #8
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b082      	sub	sp, #8
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d13c      	bne.n	800f43a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f3c0:	4a20      	ldr	r2, [pc, #128]	; (800f444 <USBD_LL_Init+0x94>)
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	4a1e      	ldr	r2, [pc, #120]	; (800f444 <USBD_LL_Init+0x94>)
 800f3cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f3d0:	4b1c      	ldr	r3, [pc, #112]	; (800f444 <USBD_LL_Init+0x94>)
 800f3d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f3d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f3d8:	4b1a      	ldr	r3, [pc, #104]	; (800f444 <USBD_LL_Init+0x94>)
 800f3da:	2204      	movs	r2, #4
 800f3dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f3de:	4b19      	ldr	r3, [pc, #100]	; (800f444 <USBD_LL_Init+0x94>)
 800f3e0:	2202      	movs	r2, #2
 800f3e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f3e4:	4b17      	ldr	r3, [pc, #92]	; (800f444 <USBD_LL_Init+0x94>)
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f3ea:	4b16      	ldr	r3, [pc, #88]	; (800f444 <USBD_LL_Init+0x94>)
 800f3ec:	2202      	movs	r2, #2
 800f3ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f3f0:	4b14      	ldr	r3, [pc, #80]	; (800f444 <USBD_LL_Init+0x94>)
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f3f6:	4b13      	ldr	r3, [pc, #76]	; (800f444 <USBD_LL_Init+0x94>)
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f3fc:	4b11      	ldr	r3, [pc, #68]	; (800f444 <USBD_LL_Init+0x94>)
 800f3fe:	2200      	movs	r2, #0
 800f400:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f402:	4b10      	ldr	r3, [pc, #64]	; (800f444 <USBD_LL_Init+0x94>)
 800f404:	2200      	movs	r2, #0
 800f406:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f408:	4b0e      	ldr	r3, [pc, #56]	; (800f444 <USBD_LL_Init+0x94>)
 800f40a:	2200      	movs	r2, #0
 800f40c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f40e:	480d      	ldr	r0, [pc, #52]	; (800f444 <USBD_LL_Init+0x94>)
 800f410:	f7f9 fac4 	bl	800899c <HAL_PCD_Init>
 800f414:	4603      	mov	r3, r0
 800f416:	2b00      	cmp	r3, #0
 800f418:	d001      	beq.n	800f41e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f41a:	f7f1 fb87 	bl	8000b2c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f41e:	2180      	movs	r1, #128	; 0x80
 800f420:	4808      	ldr	r0, [pc, #32]	; (800f444 <USBD_LL_Init+0x94>)
 800f422:	f7fa fc22 	bl	8009c6a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f426:	2240      	movs	r2, #64	; 0x40
 800f428:	2100      	movs	r1, #0
 800f42a:	4806      	ldr	r0, [pc, #24]	; (800f444 <USBD_LL_Init+0x94>)
 800f42c:	f7fa fbd6 	bl	8009bdc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f430:	2280      	movs	r2, #128	; 0x80
 800f432:	2101      	movs	r1, #1
 800f434:	4803      	ldr	r0, [pc, #12]	; (800f444 <USBD_LL_Init+0x94>)
 800f436:	f7fa fbd1 	bl	8009bdc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f43a:	2300      	movs	r3, #0
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3708      	adds	r7, #8
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}
 800f444:	2000629c 	.word	0x2000629c

0800f448 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b084      	sub	sp, #16
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f450:	2300      	movs	r3, #0
 800f452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f454:	2300      	movs	r3, #0
 800f456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f45e:	4618      	mov	r0, r3
 800f460:	f7f9 fbb9 	bl	8008bd6 <HAL_PCD_Start>
 800f464:	4603      	mov	r3, r0
 800f466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f468:	7bfb      	ldrb	r3, [r7, #15]
 800f46a:	4618      	mov	r0, r3
 800f46c:	f000 f92a 	bl	800f6c4 <USBD_Get_USB_Status>
 800f470:	4603      	mov	r3, r0
 800f472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f474:	7bbb      	ldrb	r3, [r7, #14]
}
 800f476:	4618      	mov	r0, r3
 800f478:	3710      	adds	r7, #16
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}

0800f47e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f47e:	b580      	push	{r7, lr}
 800f480:	b084      	sub	sp, #16
 800f482:	af00      	add	r7, sp, #0
 800f484:	6078      	str	r0, [r7, #4]
 800f486:	4608      	mov	r0, r1
 800f488:	4611      	mov	r1, r2
 800f48a:	461a      	mov	r2, r3
 800f48c:	4603      	mov	r3, r0
 800f48e:	70fb      	strb	r3, [r7, #3]
 800f490:	460b      	mov	r3, r1
 800f492:	70bb      	strb	r3, [r7, #2]
 800f494:	4613      	mov	r3, r2
 800f496:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f498:	2300      	movs	r3, #0
 800f49a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f49c:	2300      	movs	r3, #0
 800f49e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f4a6:	78bb      	ldrb	r3, [r7, #2]
 800f4a8:	883a      	ldrh	r2, [r7, #0]
 800f4aa:	78f9      	ldrb	r1, [r7, #3]
 800f4ac:	f7f9 ff9d 	bl	80093ea <HAL_PCD_EP_Open>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4b4:	7bfb      	ldrb	r3, [r7, #15]
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f000 f904 	bl	800f6c4 <USBD_Get_USB_Status>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	3710      	adds	r7, #16
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}

0800f4ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4ca:	b580      	push	{r7, lr}
 800f4cc:	b084      	sub	sp, #16
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	6078      	str	r0, [r7, #4]
 800f4d2:	460b      	mov	r3, r1
 800f4d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f4e4:	78fa      	ldrb	r2, [r7, #3]
 800f4e6:	4611      	mov	r1, r2
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7f9 ffe6 	bl	80094ba <HAL_PCD_EP_Close>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4f2:	7bfb      	ldrb	r3, [r7, #15]
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f000 f8e5 	bl	800f6c4 <USBD_Get_USB_Status>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800f500:	4618      	mov	r0, r3
 800f502:	3710      	adds	r7, #16
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b084      	sub	sp, #16
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	460b      	mov	r3, r1
 800f512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f514:	2300      	movs	r3, #0
 800f516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f518:	2300      	movs	r3, #0
 800f51a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f522:	78fa      	ldrb	r2, [r7, #3]
 800f524:	4611      	mov	r1, r2
 800f526:	4618      	mov	r0, r3
 800f528:	f7fa f8be 	bl	80096a8 <HAL_PCD_EP_SetStall>
 800f52c:	4603      	mov	r3, r0
 800f52e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f530:	7bfb      	ldrb	r3, [r7, #15]
 800f532:	4618      	mov	r0, r3
 800f534:	f000 f8c6 	bl	800f6c4 <USBD_Get_USB_Status>
 800f538:	4603      	mov	r3, r0
 800f53a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f53c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f53e:	4618      	mov	r0, r3
 800f540:	3710      	adds	r7, #16
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}

0800f546 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f546:	b580      	push	{r7, lr}
 800f548:	b084      	sub	sp, #16
 800f54a:	af00      	add	r7, sp, #0
 800f54c:	6078      	str	r0, [r7, #4]
 800f54e:	460b      	mov	r3, r1
 800f550:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f552:	2300      	movs	r3, #0
 800f554:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f556:	2300      	movs	r3, #0
 800f558:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f560:	78fa      	ldrb	r2, [r7, #3]
 800f562:	4611      	mov	r1, r2
 800f564:	4618      	mov	r0, r3
 800f566:	f7fa f903 	bl	8009770 <HAL_PCD_EP_ClrStall>
 800f56a:	4603      	mov	r3, r0
 800f56c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f56e:	7bfb      	ldrb	r3, [r7, #15]
 800f570:	4618      	mov	r0, r3
 800f572:	f000 f8a7 	bl	800f6c4 <USBD_Get_USB_Status>
 800f576:	4603      	mov	r3, r0
 800f578:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f57a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f57c:	4618      	mov	r0, r3
 800f57e:	3710      	adds	r7, #16
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}

0800f584 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f584:	b480      	push	{r7}
 800f586:	b085      	sub	sp, #20
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	460b      	mov	r3, r1
 800f58e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f596:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f598:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	da0b      	bge.n	800f5b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f5a0:	78fb      	ldrb	r3, [r7, #3]
 800f5a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f5a6:	68f9      	ldr	r1, [r7, #12]
 800f5a8:	4613      	mov	r3, r2
 800f5aa:	00db      	lsls	r3, r3, #3
 800f5ac:	1a9b      	subs	r3, r3, r2
 800f5ae:	009b      	lsls	r3, r3, #2
 800f5b0:	440b      	add	r3, r1
 800f5b2:	333e      	adds	r3, #62	; 0x3e
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	e00b      	b.n	800f5d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f5b8:	78fb      	ldrb	r3, [r7, #3]
 800f5ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f5be:	68f9      	ldr	r1, [r7, #12]
 800f5c0:	4613      	mov	r3, r2
 800f5c2:	00db      	lsls	r3, r3, #3
 800f5c4:	1a9b      	subs	r3, r3, r2
 800f5c6:	009b      	lsls	r3, r3, #2
 800f5c8:	440b      	add	r3, r1
 800f5ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f5ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3714      	adds	r7, #20
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5da:	4770      	bx	lr

0800f5dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b084      	sub	sp, #16
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	460b      	mov	r3, r1
 800f5e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f5f6:	78fa      	ldrb	r2, [r7, #3]
 800f5f8:	4611      	mov	r1, r2
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7f9 fed0 	bl	80093a0 <HAL_PCD_SetAddress>
 800f600:	4603      	mov	r3, r0
 800f602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f604:	7bfb      	ldrb	r3, [r7, #15]
 800f606:	4618      	mov	r0, r3
 800f608:	f000 f85c 	bl	800f6c4 <USBD_Get_USB_Status>
 800f60c:	4603      	mov	r3, r0
 800f60e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f610:	7bbb      	ldrb	r3, [r7, #14]
}
 800f612:	4618      	mov	r0, r3
 800f614:	3710      	adds	r7, #16
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}

0800f61a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f61a:	b580      	push	{r7, lr}
 800f61c:	b086      	sub	sp, #24
 800f61e:	af00      	add	r7, sp, #0
 800f620:	60f8      	str	r0, [r7, #12]
 800f622:	607a      	str	r2, [r7, #4]
 800f624:	603b      	str	r3, [r7, #0]
 800f626:	460b      	mov	r3, r1
 800f628:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f62a:	2300      	movs	r3, #0
 800f62c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f62e:	2300      	movs	r3, #0
 800f630:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f638:	7af9      	ldrb	r1, [r7, #11]
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	687a      	ldr	r2, [r7, #4]
 800f63e:	f7f9 ffe9 	bl	8009614 <HAL_PCD_EP_Transmit>
 800f642:	4603      	mov	r3, r0
 800f644:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f646:	7dfb      	ldrb	r3, [r7, #23]
 800f648:	4618      	mov	r0, r3
 800f64a:	f000 f83b 	bl	800f6c4 <USBD_Get_USB_Status>
 800f64e:	4603      	mov	r3, r0
 800f650:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f652:	7dbb      	ldrb	r3, [r7, #22]
}
 800f654:	4618      	mov	r0, r3
 800f656:	3718      	adds	r7, #24
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}

0800f65c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b086      	sub	sp, #24
 800f660:	af00      	add	r7, sp, #0
 800f662:	60f8      	str	r0, [r7, #12]
 800f664:	607a      	str	r2, [r7, #4]
 800f666:	603b      	str	r3, [r7, #0]
 800f668:	460b      	mov	r3, r1
 800f66a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f66c:	2300      	movs	r3, #0
 800f66e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f670:	2300      	movs	r3, #0
 800f672:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f67a:	7af9      	ldrb	r1, [r7, #11]
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	687a      	ldr	r2, [r7, #4]
 800f680:	f7f9 ff65 	bl	800954e <HAL_PCD_EP_Receive>
 800f684:	4603      	mov	r3, r0
 800f686:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f688:	7dfb      	ldrb	r3, [r7, #23]
 800f68a:	4618      	mov	r0, r3
 800f68c:	f000 f81a 	bl	800f6c4 <USBD_Get_USB_Status>
 800f690:	4603      	mov	r3, r0
 800f692:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f694:	7dbb      	ldrb	r3, [r7, #22]
}
 800f696:	4618      	mov	r0, r3
 800f698:	3718      	adds	r7, #24
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}

0800f69e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f69e:	b580      	push	{r7, lr}
 800f6a0:	b082      	sub	sp, #8
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	6078      	str	r0, [r7, #4]
 800f6a6:	460b      	mov	r3, r1
 800f6a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f6b0:	78fa      	ldrb	r2, [r7, #3]
 800f6b2:	4611      	mov	r1, r2
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7f9 ff95 	bl	80095e4 <HAL_PCD_EP_GetRxCount>
 800f6ba:	4603      	mov	r3, r0
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3708      	adds	r7, #8
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}

0800f6c4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b085      	sub	sp, #20
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f6d2:	79fb      	ldrb	r3, [r7, #7]
 800f6d4:	2b03      	cmp	r3, #3
 800f6d6:	d817      	bhi.n	800f708 <USBD_Get_USB_Status+0x44>
 800f6d8:	a201      	add	r2, pc, #4	; (adr r2, 800f6e0 <USBD_Get_USB_Status+0x1c>)
 800f6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6de:	bf00      	nop
 800f6e0:	0800f6f1 	.word	0x0800f6f1
 800f6e4:	0800f6f7 	.word	0x0800f6f7
 800f6e8:	0800f6fd 	.word	0x0800f6fd
 800f6ec:	0800f703 	.word	0x0800f703
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	73fb      	strb	r3, [r7, #15]
    break;
 800f6f4:	e00b      	b.n	800f70e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f6f6:	2303      	movs	r3, #3
 800f6f8:	73fb      	strb	r3, [r7, #15]
    break;
 800f6fa:	e008      	b.n	800f70e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	73fb      	strb	r3, [r7, #15]
    break;
 800f700:	e005      	b.n	800f70e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f702:	2303      	movs	r3, #3
 800f704:	73fb      	strb	r3, [r7, #15]
    break;
 800f706:	e002      	b.n	800f70e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f708:	2303      	movs	r3, #3
 800f70a:	73fb      	strb	r3, [r7, #15]
    break;
 800f70c:	bf00      	nop
  }
  return usb_status;
 800f70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f710:	4618      	mov	r0, r3
 800f712:	3714      	adds	r7, #20
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr

0800f71c <__cxa_pure_virtual>:
 800f71c:	b508      	push	{r3, lr}
 800f71e:	f000 f80d 	bl	800f73c <_ZSt9terminatev>

0800f722 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f722:	b508      	push	{r3, lr}
 800f724:	4780      	blx	r0
 800f726:	f000 f80e 	bl	800f746 <abort>
	...

0800f72c <_ZSt13get_terminatev>:
 800f72c:	4b02      	ldr	r3, [pc, #8]	; (800f738 <_ZSt13get_terminatev+0xc>)
 800f72e:	6818      	ldr	r0, [r3, #0]
 800f730:	f3bf 8f5b 	dmb	ish
 800f734:	4770      	bx	lr
 800f736:	bf00      	nop
 800f738:	2000018c 	.word	0x2000018c

0800f73c <_ZSt9terminatev>:
 800f73c:	b508      	push	{r3, lr}
 800f73e:	f7ff fff5 	bl	800f72c <_ZSt13get_terminatev>
 800f742:	f7ff ffee 	bl	800f722 <_ZN10__cxxabiv111__terminateEPFvvE>

0800f746 <abort>:
 800f746:	b508      	push	{r3, lr}
 800f748:	2006      	movs	r0, #6
 800f74a:	f000 f939 	bl	800f9c0 <raise>
 800f74e:	2001      	movs	r0, #1
 800f750:	f7f2 f866 	bl	8001820 <_exit>

0800f754 <__errno>:
 800f754:	4b01      	ldr	r3, [pc, #4]	; (800f75c <__errno+0x8>)
 800f756:	6818      	ldr	r0, [r3, #0]
 800f758:	4770      	bx	lr
 800f75a:	bf00      	nop
 800f75c:	20000190 	.word	0x20000190

0800f760 <__libc_init_array>:
 800f760:	b570      	push	{r4, r5, r6, lr}
 800f762:	4e0d      	ldr	r6, [pc, #52]	; (800f798 <__libc_init_array+0x38>)
 800f764:	4c0d      	ldr	r4, [pc, #52]	; (800f79c <__libc_init_array+0x3c>)
 800f766:	1ba4      	subs	r4, r4, r6
 800f768:	10a4      	asrs	r4, r4, #2
 800f76a:	2500      	movs	r5, #0
 800f76c:	42a5      	cmp	r5, r4
 800f76e:	d109      	bne.n	800f784 <__libc_init_array+0x24>
 800f770:	4e0b      	ldr	r6, [pc, #44]	; (800f7a0 <__libc_init_array+0x40>)
 800f772:	4c0c      	ldr	r4, [pc, #48]	; (800f7a4 <__libc_init_array+0x44>)
 800f774:	f000 f970 	bl	800fa58 <_init>
 800f778:	1ba4      	subs	r4, r4, r6
 800f77a:	10a4      	asrs	r4, r4, #2
 800f77c:	2500      	movs	r5, #0
 800f77e:	42a5      	cmp	r5, r4
 800f780:	d105      	bne.n	800f78e <__libc_init_array+0x2e>
 800f782:	bd70      	pop	{r4, r5, r6, pc}
 800f784:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f788:	4798      	blx	r3
 800f78a:	3501      	adds	r5, #1
 800f78c:	e7ee      	b.n	800f76c <__libc_init_array+0xc>
 800f78e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f792:	4798      	blx	r3
 800f794:	3501      	adds	r5, #1
 800f796:	e7f2      	b.n	800f77e <__libc_init_array+0x1e>
 800f798:	08010110 	.word	0x08010110
 800f79c:	08010110 	.word	0x08010110
 800f7a0:	08010110 	.word	0x08010110
 800f7a4:	08010118 	.word	0x08010118

0800f7a8 <malloc>:
 800f7a8:	4b02      	ldr	r3, [pc, #8]	; (800f7b4 <malloc+0xc>)
 800f7aa:	4601      	mov	r1, r0
 800f7ac:	6818      	ldr	r0, [r3, #0]
 800f7ae:	f000 b86d 	b.w	800f88c <_malloc_r>
 800f7b2:	bf00      	nop
 800f7b4:	20000190 	.word	0x20000190

0800f7b8 <free>:
 800f7b8:	4b02      	ldr	r3, [pc, #8]	; (800f7c4 <free+0xc>)
 800f7ba:	4601      	mov	r1, r0
 800f7bc:	6818      	ldr	r0, [r3, #0]
 800f7be:	f000 b817 	b.w	800f7f0 <_free_r>
 800f7c2:	bf00      	nop
 800f7c4:	20000190 	.word	0x20000190

0800f7c8 <memcpy>:
 800f7c8:	b510      	push	{r4, lr}
 800f7ca:	1e43      	subs	r3, r0, #1
 800f7cc:	440a      	add	r2, r1
 800f7ce:	4291      	cmp	r1, r2
 800f7d0:	d100      	bne.n	800f7d4 <memcpy+0xc>
 800f7d2:	bd10      	pop	{r4, pc}
 800f7d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7dc:	e7f7      	b.n	800f7ce <memcpy+0x6>

0800f7de <memset>:
 800f7de:	4402      	add	r2, r0
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d100      	bne.n	800f7e8 <memset+0xa>
 800f7e6:	4770      	bx	lr
 800f7e8:	f803 1b01 	strb.w	r1, [r3], #1
 800f7ec:	e7f9      	b.n	800f7e2 <memset+0x4>
	...

0800f7f0 <_free_r>:
 800f7f0:	b538      	push	{r3, r4, r5, lr}
 800f7f2:	4605      	mov	r5, r0
 800f7f4:	2900      	cmp	r1, #0
 800f7f6:	d045      	beq.n	800f884 <_free_r+0x94>
 800f7f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7fc:	1f0c      	subs	r4, r1, #4
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	bfb8      	it	lt
 800f802:	18e4      	addlt	r4, r4, r3
 800f804:	f000 f8f8 	bl	800f9f8 <__malloc_lock>
 800f808:	4a1f      	ldr	r2, [pc, #124]	; (800f888 <_free_r+0x98>)
 800f80a:	6813      	ldr	r3, [r2, #0]
 800f80c:	4610      	mov	r0, r2
 800f80e:	b933      	cbnz	r3, 800f81e <_free_r+0x2e>
 800f810:	6063      	str	r3, [r4, #4]
 800f812:	6014      	str	r4, [r2, #0]
 800f814:	4628      	mov	r0, r5
 800f816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f81a:	f000 b8ee 	b.w	800f9fa <__malloc_unlock>
 800f81e:	42a3      	cmp	r3, r4
 800f820:	d90c      	bls.n	800f83c <_free_r+0x4c>
 800f822:	6821      	ldr	r1, [r4, #0]
 800f824:	1862      	adds	r2, r4, r1
 800f826:	4293      	cmp	r3, r2
 800f828:	bf04      	itt	eq
 800f82a:	681a      	ldreq	r2, [r3, #0]
 800f82c:	685b      	ldreq	r3, [r3, #4]
 800f82e:	6063      	str	r3, [r4, #4]
 800f830:	bf04      	itt	eq
 800f832:	1852      	addeq	r2, r2, r1
 800f834:	6022      	streq	r2, [r4, #0]
 800f836:	6004      	str	r4, [r0, #0]
 800f838:	e7ec      	b.n	800f814 <_free_r+0x24>
 800f83a:	4613      	mov	r3, r2
 800f83c:	685a      	ldr	r2, [r3, #4]
 800f83e:	b10a      	cbz	r2, 800f844 <_free_r+0x54>
 800f840:	42a2      	cmp	r2, r4
 800f842:	d9fa      	bls.n	800f83a <_free_r+0x4a>
 800f844:	6819      	ldr	r1, [r3, #0]
 800f846:	1858      	adds	r0, r3, r1
 800f848:	42a0      	cmp	r0, r4
 800f84a:	d10b      	bne.n	800f864 <_free_r+0x74>
 800f84c:	6820      	ldr	r0, [r4, #0]
 800f84e:	4401      	add	r1, r0
 800f850:	1858      	adds	r0, r3, r1
 800f852:	4282      	cmp	r2, r0
 800f854:	6019      	str	r1, [r3, #0]
 800f856:	d1dd      	bne.n	800f814 <_free_r+0x24>
 800f858:	6810      	ldr	r0, [r2, #0]
 800f85a:	6852      	ldr	r2, [r2, #4]
 800f85c:	605a      	str	r2, [r3, #4]
 800f85e:	4401      	add	r1, r0
 800f860:	6019      	str	r1, [r3, #0]
 800f862:	e7d7      	b.n	800f814 <_free_r+0x24>
 800f864:	d902      	bls.n	800f86c <_free_r+0x7c>
 800f866:	230c      	movs	r3, #12
 800f868:	602b      	str	r3, [r5, #0]
 800f86a:	e7d3      	b.n	800f814 <_free_r+0x24>
 800f86c:	6820      	ldr	r0, [r4, #0]
 800f86e:	1821      	adds	r1, r4, r0
 800f870:	428a      	cmp	r2, r1
 800f872:	bf04      	itt	eq
 800f874:	6811      	ldreq	r1, [r2, #0]
 800f876:	6852      	ldreq	r2, [r2, #4]
 800f878:	6062      	str	r2, [r4, #4]
 800f87a:	bf04      	itt	eq
 800f87c:	1809      	addeq	r1, r1, r0
 800f87e:	6021      	streq	r1, [r4, #0]
 800f880:	605c      	str	r4, [r3, #4]
 800f882:	e7c7      	b.n	800f814 <_free_r+0x24>
 800f884:	bd38      	pop	{r3, r4, r5, pc}
 800f886:	bf00      	nop
 800f888:	20004bf8 	.word	0x20004bf8

0800f88c <_malloc_r>:
 800f88c:	b570      	push	{r4, r5, r6, lr}
 800f88e:	1ccd      	adds	r5, r1, #3
 800f890:	f025 0503 	bic.w	r5, r5, #3
 800f894:	3508      	adds	r5, #8
 800f896:	2d0c      	cmp	r5, #12
 800f898:	bf38      	it	cc
 800f89a:	250c      	movcc	r5, #12
 800f89c:	2d00      	cmp	r5, #0
 800f89e:	4606      	mov	r6, r0
 800f8a0:	db01      	blt.n	800f8a6 <_malloc_r+0x1a>
 800f8a2:	42a9      	cmp	r1, r5
 800f8a4:	d903      	bls.n	800f8ae <_malloc_r+0x22>
 800f8a6:	230c      	movs	r3, #12
 800f8a8:	6033      	str	r3, [r6, #0]
 800f8aa:	2000      	movs	r0, #0
 800f8ac:	bd70      	pop	{r4, r5, r6, pc}
 800f8ae:	f000 f8a3 	bl	800f9f8 <__malloc_lock>
 800f8b2:	4a21      	ldr	r2, [pc, #132]	; (800f938 <_malloc_r+0xac>)
 800f8b4:	6814      	ldr	r4, [r2, #0]
 800f8b6:	4621      	mov	r1, r4
 800f8b8:	b991      	cbnz	r1, 800f8e0 <_malloc_r+0x54>
 800f8ba:	4c20      	ldr	r4, [pc, #128]	; (800f93c <_malloc_r+0xb0>)
 800f8bc:	6823      	ldr	r3, [r4, #0]
 800f8be:	b91b      	cbnz	r3, 800f8c8 <_malloc_r+0x3c>
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	f000 f845 	bl	800f950 <_sbrk_r>
 800f8c6:	6020      	str	r0, [r4, #0]
 800f8c8:	4629      	mov	r1, r5
 800f8ca:	4630      	mov	r0, r6
 800f8cc:	f000 f840 	bl	800f950 <_sbrk_r>
 800f8d0:	1c43      	adds	r3, r0, #1
 800f8d2:	d124      	bne.n	800f91e <_malloc_r+0x92>
 800f8d4:	230c      	movs	r3, #12
 800f8d6:	6033      	str	r3, [r6, #0]
 800f8d8:	4630      	mov	r0, r6
 800f8da:	f000 f88e 	bl	800f9fa <__malloc_unlock>
 800f8de:	e7e4      	b.n	800f8aa <_malloc_r+0x1e>
 800f8e0:	680b      	ldr	r3, [r1, #0]
 800f8e2:	1b5b      	subs	r3, r3, r5
 800f8e4:	d418      	bmi.n	800f918 <_malloc_r+0x8c>
 800f8e6:	2b0b      	cmp	r3, #11
 800f8e8:	d90f      	bls.n	800f90a <_malloc_r+0x7e>
 800f8ea:	600b      	str	r3, [r1, #0]
 800f8ec:	50cd      	str	r5, [r1, r3]
 800f8ee:	18cc      	adds	r4, r1, r3
 800f8f0:	4630      	mov	r0, r6
 800f8f2:	f000 f882 	bl	800f9fa <__malloc_unlock>
 800f8f6:	f104 000b 	add.w	r0, r4, #11
 800f8fa:	1d23      	adds	r3, r4, #4
 800f8fc:	f020 0007 	bic.w	r0, r0, #7
 800f900:	1ac3      	subs	r3, r0, r3
 800f902:	d0d3      	beq.n	800f8ac <_malloc_r+0x20>
 800f904:	425a      	negs	r2, r3
 800f906:	50e2      	str	r2, [r4, r3]
 800f908:	e7d0      	b.n	800f8ac <_malloc_r+0x20>
 800f90a:	428c      	cmp	r4, r1
 800f90c:	684b      	ldr	r3, [r1, #4]
 800f90e:	bf16      	itet	ne
 800f910:	6063      	strne	r3, [r4, #4]
 800f912:	6013      	streq	r3, [r2, #0]
 800f914:	460c      	movne	r4, r1
 800f916:	e7eb      	b.n	800f8f0 <_malloc_r+0x64>
 800f918:	460c      	mov	r4, r1
 800f91a:	6849      	ldr	r1, [r1, #4]
 800f91c:	e7cc      	b.n	800f8b8 <_malloc_r+0x2c>
 800f91e:	1cc4      	adds	r4, r0, #3
 800f920:	f024 0403 	bic.w	r4, r4, #3
 800f924:	42a0      	cmp	r0, r4
 800f926:	d005      	beq.n	800f934 <_malloc_r+0xa8>
 800f928:	1a21      	subs	r1, r4, r0
 800f92a:	4630      	mov	r0, r6
 800f92c:	f000 f810 	bl	800f950 <_sbrk_r>
 800f930:	3001      	adds	r0, #1
 800f932:	d0cf      	beq.n	800f8d4 <_malloc_r+0x48>
 800f934:	6025      	str	r5, [r4, #0]
 800f936:	e7db      	b.n	800f8f0 <_malloc_r+0x64>
 800f938:	20004bf8 	.word	0x20004bf8
 800f93c:	20004bfc 	.word	0x20004bfc

0800f940 <realloc>:
 800f940:	4b02      	ldr	r3, [pc, #8]	; (800f94c <realloc+0xc>)
 800f942:	460a      	mov	r2, r1
 800f944:	4601      	mov	r1, r0
 800f946:	6818      	ldr	r0, [r3, #0]
 800f948:	f000 b858 	b.w	800f9fc <_realloc_r>
 800f94c:	20000190 	.word	0x20000190

0800f950 <_sbrk_r>:
 800f950:	b538      	push	{r3, r4, r5, lr}
 800f952:	4c06      	ldr	r4, [pc, #24]	; (800f96c <_sbrk_r+0x1c>)
 800f954:	2300      	movs	r3, #0
 800f956:	4605      	mov	r5, r0
 800f958:	4608      	mov	r0, r1
 800f95a:	6023      	str	r3, [r4, #0]
 800f95c:	f7f1 ff6a 	bl	8001834 <_sbrk>
 800f960:	1c43      	adds	r3, r0, #1
 800f962:	d102      	bne.n	800f96a <_sbrk_r+0x1a>
 800f964:	6823      	ldr	r3, [r4, #0]
 800f966:	b103      	cbz	r3, 800f96a <_sbrk_r+0x1a>
 800f968:	602b      	str	r3, [r5, #0]
 800f96a:	bd38      	pop	{r3, r4, r5, pc}
 800f96c:	200066a4 	.word	0x200066a4

0800f970 <_raise_r>:
 800f970:	291f      	cmp	r1, #31
 800f972:	b538      	push	{r3, r4, r5, lr}
 800f974:	4604      	mov	r4, r0
 800f976:	460d      	mov	r5, r1
 800f978:	d904      	bls.n	800f984 <_raise_r+0x14>
 800f97a:	2316      	movs	r3, #22
 800f97c:	6003      	str	r3, [r0, #0]
 800f97e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f982:	bd38      	pop	{r3, r4, r5, pc}
 800f984:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f986:	b112      	cbz	r2, 800f98e <_raise_r+0x1e>
 800f988:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f98c:	b94b      	cbnz	r3, 800f9a2 <_raise_r+0x32>
 800f98e:	4620      	mov	r0, r4
 800f990:	f000 f830 	bl	800f9f4 <_getpid_r>
 800f994:	462a      	mov	r2, r5
 800f996:	4601      	mov	r1, r0
 800f998:	4620      	mov	r0, r4
 800f99a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f99e:	f000 b817 	b.w	800f9d0 <_kill_r>
 800f9a2:	2b01      	cmp	r3, #1
 800f9a4:	d00a      	beq.n	800f9bc <_raise_r+0x4c>
 800f9a6:	1c59      	adds	r1, r3, #1
 800f9a8:	d103      	bne.n	800f9b2 <_raise_r+0x42>
 800f9aa:	2316      	movs	r3, #22
 800f9ac:	6003      	str	r3, [r0, #0]
 800f9ae:	2001      	movs	r0, #1
 800f9b0:	e7e7      	b.n	800f982 <_raise_r+0x12>
 800f9b2:	2400      	movs	r4, #0
 800f9b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f9b8:	4628      	mov	r0, r5
 800f9ba:	4798      	blx	r3
 800f9bc:	2000      	movs	r0, #0
 800f9be:	e7e0      	b.n	800f982 <_raise_r+0x12>

0800f9c0 <raise>:
 800f9c0:	4b02      	ldr	r3, [pc, #8]	; (800f9cc <raise+0xc>)
 800f9c2:	4601      	mov	r1, r0
 800f9c4:	6818      	ldr	r0, [r3, #0]
 800f9c6:	f7ff bfd3 	b.w	800f970 <_raise_r>
 800f9ca:	bf00      	nop
 800f9cc:	20000190 	.word	0x20000190

0800f9d0 <_kill_r>:
 800f9d0:	b538      	push	{r3, r4, r5, lr}
 800f9d2:	4c07      	ldr	r4, [pc, #28]	; (800f9f0 <_kill_r+0x20>)
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	4605      	mov	r5, r0
 800f9d8:	4608      	mov	r0, r1
 800f9da:	4611      	mov	r1, r2
 800f9dc:	6023      	str	r3, [r4, #0]
 800f9de:	f7f1 ff0f 	bl	8001800 <_kill>
 800f9e2:	1c43      	adds	r3, r0, #1
 800f9e4:	d102      	bne.n	800f9ec <_kill_r+0x1c>
 800f9e6:	6823      	ldr	r3, [r4, #0]
 800f9e8:	b103      	cbz	r3, 800f9ec <_kill_r+0x1c>
 800f9ea:	602b      	str	r3, [r5, #0]
 800f9ec:	bd38      	pop	{r3, r4, r5, pc}
 800f9ee:	bf00      	nop
 800f9f0:	200066a4 	.word	0x200066a4

0800f9f4 <_getpid_r>:
 800f9f4:	f7f1 befc 	b.w	80017f0 <_getpid>

0800f9f8 <__malloc_lock>:
 800f9f8:	4770      	bx	lr

0800f9fa <__malloc_unlock>:
 800f9fa:	4770      	bx	lr

0800f9fc <_realloc_r>:
 800f9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9fe:	4607      	mov	r7, r0
 800fa00:	4614      	mov	r4, r2
 800fa02:	460e      	mov	r6, r1
 800fa04:	b921      	cbnz	r1, 800fa10 <_realloc_r+0x14>
 800fa06:	4611      	mov	r1, r2
 800fa08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fa0c:	f7ff bf3e 	b.w	800f88c <_malloc_r>
 800fa10:	b922      	cbnz	r2, 800fa1c <_realloc_r+0x20>
 800fa12:	f7ff feed 	bl	800f7f0 <_free_r>
 800fa16:	4625      	mov	r5, r4
 800fa18:	4628      	mov	r0, r5
 800fa1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa1c:	f000 f814 	bl	800fa48 <_malloc_usable_size_r>
 800fa20:	42a0      	cmp	r0, r4
 800fa22:	d20f      	bcs.n	800fa44 <_realloc_r+0x48>
 800fa24:	4621      	mov	r1, r4
 800fa26:	4638      	mov	r0, r7
 800fa28:	f7ff ff30 	bl	800f88c <_malloc_r>
 800fa2c:	4605      	mov	r5, r0
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	d0f2      	beq.n	800fa18 <_realloc_r+0x1c>
 800fa32:	4631      	mov	r1, r6
 800fa34:	4622      	mov	r2, r4
 800fa36:	f7ff fec7 	bl	800f7c8 <memcpy>
 800fa3a:	4631      	mov	r1, r6
 800fa3c:	4638      	mov	r0, r7
 800fa3e:	f7ff fed7 	bl	800f7f0 <_free_r>
 800fa42:	e7e9      	b.n	800fa18 <_realloc_r+0x1c>
 800fa44:	4635      	mov	r5, r6
 800fa46:	e7e7      	b.n	800fa18 <_realloc_r+0x1c>

0800fa48 <_malloc_usable_size_r>:
 800fa48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa4c:	1f18      	subs	r0, r3, #4
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	bfbc      	itt	lt
 800fa52:	580b      	ldrlt	r3, [r1, r0]
 800fa54:	18c0      	addlt	r0, r0, r3
 800fa56:	4770      	bx	lr

0800fa58 <_init>:
 800fa58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa5a:	bf00      	nop
 800fa5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa5e:	bc08      	pop	{r3}
 800fa60:	469e      	mov	lr, r3
 800fa62:	4770      	bx	lr

0800fa64 <_fini>:
 800fa64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa66:	bf00      	nop
 800fa68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa6a:	bc08      	pop	{r3}
 800fa6c:	469e      	mov	lr, r3
 800fa6e:	4770      	bx	lr
